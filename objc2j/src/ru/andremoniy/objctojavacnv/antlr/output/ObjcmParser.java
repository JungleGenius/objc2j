// $ANTLR 3.4 Objcm.g 2012-10-03 23:46:00

package ru.andremoniy.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcmParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ASSIGN", "ASTERISK", "BLOCK", "BREAK", "BREAK_WORD", "BR_STMT", "CASE_BODY", "CASE_EXPR", "CASE_STMT", "CATEGORY", "CLASSICAL_EXPR", "CLASSICAL_EXPR_2", "COLON", "COMMA", "CONST_PREFIX", "DEFAULT_BODY", "DEFAULT_STMT", "DIGIT", "DOT", "ENCODE", "ENUM", "ENUM_PREFIX", "ESC", "EXPR", "EXPR_ADD", "EXPR_AND", "EXPR_AND_AND", "EXPR_ASSIGN", "EXPR_COND", "EXPR_EQ", "EXPR_FULL", "EXPR_MOV", "EXPR_MULT", "EXPR_NOT", "EXPR_OR", "EXPR_OR_OR", "EXPR_QUESTION", "EXPR_TYPE", "EXPR_XOR", "EXTERN", "FIELD", "FIELD_ACCESS", "FIELD_TYPE_STARTED", "FOR_IN_STMT", "FOR_STMT", "FOR_STMT_EXPR", "FUNCTION", "GENERIC", "ID", "IF_BLOCK", "IF_EXPR", "IF_STMT", "IMPLEMENTATION", "INCOMPLETE_PREFIX", "INTERFACE", "LETTER", "L_AND", "L_AND_AND", "L_AND_EQ", "L_BR", "L_DIV", "L_DIV_EQ", "L_EQ", "L_EQ_EQ", "L_FBR", "L_KBR", "L_LEFT", "L_LEFT_EQ", "L_LESS", "L_LESS_EQ", "L_MINUS", "L_MINUS_EQ", "L_MINUS_MINUS", "L_MORE", "L_MORE_EQ", "L_MULT_EQ", "L_NEQ", "L_NOT", "L_OR", "L_OR_EQ", "L_OR_OR", "L_PERC", "L_PERC_EQ", "L_PLUS", "L_PLUS_EQ", "L_PLUS_PLUS", "L_QUESTION", "L_RIGHT", "L_RIGHT_EQ", "L_TILDA", "L_XOR", "L_XOR_EQ", "MESSAGE", "METHOD", "METHOD_CALL", "METHOD_MSG", "METHOD_NAME", "MODIFIER", "MSG_LIST", "MULTI_COMMENT", "M_IMPORT", "M_TYPE_START", "NAME", "NOT", "NUMBER", "OBJECT", "OP", "OPER", "OPERATOR", "PARAM", "PREFIX", "PREPROCESSOR_DECLARATION", "PROTOCOL", "RETURN_STMT", "R_BR", "R_FBR", "R_KBR", "SELECTOR", "SELECTOR_VALUE", "SEMICOLON", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_OP", "SIZEOF", "STATIC", "STATIC_METHOD", "STATIC_PREFIX", "STATIC_START", "STATIC_TYPE", "STRING_LITERAL", "STRING_LITERAL2", "STRING_LITERAL3", "STRUCT_FIELD", "STRUCT_PREFIX", "SUPER_CLASS", "SWITCH", "SWITCH_BODY", "SWITCH_EXPRESSION", "THROW_EXCEPTION", "THROW_STMT", "TYPE", "TYPEDEF", "TYPEDEF_ELEMENT", "TYPEDEF_STRUCT", "TYPE_CONVERTION", "VALUE", "VARIABLE_INIT", "VA_ARGS", "VOID", "WHILE_EXPR", "WHILE_STMT", "WS", "'\"C\"'", "'->'", "'...'", "'@catch'", "'@encode'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@private'", "'@protocol'", "'@public'", "'@selector'", "'@synthesize'", "'@throw'", "'@try'", "'Nil'", "'__attribute__'", "'__typeof__'", "'case'", "'constructor'", "'default'", "'do'", "'else'", "'extern'", "'for'", "'if'", "'in'", "'inline'", "'nil'", "'return'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'while'"
    };

    public static final int EOF=-1;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int ASSIGN=4;
    public static final int ASTERISK=5;
    public static final int BLOCK=6;
    public static final int BREAK=7;
    public static final int BREAK_WORD=8;
    public static final int BR_STMT=9;
    public static final int CASE_BODY=10;
    public static final int CASE_EXPR=11;
    public static final int CASE_STMT=12;
    public static final int CATEGORY=13;
    public static final int CLASSICAL_EXPR=14;
    public static final int CLASSICAL_EXPR_2=15;
    public static final int COLON=16;
    public static final int COMMA=17;
    public static final int CONST_PREFIX=18;
    public static final int DEFAULT_BODY=19;
    public static final int DEFAULT_STMT=20;
    public static final int DIGIT=21;
    public static final int DOT=22;
    public static final int ENCODE=23;
    public static final int ENUM=24;
    public static final int ENUM_PREFIX=25;
    public static final int ESC=26;
    public static final int EXPR=27;
    public static final int EXPR_ADD=28;
    public static final int EXPR_AND=29;
    public static final int EXPR_AND_AND=30;
    public static final int EXPR_ASSIGN=31;
    public static final int EXPR_COND=32;
    public static final int EXPR_EQ=33;
    public static final int EXPR_FULL=34;
    public static final int EXPR_MOV=35;
    public static final int EXPR_MULT=36;
    public static final int EXPR_NOT=37;
    public static final int EXPR_OR=38;
    public static final int EXPR_OR_OR=39;
    public static final int EXPR_QUESTION=40;
    public static final int EXPR_TYPE=41;
    public static final int EXPR_XOR=42;
    public static final int EXTERN=43;
    public static final int FIELD=44;
    public static final int FIELD_ACCESS=45;
    public static final int FIELD_TYPE_STARTED=46;
    public static final int FOR_IN_STMT=47;
    public static final int FOR_STMT=48;
    public static final int FOR_STMT_EXPR=49;
    public static final int FUNCTION=50;
    public static final int GENERIC=51;
    public static final int ID=52;
    public static final int IF_BLOCK=53;
    public static final int IF_EXPR=54;
    public static final int IF_STMT=55;
    public static final int IMPLEMENTATION=56;
    public static final int INCOMPLETE_PREFIX=57;
    public static final int INTERFACE=58;
    public static final int LETTER=59;
    public static final int L_AND=60;
    public static final int L_AND_AND=61;
    public static final int L_AND_EQ=62;
    public static final int L_BR=63;
    public static final int L_DIV=64;
    public static final int L_DIV_EQ=65;
    public static final int L_EQ=66;
    public static final int L_EQ_EQ=67;
    public static final int L_FBR=68;
    public static final int L_KBR=69;
    public static final int L_LEFT=70;
    public static final int L_LEFT_EQ=71;
    public static final int L_LESS=72;
    public static final int L_LESS_EQ=73;
    public static final int L_MINUS=74;
    public static final int L_MINUS_EQ=75;
    public static final int L_MINUS_MINUS=76;
    public static final int L_MORE=77;
    public static final int L_MORE_EQ=78;
    public static final int L_MULT_EQ=79;
    public static final int L_NEQ=80;
    public static final int L_NOT=81;
    public static final int L_OR=82;
    public static final int L_OR_EQ=83;
    public static final int L_OR_OR=84;
    public static final int L_PERC=85;
    public static final int L_PERC_EQ=86;
    public static final int L_PLUS=87;
    public static final int L_PLUS_EQ=88;
    public static final int L_PLUS_PLUS=89;
    public static final int L_QUESTION=90;
    public static final int L_RIGHT=91;
    public static final int L_RIGHT_EQ=92;
    public static final int L_TILDA=93;
    public static final int L_XOR=94;
    public static final int L_XOR_EQ=95;
    public static final int MESSAGE=96;
    public static final int METHOD=97;
    public static final int METHOD_CALL=98;
    public static final int METHOD_MSG=99;
    public static final int METHOD_NAME=100;
    public static final int MODIFIER=101;
    public static final int MSG_LIST=102;
    public static final int MULTI_COMMENT=103;
    public static final int M_IMPORT=104;
    public static final int M_TYPE_START=105;
    public static final int NAME=106;
    public static final int NOT=107;
    public static final int NUMBER=108;
    public static final int OBJECT=109;
    public static final int OP=110;
    public static final int OPER=111;
    public static final int OPERATOR=112;
    public static final int PARAM=113;
    public static final int PREFIX=114;
    public static final int PREPROCESSOR_DECLARATION=115;
    public static final int PROTOCOL=116;
    public static final int RETURN_STMT=117;
    public static final int R_BR=118;
    public static final int R_FBR=119;
    public static final int R_KBR=120;
    public static final int SELECTOR=121;
    public static final int SELECTOR_VALUE=122;
    public static final int SEMICOLON=123;
    public static final int SIMPLE_EXPR=124;
    public static final int SINGLE_COMMENT=125;
    public static final int SINGLE_OP=126;
    public static final int SIZEOF=127;
    public static final int STATIC=128;
    public static final int STATIC_METHOD=129;
    public static final int STATIC_PREFIX=130;
    public static final int STATIC_START=131;
    public static final int STATIC_TYPE=132;
    public static final int STRING_LITERAL=133;
    public static final int STRING_LITERAL2=134;
    public static final int STRING_LITERAL3=135;
    public static final int STRUCT_FIELD=136;
    public static final int STRUCT_PREFIX=137;
    public static final int SUPER_CLASS=138;
    public static final int SWITCH=139;
    public static final int SWITCH_BODY=140;
    public static final int SWITCH_EXPRESSION=141;
    public static final int THROW_EXCEPTION=142;
    public static final int THROW_STMT=143;
    public static final int TYPE=144;
    public static final int TYPEDEF=145;
    public static final int TYPEDEF_ELEMENT=146;
    public static final int TYPEDEF_STRUCT=147;
    public static final int TYPE_CONVERTION=148;
    public static final int VALUE=149;
    public static final int VARIABLE_INIT=150;
    public static final int VA_ARGS=151;
    public static final int VOID=152;
    public static final int WHILE_EXPR=153;
    public static final int WHILE_STMT=154;
    public static final int WS=155;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcmParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcmParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcmParser.tokenNames; }
    public String getGrammarFileName() { return "Objcm.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // Objcm.g:110:1: code : ( code_internal )+ ;
    public final ObjcmParser.code_return code() throws RecognitionException {
        ObjcmParser.code_return retval = new ObjcmParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.code_internal_return code_internal1 =null;



        try {
            // Objcm.g:110:6: ( ( code_internal )+ )
            // Objcm.g:111:3: ( code_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:111:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CONST_PREFIX||LA1_0==ID||LA1_0==STATIC_PREFIX||LA1_0==STRUCT_PREFIX||LA1_0==VOID||(LA1_0 >= 163 && LA1_0 <= 164)||LA1_0==180) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // Objcm.g:111:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code411);
            	    code_internal1=code_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // Objcm.g:115:1: code_internal : ( operator_wrapper | implementation_wrapper );
    public final ObjcmParser.code_internal_return code_internal() throws RecognitionException {
        ObjcmParser.code_internal_return retval = new ObjcmParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_wrapper_return operator_wrapper2 =null;

        ObjcmParser.implementation_wrapper_return implementation_wrapper3 =null;



        try {
            // Objcm.g:116:2: ( operator_wrapper | implementation_wrapper )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==CONST_PREFIX||LA2_0==ID||LA2_0==STATIC_PREFIX||LA2_0==STRUCT_PREFIX||LA2_0==VOID||LA2_0==164||LA2_0==180) ) {
                alt2=1;
            }
            else if ( (LA2_0==163) ) {
                alt2=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }
            switch (alt2) {
                case 1 :
                    // Objcm.g:116:4: operator_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_operator_wrapper_in_code_internal425);
                    operator_wrapper2=operator_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, operator_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:117:5: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal431);
                    implementation_wrapper3=implementation_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_wrapper3.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class operator_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator_wrapper"
    // Objcm.g:120:1: operator_wrapper : operator -> ^( OPERATOR operator ) ;
    public final ObjcmParser.operator_wrapper_return operator_wrapper() throws RecognitionException {
        ObjcmParser.operator_wrapper_return retval = new ObjcmParser.operator_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_return operator4 =null;


        RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
        try {
            // Objcm.g:121:2: ( operator -> ^( OPERATOR operator ) )
            // Objcm.g:121:4: operator
            {
            pushFollow(FOLLOW_operator_in_operator_wrapper442);
            operator4=operator();

            state._fsp--;

            stream_operator.add(operator4.getTree());

            // AST REWRITE
            // elements: operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 121:13: -> ^( OPERATOR operator )
            {
                // Objcm.g:121:16: ^( OPERATOR operator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OPERATOR, "OPERATOR")
                , root_1);

                adaptor.addChild(root_1, stream_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_wrapper"


    public static class operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator"
    // Objcm.g:123:1: operator : ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration );
    public final ObjcmParser.operator_return operator() throws RecognitionException {
        ObjcmParser.operator_return retval = new ObjcmParser.operator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_wrapper_return extern_wrapper5 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper6 =null;

        ObjcmParser.type_start_wrapper_return type_start_wrapper7 =null;

        ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper8 =null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration9 =null;



        try {
            // Objcm.g:124:2: ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration )
            int alt3=5;
            switch ( input.LA(1) ) {
            case 180:
                {
                alt3=1;
                }
                break;
            case STATIC_PREFIX:
                {
                alt3=2;
                }
                break;
            case CONST_PREFIX:
            case ID:
            case VOID:
                {
                alt3=3;
                }
                break;
            case 164:
                {
                alt3=4;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt3=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }

            switch (alt3) {
                case 1 :
                    // Objcm.g:124:4: extern_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_wrapper_in_operator460);
                    extern_wrapper5=extern_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, extern_wrapper5.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:125:4: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_operator466);
                    static_section_wrapper6=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper6.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:126:4: type_start_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_start_wrapper_in_operator471);
                    type_start_wrapper7=type_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, type_start_wrapper7.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:127:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_operator478);
                    interface_declaration_wrapper8=interface_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_declaration_wrapper8.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:128:4: typedef_struct_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_in_operator484);
                    typedef_struct_declaration9=typedef_struct_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration9.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // Objcm.g:135:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcmParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcmParser.extern_wrapper_return retval = new ObjcmParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_return extern10 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // Objcm.g:136:3: ( extern -> ^( EXTERN ) )
            // Objcm.g:136:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper503);
            extern10=extern();

            state._fsp--;

            stream_extern.add(extern10.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 136:12: -> ^( EXTERN )
            {
                // Objcm.g:136:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // Objcm.g:139:2: extern : 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR ;
    public final ObjcmParser.extern_return extern() throws RecognitionException {
        ObjcmParser.extern_return retval = new ObjcmParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal11=null;
        Token string_literal12=null;
        Token L_FBR13=null;
        Token set14=null;
        Token R_FBR15=null;

        Object string_literal11_tree=null;
        Object string_literal12_tree=null;
        Object L_FBR13_tree=null;
        Object set14_tree=null;
        Object R_FBR15_tree=null;

        try {
            // Objcm.g:139:9: ( 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR )
            // Objcm.g:139:11: 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR
            {
            root_0 = (Object)adaptor.nil();


            string_literal11=(Token)match(input,180,FOLLOW_180_in_extern522); 
            string_literal11_tree = 
            (Object)adaptor.create(string_literal11)
            ;
            adaptor.addChild(root_0, string_literal11_tree);


            string_literal12=(Token)match(input,156,FOLLOW_156_in_extern525); 
            string_literal12_tree = 
            (Object)adaptor.create(string_literal12)
            ;
            adaptor.addChild(root_0, string_literal12_tree);


            L_FBR13=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_extern528); 
            L_FBR13_tree = 
            (Object)adaptor.create(L_FBR13)
            ;
            adaptor.addChild(root_0, L_FBR13_tree);


            set14=(Token)input.LT(1);

            if ( (input.LA(1) >= ASSIGN && input.LA(1) <= R_BR)||(input.LA(1) >= R_KBR && input.LA(1) <= 191) ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set14)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            R_FBR15=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_extern535); 
            R_FBR15_tree = 
            (Object)adaptor.create(R_FBR15)
            ;
            adaptor.addChild(root_0, R_FBR15_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // Objcm.g:141:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcmParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcmParser.implementation_wrapper_return retval = new ObjcmParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_return implementation16 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // Objcm.g:142:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // Objcm.g:142:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper547);
            implementation16=implementation();

            state._fsp--;

            stream_implementation.add(implementation16.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 142:20: -> ^( IMPLEMENTATION implementation )
            {
                // Objcm.g:142:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // Objcm.g:144:1: implementation : '@implementation' name ( category )? ( super_class )? ( implementation_body )+ '@end' ( SEMICOLON )? ;
    public final ObjcmParser.implementation_return implementation() throws RecognitionException {
        ObjcmParser.implementation_return retval = new ObjcmParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal17=null;
        Token string_literal22=null;
        Token SEMICOLON23=null;
        ObjcmParser.name_return name18 =null;

        ObjcmParser.category_return category19 =null;

        ObjcmParser.super_class_return super_class20 =null;

        ObjcmParser.implementation_body_return implementation_body21 =null;


        Object string_literal17_tree=null;
        Object string_literal22_tree=null;
        Object SEMICOLON23_tree=null;

        try {
            // Objcm.g:145:2: ( '@implementation' name ( category )? ( super_class )? ( implementation_body )+ '@end' ( SEMICOLON )? )
            // Objcm.g:145:4: '@implementation' name ( category )? ( super_class )? ( implementation_body )+ '@end' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal17=(Token)match(input,163,FOLLOW_163_in_implementation566); 
            string_literal17_tree = 
            (Object)adaptor.create(string_literal17)
            ;
            adaptor.addChild(root_0, string_literal17_tree);


            pushFollow(FOLLOW_name_in_implementation569);
            name18=name();

            state._fsp--;

            adaptor.addChild(root_0, name18.getTree());

            // Objcm.g:145:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==L_BR) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // Objcm.g:145:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation572);
                    category19=category();

                    state._fsp--;

                    adaptor.addChild(root_0, category19.getTree());

                    }
                    break;

            }


            // Objcm.g:145:39: ( super_class )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==COLON) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // Objcm.g:145:39: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_implementation575);
                    super_class20=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class20.getTree());

                    }
                    break;

            }


            // Objcm.g:146:3: ( implementation_body )+
            int cnt6=0;
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==ID||LA6_0==L_MINUS||LA6_0==L_PLUS||LA6_0==STATIC_PREFIX||LA6_0==STRUCT_PREFIX||LA6_0==VOID||LA6_0==169||LA6_0==180||LA6_0==188) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // Objcm.g:146:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation580);
            	    implementation_body21=implementation_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, implementation_body21.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt6 >= 1 ) break loop6;
                        EarlyExitException eee =
                            new EarlyExitException(6, input);
                        throw eee;
                }
                cnt6++;
            } while (true);


            string_literal22=(Token)match(input,161,FOLLOW_161_in_implementation585); 
            string_literal22_tree = 
            (Object)adaptor.create(string_literal22)
            ;
            adaptor.addChild(root_0, string_literal22_tree);


            // Objcm.g:147:11: ( SEMICOLON )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==SEMICOLON) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // Objcm.g:147:11: SEMICOLON
                    {
                    SEMICOLON23=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation588); 
                    SEMICOLON23_tree = 
                    (Object)adaptor.create(SEMICOLON23)
                    ;
                    adaptor.addChild(root_0, SEMICOLON23_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // Objcm.g:150:1: category : L_BR name R_BR -> ^( CATEGORY name ) ;
    public final ObjcmParser.category_return category() throws RecognitionException {
        ObjcmParser.category_return retval = new ObjcmParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR24=null;
        Token R_BR26=null;
        ObjcmParser.name_return name25 =null;


        Object L_BR24_tree=null;
        Object R_BR26_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // Objcm.g:150:9: ( L_BR name R_BR -> ^( CATEGORY name ) )
            // Objcm.g:150:11: L_BR name R_BR
            {
            L_BR24=(Token)match(input,L_BR,FOLLOW_L_BR_in_category600);  
            stream_L_BR.add(L_BR24);


            pushFollow(FOLLOW_name_in_category603);
            name25=name();

            state._fsp--;

            stream_name.add(name25.getTree());

            R_BR26=(Token)match(input,R_BR,FOLLOW_R_BR_in_category606);  
            stream_R_BR.add(R_BR26);


            // AST REWRITE
            // elements: name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 150:28: -> ^( CATEGORY name )
            {
                // Objcm.g:150:31: ^( CATEGORY name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // Objcm.g:152:1: implementation_body : ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper );
    public final ObjcmParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcmParser.implementation_body_return retval = new ObjcmParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.directives_return directives27 =null;

        ObjcmParser.typedef_return typedef28 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper29 =null;

        ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper30 =null;

        ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper31 =null;

        ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper32 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper33 =null;



        try {
            // Objcm.g:153:2: ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper )
            int alt8=7;
            switch ( input.LA(1) ) {
            case 169:
                {
                alt8=1;
                }
                break;
            case 188:
                {
                alt8=2;
                }
                break;
            case STATIC_PREFIX:
                {
                alt8=3;
                }
                break;
            case L_MINUS:
            case L_PLUS:
                {
                alt8=4;
                }
                break;
            case ID:
            case VOID:
                {
                alt8=5;
                }
                break;
            case 180:
                {
                alt8=6;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt8=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }

            switch (alt8) {
                case 1 :
                    // Objcm.g:153:4: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body624);
                    directives27=directives();

                    state._fsp--;

                    adaptor.addChild(root_0, directives27.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:154:5: typedef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_in_implementation_body630);
                    typedef28=typedef();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef28.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:155:5: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_implementation_body636);
                    static_section_wrapper29=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper29.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:156:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body642);
                    implementation_method_wrapper30=implementation_method_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper30.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:158:4: field_type_started_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_type_started_wrapper_in_implementation_body648);
                    field_type_started_wrapper31=field_type_started_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_type_started_wrapper31.getTree());

                    }
                    break;
                case 6 :
                    // Objcm.g:159:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_implementation_body654);
                    field_declaration_wrapper32=field_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_wrapper32.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:160:4: typedef_struct_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body659);
                    typedef_struct_declaration_wrapper33=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // Objcm.g:163:1: directives : synthesize ;
    public final ObjcmParser.directives_return directives() throws RecognitionException {
        ObjcmParser.directives_return retval = new ObjcmParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.synthesize_return synthesize34 =null;



        try {
            // Objcm.g:164:2: ( synthesize )
            // Objcm.g:164:4: synthesize
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_synthesize_in_directives670);
            synthesize34=synthesize();

            state._fsp--;

            adaptor.addChild(root_0, synthesize34.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // Objcm.g:167:1: synthesize : '@synthesize' ID SEMICOLON ;
    public final ObjcmParser.synthesize_return synthesize() throws RecognitionException {
        ObjcmParser.synthesize_return retval = new ObjcmParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal35=null;
        Token ID36=null;
        Token SEMICOLON37=null;

        Object string_literal35_tree=null;
        Object ID36_tree=null;
        Object SEMICOLON37_tree=null;

        try {
            // Objcm.g:168:2: ( '@synthesize' ID SEMICOLON )
            // Objcm.g:168:4: '@synthesize' ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal35=(Token)match(input,169,FOLLOW_169_in_synthesize683); 
            string_literal35_tree = 
            (Object)adaptor.create(string_literal35)
            ;
            adaptor.addChild(root_0, string_literal35_tree);


            ID36=(Token)match(input,ID,FOLLOW_ID_in_synthesize686); 
            ID36_tree = 
            (Object)adaptor.create(ID36)
            ;
            adaptor.addChild(root_0, ID36_tree);


            SEMICOLON37=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synthesize689); 
            SEMICOLON37_tree = 
            (Object)adaptor.create(SEMICOLON37)
            ;
            adaptor.addChild(root_0, SEMICOLON37_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class typedef_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef"
    // Objcm.g:171:1: typedef : 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper ) ;
    public final ObjcmParser.typedef_return typedef() throws RecognitionException {
        ObjcmParser.typedef_return retval = new ObjcmParser.typedef_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal38=null;
        ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper39 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper40 =null;


        Object string_literal38_tree=null;

        try {
            // Objcm.g:171:9: ( 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper ) )
            // Objcm.g:171:11: 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            string_literal38=(Token)match(input,188,FOLLOW_188_in_typedef701); 
            string_literal38_tree = 
            (Object)adaptor.create(string_literal38)
            ;
            adaptor.addChild(root_0, string_literal38_tree);


            // Objcm.g:171:22: ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==ENUM_PREFIX) ) {
                alt9=1;
            }
            else if ( (LA9_0==STRUCT_PREFIX) ) {
                alt9=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // Objcm.g:171:23: typedef_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_typedef705);
                    typedef_declaration_wrapper39=typedef_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_declaration_wrapper39.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:171:53: typedef_struct_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_typedef709);
                    typedef_struct_declaration_wrapper40=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper40.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef"


    public static class static_section_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section_wrapper"
    // Objcm.g:174:1: static_section_wrapper : static_section -> ^( STATIC static_section ) ;
    public final ObjcmParser.static_section_wrapper_return static_section_wrapper() throws RecognitionException {
        ObjcmParser.static_section_wrapper_return retval = new ObjcmParser.static_section_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_section_return static_section41 =null;


        RewriteRuleSubtreeStream stream_static_section=new RewriteRuleSubtreeStream(adaptor,"rule static_section");
        try {
            // Objcm.g:175:2: ( static_section -> ^( STATIC static_section ) )
            // Objcm.g:175:4: static_section
            {
            pushFollow(FOLLOW_static_section_in_static_section_wrapper724);
            static_section41=static_section();

            state._fsp--;

            stream_static_section.add(static_section41.getTree());

            // AST REWRITE
            // elements: static_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 175:19: -> ^( STATIC static_section )
            {
                // Objcm.g:175:22: ^( STATIC static_section )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC, "STATIC")
                , root_1);

                adaptor.addChild(root_1, stream_static_section.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section_wrapper"


    public static class static_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section"
    // Objcm.g:177:1: static_section : STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 ;
    public final ObjcmParser.static_section_return static_section() throws RecognitionException {
        ObjcmParser.static_section_return retval = new ObjcmParser.static_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX42=null;
        Token CONST_PREFIX43=null;
        Token STRUCT_PREFIX44=null;
        Token ENUM_PREFIX45=null;
        ObjcmParser.static_section2_return static_section246 =null;


        Object STATIC_PREFIX42_tree=null;
        Object CONST_PREFIX43_tree=null;
        Object STRUCT_PREFIX44_tree=null;
        Object ENUM_PREFIX45_tree=null;

        try {
            // Objcm.g:178:2: ( STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 )
            // Objcm.g:178:4: STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX42=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_section744); 
            STATIC_PREFIX42_tree = 
            (Object)adaptor.create(STATIC_PREFIX42)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX42_tree);


            // Objcm.g:178:18: ( CONST_PREFIX )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==CONST_PREFIX) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // Objcm.g:178:18: CONST_PREFIX
                    {
                    CONST_PREFIX43=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_section746); 
                    CONST_PREFIX43_tree = 
                    (Object)adaptor.create(CONST_PREFIX43)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX43_tree);


                    }
                    break;

            }


            // Objcm.g:178:32: ( STRUCT_PREFIX )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==STRUCT_PREFIX) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // Objcm.g:178:32: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX44=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_static_section749); 
                    STRUCT_PREFIX44_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX44)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX44_tree);


                    }
                    break;

            }


            // Objcm.g:178:47: ( ENUM_PREFIX )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ENUM_PREFIX) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // Objcm.g:178:47: ENUM_PREFIX
                    {
                    ENUM_PREFIX45=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_static_section752); 
                    ENUM_PREFIX45_tree = 
                    (Object)adaptor.create(ENUM_PREFIX45)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX45_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_static_section2_in_static_section755);
            static_section246=static_section2();

            state._fsp--;

            adaptor.addChild(root_0, static_section246.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section"


    public static class static_section2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section2"
    // Objcm.g:180:1: static_section2 : ( inline_section | implementation_method_wrapper2 | static_section3 );
    public final ObjcmParser.static_section2_return static_section2() throws RecognitionException {
        ObjcmParser.static_section2_return retval = new ObjcmParser.static_section2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.inline_section_return inline_section47 =null;

        ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper248 =null;

        ObjcmParser.static_section3_return static_section349 =null;



        try {
            // Objcm.g:181:2: ( inline_section | implementation_method_wrapper2 | static_section3 )
            int alt13=3;
            switch ( input.LA(1) ) {
            case 184:
                {
                alt13=1;
                }
                break;
            case L_FBR:
            case SEMICOLON:
                {
                alt13=2;
                }
                break;
            case ID:
            case VOID:
                {
                alt13=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }

            switch (alt13) {
                case 1 :
                    // Objcm.g:181:4: inline_section
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_inline_section_in_static_section2764);
                    inline_section47=inline_section();

                    state._fsp--;

                    adaptor.addChild(root_0, inline_section47.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:182:5: implementation_method_wrapper2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper2_in_static_section2771);
                    implementation_method_wrapper248=implementation_method_wrapper2();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper248.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:183:5: static_section3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section3_in_static_section2778);
                    static_section349=static_section3();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section349.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section2"


    public static class inline_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_section"
    // Objcm.g:186:1: inline_section : 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) ;
    public final ObjcmParser.inline_section_return inline_section() throws RecognitionException {
        ObjcmParser.inline_section_return retval = new ObjcmParser.inline_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal50=null;
        Token SEMICOLON55=null;
        ObjcmParser.field_type_return field_type51 =null;

        ObjcmParser.name_return name52 =null;

        ObjcmParser.method_params2_return method_params253 =null;

        ObjcmParser.block_wrapper_return block_wrapper54 =null;


        Object string_literal50_tree=null;
        Object SEMICOLON55_tree=null;

        try {
            // Objcm.g:187:2: ( 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) )
            // Objcm.g:187:4: 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON )
            {
            root_0 = (Object)adaptor.nil();


            string_literal50=(Token)match(input,184,FOLLOW_184_in_inline_section790); 
            string_literal50_tree = 
            (Object)adaptor.create(string_literal50)
            ;
            adaptor.addChild(root_0, string_literal50_tree);


            pushFollow(FOLLOW_field_type_in_inline_section793);
            field_type51=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type51.getTree());

            pushFollow(FOLLOW_name_in_inline_section795);
            name52=name();

            state._fsp--;

            adaptor.addChild(root_0, name52.getTree());

            // Objcm.g:187:31: ( method_params2 )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==L_BR) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // Objcm.g:187:31: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_inline_section798);
                    method_params253=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params253.getTree());

                    }
                    break;

            }


            // Objcm.g:187:47: ( block_wrapper | SEMICOLON )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==L_FBR) ) {
                alt15=1;
            }
            else if ( (LA15_0==SEMICOLON) ) {
                alt15=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;

            }
            switch (alt15) {
                case 1 :
                    // Objcm.g:187:48: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_inline_section802);
                    block_wrapper54=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper54.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:187:64: SEMICOLON
                    {
                    SEMICOLON55=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inline_section806); 
                    SEMICOLON55_tree = 
                    (Object)adaptor.create(SEMICOLON55)
                    ;
                    adaptor.addChild(root_0, SEMICOLON55_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_section"


    public static class static_section3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section3"
    // Objcm.g:189:1: static_section3 : field_type name ( indexed )* static_end ;
    public final ObjcmParser.static_section3_return static_section3() throws RecognitionException {
        ObjcmParser.static_section3_return retval = new ObjcmParser.static_section3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type56 =null;

        ObjcmParser.name_return name57 =null;

        ObjcmParser.indexed_return indexed58 =null;

        ObjcmParser.static_end_return static_end59 =null;



        try {
            // Objcm.g:190:2: ( field_type name ( indexed )* static_end )
            // Objcm.g:190:4: field_type name ( indexed )* static_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_static_section3817);
            field_type56=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type56.getTree());

            pushFollow(FOLLOW_name_in_static_section3819);
            name57=name();

            state._fsp--;

            adaptor.addChild(root_0, name57.getTree());

            // Objcm.g:190:20: ( indexed )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==L_KBR) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // Objcm.g:190:20: indexed
            	    {
            	    pushFollow(FOLLOW_indexed_in_static_section3821);
            	    indexed58=indexed();

            	    state._fsp--;

            	    adaptor.addChild(root_0, indexed58.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            pushFollow(FOLLOW_static_end_in_static_section3825);
            static_end59=static_end();

            state._fsp--;

            adaptor.addChild(root_0, static_end59.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section3"


    public static class static_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_end"
    // Objcm.g:193:1: static_end : ( implementation_method_wrapper3 | field_end );
    public final ObjcmParser.static_end_return static_end() throws RecognitionException {
        ObjcmParser.static_end_return retval = new ObjcmParser.static_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper360 =null;

        ObjcmParser.field_end_return field_end61 =null;



        try {
            // Objcm.g:194:2: ( implementation_method_wrapper3 | field_end )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==L_BR) ) {
                alt17=1;
            }
            else if ( (LA17_0==L_EQ||LA17_0==SEMICOLON) ) {
                alt17=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // Objcm.g:194:4: implementation_method_wrapper3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper3_in_static_end837);
                    implementation_method_wrapper360=implementation_method_wrapper3();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper360.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:195:5: field_end
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_end_in_static_end843);
                    field_end61=field_end();

                    state._fsp--;

                    adaptor.addChild(root_0, field_end61.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_end"


    public static class field_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end"
    // Objcm.g:197:1: field_end : field_end_internal -> ^( FIELD field_end_internal ) ;
    public final ObjcmParser.field_end_return field_end() throws RecognitionException {
        ObjcmParser.field_end_return retval = new ObjcmParser.field_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_end_internal_return field_end_internal62 =null;


        RewriteRuleSubtreeStream stream_field_end_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_end_internal");
        try {
            // Objcm.g:198:2: ( field_end_internal -> ^( FIELD field_end_internal ) )
            // Objcm.g:198:4: field_end_internal
            {
            pushFollow(FOLLOW_field_end_internal_in_field_end854);
            field_end_internal62=field_end_internal();

            state._fsp--;

            stream_field_end_internal.add(field_end_internal62.getTree());

            // AST REWRITE
            // elements: field_end_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 198:23: -> ^( FIELD field_end_internal )
            {
                // Objcm.g:198:26: ^( FIELD field_end_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_end_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end"


    public static class field_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end_internal"
    // Objcm.g:200:1: field_end_internal : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_end_internal_return field_end_internal() throws RecognitionException {
        ObjcmParser.field_end_internal_return retval = new ObjcmParser.field_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON64=null;
        ObjcmParser.value_set_return value_set63 =null;


        Object SEMICOLON64_tree=null;

        try {
            // Objcm.g:201:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:201:4: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:201:4: ( value_set )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==L_EQ) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // Objcm.g:201:4: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_end_internal872);
                    value_set63=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set63.getTree());

                    }
                    break;

            }


            SEMICOLON64=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_end_internal875); 
            SEMICOLON64_tree = 
            (Object)adaptor.create(SEMICOLON64)
            ;
            adaptor.addChild(root_0, SEMICOLON64_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end_internal"


    public static class implementation_method_wrapper3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper3"
    // Objcm.g:203:1: implementation_method_wrapper3 : implementation_method3 -> ^( METHOD implementation_method3 ) ;
    public final ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper3() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper3_return retval = new ObjcmParser.implementation_method_wrapper3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method3_return implementation_method365 =null;


        RewriteRuleSubtreeStream stream_implementation_method3=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method3");
        try {
            // Objcm.g:204:2: ( implementation_method3 -> ^( METHOD implementation_method3 ) )
            // Objcm.g:204:4: implementation_method3
            {
            pushFollow(FOLLOW_implementation_method3_in_implementation_method_wrapper3887);
            implementation_method365=implementation_method3();

            state._fsp--;

            stream_implementation_method3.add(implementation_method365.getTree());

            // AST REWRITE
            // elements: implementation_method3
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 204:27: -> ^( METHOD implementation_method3 )
            {
                // Objcm.g:204:30: ^( METHOD implementation_method3 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method3.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper3"


    public static class implementation_method3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method3"
    // Objcm.g:206:1: implementation_method3 : method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? ;
    public final ObjcmParser.implementation_method3_return implementation_method3() throws RecognitionException {
        ObjcmParser.implementation_method3_return retval = new ObjcmParser.implementation_method3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON67=null;
        ObjcmParser.method_header_body3_return method_header_body366 =null;

        ObjcmParser.attribute_return attribute68 =null;

        ObjcmParser.block_wrapper_return block_wrapper69 =null;


        Object SEMICOLON67_tree=null;

        try {
            // Objcm.g:207:2: ( method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? )
            // Objcm.g:207:4: method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body3_in_implementation_method3905);
            method_header_body366=method_header_body3();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body366.getTree());

            // Objcm.g:207:25: ( SEMICOLON )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==SEMICOLON) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // Objcm.g:207:25: SEMICOLON
                    {
                    SEMICOLON67=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method3908); 
                    SEMICOLON67_tree = 
                    (Object)adaptor.create(SEMICOLON67)
                    ;
                    adaptor.addChild(root_0, SEMICOLON67_tree);


                    }
                    break;

            }


            // Objcm.g:208:3: ( attribute )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==173) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // Objcm.g:208:3: attribute
                    {
                    pushFollow(FOLLOW_attribute_in_implementation_method3913);
                    attribute68=attribute();

                    state._fsp--;

                    adaptor.addChild(root_0, attribute68.getTree());

                    }
                    break;

            }


            // Objcm.g:209:3: ( block_wrapper )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==L_FBR) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // Objcm.g:209:3: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_implementation_method3918);
                    block_wrapper69=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper69.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method3"


    public static class attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute"
    // Objcm.g:212:1: attribute : '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON ;
    public final ObjcmParser.attribute_return attribute() throws RecognitionException {
        ObjcmParser.attribute_return retval = new ObjcmParser.attribute_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal70=null;
        Token L_BR71=null;
        Token L_BR72=null;
        Token string_literal73=null;
        Token R_BR74=null;
        Token R_BR75=null;
        Token SEMICOLON76=null;

        Object string_literal70_tree=null;
        Object L_BR71_tree=null;
        Object L_BR72_tree=null;
        Object string_literal73_tree=null;
        Object R_BR74_tree=null;
        Object R_BR75_tree=null;
        Object SEMICOLON76_tree=null;

        try {
            // Objcm.g:213:2: ( '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON )
            // Objcm.g:213:4: '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal70=(Token)match(input,173,FOLLOW_173_in_attribute931); 
            string_literal70_tree = 
            (Object)adaptor.create(string_literal70)
            ;
            adaptor.addChild(root_0, string_literal70_tree);


            L_BR71=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute934); 
            L_BR71_tree = 
            (Object)adaptor.create(L_BR71)
            ;
            adaptor.addChild(root_0, L_BR71_tree);


            L_BR72=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute937); 
            L_BR72_tree = 
            (Object)adaptor.create(L_BR72)
            ;
            adaptor.addChild(root_0, L_BR72_tree);


            string_literal73=(Token)match(input,176,FOLLOW_176_in_attribute940); 
            string_literal73_tree = 
            (Object)adaptor.create(string_literal73)
            ;
            adaptor.addChild(root_0, string_literal73_tree);


            R_BR74=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute943); 
            R_BR74_tree = 
            (Object)adaptor.create(R_BR74)
            ;
            adaptor.addChild(root_0, R_BR74_tree);


            R_BR75=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute946); 
            R_BR75_tree = 
            (Object)adaptor.create(R_BR75)
            ;
            adaptor.addChild(root_0, R_BR75_tree);


            SEMICOLON76=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_attribute949); 
            SEMICOLON76_tree = 
            (Object)adaptor.create(SEMICOLON76)
            ;
            adaptor.addChild(root_0, SEMICOLON76_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute"


    public static class implementation_method2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method2"
    // Objcm.g:215:1: implementation_method2 : ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method2_return implementation_method2() throws RecognitionException {
        ObjcmParser.implementation_method2_return retval = new ObjcmParser.implementation_method2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON77=null;
        ObjcmParser.block_wrapper_return block_wrapper78 =null;


        Object SEMICOLON77_tree=null;

        try {
            // Objcm.g:216:2: ( ( SEMICOLON )? block_wrapper )
            // Objcm.g:216:5: ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:216:5: ( SEMICOLON )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==SEMICOLON) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // Objcm.g:216:5: SEMICOLON
                    {
                    SEMICOLON77=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method2961); 
                    SEMICOLON77_tree = 
                    (Object)adaptor.create(SEMICOLON77)
                    ;
                    adaptor.addChild(root_0, SEMICOLON77_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method2966);
            block_wrapper78=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper78.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method2"


    public static class field_type_started_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started_wrapper"
    // Objcm.g:220:1: field_type_started_wrapper : field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) ;
    public final ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper() throws RecognitionException {
        ObjcmParser.field_type_started_wrapper_return retval = new ObjcmParser.field_type_started_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_started_return field_type_started79 =null;


        RewriteRuleSubtreeStream stream_field_type_started=new RewriteRuleSubtreeStream(adaptor,"rule field_type_started");
        try {
            // Objcm.g:221:2: ( field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) )
            // Objcm.g:221:4: field_type_started
            {
            pushFollow(FOLLOW_field_type_started_in_field_type_started_wrapper978);
            field_type_started79=field_type_started();

            state._fsp--;

            stream_field_type_started.add(field_type_started79.getTree());

            // AST REWRITE
            // elements: field_type_started
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 221:23: -> ^( FIELD_TYPE_STARTED field_type_started )
            {
                // Objcm.g:221:26: ^( FIELD_TYPE_STARTED field_type_started )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_TYPE_STARTED, "FIELD_TYPE_STARTED")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_started.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started_wrapper"


    public static class field_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started"
    // Objcm.g:223:1: field_type_started : field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) ;
    public final ObjcmParser.field_type_started_return field_type_started() throws RecognitionException {
        ObjcmParser.field_type_started_return retval = new ObjcmParser.field_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type80 =null;

        ObjcmParser.name_return name81 =null;

        ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper82 =null;

        ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper83 =null;



        try {
            // Objcm.g:224:2: ( field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) )
            // Objcm.g:224:4: field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_field_type_started997);
            field_type80=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type80.getTree());

            pushFollow(FOLLOW_name_in_field_type_started999);
            name81=name();

            state._fsp--;

            adaptor.addChild(root_0, name81.getTree());

            // Objcm.g:224:20: ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==L_BR) ) {
                alt23=1;
            }
            else if ( (LA23_0==L_EQ||LA23_0==SEMICOLON) ) {
                alt23=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }
            switch (alt23) {
                case 1 :
                    // Objcm.g:224:21: classic_method_declaration_wrapper
                    {
                    pushFollow(FOLLOW_classic_method_declaration_wrapper_in_field_type_started1002);
                    classic_method_declaration_wrapper82=classic_method_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, classic_method_declaration_wrapper82.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:224:58: field_declaration_end_wrapper
                    {
                    pushFollow(FOLLOW_field_declaration_end_wrapper_in_field_type_started1006);
                    field_declaration_end_wrapper83=field_declaration_end_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_end_wrapper83.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started"


    public static class field_declaration_end_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end_wrapper"
    // Objcm.g:226:1: field_declaration_end_wrapper : field_declaration_end -> ^( FIELD field_declaration_end ) ;
    public final ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_end_wrapper_return retval = new ObjcmParser.field_declaration_end_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_end_return field_declaration_end84 =null;


        RewriteRuleSubtreeStream stream_field_declaration_end=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_end");
        try {
            // Objcm.g:227:2: ( field_declaration_end -> ^( FIELD field_declaration_end ) )
            // Objcm.g:227:4: field_declaration_end
            {
            pushFollow(FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1017);
            field_declaration_end84=field_declaration_end();

            state._fsp--;

            stream_field_declaration_end.add(field_declaration_end84.getTree());

            // AST REWRITE
            // elements: field_declaration_end
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 227:26: -> ^( FIELD field_declaration_end )
            {
                // Objcm.g:227:29: ^( FIELD field_declaration_end )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_end.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end_wrapper"


    public static class classic_method_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration_wrapper"
    // Objcm.g:229:1: classic_method_declaration_wrapper : classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) ;
    public final ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper() throws RecognitionException {
        ObjcmParser.classic_method_declaration_wrapper_return retval = new ObjcmParser.classic_method_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classic_method_declaration_return classic_method_declaration85 =null;


        RewriteRuleSubtreeStream stream_classic_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classic_method_declaration");
        try {
            // Objcm.g:230:2: ( classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) )
            // Objcm.g:230:4: classic_method_declaration
            {
            pushFollow(FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1035);
            classic_method_declaration85=classic_method_declaration();

            state._fsp--;

            stream_classic_method_declaration.add(classic_method_declaration85.getTree());

            // AST REWRITE
            // elements: classic_method_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 230:31: -> ^( STATIC_METHOD classic_method_declaration )
            {
                // Objcm.g:230:34: ^( STATIC_METHOD classic_method_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_classic_method_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration_wrapper"


    public static class classic_method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration"
    // Objcm.g:232:1: classic_method_declaration : method_params2 block_wrapper ;
    public final ObjcmParser.classic_method_declaration_return classic_method_declaration() throws RecognitionException {
        ObjcmParser.classic_method_declaration_return retval = new ObjcmParser.classic_method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params286 =null;

        ObjcmParser.block_wrapper_return block_wrapper87 =null;



        try {
            // Objcm.g:234:2: ( method_params2 block_wrapper )
            // Objcm.g:234:4: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_classic_method_declaration1055);
            method_params286=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params286.getTree());

            pushFollow(FOLLOW_block_wrapper_in_classic_method_declaration1060);
            block_wrapper87=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper87.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // Objcm.g:238:1: implementation_method_wrapper : implementation_method -> ^( METHOD implementation_method ) ;
    public final ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper_return retval = new ObjcmParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_return implementation_method88 =null;


        RewriteRuleSubtreeStream stream_implementation_method=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method");
        try {
            // Objcm.g:239:2: ( implementation_method -> ^( METHOD implementation_method ) )
            // Objcm.g:239:4: implementation_method
            {
            pushFollow(FOLLOW_implementation_method_in_implementation_method_wrapper1073);
            implementation_method88=implementation_method();

            state._fsp--;

            stream_implementation_method.add(implementation_method88.getTree());

            // AST REWRITE
            // elements: implementation_method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 239:26: -> ^( METHOD implementation_method )
            {
                // Objcm.g:239:29: ^( METHOD implementation_method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class implementation_method_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper2"
    // Objcm.g:241:1: implementation_method_wrapper2 : implementation_method2 -> ^( METHOD implementation_method2 ) ;
    public final ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper2() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper2_return retval = new ObjcmParser.implementation_method_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method2_return implementation_method289 =null;


        RewriteRuleSubtreeStream stream_implementation_method2=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method2");
        try {
            // Objcm.g:242:2: ( implementation_method2 -> ^( METHOD implementation_method2 ) )
            // Objcm.g:242:4: implementation_method2
            {
            pushFollow(FOLLOW_implementation_method2_in_implementation_method_wrapper21090);
            implementation_method289=implementation_method2();

            state._fsp--;

            stream_implementation_method2.add(implementation_method289.getTree());

            // AST REWRITE
            // elements: implementation_method2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 242:27: -> ^( METHOD implementation_method2 )
            {
                // Objcm.g:242:30: ^( METHOD implementation_method2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper2"


    public static class implementation_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method"
    // Objcm.g:244:1: implementation_method : method_header_body ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method_return implementation_method() throws RecognitionException {
        ObjcmParser.implementation_method_return retval = new ObjcmParser.implementation_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON91=null;
        ObjcmParser.method_header_body_return method_header_body90 =null;

        ObjcmParser.block_wrapper_return block_wrapper92 =null;


        Object SEMICOLON91_tree=null;

        try {
            // Objcm.g:245:2: ( method_header_body ( SEMICOLON )? block_wrapper )
            // Objcm.g:245:4: method_header_body ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_implementation_method1107);
            method_header_body90=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body90.getTree());

            // Objcm.g:245:23: ( SEMICOLON )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==SEMICOLON) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // Objcm.g:245:23: SEMICOLON
                    {
                    SEMICOLON91=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method1109); 
                    SEMICOLON91_tree = 
                    (Object)adaptor.create(SEMICOLON91)
                    ;
                    adaptor.addChild(root_0, SEMICOLON91_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method1114);
            block_wrapper92=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper92.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method"


    public static class block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_wrapper"
    // Objcm.g:249:1: block_wrapper : block -> ^( BLOCK block ) ;
    public final ObjcmParser.block_wrapper_return block_wrapper() throws RecognitionException {
        ObjcmParser.block_wrapper_return retval = new ObjcmParser.block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_return block93 =null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // Objcm.g:250:2: ( block -> ^( BLOCK block ) )
            // Objcm.g:250:4: block
            {
            pushFollow(FOLLOW_block_in_block_wrapper1127);
            block93=block();

            state._fsp--;

            stream_block.add(block93.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 250:10: -> ^( BLOCK block )
            {
                // Objcm.g:250:13: ^( BLOCK block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK, "BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_wrapper"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // Objcm.g:252:1: block : L_FBR ( block_internal_full | block )* R_FBR ;
    public final ObjcmParser.block_return block() throws RecognitionException {
        ObjcmParser.block_return retval = new ObjcmParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR94=null;
        Token R_FBR97=null;
        ObjcmParser.block_internal_full_return block_internal_full95 =null;

        ObjcmParser.block_return block96 =null;


        Object L_FBR94_tree=null;
        Object R_FBR97_tree=null;

        try {
            // Objcm.g:252:7: ( L_FBR ( block_internal_full | block )* R_FBR )
            // Objcm.g:253:3: L_FBR ( block_internal_full | block )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR94=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block1149); 
            L_FBR94_tree = 
            (Object)adaptor.create(L_FBR94)
            ;
            adaptor.addChild(root_0, L_FBR94_tree);


            // Objcm.g:254:4: ( block_internal_full | block )*
            loop25:
            do {
                int alt25=3;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==ASTERISK||LA25_0==BREAK_WORD||LA25_0==CONST_PREFIX||LA25_0==ENUM_PREFIX||LA25_0==ID||LA25_0==L_AND||LA25_0==L_BR||LA25_0==L_KBR||LA25_0==L_MINUS||LA25_0==L_MINUS_MINUS||LA25_0==L_NOT||LA25_0==L_PLUS||LA25_0==L_PLUS_PLUS||LA25_0==L_TILDA||LA25_0==NUMBER||LA25_0==SEMICOLON||(LA25_0 >= SINGLE_OP && LA25_0 <= SIZEOF)||LA25_0==STATIC_PREFIX||(LA25_0 >= STRING_LITERAL && LA25_0 <= STRING_LITERAL3)||LA25_0==STRUCT_PREFIX||LA25_0==VOID||LA25_0==160||LA25_0==166||LA25_0==168||(LA25_0 >= 170 && LA25_0 <= 172)||LA25_0==174||(LA25_0 >= 178 && LA25_0 <= 179)||(LA25_0 >= 181 && LA25_0 <= 183)||(LA25_0 >= 185 && LA25_0 <= 187)||(LA25_0 >= 190 && LA25_0 <= 191)) ) {
                    alt25=1;
                }
                else if ( (LA25_0==L_FBR) ) {
                    alt25=2;
                }


                switch (alt25) {
            	case 1 :
            	    // Objcm.g:254:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block1155);
            	    block_internal_full95=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full95.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:254:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block1159);
            	    block96=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block96.getTree());

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);


            R_FBR97=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block1167); 
            R_FBR97_tree = 
            (Object)adaptor.create(R_FBR97)
            ;
            adaptor.addChild(root_0, R_FBR97_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_case_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_case"
    // Objcm.g:258:1: block_case : L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR ;
    public final ObjcmParser.block_case_return block_case() throws RecognitionException {
        ObjcmParser.block_case_return retval = new ObjcmParser.block_case_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR98=null;
        Token R_FBR102=null;
        ObjcmParser.block_internal_full_return block_internal_full99 =null;

        ObjcmParser.block_return block100 =null;

        ObjcmParser.default_stmt_return default_stmt101 =null;


        Object L_FBR98_tree=null;
        Object R_FBR102_tree=null;

        try {
            // Objcm.g:259:2: ( L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR )
            // Objcm.g:260:3: L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR98=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block_case1182); 
            L_FBR98_tree = 
            (Object)adaptor.create(L_FBR98)
            ;
            adaptor.addChild(root_0, L_FBR98_tree);


            // Objcm.g:261:4: ( block_internal_full | block )*
            loop26:
            do {
                int alt26=3;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==ASTERISK||LA26_0==BREAK_WORD||LA26_0==CONST_PREFIX||LA26_0==ENUM_PREFIX||LA26_0==ID||LA26_0==L_AND||LA26_0==L_BR||LA26_0==L_KBR||LA26_0==L_MINUS||LA26_0==L_MINUS_MINUS||LA26_0==L_NOT||LA26_0==L_PLUS||LA26_0==L_PLUS_PLUS||LA26_0==L_TILDA||LA26_0==NUMBER||LA26_0==SEMICOLON||(LA26_0 >= SINGLE_OP && LA26_0 <= SIZEOF)||LA26_0==STATIC_PREFIX||(LA26_0 >= STRING_LITERAL && LA26_0 <= STRING_LITERAL3)||LA26_0==STRUCT_PREFIX||LA26_0==VOID||LA26_0==160||LA26_0==166||LA26_0==168||(LA26_0 >= 170 && LA26_0 <= 172)||LA26_0==174||(LA26_0 >= 178 && LA26_0 <= 179)||(LA26_0 >= 181 && LA26_0 <= 183)||(LA26_0 >= 185 && LA26_0 <= 187)||(LA26_0 >= 190 && LA26_0 <= 191)) ) {
                    alt26=1;
                }
                else if ( (LA26_0==L_FBR) ) {
                    alt26=2;
                }


                switch (alt26) {
            	case 1 :
            	    // Objcm.g:261:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block_case1188);
            	    block_internal_full99=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full99.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:261:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block_case1192);
            	    block100=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block100.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            // Objcm.g:262:4: ( default_stmt )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==177) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // Objcm.g:262:4: default_stmt
                    {
                    pushFollow(FOLLOW_default_stmt_in_block_case1201);
                    default_stmt101=default_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt101.getTree());

                    }
                    break;

            }


            R_FBR102=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block_case1206); 
            R_FBR102_tree = 
            (Object)adaptor.create(R_FBR102)
            ;
            adaptor.addChild(root_0, R_FBR102_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_case"


    public static class block_internal_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_full"
    // Objcm.g:266:1: block_internal_full : block_internal ;
    public final ObjcmParser.block_internal_full_return block_internal_full() throws RecognitionException {
        ObjcmParser.block_internal_full_return retval = new ObjcmParser.block_internal_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_return block_internal103 =null;



        try {
            // Objcm.g:267:2: ( block_internal )
            // Objcm.g:267:4: block_internal
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_internal_in_block_internal_full1218);
            block_internal103=block_internal();

            state._fsp--;

            adaptor.addChild(root_0, block_internal103.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_full"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // Objcm.g:270:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON );
    public final ObjcmParser.block_internal_return block_internal() throws RecognitionException {
        ObjcmParser.block_internal_return retval = new ObjcmParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON107=null;
        Token SEMICOLON110=null;
        Token SEMICOLON120=null;
        Token SEMICOLON122=null;
        Token SEMICOLON124=null;
        Token SEMICOLON126=null;
        Token SEMICOLON127=null;
        ObjcmParser.try_stmt_return try_stmt104 =null;

        ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper105 =null;

        ObjcmParser.static_start_wrapper_return static_start_wrapper106 =null;

        ObjcmParser.do_stmt_return do_stmt108 =null;

        ObjcmParser.const_expression_return const_expression109 =null;

        ObjcmParser.variable_init_wrapper_return variable_init_wrapper111 =null;

        ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper112 =null;

        ObjcmParser.else_stmt_return else_stmt113 =null;

        ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper114 =null;

        ObjcmParser.return_stmt_return return_stmt115 =null;

        ObjcmParser.for_stmt_wrapper_return for_stmt_wrapper116 =null;

        ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper117 =null;

        ObjcmParser.single_operators_return single_operators118 =null;

        ObjcmParser.struct_variable_return struct_variable119 =null;

        ObjcmParser.enum_variable_return enum_variable121 =null;

        ObjcmParser.typeof_started_return typeof_started123 =null;

        ObjcmParser.known_type_started_return known_type_started125 =null;


        Object SEMICOLON107_tree=null;
        Object SEMICOLON110_tree=null;
        Object SEMICOLON120_tree=null;
        Object SEMICOLON122_tree=null;
        Object SEMICOLON124_tree=null;
        Object SEMICOLON126_tree=null;
        Object SEMICOLON127_tree=null;

        try {
            // Objcm.g:271:2: ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON )
            int alt28=18;
            alt28 = dfa28.predict(input);
            switch (alt28) {
                case 1 :
                    // Objcm.g:271:4: try_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_in_block_internal1229);
                    try_stmt104=try_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, try_stmt104.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:272:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1234);
                    throw_stmt_wrapper105=throw_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, throw_stmt_wrapper105.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:273:4: static_start_wrapper SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_start_wrapper_in_block_internal1239);
                    static_start_wrapper106=static_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_start_wrapper106.getTree());

                    SEMICOLON107=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1241); 
                    SEMICOLON107_tree = 
                    (Object)adaptor.create(SEMICOLON107)
                    ;
                    adaptor.addChild(root_0, SEMICOLON107_tree);


                    }
                    break;
                case 4 :
                    // Objcm.g:274:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1246);
                    do_stmt108=do_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, do_stmt108.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:275:4: const_expression SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expression_in_block_internal1251);
                    const_expression109=const_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expression109.getTree());

                    SEMICOLON110=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1253); 
                    SEMICOLON110_tree = 
                    (Object)adaptor.create(SEMICOLON110)
                    ;
                    adaptor.addChild(root_0, SEMICOLON110_tree);


                    }
                    break;
                case 6 :
                    // Objcm.g:276:4: variable_init_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_init_wrapper_in_block_internal1258);
                    variable_init_wrapper111=variable_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, variable_init_wrapper111.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:277:4: if_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_wrapper_in_block_internal1263);
                    if_stmt_wrapper112=if_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, if_stmt_wrapper112.getTree());

                    }
                    break;
                case 8 :
                    // Objcm.g:278:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1268);
                    else_stmt113=else_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, else_stmt113.getTree());

                    }
                    break;
                case 9 :
                    // Objcm.g:279:4: switch_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_wrapper_in_block_internal1273);
                    switch_stmt_wrapper114=switch_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, switch_stmt_wrapper114.getTree());

                    }
                    break;
                case 10 :
                    // Objcm.g:280:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1278);
                    return_stmt115=return_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, return_stmt115.getTree());

                    }
                    break;
                case 11 :
                    // Objcm.g:281:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1283);
                    for_stmt_wrapper116=for_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_wrapper116.getTree());

                    }
                    break;
                case 12 :
                    // Objcm.g:282:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1288);
                    while_stmt_wrapper117=while_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, while_stmt_wrapper117.getTree());

                    }
                    break;
                case 13 :
                    // Objcm.g:283:4: single_operators
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_operators_in_block_internal1293);
                    single_operators118=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators118.getTree());

                    }
                    break;
                case 14 :
                    // Objcm.g:284:4: struct_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_variable_in_block_internal1298);
                    struct_variable119=struct_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_variable119.getTree());

                    SEMICOLON120=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1300); 
                    SEMICOLON120_tree = 
                    (Object)adaptor.create(SEMICOLON120)
                    ;
                    adaptor.addChild(root_0, SEMICOLON120_tree);


                    }
                    break;
                case 15 :
                    // Objcm.g:285:4: enum_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_enum_variable_in_block_internal1305);
                    enum_variable121=enum_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, enum_variable121.getTree());

                    SEMICOLON122=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1307); 
                    SEMICOLON122_tree = 
                    (Object)adaptor.create(SEMICOLON122)
                    ;
                    adaptor.addChild(root_0, SEMICOLON122_tree);


                    }
                    break;
                case 16 :
                    // Objcm.g:286:4: typeof_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typeof_started_in_block_internal1312);
                    typeof_started123=typeof_started();

                    state._fsp--;

                    adaptor.addChild(root_0, typeof_started123.getTree());

                    SEMICOLON124=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1314); 
                    SEMICOLON124_tree = 
                    (Object)adaptor.create(SEMICOLON124)
                    ;
                    adaptor.addChild(root_0, SEMICOLON124_tree);


                    }
                    break;
                case 17 :
                    // Objcm.g:287:4: known_type_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_known_type_started_in_block_internal1319);
                    known_type_started125=known_type_started();

                    state._fsp--;

                    adaptor.addChild(root_0, known_type_started125.getTree());

                    SEMICOLON126=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1321); 
                    SEMICOLON126_tree = 
                    (Object)adaptor.create(SEMICOLON126)
                    ;
                    adaptor.addChild(root_0, SEMICOLON126_tree);


                    }
                    break;
                case 18 :
                    // Objcm.g:288:4: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    SEMICOLON127=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1326); 
                    SEMICOLON127_tree = 
                    (Object)adaptor.create(SEMICOLON127)
                    ;
                    adaptor.addChild(root_0, SEMICOLON127_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class variable_init_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init_wrapper"
    // Objcm.g:291:1: variable_init_wrapper : variable_init -> ^( VARIABLE_INIT variable_init ) ;
    public final ObjcmParser.variable_init_wrapper_return variable_init_wrapper() throws RecognitionException {
        ObjcmParser.variable_init_wrapper_return retval = new ObjcmParser.variable_init_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.variable_init_return variable_init128 =null;


        RewriteRuleSubtreeStream stream_variable_init=new RewriteRuleSubtreeStream(adaptor,"rule variable_init");
        try {
            // Objcm.g:292:2: ( variable_init -> ^( VARIABLE_INIT variable_init ) )
            // Objcm.g:292:4: variable_init
            {
            pushFollow(FOLLOW_variable_init_in_variable_init_wrapper1338);
            variable_init128=variable_init();

            state._fsp--;

            stream_variable_init.add(variable_init128.getTree());

            // AST REWRITE
            // elements: variable_init
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 292:18: -> ^( VARIABLE_INIT variable_init )
            {
                // Objcm.g:292:21: ^( VARIABLE_INIT variable_init )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_INIT, "VARIABLE_INIT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_init.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init_wrapper"


    public static class variable_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init"
    // Objcm.g:294:1: variable_init : full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) ;
    public final ObjcmParser.variable_init_return variable_init() throws RecognitionException {
        ObjcmParser.variable_init_return retval = new ObjcmParser.variable_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON131=null;
        Token COLON132=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper129 =null;

        ObjcmParser.full_expr2_return full_expr2130 =null;


        Object SEMICOLON131_tree=null;
        Object COLON132_tree=null;

        try {
            // Objcm.g:295:2: ( full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) )
            // Objcm.g:295:4: full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_full_expr_wrapper_in_variable_init1356);
            full_expr_wrapper129=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper129.getTree());

            // Objcm.g:295:22: ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==ID||LA30_0==SEMICOLON||LA30_0==VOID||LA30_0==183) ) {
                alt30=1;
            }
            else if ( (LA30_0==COLON) ) {
                alt30=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;

            }
            switch (alt30) {
                case 1 :
                    // Objcm.g:295:23: ( ( full_expr2 )? SEMICOLON )
                    {
                    // Objcm.g:295:23: ( ( full_expr2 )? SEMICOLON )
                    // Objcm.g:295:24: ( full_expr2 )? SEMICOLON
                    {
                    // Objcm.g:295:24: ( full_expr2 )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==ID||LA29_0==VOID||LA29_0==183) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // Objcm.g:295:24: full_expr2
                            {
                            pushFollow(FOLLOW_full_expr2_in_variable_init1360);
                            full_expr2130=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2130.getTree());

                            }
                            break;

                    }


                    SEMICOLON131=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_variable_init1363); 
                    SEMICOLON131_tree = 
                    (Object)adaptor.create(SEMICOLON131)
                    ;
                    adaptor.addChild(root_0, SEMICOLON131_tree);


                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:295:49: COLON
                    {
                    COLON132=(Token)match(input,COLON,FOLLOW_COLON_in_variable_init1368); 
                    COLON132_tree = 
                    (Object)adaptor.create(COLON132)
                    ;
                    adaptor.addChild(root_0, COLON132_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init"


    public static class known_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_type_started"
    // Objcm.g:297:1: known_type_started : known_types ( ASTERISK )* full_expr2 ;
    public final ObjcmParser.known_type_started_return known_type_started() throws RecognitionException {
        ObjcmParser.known_type_started_return retval = new ObjcmParser.known_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK134=null;
        ObjcmParser.known_types_return known_types133 =null;

        ObjcmParser.full_expr2_return full_expr2135 =null;


        Object ASTERISK134_tree=null;

        try {
            // Objcm.g:298:2: ( known_types ( ASTERISK )* full_expr2 )
            // Objcm.g:298:4: known_types ( ASTERISK )* full_expr2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_known_types_in_known_type_started1380);
            known_types133=known_types();

            state._fsp--;

            adaptor.addChild(root_0, known_types133.getTree());

            // Objcm.g:298:16: ( ASTERISK )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==ASTERISK) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // Objcm.g:298:16: ASTERISK
            	    {
            	    ASTERISK134=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_known_type_started1382); 
            	    ASTERISK134_tree = 
            	    (Object)adaptor.create(ASTERISK134)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK134_tree);


            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            pushFollow(FOLLOW_full_expr2_in_known_type_started1385);
            full_expr2135=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2135.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_type_started"


    public static class typeof_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof_started"
    // Objcm.g:300:1: typeof_started : typeof full_expr_wrapper ;
    public final ObjcmParser.typeof_started_return typeof_started() throws RecognitionException {
        ObjcmParser.typeof_started_return retval = new ObjcmParser.typeof_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typeof_return typeof136 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper137 =null;



        try {
            // Objcm.g:301:2: ( typeof full_expr_wrapper )
            // Objcm.g:301:4: typeof full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typeof_in_typeof_started1397);
            typeof136=typeof();

            state._fsp--;

            adaptor.addChild(root_0, typeof136.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_typeof_started1399);
            full_expr_wrapper137=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper137.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof_started"


    public static class struct_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_variable"
    // Objcm.g:304:1: struct_variable : STRUCT_PREFIX full_expr_wrapper ;
    public final ObjcmParser.struct_variable_return struct_variable() throws RecognitionException {
        ObjcmParser.struct_variable_return retval = new ObjcmParser.struct_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX138=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper139 =null;


        Object STRUCT_PREFIX138_tree=null;

        try {
            // Objcm.g:305:2: ( STRUCT_PREFIX full_expr_wrapper )
            // Objcm.g:305:4: STRUCT_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX138=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_variable1412); 
            STRUCT_PREFIX138_tree = 
            (Object)adaptor.create(STRUCT_PREFIX138)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX138_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_struct_variable1414);
            full_expr_wrapper139=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper139.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_variable"


    public static class enum_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_variable"
    // Objcm.g:307:1: enum_variable : ENUM_PREFIX full_expr_wrapper ;
    public final ObjcmParser.enum_variable_return enum_variable() throws RecognitionException {
        ObjcmParser.enum_variable_return retval = new ObjcmParser.enum_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX140=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper141 =null;


        Object ENUM_PREFIX140_tree=null;

        try {
            // Objcm.g:308:2: ( ENUM_PREFIX full_expr_wrapper )
            // Objcm.g:308:4: ENUM_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX140=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_enum_variable1423); 
            ENUM_PREFIX140_tree = 
            (Object)adaptor.create(ENUM_PREFIX140)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX140_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_enum_variable1425);
            full_expr_wrapper141=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper141.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_variable"


    public static class const_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expression"
    // Objcm.g:310:1: const_expression : CONST_PREFIX full_expr_wrapper ;
    public final ObjcmParser.const_expression_return const_expression() throws RecognitionException {
        ObjcmParser.const_expression_return retval = new ObjcmParser.const_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX142=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper143 =null;


        Object CONST_PREFIX142_tree=null;

        try {
            // Objcm.g:311:2: ( CONST_PREFIX full_expr_wrapper )
            // Objcm.g:311:4: CONST_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            CONST_PREFIX142=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_const_expression1436); 
            CONST_PREFIX142_tree = 
            (Object)adaptor.create(CONST_PREFIX142)
            ;
            adaptor.addChild(root_0, CONST_PREFIX142_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_const_expression1438);
            full_expr_wrapper143=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper143.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expression"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // Objcm.g:313:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcmParser.throw_stmt_wrapper_return retval = new ObjcmParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.throw_stmt_return throw_stmt144 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // Objcm.g:314:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // Objcm.g:314:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper1447);
            throw_stmt144=throw_stmt();

            state._fsp--;

            stream_throw_stmt.add(throw_stmt144.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 314:15: -> ^( THROW_STMT throw_stmt )
            {
                // Objcm.g:314:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // Objcm.g:316:1: throw_stmt : '@throw' SEMICOLON ;
    public final ObjcmParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcmParser.throw_stmt_return retval = new ObjcmParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal145=null;
        Token SEMICOLON146=null;

        Object string_literal145_tree=null;
        Object SEMICOLON146_tree=null;

        try {
            // Objcm.g:317:2: ( '@throw' SEMICOLON )
            // Objcm.g:317:4: '@throw' SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal145=(Token)match(input,170,FOLLOW_170_in_throw_stmt1464); 
            string_literal145_tree = 
            (Object)adaptor.create(string_literal145)
            ;
            adaptor.addChild(root_0, string_literal145_tree);


            SEMICOLON146=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_throw_stmt1467); 
            SEMICOLON146_tree = 
            (Object)adaptor.create(SEMICOLON146)
            ;
            adaptor.addChild(root_0, SEMICOLON146_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class try_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt"
    // Objcm.g:320:1: try_stmt : '@try' block ( catch_stmt )* ( '@finally' block )? ;
    public final ObjcmParser.try_stmt_return try_stmt() throws RecognitionException {
        ObjcmParser.try_stmt_return retval = new ObjcmParser.try_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal147=null;
        Token string_literal150=null;
        ObjcmParser.block_return block148 =null;

        ObjcmParser.catch_stmt_return catch_stmt149 =null;

        ObjcmParser.block_return block151 =null;


        Object string_literal147_tree=null;
        Object string_literal150_tree=null;

        try {
            // Objcm.g:320:9: ( '@try' block ( catch_stmt )* ( '@finally' block )? )
            // Objcm.g:320:11: '@try' block ( catch_stmt )* ( '@finally' block )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal147=(Token)match(input,171,FOLLOW_171_in_try_stmt1478); 
            string_literal147_tree = 
            (Object)adaptor.create(string_literal147)
            ;
            adaptor.addChild(root_0, string_literal147_tree);


            pushFollow(FOLLOW_block_in_try_stmt1481);
            block148=block();

            state._fsp--;

            adaptor.addChild(root_0, block148.getTree());

            // Objcm.g:320:26: ( catch_stmt )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==159) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // Objcm.g:320:26: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt1484);
            	    catch_stmt149=catch_stmt();

            	    state._fsp--;

            	    adaptor.addChild(root_0, catch_stmt149.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            // Objcm.g:320:38: ( '@finally' block )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==162) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // Objcm.g:320:39: '@finally' block
                    {
                    string_literal150=(Token)match(input,162,FOLLOW_162_in_try_stmt1488); 
                    string_literal150_tree = 
                    (Object)adaptor.create(string_literal150)
                    ;
                    adaptor.addChild(root_0, string_literal150_tree);


                    pushFollow(FOLLOW_block_in_try_stmt1491);
                    block151=block();

                    state._fsp--;

                    adaptor.addChild(root_0, block151.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // Objcm.g:323:1: catch_stmt : '@catch' L_BR ID ( ASTERISK )* ID R_BR block ;
    public final ObjcmParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcmParser.catch_stmt_return retval = new ObjcmParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal152=null;
        Token L_BR153=null;
        Token ID154=null;
        Token ASTERISK155=null;
        Token ID156=null;
        Token R_BR157=null;
        ObjcmParser.block_return block158 =null;


        Object string_literal152_tree=null;
        Object L_BR153_tree=null;
        Object ID154_tree=null;
        Object ASTERISK155_tree=null;
        Object ID156_tree=null;
        Object R_BR157_tree=null;

        try {
            // Objcm.g:324:2: ( '@catch' L_BR ID ( ASTERISK )* ID R_BR block )
            // Objcm.g:324:4: '@catch' L_BR ID ( ASTERISK )* ID R_BR block
            {
            root_0 = (Object)adaptor.nil();


            string_literal152=(Token)match(input,159,FOLLOW_159_in_catch_stmt1505); 
            string_literal152_tree = 
            (Object)adaptor.create(string_literal152)
            ;
            adaptor.addChild(root_0, string_literal152_tree);


            L_BR153=(Token)match(input,L_BR,FOLLOW_L_BR_in_catch_stmt1508); 
            L_BR153_tree = 
            (Object)adaptor.create(L_BR153)
            ;
            adaptor.addChild(root_0, L_BR153_tree);


            ID154=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1511); 
            ID154_tree = 
            (Object)adaptor.create(ID154)
            ;
            adaptor.addChild(root_0, ID154_tree);


            // Objcm.g:324:24: ( ASTERISK )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==ASTERISK) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // Objcm.g:324:24: ASTERISK
            	    {
            	    ASTERISK155=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_catch_stmt1514); 
            	    ASTERISK155_tree = 
            	    (Object)adaptor.create(ASTERISK155)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK155_tree);


            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            ID156=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1517); 
            ID156_tree = 
            (Object)adaptor.create(ID156)
            ;
            adaptor.addChild(root_0, ID156_tree);


            R_BR157=(Token)match(input,R_BR,FOLLOW_R_BR_in_catch_stmt1520); 
            R_BR157_tree = 
            (Object)adaptor.create(R_BR157)
            ;
            adaptor.addChild(root_0, R_BR157_tree);


            pushFollow(FOLLOW_block_in_catch_stmt1523);
            block158=block();

            state._fsp--;

            adaptor.addChild(root_0, block158.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class switch_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt_wrapper"
    // Objcm.g:327:1: switch_stmt_wrapper : switch_stmt -> ^( SWITCH switch_stmt ) ;
    public final ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper() throws RecognitionException {
        ObjcmParser.switch_stmt_wrapper_return retval = new ObjcmParser.switch_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.switch_stmt_return switch_stmt159 =null;


        RewriteRuleSubtreeStream stream_switch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule switch_stmt");
        try {
            // Objcm.g:328:2: ( switch_stmt -> ^( SWITCH switch_stmt ) )
            // Objcm.g:328:4: switch_stmt
            {
            pushFollow(FOLLOW_switch_stmt_in_switch_stmt_wrapper1536);
            switch_stmt159=switch_stmt();

            state._fsp--;

            stream_switch_stmt.add(switch_stmt159.getTree());

            // AST REWRITE
            // elements: switch_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 328:16: -> ^( SWITCH switch_stmt )
            {
                // Objcm.g:328:19: ^( SWITCH switch_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH, "SWITCH")
                , root_1);

                adaptor.addChild(root_1, stream_switch_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt_wrapper"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // Objcm.g:330:1: switch_stmt : 'switch' L_BR switch_expr R_BR switch_body_wrapper ;
    public final ObjcmParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcmParser.switch_stmt_return retval = new ObjcmParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal160=null;
        Token L_BR161=null;
        Token R_BR163=null;
        ObjcmParser.switch_expr_return switch_expr162 =null;

        ObjcmParser.switch_body_wrapper_return switch_body_wrapper164 =null;


        Object string_literal160_tree=null;
        Object L_BR161_tree=null;
        Object R_BR163_tree=null;

        try {
            // Objcm.g:331:2: ( 'switch' L_BR switch_expr R_BR switch_body_wrapper )
            // Objcm.g:331:4: 'switch' L_BR switch_expr R_BR switch_body_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal160=(Token)match(input,187,FOLLOW_187_in_switch_stmt1553); 
            string_literal160_tree = 
            (Object)adaptor.create(string_literal160)
            ;
            adaptor.addChild(root_0, string_literal160_tree);


            L_BR161=(Token)match(input,L_BR,FOLLOW_L_BR_in_switch_stmt1556); 
            L_BR161_tree = 
            (Object)adaptor.create(L_BR161)
            ;
            adaptor.addChild(root_0, L_BR161_tree);


            pushFollow(FOLLOW_switch_expr_in_switch_stmt1559);
            switch_expr162=switch_expr();

            state._fsp--;

            adaptor.addChild(root_0, switch_expr162.getTree());

            R_BR163=(Token)match(input,R_BR,FOLLOW_R_BR_in_switch_stmt1561); 
            R_BR163_tree = 
            (Object)adaptor.create(R_BR163)
            ;
            adaptor.addChild(root_0, R_BR163_tree);


            pushFollow(FOLLOW_switch_body_wrapper_in_switch_stmt1567);
            switch_body_wrapper164=switch_body_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, switch_body_wrapper164.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body_wrapper"
    // Objcm.g:335:1: switch_body_wrapper : L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) ;
    public final ObjcmParser.switch_body_wrapper_return switch_body_wrapper() throws RecognitionException {
        ObjcmParser.switch_body_wrapper_return retval = new ObjcmParser.switch_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR165=null;
        Token R_FBR167=null;
        ObjcmParser.switch_body_return switch_body166 =null;


        Object L_FBR165_tree=null;
        Object R_FBR167_tree=null;
        RewriteRuleTokenStream stream_R_FBR=new RewriteRuleTokenStream(adaptor,"token R_FBR");
        RewriteRuleTokenStream stream_L_FBR=new RewriteRuleTokenStream(adaptor,"token L_FBR");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // Objcm.g:336:2: ( L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) )
            // Objcm.g:336:4: L_FBR switch_body R_FBR
            {
            L_FBR165=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_switch_body_wrapper1580);  
            stream_L_FBR.add(L_FBR165);


            pushFollow(FOLLOW_switch_body_in_switch_body_wrapper1582);
            switch_body166=switch_body();

            state._fsp--;

            stream_switch_body.add(switch_body166.getTree());

            R_FBR167=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_switch_body_wrapper1584);  
            stream_R_FBR.add(R_FBR167);


            // AST REWRITE
            // elements: switch_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 336:28: -> ^( SWITCH_BODY switch_body )
            {
                // Objcm.g:336:31: ^( SWITCH_BODY switch_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_BODY, "SWITCH_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_switch_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body_wrapper"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // Objcm.g:338:1: switch_body : ( block_internal_full )* ( switch_internal )* ;
    public final ObjcmParser.switch_body_return switch_body() throws RecognitionException {
        ObjcmParser.switch_body_return retval = new ObjcmParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_full_return block_internal_full168 =null;

        ObjcmParser.switch_internal_return switch_internal169 =null;



        try {
            // Objcm.g:339:2: ( ( block_internal_full )* ( switch_internal )* )
            // Objcm.g:339:4: ( block_internal_full )* ( switch_internal )*
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:339:4: ( block_internal_full )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==ASTERISK||LA35_0==BREAK_WORD||LA35_0==CONST_PREFIX||LA35_0==ENUM_PREFIX||LA35_0==ID||LA35_0==L_AND||LA35_0==L_BR||LA35_0==L_KBR||LA35_0==L_MINUS||LA35_0==L_MINUS_MINUS||LA35_0==L_NOT||LA35_0==L_PLUS||LA35_0==L_PLUS_PLUS||LA35_0==L_TILDA||LA35_0==NUMBER||LA35_0==SEMICOLON||(LA35_0 >= SINGLE_OP && LA35_0 <= SIZEOF)||LA35_0==STATIC_PREFIX||(LA35_0 >= STRING_LITERAL && LA35_0 <= STRING_LITERAL3)||LA35_0==STRUCT_PREFIX||LA35_0==VOID||LA35_0==160||LA35_0==166||LA35_0==168||(LA35_0 >= 170 && LA35_0 <= 172)||LA35_0==174||(LA35_0 >= 178 && LA35_0 <= 179)||(LA35_0 >= 181 && LA35_0 <= 183)||(LA35_0 >= 185 && LA35_0 <= 187)||(LA35_0 >= 190 && LA35_0 <= 191)) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // Objcm.g:339:4: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_switch_body1603);
            	    block_internal_full168=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full168.getTree());

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            // Objcm.g:340:3: ( switch_internal )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==175||LA36_0==177) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // Objcm.g:340:3: switch_internal
            	    {
            	    pushFollow(FOLLOW_switch_internal_in_switch_body1608);
            	    switch_internal169=switch_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, switch_internal169.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class switch_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_expr"
    // Objcm.g:343:1: switch_expr : classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) ;
    public final ObjcmParser.switch_expr_return switch_expr() throws RecognitionException {
        ObjcmParser.switch_expr_return retval = new ObjcmParser.switch_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp170 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:344:2: ( classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) )
            // Objcm.g:344:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_switch_expr1621);
            classical_expr_wrp170=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp170.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:23: -> ^( SWITCH_EXPRESSION classical_expr_wrp )
            {
                // Objcm.g:344:26: ^( SWITCH_EXPRESSION classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_EXPRESSION, "SWITCH_EXPRESSION")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_expr"


    public static class switch_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_internal"
    // Objcm.g:346:1: switch_internal : ( case_stmt_wrapper | default_stmt_wrapper );
    public final ObjcmParser.switch_internal_return switch_internal() throws RecognitionException {
        ObjcmParser.switch_internal_return retval = new ObjcmParser.switch_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper171 =null;

        ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper172 =null;



        try {
            // Objcm.g:347:2: ( case_stmt_wrapper | default_stmt_wrapper )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==175) ) {
                alt37=1;
            }
            else if ( (LA37_0==177) ) {
                alt37=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // Objcm.g:347:4: case_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_wrapper_in_switch_internal1638);
                    case_stmt_wrapper171=case_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_stmt_wrapper171.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:348:5: default_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_wrapper_in_switch_internal1644);
                    default_stmt_wrapper172=default_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt_wrapper172.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_internal"


    public static class case_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt_wrapper"
    // Objcm.g:350:1: case_stmt_wrapper : case_stmt -> ^( CASE_STMT case_stmt ) ;
    public final ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper() throws RecognitionException {
        ObjcmParser.case_stmt_wrapper_return retval = new ObjcmParser.case_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_return case_stmt173 =null;


        RewriteRuleSubtreeStream stream_case_stmt=new RewriteRuleSubtreeStream(adaptor,"rule case_stmt");
        try {
            // Objcm.g:351:2: ( case_stmt -> ^( CASE_STMT case_stmt ) )
            // Objcm.g:351:4: case_stmt
            {
            pushFollow(FOLLOW_case_stmt_in_case_stmt_wrapper1653);
            case_stmt173=case_stmt();

            state._fsp--;

            stream_case_stmt.add(case_stmt173.getTree());

            // AST REWRITE
            // elements: case_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 351:14: -> ^( CASE_STMT case_stmt )
            {
                // Objcm.g:351:17: ^( CASE_STMT case_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_case_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt_wrapper"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // Objcm.g:353:1: case_stmt : 'case' case_expr_wrapper COLON ( case_body_wrapper )? ;
    public final ObjcmParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcmParser.case_stmt_return retval = new ObjcmParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal174=null;
        Token COLON176=null;
        ObjcmParser.case_expr_wrapper_return case_expr_wrapper175 =null;

        ObjcmParser.case_body_wrapper_return case_body_wrapper177 =null;


        Object string_literal174_tree=null;
        Object COLON176_tree=null;

        try {
            // Objcm.g:354:2: ( 'case' case_expr_wrapper COLON ( case_body_wrapper )? )
            // Objcm.g:354:4: 'case' case_expr_wrapper COLON ( case_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal174=(Token)match(input,175,FOLLOW_175_in_case_stmt1670); 
            string_literal174_tree = 
            (Object)adaptor.create(string_literal174)
            ;
            adaptor.addChild(root_0, string_literal174_tree);


            pushFollow(FOLLOW_case_expr_wrapper_in_case_stmt1673);
            case_expr_wrapper175=case_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, case_expr_wrapper175.getTree());

            COLON176=(Token)match(input,COLON,FOLLOW_COLON_in_case_stmt1676); 
            COLON176_tree = 
            (Object)adaptor.create(COLON176)
            ;
            adaptor.addChild(root_0, COLON176_tree);


            // Objcm.g:355:3: ( case_body_wrapper )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==ASTERISK||LA38_0==BREAK_WORD||LA38_0==CONST_PREFIX||LA38_0==ENUM_PREFIX||LA38_0==ID||LA38_0==L_AND||LA38_0==L_BR||(LA38_0 >= L_FBR && LA38_0 <= L_KBR)||LA38_0==L_MINUS||LA38_0==L_MINUS_MINUS||LA38_0==L_NOT||LA38_0==L_PLUS||LA38_0==L_PLUS_PLUS||LA38_0==L_TILDA||LA38_0==NUMBER||LA38_0==SEMICOLON||(LA38_0 >= SINGLE_OP && LA38_0 <= SIZEOF)||LA38_0==STATIC_PREFIX||(LA38_0 >= STRING_LITERAL && LA38_0 <= STRING_LITERAL3)||LA38_0==STRUCT_PREFIX||LA38_0==VOID||LA38_0==160||LA38_0==166||LA38_0==168||(LA38_0 >= 170 && LA38_0 <= 172)||LA38_0==174||(LA38_0 >= 178 && LA38_0 <= 179)||(LA38_0 >= 181 && LA38_0 <= 183)||(LA38_0 >= 185 && LA38_0 <= 187)||(LA38_0 >= 190 && LA38_0 <= 191)) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // Objcm.g:355:3: case_body_wrapper
                    {
                    pushFollow(FOLLOW_case_body_wrapper_in_case_stmt1681);
                    case_body_wrapper177=case_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_body_wrapper177.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class case_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body_wrapper"
    // Objcm.g:358:1: case_body_wrapper : case_body -> ^( CASE_BODY case_body ) ;
    public final ObjcmParser.case_body_wrapper_return case_body_wrapper() throws RecognitionException {
        ObjcmParser.case_body_wrapper_return retval = new ObjcmParser.case_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_body_return case_body178 =null;


        RewriteRuleSubtreeStream stream_case_body=new RewriteRuleSubtreeStream(adaptor,"rule case_body");
        try {
            // Objcm.g:359:2: ( case_body -> ^( CASE_BODY case_body ) )
            // Objcm.g:359:4: case_body
            {
            pushFollow(FOLLOW_case_body_in_case_body_wrapper1695);
            case_body178=case_body();

            state._fsp--;

            stream_case_body.add(case_body178.getTree());

            // AST REWRITE
            // elements: case_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 359:14: -> ^( CASE_BODY case_body )
            {
                // Objcm.g:359:17: ^( CASE_BODY case_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_BODY, "CASE_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_case_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body_wrapper"


    public static class case_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body"
    // Objcm.g:361:1: case_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.case_body_return case_body() throws RecognitionException {
        ObjcmParser.case_body_return retval = new ObjcmParser.case_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break179 =null;

        ObjcmParser.block_internal_full_return block_internal_full180 =null;



        try {
            // Objcm.g:362:2: ( block_break | ( block_internal_full )+ )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==L_FBR) ) {
                alt40=1;
            }
            else if ( (LA40_0==ASTERISK||LA40_0==BREAK_WORD||LA40_0==CONST_PREFIX||LA40_0==ENUM_PREFIX||LA40_0==ID||LA40_0==L_AND||LA40_0==L_BR||LA40_0==L_KBR||LA40_0==L_MINUS||LA40_0==L_MINUS_MINUS||LA40_0==L_NOT||LA40_0==L_PLUS||LA40_0==L_PLUS_PLUS||LA40_0==L_TILDA||LA40_0==NUMBER||LA40_0==SEMICOLON||(LA40_0 >= SINGLE_OP && LA40_0 <= SIZEOF)||LA40_0==STATIC_PREFIX||(LA40_0 >= STRING_LITERAL && LA40_0 <= STRING_LITERAL3)||LA40_0==STRUCT_PREFIX||LA40_0==VOID||LA40_0==160||LA40_0==166||LA40_0==168||(LA40_0 >= 170 && LA40_0 <= 172)||LA40_0==174||(LA40_0 >= 178 && LA40_0 <= 179)||(LA40_0 >= 181 && LA40_0 <= 183)||(LA40_0 >= 185 && LA40_0 <= 187)||(LA40_0 >= 190 && LA40_0 <= 191)) ) {
                alt40=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // Objcm.g:362:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_case_body1714);
                    block_break179=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break179.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:363:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:363:5: ( block_internal_full )+
                    int cnt39=0;
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==ASTERISK||LA39_0==BREAK_WORD||LA39_0==CONST_PREFIX||LA39_0==ENUM_PREFIX||LA39_0==ID||LA39_0==L_AND||LA39_0==L_BR||LA39_0==L_KBR||LA39_0==L_MINUS||LA39_0==L_MINUS_MINUS||LA39_0==L_NOT||LA39_0==L_PLUS||LA39_0==L_PLUS_PLUS||LA39_0==L_TILDA||LA39_0==NUMBER||LA39_0==SEMICOLON||(LA39_0 >= SINGLE_OP && LA39_0 <= SIZEOF)||LA39_0==STATIC_PREFIX||(LA39_0 >= STRING_LITERAL && LA39_0 <= STRING_LITERAL3)||LA39_0==STRUCT_PREFIX||LA39_0==VOID||LA39_0==160||LA39_0==166||LA39_0==168||(LA39_0 >= 170 && LA39_0 <= 172)||LA39_0==174||(LA39_0 >= 178 && LA39_0 <= 179)||(LA39_0 >= 181 && LA39_0 <= 183)||(LA39_0 >= 185 && LA39_0 <= 187)||(LA39_0 >= 190 && LA39_0 <= 191)) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    // Objcm.g:363:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_case_body1721);
                    	    block_internal_full180=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full180.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt39 >= 1 ) break loop39;
                                EarlyExitException eee =
                                    new EarlyExitException(39, input);
                                throw eee;
                        }
                        cnt39++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body"


    public static class case_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr_wrapper"
    // Objcm.g:366:1: case_expr_wrapper : case_expr -> ^( CASE_EXPR case_expr ) ;
    public final ObjcmParser.case_expr_wrapper_return case_expr_wrapper() throws RecognitionException {
        ObjcmParser.case_expr_wrapper_return retval = new ObjcmParser.case_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_expr_return case_expr181 =null;


        RewriteRuleSubtreeStream stream_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule case_expr");
        try {
            // Objcm.g:367:2: ( case_expr -> ^( CASE_EXPR case_expr ) )
            // Objcm.g:367:4: case_expr
            {
            pushFollow(FOLLOW_case_expr_in_case_expr_wrapper1737);
            case_expr181=case_expr();

            state._fsp--;

            stream_case_expr.add(case_expr181.getTree());

            // AST REWRITE
            // elements: case_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:14: -> ^( CASE_EXPR case_expr )
            {
                // Objcm.g:367:17: ^( CASE_EXPR case_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_EXPR, "CASE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_case_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr_wrapper"


    public static class case_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr"
    // Objcm.g:369:1: case_expr : ( const_expr | ID );
    public final ObjcmParser.case_expr_return case_expr() throws RecognitionException {
        ObjcmParser.case_expr_return retval = new ObjcmParser.case_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID183=null;
        ObjcmParser.const_expr_return const_expr182 =null;


        Object ID183_tree=null;

        try {
            // Objcm.g:370:2: ( const_expr | ID )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==NUMBER||(LA41_0 >= STRING_LITERAL && LA41_0 <= STRING_LITERAL3)||LA41_0==172||LA41_0==185) ) {
                alt41=1;
            }
            else if ( (LA41_0==ID) ) {
                alt41=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }
            switch (alt41) {
                case 1 :
                    // Objcm.g:370:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_case_expr1759);
                    const_expr182=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr182.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:371:5: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID183=(Token)match(input,ID,FOLLOW_ID_in_case_expr1766); 
                    ID183_tree = 
                    (Object)adaptor.create(ID183)
                    ;
                    adaptor.addChild(root_0, ID183_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr"


    public static class block_break_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_break"
    // Objcm.g:373:1: block_break : block_case ( single_operators )? ;
    public final ObjcmParser.block_break_return block_break() throws RecognitionException {
        ObjcmParser.block_break_return retval = new ObjcmParser.block_break_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_case_return block_case184 =null;

        ObjcmParser.single_operators_return single_operators185 =null;



        try {
            // Objcm.g:374:2: ( block_case ( single_operators )? )
            // Objcm.g:374:4: block_case ( single_operators )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_case_in_block_break1777);
            block_case184=block_case();

            state._fsp--;

            adaptor.addChild(root_0, block_case184.getTree());

            // Objcm.g:374:15: ( single_operators )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==BREAK_WORD||LA42_0==SINGLE_OP) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // Objcm.g:374:15: single_operators
                    {
                    pushFollow(FOLLOW_single_operators_in_block_break1779);
                    single_operators185=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators185.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_break"


    public static class default_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt_wrapper"
    // Objcm.g:377:1: default_stmt_wrapper : default_stmt -> ^( DEFAULT_STMT default_stmt ) ;
    public final ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper() throws RecognitionException {
        ObjcmParser.default_stmt_wrapper_return retval = new ObjcmParser.default_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_stmt_return default_stmt186 =null;


        RewriteRuleSubtreeStream stream_default_stmt=new RewriteRuleSubtreeStream(adaptor,"rule default_stmt");
        try {
            // Objcm.g:378:2: ( default_stmt -> ^( DEFAULT_STMT default_stmt ) )
            // Objcm.g:378:4: default_stmt
            {
            pushFollow(FOLLOW_default_stmt_in_default_stmt_wrapper1791);
            default_stmt186=default_stmt();

            state._fsp--;

            stream_default_stmt.add(default_stmt186.getTree());

            // AST REWRITE
            // elements: default_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 378:17: -> ^( DEFAULT_STMT default_stmt )
            {
                // Objcm.g:378:20: ^( DEFAULT_STMT default_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_default_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt_wrapper"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // Objcm.g:380:1: default_stmt : 'default' COLON ( default_body_wrapper )? ;
    public final ObjcmParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcmParser.default_stmt_return retval = new ObjcmParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal187=null;
        Token COLON188=null;
        ObjcmParser.default_body_wrapper_return default_body_wrapper189 =null;


        Object string_literal187_tree=null;
        Object COLON188_tree=null;

        try {
            // Objcm.g:381:2: ( 'default' COLON ( default_body_wrapper )? )
            // Objcm.g:381:4: 'default' COLON ( default_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal187=(Token)match(input,177,FOLLOW_177_in_default_stmt1808); 
            string_literal187_tree = 
            (Object)adaptor.create(string_literal187)
            ;
            adaptor.addChild(root_0, string_literal187_tree);


            COLON188=(Token)match(input,COLON,FOLLOW_COLON_in_default_stmt1811); 
            COLON188_tree = 
            (Object)adaptor.create(COLON188)
            ;
            adaptor.addChild(root_0, COLON188_tree);


            // Objcm.g:382:3: ( default_body_wrapper )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==ASTERISK||LA43_0==BREAK_WORD||LA43_0==CONST_PREFIX||LA43_0==ENUM_PREFIX||LA43_0==ID||LA43_0==L_AND||LA43_0==L_BR||(LA43_0 >= L_FBR && LA43_0 <= L_KBR)||LA43_0==L_MINUS||LA43_0==L_MINUS_MINUS||LA43_0==L_NOT||LA43_0==L_PLUS||LA43_0==L_PLUS_PLUS||LA43_0==L_TILDA||LA43_0==NUMBER||LA43_0==SEMICOLON||(LA43_0 >= SINGLE_OP && LA43_0 <= SIZEOF)||LA43_0==STATIC_PREFIX||(LA43_0 >= STRING_LITERAL && LA43_0 <= STRING_LITERAL3)||LA43_0==STRUCT_PREFIX||LA43_0==VOID||LA43_0==160||LA43_0==166||LA43_0==168||(LA43_0 >= 170 && LA43_0 <= 172)||LA43_0==174||(LA43_0 >= 178 && LA43_0 <= 179)||(LA43_0 >= 181 && LA43_0 <= 183)||(LA43_0 >= 185 && LA43_0 <= 187)||(LA43_0 >= 190 && LA43_0 <= 191)) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // Objcm.g:382:3: default_body_wrapper
                    {
                    pushFollow(FOLLOW_default_body_wrapper_in_default_stmt1816);
                    default_body_wrapper189=default_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_body_wrapper189.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class default_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body_wrapper"
    // Objcm.g:385:1: default_body_wrapper : default_body -> ^( DEFAULT_BODY default_body ) ;
    public final ObjcmParser.default_body_wrapper_return default_body_wrapper() throws RecognitionException {
        ObjcmParser.default_body_wrapper_return retval = new ObjcmParser.default_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_body_return default_body190 =null;


        RewriteRuleSubtreeStream stream_default_body=new RewriteRuleSubtreeStream(adaptor,"rule default_body");
        try {
            // Objcm.g:386:2: ( default_body -> ^( DEFAULT_BODY default_body ) )
            // Objcm.g:386:4: default_body
            {
            pushFollow(FOLLOW_default_body_in_default_body_wrapper1829);
            default_body190=default_body();

            state._fsp--;

            stream_default_body.add(default_body190.getTree());

            // AST REWRITE
            // elements: default_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 386:17: -> ^( DEFAULT_BODY default_body )
            {
                // Objcm.g:386:20: ^( DEFAULT_BODY default_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_BODY, "DEFAULT_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_default_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body_wrapper"


    public static class default_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body"
    // Objcm.g:389:1: default_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.default_body_return default_body() throws RecognitionException {
        ObjcmParser.default_body_return retval = new ObjcmParser.default_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break191 =null;

        ObjcmParser.block_internal_full_return block_internal_full192 =null;



        try {
            // Objcm.g:390:2: ( block_break | ( block_internal_full )+ )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==L_FBR) ) {
                alt45=1;
            }
            else if ( (LA45_0==ASTERISK||LA45_0==BREAK_WORD||LA45_0==CONST_PREFIX||LA45_0==ENUM_PREFIX||LA45_0==ID||LA45_0==L_AND||LA45_0==L_BR||LA45_0==L_KBR||LA45_0==L_MINUS||LA45_0==L_MINUS_MINUS||LA45_0==L_NOT||LA45_0==L_PLUS||LA45_0==L_PLUS_PLUS||LA45_0==L_TILDA||LA45_0==NUMBER||LA45_0==SEMICOLON||(LA45_0 >= SINGLE_OP && LA45_0 <= SIZEOF)||LA45_0==STATIC_PREFIX||(LA45_0 >= STRING_LITERAL && LA45_0 <= STRING_LITERAL3)||LA45_0==STRUCT_PREFIX||LA45_0==VOID||LA45_0==160||LA45_0==166||LA45_0==168||(LA45_0 >= 170 && LA45_0 <= 172)||LA45_0==174||(LA45_0 >= 178 && LA45_0 <= 179)||(LA45_0 >= 181 && LA45_0 <= 183)||(LA45_0 >= 185 && LA45_0 <= 187)||(LA45_0 >= 190 && LA45_0 <= 191)) ) {
                alt45=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }
            switch (alt45) {
                case 1 :
                    // Objcm.g:390:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_default_body1849);
                    block_break191=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break191.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:391:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:391:5: ( block_internal_full )+
                    int cnt44=0;
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==ASTERISK||LA44_0==BREAK_WORD||LA44_0==CONST_PREFIX||LA44_0==ENUM_PREFIX||LA44_0==ID||LA44_0==L_AND||LA44_0==L_BR||LA44_0==L_KBR||LA44_0==L_MINUS||LA44_0==L_MINUS_MINUS||LA44_0==L_NOT||LA44_0==L_PLUS||LA44_0==L_PLUS_PLUS||LA44_0==L_TILDA||LA44_0==NUMBER||LA44_0==SEMICOLON||(LA44_0 >= SINGLE_OP && LA44_0 <= SIZEOF)||LA44_0==STATIC_PREFIX||(LA44_0 >= STRING_LITERAL && LA44_0 <= STRING_LITERAL3)||LA44_0==STRUCT_PREFIX||LA44_0==VOID||LA44_0==160||LA44_0==166||LA44_0==168||(LA44_0 >= 170 && LA44_0 <= 172)||LA44_0==174||(LA44_0 >= 178 && LA44_0 <= 179)||(LA44_0 >= 181 && LA44_0 <= 183)||(LA44_0 >= 185 && LA44_0 <= 187)||(LA44_0 >= 190 && LA44_0 <= 191)) ) {
                            alt44=1;
                        }


                        switch (alt44) {
                    	case 1 :
                    	    // Objcm.g:391:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_default_body1855);
                    	    block_internal_full192=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full192.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt44 >= 1 ) break loop44;
                                EarlyExitException eee =
                                    new EarlyExitException(44, input);
                                throw eee;
                        }
                        cnt44++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body"


    public static class single_operators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_operators"
    // Objcm.g:394:1: single_operators : ( SINGLE_OP | break_wrapper );
    public final ObjcmParser.single_operators_return single_operators() throws RecognitionException {
        ObjcmParser.single_operators_return retval = new ObjcmParser.single_operators_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_OP193=null;
        ObjcmParser.break_wrapper_return break_wrapper194 =null;


        Object SINGLE_OP193_tree=null;

        try {
            // Objcm.g:395:2: ( SINGLE_OP | break_wrapper )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==SINGLE_OP) ) {
                alt46=1;
            }
            else if ( (LA46_0==BREAK_WORD) ) {
                alt46=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // Objcm.g:395:4: SINGLE_OP
                    {
                    root_0 = (Object)adaptor.nil();


                    SINGLE_OP193=(Token)match(input,SINGLE_OP,FOLLOW_SINGLE_OP_in_single_operators1870); 
                    SINGLE_OP193_tree = 
                    (Object)adaptor.create(SINGLE_OP193)
                    ;
                    adaptor.addChild(root_0, SINGLE_OP193_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:396:5: break_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_wrapper_in_single_operators1877);
                    break_wrapper194=break_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, break_wrapper194.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_operators"


    public static class break_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_wrapper"
    // Objcm.g:399:1: break_wrapper : break_stmt -> ^( BREAK break_stmt ) ;
    public final ObjcmParser.break_wrapper_return break_wrapper() throws RecognitionException {
        ObjcmParser.break_wrapper_return retval = new ObjcmParser.break_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.break_stmt_return break_stmt195 =null;


        RewriteRuleSubtreeStream stream_break_stmt=new RewriteRuleSubtreeStream(adaptor,"rule break_stmt");
        try {
            // Objcm.g:400:2: ( break_stmt -> ^( BREAK break_stmt ) )
            // Objcm.g:400:4: break_stmt
            {
            pushFollow(FOLLOW_break_stmt_in_break_wrapper1889);
            break_stmt195=break_stmt();

            state._fsp--;

            stream_break_stmt.add(break_stmt195.getTree());

            // AST REWRITE
            // elements: break_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 400:15: -> ^( BREAK break_stmt )
            {
                // Objcm.g:400:18: ^( BREAK break_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK, "BREAK")
                , root_1);

                adaptor.addChild(root_1, stream_break_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_wrapper"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // Objcm.g:402:1: break_stmt : BREAK_WORD SEMICOLON ;
    public final ObjcmParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcmParser.break_stmt_return retval = new ObjcmParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BREAK_WORD196=null;
        Token SEMICOLON197=null;

        Object BREAK_WORD196_tree=null;
        Object SEMICOLON197_tree=null;

        try {
            // Objcm.g:403:2: ( BREAK_WORD SEMICOLON )
            // Objcm.g:403:4: BREAK_WORD SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            BREAK_WORD196=(Token)match(input,BREAK_WORD,FOLLOW_BREAK_WORD_in_break_stmt1907); 
            BREAK_WORD196_tree = 
            (Object)adaptor.create(BREAK_WORD196)
            ;
            adaptor.addChild(root_0, BREAK_WORD196_tree);


            SEMICOLON197=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_break_stmt1910); 
            SEMICOLON197_tree = 
            (Object)adaptor.create(SEMICOLON197)
            ;
            adaptor.addChild(root_0, SEMICOLON197_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // Objcm.g:405:1: do_stmt : 'do' if_stmt_block 'while' L_BR expression R_BR ;
    public final ObjcmParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcmParser.do_stmt_return retval = new ObjcmParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal198=null;
        Token string_literal200=null;
        Token L_BR201=null;
        Token R_BR203=null;
        ObjcmParser.if_stmt_block_return if_stmt_block199 =null;

        ObjcmParser.expression_return expression202 =null;


        Object string_literal198_tree=null;
        Object string_literal200_tree=null;
        Object L_BR201_tree=null;
        Object R_BR203_tree=null;

        try {
            // Objcm.g:405:9: ( 'do' if_stmt_block 'while' L_BR expression R_BR )
            // Objcm.g:405:11: 'do' if_stmt_block 'while' L_BR expression R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal198=(Token)match(input,178,FOLLOW_178_in_do_stmt1920); 
            string_literal198_tree = 
            (Object)adaptor.create(string_literal198)
            ;
            adaptor.addChild(root_0, string_literal198_tree);


            pushFollow(FOLLOW_if_stmt_block_in_do_stmt1923);
            if_stmt_block199=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block199.getTree());

            string_literal200=(Token)match(input,191,FOLLOW_191_in_do_stmt1926); 
            string_literal200_tree = 
            (Object)adaptor.create(string_literal200)
            ;
            adaptor.addChild(root_0, string_literal200_tree);


            L_BR201=(Token)match(input,L_BR,FOLLOW_L_BR_in_do_stmt1929); 
            L_BR201_tree = 
            (Object)adaptor.create(L_BR201)
            ;
            adaptor.addChild(root_0, L_BR201_tree);


            pushFollow(FOLLOW_expression_in_do_stmt1932);
            expression202=expression();

            state._fsp--;

            adaptor.addChild(root_0, expression202.getTree());

            R_BR203=(Token)match(input,R_BR,FOLLOW_R_BR_in_do_stmt1934); 
            R_BR203_tree = 
            (Object)adaptor.create(R_BR203)
            ;
            adaptor.addChild(root_0, R_BR203_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // Objcm.g:407:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcmParser.while_stmt_wrapper_return retval = new ObjcmParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.while_stmt_return while_stmt204 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // Objcm.g:408:2: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // Objcm.g:408:4: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper1943);
            while_stmt204=while_stmt();

            state._fsp--;

            stream_while_stmt.add(while_stmt204.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 408:15: -> ^( WHILE_STMT while_stmt )
            {
                // Objcm.g:408:18: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // Objcm.g:411:1: while_stmt : 'while' L_BR while_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcmParser.while_stmt_return retval = new ObjcmParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal205=null;
        Token L_BR206=null;
        Token R_BR208=null;
        ObjcmParser.while_expr_return while_expr207 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper209 =null;


        Object string_literal205_tree=null;
        Object L_BR206_tree=null;
        Object R_BR208_tree=null;

        try {
            // Objcm.g:412:2: ( 'while' L_BR while_expr R_BR if_stmt_block_wrapper )
            // Objcm.g:412:4: 'while' L_BR while_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal205=(Token)match(input,191,FOLLOW_191_in_while_stmt1962); 
            string_literal205_tree = 
            (Object)adaptor.create(string_literal205)
            ;
            adaptor.addChild(root_0, string_literal205_tree);


            L_BR206=(Token)match(input,L_BR,FOLLOW_L_BR_in_while_stmt1965); 
            L_BR206_tree = 
            (Object)adaptor.create(L_BR206)
            ;
            adaptor.addChild(root_0, L_BR206_tree);


            pushFollow(FOLLOW_while_expr_in_while_stmt1968);
            while_expr207=while_expr();

            state._fsp--;

            adaptor.addChild(root_0, while_expr207.getTree());

            R_BR208=(Token)match(input,R_BR,FOLLOW_R_BR_in_while_stmt1970); 
            R_BR208_tree = 
            (Object)adaptor.create(R_BR208)
            ;
            adaptor.addChild(root_0, R_BR208_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_while_stmt1973);
            if_stmt_block_wrapper209=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper209.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class while_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_expr"
    // Objcm.g:414:1: while_expr : classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.while_expr_return while_expr() throws RecognitionException {
        ObjcmParser.while_expr_return retval = new ObjcmParser.while_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp210 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:415:2: ( classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) )
            // Objcm.g:415:5: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_while_expr1986);
            classical_expr_wrp210=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp210.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 415:24: -> ^( WHILE_EXPR classical_expr_wrp )
            {
                // Objcm.g:415:27: ^( WHILE_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_EXPR, "WHILE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_expr"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // Objcm.g:417:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcmParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcmParser.for_stmt_wrapper_return retval = new ObjcmParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.for_stmt_return for_stmt211 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // Objcm.g:418:2: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // Objcm.g:418:4: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper2005);
            for_stmt211=for_stmt();

            state._fsp--;

            stream_for_stmt.add(for_stmt211.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 418:13: -> ^( FOR_STMT for_stmt )
            {
                // Objcm.g:418:16: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // Objcm.g:420:1: for_stmt : 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block ;
    public final ObjcmParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcmParser.for_stmt_return retval = new ObjcmParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal212=null;
        Token L_BR213=null;
        Token R_BR215=null;
        ObjcmParser.for_stmt_expr_wrapper_return for_stmt_expr_wrapper214 =null;

        ObjcmParser.if_stmt_block_return if_stmt_block216 =null;


        Object string_literal212_tree=null;
        Object L_BR213_tree=null;
        Object R_BR215_tree=null;

        try {
            // Objcm.g:420:9: ( 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block )
            // Objcm.g:420:11: 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal212=(Token)match(input,181,FOLLOW_181_in_for_stmt2022); 
            string_literal212_tree = 
            (Object)adaptor.create(string_literal212)
            ;
            adaptor.addChild(root_0, string_literal212_tree);


            L_BR213=(Token)match(input,L_BR,FOLLOW_L_BR_in_for_stmt2025); 
            L_BR213_tree = 
            (Object)adaptor.create(L_BR213)
            ;
            adaptor.addChild(root_0, L_BR213_tree);


            pushFollow(FOLLOW_for_stmt_expr_wrapper_in_for_stmt2028);
            for_stmt_expr_wrapper214=for_stmt_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, for_stmt_expr_wrapper214.getTree());

            R_BR215=(Token)match(input,R_BR,FOLLOW_R_BR_in_for_stmt2030); 
            R_BR215_tree = 
            (Object)adaptor.create(R_BR215)
            ;
            adaptor.addChild(root_0, R_BR215_tree);


            pushFollow(FOLLOW_if_stmt_block_in_for_stmt2033);
            if_stmt_block216=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block216.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr_wrapper"
    // Objcm.g:423:1: for_stmt_expr_wrapper : for_stmt_expr -> ^( FOR_STMT_EXPR for_stmt_expr ) ;
    public final ObjcmParser.for_stmt_expr_wrapper_return for_stmt_expr_wrapper() throws RecognitionException {
        ObjcmParser.for_stmt_expr_wrapper_return retval = new ObjcmParser.for_stmt_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.for_stmt_expr_return for_stmt_expr217 =null;


        RewriteRuleSubtreeStream stream_for_stmt_expr=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt_expr");
        try {
            // Objcm.g:424:2: ( for_stmt_expr -> ^( FOR_STMT_EXPR for_stmt_expr ) )
            // Objcm.g:424:4: for_stmt_expr
            {
            pushFollow(FOLLOW_for_stmt_expr_in_for_stmt_expr_wrapper2045);
            for_stmt_expr217=for_stmt_expr();

            state._fsp--;

            stream_for_stmt_expr.add(for_stmt_expr217.getTree());

            // AST REWRITE
            // elements: for_stmt_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 424:18: -> ^( FOR_STMT_EXPR for_stmt_expr )
            {
                // Objcm.g:424:21: ^( FOR_STMT_EXPR for_stmt_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT_EXPR, "FOR_STMT_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr_wrapper"


    public static class for_stmt_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr"
    // Objcm.g:426:1: for_stmt_expr : ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 );
    public final ObjcmParser.for_stmt_expr_return for_stmt_expr() throws RecognitionException {
        ObjcmParser.for_stmt_expr_return retval = new ObjcmParser.for_stmt_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper218 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1219 =null;

        ObjcmParser.full_expr2_return full_expr2220 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1221 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2222 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2223 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2224 =null;



        try {
            // Objcm.g:427:2: ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==ASTERISK||LA49_0==ID||LA49_0==L_AND||LA49_0==L_BR||LA49_0==L_KBR||LA49_0==L_MINUS||LA49_0==L_MINUS_MINUS||LA49_0==L_NOT||LA49_0==L_PLUS||LA49_0==L_PLUS_PLUS||LA49_0==L_TILDA||LA49_0==NUMBER||LA49_0==SIZEOF||(LA49_0 >= STRING_LITERAL && LA49_0 <= STRING_LITERAL3)||LA49_0==160||LA49_0==166||LA49_0==168||LA49_0==172||LA49_0==183||LA49_0==185||LA49_0==190) ) {
                alt49=1;
            }
            else if ( (LA49_0==SEMICOLON) ) {
                alt49=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;

            }
            switch (alt49) {
                case 1 :
                    // Objcm.g:427:4: full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_full_expr_wrapper_in_for_stmt_expr2064);
                    full_expr_wrapper218=full_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, full_expr_wrapper218.getTree());

                    // Objcm.g:427:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    int alt48=3;
                    alt48 = dfa48.predict(input);
                    switch (alt48) {
                        case 1 :
                            // Objcm.g:427:23: for_stmt_int1
                            {
                            pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2067);
                            for_stmt_int1219=for_stmt_int1();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int1219.getTree());

                            }
                            break;
                        case 2 :
                            // Objcm.g:427:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            {
                            // Objcm.g:427:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            // Objcm.g:427:40: full_expr2 ( for_stmt_int1 | for_stmt_int2 )
                            {
                            pushFollow(FOLLOW_full_expr2_in_for_stmt_expr2072);
                            full_expr2220=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2220.getTree());

                            // Objcm.g:427:51: ( for_stmt_int1 | for_stmt_int2 )
                            int alt47=2;
                            int LA47_0 = input.LA(1);

                            if ( (LA47_0==183) ) {
                                alt47=1;
                            }
                            else if ( (LA47_0==SEMICOLON) ) {
                                alt47=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 47, 0, input);

                                throw nvae;

                            }
                            switch (alt47) {
                                case 1 :
                                    // Objcm.g:427:52: for_stmt_int1
                                    {
                                    pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2075);
                                    for_stmt_int1221=for_stmt_int1();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int1221.getTree());

                                    }
                                    break;
                                case 2 :
                                    // Objcm.g:427:68: for_stmt_int2
                                    {
                                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2079);
                                    for_stmt_int2222=for_stmt_int2();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int2222.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            // Objcm.g:427:86: for_stmt_int2
                            {
                            pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2085);
                            for_stmt_int2223=for_stmt_int2();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int2223.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:428:4: for_stmt_int2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2091);
                    for_stmt_int2224=for_stmt_int2();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_int2224.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr"


    public static class for_stmt_int1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int1"
    // Objcm.g:431:1: for_stmt_int1 : 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) ;
    public final ObjcmParser.for_stmt_int1_return for_stmt_int1() throws RecognitionException {
        ObjcmParser.for_stmt_int1_return retval = new ObjcmParser.for_stmt_int1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal225=null;
        ObjcmParser.object_wrapped2_return object_wrapped2226 =null;


        Object string_literal225_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleSubtreeStream stream_object_wrapped2=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapped2");
        try {
            // Objcm.g:432:2: ( 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) )
            // Objcm.g:432:4: 'in' object_wrapped2
            {
            string_literal225=(Token)match(input,183,FOLLOW_183_in_for_stmt_int12106);  
            stream_183.add(string_literal225);


            pushFollow(FOLLOW_object_wrapped2_in_for_stmt_int12108);
            object_wrapped2226=object_wrapped2();

            state._fsp--;

            stream_object_wrapped2.add(object_wrapped2226.getTree());

            // AST REWRITE
            // elements: object_wrapped2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 432:26: -> ^( FOR_IN_STMT object_wrapped2 )
            {
                // Objcm.g:432:29: ^( FOR_IN_STMT object_wrapped2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapped2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int1"


    public static class for_stmt_int2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int2"
    // Objcm.g:434:1: for_stmt_int2 : SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? ;
    public final ObjcmParser.for_stmt_int2_return for_stmt_int2() throws RecognitionException {
        ObjcmParser.for_stmt_int2_return retval = new ObjcmParser.for_stmt_int2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON227=null;
        Token SEMICOLON229=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp228 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp230 =null;


        Object SEMICOLON227_tree=null;
        Object SEMICOLON229_tree=null;

        try {
            // Objcm.g:435:2: ( SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? )
            // Objcm.g:435:4: SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )?
            {
            root_0 = (Object)adaptor.nil();


            SEMICOLON227=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22128); 
            SEMICOLON227_tree = 
            (Object)adaptor.create(SEMICOLON227)
            ;
            adaptor.addChild(root_0, SEMICOLON227_tree);


            // Objcm.g:435:14: ( classical_expr_wrp )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==ASTERISK||LA50_0==ID||LA50_0==L_AND||LA50_0==L_BR||LA50_0==L_KBR||LA50_0==L_MINUS||LA50_0==L_MINUS_MINUS||LA50_0==L_NOT||LA50_0==L_PLUS||LA50_0==L_PLUS_PLUS||LA50_0==L_TILDA||LA50_0==NUMBER||LA50_0==SIZEOF||(LA50_0 >= STRING_LITERAL && LA50_0 <= STRING_LITERAL3)||LA50_0==160||LA50_0==166||LA50_0==168||LA50_0==172||LA50_0==183||LA50_0==185||LA50_0==190) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // Objcm.g:435:14: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22130);
                    classical_expr_wrp228=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp228.getTree());

                    }
                    break;

            }


            SEMICOLON229=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22133); 
            SEMICOLON229_tree = 
            (Object)adaptor.create(SEMICOLON229)
            ;
            adaptor.addChild(root_0, SEMICOLON229_tree);


            // Objcm.g:435:44: ( classical_expr_wrp )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==ASTERISK||LA51_0==ID||LA51_0==L_AND||LA51_0==L_BR||LA51_0==L_KBR||LA51_0==L_MINUS||LA51_0==L_MINUS_MINUS||LA51_0==L_NOT||LA51_0==L_PLUS||LA51_0==L_PLUS_PLUS||LA51_0==L_TILDA||LA51_0==NUMBER||LA51_0==SIZEOF||(LA51_0 >= STRING_LITERAL && LA51_0 <= STRING_LITERAL3)||LA51_0==160||LA51_0==166||LA51_0==168||LA51_0==172||LA51_0==183||LA51_0==185||LA51_0==190) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // Objcm.g:435:44: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22135);
                    classical_expr_wrp230=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp230.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int2"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // Objcm.g:442:1: return_stmt : 'return' ( classical_expr_wrp )? SEMICOLON -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON ) ;
    public final ObjcmParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcmParser.return_stmt_return retval = new ObjcmParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal231=null;
        Token SEMICOLON233=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp232 =null;


        Object string_literal231_tree=null;
        Object SEMICOLON233_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:443:2: ( 'return' ( classical_expr_wrp )? SEMICOLON -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON ) )
            // Objcm.g:443:4: 'return' ( classical_expr_wrp )? SEMICOLON
            {
            string_literal231=(Token)match(input,186,FOLLOW_186_in_return_stmt2152);  
            stream_186.add(string_literal231);


            // Objcm.g:443:13: ( classical_expr_wrp )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==ASTERISK||LA52_0==ID||LA52_0==L_AND||LA52_0==L_BR||LA52_0==L_KBR||LA52_0==L_MINUS||LA52_0==L_MINUS_MINUS||LA52_0==L_NOT||LA52_0==L_PLUS||LA52_0==L_PLUS_PLUS||LA52_0==L_TILDA||LA52_0==NUMBER||LA52_0==SIZEOF||(LA52_0 >= STRING_LITERAL && LA52_0 <= STRING_LITERAL3)||LA52_0==160||LA52_0==166||LA52_0==168||LA52_0==172||LA52_0==183||LA52_0==185||LA52_0==190) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // Objcm.g:443:13: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_return_stmt2154);
                    classical_expr_wrp232=classical_expr_wrp();

                    state._fsp--;

                    stream_classical_expr_wrp.add(classical_expr_wrp232.getTree());

                    }
                    break;

            }


            SEMICOLON233=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_return_stmt2157);  
            stream_SEMICOLON.add(SEMICOLON233);


            // AST REWRITE
            // elements: classical_expr_wrp, SEMICOLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 443:43: -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON )
            {
                // Objcm.g:443:46: ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                // Objcm.g:443:60: ( classical_expr_wrp )?
                if ( stream_classical_expr_wrp.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                }
                stream_classical_expr_wrp.reset();

                adaptor.addChild(root_1, 
                stream_SEMICOLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class if_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_wrapper"
    // Objcm.g:445:1: if_stmt_wrapper : if_stmt -> ^( IF_STMT if_stmt ) ;
    public final ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_wrapper_return retval = new ObjcmParser.if_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_return if_stmt234 =null;


        RewriteRuleSubtreeStream stream_if_stmt=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt");
        try {
            // Objcm.g:446:2: ( if_stmt -> ^( IF_STMT if_stmt ) )
            // Objcm.g:446:4: if_stmt
            {
            pushFollow(FOLLOW_if_stmt_in_if_stmt_wrapper2178);
            if_stmt234=if_stmt();

            state._fsp--;

            stream_if_stmt.add(if_stmt234.getTree());

            // AST REWRITE
            // elements: if_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:12: -> ^( IF_STMT if_stmt )
            {
                // Objcm.g:446:15: ^( IF_STMT if_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_wrapper"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // Objcm.g:448:1: if_stmt : 'if' L_BR if_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcmParser.if_stmt_return retval = new ObjcmParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal235=null;
        Token L_BR236=null;
        Token R_BR238=null;
        ObjcmParser.if_expr_return if_expr237 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper239 =null;


        Object string_literal235_tree=null;
        Object L_BR236_tree=null;
        Object R_BR238_tree=null;

        try {
            // Objcm.g:448:9: ( 'if' L_BR if_expr R_BR if_stmt_block_wrapper )
            // Objcm.g:448:11: 'if' L_BR if_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal235=(Token)match(input,182,FOLLOW_182_in_if_stmt2194); 
            string_literal235_tree = 
            (Object)adaptor.create(string_literal235)
            ;
            adaptor.addChild(root_0, string_literal235_tree);


            L_BR236=(Token)match(input,L_BR,FOLLOW_L_BR_in_if_stmt2197); 
            L_BR236_tree = 
            (Object)adaptor.create(L_BR236)
            ;
            adaptor.addChild(root_0, L_BR236_tree);


            pushFollow(FOLLOW_if_expr_in_if_stmt2200);
            if_expr237=if_expr();

            state._fsp--;

            adaptor.addChild(root_0, if_expr237.getTree());

            R_BR238=(Token)match(input,R_BR,FOLLOW_R_BR_in_if_stmt2202); 
            R_BR238_tree = 
            (Object)adaptor.create(R_BR238)
            ;
            adaptor.addChild(root_0, R_BR238_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_if_stmt2205);
            if_stmt_block_wrapper239=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper239.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class if_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_expr"
    // Objcm.g:451:1: if_expr : classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.if_expr_return if_expr() throws RecognitionException {
        ObjcmParser.if_expr_return retval = new ObjcmParser.if_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp240 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:451:9: ( classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) )
            // Objcm.g:451:12: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_if_expr2218);
            classical_expr_wrp240=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp240.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 451:31: -> ^( IF_EXPR classical_expr_wrp )
            {
                // Objcm.g:451:34: ^( IF_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_EXPR, "IF_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_expr"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // Objcm.g:453:1: else_stmt : 'else' if_stmt_block ;
    public final ObjcmParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcmParser.else_stmt_return retval = new ObjcmParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal241=null;
        ObjcmParser.if_stmt_block_return if_stmt_block242 =null;


        Object string_literal241_tree=null;

        try {
            // Objcm.g:454:2: ( 'else' if_stmt_block )
            // Objcm.g:454:4: 'else' if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal241=(Token)match(input,179,FOLLOW_179_in_else_stmt2237); 
            string_literal241_tree = 
            (Object)adaptor.create(string_literal241)
            ;
            adaptor.addChild(root_0, string_literal241_tree);


            pushFollow(FOLLOW_if_stmt_block_in_else_stmt2240);
            if_stmt_block242=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block242.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class if_stmt_block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block_wrapper"
    // Objcm.g:456:1: if_stmt_block_wrapper : if_stmt_block -> ^( IF_BLOCK if_stmt_block ) ;
    public final ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_block_wrapper_return retval = new ObjcmParser.if_stmt_block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_block_return if_stmt_block243 =null;


        RewriteRuleSubtreeStream stream_if_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt_block");
        try {
            // Objcm.g:457:2: ( if_stmt_block -> ^( IF_BLOCK if_stmt_block ) )
            // Objcm.g:457:4: if_stmt_block
            {
            pushFollow(FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2249);
            if_stmt_block243=if_stmt_block();

            state._fsp--;

            stream_if_stmt_block.add(if_stmt_block243.getTree());

            // AST REWRITE
            // elements: if_stmt_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 457:18: -> ^( IF_BLOCK if_stmt_block )
            {
                // Objcm.g:457:21: ^( IF_BLOCK if_stmt_block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_BLOCK, "IF_BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block_wrapper"


    public static class if_stmt_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block"
    // Objcm.g:459:1: if_stmt_block : ( block_wrapper | block_internal );
    public final ObjcmParser.if_stmt_block_return if_stmt_block() throws RecognitionException {
        ObjcmParser.if_stmt_block_return retval = new ObjcmParser.if_stmt_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_wrapper_return block_wrapper244 =null;

        ObjcmParser.block_internal_return block_internal245 =null;



        try {
            // Objcm.g:460:2: ( block_wrapper | block_internal )
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==L_FBR) ) {
                alt53=1;
            }
            else if ( (LA53_0==ASTERISK||LA53_0==BREAK_WORD||LA53_0==CONST_PREFIX||LA53_0==ENUM_PREFIX||LA53_0==ID||LA53_0==L_AND||LA53_0==L_BR||LA53_0==L_KBR||LA53_0==L_MINUS||LA53_0==L_MINUS_MINUS||LA53_0==L_NOT||LA53_0==L_PLUS||LA53_0==L_PLUS_PLUS||LA53_0==L_TILDA||LA53_0==NUMBER||LA53_0==SEMICOLON||(LA53_0 >= SINGLE_OP && LA53_0 <= SIZEOF)||LA53_0==STATIC_PREFIX||(LA53_0 >= STRING_LITERAL && LA53_0 <= STRING_LITERAL3)||LA53_0==STRUCT_PREFIX||LA53_0==VOID||LA53_0==160||LA53_0==166||LA53_0==168||(LA53_0 >= 170 && LA53_0 <= 172)||LA53_0==174||(LA53_0 >= 178 && LA53_0 <= 179)||(LA53_0 >= 181 && LA53_0 <= 183)||(LA53_0 >= 185 && LA53_0 <= 187)||(LA53_0 >= 190 && LA53_0 <= 191)) ) {
                alt53=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;

            }
            switch (alt53) {
                case 1 :
                    // Objcm.g:460:4: block_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_wrapper_in_if_stmt_block2266);
                    block_wrapper244=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper244.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:461:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_if_stmt_block2272);
                    block_internal245=block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, block_internal245.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block"


    public static class static_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start_wrapper"
    // Objcm.g:464:1: static_start_wrapper : static_start -> ^( STATIC_START static_start ) ;
    public final ObjcmParser.static_start_wrapper_return static_start_wrapper() throws RecognitionException {
        ObjcmParser.static_start_wrapper_return retval = new ObjcmParser.static_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_start_return static_start246 =null;


        RewriteRuleSubtreeStream stream_static_start=new RewriteRuleSubtreeStream(adaptor,"rule static_start");
        try {
            // Objcm.g:465:2: ( static_start -> ^( STATIC_START static_start ) )
            // Objcm.g:465:4: static_start
            {
            pushFollow(FOLLOW_static_start_in_static_start_wrapper2284);
            static_start246=static_start();

            state._fsp--;

            stream_static_start.add(static_start246.getTree());

            // AST REWRITE
            // elements: static_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 465:17: -> ^( STATIC_START static_start )
            {
                // Objcm.g:465:20: ^( STATIC_START static_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_START, "STATIC_START")
                , root_1);

                adaptor.addChild(root_1, stream_static_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start_wrapper"


    public static class static_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start"
    // Objcm.g:467:1: static_start : STATIC_PREFIX ( CONST_PREFIX )? static_type_wrapper full_expr2 ;
    public final ObjcmParser.static_start_return static_start() throws RecognitionException {
        ObjcmParser.static_start_return retval = new ObjcmParser.static_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX247=null;
        Token CONST_PREFIX248=null;
        ObjcmParser.static_type_wrapper_return static_type_wrapper249 =null;

        ObjcmParser.full_expr2_return full_expr2250 =null;


        Object STATIC_PREFIX247_tree=null;
        Object CONST_PREFIX248_tree=null;

        try {
            // Objcm.g:468:2: ( STATIC_PREFIX ( CONST_PREFIX )? static_type_wrapper full_expr2 )
            // Objcm.g:468:4: STATIC_PREFIX ( CONST_PREFIX )? static_type_wrapper full_expr2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX247=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_start2302); 
            STATIC_PREFIX247_tree = 
            (Object)adaptor.create(STATIC_PREFIX247)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX247_tree);


            // Objcm.g:468:18: ( CONST_PREFIX )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==CONST_PREFIX) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // Objcm.g:468:18: CONST_PREFIX
                    {
                    CONST_PREFIX248=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_start2304); 
                    CONST_PREFIX248_tree = 
                    (Object)adaptor.create(CONST_PREFIX248)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX248_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_static_type_wrapper_in_static_start2307);
            static_type_wrapper249=static_type_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, static_type_wrapper249.getTree());

            pushFollow(FOLLOW_full_expr2_in_static_start2309);
            full_expr2250=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2250.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start"


    public static class static_type_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type_wrapper"
    // Objcm.g:471:1: static_type_wrapper : static_type -> ^( STATIC_TYPE static_type ) ;
    public final ObjcmParser.static_type_wrapper_return static_type_wrapper() throws RecognitionException {
        ObjcmParser.static_type_wrapper_return retval = new ObjcmParser.static_type_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_type_return static_type251 =null;


        RewriteRuleSubtreeStream stream_static_type=new RewriteRuleSubtreeStream(adaptor,"rule static_type");
        try {
            // Objcm.g:472:2: ( static_type -> ^( STATIC_TYPE static_type ) )
            // Objcm.g:472:4: static_type
            {
            pushFollow(FOLLOW_static_type_in_static_type_wrapper2321);
            static_type251=static_type();

            state._fsp--;

            stream_static_type.add(static_type251.getTree());

            // AST REWRITE
            // elements: static_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 472:16: -> ^( STATIC_TYPE static_type )
            {
                // Objcm.g:472:19: ^( STATIC_TYPE static_type )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_TYPE, "STATIC_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_static_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type_wrapper"


    public static class static_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type"
    // Objcm.g:474:1: static_type : ( object_name ( ASTERISK )* )? ;
    public final ObjcmParser.static_type_return static_type() throws RecognitionException {
        ObjcmParser.static_type_return retval = new ObjcmParser.static_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK253=null;
        ObjcmParser.object_name_return object_name252 =null;


        Object ASTERISK253_tree=null;

        try {
            // Objcm.g:475:2: ( ( object_name ( ASTERISK )* )? )
            // Objcm.g:475:4: ( object_name ( ASTERISK )* )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:475:4: ( object_name ( ASTERISK )* )?
            int alt56=2;
            alt56 = dfa56.predict(input);
            switch (alt56) {
                case 1 :
                    // Objcm.g:475:5: object_name ( ASTERISK )*
                    {
                    pushFollow(FOLLOW_object_name_in_static_type2341);
                    object_name252=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name252.getTree());

                    // Objcm.g:475:17: ( ASTERISK )*
                    loop55:
                    do {
                        int alt55=2;
                        int LA55_0 = input.LA(1);

                        if ( (LA55_0==ASTERISK) ) {
                            alt55=1;
                        }


                        switch (alt55) {
                    	case 1 :
                    	    // Objcm.g:475:17: ASTERISK
                    	    {
                    	    ASTERISK253=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_static_type2343); 
                    	    ASTERISK253_tree = 
                    	    (Object)adaptor.create(ASTERISK253)
                    	    ;
                    	    adaptor.addChild(root_0, ASTERISK253_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop55;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type"


    public static class id_part_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end"
    // Objcm.g:477:1: id_part_end : ( id_part_end_internal )+ ;
    public final ObjcmParser.id_part_end_return id_part_end() throws RecognitionException {
        ObjcmParser.id_part_end_return retval = new ObjcmParser.id_part_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_end_internal_return id_part_end_internal254 =null;



        try {
            // Objcm.g:478:2: ( ( id_part_end_internal )+ )
            // Objcm.g:478:4: ( id_part_end_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:478:4: ( id_part_end_internal )+
            int cnt57=0;
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==DOT||LA57_0==157) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // Objcm.g:478:4: id_part_end_internal
            	    {
            	    pushFollow(FOLLOW_id_part_end_internal_in_id_part_end2357);
            	    id_part_end_internal254=id_part_end_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part_end_internal254.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt57 >= 1 ) break loop57;
                        EarlyExitException eee =
                            new EarlyExitException(57, input);
                        throw eee;
                }
                cnt57++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end"


    public static class id_part_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end_internal"
    // Objcm.g:481:1: id_part_end_internal : ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) ;
    public final ObjcmParser.id_part_end_internal_return id_part_end_internal() throws RecognitionException {
        ObjcmParser.id_part_end_internal_return retval = new ObjcmParser.id_part_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT255=null;
        Token string_literal256=null;
        ObjcmParser.id_part_return id_part257 =null;


        Object DOT255_tree=null;
        Object string_literal256_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleSubtreeStream stream_id_part=new RewriteRuleSubtreeStream(adaptor,"rule id_part");
        try {
            // Objcm.g:482:2: ( ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) )
            // Objcm.g:482:4: ( DOT | '->' ) id_part
            {
            // Objcm.g:482:4: ( DOT | '->' )
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==DOT) ) {
                alt58=1;
            }
            else if ( (LA58_0==157) ) {
                alt58=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }
            switch (alt58) {
                case 1 :
                    // Objcm.g:482:5: DOT
                    {
                    DOT255=(Token)match(input,DOT,FOLLOW_DOT_in_id_part_end_internal2372);  
                    stream_DOT.add(DOT255);


                    }
                    break;
                case 2 :
                    // Objcm.g:482:11: '->'
                    {
                    string_literal256=(Token)match(input,157,FOLLOW_157_in_id_part_end_internal2376);  
                    stream_157.add(string_literal256);


                    }
                    break;

            }


            pushFollow(FOLLOW_id_part_in_id_part_end_internal2379);
            id_part257=id_part();

            state._fsp--;

            stream_id_part.add(id_part257.getTree());

            // AST REWRITE
            // elements: id_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 482:25: -> ^( FIELD_ACCESS id_part )
            {
                // Objcm.g:482:28: ^( FIELD_ACCESS id_part )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_ACCESS, "FIELD_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_id_part.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end_internal"


    public static class known_types_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_types"
    // Objcm.g:485:1: known_types : ( 'unsigned' | VOID );
    public final ObjcmParser.known_types_return known_types() throws RecognitionException {
        ObjcmParser.known_types_return retval = new ObjcmParser.known_types_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set258=null;

        Object set258_tree=null;

        try {
            // Objcm.g:486:2: ( 'unsigned' | VOID )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set258=(Token)input.LT(1);

            if ( input.LA(1)==VOID||input.LA(1)==190 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set258)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_types"


    public static class id_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part"
    // Objcm.g:490:1: id_part : name_internal ( function_brackets_wrapper )? ( index )* ;
    public final ObjcmParser.id_part_return id_part() throws RecognitionException {
        ObjcmParser.id_part_return retval = new ObjcmParser.id_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal259 =null;

        ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper260 =null;

        ObjcmParser.index_return index261 =null;



        try {
            // Objcm.g:490:9: ( name_internal ( function_brackets_wrapper )? ( index )* )
            // Objcm.g:490:12: name_internal ( function_brackets_wrapper )? ( index )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_internal_in_id_part2417);
            name_internal259=name_internal();

            state._fsp--;

            adaptor.addChild(root_0, name_internal259.getTree());

            // Objcm.g:490:26: ( function_brackets_wrapper )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==L_BR) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // Objcm.g:490:26: function_brackets_wrapper
                    {
                    pushFollow(FOLLOW_function_brackets_wrapper_in_id_part2419);
                    function_brackets_wrapper260=function_brackets_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, function_brackets_wrapper260.getTree());

                    }
                    break;

            }


            // Objcm.g:490:53: ( index )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==L_KBR) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // Objcm.g:490:53: index
            	    {
            	    pushFollow(FOLLOW_index_in_id_part2422);
            	    index261=index();

            	    state._fsp--;

            	    adaptor.addChild(root_0, index261.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part"


    public static class object_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_name"
    // Objcm.g:493:1: object_name : id_part ( id_part_end )? ;
    public final ObjcmParser.object_name_return object_name() throws RecognitionException {
        ObjcmParser.object_name_return retval = new ObjcmParser.object_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_return id_part262 =null;

        ObjcmParser.id_part_end_return id_part_end263 =null;



        try {
            // Objcm.g:494:2: ( id_part ( id_part_end )? )
            // Objcm.g:494:4: id_part ( id_part_end )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_id_part_in_object_name2435);
            id_part262=id_part();

            state._fsp--;

            adaptor.addChild(root_0, id_part262.getTree());

            // Objcm.g:494:12: ( id_part_end )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==DOT||LA61_0==157) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // Objcm.g:494:12: id_part_end
                    {
                    pushFollow(FOLLOW_id_part_end_in_object_name2437);
                    id_part_end263=id_part_end();

                    state._fsp--;

                    adaptor.addChild(root_0, id_part_end263.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_name"


    public static class method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper"
    // Objcm.g:497:1: method_call_wrapper : L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper_return method_call_wrapper() throws RecognitionException {
        ObjcmParser.method_call_wrapper_return retval = new ObjcmParser.method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR264=null;
        Token R_KBR266=null;
        ObjcmParser.method_call2_return method_call2265 =null;


        Object L_KBR264_tree=null;
        Object R_KBR266_tree=null;
        RewriteRuleTokenStream stream_R_KBR=new RewriteRuleTokenStream(adaptor,"token R_KBR");
        RewriteRuleTokenStream stream_L_KBR=new RewriteRuleTokenStream(adaptor,"token L_KBR");
        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // Objcm.g:498:2: ( L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) )
            // Objcm.g:498:4: L_KBR method_call2 R_KBR
            {
            L_KBR264=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_method_call_wrapper2451);  
            stream_L_KBR.add(L_KBR264);


            pushFollow(FOLLOW_method_call2_in_method_call_wrapper2453);
            method_call2265=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2265.getTree());

            R_KBR266=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_method_call_wrapper2455);  
            stream_R_KBR.add(R_KBR266);


            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 498:29: -> ^( METHOD_CALL method_call2 )
            {
                // Objcm.g:498:32: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper"


    public static class method_call_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper2"
    // Objcm.g:501:1: method_call_wrapper2 : method_call2 -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper2_return method_call_wrapper2() throws RecognitionException {
        ObjcmParser.method_call_wrapper2_return retval = new ObjcmParser.method_call_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call2_return method_call2267 =null;


        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // Objcm.g:502:2: ( method_call2 -> ^( METHOD_CALL method_call2 ) )
            // Objcm.g:502:4: method_call2
            {
            pushFollow(FOLLOW_method_call2_in_method_call_wrapper22478);
            method_call2267=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2267.getTree());

            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 502:17: -> ^( METHOD_CALL method_call2 )
            {
                // Objcm.g:502:20: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper2"


    public static class method_call2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call2"
    // Objcm.g:504:1: method_call2 : object_wrapper method_name ( method_call_message_list_wrapper )? ;
    public final ObjcmParser.method_call2_return method_call2() throws RecognitionException {
        ObjcmParser.method_call2_return retval = new ObjcmParser.method_call2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_return object_wrapper268 =null;

        ObjcmParser.method_name_return method_name269 =null;

        ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper270 =null;



        try {
            // Objcm.g:505:2: ( object_wrapper method_name ( method_call_message_list_wrapper )? )
            // Objcm.g:505:4: object_wrapper method_name ( method_call_message_list_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapper_in_method_call22497);
            object_wrapper268=object_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapper268.getTree());

            pushFollow(FOLLOW_method_name_in_method_call22499);
            method_name269=method_name();

            state._fsp--;

            adaptor.addChild(root_0, method_name269.getTree());

            // Objcm.g:505:31: ( method_call_message_list_wrapper )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==COLON) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // Objcm.g:505:33: method_call_message_list_wrapper
                    {
                    pushFollow(FOLLOW_method_call_message_list_wrapper_in_method_call22503);
                    method_call_message_list_wrapper270=method_call_message_list_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_message_list_wrapper270.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call2"


    public static class object_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper"
    // Objcm.g:507:1: object_wrapper : object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) ;
    public final ObjcmParser.object_wrapper_return object_wrapper() throws RecognitionException {
        ObjcmParser.object_wrapper_return retval = new ObjcmParser.object_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_internal_return object_wrapper_internal271 =null;


        RewriteRuleSubtreeStream stream_object_wrapper_internal=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapper_internal");
        try {
            // Objcm.g:508:2: ( object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) )
            // Objcm.g:508:4: object_wrapper_internal
            {
            pushFollow(FOLLOW_object_wrapper_internal_in_object_wrapper2514);
            object_wrapper_internal271=object_wrapper_internal();

            state._fsp--;

            stream_object_wrapper_internal.add(object_wrapper_internal271.getTree());

            // AST REWRITE
            // elements: object_wrapper_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 508:28: -> ^( OBJECT object_wrapper_internal )
            {
                // Objcm.g:508:31: ^( OBJECT object_wrapper_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT, "OBJECT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapper_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper"


    public static class object_wrapper_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper_internal"
    // Objcm.g:510:1: object_wrapper_internal : ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL );
    public final ObjcmParser.object_wrapper_internal_return object_wrapper_internal() throws RecognitionException {
        ObjcmParser.object_wrapper_internal_return retval = new ObjcmParser.object_wrapper_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL277=null;
        ObjcmParser.type_convertion_return type_convertion272 =null;

        ObjcmParser.object_name_return object_name273 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper274 =null;

        ObjcmParser.object_name_return object_name275 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper276 =null;


        Object STRING_LITERAL277_tree=null;

        try {
            // Objcm.g:512:2: ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL )
            int alt64=4;
            switch ( input.LA(1) ) {
            case L_BR:
                {
                alt64=1;
                }
                break;
            case ID:
            case 183:
                {
                alt64=2;
                }
                break;
            case L_KBR:
                {
                alt64=3;
                }
                break;
            case STRING_LITERAL:
                {
                alt64=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }

            switch (alt64) {
                case 1 :
                    // Objcm.g:512:4: type_convertion ( object_name | method_call_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_convertion_in_object_wrapper_internal2533);
                    type_convertion272=type_convertion();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion272.getTree());

                    // Objcm.g:512:20: ( object_name | method_call_wrapper )
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==ID||LA63_0==183) ) {
                        alt63=1;
                    }
                    else if ( (LA63_0==L_KBR) ) {
                        alt63=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 63, 0, input);

                        throw nvae;

                    }
                    switch (alt63) {
                        case 1 :
                            // Objcm.g:512:21: object_name
                            {
                            pushFollow(FOLLOW_object_name_in_object_wrapper_internal2536);
                            object_name273=object_name();

                            state._fsp--;

                            adaptor.addChild(root_0, object_name273.getTree());

                            }
                            break;
                        case 2 :
                            // Objcm.g:512:35: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2540);
                            method_call_wrapper274=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper274.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:513:4: object_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_name_in_object_wrapper_internal2546);
                    object_name275=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name275.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:514:4: method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2551);
                    method_call_wrapper276=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper276.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:515:4: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL277=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_object_wrapper_internal2556); 
                    STRING_LITERAL277_tree = 
                    (Object)adaptor.create(STRING_LITERAL277)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL277_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper_internal"


    public static class method_message3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_message3"
    // Objcm.g:518:1: method_message3 : classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) ;
    public final ObjcmParser.method_message3_return method_message3() throws RecognitionException {
        ObjcmParser.method_message3_return retval = new ObjcmParser.method_message3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp278 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:519:2: ( classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) )
            // Objcm.g:519:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_method_message32568);
            classical_expr_wrp278=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp278.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 519:23: -> ^( MESSAGE classical_expr_wrp )
            {
                // Objcm.g:519:26: ^( MESSAGE classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_message3"


    public static class type_convertion_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion"
    // Objcm.g:521:1: type_convertion : L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE_CONVERTION type_internal ( generic )? ) ;
    public final ObjcmParser.type_convertion_return type_convertion() throws RecognitionException {
        ObjcmParser.type_convertion_return retval = new ObjcmParser.type_convertion_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR279=null;
        Token string_literal280=null;
        Token string_literal281=null;
        Token ASTERISK284=null;
        Token R_BR285=null;
        ObjcmParser.type_internal_return type_internal282 =null;

        ObjcmParser.generic_return generic283 =null;


        Object L_BR279_tree=null;
        Object string_literal280_tree=null;
        Object string_literal281_tree=null;
        Object ASTERISK284_tree=null;
        Object R_BR285_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        RewriteRuleSubtreeStream stream_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_internal");
        try {
            // Objcm.g:522:2: ( L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE_CONVERTION type_internal ( generic )? ) )
            // Objcm.g:522:4: L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR
            {
            L_BR279=(Token)match(input,L_BR,FOLLOW_L_BR_in_type_convertion2587);  
            stream_L_BR.add(L_BR279);


            // Objcm.g:522:9: ( 'const' )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==CONST_PREFIX) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // Objcm.g:522:9: 'const'
                    {
                    string_literal280=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_convertion2589);  
                    stream_CONST_PREFIX.add(string_literal280);


                    }
                    break;

            }


            // Objcm.g:522:18: ( 'unsigned' )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==190) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // Objcm.g:522:18: 'unsigned'
                    {
                    string_literal281=(Token)match(input,190,FOLLOW_190_in_type_convertion2592);  
                    stream_190.add(string_literal281);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_type_convertion2595);
            type_internal282=type_internal();

            state._fsp--;

            stream_type_internal.add(type_internal282.getTree());

            // Objcm.g:522:44: ( generic )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==L_LESS) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // Objcm.g:522:44: generic
                    {
                    pushFollow(FOLLOW_generic_in_type_convertion2597);
                    generic283=generic();

                    state._fsp--;

                    stream_generic.add(generic283.getTree());

                    }
                    break;

            }


            // Objcm.g:522:53: ( ASTERISK )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==ASTERISK) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // Objcm.g:522:53: ASTERISK
            	    {
            	    ASTERISK284=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_type_convertion2600);  
            	    stream_ASTERISK.add(ASTERISK284);


            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            R_BR285=(Token)match(input,R_BR,FOLLOW_R_BR_in_type_convertion2603);  
            stream_R_BR.add(R_BR285);


            // AST REWRITE
            // elements: generic, type_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 522:69: -> ^( TYPE_CONVERTION type_internal ( generic )? )
            {
                // Objcm.g:522:72: ^( TYPE_CONVERTION type_internal ( generic )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CONVERTION, "TYPE_CONVERTION")
                , root_1);

                adaptor.addChild(root_1, stream_type_internal.nextTree());

                // Objcm.g:522:104: ( generic )?
                if ( stream_generic.hasNext() ) {
                    adaptor.addChild(root_1, stream_generic.nextTree());

                }
                stream_generic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // Objcm.g:524:1: method_name : ID -> ^( METHOD_NAME ID ) ;
    public final ObjcmParser.method_name_return method_name() throws RecognitionException {
        ObjcmParser.method_name_return retval = new ObjcmParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID286=null;

        Object ID286_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:525:2: ( ID -> ^( METHOD_NAME ID ) )
            // Objcm.g:525:4: ID
            {
            ID286=(Token)match(input,ID,FOLLOW_ID_in_method_name2624);  
            stream_ID.add(ID286);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 525:7: -> ^( METHOD_NAME ID )
            {
                // Objcm.g:525:10: ^( METHOD_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_call_message_list_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list_wrapper"
    // Objcm.g:527:1: method_call_message_list_wrapper : method_call_message_list -> ^( MSG_LIST method_call_message_list ) ;
    public final ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_list_wrapper_return retval = new ObjcmParser.method_call_message_list_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_list_return method_call_message_list287 =null;


        RewriteRuleSubtreeStream stream_method_call_message_list=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_list");
        try {
            // Objcm.g:528:2: ( method_call_message_list -> ^( MSG_LIST method_call_message_list ) )
            // Objcm.g:528:4: method_call_message_list
            {
            pushFollow(FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2641);
            method_call_message_list287=method_call_message_list();

            state._fsp--;

            stream_method_call_message_list.add(method_call_message_list287.getTree());

            // AST REWRITE
            // elements: method_call_message_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 528:29: -> ^( MSG_LIST method_call_message_list )
            {
                // Objcm.g:528:32: ^( MSG_LIST method_call_message_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MSG_LIST, "MSG_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list_wrapper"


    public static class method_call_message_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list"
    // Objcm.g:530:1: method_call_message_list : method_call_message_first_wrapper ( method_call_message_wrapper )* ;
    public final ObjcmParser.method_call_message_list_return method_call_message_list() throws RecognitionException {
        ObjcmParser.method_call_message_list_return retval = new ObjcmParser.method_call_message_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper288 =null;

        ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper289 =null;



        try {
            // Objcm.g:531:2: ( method_call_message_first_wrapper ( method_call_message_wrapper )* )
            // Objcm.g:531:4: method_call_message_first_wrapper ( method_call_message_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2658);
            method_call_message_first_wrapper288=method_call_message_first_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_call_message_first_wrapper288.getTree());

            // Objcm.g:531:38: ( method_call_message_wrapper )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==COLON||LA69_0==ID) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // Objcm.g:531:38: method_call_message_wrapper
            	    {
            	    pushFollow(FOLLOW_method_call_message_wrapper_in_method_call_message_list2660);
            	    method_call_message_wrapper289=method_call_message_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_call_message_wrapper289.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list"


    public static class method_call_message_first_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first_wrapper"
    // Objcm.g:533:1: method_call_message_first_wrapper : method_call_message_first -> ^( METHOD_MSG method_call_message_first ) ;
    public final ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_first_wrapper_return retval = new ObjcmParser.method_call_message_first_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_return method_call_message_first290 =null;


        RewriteRuleSubtreeStream stream_method_call_message_first=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_first");
        try {
            // Objcm.g:534:2: ( method_call_message_first -> ^( METHOD_MSG method_call_message_first ) )
            // Objcm.g:534:4: method_call_message_first
            {
            pushFollow(FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2671);
            method_call_message_first290=method_call_message_first();

            state._fsp--;

            stream_method_call_message_first.add(method_call_message_first290.getTree());

            // AST REWRITE
            // elements: method_call_message_first
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 534:30: -> ^( METHOD_MSG method_call_message_first )
            {
                // Objcm.g:534:33: ^( METHOD_MSG method_call_message_first )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_first.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first_wrapper"


    public static class method_call_message_first_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first"
    // Objcm.g:536:1: method_call_message_first : COLON message ;
    public final ObjcmParser.method_call_message_first_return method_call_message_first() throws RecognitionException {
        ObjcmParser.method_call_message_first_return retval = new ObjcmParser.method_call_message_first_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON291=null;
        ObjcmParser.message_return message292 =null;


        Object COLON291_tree=null;

        try {
            // Objcm.g:537:2: ( COLON message )
            // Objcm.g:537:4: COLON message
            {
            root_0 = (Object)adaptor.nil();


            COLON291=(Token)match(input,COLON,FOLLOW_COLON_in_method_call_message_first2688); 
            COLON291_tree = 
            (Object)adaptor.create(COLON291)
            ;
            adaptor.addChild(root_0, COLON291_tree);


            pushFollow(FOLLOW_message_in_method_call_message_first2691);
            message292=message();

            state._fsp--;

            adaptor.addChild(root_0, message292.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first"


    public static class method_call_message_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_wrapper"
    // Objcm.g:539:1: method_call_message_wrapper : method_call_message -> ^( METHOD_MSG method_call_message ) ;
    public final ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_wrapper_return retval = new ObjcmParser.method_call_message_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_return method_call_message293 =null;


        RewriteRuleSubtreeStream stream_method_call_message=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message");
        try {
            // Objcm.g:540:2: ( method_call_message -> ^( METHOD_MSG method_call_message ) )
            // Objcm.g:540:4: method_call_message
            {
            pushFollow(FOLLOW_method_call_message_in_method_call_message_wrapper2701);
            method_call_message293=method_call_message();

            state._fsp--;

            stream_method_call_message.add(method_call_message293.getTree());

            // AST REWRITE
            // elements: method_call_message
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 540:24: -> ^( METHOD_MSG method_call_message )
            {
                // Objcm.g:540:27: ^( METHOD_MSG method_call_message )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_wrapper"


    public static class method_call_message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message"
    // Objcm.g:542:1: method_call_message : ( prefix | incomplete_prefix ) message ;
    public final ObjcmParser.method_call_message_return method_call_message() throws RecognitionException {
        ObjcmParser.method_call_message_return retval = new ObjcmParser.method_call_message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.prefix_return prefix294 =null;

        ObjcmParser.incomplete_prefix_return incomplete_prefix295 =null;

        ObjcmParser.message_return message296 =null;



        try {
            // Objcm.g:543:2: ( ( prefix | incomplete_prefix ) message )
            // Objcm.g:543:4: ( prefix | incomplete_prefix ) message
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:543:4: ( prefix | incomplete_prefix )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==ID) ) {
                alt70=1;
            }
            else if ( (LA70_0==COLON) ) {
                alt70=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;

            }
            switch (alt70) {
                case 1 :
                    // Objcm.g:543:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_call_message2720);
                    prefix294=prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, prefix294.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:543:14: incomplete_prefix
                    {
                    pushFollow(FOLLOW_incomplete_prefix_in_method_call_message2724);
                    incomplete_prefix295=incomplete_prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, incomplete_prefix295.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_message_in_method_call_message2728);
            message296=message();

            state._fsp--;

            adaptor.addChild(root_0, message296.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message"


    public static class message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "message"
    // Objcm.g:545:1: message : msg_expr ( COMMA msg_expr )* -> ^( MESSAGE msg_expr ( COMMA msg_expr )* ) ;
    public final ObjcmParser.message_return message() throws RecognitionException {
        ObjcmParser.message_return retval = new ObjcmParser.message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA298=null;
        ObjcmParser.msg_expr_return msg_expr297 =null;

        ObjcmParser.msg_expr_return msg_expr299 =null;


        Object COMMA298_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_msg_expr=new RewriteRuleSubtreeStream(adaptor,"rule msg_expr");
        try {
            // Objcm.g:545:9: ( msg_expr ( COMMA msg_expr )* -> ^( MESSAGE msg_expr ( COMMA msg_expr )* ) )
            // Objcm.g:545:11: msg_expr ( COMMA msg_expr )*
            {
            pushFollow(FOLLOW_msg_expr_in_message2737);
            msg_expr297=msg_expr();

            state._fsp--;

            stream_msg_expr.add(msg_expr297.getTree());

            // Objcm.g:545:20: ( COMMA msg_expr )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // Objcm.g:545:21: COMMA msg_expr
            	    {
            	    COMMA298=(Token)match(input,COMMA,FOLLOW_COMMA_in_message2740);  
            	    stream_COMMA.add(COMMA298);


            	    pushFollow(FOLLOW_msg_expr_in_message2742);
            	    msg_expr299=msg_expr();

            	    state._fsp--;

            	    stream_msg_expr.add(msg_expr299.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            // AST REWRITE
            // elements: msg_expr, msg_expr, COMMA
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 545:38: -> ^( MESSAGE msg_expr ( COMMA msg_expr )* )
            {
                // Objcm.g:545:41: ^( MESSAGE msg_expr ( COMMA msg_expr )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_msg_expr.nextTree());

                // Objcm.g:545:60: ( COMMA msg_expr )*
                while ( stream_msg_expr.hasNext()||stream_COMMA.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_COMMA.nextNode()
                    );

                    adaptor.addChild(root_1, stream_msg_expr.nextTree());

                }
                stream_msg_expr.reset();
                stream_COMMA.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "message"


    public static class msg_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "msg_expr"
    // Objcm.g:549:1: msg_expr : classical_expr_wrp ;
    public final ObjcmParser.msg_expr_return msg_expr() throws RecognitionException {
        ObjcmParser.msg_expr_return retval = new ObjcmParser.msg_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp300 =null;



        try {
            // Objcm.g:550:2: ( classical_expr_wrp )
            // Objcm.g:550:5: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_msg_expr2776);
            classical_expr_wrp300=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp300.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "msg_expr"


    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // Objcm.g:557:1: expression : ( classical_expr_wrp | struct_init );
    public final ObjcmParser.expression_return expression() throws RecognitionException {
        ObjcmParser.expression_return retval = new ObjcmParser.expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp301 =null;

        ObjcmParser.struct_init_return struct_init302 =null;



        try {
            // Objcm.g:558:2: ( classical_expr_wrp | struct_init )
            int alt72=2;
            alt72 = dfa72.predict(input);
            switch (alt72) {
                case 1 :
                    // Objcm.g:558:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_expression2792);
                    classical_expr_wrp301=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp301.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:559:4: struct_init
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_in_expression2797);
                    struct_init302=struct_init();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init302.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class full_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr_wrapper"
    // Objcm.g:562:1: full_expr_wrapper : full_expr -> ^( EXPR_FULL full_expr ) ;
    public final ObjcmParser.full_expr_wrapper_return full_expr_wrapper() throws RecognitionException {
        ObjcmParser.full_expr_wrapper_return retval = new ObjcmParser.full_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_return full_expr303 =null;


        RewriteRuleSubtreeStream stream_full_expr=new RewriteRuleSubtreeStream(adaptor,"rule full_expr");
        try {
            // Objcm.g:563:2: ( full_expr -> ^( EXPR_FULL full_expr ) )
            // Objcm.g:563:4: full_expr
            {
            pushFollow(FOLLOW_full_expr_in_full_expr_wrapper2808);
            full_expr303=full_expr();

            state._fsp--;

            stream_full_expr.add(full_expr303.getTree());

            // AST REWRITE
            // elements: full_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 563:14: -> ^( EXPR_FULL full_expr )
            {
                // Objcm.g:563:17: ^( EXPR_FULL full_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_FULL, "EXPR_FULL")
                , root_1);

                adaptor.addChild(root_1, stream_full_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr_wrapper"


    public static class full_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr"
    // Objcm.g:565:1: full_expr : classical_expr_wrp ( COMMA classical_expr_wrp )* ;
    public final ObjcmParser.full_expr_return full_expr() throws RecognitionException {
        ObjcmParser.full_expr_return retval = new ObjcmParser.full_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA305=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp304 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp306 =null;


        Object COMMA305_tree=null;

        try {
            // Objcm.g:566:2: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )
            // Objcm.g:566:4: classical_expr_wrp ( COMMA classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_full_expr2825);
            classical_expr_wrp304=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp304.getTree());

            // Objcm.g:566:23: ( COMMA classical_expr_wrp )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // Objcm.g:566:24: COMMA classical_expr_wrp
            	    {
            	    COMMA305=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr2828); 
            	    COMMA305_tree = 
            	    (Object)adaptor.create(COMMA305)
            	    ;
            	    adaptor.addChild(root_0, COMMA305_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_full_expr2830);
            	    classical_expr_wrp306=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp306.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr"


    public static class full_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr2"
    // Objcm.g:568:1: full_expr2 : classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* ;
    public final ObjcmParser.full_expr2_return full_expr2() throws RecognitionException {
        ObjcmParser.full_expr2_return retval = new ObjcmParser.full_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA308=null;
        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2307 =null;

        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2309 =null;


        Object COMMA308_tree=null;

        try {
            // Objcm.g:569:2: ( classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* )
            // Objcm.g:569:4: classical_expr_wrp2 ( COMMA classical_expr_wrp2 )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr22841);
            classical_expr_wrp2307=classical_expr_wrp2();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp2307.getTree());

            // Objcm.g:569:24: ( COMMA classical_expr_wrp2 )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==COMMA) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // Objcm.g:569:25: COMMA classical_expr_wrp2
            	    {
            	    COMMA308=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr22844); 
            	    COMMA308_tree = 
            	    (Object)adaptor.create(COMMA308)
            	    ;
            	    adaptor.addChild(root_0, COMMA308_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr22846);
            	    classical_expr_wrp2309=classical_expr_wrp2();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp2309.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr2"


    public static class expr_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign_wrapper"
    // Objcm.g:571:1: expr_assign_wrapper : expr_assign -> ^( EXPR_ASSIGN expr_assign ) ;
    public final ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper() throws RecognitionException {
        ObjcmParser.expr_assign_wrapper_return retval = new ObjcmParser.expr_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_assign_return expr_assign310 =null;


        RewriteRuleSubtreeStream stream_expr_assign=new RewriteRuleSubtreeStream(adaptor,"rule expr_assign");
        try {
            // Objcm.g:572:2: ( expr_assign -> ^( EXPR_ASSIGN expr_assign ) )
            // Objcm.g:572:4: expr_assign
            {
            pushFollow(FOLLOW_expr_assign_in_expr_assign_wrapper2857);
            expr_assign310=expr_assign();

            state._fsp--;

            stream_expr_assign.add(expr_assign310.getTree());

            // AST REWRITE
            // elements: expr_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 572:16: -> ^( EXPR_ASSIGN expr_assign )
            {
                // Objcm.g:572:19: ^( EXPR_ASSIGN expr_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ASSIGN, "EXPR_ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_expr_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign_wrapper"


    public static class expr_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign"
    // Objcm.g:574:1: expr_assign : assign_wrapper ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) ) ;
    public final ObjcmParser.expr_assign_return expr_assign() throws RecognitionException {
        ObjcmParser.expr_assign_return retval = new ObjcmParser.expr_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_wrapper_return assign_wrapper311 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp312 =null;

        ObjcmParser.array_init_return array_init313 =null;

        ObjcmParser.func_pointer2_return func_pointer2314 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper315 =null;



        try {
            // Objcm.g:575:2: ( assign_wrapper ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) ) )
            // Objcm.g:575:4: assign_wrapper ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_assign_wrapper_in_expr_assign2876);
            assign_wrapper311=assign_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, assign_wrapper311.getTree());

            // Objcm.g:575:19: ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) )
            int alt76=3;
            alt76 = dfa76.predict(input);
            switch (alt76) {
                case 1 :
                    // Objcm.g:575:20: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_expr_assign2879);
                    classical_expr_wrp312=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp312.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:575:41: array_init
                    {
                    pushFollow(FOLLOW_array_init_in_expr_assign2883);
                    array_init313=array_init();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init313.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:575:54: ( func_pointer2 ( method_call_wrapper )? )
                    {
                    // Objcm.g:575:54: ( func_pointer2 ( method_call_wrapper )? )
                    // Objcm.g:575:55: func_pointer2 ( method_call_wrapper )?
                    {
                    pushFollow(FOLLOW_func_pointer2_in_expr_assign2888);
                    func_pointer2314=func_pointer2();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer2314.getTree());

                    // Objcm.g:575:69: ( method_call_wrapper )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==L_KBR) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // Objcm.g:575:69: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_expr_assign2890);
                            method_call_wrapper315=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper315.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // Objcm.g:577:1: array_init : L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR ;
    public final ObjcmParser.array_init_return array_init() throws RecognitionException {
        ObjcmParser.array_init_return retval = new ObjcmParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR316=null;
        Token COMMA318=null;
        Token R_FBR320=null;
        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3317 =null;

        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3319 =null;


        Object L_FBR316_tree=null;
        Object COMMA318_tree=null;
        Object R_FBR320_tree=null;

        try {
            // Objcm.g:578:2: ( L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR )
            // Objcm.g:578:4: L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR316=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array_init2903); 
            L_FBR316_tree = 
            (Object)adaptor.create(L_FBR316)
            ;
            adaptor.addChild(root_0, L_FBR316_tree);


            // Objcm.g:578:10: ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==ASTERISK||LA78_0==ID||LA78_0==L_AND||LA78_0==L_BR||(LA78_0 >= L_FBR && LA78_0 <= L_KBR)||LA78_0==L_MINUS||LA78_0==L_MINUS_MINUS||LA78_0==L_NOT||LA78_0==L_PLUS||LA78_0==L_PLUS_PLUS||LA78_0==L_TILDA||LA78_0==NUMBER||LA78_0==SIZEOF||(LA78_0 >= STRING_LITERAL && LA78_0 <= STRING_LITERAL3)||LA78_0==160||LA78_0==166||LA78_0==168||LA78_0==172||LA78_0==183||LA78_0==185||LA78_0==190) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // Objcm.g:578:11: classical_expr_wrp3 ( COMMA classical_expr_wrp3 )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init2906);
                    classical_expr_wrp3317=classical_expr_wrp3();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp3317.getTree());

                    // Objcm.g:578:31: ( COMMA classical_expr_wrp3 )*
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( (LA77_0==COMMA) ) {
                            alt77=1;
                        }


                        switch (alt77) {
                    	case 1 :
                    	    // Objcm.g:578:32: COMMA classical_expr_wrp3
                    	    {
                    	    COMMA318=(Token)match(input,COMMA,FOLLOW_COMMA_in_array_init2909); 
                    	    COMMA318_tree = 
                    	    (Object)adaptor.create(COMMA318)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA318_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init2911);
                    	    classical_expr_wrp3319=classical_expr_wrp3();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp3319.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop77;
                        }
                    } while (true);


                    }
                    break;

            }


            R_FBR320=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array_init2917); 
            R_FBR320_tree = 
            (Object)adaptor.create(R_FBR320)
            ;
            adaptor.addChild(root_0, R_FBR320_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class classical_expr_wrp3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp3"
    // Objcm.g:581:1: classical_expr_wrp3 : ( array_init | classical_expr_wrp );
    public final ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3() throws RecognitionException {
        ObjcmParser.classical_expr_wrp3_return retval = new ObjcmParser.classical_expr_wrp3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.array_init_return array_init321 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp322 =null;



        try {
            // Objcm.g:582:2: ( array_init | classical_expr_wrp )
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==L_FBR) ) {
                alt79=1;
            }
            else if ( (LA79_0==ASTERISK||LA79_0==ID||LA79_0==L_AND||LA79_0==L_BR||LA79_0==L_KBR||LA79_0==L_MINUS||LA79_0==L_MINUS_MINUS||LA79_0==L_NOT||LA79_0==L_PLUS||LA79_0==L_PLUS_PLUS||LA79_0==L_TILDA||LA79_0==NUMBER||LA79_0==SIZEOF||(LA79_0 >= STRING_LITERAL && LA79_0 <= STRING_LITERAL3)||LA79_0==160||LA79_0==166||LA79_0==168||LA79_0==172||LA79_0==183||LA79_0==185||LA79_0==190) ) {
                alt79=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }
            switch (alt79) {
                case 1 :
                    // Objcm.g:582:4: array_init
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_init_in_classical_expr_wrp32929);
                    array_init321=array_init();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init321.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:583:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_classical_expr_wrp32935);
                    classical_expr_wrp322=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp322.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp3"


    public static class classical_expr_wrp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp"
    // Objcm.g:586:1: classical_expr_wrp : classical_expr -> ^( CLASSICAL_EXPR classical_expr ) ;
    public final ObjcmParser.classical_expr_wrp_return classical_expr_wrp() throws RecognitionException {
        ObjcmParser.classical_expr_wrp_return retval = new ObjcmParser.classical_expr_wrp_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_return classical_expr323 =null;


        RewriteRuleSubtreeStream stream_classical_expr=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr");
        try {
            // Objcm.g:587:2: ( classical_expr -> ^( CLASSICAL_EXPR classical_expr ) )
            // Objcm.g:587:4: classical_expr
            {
            pushFollow(FOLLOW_classical_expr_in_classical_expr_wrp2948);
            classical_expr323=classical_expr();

            state._fsp--;

            stream_classical_expr.add(classical_expr323.getTree());

            // AST REWRITE
            // elements: classical_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 587:19: -> ^( CLASSICAL_EXPR classical_expr )
            {
                // Objcm.g:587:22: ^( CLASSICAL_EXPR classical_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR, "CLASSICAL_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp"


    public static class classical_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr"
    // Objcm.g:589:1: classical_expr : simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr_return classical_expr() throws RecognitionException {
        ObjcmParser.classical_expr_return retval = new ObjcmParser.classical_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper324 =null;

        ObjcmParser.expr_question_wrapper_return expr_question_wrapper325 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper326 =null;



        try {
            // Objcm.g:590:2: ( simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? )
            // Objcm.g:590:4: simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_simple_expr_wrapper_in_classical_expr2965);
            simple_expr_wrapper324=simple_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, simple_expr_wrapper324.getTree());

            // Objcm.g:590:24: ( expr_question_wrapper | expr_assign_wrapper )?
            int alt80=3;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==L_QUESTION) ) {
                alt80=1;
            }
            else if ( (LA80_0==L_AND_EQ||(LA80_0 >= L_DIV_EQ && LA80_0 <= L_EQ)||LA80_0==L_LEFT_EQ||LA80_0==L_MINUS_EQ||LA80_0==L_MULT_EQ||LA80_0==L_OR_EQ||LA80_0==L_PERC_EQ||LA80_0==L_PLUS_EQ||LA80_0==L_RIGHT_EQ||LA80_0==L_XOR_EQ) ) {
                alt80=2;
            }
            switch (alt80) {
                case 1 :
                    // Objcm.g:590:25: expr_question_wrapper
                    {
                    pushFollow(FOLLOW_expr_question_wrapper_in_classical_expr2968);
                    expr_question_wrapper325=expr_question_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_question_wrapper325.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:590:49: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr2972);
                    expr_assign_wrapper326=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper326.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr"


    public static class classical_expr_wrp2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp2"
    // Objcm.g:592:1: classical_expr_wrp2 : classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) ;
    public final ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2() throws RecognitionException {
        ObjcmParser.classical_expr_wrp2_return retval = new ObjcmParser.classical_expr_wrp2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr2_return classical_expr2327 =null;


        RewriteRuleSubtreeStream stream_classical_expr2=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr2");
        try {
            // Objcm.g:593:2: ( classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) )
            // Objcm.g:593:4: classical_expr2
            {
            pushFollow(FOLLOW_classical_expr2_in_classical_expr_wrp22984);
            classical_expr2327=classical_expr2();

            state._fsp--;

            stream_classical_expr2.add(classical_expr2327.getTree());

            // AST REWRITE
            // elements: classical_expr2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 593:20: -> ^( CLASSICAL_EXPR_2 classical_expr2 )
            {
                // Objcm.g:593:23: ^( CLASSICAL_EXPR_2 classical_expr2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR_2, "CLASSICAL_EXPR_2")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp2"


    public static class classical_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr2"
    // Objcm.g:595:1: classical_expr2 : ( object_name | func_pointer1 ) ( expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr2_return classical_expr2() throws RecognitionException {
        ObjcmParser.classical_expr2_return retval = new ObjcmParser.classical_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_name_return object_name328 =null;

        ObjcmParser.func_pointer1_return func_pointer1329 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper330 =null;



        try {
            // Objcm.g:596:2: ( ( object_name | func_pointer1 ) ( expr_assign_wrapper )? )
            // Objcm.g:596:4: ( object_name | func_pointer1 ) ( expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:596:4: ( object_name | func_pointer1 )
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    // Objcm.g:596:5: object_name
                    {
                    pushFollow(FOLLOW_object_name_in_classical_expr23002);
                    object_name328=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name328.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:596:19: func_pointer1
                    {
                    pushFollow(FOLLOW_func_pointer1_in_classical_expr23006);
                    func_pointer1329=func_pointer1();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer1329.getTree());

                    }
                    break;

            }


            // Objcm.g:596:34: ( expr_assign_wrapper )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==L_AND_EQ||(LA82_0 >= L_DIV_EQ && LA82_0 <= L_EQ)||LA82_0==L_LEFT_EQ||LA82_0==L_MINUS_EQ||LA82_0==L_MULT_EQ||LA82_0==L_OR_EQ||LA82_0==L_PERC_EQ||LA82_0==L_PLUS_EQ||LA82_0==L_RIGHT_EQ||LA82_0==L_XOR_EQ) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // Objcm.g:596:34: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr23009);
                    expr_assign_wrapper330=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper330.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr2"


    public static class expr_question_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question_wrapper"
    // Objcm.g:598:1: expr_question_wrapper : expr_question -> ^( EXPR_QUESTION expr_question ) ;
    public final ObjcmParser.expr_question_wrapper_return expr_question_wrapper() throws RecognitionException {
        ObjcmParser.expr_question_wrapper_return retval = new ObjcmParser.expr_question_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_question_return expr_question331 =null;


        RewriteRuleSubtreeStream stream_expr_question=new RewriteRuleSubtreeStream(adaptor,"rule expr_question");
        try {
            // Objcm.g:599:2: ( expr_question -> ^( EXPR_QUESTION expr_question ) )
            // Objcm.g:599:4: expr_question
            {
            pushFollow(FOLLOW_expr_question_in_expr_question_wrapper3019);
            expr_question331=expr_question();

            state._fsp--;

            stream_expr_question.add(expr_question331.getTree());

            // AST REWRITE
            // elements: expr_question
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 599:18: -> ^( EXPR_QUESTION expr_question )
            {
                // Objcm.g:599:21: ^( EXPR_QUESTION expr_question )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_QUESTION, "EXPR_QUESTION")
                , root_1);

                adaptor.addChild(root_1, stream_expr_question.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question_wrapper"


    public static class expr_question_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question"
    // Objcm.g:601:1: expr_question : L_QUESTION classical_expr_wrp COLON classical_expr_wrp ;
    public final ObjcmParser.expr_question_return expr_question() throws RecognitionException {
        ObjcmParser.expr_question_return retval = new ObjcmParser.expr_question_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_QUESTION332=null;
        Token COLON334=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp333 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp335 =null;


        Object L_QUESTION332_tree=null;
        Object COLON334_tree=null;

        try {
            // Objcm.g:602:2: ( L_QUESTION classical_expr_wrp COLON classical_expr_wrp )
            // Objcm.g:602:4: L_QUESTION classical_expr_wrp COLON classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            L_QUESTION332=(Token)match(input,L_QUESTION,FOLLOW_L_QUESTION_in_expr_question3036); 
            L_QUESTION332_tree = 
            (Object)adaptor.create(L_QUESTION332)
            ;
            adaptor.addChild(root_0, L_QUESTION332_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question3038);
            classical_expr_wrp333=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp333.getTree());

            COLON334=(Token)match(input,COLON,FOLLOW_COLON_in_expr_question3040); 
            COLON334_tree = 
            (Object)adaptor.create(COLON334)
            ;
            adaptor.addChild(root_0, COLON334_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question3042);
            classical_expr_wrp335=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp335.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question"


    public static class assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign_wrapper"
    // Objcm.g:604:1: assign_wrapper : assign -> ^( ASSIGN assign ) ;
    public final ObjcmParser.assign_wrapper_return assign_wrapper() throws RecognitionException {
        ObjcmParser.assign_wrapper_return retval = new ObjcmParser.assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_return assign336 =null;


        RewriteRuleSubtreeStream stream_assign=new RewriteRuleSubtreeStream(adaptor,"rule assign");
        try {
            // Objcm.g:605:2: ( assign -> ^( ASSIGN assign ) )
            // Objcm.g:605:4: assign
            {
            pushFollow(FOLLOW_assign_in_assign_wrapper3051);
            assign336=assign();

            state._fsp--;

            stream_assign.add(assign336.getTree());

            // AST REWRITE
            // elements: assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 605:11: -> ^( ASSIGN assign )
            {
                // Objcm.g:605:14: ^( ASSIGN assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ASSIGN, "ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign_wrapper"


    public static class assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign"
    // Objcm.g:607:1: assign : ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ );
    public final ObjcmParser.assign_return assign() throws RecognitionException {
        ObjcmParser.assign_return retval = new ObjcmParser.assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set337=null;

        Object set337_tree=null;

        try {
            // Objcm.g:608:2: ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set337=(Token)input.LT(1);

            if ( input.LA(1)==L_AND_EQ||(input.LA(1) >= L_DIV_EQ && input.LA(1) <= L_EQ)||input.LA(1)==L_LEFT_EQ||input.LA(1)==L_MINUS_EQ||input.LA(1)==L_MULT_EQ||input.LA(1)==L_OR_EQ||input.LA(1)==L_PERC_EQ||input.LA(1)==L_PLUS_EQ||input.LA(1)==L_RIGHT_EQ||input.LA(1)==L_XOR_EQ ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set337)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign"


    public static class simple_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr_wrapper"
    // Objcm.g:612:1: simple_expr_wrapper : simple_expr -> ^( SIMPLE_EXPR simple_expr ) ;
    public final ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper() throws RecognitionException {
        ObjcmParser.simple_expr_wrapper_return retval = new ObjcmParser.simple_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_return simple_expr338 =null;


        RewriteRuleSubtreeStream stream_simple_expr=new RewriteRuleSubtreeStream(adaptor,"rule simple_expr");
        try {
            // Objcm.g:613:2: ( simple_expr -> ^( SIMPLE_EXPR simple_expr ) )
            // Objcm.g:613:4: simple_expr
            {
            pushFollow(FOLLOW_simple_expr_in_simple_expr_wrapper3124);
            simple_expr338=simple_expr();

            state._fsp--;

            stream_simple_expr.add(simple_expr338.getTree());

            // AST REWRITE
            // elements: simple_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 613:16: -> ^( SIMPLE_EXPR simple_expr )
            {
                // Objcm.g:613:19: ^( SIMPLE_EXPR simple_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SIMPLE_EXPR, "SIMPLE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr_wrapper"


    public static class simple_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr"
    // Objcm.g:615:1: simple_expr : expr_or_or -> ^( EXPR_OR_OR expr_or_or ) ;
    public final ObjcmParser.simple_expr_return simple_expr() throws RecognitionException {
        ObjcmParser.simple_expr_return retval = new ObjcmParser.simple_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_or_return expr_or_or339 =null;


        RewriteRuleSubtreeStream stream_expr_or_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or_or");
        try {
            // Objcm.g:616:2: ( expr_or_or -> ^( EXPR_OR_OR expr_or_or ) )
            // Objcm.g:616:4: expr_or_or
            {
            pushFollow(FOLLOW_expr_or_or_in_simple_expr3142);
            expr_or_or339=expr_or_or();

            state._fsp--;

            stream_expr_or_or.add(expr_or_or339.getTree());

            // AST REWRITE
            // elements: expr_or_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 616:15: -> ^( EXPR_OR_OR expr_or_or )
            {
                // Objcm.g:616:18: ^( EXPR_OR_OR expr_or_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR_OR, "EXPR_OR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr"


    public static class expr_or_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_or"
    // Objcm.g:618:1: expr_or_or : expr_and_and_wrapper ( L_OR_OR classical_expr_wrp )* ;
    public final ObjcmParser.expr_or_or_return expr_or_or() throws RecognitionException {
        ObjcmParser.expr_or_or_return retval = new ObjcmParser.expr_or_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR_OR341=null;
        ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper340 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp342 =null;


        Object L_OR_OR341_tree=null;

        try {
            // Objcm.g:619:2: ( expr_and_and_wrapper ( L_OR_OR classical_expr_wrp )* )
            // Objcm.g:619:4: expr_and_and_wrapper ( L_OR_OR classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_and_wrapper_in_expr_or_or3159);
            expr_and_and_wrapper340=expr_and_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_and_wrapper340.getTree());

            // Objcm.g:619:25: ( L_OR_OR classical_expr_wrp )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==L_OR_OR) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // Objcm.g:619:26: L_OR_OR classical_expr_wrp
            	    {
            	    L_OR_OR341=(Token)match(input,L_OR_OR,FOLLOW_L_OR_OR_in_expr_or_or3162); 
            	    L_OR_OR341_tree = 
            	    (Object)adaptor.create(L_OR_OR341)
            	    ;
            	    adaptor.addChild(root_0, L_OR_OR341_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_or_or3164);
            	    classical_expr_wrp342=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp342.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_or"


    public static class expr_and_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and_wrapper"
    // Objcm.g:621:1: expr_and_and_wrapper : expr_and_and -> ^( EXPR_AND_AND expr_and_and ) ;
    public final ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_and_wrapper_return retval = new ObjcmParser.expr_and_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_and_return expr_and_and343 =null;


        RewriteRuleSubtreeStream stream_expr_and_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and_and");
        try {
            // Objcm.g:622:2: ( expr_and_and -> ^( EXPR_AND_AND expr_and_and ) )
            // Objcm.g:622:4: expr_and_and
            {
            pushFollow(FOLLOW_expr_and_and_in_expr_and_and_wrapper3175);
            expr_and_and343=expr_and_and();

            state._fsp--;

            stream_expr_and_and.add(expr_and_and343.getTree());

            // AST REWRITE
            // elements: expr_and_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 622:17: -> ^( EXPR_AND_AND expr_and_and )
            {
                // Objcm.g:622:20: ^( EXPR_AND_AND expr_and_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND_AND, "EXPR_AND_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and_wrapper"


    public static class expr_and_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and"
    // Objcm.g:624:1: expr_and_and : expr_or_wrapper ( L_AND_AND classical_expr_wrp )* ;
    public final ObjcmParser.expr_and_and_return expr_and_and() throws RecognitionException {
        ObjcmParser.expr_and_and_return retval = new ObjcmParser.expr_and_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND_AND345=null;
        ObjcmParser.expr_or_wrapper_return expr_or_wrapper344 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp346 =null;


        Object L_AND_AND345_tree=null;

        try {
            // Objcm.g:625:2: ( expr_or_wrapper ( L_AND_AND classical_expr_wrp )* )
            // Objcm.g:625:4: expr_or_wrapper ( L_AND_AND classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_or_wrapper_in_expr_and_and3192);
            expr_or_wrapper344=expr_or_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_or_wrapper344.getTree());

            // Objcm.g:625:20: ( L_AND_AND classical_expr_wrp )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==L_AND_AND) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // Objcm.g:625:21: L_AND_AND classical_expr_wrp
            	    {
            	    L_AND_AND345=(Token)match(input,L_AND_AND,FOLLOW_L_AND_AND_in_expr_and_and3195); 
            	    L_AND_AND345_tree = 
            	    (Object)adaptor.create(L_AND_AND345)
            	    ;
            	    adaptor.addChild(root_0, L_AND_AND345_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_and_and3197);
            	    classical_expr_wrp346=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp346.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and"


    public static class expr_or_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_wrapper"
    // Objcm.g:627:1: expr_or_wrapper : expr_or -> ^( EXPR_OR expr_or ) ;
    public final ObjcmParser.expr_or_wrapper_return expr_or_wrapper() throws RecognitionException {
        ObjcmParser.expr_or_wrapper_return retval = new ObjcmParser.expr_or_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_return expr_or347 =null;


        RewriteRuleSubtreeStream stream_expr_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or");
        try {
            // Objcm.g:628:2: ( expr_or -> ^( EXPR_OR expr_or ) )
            // Objcm.g:628:4: expr_or
            {
            pushFollow(FOLLOW_expr_or_in_expr_or_wrapper3208);
            expr_or347=expr_or();

            state._fsp--;

            stream_expr_or.add(expr_or347.getTree());

            // AST REWRITE
            // elements: expr_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 628:12: -> ^( EXPR_OR expr_or )
            {
                // Objcm.g:628:15: ^( EXPR_OR expr_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR, "EXPR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_wrapper"


    public static class expr_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or"
    // Objcm.g:630:1: expr_or : expr_xor_wrapper ( L_OR classical_expr_wrp )* ;
    public final ObjcmParser.expr_or_return expr_or() throws RecognitionException {
        ObjcmParser.expr_or_return retval = new ObjcmParser.expr_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR349=null;
        ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper348 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp350 =null;


        Object L_OR349_tree=null;

        try {
            // Objcm.g:631:2: ( expr_xor_wrapper ( L_OR classical_expr_wrp )* )
            // Objcm.g:631:4: expr_xor_wrapper ( L_OR classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_xor_wrapper_in_expr_or3226);
            expr_xor_wrapper348=expr_xor_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_xor_wrapper348.getTree());

            // Objcm.g:631:21: ( L_OR classical_expr_wrp )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==L_OR) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // Objcm.g:631:22: L_OR classical_expr_wrp
            	    {
            	    L_OR349=(Token)match(input,L_OR,FOLLOW_L_OR_in_expr_or3229); 
            	    L_OR349_tree = 
            	    (Object)adaptor.create(L_OR349)
            	    ;
            	    adaptor.addChild(root_0, L_OR349_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_or3231);
            	    classical_expr_wrp350=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp350.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or"


    public static class expr_xor_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor_wrapper"
    // Objcm.g:633:1: expr_xor_wrapper : expr_xor -> ^( EXPR_XOR expr_xor ) ;
    public final ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper() throws RecognitionException {
        ObjcmParser.expr_xor_wrapper_return retval = new ObjcmParser.expr_xor_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_xor_return expr_xor351 =null;


        RewriteRuleSubtreeStream stream_expr_xor=new RewriteRuleSubtreeStream(adaptor,"rule expr_xor");
        try {
            // Objcm.g:634:2: ( expr_xor -> ^( EXPR_XOR expr_xor ) )
            // Objcm.g:634:4: expr_xor
            {
            pushFollow(FOLLOW_expr_xor_in_expr_xor_wrapper3242);
            expr_xor351=expr_xor();

            state._fsp--;

            stream_expr_xor.add(expr_xor351.getTree());

            // AST REWRITE
            // elements: expr_xor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 634:13: -> ^( EXPR_XOR expr_xor )
            {
                // Objcm.g:634:16: ^( EXPR_XOR expr_xor )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_XOR, "EXPR_XOR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_xor.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor_wrapper"


    public static class expr_xor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor"
    // Objcm.g:636:1: expr_xor : expr_and_wrapper ( L_XOR classical_expr_wrp )* ;
    public final ObjcmParser.expr_xor_return expr_xor() throws RecognitionException {
        ObjcmParser.expr_xor_return retval = new ObjcmParser.expr_xor_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_XOR353=null;
        ObjcmParser.expr_and_wrapper_return expr_and_wrapper352 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp354 =null;


        Object L_XOR353_tree=null;

        try {
            // Objcm.g:637:2: ( expr_and_wrapper ( L_XOR classical_expr_wrp )* )
            // Objcm.g:637:4: expr_and_wrapper ( L_XOR classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_wrapper_in_expr_xor3259);
            expr_and_wrapper352=expr_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_wrapper352.getTree());

            // Objcm.g:637:21: ( L_XOR classical_expr_wrp )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==L_XOR) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // Objcm.g:637:22: L_XOR classical_expr_wrp
            	    {
            	    L_XOR353=(Token)match(input,L_XOR,FOLLOW_L_XOR_in_expr_xor3262); 
            	    L_XOR353_tree = 
            	    (Object)adaptor.create(L_XOR353)
            	    ;
            	    adaptor.addChild(root_0, L_XOR353_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_xor3264);
            	    classical_expr_wrp354=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp354.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor"


    public static class expr_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_wrapper"
    // Objcm.g:639:1: expr_and_wrapper : expr_and -> ^( EXPR_AND expr_and ) ;
    public final ObjcmParser.expr_and_wrapper_return expr_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_wrapper_return retval = new ObjcmParser.expr_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_return expr_and355 =null;


        RewriteRuleSubtreeStream stream_expr_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and");
        try {
            // Objcm.g:640:2: ( expr_and -> ^( EXPR_AND expr_and ) )
            // Objcm.g:640:4: expr_and
            {
            pushFollow(FOLLOW_expr_and_in_expr_and_wrapper3276);
            expr_and355=expr_and();

            state._fsp--;

            stream_expr_and.add(expr_and355.getTree());

            // AST REWRITE
            // elements: expr_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 640:13: -> ^( EXPR_AND expr_and )
            {
                // Objcm.g:640:16: ^( EXPR_AND expr_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND, "EXPR_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_wrapper"


    public static class expr_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and"
    // Objcm.g:642:1: expr_and : expr_eq_wrapper ( L_AND classical_expr_wrp )* ;
    public final ObjcmParser.expr_and_return expr_and() throws RecognitionException {
        ObjcmParser.expr_and_return retval = new ObjcmParser.expr_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND357=null;
        ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper356 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp358 =null;


        Object L_AND357_tree=null;

        try {
            // Objcm.g:643:2: ( expr_eq_wrapper ( L_AND classical_expr_wrp )* )
            // Objcm.g:643:4: expr_eq_wrapper ( L_AND classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_eq_wrapper_in_expr_and3294);
            expr_eq_wrapper356=expr_eq_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_eq_wrapper356.getTree());

            // Objcm.g:643:20: ( L_AND classical_expr_wrp )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==L_AND) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // Objcm.g:643:21: L_AND classical_expr_wrp
            	    {
            	    L_AND357=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_and3297); 
            	    L_AND357_tree = 
            	    (Object)adaptor.create(L_AND357)
            	    ;
            	    adaptor.addChild(root_0, L_AND357_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_and3299);
            	    classical_expr_wrp358=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp358.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and"


    public static class expr_eq_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq_wrapper"
    // Objcm.g:645:1: expr_eq_wrapper : expr_eq -> ^( EXPR_EQ expr_eq ) ;
    public final ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper() throws RecognitionException {
        ObjcmParser.expr_eq_wrapper_return retval = new ObjcmParser.expr_eq_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_eq_return expr_eq359 =null;


        RewriteRuleSubtreeStream stream_expr_eq=new RewriteRuleSubtreeStream(adaptor,"rule expr_eq");
        try {
            // Objcm.g:646:2: ( expr_eq -> ^( EXPR_EQ expr_eq ) )
            // Objcm.g:646:4: expr_eq
            {
            pushFollow(FOLLOW_expr_eq_in_expr_eq_wrapper3311);
            expr_eq359=expr_eq();

            state._fsp--;

            stream_expr_eq.add(expr_eq359.getTree());

            // AST REWRITE
            // elements: expr_eq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 646:12: -> ^( EXPR_EQ expr_eq )
            {
                // Objcm.g:646:15: ^( EXPR_EQ expr_eq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_EQ, "EXPR_EQ")
                , root_1);

                adaptor.addChild(root_1, stream_expr_eq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq_wrapper"


    public static class expr_eq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq"
    // Objcm.g:648:1: expr_eq : expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_eq_return expr_eq() throws RecognitionException {
        ObjcmParser.expr_eq_return retval = new ObjcmParser.expr_eq_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set361=null;
        ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper360 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp362 =null;


        Object set361_tree=null;

        try {
            // Objcm.g:649:2: ( expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) classical_expr_wrp )* )
            // Objcm.g:649:4: expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_cond_wrapper_in_expr_eq3329);
            expr_cond_wrapper360=expr_cond_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_cond_wrapper360.getTree());

            // Objcm.g:649:22: ( ( L_EQ_EQ | L_NEQ ) classical_expr_wrp )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==L_EQ_EQ||LA88_0==L_NEQ) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // Objcm.g:649:23: ( L_EQ_EQ | L_NEQ ) classical_expr_wrp
            	    {
            	    set361=(Token)input.LT(1);

            	    if ( input.LA(1)==L_EQ_EQ||input.LA(1)==L_NEQ ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set361)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_eq3340);
            	    classical_expr_wrp362=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp362.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq"


    public static class expr_cond_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond_wrapper"
    // Objcm.g:651:1: expr_cond_wrapper : expr_cond -> ^( EXPR_COND expr_cond ) ;
    public final ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper() throws RecognitionException {
        ObjcmParser.expr_cond_wrapper_return retval = new ObjcmParser.expr_cond_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_cond_return expr_cond363 =null;


        RewriteRuleSubtreeStream stream_expr_cond=new RewriteRuleSubtreeStream(adaptor,"rule expr_cond");
        try {
            // Objcm.g:652:2: ( expr_cond -> ^( EXPR_COND expr_cond ) )
            // Objcm.g:652:4: expr_cond
            {
            pushFollow(FOLLOW_expr_cond_in_expr_cond_wrapper3351);
            expr_cond363=expr_cond();

            state._fsp--;

            stream_expr_cond.add(expr_cond363.getTree());

            // AST REWRITE
            // elements: expr_cond
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 652:14: -> ^( EXPR_COND expr_cond )
            {
                // Objcm.g:652:17: ^( EXPR_COND expr_cond )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_COND, "EXPR_COND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_cond.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond_wrapper"


    public static class expr_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond"
    // Objcm.g:654:1: expr_cond : expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_cond_return expr_cond() throws RecognitionException {
        ObjcmParser.expr_cond_return retval = new ObjcmParser.expr_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set365=null;
        ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper364 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp366 =null;


        Object set365_tree=null;

        try {
            // Objcm.g:655:2: ( expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp )* )
            // Objcm.g:655:4: expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mov_wrapper_in_expr_cond3368);
            expr_mov_wrapper364=expr_mov_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mov_wrapper364.getTree());

            // Objcm.g:655:21: ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( ((LA89_0 >= L_LESS && LA89_0 <= L_LESS_EQ)||(LA89_0 >= L_MORE && LA89_0 <= L_MORE_EQ)) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // Objcm.g:655:22: ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp
            	    {
            	    set365=(Token)input.LT(1);

            	    if ( (input.LA(1) >= L_LESS && input.LA(1) <= L_LESS_EQ)||(input.LA(1) >= L_MORE && input.LA(1) <= L_MORE_EQ) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set365)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_cond3387);
            	    classical_expr_wrp366=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp366.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond"


    public static class expr_mov_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov_wrapper"
    // Objcm.g:657:1: expr_mov_wrapper : expr_mov -> ^( EXPR_MOV expr_mov ) ;
    public final ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper() throws RecognitionException {
        ObjcmParser.expr_mov_wrapper_return retval = new ObjcmParser.expr_mov_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mov_return expr_mov367 =null;


        RewriteRuleSubtreeStream stream_expr_mov=new RewriteRuleSubtreeStream(adaptor,"rule expr_mov");
        try {
            // Objcm.g:658:2: ( expr_mov -> ^( EXPR_MOV expr_mov ) )
            // Objcm.g:658:4: expr_mov
            {
            pushFollow(FOLLOW_expr_mov_in_expr_mov_wrapper3398);
            expr_mov367=expr_mov();

            state._fsp--;

            stream_expr_mov.add(expr_mov367.getTree());

            // AST REWRITE
            // elements: expr_mov
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 658:13: -> ^( EXPR_MOV expr_mov )
            {
                // Objcm.g:658:16: ^( EXPR_MOV expr_mov )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MOV, "EXPR_MOV")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mov.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov_wrapper"


    public static class expr_mov_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov"
    // Objcm.g:660:1: expr_mov : expr_add_wrapper ( ( L_LEFT | L_RIGHT ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_mov_return expr_mov() throws RecognitionException {
        ObjcmParser.expr_mov_return retval = new ObjcmParser.expr_mov_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set369=null;
        ObjcmParser.expr_add_wrapper_return expr_add_wrapper368 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp370 =null;


        Object set369_tree=null;

        try {
            // Objcm.g:661:2: ( expr_add_wrapper ( ( L_LEFT | L_RIGHT ) classical_expr_wrp )* )
            // Objcm.g:661:4: expr_add_wrapper ( ( L_LEFT | L_RIGHT ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_add_wrapper_in_expr_mov3416);
            expr_add_wrapper368=expr_add_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_add_wrapper368.getTree());

            // Objcm.g:661:21: ( ( L_LEFT | L_RIGHT ) classical_expr_wrp )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==L_LEFT||LA90_0==L_RIGHT) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // Objcm.g:661:22: ( L_LEFT | L_RIGHT ) classical_expr_wrp
            	    {
            	    set369=(Token)input.LT(1);

            	    if ( input.LA(1)==L_LEFT||input.LA(1)==L_RIGHT ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set369)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_mov3427);
            	    classical_expr_wrp370=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp370.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov"


    public static class expr_add_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add_wrapper"
    // Objcm.g:663:1: expr_add_wrapper : expr_add -> ^( EXPR_ADD expr_add ) ;
    public final ObjcmParser.expr_add_wrapper_return expr_add_wrapper() throws RecognitionException {
        ObjcmParser.expr_add_wrapper_return retval = new ObjcmParser.expr_add_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_add_return expr_add371 =null;


        RewriteRuleSubtreeStream stream_expr_add=new RewriteRuleSubtreeStream(adaptor,"rule expr_add");
        try {
            // Objcm.g:664:2: ( expr_add -> ^( EXPR_ADD expr_add ) )
            // Objcm.g:664:4: expr_add
            {
            pushFollow(FOLLOW_expr_add_in_expr_add_wrapper3439);
            expr_add371=expr_add();

            state._fsp--;

            stream_expr_add.add(expr_add371.getTree());

            // AST REWRITE
            // elements: expr_add
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 664:13: -> ^( EXPR_ADD expr_add )
            {
                // Objcm.g:664:16: ^( EXPR_ADD expr_add )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ADD, "EXPR_ADD")
                , root_1);

                adaptor.addChild(root_1, stream_expr_add.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add_wrapper"


    public static class expr_add_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add"
    // Objcm.g:666:1: expr_add : expr_mult_wrapper ( ( L_PLUS | L_MINUS ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_add_return expr_add() throws RecognitionException {
        ObjcmParser.expr_add_return retval = new ObjcmParser.expr_add_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set373=null;
        ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper372 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp374 =null;


        Object set373_tree=null;

        try {
            // Objcm.g:667:2: ( expr_mult_wrapper ( ( L_PLUS | L_MINUS ) classical_expr_wrp )* )
            // Objcm.g:667:4: expr_mult_wrapper ( ( L_PLUS | L_MINUS ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mult_wrapper_in_expr_add3456);
            expr_mult_wrapper372=expr_mult_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mult_wrapper372.getTree());

            // Objcm.g:667:22: ( ( L_PLUS | L_MINUS ) classical_expr_wrp )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==L_MINUS||LA91_0==L_PLUS) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // Objcm.g:667:23: ( L_PLUS | L_MINUS ) classical_expr_wrp
            	    {
            	    set373=(Token)input.LT(1);

            	    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set373)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_add3467);
            	    classical_expr_wrp374=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp374.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add"


    public static class expr_mult_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult_wrapper"
    // Objcm.g:669:1: expr_mult_wrapper : expr_mult -> ^( EXPR_MULT expr_mult ) ;
    public final ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper() throws RecognitionException {
        ObjcmParser.expr_mult_wrapper_return retval = new ObjcmParser.expr_mult_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mult_return expr_mult375 =null;


        RewriteRuleSubtreeStream stream_expr_mult=new RewriteRuleSubtreeStream(adaptor,"rule expr_mult");
        try {
            // Objcm.g:670:2: ( expr_mult -> ^( EXPR_MULT expr_mult ) )
            // Objcm.g:670:4: expr_mult
            {
            pushFollow(FOLLOW_expr_mult_in_expr_mult_wrapper3478);
            expr_mult375=expr_mult();

            state._fsp--;

            stream_expr_mult.add(expr_mult375.getTree());

            // AST REWRITE
            // elements: expr_mult
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 670:14: -> ^( EXPR_MULT expr_mult )
            {
                // Objcm.g:670:17: ^( EXPR_MULT expr_mult )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MULT, "EXPR_MULT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mult.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult_wrapper"


    public static class expr_mult_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult"
    // Objcm.g:672:1: expr_mult : expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_mult_return expr_mult() throws RecognitionException {
        ObjcmParser.expr_mult_return retval = new ObjcmParser.expr_mult_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set377=null;
        ObjcmParser.expr_type_wrapper_return expr_type_wrapper376 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp378 =null;


        Object set377_tree=null;

        try {
            // Objcm.g:673:2: ( expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp )* )
            // Objcm.g:673:4: expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_type_wrapper_in_expr_mult3495);
            expr_type_wrapper376=expr_type_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_type_wrapper376.getTree());

            // Objcm.g:673:22: ( ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==ASTERISK||LA92_0==L_DIV||LA92_0==L_PERC) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // Objcm.g:673:23: ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp
            	    {
            	    set377=(Token)input.LT(1);

            	    if ( input.LA(1)==ASTERISK||input.LA(1)==L_DIV||input.LA(1)==L_PERC ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set377)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_mult3510);
            	    classical_expr_wrp378=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp378.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult"


    public static class expr_type_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_type_wrapper"
    // Objcm.g:675:1: expr_type_wrapper : expr_type -> ^( EXPR_TYPE expr_type ) ;
    public final ObjcmParser.expr_type_wrapper_return expr_type_wrapper() throws RecognitionException {
        ObjcmParser.expr_type_wrapper_return retval = new ObjcmParser.expr_type_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_type_return expr_type379 =null;


        RewriteRuleSubtreeStream stream_expr_type=new RewriteRuleSubtreeStream(adaptor,"rule expr_type");
        try {
            // Objcm.g:676:2: ( expr_type -> ^( EXPR_TYPE expr_type ) )
            // Objcm.g:676:4: expr_type
            {
            pushFollow(FOLLOW_expr_type_in_expr_type_wrapper3522);
            expr_type379=expr_type();

            state._fsp--;

            stream_expr_type.add(expr_type379.getTree());

            // AST REWRITE
            // elements: expr_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 676:14: -> ^( EXPR_TYPE expr_type )
            {
                // Objcm.g:676:17: ^( EXPR_TYPE expr_type )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_TYPE, "EXPR_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_expr_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_type_wrapper"


    public static class expr_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_type"
    // Objcm.g:678:1: expr_type : ( type_convertion )? expr_unname ;
    public final ObjcmParser.expr_type_return expr_type() throws RecognitionException {
        ObjcmParser.expr_type_return retval = new ObjcmParser.expr_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_convertion_return type_convertion380 =null;

        ObjcmParser.expr_unname_return expr_unname381 =null;



        try {
            // Objcm.g:679:2: ( ( type_convertion )? expr_unname )
            // Objcm.g:679:4: ( type_convertion )? expr_unname
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:679:4: ( type_convertion )?
            int alt93=2;
            alt93 = dfa93.predict(input);
            switch (alt93) {
                case 1 :
                    // Objcm.g:679:4: type_convertion
                    {
                    pushFollow(FOLLOW_type_convertion_in_expr_type3539);
                    type_convertion380=type_convertion();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion380.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_expr_unname_in_expr_type3542);
            expr_unname381=expr_unname();

            state._fsp--;

            adaptor.addChild(root_0, expr_unname381.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_type"


    public static class expr_unname_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_unname"
    // Objcm.g:681:1: expr_unname : ( ASTERISK ( type_convertion )? )? expr_addr ;
    public final ObjcmParser.expr_unname_return expr_unname() throws RecognitionException {
        ObjcmParser.expr_unname_return retval = new ObjcmParser.expr_unname_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK382=null;
        ObjcmParser.type_convertion_return type_convertion383 =null;

        ObjcmParser.expr_addr_return expr_addr384 =null;


        Object ASTERISK382_tree=null;

        try {
            // Objcm.g:682:2: ( ( ASTERISK ( type_convertion )? )? expr_addr )
            // Objcm.g:682:4: ( ASTERISK ( type_convertion )? )? expr_addr
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:682:4: ( ASTERISK ( type_convertion )? )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==ASTERISK) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // Objcm.g:682:5: ASTERISK ( type_convertion )?
                    {
                    ASTERISK382=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_expr_unname3553); 
                    ASTERISK382_tree = 
                    (Object)adaptor.create(ASTERISK382)
                    ;
                    adaptor.addChild(root_0, ASTERISK382_tree);


                    // Objcm.g:682:14: ( type_convertion )?
                    int alt94=2;
                    alt94 = dfa94.predict(input);
                    switch (alt94) {
                        case 1 :
                            // Objcm.g:682:14: type_convertion
                            {
                            pushFollow(FOLLOW_type_convertion_in_expr_unname3555);
                            type_convertion383=type_convertion();

                            state._fsp--;

                            adaptor.addChild(root_0, type_convertion383.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_addr_in_expr_unname3560);
            expr_addr384=expr_addr();

            state._fsp--;

            adaptor.addChild(root_0, expr_addr384.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_unname"


    public static class expr_addr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_addr"
    // Objcm.g:684:1: expr_addr : ( L_AND )? expr_sign ;
    public final ObjcmParser.expr_addr_return expr_addr() throws RecognitionException {
        ObjcmParser.expr_addr_return retval = new ObjcmParser.expr_addr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND385=null;
        ObjcmParser.expr_sign_return expr_sign386 =null;


        Object L_AND385_tree=null;

        try {
            // Objcm.g:685:2: ( ( L_AND )? expr_sign )
            // Objcm.g:685:4: ( L_AND )? expr_sign
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:685:4: ( L_AND )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==L_AND) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // Objcm.g:685:4: L_AND
                    {
                    L_AND385=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_addr3570); 
                    L_AND385_tree = 
                    (Object)adaptor.create(L_AND385)
                    ;
                    adaptor.addChild(root_0, L_AND385_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_sign_in_expr_addr3573);
            expr_sign386=expr_sign();

            state._fsp--;

            adaptor.addChild(root_0, expr_sign386.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_addr"


    public static class expr_sign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_sign"
    // Objcm.g:687:1: expr_sign : ( L_MINUS | L_PLUS )? expr_not_wrapper ;
    public final ObjcmParser.expr_sign_return expr_sign() throws RecognitionException {
        ObjcmParser.expr_sign_return retval = new ObjcmParser.expr_sign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set387=null;
        ObjcmParser.expr_not_wrapper_return expr_not_wrapper388 =null;


        Object set387_tree=null;

        try {
            // Objcm.g:688:2: ( ( L_MINUS | L_PLUS )? expr_not_wrapper )
            // Objcm.g:688:4: ( L_MINUS | L_PLUS )? expr_not_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:688:4: ( L_MINUS | L_PLUS )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==L_MINUS||LA97_0==L_PLUS) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // Objcm.g:
                    {
                    set387=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set387)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not_wrapper_in_expr_sign3592);
            expr_not_wrapper388=expr_not_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_not_wrapper388.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_sign"


    public static class expr_not_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not_wrapper"
    // Objcm.g:690:1: expr_not_wrapper : expr_not -> ^( EXPR_NOT expr_not ) ;
    public final ObjcmParser.expr_not_wrapper_return expr_not_wrapper() throws RecognitionException {
        ObjcmParser.expr_not_wrapper_return retval = new ObjcmParser.expr_not_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_not_return expr_not389 =null;


        RewriteRuleSubtreeStream stream_expr_not=new RewriteRuleSubtreeStream(adaptor,"rule expr_not");
        try {
            // Objcm.g:691:2: ( expr_not -> ^( EXPR_NOT expr_not ) )
            // Objcm.g:691:4: expr_not
            {
            pushFollow(FOLLOW_expr_not_in_expr_not_wrapper3602);
            expr_not389=expr_not();

            state._fsp--;

            stream_expr_not.add(expr_not389.getTree());

            // AST REWRITE
            // elements: expr_not
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 691:13: -> ^( EXPR_NOT expr_not )
            {
                // Objcm.g:691:16: ^( EXPR_NOT expr_not )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_not.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not_wrapper"


    public static class expr_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not"
    // Objcm.g:693:1: expr_not : ( L_NOT )? expr_not2 ;
    public final ObjcmParser.expr_not_return expr_not() throws RecognitionException {
        ObjcmParser.expr_not_return retval = new ObjcmParser.expr_not_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_NOT390=null;
        ObjcmParser.expr_not2_return expr_not2391 =null;


        Object L_NOT390_tree=null;

        try {
            // Objcm.g:694:2: ( ( L_NOT )? expr_not2 )
            // Objcm.g:694:4: ( L_NOT )? expr_not2
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:694:4: ( L_NOT )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==L_NOT) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // Objcm.g:694:4: L_NOT
                    {
                    L_NOT390=(Token)match(input,L_NOT,FOLLOW_L_NOT_in_expr_not3621); 
                    L_NOT390_tree = 
                    (Object)adaptor.create(L_NOT390)
                    ;
                    adaptor.addChild(root_0, L_NOT390_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not2_in_expr_not3624);
            expr_not2391=expr_not2();

            state._fsp--;

            adaptor.addChild(root_0, expr_not2391.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not"


    public static class expr_not2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not2"
    // Objcm.g:696:1: expr_not2 : ( L_TILDA )? expr_size_of ;
    public final ObjcmParser.expr_not2_return expr_not2() throws RecognitionException {
        ObjcmParser.expr_not2_return retval = new ObjcmParser.expr_not2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_TILDA392=null;
        ObjcmParser.expr_size_of_return expr_size_of393 =null;


        Object L_TILDA392_tree=null;

        try {
            // Objcm.g:697:2: ( ( L_TILDA )? expr_size_of )
            // Objcm.g:697:4: ( L_TILDA )? expr_size_of
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:697:4: ( L_TILDA )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==L_TILDA) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // Objcm.g:697:4: L_TILDA
                    {
                    L_TILDA392=(Token)match(input,L_TILDA,FOLLOW_L_TILDA_in_expr_not23633); 
                    L_TILDA392_tree = 
                    (Object)adaptor.create(L_TILDA392)
                    ;
                    adaptor.addChild(root_0, L_TILDA392_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_size_of_in_expr_not23636);
            expr_size_of393=expr_size_of();

            state._fsp--;

            adaptor.addChild(root_0, expr_size_of393.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not2"


    public static class expr_size_of_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_size_of"
    // Objcm.g:699:1: expr_size_of : ( SIZEOF )? expr_xcrement ;
    public final ObjcmParser.expr_size_of_return expr_size_of() throws RecognitionException {
        ObjcmParser.expr_size_of_return retval = new ObjcmParser.expr_size_of_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SIZEOF394=null;
        ObjcmParser.expr_xcrement_return expr_xcrement395 =null;


        Object SIZEOF394_tree=null;

        try {
            // Objcm.g:700:2: ( ( SIZEOF )? expr_xcrement )
            // Objcm.g:700:4: ( SIZEOF )? expr_xcrement
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:700:4: ( SIZEOF )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==SIZEOF) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // Objcm.g:700:4: SIZEOF
                    {
                    SIZEOF394=(Token)match(input,SIZEOF,FOLLOW_SIZEOF_in_expr_size_of3646); 
                    SIZEOF394_tree = 
                    (Object)adaptor.create(SIZEOF394)
                    ;
                    adaptor.addChild(root_0, SIZEOF394_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_xcrement_in_expr_size_of3649);
            expr_xcrement395=expr_xcrement();

            state._fsp--;

            adaptor.addChild(root_0, expr_xcrement395.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_size_of"


    public static class expr_xcrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xcrement"
    // Objcm.g:702:1: expr_xcrement : ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 ;
    public final ObjcmParser.expr_xcrement_return expr_xcrement() throws RecognitionException {
        ObjcmParser.expr_xcrement_return retval = new ObjcmParser.expr_xcrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set396=null;
        ObjcmParser.object_wrapped1_return object_wrapped1397 =null;


        Object set396_tree=null;

        try {
            // Objcm.g:703:2: ( ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 )
            // Objcm.g:703:4: ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:703:4: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==L_MINUS_MINUS||LA101_0==L_PLUS_PLUS) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // Objcm.g:
                    {
                    set396=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set396)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_object_wrapped1_in_expr_xcrement3668);
            object_wrapped1397=object_wrapped1();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped1397.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xcrement"


    public static class object_wrapped1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped1"
    // Objcm.g:705:1: object_wrapped1 : object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? ;
    public final ObjcmParser.object_wrapped1_return object_wrapped1() throws RecognitionException {
        ObjcmParser.object_wrapped1_return retval = new ObjcmParser.object_wrapped1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set399=null;
        ObjcmParser.object_wrapped2_return object_wrapped2398 =null;


        Object set399_tree=null;

        try {
            // Objcm.g:706:2: ( object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? )
            // Objcm.g:706:4: object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapped2_in_object_wrapped13678);
            object_wrapped2398=object_wrapped2();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped2398.getTree());

            // Objcm.g:706:20: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==L_MINUS_MINUS||LA102_0==L_PLUS_PLUS) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // Objcm.g:
                    {
                    set399=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set399)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped1"


    public static class object_wrapped2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped2"
    // Objcm.g:709:1: object_wrapped2 : ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR classical_expr_wrp R_BR ( id_part_end )? | const_expr | a_started );
    public final ObjcmParser.object_wrapped2_return object_wrapped2() throws RecognitionException {
        ObjcmParser.object_wrapped2_return retval = new ObjcmParser.object_wrapped2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal400=null;
        Token L_BR405=null;
        Token R_BR407=null;
        ObjcmParser.object_name_return object_name401 =null;

        ObjcmParser.generic_return generic402 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper403 =null;

        ObjcmParser.id_part_end_return id_part_end404 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp406 =null;

        ObjcmParser.id_part_end_return id_part_end408 =null;

        ObjcmParser.const_expr_return const_expr409 =null;

        ObjcmParser.a_started_return a_started410 =null;


        Object string_literal400_tree=null;
        Object L_BR405_tree=null;
        Object R_BR407_tree=null;

        try {
            // Objcm.g:710:2: ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR classical_expr_wrp R_BR ( id_part_end )? | const_expr | a_started )
            int alt107=5;
            switch ( input.LA(1) ) {
            case ID:
            case 183:
            case 190:
                {
                alt107=1;
                }
                break;
            case L_KBR:
                {
                alt107=2;
                }
                break;
            case L_BR:
                {
                alt107=3;
                }
                break;
            case NUMBER:
            case STRING_LITERAL:
            case STRING_LITERAL2:
            case STRING_LITERAL3:
            case 172:
            case 185:
                {
                alt107=4;
                }
                break;
            case 160:
            case 166:
            case 168:
                {
                alt107=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }

            switch (alt107) {
                case 1 :
                    // Objcm.g:710:5: ( 'unsigned' )? object_name ( generic )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:710:5: ( 'unsigned' )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==190) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // Objcm.g:710:5: 'unsigned'
                            {
                            string_literal400=(Token)match(input,190,FOLLOW_190_in_object_wrapped23699); 
                            string_literal400_tree = 
                            (Object)adaptor.create(string_literal400)
                            ;
                            adaptor.addChild(root_0, string_literal400_tree);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_object_name_in_object_wrapped23702);
                    object_name401=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name401.getTree());

                    // Objcm.g:710:29: ( generic )?
                    int alt104=2;
                    alt104 = dfa104.predict(input);
                    switch (alt104) {
                        case 1 :
                            // Objcm.g:710:29: generic
                            {
                            pushFollow(FOLLOW_generic_in_object_wrapped23704);
                            generic402=generic();

                            state._fsp--;

                            adaptor.addChild(root_0, generic402.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:711:4: method_call_wrapper ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapped23710);
                    method_call_wrapper403=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper403.getTree());

                    // Objcm.g:711:24: ( id_part_end )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==DOT||LA105_0==157) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // Objcm.g:711:24: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23712);
                            id_part_end404=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end404.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // Objcm.g:712:4: L_BR classical_expr_wrp R_BR ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR405=(Token)match(input,L_BR,FOLLOW_L_BR_in_object_wrapped23718); 
                    L_BR405_tree = 
                    (Object)adaptor.create(L_BR405)
                    ;
                    adaptor.addChild(root_0, L_BR405_tree);


                    pushFollow(FOLLOW_classical_expr_wrp_in_object_wrapped23720);
                    classical_expr_wrp406=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp406.getTree());

                    R_BR407=(Token)match(input,R_BR,FOLLOW_R_BR_in_object_wrapped23722); 
                    R_BR407_tree = 
                    (Object)adaptor.create(R_BR407)
                    ;
                    adaptor.addChild(root_0, R_BR407_tree);


                    // Objcm.g:712:33: ( id_part_end )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==DOT||LA106_0==157) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // Objcm.g:712:33: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23724);
                            id_part_end408=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end408.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // Objcm.g:713:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_object_wrapped23730);
                    const_expr409=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr409.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:714:4: a_started
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_started_in_object_wrapped23735);
                    a_started410=a_started();

                    state._fsp--;

                    adaptor.addChild(root_0, a_started410.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped2"


    public static class function_brackets_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets_wrapper"
    // Objcm.g:717:1: function_brackets_wrapper : function_brackets -> ^( FUNCTION function_brackets ) ;
    public final ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper() throws RecognitionException {
        ObjcmParser.function_brackets_wrapper_return retval = new ObjcmParser.function_brackets_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.function_brackets_return function_brackets411 =null;


        RewriteRuleSubtreeStream stream_function_brackets=new RewriteRuleSubtreeStream(adaptor,"rule function_brackets");
        try {
            // Objcm.g:718:2: ( function_brackets -> ^( FUNCTION function_brackets ) )
            // Objcm.g:718:4: function_brackets
            {
            pushFollow(FOLLOW_function_brackets_in_function_brackets_wrapper3747);
            function_brackets411=function_brackets();

            state._fsp--;

            stream_function_brackets.add(function_brackets411.getTree());

            // AST REWRITE
            // elements: function_brackets
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 718:22: -> ^( FUNCTION function_brackets )
            {
                // Objcm.g:718:25: ^( FUNCTION function_brackets )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNCTION, "FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_function_brackets.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets_wrapper"


    public static class function_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets"
    // Objcm.g:720:1: function_brackets : L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.function_brackets_return function_brackets() throws RecognitionException {
        ObjcmParser.function_brackets_return retval = new ObjcmParser.function_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR412=null;
        Token COMMA414=null;
        Token R_BR416=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp413 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp415 =null;


        Object L_BR412_tree=null;
        Object COMMA414_tree=null;
        Object R_BR416_tree=null;

        try {
            // Objcm.g:721:2: ( L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR )
            // Objcm.g:721:4: L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR412=(Token)match(input,L_BR,FOLLOW_L_BR_in_function_brackets3766); 
            L_BR412_tree = 
            (Object)adaptor.create(L_BR412)
            ;
            adaptor.addChild(root_0, L_BR412_tree);


            // Objcm.g:721:9: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==ASTERISK||LA109_0==ID||LA109_0==L_AND||LA109_0==L_BR||LA109_0==L_KBR||LA109_0==L_MINUS||LA109_0==L_MINUS_MINUS||LA109_0==L_NOT||LA109_0==L_PLUS||LA109_0==L_PLUS_PLUS||LA109_0==L_TILDA||LA109_0==NUMBER||LA109_0==SIZEOF||(LA109_0 >= STRING_LITERAL && LA109_0 <= STRING_LITERAL3)||LA109_0==160||LA109_0==166||LA109_0==168||LA109_0==172||LA109_0==183||LA109_0==185||LA109_0==190) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // Objcm.g:721:10: classical_expr_wrp ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets3769);
                    classical_expr_wrp413=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp413.getTree());

                    // Objcm.g:721:29: ( COMMA classical_expr_wrp )*
                    loop108:
                    do {
                        int alt108=2;
                        int LA108_0 = input.LA(1);

                        if ( (LA108_0==COMMA) ) {
                            alt108=1;
                        }


                        switch (alt108) {
                    	case 1 :
                    	    // Objcm.g:721:30: COMMA classical_expr_wrp
                    	    {
                    	    COMMA414=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_brackets3772); 
                    	    COMMA414_tree = 
                    	    (Object)adaptor.create(COMMA414)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA414_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets3774);
                    	    classical_expr_wrp415=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp415.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop108;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR416=(Token)match(input,R_BR,FOLLOW_R_BR_in_function_brackets3780); 
            R_BR416_tree = 
            (Object)adaptor.create(R_BR416)
            ;
            adaptor.addChild(root_0, R_BR416_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets"


    public static class index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index"
    // Objcm.g:723:1: index : L_KBR ( classical_expr_wrp )? R_KBR ;
    public final ObjcmParser.index_return index() throws RecognitionException {
        ObjcmParser.index_return retval = new ObjcmParser.index_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR417=null;
        Token R_KBR419=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp418 =null;


        Object L_KBR417_tree=null;
        Object R_KBR419_tree=null;

        try {
            // Objcm.g:723:7: ( L_KBR ( classical_expr_wrp )? R_KBR )
            // Objcm.g:723:9: L_KBR ( classical_expr_wrp )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR417=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index3790); 
            L_KBR417_tree = 
            (Object)adaptor.create(L_KBR417)
            ;
            adaptor.addChild(root_0, L_KBR417_tree);


            // Objcm.g:723:15: ( classical_expr_wrp )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==ASTERISK||LA110_0==ID||LA110_0==L_AND||LA110_0==L_BR||LA110_0==L_KBR||LA110_0==L_MINUS||LA110_0==L_MINUS_MINUS||LA110_0==L_NOT||LA110_0==L_PLUS||LA110_0==L_PLUS_PLUS||LA110_0==L_TILDA||LA110_0==NUMBER||LA110_0==SIZEOF||(LA110_0 >= STRING_LITERAL && LA110_0 <= STRING_LITERAL3)||LA110_0==160||LA110_0==166||LA110_0==168||LA110_0==172||LA110_0==183||LA110_0==185||LA110_0==190) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // Objcm.g:723:15: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_index3792);
                    classical_expr_wrp418=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp418.getTree());

                    }
                    break;

            }


            R_KBR419=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index3795); 
            R_KBR419_tree = 
            (Object)adaptor.create(R_KBR419)
            ;
            adaptor.addChild(root_0, R_KBR419_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index"


    public static class struct_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init"
    // Objcm.g:725:1: struct_init : L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init_return struct_init() throws RecognitionException {
        ObjcmParser.struct_init_return retval = new ObjcmParser.struct_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR420=null;
        Token STRUCT_PREFIX421=null;
        Token ID422=null;
        Token R_BR423=null;
        Token L_FBR424=null;
        Token COMMA426=null;
        Token R_FBR428=null;
        ObjcmParser.struct_init_line_return struct_init_line425 =null;

        ObjcmParser.struct_init_line_return struct_init_line427 =null;


        Object L_BR420_tree=null;
        Object STRUCT_PREFIX421_tree=null;
        Object ID422_tree=null;
        Object R_BR423_tree=null;
        Object L_FBR424_tree=null;
        Object COMMA426_tree=null;
        Object R_FBR428_tree=null;

        try {
            // Objcm.g:726:2: ( L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // Objcm.g:726:4: L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_BR420=(Token)match(input,L_BR,FOLLOW_L_BR_in_struct_init3805); 
            L_BR420_tree = 
            (Object)adaptor.create(L_BR420)
            ;
            adaptor.addChild(root_0, L_BR420_tree);


            // Objcm.g:726:10: ( STRUCT_PREFIX )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==STRUCT_PREFIX) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // Objcm.g:726:10: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX421=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_init3808); 
                    STRUCT_PREFIX421_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX421)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX421_tree);


                    }
                    break;

            }


            ID422=(Token)match(input,ID,FOLLOW_ID_in_struct_init3811); 
            ID422_tree = 
            (Object)adaptor.create(ID422)
            ;
            adaptor.addChild(root_0, ID422_tree);


            R_BR423=(Token)match(input,R_BR,FOLLOW_R_BR_in_struct_init3814); 
            R_BR423_tree = 
            (Object)adaptor.create(R_BR423)
            ;
            adaptor.addChild(root_0, R_BR423_tree);


            L_FBR424=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init3817); 
            L_FBR424_tree = 
            (Object)adaptor.create(L_FBR424)
            ;
            adaptor.addChild(root_0, L_FBR424_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init3823);
            struct_init_line425=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line425.getTree());

            // Objcm.g:727:21: ( COMMA struct_init_line )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==COMMA) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // Objcm.g:727:22: COMMA struct_init_line
            	    {
            	    COMMA426=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init3826); 
            	    COMMA426_tree = 
            	    (Object)adaptor.create(COMMA426)
            	    ;
            	    adaptor.addChild(root_0, COMMA426_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init3829);
            	    struct_init_line427=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line427.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            R_FBR428=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init3835); 
            R_FBR428_tree = 
            (Object)adaptor.create(R_FBR428)
            ;
            adaptor.addChild(root_0, R_FBR428_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init"


    public static class struct_init2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init2"
    // Objcm.g:731:1: struct_init2 : L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init2_return struct_init2() throws RecognitionException {
        ObjcmParser.struct_init2_return retval = new ObjcmParser.struct_init2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR429=null;
        Token COMMA431=null;
        Token R_FBR433=null;
        ObjcmParser.struct_init_line_return struct_init_line430 =null;

        ObjcmParser.struct_init_line_return struct_init_line432 =null;


        Object L_FBR429_tree=null;
        Object COMMA431_tree=null;
        Object R_FBR433_tree=null;

        try {
            // Objcm.g:732:2: ( L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // Objcm.g:732:4: L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR429=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init23849); 
            L_FBR429_tree = 
            (Object)adaptor.create(L_FBR429)
            ;
            adaptor.addChild(root_0, L_FBR429_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init23855);
            struct_init_line430=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line430.getTree());

            // Objcm.g:733:21: ( COMMA struct_init_line )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==COMMA) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // Objcm.g:733:22: COMMA struct_init_line
            	    {
            	    COMMA431=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init23858); 
            	    COMMA431_tree = 
            	    (Object)adaptor.create(COMMA431)
            	    ;
            	    adaptor.addChild(root_0, COMMA431_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init23861);
            	    struct_init_line432=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line432.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            R_FBR433=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init23867); 
            R_FBR433_tree = 
            (Object)adaptor.create(R_FBR433)
            ;
            adaptor.addChild(root_0, R_FBR433_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init2"


    public static class struct_init_line_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_line"
    // Objcm.g:737:1: struct_init_line : ( struct_init_var | struct_init_expression );
    public final ObjcmParser.struct_init_line_return struct_init_line() throws RecognitionException {
        ObjcmParser.struct_init_line_return retval = new ObjcmParser.struct_init_line_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_init_var_return struct_init_var434 =null;

        ObjcmParser.struct_init_expression_return struct_init_expression435 =null;



        try {
            // Objcm.g:738:2: ( struct_init_var | struct_init_expression )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==DOT) ) {
                alt114=1;
            }
            else if ( (LA114_0==ASTERISK||LA114_0==ID||LA114_0==L_AND||LA114_0==L_BR||LA114_0==L_KBR||LA114_0==L_MINUS||LA114_0==L_MINUS_MINUS||LA114_0==L_NOT||LA114_0==L_PLUS||LA114_0==L_PLUS_PLUS||LA114_0==L_TILDA||LA114_0==NUMBER||LA114_0==SIZEOF||(LA114_0 >= STRING_LITERAL && LA114_0 <= STRING_LITERAL3)||LA114_0==160||LA114_0==166||LA114_0==168||LA114_0==172||LA114_0==183||LA114_0==185||LA114_0==190) ) {
                alt114=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }
            switch (alt114) {
                case 1 :
                    // Objcm.g:738:4: struct_init_var
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_var_in_struct_init_line3880);
                    struct_init_var434=struct_init_var();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_var434.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:739:4: struct_init_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_expression_in_struct_init_line3885);
                    struct_init_expression435=struct_init_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_expression435.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_line"


    public static class struct_init_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_expression"
    // Objcm.g:742:1: struct_init_expression : classical_expr_wrp ;
    public final ObjcmParser.struct_init_expression_return struct_init_expression() throws RecognitionException {
        ObjcmParser.struct_init_expression_return retval = new ObjcmParser.struct_init_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp436 =null;



        try {
            // Objcm.g:743:2: ( classical_expr_wrp )
            // Objcm.g:743:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_expression3898);
            classical_expr_wrp436=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp436.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_expression"


    public static class struct_init_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_method"
    // Objcm.g:745:1: struct_init_method : classical_expr_wrp ;
    public final ObjcmParser.struct_init_method_return struct_init_method() throws RecognitionException {
        ObjcmParser.struct_init_method_return retval = new ObjcmParser.struct_init_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp437 =null;



        try {
            // Objcm.g:746:2: ( classical_expr_wrp )
            // Objcm.g:746:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_method3909);
            classical_expr_wrp437=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp437.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_method"


    public static class struct_init_var_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_var"
    // Objcm.g:748:1: struct_init_var : ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) ;
    public final ObjcmParser.struct_init_var_return struct_init_var() throws RecognitionException {
        ObjcmParser.struct_init_var_return retval = new ObjcmParser.struct_init_var_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT438=null;
        Token L_EQ440=null;
        ObjcmParser.id_part_return id_part439 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets441 =null;

        ObjcmParser.expression_return expression442 =null;


        Object DOT438_tree=null;
        Object L_EQ440_tree=null;

        try {
            // Objcm.g:749:2: ( ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) )
            // Objcm.g:749:4: ( DOT id_part )+ L_EQ ( in_q_brackets | expression )
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:749:4: ( DOT id_part )+
            int cnt115=0;
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==DOT) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // Objcm.g:749:5: DOT id_part
            	    {
            	    DOT438=(Token)match(input,DOT,FOLLOW_DOT_in_struct_init_var3921); 
            	    DOT438_tree = 
            	    (Object)adaptor.create(DOT438)
            	    ;
            	    adaptor.addChild(root_0, DOT438_tree);


            	    pushFollow(FOLLOW_id_part_in_struct_init_var3923);
            	    id_part439=id_part();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part439.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt115 >= 1 ) break loop115;
                        EarlyExitException eee =
                            new EarlyExitException(115, input);
                        throw eee;
                }
                cnt115++;
            } while (true);


            L_EQ440=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_struct_init_var3928); 
            L_EQ440_tree = 
            (Object)adaptor.create(L_EQ440)
            ;
            adaptor.addChild(root_0, L_EQ440_tree);


            // Objcm.g:749:26: ( in_q_brackets | expression )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==L_FBR) ) {
                alt116=1;
            }
            else if ( (LA116_0==ASTERISK||LA116_0==ID||LA116_0==L_AND||LA116_0==L_BR||LA116_0==L_KBR||LA116_0==L_MINUS||LA116_0==L_MINUS_MINUS||LA116_0==L_NOT||LA116_0==L_PLUS||LA116_0==L_PLUS_PLUS||LA116_0==L_TILDA||LA116_0==NUMBER||LA116_0==SIZEOF||(LA116_0 >= STRING_LITERAL && LA116_0 <= STRING_LITERAL3)||LA116_0==160||LA116_0==166||LA116_0==168||LA116_0==172||LA116_0==183||LA116_0==185||LA116_0==190) ) {
                alt116=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }
            switch (alt116) {
                case 1 :
                    // Objcm.g:749:27: in_q_brackets
                    {
                    pushFollow(FOLLOW_in_q_brackets_in_struct_init_var3932);
                    in_q_brackets441=in_q_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, in_q_brackets441.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:749:43: expression
                    {
                    pushFollow(FOLLOW_expression_in_struct_init_var3936);
                    expression442=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression442.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_var"


    public static class a_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_started"
    // Objcm.g:751:1: a_started : ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper );
    public final ObjcmParser.a_started_return a_started() throws RecognitionException {
        ObjcmParser.a_started_return retval = new ObjcmParser.a_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_wrapper_return a_selector_wrapper443 =null;

        ObjcmParser.a_encode_wrapper_return a_encode_wrapper444 =null;

        ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper445 =null;



        try {
            // Objcm.g:752:2: ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper )
            int alt117=3;
            switch ( input.LA(1) ) {
            case 168:
                {
                alt117=1;
                }
                break;
            case 160:
                {
                alt117=2;
                }
                break;
            case 166:
                {
                alt117=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }

            switch (alt117) {
                case 1 :
                    // Objcm.g:752:4: a_selector_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_selector_wrapper_in_a_started3948);
                    a_selector_wrapper443=a_selector_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_selector_wrapper443.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:753:4: a_encode_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_encode_wrapper_in_a_started3953);
                    a_encode_wrapper444=a_encode_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_encode_wrapper444.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:754:4: a_protocol_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_protocol_wrapper_in_a_started3958);
                    a_protocol_wrapper445=a_protocol_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_protocol_wrapper445.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_started"


    public static class typeof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof"
    // Objcm.g:757:1: typeof : '__typeof__' L_BR ID R_BR ;
    public final ObjcmParser.typeof_return typeof() throws RecognitionException {
        ObjcmParser.typeof_return retval = new ObjcmParser.typeof_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal446=null;
        Token L_BR447=null;
        Token ID448=null;
        Token R_BR449=null;

        Object string_literal446_tree=null;
        Object L_BR447_tree=null;
        Object ID448_tree=null;
        Object R_BR449_tree=null;

        try {
            // Objcm.g:757:8: ( '__typeof__' L_BR ID R_BR )
            // Objcm.g:757:10: '__typeof__' L_BR ID R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal446=(Token)match(input,174,FOLLOW_174_in_typeof3968); 
            string_literal446_tree = 
            (Object)adaptor.create(string_literal446)
            ;
            adaptor.addChild(root_0, string_literal446_tree);


            L_BR447=(Token)match(input,L_BR,FOLLOW_L_BR_in_typeof3971); 
            L_BR447_tree = 
            (Object)adaptor.create(L_BR447)
            ;
            adaptor.addChild(root_0, L_BR447_tree);


            ID448=(Token)match(input,ID,FOLLOW_ID_in_typeof3974); 
            ID448_tree = 
            (Object)adaptor.create(ID448)
            ;
            adaptor.addChild(root_0, ID448_tree);


            R_BR449=(Token)match(input,R_BR,FOLLOW_R_BR_in_typeof3977); 
            R_BR449_tree = 
            (Object)adaptor.create(R_BR449)
            ;
            adaptor.addChild(root_0, R_BR449_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof"


    public static class a_selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_wrapper"
    // Objcm.g:759:1: a_selector_wrapper : a_selector -> ^( SELECTOR a_selector ) ;
    public final ObjcmParser.a_selector_wrapper_return a_selector_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_wrapper_return retval = new ObjcmParser.a_selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_return a_selector450 =null;


        RewriteRuleSubtreeStream stream_a_selector=new RewriteRuleSubtreeStream(adaptor,"rule a_selector");
        try {
            // Objcm.g:760:2: ( a_selector -> ^( SELECTOR a_selector ) )
            // Objcm.g:760:4: a_selector
            {
            pushFollow(FOLLOW_a_selector_in_a_selector_wrapper3988);
            a_selector450=a_selector();

            state._fsp--;

            stream_a_selector.add(a_selector450.getTree());

            // AST REWRITE
            // elements: a_selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 760:15: -> ^( SELECTOR a_selector )
            {
                // Objcm.g:760:18: ^( SELECTOR a_selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR, "SELECTOR")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_wrapper"


    public static class a_selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector"
    // Objcm.g:762:1: a_selector : '@selector' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_selector_return a_selector() throws RecognitionException {
        ObjcmParser.a_selector_return retval = new ObjcmParser.a_selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal451=null;
        Token L_BR452=null;
        Token R_BR454=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper453 =null;


        Object string_literal451_tree=null;
        Object L_BR452_tree=null;
        Object R_BR454_tree=null;

        try {
            // Objcm.g:762:11: ( '@selector' L_BR a_selector_value_wrapper R_BR )
            // Objcm.g:762:13: '@selector' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal451=(Token)match(input,168,FOLLOW_168_in_a_selector4005); 
            string_literal451_tree = 
            (Object)adaptor.create(string_literal451)
            ;
            adaptor.addChild(root_0, string_literal451_tree);


            L_BR452=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_selector4007); 
            L_BR452_tree = 
            (Object)adaptor.create(L_BR452)
            ;
            adaptor.addChild(root_0, L_BR452_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_selector4009);
            a_selector_value_wrapper453=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper453.getTree());

            R_BR454=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_selector4011); 
            R_BR454_tree = 
            (Object)adaptor.create(R_BR454)
            ;
            adaptor.addChild(root_0, R_BR454_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector"


    public static class a_protocol_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol_wrapper"
    // Objcm.g:764:1: a_protocol_wrapper : a_protocol -> ^( PROTOCOL a_protocol ) ;
    public final ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper() throws RecognitionException {
        ObjcmParser.a_protocol_wrapper_return retval = new ObjcmParser.a_protocol_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_protocol_return a_protocol455 =null;


        RewriteRuleSubtreeStream stream_a_protocol=new RewriteRuleSubtreeStream(adaptor,"rule a_protocol");
        try {
            // Objcm.g:765:2: ( a_protocol -> ^( PROTOCOL a_protocol ) )
            // Objcm.g:765:4: a_protocol
            {
            pushFollow(FOLLOW_a_protocol_in_a_protocol_wrapper4021);
            a_protocol455=a_protocol();

            state._fsp--;

            stream_a_protocol.add(a_protocol455.getTree());

            // AST REWRITE
            // elements: a_protocol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 765:15: -> ^( PROTOCOL a_protocol )
            {
                // Objcm.g:765:18: ^( PROTOCOL a_protocol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_a_protocol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol_wrapper"


    public static class a_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol"
    // Objcm.g:767:1: a_protocol : '@protocol' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_protocol_return a_protocol() throws RecognitionException {
        ObjcmParser.a_protocol_return retval = new ObjcmParser.a_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal456=null;
        Token L_BR457=null;
        Token R_BR459=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper458 =null;


        Object string_literal456_tree=null;
        Object L_BR457_tree=null;
        Object R_BR459_tree=null;

        try {
            // Objcm.g:768:2: ( '@protocol' L_BR a_selector_value_wrapper R_BR )
            // Objcm.g:768:4: '@protocol' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal456=(Token)match(input,166,FOLLOW_166_in_a_protocol4039); 
            string_literal456_tree = 
            (Object)adaptor.create(string_literal456)
            ;
            adaptor.addChild(root_0, string_literal456_tree);


            L_BR457=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_protocol4041); 
            L_BR457_tree = 
            (Object)adaptor.create(L_BR457)
            ;
            adaptor.addChild(root_0, L_BR457_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_protocol4043);
            a_selector_value_wrapper458=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper458.getTree());

            R_BR459=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_protocol4045); 
            R_BR459_tree = 
            (Object)adaptor.create(R_BR459)
            ;
            adaptor.addChild(root_0, R_BR459_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol"


    public static class a_encode_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode_wrapper"
    // Objcm.g:770:1: a_encode_wrapper : a_encode -> ^( ENCODE a_encode ) ;
    public final ObjcmParser.a_encode_wrapper_return a_encode_wrapper() throws RecognitionException {
        ObjcmParser.a_encode_wrapper_return retval = new ObjcmParser.a_encode_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_encode_return a_encode460 =null;


        RewriteRuleSubtreeStream stream_a_encode=new RewriteRuleSubtreeStream(adaptor,"rule a_encode");
        try {
            // Objcm.g:771:2: ( a_encode -> ^( ENCODE a_encode ) )
            // Objcm.g:771:4: a_encode
            {
            pushFollow(FOLLOW_a_encode_in_a_encode_wrapper4055);
            a_encode460=a_encode();

            state._fsp--;

            stream_a_encode.add(a_encode460.getTree());

            // AST REWRITE
            // elements: a_encode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 771:13: -> ^( ENCODE a_encode )
            {
                // Objcm.g:771:16: ^( ENCODE a_encode )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENCODE, "ENCODE")
                , root_1);

                adaptor.addChild(root_1, stream_a_encode.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode_wrapper"


    public static class a_selector_value_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value_wrapper"
    // Objcm.g:773:1: a_selector_value_wrapper : a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) ;
    public final ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_value_wrapper_return retval = new ObjcmParser.a_selector_value_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_value_return a_selector_value461 =null;


        RewriteRuleSubtreeStream stream_a_selector_value=new RewriteRuleSubtreeStream(adaptor,"rule a_selector_value");
        try {
            // Objcm.g:774:2: ( a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) )
            // Objcm.g:774:4: a_selector_value
            {
            pushFollow(FOLLOW_a_selector_value_in_a_selector_value_wrapper4072);
            a_selector_value461=a_selector_value();

            state._fsp--;

            stream_a_selector_value.add(a_selector_value461.getTree());

            // AST REWRITE
            // elements: a_selector_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 774:21: -> ^( SELECTOR_VALUE a_selector_value )
            {
                // Objcm.g:774:24: ^( SELECTOR_VALUE a_selector_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR_VALUE, "SELECTOR_VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value_wrapper"


    public static class a_selector_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value"
    // Objcm.g:776:1: a_selector_value : ID ( COLON ( ID COLON )* )? ;
    public final ObjcmParser.a_selector_value_return a_selector_value() throws RecognitionException {
        ObjcmParser.a_selector_value_return retval = new ObjcmParser.a_selector_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID462=null;
        Token COLON463=null;
        Token ID464=null;
        Token COLON465=null;

        Object ID462_tree=null;
        Object COLON463_tree=null;
        Object ID464_tree=null;
        Object COLON465_tree=null;

        try {
            // Objcm.g:777:2: ( ID ( COLON ( ID COLON )* )? )
            // Objcm.g:777:5: ID ( COLON ( ID COLON )* )?
            {
            root_0 = (Object)adaptor.nil();


            ID462=(Token)match(input,ID,FOLLOW_ID_in_a_selector_value4091); 
            ID462_tree = 
            (Object)adaptor.create(ID462)
            ;
            adaptor.addChild(root_0, ID462_tree);


            // Objcm.g:777:9: ( COLON ( ID COLON )* )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==COLON) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // Objcm.g:777:10: COLON ( ID COLON )*
                    {
                    COLON463=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4095); 
                    COLON463_tree = 
                    (Object)adaptor.create(COLON463)
                    ;
                    adaptor.addChild(root_0, COLON463_tree);


                    // Objcm.g:777:17: ( ID COLON )*
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( (LA118_0==ID) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    // Objcm.g:777:18: ID COLON
                    	    {
                    	    ID464=(Token)match(input,ID,FOLLOW_ID_in_a_selector_value4099); 
                    	    ID464_tree = 
                    	    (Object)adaptor.create(ID464)
                    	    ;
                    	    adaptor.addChild(root_0, ID464_tree);


                    	    COLON465=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4102); 
                    	    COLON465_tree = 
                    	    (Object)adaptor.create(COLON465)
                    	    ;
                    	    adaptor.addChild(root_0, COLON465_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop118;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value"


    public static class a_encode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode"
    // Objcm.g:779:1: a_encode : '@encode' L_BR (~ ( R_BR ) )+ R_BR ;
    public final ObjcmParser.a_encode_return a_encode() throws RecognitionException {
        ObjcmParser.a_encode_return retval = new ObjcmParser.a_encode_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal466=null;
        Token L_BR467=null;
        Token set468=null;
        Token R_BR469=null;

        Object string_literal466_tree=null;
        Object L_BR467_tree=null;
        Object set468_tree=null;
        Object R_BR469_tree=null;

        try {
            // Objcm.g:779:9: ( '@encode' L_BR (~ ( R_BR ) )+ R_BR )
            // Objcm.g:779:11: '@encode' L_BR (~ ( R_BR ) )+ R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal466=(Token)match(input,160,FOLLOW_160_in_a_encode4113); 
            string_literal466_tree = 
            (Object)adaptor.create(string_literal466)
            ;
            adaptor.addChild(root_0, string_literal466_tree);


            L_BR467=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_encode4115); 
            L_BR467_tree = 
            (Object)adaptor.create(L_BR467)
            ;
            adaptor.addChild(root_0, L_BR467_tree);


            // Objcm.g:779:26: (~ ( R_BR ) )+
            int cnt120=0;
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( ((LA120_0 >= ASSIGN && LA120_0 <= RETURN_STMT)||(LA120_0 >= R_FBR && LA120_0 <= 191)) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // Objcm.g:
            	    {
            	    set468=(Token)input.LT(1);

            	    if ( (input.LA(1) >= ASSIGN && input.LA(1) <= RETURN_STMT)||(input.LA(1) >= R_FBR && input.LA(1) <= 191) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set468)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt120 >= 1 ) break loop120;
                        EarlyExitException eee =
                            new EarlyExitException(120, input);
                        throw eee;
                }
                cnt120++;
            } while (true);


            R_BR469=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_encode4123); 
            R_BR469_tree = 
            (Object)adaptor.create(R_BR469)
            ;
            adaptor.addChild(root_0, R_BR469_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode"


    public static class const_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // Objcm.g:781:1: const_expr : ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt );
    public final ObjcmParser.const_expr_return const_expr() throws RecognitionException {
        ObjcmParser.const_expr_return retval = new ObjcmParser.const_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NUMBER470=null;
        Token STRING_LITERAL471=null;
        Token STRING_LITERAL2472=null;
        Token STRING_LITERAL3473=null;
        ObjcmParser.null_stmt_return null_stmt474 =null;


        Object NUMBER470_tree=null;
        Object STRING_LITERAL471_tree=null;
        Object STRING_LITERAL2472_tree=null;
        Object STRING_LITERAL3473_tree=null;

        try {
            // Objcm.g:782:2: ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt )
            int alt121=5;
            switch ( input.LA(1) ) {
            case NUMBER:
                {
                alt121=1;
                }
                break;
            case STRING_LITERAL:
                {
                alt121=2;
                }
                break;
            case STRING_LITERAL2:
                {
                alt121=3;
                }
                break;
            case STRING_LITERAL3:
                {
                alt121=4;
                }
                break;
            case 172:
            case 185:
                {
                alt121=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;

            }

            switch (alt121) {
                case 1 :
                    // Objcm.g:782:5: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER470=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_const_expr4134); 
                    NUMBER470_tree = 
                    (Object)adaptor.create(NUMBER470)
                    ;
                    adaptor.addChild(root_0, NUMBER470_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:782:14: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL471=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_const_expr4138); 
                    STRING_LITERAL471_tree = 
                    (Object)adaptor.create(STRING_LITERAL471)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL471_tree);


                    }
                    break;
                case 3 :
                    // Objcm.g:782:31: STRING_LITERAL2
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL2472=(Token)match(input,STRING_LITERAL2,FOLLOW_STRING_LITERAL2_in_const_expr4142); 
                    STRING_LITERAL2472_tree = 
                    (Object)adaptor.create(STRING_LITERAL2472)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL2472_tree);


                    }
                    break;
                case 4 :
                    // Objcm.g:782:49: STRING_LITERAL3
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL3473=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_const_expr4146); 
                    STRING_LITERAL3473_tree = 
                    (Object)adaptor.create(STRING_LITERAL3473)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL3473_tree);


                    }
                    break;
                case 5 :
                    // Objcm.g:782:67: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_const_expr4150);
                    null_stmt474=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt474.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class string_literal3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_literal3"
    // Objcm.g:784:1: string_literal3 : STRING_LITERAL3 ;
    public final ObjcmParser.string_literal3_return string_literal3() throws RecognitionException {
        ObjcmParser.string_literal3_return retval = new ObjcmParser.string_literal3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL3475=null;

        Object STRING_LITERAL3475_tree=null;

        try {
            // Objcm.g:785:2: ( STRING_LITERAL3 )
            // Objcm.g:785:4: STRING_LITERAL3
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL3475=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_string_literal34160); 
            STRING_LITERAL3475_tree = 
            (Object)adaptor.create(STRING_LITERAL3475)
            ;
            adaptor.addChild(root_0, STRING_LITERAL3475_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_literal3"


    public static class method_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_brackets"
    // Objcm.g:787:1: method_brackets : L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.method_brackets_return method_brackets() throws RecognitionException {
        ObjcmParser.method_brackets_return retval = new ObjcmParser.method_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR476=null;
        Token COMMA478=null;
        Token R_BR480=null;
        ObjcmParser.expression_return expression477 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp479 =null;


        Object L_BR476_tree=null;
        Object COMMA478_tree=null;
        Object R_BR480_tree=null;

        try {
            // Objcm.g:788:2: ( L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR )
            // Objcm.g:788:4: L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR476=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_brackets4170); 
            L_BR476_tree = 
            (Object)adaptor.create(L_BR476)
            ;
            adaptor.addChild(root_0, L_BR476_tree);


            // Objcm.g:788:10: ( expression ( COMMA classical_expr_wrp )* )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==ASTERISK||LA123_0==ID||LA123_0==L_AND||LA123_0==L_BR||LA123_0==L_KBR||LA123_0==L_MINUS||LA123_0==L_MINUS_MINUS||LA123_0==L_NOT||LA123_0==L_PLUS||LA123_0==L_PLUS_PLUS||LA123_0==L_TILDA||LA123_0==NUMBER||LA123_0==SIZEOF||(LA123_0 >= STRING_LITERAL && LA123_0 <= STRING_LITERAL3)||LA123_0==160||LA123_0==166||LA123_0==168||LA123_0==172||LA123_0==183||LA123_0==185||LA123_0==190) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // Objcm.g:788:11: expression ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_expression_in_method_brackets4174);
                    expression477=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression477.getTree());

                    // Objcm.g:788:23: ( COMMA classical_expr_wrp )*
                    loop122:
                    do {
                        int alt122=2;
                        int LA122_0 = input.LA(1);

                        if ( (LA122_0==COMMA) ) {
                            alt122=1;
                        }


                        switch (alt122) {
                    	case 1 :
                    	    // Objcm.g:788:24: COMMA classical_expr_wrp
                    	    {
                    	    COMMA478=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_brackets4178); 
                    	    COMMA478_tree = 
                    	    (Object)adaptor.create(COMMA478)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA478_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_method_brackets4181);
                    	    classical_expr_wrp479=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp479.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop122;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR480=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_brackets4187); 
            R_BR480_tree = 
            (Object)adaptor.create(R_BR480)
            ;
            adaptor.addChild(root_0, R_BR480_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_brackets"


    public static class func_pointer1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer1"
    // Objcm.g:790:1: func_pointer1 : type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? ;
    public final ObjcmParser.func_pointer1_return func_pointer1() throws RecognitionException {
        ObjcmParser.func_pointer1_return retval = new ObjcmParser.func_pointer1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK482=null;
        Token L_BR483=null;
        Token ASTERISK484=null;
        Token R_BR486=null;
        ObjcmParser.type_internal_return type_internal481 =null;

        ObjcmParser.type_internal_return type_internal485 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params487 =null;


        Object ASTERISK482_tree=null;
        Object L_BR483_tree=null;
        Object ASTERISK484_tree=null;
        Object R_BR486_tree=null;

        try {
            // Objcm.g:791:2: ( type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? )
            // Objcm.g:791:4: type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_func_pointer14197);
            type_internal481=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal481.getTree());

            // Objcm.g:791:19: ( ASTERISK )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==ASTERISK) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // Objcm.g:791:19: ASTERISK
                    {
                    ASTERISK482=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14200); 
                    ASTERISK482_tree = 
                    (Object)adaptor.create(ASTERISK482)
                    ;
                    adaptor.addChild(root_0, ASTERISK482_tree);


                    }
                    break;

            }


            L_BR483=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer14203); 
            L_BR483_tree = 
            (Object)adaptor.create(L_BR483)
            ;
            adaptor.addChild(root_0, L_BR483_tree);


            // Objcm.g:791:34: ( ASTERISK )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==ASTERISK) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // Objcm.g:791:34: ASTERISK
                    {
                    ASTERISK484=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14205); 
                    ASTERISK484_tree = 
                    (Object)adaptor.create(ASTERISK484)
                    ;
                    adaptor.addChild(root_0, ASTERISK484_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_func_pointer14208);
            type_internal485=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal485.getTree());

            R_BR486=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer14211); 
            R_BR486_tree = 
            (Object)adaptor.create(R_BR486)
            ;
            adaptor.addChild(root_0, R_BR486_tree);


            // Objcm.g:791:65: ( func_pointer_params )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==L_BR) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // Objcm.g:791:65: func_pointer_params
                    {
                    pushFollow(FOLLOW_func_pointer_params_in_func_pointer14214);
                    func_pointer_params487=func_pointer_params();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer_params487.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer1"


    public static class func_pointer2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer2"
    // Objcm.g:794:1: func_pointer2 : L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR ;
    public final ObjcmParser.func_pointer2_return func_pointer2() throws RecognitionException {
        ObjcmParser.func_pointer2_return retval = new ObjcmParser.func_pointer2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR488=null;
        Token L_BR490=null;
        Token ASTERISK491=null;
        Token R_BR492=null;
        Token R_BR494=null;
        ObjcmParser.type_internal_return type_internal489 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params493 =null;


        Object L_BR488_tree=null;
        Object L_BR490_tree=null;
        Object ASTERISK491_tree=null;
        Object R_BR492_tree=null;
        Object R_BR494_tree=null;

        try {
            // Objcm.g:795:2: ( L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR )
            // Objcm.g:795:4: L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR488=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24227); 
            L_BR488_tree = 
            (Object)adaptor.create(L_BR488)
            ;
            adaptor.addChild(root_0, L_BR488_tree);


            pushFollow(FOLLOW_type_internal_in_func_pointer24230);
            type_internal489=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal489.getTree());

            L_BR490=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24232); 
            L_BR490_tree = 
            (Object)adaptor.create(L_BR490)
            ;
            adaptor.addChild(root_0, L_BR490_tree);


            ASTERISK491=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer24235); 
            ASTERISK491_tree = 
            (Object)adaptor.create(ASTERISK491)
            ;
            adaptor.addChild(root_0, ASTERISK491_tree);


            R_BR492=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24238); 
            R_BR492_tree = 
            (Object)adaptor.create(R_BR492)
            ;
            adaptor.addChild(root_0, R_BR492_tree);


            pushFollow(FOLLOW_func_pointer_params_in_func_pointer24241);
            func_pointer_params493=func_pointer_params();

            state._fsp--;

            adaptor.addChild(root_0, func_pointer_params493.getTree());

            R_BR494=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24244); 
            R_BR494_tree = 
            (Object)adaptor.create(R_BR494)
            ;
            adaptor.addChild(root_0, R_BR494_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer2"


    public static class func_pointer_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_params"
    // Objcm.g:798:1: func_pointer_params : L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR ;
    public final ObjcmParser.func_pointer_params_return func_pointer_params() throws RecognitionException {
        ObjcmParser.func_pointer_params_return retval = new ObjcmParser.func_pointer_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR495=null;
        Token ID496=null;
        Token ASTERISK497=null;
        Token COMMA498=null;
        Token ID499=null;
        Token ASTERISK500=null;
        Token R_BR501=null;

        Object L_BR495_tree=null;
        Object ID496_tree=null;
        Object ASTERISK497_tree=null;
        Object COMMA498_tree=null;
        Object ID499_tree=null;
        Object ASTERISK500_tree=null;
        Object R_BR501_tree=null;

        try {
            // Objcm.g:799:2: ( L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR )
            // Objcm.g:799:4: L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR495=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer_params4257); 
            L_BR495_tree = 
            (Object)adaptor.create(L_BR495)
            ;
            adaptor.addChild(root_0, L_BR495_tree);


            ID496=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4260); 
            ID496_tree = 
            (Object)adaptor.create(ID496)
            ;
            adaptor.addChild(root_0, ID496_tree);


            // Objcm.g:799:14: ( ASTERISK )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==ASTERISK) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // Objcm.g:799:14: ASTERISK
            	    {
            	    ASTERISK497=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4263); 
            	    ASTERISK497_tree = 
            	    (Object)adaptor.create(ASTERISK497)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK497_tree);


            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            // Objcm.g:799:24: ( COMMA ID ( ASTERISK )* )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==COMMA) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // Objcm.g:799:25: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA498=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_pointer_params4267); 
            	    COMMA498_tree = 
            	    (Object)adaptor.create(COMMA498)
            	    ;
            	    adaptor.addChild(root_0, COMMA498_tree);


            	    ID499=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4270); 
            	    ID499_tree = 
            	    (Object)adaptor.create(ID499)
            	    ;
            	    adaptor.addChild(root_0, ID499_tree);


            	    // Objcm.g:799:36: ( ASTERISK )*
            	    loop128:
            	    do {
            	        int alt128=2;
            	        int LA128_0 = input.LA(1);

            	        if ( (LA128_0==ASTERISK) ) {
            	            alt128=1;
            	        }


            	        switch (alt128) {
            	    	case 1 :
            	    	    // Objcm.g:799:36: ASTERISK
            	    	    {
            	    	    ASTERISK500=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4273); 
            	    	    ASTERISK500_tree = 
            	    	    (Object)adaptor.create(ASTERISK500)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK500_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop128;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            R_BR501=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer_params4278); 
            R_BR501_tree = 
            (Object)adaptor.create(R_BR501)
            ;
            adaptor.addChild(root_0, R_BR501_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_params"


    public static class in_brackets_end1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_brackets_end1"
    // Objcm.g:801:1: in_brackets_end1 : ( L_BR expression R_BR | method_start ( index_brackets )? | ( L_PLUS_PLUS | L_MINUS_MINUS ) method_start | const_expr );
    public final ObjcmParser.in_brackets_end1_return in_brackets_end1() throws RecognitionException {
        ObjcmParser.in_brackets_end1_return retval = new ObjcmParser.in_brackets_end1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR502=null;
        Token R_BR504=null;
        Token set507=null;
        ObjcmParser.expression_return expression503 =null;

        ObjcmParser.method_start_return method_start505 =null;

        ObjcmParser.index_brackets_return index_brackets506 =null;

        ObjcmParser.method_start_return method_start508 =null;

        ObjcmParser.const_expr_return const_expr509 =null;


        Object L_BR502_tree=null;
        Object R_BR504_tree=null;
        Object set507_tree=null;

        try {
            // Objcm.g:802:2: ( L_BR expression R_BR | method_start ( index_brackets )? | ( L_PLUS_PLUS | L_MINUS_MINUS ) method_start | const_expr )
            int alt131=4;
            switch ( input.LA(1) ) {
            case L_BR:
                {
                alt131=1;
                }
                break;
            case ID:
                {
                alt131=2;
                }
                break;
            case L_MINUS_MINUS:
            case L_PLUS_PLUS:
                {
                alt131=3;
                }
                break;
            case NUMBER:
            case STRING_LITERAL:
            case STRING_LITERAL2:
            case STRING_LITERAL3:
            case 172:
            case 185:
                {
                alt131=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }

            switch (alt131) {
                case 1 :
                    // Objcm.g:802:4: L_BR expression R_BR
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR502=(Token)match(input,L_BR,FOLLOW_L_BR_in_in_brackets_end14288); 
                    L_BR502_tree = 
                    (Object)adaptor.create(L_BR502)
                    ;
                    adaptor.addChild(root_0, L_BR502_tree);


                    pushFollow(FOLLOW_expression_in_in_brackets_end14291);
                    expression503=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression503.getTree());

                    R_BR504=(Token)match(input,R_BR,FOLLOW_R_BR_in_in_brackets_end14294); 
                    R_BR504_tree = 
                    (Object)adaptor.create(R_BR504)
                    ;
                    adaptor.addChild(root_0, R_BR504_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:803:4: method_start ( index_brackets )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_start_in_in_brackets_end14299);
                    method_start505=method_start();

                    state._fsp--;

                    adaptor.addChild(root_0, method_start505.getTree());

                    // Objcm.g:803:17: ( index_brackets )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==L_KBR) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // Objcm.g:803:17: index_brackets
                            {
                            pushFollow(FOLLOW_index_brackets_in_in_brackets_end14301);
                            index_brackets506=index_brackets();

                            state._fsp--;

                            adaptor.addChild(root_0, index_brackets506.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // Objcm.g:804:4: ( L_PLUS_PLUS | L_MINUS_MINUS ) method_start
                    {
                    root_0 = (Object)adaptor.nil();


                    set507=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set507)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_method_start_in_in_brackets_end14315);
                    method_start508=method_start();

                    state._fsp--;

                    adaptor.addChild(root_0, method_start508.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:805:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_in_brackets_end14320);
                    const_expr509=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr509.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_brackets_end1"


    public static class in_brackets_end2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_brackets_end2"
    // Objcm.g:808:1: in_brackets_end2 : ( L_BR expression R_BR | const_expr );
    public final ObjcmParser.in_brackets_end2_return in_brackets_end2() throws RecognitionException {
        ObjcmParser.in_brackets_end2_return retval = new ObjcmParser.in_brackets_end2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR510=null;
        Token R_BR512=null;
        ObjcmParser.expression_return expression511 =null;

        ObjcmParser.const_expr_return const_expr513 =null;


        Object L_BR510_tree=null;
        Object R_BR512_tree=null;

        try {
            // Objcm.g:809:2: ( L_BR expression R_BR | const_expr )
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==L_BR) ) {
                alt132=1;
            }
            else if ( (LA132_0==NUMBER||(LA132_0 >= STRING_LITERAL && LA132_0 <= STRING_LITERAL3)||LA132_0==172||LA132_0==185) ) {
                alt132=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;

            }
            switch (alt132) {
                case 1 :
                    // Objcm.g:809:4: L_BR expression R_BR
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR510=(Token)match(input,L_BR,FOLLOW_L_BR_in_in_brackets_end24332); 
                    L_BR510_tree = 
                    (Object)adaptor.create(L_BR510)
                    ;
                    adaptor.addChild(root_0, L_BR510_tree);


                    pushFollow(FOLLOW_expression_in_in_brackets_end24335);
                    expression511=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression511.getTree());

                    R_BR512=(Token)match(input,R_BR,FOLLOW_R_BR_in_in_brackets_end24338); 
                    R_BR512_tree = 
                    (Object)adaptor.create(R_BR512)
                    ;
                    adaptor.addChild(root_0, R_BR512_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:810:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_in_brackets_end24343);
                    const_expr513=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr513.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_brackets_end2"


    public static class method_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_start"
    // Objcm.g:813:1: method_start : ID ( method_brackets )? ;
    public final ObjcmParser.method_start_return method_start() throws RecognitionException {
        ObjcmParser.method_start_return retval = new ObjcmParser.method_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID514=null;
        ObjcmParser.method_brackets_return method_brackets515 =null;


        Object ID514_tree=null;

        try {
            // Objcm.g:814:2: ( ID ( method_brackets )? )
            // Objcm.g:814:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID514=(Token)match(input,ID,FOLLOW_ID_in_method_start4356); 
            ID514_tree = 
            (Object)adaptor.create(ID514)
            ;
            adaptor.addChild(root_0, ID514_tree);


            // Objcm.g:814:7: ( method_brackets )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==L_BR) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // Objcm.g:814:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_method_start4358);
                    method_brackets515=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets515.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_start"


    public static class in_q_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_q_brackets"
    // Objcm.g:816:1: in_q_brackets : L_FBR q_brackets_source R_FBR ;
    public final ObjcmParser.in_q_brackets_return in_q_brackets() throws RecognitionException {
        ObjcmParser.in_q_brackets_return retval = new ObjcmParser.in_q_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR516=null;
        Token R_FBR518=null;
        ObjcmParser.q_brackets_source_return q_brackets_source517 =null;


        Object L_FBR516_tree=null;
        Object R_FBR518_tree=null;

        try {
            // Objcm.g:817:2: ( L_FBR q_brackets_source R_FBR )
            // Objcm.g:817:4: L_FBR q_brackets_source R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR516=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_in_q_brackets4369); 
            L_FBR516_tree = 
            (Object)adaptor.create(L_FBR516)
            ;
            adaptor.addChild(root_0, L_FBR516_tree);


            pushFollow(FOLLOW_q_brackets_source_in_in_q_brackets4372);
            q_brackets_source517=q_brackets_source();

            state._fsp--;

            adaptor.addChild(root_0, q_brackets_source517.getTree());

            R_FBR518=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_in_q_brackets4374); 
            R_FBR518_tree = 
            (Object)adaptor.create(R_FBR518)
            ;
            adaptor.addChild(root_0, R_FBR518_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_q_brackets"


    public static class q_brackets_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_brackets_source"
    // Objcm.g:820:1: q_brackets_source : ( q_source | q_br_source );
    public final ObjcmParser.q_brackets_source_return q_brackets_source() throws RecognitionException {
        ObjcmParser.q_brackets_source_return retval = new ObjcmParser.q_brackets_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.q_source_return q_source519 =null;

        ObjcmParser.q_br_source_return q_br_source520 =null;



        try {
            // Objcm.g:821:2: ( q_source | q_br_source )
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==ASTERISK||LA134_0==ID||LA134_0==L_AND||LA134_0==L_BR||LA134_0==L_KBR||LA134_0==L_MINUS||LA134_0==L_MINUS_MINUS||LA134_0==L_NOT||LA134_0==L_PLUS||LA134_0==L_PLUS_PLUS||LA134_0==L_TILDA||LA134_0==NUMBER||LA134_0==R_FBR||LA134_0==SIZEOF||(LA134_0 >= STRING_LITERAL && LA134_0 <= STRING_LITERAL3)||LA134_0==160||LA134_0==166||LA134_0==168||LA134_0==172||LA134_0==183||LA134_0==185||LA134_0==190) ) {
                alt134=1;
            }
            else if ( (LA134_0==L_FBR) ) {
                alt134=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;

            }
            switch (alt134) {
                case 1 :
                    // Objcm.g:821:4: q_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_source_in_q_brackets_source4386);
                    q_source519=q_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_source519.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:822:4: q_br_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_br_source_in_q_brackets_source4391);
                    q_br_source520=q_br_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_br_source520.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_brackets_source"


    public static class q_br_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_br_source"
    // Objcm.g:825:1: q_br_source : in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? ;
    public final ObjcmParser.q_br_source_return q_br_source() throws RecognitionException {
        ObjcmParser.q_br_source_return retval = new ObjcmParser.q_br_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA522=null;
        Token COMMA524=null;
        ObjcmParser.in_q_brackets_return in_q_brackets521 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets523 =null;


        Object COMMA522_tree=null;
        Object COMMA524_tree=null;

        try {
            // Objcm.g:826:2: ( in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? )
            // Objcm.g:826:4: in_q_brackets ( COMMA in_q_brackets )* ( COMMA )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_in_q_brackets_in_q_br_source4404);
            in_q_brackets521=in_q_brackets();

            state._fsp--;

            adaptor.addChild(root_0, in_q_brackets521.getTree());

            // Objcm.g:826:19: ( COMMA in_q_brackets )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==COMMA) ) {
                    int LA135_1 = input.LA(2);

                    if ( (LA135_1==L_FBR) ) {
                        alt135=1;
                    }


                }


                switch (alt135) {
            	case 1 :
            	    // Objcm.g:826:20: COMMA in_q_brackets
            	    {
            	    COMMA522=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4408); 
            	    COMMA522_tree = 
            	    (Object)adaptor.create(COMMA522)
            	    ;
            	    adaptor.addChild(root_0, COMMA522_tree);


            	    pushFollow(FOLLOW_in_q_brackets_in_q_br_source4411);
            	    in_q_brackets523=in_q_brackets();

            	    state._fsp--;

            	    adaptor.addChild(root_0, in_q_brackets523.getTree());

            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            // Objcm.g:826:43: ( COMMA )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==COMMA) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // Objcm.g:826:43: COMMA
                    {
                    COMMA524=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4415); 
                    COMMA524_tree = 
                    (Object)adaptor.create(COMMA524)
                    ;
                    adaptor.addChild(root_0, COMMA524_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_br_source"


    public static class q_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_source"
    // Objcm.g:829:1: q_source : ( expression ( COMMA expression )* )? ;
    public final ObjcmParser.q_source_return q_source() throws RecognitionException {
        ObjcmParser.q_source_return retval = new ObjcmParser.q_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA526=null;
        ObjcmParser.expression_return expression525 =null;

        ObjcmParser.expression_return expression527 =null;


        Object COMMA526_tree=null;

        try {
            // Objcm.g:829:9: ( ( expression ( COMMA expression )* )? )
            // Objcm.g:829:11: ( expression ( COMMA expression )* )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:829:11: ( expression ( COMMA expression )* )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==ASTERISK||LA138_0==ID||LA138_0==L_AND||LA138_0==L_BR||LA138_0==L_KBR||LA138_0==L_MINUS||LA138_0==L_MINUS_MINUS||LA138_0==L_NOT||LA138_0==L_PLUS||LA138_0==L_PLUS_PLUS||LA138_0==L_TILDA||LA138_0==NUMBER||LA138_0==SIZEOF||(LA138_0 >= STRING_LITERAL && LA138_0 <= STRING_LITERAL3)||LA138_0==160||LA138_0==166||LA138_0==168||LA138_0==172||LA138_0==183||LA138_0==185||LA138_0==190) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // Objcm.g:829:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_q_source4427);
                    expression525=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression525.getTree());

                    // Objcm.g:829:24: ( COMMA expression )*
                    loop137:
                    do {
                        int alt137=2;
                        int LA137_0 = input.LA(1);

                        if ( (LA137_0==COMMA) ) {
                            alt137=1;
                        }


                        switch (alt137) {
                    	case 1 :
                    	    // Objcm.g:829:25: COMMA expression
                    	    {
                    	    COMMA526=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_source4431); 
                    	    COMMA526_tree = 
                    	    (Object)adaptor.create(COMMA526)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA526_tree);


                    	    pushFollow(FOLLOW_expression_in_q_source4434);
                    	    expression527=expression();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, expression527.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop137;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_source"


    public static class simple_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_method_call"
    // Objcm.g:832:1: simple_method_call : ID ( method_brackets )? ;
    public final ObjcmParser.simple_method_call_return simple_method_call() throws RecognitionException {
        ObjcmParser.simple_method_call_return retval = new ObjcmParser.simple_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID528=null;
        ObjcmParser.method_brackets_return method_brackets529 =null;


        Object ID528_tree=null;

        try {
            // Objcm.g:833:2: ( ID ( method_brackets )? )
            // Objcm.g:833:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID528=(Token)match(input,ID,FOLLOW_ID_in_simple_method_call4451); 
            ID528_tree = 
            (Object)adaptor.create(ID528)
            ;
            adaptor.addChild(root_0, ID528_tree);


            // Objcm.g:833:7: ( method_brackets )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==L_BR) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // Objcm.g:833:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_simple_method_call4453);
                    method_brackets529=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets529.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_method_call"


    public static class index_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_brackets"
    // Objcm.g:835:1: index_brackets : L_KBR classical_expr_wrp R_KBR ;
    public final ObjcmParser.index_brackets_return index_brackets() throws RecognitionException {
        ObjcmParser.index_brackets_return retval = new ObjcmParser.index_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR530=null;
        Token R_KBR532=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp531 =null;


        Object L_KBR530_tree=null;
        Object R_KBR532_tree=null;

        try {
            // Objcm.g:836:2: ( L_KBR classical_expr_wrp R_KBR )
            // Objcm.g:836:4: L_KBR classical_expr_wrp R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR530=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index_brackets4469); 
            L_KBR530_tree = 
            (Object)adaptor.create(L_KBR530)
            ;
            adaptor.addChild(root_0, L_KBR530_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_index_brackets4472);
            classical_expr_wrp531=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp531.getTree());

            R_KBR532=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index_brackets4474); 
            R_KBR532_tree = 
            (Object)adaptor.create(R_KBR532)
            ;
            adaptor.addChild(root_0, R_KBR532_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_brackets"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // Objcm.g:843:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcmParser.interface_declaration_wrapper_return retval = new ObjcmParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_declaration_return interface_declaration533 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // Objcm.g:844:2: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // Objcm.g:844:4: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper4488);
            interface_declaration533=interface_declaration();

            state._fsp--;

            stream_interface_declaration.add(interface_declaration533.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 844:26: -> ^( INTERFACE interface_declaration )
            {
                // Objcm.g:844:29: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // Objcm.g:846:1: interface_declaration : '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods )+ '@end' ;
    public final ObjcmParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcmParser.interface_declaration_return retval = new ObjcmParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal534=null;
        Token string_literal540=null;
        ObjcmParser.name_return name535 =null;

        ObjcmParser.interface_category_return interface_category536 =null;

        ObjcmParser.super_class_return super_class537 =null;

        ObjcmParser.annotated_block_return annotated_block538 =null;

        ObjcmParser.interface_methods_return interface_methods539 =null;


        Object string_literal534_tree=null;
        Object string_literal540_tree=null;

        try {
            // Objcm.g:847:2: ( '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods )+ '@end' )
            // Objcm.g:847:4: '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods )+ '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal534=(Token)match(input,164,FOLLOW_164_in_interface_declaration4506); 
            string_literal534_tree = 
            (Object)adaptor.create(string_literal534)
            ;
            adaptor.addChild(root_0, string_literal534_tree);


            pushFollow(FOLLOW_name_in_interface_declaration4509);
            name535=name();

            state._fsp--;

            adaptor.addChild(root_0, name535.getTree());

            // Objcm.g:847:24: ( interface_category )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==L_BR) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // Objcm.g:847:24: interface_category
                    {
                    pushFollow(FOLLOW_interface_category_in_interface_declaration4512);
                    interface_category536=interface_category();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_category536.getTree());

                    }
                    break;

            }


            // Objcm.g:847:44: ( super_class )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==COLON) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // Objcm.g:847:45: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_interface_declaration4516);
                    super_class537=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class537.getTree());

                    }
                    break;

            }


            // Objcm.g:848:3: ( annotated_block | interface_methods )+
            int cnt142=0;
            loop142:
            do {
                int alt142=3;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==L_FBR) ) {
                    alt142=1;
                }
                else if ( (LA142_0==ENUM_PREFIX||LA142_0==L_MINUS||LA142_0==L_PLUS) ) {
                    alt142=2;
                }


                switch (alt142) {
            	case 1 :
            	    // Objcm.g:848:4: annotated_block
            	    {
            	    pushFollow(FOLLOW_annotated_block_in_interface_declaration4523);
            	    annotated_block538=annotated_block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block538.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:848:22: interface_methods
            	    {
            	    pushFollow(FOLLOW_interface_methods_in_interface_declaration4527);
            	    interface_methods539=interface_methods();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_methods539.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt142 >= 1 ) break loop142;
                        EarlyExitException eee =
                            new EarlyExitException(142, input);
                        throw eee;
                }
                cnt142++;
            } while (true);


            string_literal540=(Token)match(input,161,FOLLOW_161_in_interface_declaration4536); 
            string_literal540_tree = 
            (Object)adaptor.create(string_literal540)
            ;
            adaptor.addChild(root_0, string_literal540_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class annotated_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block"
    // Objcm.g:852:1: annotated_block : L_FBR ( annotated_block_internal )* R_FBR ;
    public final ObjcmParser.annotated_block_return annotated_block() throws RecognitionException {
        ObjcmParser.annotated_block_return retval = new ObjcmParser.annotated_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR541=null;
        Token R_FBR543=null;
        ObjcmParser.annotated_block_internal_return annotated_block_internal542 =null;


        Object L_FBR541_tree=null;
        Object R_FBR543_tree=null;

        try {
            // Objcm.g:853:2: ( L_FBR ( annotated_block_internal )* R_FBR )
            // Objcm.g:853:4: L_FBR ( annotated_block_internal )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR541=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_annotated_block4547); 
            L_FBR541_tree = 
            (Object)adaptor.create(L_FBR541)
            ;
            adaptor.addChild(root_0, L_FBR541_tree);


            // Objcm.g:854:3: ( annotated_block_internal )*
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==ID||LA143_0==VOID||LA143_0==165||LA143_0==167||LA143_0==189) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // Objcm.g:854:3: annotated_block_internal
            	    {
            	    pushFollow(FOLLOW_annotated_block_internal_in_annotated_block4552);
            	    annotated_block_internal542=annotated_block_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block_internal542.getTree());

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            R_FBR543=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_annotated_block4557); 
            R_FBR543_tree = 
            (Object)adaptor.create(R_FBR543)
            ;
            adaptor.addChild(root_0, R_FBR543_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block"


    public static class annotated_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block_internal"
    // Objcm.g:858:1: annotated_block_internal : ( block_annotation | public_block_internal );
    public final ObjcmParser.annotated_block_internal_return annotated_block_internal() throws RecognitionException {
        ObjcmParser.annotated_block_internal_return retval = new ObjcmParser.annotated_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_annotation_return block_annotation544 =null;

        ObjcmParser.public_block_internal_return public_block_internal545 =null;



        try {
            // Objcm.g:859:2: ( block_annotation | public_block_internal )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==165||LA144_0==167) ) {
                alt144=1;
            }
            else if ( (LA144_0==ID||LA144_0==VOID||LA144_0==189) ) {
                alt144=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;

            }
            switch (alt144) {
                case 1 :
                    // Objcm.g:859:4: block_annotation
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_annotation_in_annotated_block_internal4570);
                    block_annotation544=block_annotation();

                    state._fsp--;

                    adaptor.addChild(root_0, block_annotation544.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:860:5: public_block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_public_block_internal_in_annotated_block_internal4577);
                    public_block_internal545=public_block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, public_block_internal545.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block_internal"


    public static class block_annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_annotation"
    // Objcm.g:863:1: block_annotation : ( '@public' | '@private' );
    public final ObjcmParser.block_annotation_return block_annotation() throws RecognitionException {
        ObjcmParser.block_annotation_return retval = new ObjcmParser.block_annotation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set546=null;

        Object set546_tree=null;

        try {
            // Objcm.g:864:2: ( '@public' | '@private' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set546=(Token)input.LT(1);

            if ( input.LA(1)==165||input.LA(1)==167 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set546)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_annotation"


    public static class public_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "public_block_internal"
    // Objcm.g:868:1: public_block_internal : ( simple_field_declaration | union_declaration );
    public final ObjcmParser.public_block_internal_return public_block_internal() throws RecognitionException {
        ObjcmParser.public_block_internal_return retval = new ObjcmParser.public_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_field_declaration_return simple_field_declaration547 =null;

        ObjcmParser.union_declaration_return union_declaration548 =null;



        try {
            // Objcm.g:869:2: ( simple_field_declaration | union_declaration )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==ID||LA145_0==VOID) ) {
                alt145=1;
            }
            else if ( (LA145_0==189) ) {
                alt145=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;

            }
            switch (alt145) {
                case 1 :
                    // Objcm.g:869:4: simple_field_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_field_declaration_in_public_block_internal4612);
                    simple_field_declaration547=simple_field_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, simple_field_declaration547.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:870:4: union_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_union_declaration_in_public_block_internal4617);
                    union_declaration548=union_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, union_declaration548.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "public_block_internal"


    public static class simple_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_field_declaration"
    // Objcm.g:873:1: simple_field_declaration : field_type name SEMICOLON ;
    public final ObjcmParser.simple_field_declaration_return simple_field_declaration() throws RecognitionException {
        ObjcmParser.simple_field_declaration_return retval = new ObjcmParser.simple_field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON551=null;
        ObjcmParser.field_type_return field_type549 =null;

        ObjcmParser.name_return name550 =null;


        Object SEMICOLON551_tree=null;

        try {
            // Objcm.g:874:2: ( field_type name SEMICOLON )
            // Objcm.g:874:4: field_type name SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_simple_field_declaration4629);
            field_type549=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type549.getTree());

            pushFollow(FOLLOW_name_in_simple_field_declaration4631);
            name550=name();

            state._fsp--;

            adaptor.addChild(root_0, name550.getTree());

            SEMICOLON551=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_field_declaration4634); 
            SEMICOLON551_tree = 
            (Object)adaptor.create(SEMICOLON551)
            ;
            adaptor.addChild(root_0, SEMICOLON551_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_field_declaration"


    public static class union_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_declaration"
    // Objcm.g:877:1: union_declaration : 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON ;
    public final ObjcmParser.union_declaration_return union_declaration() throws RecognitionException {
        ObjcmParser.union_declaration_return retval = new ObjcmParser.union_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal552=null;
        Token L_FBR553=null;
        Token R_FBR555=null;
        Token ID556=null;
        Token SEMICOLON557=null;
        ObjcmParser.simple_field_declaration_return simple_field_declaration554 =null;


        Object string_literal552_tree=null;
        Object L_FBR553_tree=null;
        Object R_FBR555_tree=null;
        Object ID556_tree=null;
        Object SEMICOLON557_tree=null;

        try {
            // Objcm.g:878:2: ( 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON )
            // Objcm.g:878:4: 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal552=(Token)match(input,189,FOLLOW_189_in_union_declaration4647); 
            string_literal552_tree = 
            (Object)adaptor.create(string_literal552)
            ;
            adaptor.addChild(root_0, string_literal552_tree);


            L_FBR553=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_union_declaration4650); 
            L_FBR553_tree = 
            (Object)adaptor.create(L_FBR553)
            ;
            adaptor.addChild(root_0, L_FBR553_tree);


            // Objcm.g:879:4: ( simple_field_declaration )+
            int cnt146=0;
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==ID||LA146_0==VOID) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    // Objcm.g:879:4: simple_field_declaration
            	    {
            	    pushFollow(FOLLOW_simple_field_declaration_in_union_declaration4656);
            	    simple_field_declaration554=simple_field_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_field_declaration554.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt146 >= 1 ) break loop146;
                        EarlyExitException eee =
                            new EarlyExitException(146, input);
                        throw eee;
                }
                cnt146++;
            } while (true);


            R_FBR555=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_union_declaration4661); 
            R_FBR555_tree = 
            (Object)adaptor.create(R_FBR555)
            ;
            adaptor.addChild(root_0, R_FBR555_tree);


            ID556=(Token)match(input,ID,FOLLOW_ID_in_union_declaration4664); 
            ID556_tree = 
            (Object)adaptor.create(ID556)
            ;
            adaptor.addChild(root_0, ID556_tree);


            SEMICOLON557=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_union_declaration4667); 
            SEMICOLON557_tree = 
            (Object)adaptor.create(SEMICOLON557)
            ;
            adaptor.addChild(root_0, SEMICOLON557_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_declaration"


    public static class super_class_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "super_class"
    // Objcm.g:883:1: super_class : COLON ID -> ^( SUPER_CLASS ID ) ;
    public final ObjcmParser.super_class_return super_class() throws RecognitionException {
        ObjcmParser.super_class_return retval = new ObjcmParser.super_class_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON558=null;
        Token ID559=null;

        Object COLON558_tree=null;
        Object ID559_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:884:2: ( COLON ID -> ^( SUPER_CLASS ID ) )
            // Objcm.g:884:4: COLON ID
            {
            COLON558=(Token)match(input,COLON,FOLLOW_COLON_in_super_class4681);  
            stream_COLON.add(COLON558);


            ID559=(Token)match(input,ID,FOLLOW_ID_in_super_class4684);  
            stream_ID.add(ID559);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 884:15: -> ^( SUPER_CLASS ID )
            {
                // Objcm.g:884:18: ^( SUPER_CLASS ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPER_CLASS, "SUPER_CLASS")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "super_class"


    public static class interface_category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_category"
    // Objcm.g:886:1: interface_category : L_BR ID R_BR -> ^( CATEGORY L_BR ID R_BR ) ;
    public final ObjcmParser.interface_category_return interface_category() throws RecognitionException {
        ObjcmParser.interface_category_return retval = new ObjcmParser.interface_category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR560=null;
        Token ID561=null;
        Token R_BR562=null;

        Object L_BR560_tree=null;
        Object ID561_tree=null;
        Object R_BR562_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");

        try {
            // Objcm.g:887:2: ( L_BR ID R_BR -> ^( CATEGORY L_BR ID R_BR ) )
            // Objcm.g:887:4: L_BR ID R_BR
            {
            L_BR560=(Token)match(input,L_BR,FOLLOW_L_BR_in_interface_category4704);  
            stream_L_BR.add(L_BR560);


            ID561=(Token)match(input,ID,FOLLOW_ID_in_interface_category4707);  
            stream_ID.add(ID561);


            R_BR562=(Token)match(input,R_BR,FOLLOW_R_BR_in_interface_category4710);  
            stream_R_BR.add(R_BR562);


            // AST REWRITE
            // elements: L_BR, ID, R_BR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 887:19: -> ^( CATEGORY L_BR ID R_BR )
            {
                // Objcm.g:887:22: ^( CATEGORY L_BR ID R_BR )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_L_BR.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_R_BR.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_category"


    public static class interface_methods_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_methods"
    // Objcm.g:889:1: interface_methods : ( enum_declaration | interface_method )+ ;
    public final ObjcmParser.interface_methods_return interface_methods() throws RecognitionException {
        ObjcmParser.interface_methods_return retval = new ObjcmParser.interface_methods_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.enum_declaration_return enum_declaration563 =null;

        ObjcmParser.interface_method_return interface_method564 =null;



        try {
            // Objcm.g:890:2: ( ( enum_declaration | interface_method )+ )
            // Objcm.g:890:4: ( enum_declaration | interface_method )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:890:4: ( enum_declaration | interface_method )+
            int cnt147=0;
            loop147:
            do {
                int alt147=3;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==ENUM_PREFIX) ) {
                    alt147=1;
                }
                else if ( (LA147_0==L_MINUS||LA147_0==L_PLUS) ) {
                    alt147=2;
                }


                switch (alt147) {
            	case 1 :
            	    // Objcm.g:890:5: enum_declaration
            	    {
            	    pushFollow(FOLLOW_enum_declaration_in_interface_methods4739);
            	    enum_declaration563=enum_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, enum_declaration563.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:890:24: interface_method
            	    {
            	    pushFollow(FOLLOW_interface_method_in_interface_methods4743);
            	    interface_method564=interface_method();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_method564.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt147 >= 1 ) break loop147;
                        EarlyExitException eee =
                            new EarlyExitException(147, input);
                        throw eee;
                }
                cnt147++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_methods"


    public static class interface_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_method"
    // Objcm.g:892:1: interface_method : method_header -> ^( METHOD method_header ) ;
    public final ObjcmParser.interface_method_return interface_method() throws RecognitionException {
        ObjcmParser.interface_method_return retval = new ObjcmParser.interface_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_header_return method_header565 =null;


        RewriteRuleSubtreeStream stream_method_header=new RewriteRuleSubtreeStream(adaptor,"rule method_header");
        try {
            // Objcm.g:893:2: ( method_header -> ^( METHOD method_header ) )
            // Objcm.g:893:4: method_header
            {
            pushFollow(FOLLOW_method_header_in_interface_method4755);
            method_header565=method_header();

            state._fsp--;

            stream_method_header.add(method_header565.getTree());

            // AST REWRITE
            // elements: method_header
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 893:18: -> ^( METHOD method_header )
            {
                // Objcm.g:893:21: ^( METHOD method_header )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_method_header.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_method"


    public static class method_header_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header"
    // Objcm.g:895:1: method_header : method_header_body ( SEMICOLON )? ;
    public final ObjcmParser.method_header_return method_header() throws RecognitionException {
        ObjcmParser.method_header_return retval = new ObjcmParser.method_header_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON567=null;
        ObjcmParser.method_header_body_return method_header_body566 =null;


        Object SEMICOLON567_tree=null;

        try {
            // Objcm.g:896:2: ( method_header_body ( SEMICOLON )? )
            // Objcm.g:896:4: method_header_body ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_method_header4774);
            method_header_body566=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body566.getTree());

            // Objcm.g:896:23: ( SEMICOLON )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==SEMICOLON) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // Objcm.g:896:23: SEMICOLON
                    {
                    SEMICOLON567=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_method_header4776); 
                    SEMICOLON567_tree = 
                    (Object)adaptor.create(SEMICOLON567)
                    ;
                    adaptor.addChild(root_0, SEMICOLON567_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header"


    public static class method_header_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body"
    // Objcm.g:898:1: method_header_body : method_modifier_wrapper method_type name ( method_params )? ( va_args_wrapper )? ;
    public final ObjcmParser.method_header_body_return method_header_body() throws RecognitionException {
        ObjcmParser.method_header_body_return retval = new ObjcmParser.method_header_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper568 =null;

        ObjcmParser.method_type_return method_type569 =null;

        ObjcmParser.name_return name570 =null;

        ObjcmParser.method_params_return method_params571 =null;

        ObjcmParser.va_args_wrapper_return va_args_wrapper572 =null;



        try {
            // Objcm.g:899:2: ( method_modifier_wrapper method_type name ( method_params )? ( va_args_wrapper )? )
            // Objcm.g:899:4: method_modifier_wrapper method_type name ( method_params )? ( va_args_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_header_body4786);
            method_modifier_wrapper568=method_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_modifier_wrapper568.getTree());

            pushFollow(FOLLOW_method_type_in_method_header_body4789);
            method_type569=method_type();

            state._fsp--;

            adaptor.addChild(root_0, method_type569.getTree());

            pushFollow(FOLLOW_name_in_method_header_body4792);
            name570=name();

            state._fsp--;

            adaptor.addChild(root_0, name570.getTree());

            // Objcm.g:899:48: ( method_params )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==COLON||LA149_0==ID||LA149_0==L_BR||LA149_0==183) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // Objcm.g:899:48: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_header_body4795);
                    method_params571=method_params();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params571.getTree());

                    }
                    break;

            }


            // Objcm.g:899:63: ( va_args_wrapper )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==COMMA) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // Objcm.g:899:63: va_args_wrapper
                    {
                    pushFollow(FOLLOW_va_args_wrapper_in_method_header_body4798);
                    va_args_wrapper572=va_args_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, va_args_wrapper572.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body"


    public static class va_args_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args_wrapper"
    // Objcm.g:901:1: va_args_wrapper : va_args -> ^( VA_ARGS va_args ) ;
    public final ObjcmParser.va_args_wrapper_return va_args_wrapper() throws RecognitionException {
        ObjcmParser.va_args_wrapper_return retval = new ObjcmParser.va_args_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.va_args_return va_args573 =null;


        RewriteRuleSubtreeStream stream_va_args=new RewriteRuleSubtreeStream(adaptor,"rule va_args");
        try {
            // Objcm.g:902:2: ( va_args -> ^( VA_ARGS va_args ) )
            // Objcm.g:902:4: va_args
            {
            pushFollow(FOLLOW_va_args_in_va_args_wrapper4808);
            va_args573=va_args();

            state._fsp--;

            stream_va_args.add(va_args573.getTree());

            // AST REWRITE
            // elements: va_args
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 902:12: -> ^( VA_ARGS va_args )
            {
                // Objcm.g:902:15: ^( VA_ARGS va_args )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VA_ARGS, "VA_ARGS")
                , root_1);

                adaptor.addChild(root_1, stream_va_args.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args_wrapper"


    public static class va_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args"
    // Objcm.g:904:1: va_args : COMMA '...' ( SEMICOLON )? ;
    public final ObjcmParser.va_args_return va_args() throws RecognitionException {
        ObjcmParser.va_args_return retval = new ObjcmParser.va_args_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA574=null;
        Token string_literal575=null;
        Token SEMICOLON576=null;

        Object COMMA574_tree=null;
        Object string_literal575_tree=null;
        Object SEMICOLON576_tree=null;

        try {
            // Objcm.g:904:9: ( COMMA '...' ( SEMICOLON )? )
            // Objcm.g:904:11: COMMA '...' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            COMMA574=(Token)match(input,COMMA,FOLLOW_COMMA_in_va_args4825); 
            COMMA574_tree = 
            (Object)adaptor.create(COMMA574)
            ;
            adaptor.addChild(root_0, COMMA574_tree);


            string_literal575=(Token)match(input,158,FOLLOW_158_in_va_args4828); 
            string_literal575_tree = 
            (Object)adaptor.create(string_literal575)
            ;
            adaptor.addChild(root_0, string_literal575_tree);


            // Objcm.g:904:25: ( SEMICOLON )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==SEMICOLON) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // Objcm.g:904:25: SEMICOLON
                    {
                    SEMICOLON576=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_va_args4831); 
                    SEMICOLON576_tree = 
                    (Object)adaptor.create(SEMICOLON576)
                    ;
                    adaptor.addChild(root_0, SEMICOLON576_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args"


    public static class method_header_body2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body2"
    // Objcm.g:906:1: method_header_body2 : method_type name ( method_params2 )? ;
    public final ObjcmParser.method_header_body2_return method_header_body2() throws RecognitionException {
        ObjcmParser.method_header_body2_return retval = new ObjcmParser.method_header_body2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_type_return method_type577 =null;

        ObjcmParser.name_return name578 =null;

        ObjcmParser.method_params2_return method_params2579 =null;



        try {
            // Objcm.g:907:2: ( method_type name ( method_params2 )? )
            // Objcm.g:907:4: method_type name ( method_params2 )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_type_in_method_header_body24842);
            method_type577=method_type();

            state._fsp--;

            adaptor.addChild(root_0, method_type577.getTree());

            pushFollow(FOLLOW_name_in_method_header_body24844);
            name578=name();

            state._fsp--;

            adaptor.addChild(root_0, name578.getTree());

            // Objcm.g:907:22: ( method_params2 )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==L_BR) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // Objcm.g:907:22: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_method_header_body24847);
                    method_params2579=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params2579.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body2"


    public static class method_header_body3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body3"
    // Objcm.g:909:1: method_header_body3 : method_params2 ;
    public final ObjcmParser.method_header_body3_return method_header_body3() throws RecognitionException {
        ObjcmParser.method_header_body3_return retval = new ObjcmParser.method_header_body3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2580 =null;



        try {
            // Objcm.g:910:2: ( method_params2 )
            // Objcm.g:910:4: method_params2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_header_body34857);
            method_params2580=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2580.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body3"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // Objcm.g:912:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcmParser.method_modifier_wrapper_return retval = new ObjcmParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_return method_modifier581 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // Objcm.g:913:2: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // Objcm.g:913:4: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper4866);
            method_modifier581=method_modifier();

            state._fsp--;

            stream_method_modifier.add(method_modifier581.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 913:20: -> ^( MODIFIER method_modifier )
            {
                // Objcm.g:913:23: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // Objcm.g:915:1: method_modifier : ( '+' | '-' );
    public final ObjcmParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcmParser.method_modifier_return retval = new ObjcmParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set582=null;

        Object set582_tree=null;

        try {
            // Objcm.g:916:2: ( '+' | '-' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set582=(Token)input.LT(1);

            if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set582)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_type"
    // Objcm.g:918:1: method_type : ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE type_internal ) | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR -> ^( TYPE ( ID )+ ) );
    public final ObjcmParser.method_type_return method_type() throws RecognitionException {
        ObjcmParser.method_type_return retval = new ObjcmParser.method_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR583=null;
        Token STRUCT_PREFIX584=null;
        Token ASTERISK587=null;
        Token R_BR588=null;
        Token L_BR589=null;
        Token CONST_PREFIX590=null;
        Token ID592=null;
        Token ASTERISK594=null;
        Token R_BR595=null;
        ObjcmParser.type_internal_return type_internal585 =null;

        ObjcmParser.generic_return generic586 =null;

        ObjcmParser.known_types_return known_types591 =null;

        ObjcmParser.generic_return generic593 =null;


        Object L_BR583_tree=null;
        Object STRUCT_PREFIX584_tree=null;
        Object ASTERISK587_tree=null;
        Object R_BR588_tree=null;
        Object L_BR589_tree=null;
        Object CONST_PREFIX590_tree=null;
        Object ID592_tree=null;
        Object ASTERISK594_tree=null;
        Object R_BR595_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_STRUCT_PREFIX=new RewriteRuleTokenStream(adaptor,"token STRUCT_PREFIX");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        RewriteRuleSubtreeStream stream_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_internal");
        RewriteRuleSubtreeStream stream_known_types=new RewriteRuleSubtreeStream(adaptor,"rule known_types");
        try {
            // Objcm.g:919:2: ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE type_internal ) | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR -> ^( TYPE ( ID )+ ) )
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==L_BR) ) {
                switch ( input.LA(2) ) {
                case STRUCT_PREFIX:
                    {
                    alt161=1;
                    }
                    break;
                case VOID:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        alt161=1;
                        }
                        break;
                    case L_LESS:
                        {
                        int LA161_11 = input.LA(4);

                        if ( (LA161_11==ID) ) {
                            alt161=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 161, 11, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA161_12 = input.LA(4);

                        if ( (LA161_12==R_BR) ) {
                            alt161=1;
                        }
                        else if ( (LA161_12==ASTERISK) ) {
                            alt161=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 161, 12, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt161=1;
                        }
                        break;
                    case ID:
                        {
                        alt161=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 161, 3, input);

                        throw nvae;

                    }

                    }
                    break;
                case ASTERISK:
                case CONST_PREFIX:
                case L_LESS:
                case R_BR:
                case 190:
                    {
                    alt161=2;
                    }
                    break;
                case ID:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        alt161=1;
                        }
                        break;
                    case L_LESS:
                        {
                        int LA161_16 = input.LA(4);

                        if ( (LA161_16==ID) ) {
                            alt161=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 161, 16, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA161_17 = input.LA(4);

                        if ( (LA161_17==R_BR) ) {
                            alt161=1;
                        }
                        else if ( (LA161_17==ASTERISK) ) {
                            alt161=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 161, 17, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt161=1;
                        }
                        break;
                    case ID:
                        {
                        alt161=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 161, 5, input);

                        throw nvae;

                    }

                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 161, 1, input);

                    throw nvae;

                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;

            }
            switch (alt161) {
                case 1 :
                    // Objcm.g:919:4: L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR583=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type4898);  
                    stream_L_BR.add(L_BR583);


                    // Objcm.g:919:10: ( STRUCT_PREFIX )?
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==STRUCT_PREFIX) ) {
                        alt153=1;
                    }
                    switch (alt153) {
                        case 1 :
                            // Objcm.g:919:10: STRUCT_PREFIX
                            {
                            STRUCT_PREFIX584=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_type4901);  
                            stream_STRUCT_PREFIX.add(STRUCT_PREFIX584);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_internal_in_method_type4904);
                    type_internal585=type_internal();

                    state._fsp--;

                    stream_type_internal.add(type_internal585.getTree());

                    // Objcm.g:919:40: ( generic )?
                    int alt154=2;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==L_LESS) ) {
                        alt154=1;
                    }
                    switch (alt154) {
                        case 1 :
                            // Objcm.g:919:40: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type4907);
                            generic586=generic();

                            state._fsp--;

                            stream_generic.add(generic586.getTree());

                            }
                            break;

                    }


                    // Objcm.g:919:49: ( ASTERISK )*
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);

                        if ( (LA155_0==ASTERISK) ) {
                            alt155=1;
                        }


                        switch (alt155) {
                    	case 1 :
                    	    // Objcm.g:919:49: ASTERISK
                    	    {
                    	    ASTERISK587=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type4910);  
                    	    stream_ASTERISK.add(ASTERISK587);


                    	    }
                    	    break;

                    	default :
                    	    break loop155;
                        }
                    } while (true);


                    R_BR588=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type4913);  
                    stream_R_BR.add(R_BR588);


                    // AST REWRITE
                    // elements: type_internal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 919:64: -> ^( TYPE type_internal )
                    {
                        // Objcm.g:919:67: ^( TYPE type_internal )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE, "TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_internal.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:920:5: L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR589=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type4927);  
                    stream_L_BR.add(L_BR589);


                    // Objcm.g:920:11: ( CONST_PREFIX )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==CONST_PREFIX) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // Objcm.g:920:11: CONST_PREFIX
                            {
                            CONST_PREFIX590=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_type4930);  
                            stream_CONST_PREFIX.add(CONST_PREFIX590);


                            }
                            break;

                    }


                    // Objcm.g:920:25: ( known_types )?
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==VOID||LA157_0==190) ) {
                        alt157=1;
                    }
                    switch (alt157) {
                        case 1 :
                            // Objcm.g:920:25: known_types
                            {
                            pushFollow(FOLLOW_known_types_in_method_type4933);
                            known_types591=known_types();

                            state._fsp--;

                            stream_known_types.add(known_types591.getTree());

                            }
                            break;

                    }


                    // Objcm.g:920:38: ( ID )*
                    loop158:
                    do {
                        int alt158=2;
                        int LA158_0 = input.LA(1);

                        if ( (LA158_0==ID) ) {
                            alt158=1;
                        }


                        switch (alt158) {
                    	case 1 :
                    	    // Objcm.g:920:38: ID
                    	    {
                    	    ID592=(Token)match(input,ID,FOLLOW_ID_in_method_type4936);  
                    	    stream_ID.add(ID592);


                    	    }
                    	    break;

                    	default :
                    	    break loop158;
                        }
                    } while (true);


                    // Objcm.g:920:42: ( generic )?
                    int alt159=2;
                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==L_LESS) ) {
                        alt159=1;
                    }
                    switch (alt159) {
                        case 1 :
                            // Objcm.g:920:42: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type4939);
                            generic593=generic();

                            state._fsp--;

                            stream_generic.add(generic593.getTree());

                            }
                            break;

                    }


                    // Objcm.g:920:51: ( ASTERISK )*
                    loop160:
                    do {
                        int alt160=2;
                        int LA160_0 = input.LA(1);

                        if ( (LA160_0==ASTERISK) ) {
                            alt160=1;
                        }


                        switch (alt160) {
                    	case 1 :
                    	    // Objcm.g:920:51: ASTERISK
                    	    {
                    	    ASTERISK594=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type4942);  
                    	    stream_ASTERISK.add(ASTERISK594);


                    	    }
                    	    break;

                    	default :
                    	    break loop160;
                        }
                    } while (true);


                    R_BR595=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type4945);  
                    stream_R_BR.add(R_BR595);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 920:66: -> ^( TYPE ( ID )+ )
                    {
                        // Objcm.g:920:69: ^( TYPE ( ID )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE, "TYPE")
                        , root_1);

                        if ( !(stream_ID.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_ID.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_ID.nextNode()
                            );

                        }
                        stream_ID.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_type"


    public static class type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal"
    // Objcm.g:923:1: type_internal : type_internal1 ( L_KBR R_KBR )? ;
    public final ObjcmParser.type_internal_return type_internal() throws RecognitionException {
        ObjcmParser.type_internal_return retval = new ObjcmParser.type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR597=null;
        Token R_KBR598=null;
        ObjcmParser.type_internal1_return type_internal1596 =null;


        Object L_KBR597_tree=null;
        Object R_KBR598_tree=null;

        try {
            // Objcm.g:924:2: ( type_internal1 ( L_KBR R_KBR )? )
            // Objcm.g:924:4: type_internal1 ( L_KBR R_KBR )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal1_in_type_internal4970);
            type_internal1596=type_internal1();

            state._fsp--;

            adaptor.addChild(root_0, type_internal1596.getTree());

            // Objcm.g:924:19: ( L_KBR R_KBR )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==L_KBR) ) {
                int LA162_1 = input.LA(2);

                if ( (LA162_1==R_KBR) ) {
                    alt162=1;
                }
            }
            switch (alt162) {
                case 1 :
                    // Objcm.g:924:20: L_KBR R_KBR
                    {
                    L_KBR597=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_type_internal4973); 
                    L_KBR597_tree = 
                    (Object)adaptor.create(L_KBR597)
                    ;
                    adaptor.addChild(root_0, L_KBR597_tree);


                    R_KBR598=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_type_internal4976); 
                    R_KBR598_tree = 
                    (Object)adaptor.create(R_KBR598)
                    ;
                    adaptor.addChild(root_0, R_KBR598_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal"


    public static class type_internal1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal1"
    // Objcm.g:927:1: type_internal1 : ( VOID | ID );
    public final ObjcmParser.type_internal1_return type_internal1() throws RecognitionException {
        ObjcmParser.type_internal1_return retval = new ObjcmParser.type_internal1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set599=null;

        Object set599_tree=null;

        try {
            // Objcm.g:928:2: ( VOID | ID )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set599=(Token)input.LT(1);

            if ( input.LA(1)==ID||input.LA(1)==VOID ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set599)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal1"


    public static class generic_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic"
    // Objcm.g:932:1: generic : L_LESS generic_internal L_MORE -> ^( GENERIC generic_internal ) ;
    public final ObjcmParser.generic_return generic() throws RecognitionException {
        ObjcmParser.generic_return retval = new ObjcmParser.generic_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_LESS600=null;
        Token L_MORE602=null;
        ObjcmParser.generic_internal_return generic_internal601 =null;


        Object L_LESS600_tree=null;
        Object L_MORE602_tree=null;
        RewriteRuleTokenStream stream_L_MORE=new RewriteRuleTokenStream(adaptor,"token L_MORE");
        RewriteRuleTokenStream stream_L_LESS=new RewriteRuleTokenStream(adaptor,"token L_LESS");
        RewriteRuleSubtreeStream stream_generic_internal=new RewriteRuleSubtreeStream(adaptor,"rule generic_internal");
        try {
            // Objcm.g:932:8: ( L_LESS generic_internal L_MORE -> ^( GENERIC generic_internal ) )
            // Objcm.g:932:10: L_LESS generic_internal L_MORE
            {
            L_LESS600=(Token)match(input,L_LESS,FOLLOW_L_LESS_in_generic5009);  
            stream_L_LESS.add(L_LESS600);


            pushFollow(FOLLOW_generic_internal_in_generic5011);
            generic_internal601=generic_internal();

            state._fsp--;

            stream_generic_internal.add(generic_internal601.getTree());

            L_MORE602=(Token)match(input,L_MORE,FOLLOW_L_MORE_in_generic5013);  
            stream_L_MORE.add(L_MORE602);


            // AST REWRITE
            // elements: generic_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 932:41: -> ^( GENERIC generic_internal )
            {
                // Objcm.g:932:44: ^( GENERIC generic_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GENERIC, "GENERIC")
                , root_1);

                adaptor.addChild(root_1, stream_generic_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic"


    public static class generic_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic_internal"
    // Objcm.g:934:1: generic_internal : ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* ;
    public final ObjcmParser.generic_internal_return generic_internal() throws RecognitionException {
        ObjcmParser.generic_internal_return retval = new ObjcmParser.generic_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID603=null;
        Token ASTERISK604=null;
        Token COMMA605=null;
        Token ID606=null;
        Token ASTERISK607=null;

        Object ID603_tree=null;
        Object ASTERISK604_tree=null;
        Object COMMA605_tree=null;
        Object ID606_tree=null;
        Object ASTERISK607_tree=null;

        try {
            // Objcm.g:935:2: ( ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* )
            // Objcm.g:935:5: ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )*
            {
            root_0 = (Object)adaptor.nil();


            ID603=(Token)match(input,ID,FOLLOW_ID_in_generic_internal5032); 
            ID603_tree = 
            (Object)adaptor.create(ID603)
            ;
            adaptor.addChild(root_0, ID603_tree);


            // Objcm.g:935:9: ( ASTERISK )*
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==ASTERISK) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // Objcm.g:935:9: ASTERISK
            	    {
            	    ASTERISK604=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal5035); 
            	    ASTERISK604_tree = 
            	    (Object)adaptor.create(ASTERISK604)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK604_tree);


            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);


            // Objcm.g:935:19: ( COMMA ID ( ASTERISK )* )*
            loop165:
            do {
                int alt165=2;
                int LA165_0 = input.LA(1);

                if ( (LA165_0==COMMA) ) {
                    alt165=1;
                }


                switch (alt165) {
            	case 1 :
            	    // Objcm.g:935:20: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA605=(Token)match(input,COMMA,FOLLOW_COMMA_in_generic_internal5039); 
            	    COMMA605_tree = 
            	    (Object)adaptor.create(COMMA605)
            	    ;
            	    adaptor.addChild(root_0, COMMA605_tree);


            	    ID606=(Token)match(input,ID,FOLLOW_ID_in_generic_internal5042); 
            	    ID606_tree = 
            	    (Object)adaptor.create(ID606)
            	    ;
            	    adaptor.addChild(root_0, ID606_tree);


            	    // Objcm.g:935:31: ( ASTERISK )*
            	    loop164:
            	    do {
            	        int alt164=2;
            	        int LA164_0 = input.LA(1);

            	        if ( (LA164_0==ASTERISK) ) {
            	            alt164=1;
            	        }


            	        switch (alt164) {
            	    	case 1 :
            	    	    // Objcm.g:935:31: ASTERISK
            	    	    {
            	    	    ASTERISK607=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal5045); 
            	    	    ASTERISK607_tree = 
            	    	    (Object)adaptor.create(ASTERISK607)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK607_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop164;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop165;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic_internal"


    public static class method_params2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params2"
    // Objcm.g:937:1: method_params2 : L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR ;
    public final ObjcmParser.method_params2_return method_params2() throws RecognitionException {
        ObjcmParser.method_params2_return retval = new ObjcmParser.method_params2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR608=null;
        Token COMMA610=null;
        Token R_BR612=null;
        ObjcmParser.method_param_wrapper2_return method_param_wrapper2609 =null;

        ObjcmParser.method_param_wrapper2_return method_param_wrapper2611 =null;


        Object L_BR608_tree=null;
        Object COMMA610_tree=null;
        Object R_BR612_tree=null;

        try {
            // Objcm.g:938:2: ( L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR )
            // Objcm.g:938:4: L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR608=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_params25057); 
            L_BR608_tree = 
            (Object)adaptor.create(L_BR608)
            ;
            adaptor.addChild(root_0, L_BR608_tree);


            pushFollow(FOLLOW_method_param_wrapper2_in_method_params25060);
            method_param_wrapper2609=method_param_wrapper2();

            state._fsp--;

            adaptor.addChild(root_0, method_param_wrapper2609.getTree());

            // Objcm.g:938:33: ( COMMA method_param_wrapper2 )*
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==COMMA) ) {
                    alt166=1;
                }


                switch (alt166) {
            	case 1 :
            	    // Objcm.g:938:34: COMMA method_param_wrapper2
            	    {
            	    COMMA610=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_params25064); 
            	    COMMA610_tree = 
            	    (Object)adaptor.create(COMMA610)
            	    ;
            	    adaptor.addChild(root_0, COMMA610_tree);


            	    pushFollow(FOLLOW_method_param_wrapper2_in_method_params25067);
            	    method_param_wrapper2611=method_param_wrapper2();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_param_wrapper2611.getTree());

            	    }
            	    break;

            	default :
            	    break loop166;
                }
            } while (true);


            R_BR612=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_params25071); 
            R_BR612_tree = 
            (Object)adaptor.create(R_BR612)
            ;
            adaptor.addChild(root_0, R_BR612_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params2"


    public static class method_param_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_wrapper2"
    // Objcm.g:941:1: method_param_wrapper2 : method_param2 -> ^( PARAM method_param2 ) ;
    public final ObjcmParser.method_param_wrapper2_return method_param_wrapper2() throws RecognitionException {
        ObjcmParser.method_param_wrapper2_return retval = new ObjcmParser.method_param_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param2_return method_param2613 =null;


        RewriteRuleSubtreeStream stream_method_param2=new RewriteRuleSubtreeStream(adaptor,"rule method_param2");
        try {
            // Objcm.g:942:2: ( method_param2 -> ^( PARAM method_param2 ) )
            // Objcm.g:942:4: method_param2
            {
            pushFollow(FOLLOW_method_param2_in_method_param_wrapper25082);
            method_param2613=method_param2();

            state._fsp--;

            stream_method_param2.add(method_param2613.getTree());

            // AST REWRITE
            // elements: method_param2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 942:18: -> ^( PARAM method_param2 )
            {
                // Objcm.g:942:21: ^( PARAM method_param2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM, "PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_method_param2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_wrapper2"


    public static class method_param2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param2"
    // Objcm.g:944:1: method_param2 : ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )? ;
    public final ObjcmParser.method_param2_return method_param2() throws RecognitionException {
        ObjcmParser.method_param2_return retval = new ObjcmParser.method_param2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX614=null;
        Token ENUM_PREFIX615=null;
        Token STRUCT_PREFIX616=null;
        Token string_literal617=null;
        ObjcmParser.field_type_return field_type618 =null;

        ObjcmParser.name_return name619 =null;

        ObjcmParser.indexed_return indexed620 =null;


        Object CONST_PREFIX614_tree=null;
        Object ENUM_PREFIX615_tree=null;
        Object STRUCT_PREFIX616_tree=null;
        Object string_literal617_tree=null;

        try {
            // Objcm.g:945:2: ( ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )? )
            // Objcm.g:945:4: ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:945:4: ( CONST_PREFIX )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==CONST_PREFIX) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // Objcm.g:945:4: CONST_PREFIX
                    {
                    CONST_PREFIX614=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_param25100); 
                    CONST_PREFIX614_tree = 
                    (Object)adaptor.create(CONST_PREFIX614)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX614_tree);


                    }
                    break;

            }


            // Objcm.g:945:18: ( ENUM_PREFIX )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==ENUM_PREFIX) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // Objcm.g:945:18: ENUM_PREFIX
                    {
                    ENUM_PREFIX615=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_method_param25103); 
                    ENUM_PREFIX615_tree = 
                    (Object)adaptor.create(ENUM_PREFIX615)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX615_tree);


                    }
                    break;

            }


            // Objcm.g:945:31: ( STRUCT_PREFIX )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==STRUCT_PREFIX) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // Objcm.g:945:31: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX616=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_param25106); 
                    STRUCT_PREFIX616_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX616)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX616_tree);


                    }
                    break;

            }


            // Objcm.g:945:46: ( 'unsigned' )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==190) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // Objcm.g:945:46: 'unsigned'
                    {
                    string_literal617=(Token)match(input,190,FOLLOW_190_in_method_param25109); 
                    string_literal617_tree = 
                    (Object)adaptor.create(string_literal617)
                    ;
                    adaptor.addChild(root_0, string_literal617_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_method_param25112);
            field_type618=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type618.getTree());

            // Objcm.g:945:69: ( name )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==ID||LA171_0==183) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // Objcm.g:945:69: name
                    {
                    pushFollow(FOLLOW_name_in_method_param25114);
                    name619=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name619.getTree());

                    }
                    break;

            }


            // Objcm.g:945:75: ( indexed )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==L_KBR) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // Objcm.g:945:75: indexed
                    {
                    pushFollow(FOLLOW_indexed_in_method_param25117);
                    indexed620=indexed();

                    state._fsp--;

                    adaptor.addChild(root_0, indexed620.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param2"


    public static class indexed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexed"
    // Objcm.g:947:1: indexed : L_KBR ( NUMBER )? R_KBR ;
    public final ObjcmParser.indexed_return indexed() throws RecognitionException {
        ObjcmParser.indexed_return retval = new ObjcmParser.indexed_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR621=null;
        Token NUMBER622=null;
        Token R_KBR623=null;

        Object L_KBR621_tree=null;
        Object NUMBER622_tree=null;
        Object R_KBR623_tree=null;

        try {
            // Objcm.g:947:9: ( L_KBR ( NUMBER )? R_KBR )
            // Objcm.g:947:11: L_KBR ( NUMBER )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR621=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_indexed5127); 
            L_KBR621_tree = 
            (Object)adaptor.create(L_KBR621)
            ;
            adaptor.addChild(root_0, L_KBR621_tree);


            // Objcm.g:947:17: ( NUMBER )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==NUMBER) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // Objcm.g:947:17: NUMBER
                    {
                    NUMBER622=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_indexed5129); 
                    NUMBER622_tree = 
                    (Object)adaptor.create(NUMBER622)
                    ;
                    adaptor.addChild(root_0, NUMBER622_tree);


                    }
                    break;

            }


            R_KBR623=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_indexed5132); 
            R_KBR623_tree = 
            (Object)adaptor.create(R_KBR623)
            ;
            adaptor.addChild(root_0, R_KBR623_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexed"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // Objcm.g:949:1: method_params : ( method_param )+ -> ( ^( PARAM method_param ) )+ ;
    public final ObjcmParser.method_params_return method_params() throws RecognitionException {
        ObjcmParser.method_params_return retval = new ObjcmParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param_return method_param624 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // Objcm.g:950:2: ( ( method_param )+ -> ( ^( PARAM method_param ) )+ )
            // Objcm.g:950:4: ( method_param )+
            {
            // Objcm.g:950:4: ( method_param )+
            int cnt174=0;
            loop174:
            do {
                int alt174=2;
                int LA174_0 = input.LA(1);

                if ( (LA174_0==COLON||LA174_0==ID||LA174_0==L_BR||LA174_0==183) ) {
                    alt174=1;
                }


                switch (alt174) {
            	case 1 :
            	    // Objcm.g:950:4: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params5142);
            	    method_param624=method_param();

            	    state._fsp--;

            	    stream_method_param.add(method_param624.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt174 >= 1 ) break loop174;
                        EarlyExitException eee =
                            new EarlyExitException(174, input);
                        throw eee;
                }
                cnt174++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 950:18: -> ( ^( PARAM method_param ) )+
            {
                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    // Objcm.g:950:21: ^( PARAM method_param )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(PARAM, "PARAM")
                    , root_1);

                    adaptor.addChild(root_1, stream_method_param.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_method_param.reset();

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // Objcm.g:952:1: method_param : ( ( prefix )? | COLON ) ( method_type )? name ;
    public final ObjcmParser.method_param_return method_param() throws RecognitionException {
        ObjcmParser.method_param_return retval = new ObjcmParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON626=null;
        ObjcmParser.prefix_return prefix625 =null;

        ObjcmParser.method_type_return method_type627 =null;

        ObjcmParser.name_return name628 =null;


        Object COLON626_tree=null;

        try {
            // Objcm.g:953:2: ( ( ( prefix )? | COLON ) ( method_type )? name )
            // Objcm.g:953:4: ( ( prefix )? | COLON ) ( method_type )? name
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:953:4: ( ( prefix )? | COLON )
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==ID||LA176_0==L_BR||LA176_0==183) ) {
                alt176=1;
            }
            else if ( (LA176_0==COLON) ) {
                alt176=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;

            }
            switch (alt176) {
                case 1 :
                    // Objcm.g:953:5: ( prefix )?
                    {
                    // Objcm.g:953:5: ( prefix )?
                    int alt175=2;
                    int LA175_0 = input.LA(1);

                    if ( (LA175_0==ID) ) {
                        int LA175_1 = input.LA(2);

                        if ( (LA175_1==COLON) ) {
                            alt175=1;
                        }
                    }
                    switch (alt175) {
                        case 1 :
                            // Objcm.g:953:5: prefix
                            {
                            pushFollow(FOLLOW_prefix_in_method_param5164);
                            prefix625=prefix();

                            state._fsp--;

                            adaptor.addChild(root_0, prefix625.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:953:15: COLON
                    {
                    COLON626=(Token)match(input,COLON,FOLLOW_COLON_in_method_param5169); 
                    COLON626_tree = 
                    (Object)adaptor.create(COLON626)
                    ;
                    adaptor.addChild(root_0, COLON626_tree);


                    }
                    break;

            }


            // Objcm.g:953:22: ( method_type )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==L_BR) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // Objcm.g:953:22: method_type
                    {
                    pushFollow(FOLLOW_method_type_in_method_param5172);
                    method_type627=method_type();

                    state._fsp--;

                    adaptor.addChild(root_0, method_type627.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_name_in_method_param5175);
            name628=name();

            state._fsp--;

            adaptor.addChild(root_0, name628.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // Objcm.g:956:1: prefix : ID COLON -> ^( PREFIX ID COLON ) ;
    public final ObjcmParser.prefix_return prefix() throws RecognitionException {
        ObjcmParser.prefix_return retval = new ObjcmParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID629=null;
        Token COLON630=null;

        Object ID629_tree=null;
        Object COLON630_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:956:8: ( ID COLON -> ^( PREFIX ID COLON ) )
            // Objcm.g:956:10: ID COLON
            {
            ID629=(Token)match(input,ID,FOLLOW_ID_in_prefix5187);  
            stream_ID.add(ID629);


            COLON630=(Token)match(input,COLON,FOLLOW_COLON_in_prefix5189);  
            stream_COLON.add(COLON630);


            // AST REWRITE
            // elements: COLON, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 956:19: -> ^( PREFIX ID COLON )
            {
                // Objcm.g:956:22: ^( PREFIX ID COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PREFIX, "PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class incomplete_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "incomplete_prefix"
    // Objcm.g:958:1: incomplete_prefix : COLON -> ^( INCOMPLETE_PREFIX COLON ) ;
    public final ObjcmParser.incomplete_prefix_return incomplete_prefix() throws RecognitionException {
        ObjcmParser.incomplete_prefix_return retval = new ObjcmParser.incomplete_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON631=null;

        Object COLON631_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");

        try {
            // Objcm.g:959:2: ( COLON -> ^( INCOMPLETE_PREFIX COLON ) )
            // Objcm.g:959:4: COLON
            {
            COLON631=(Token)match(input,COLON,FOLLOW_COLON_in_incomplete_prefix5208);  
            stream_COLON.add(COLON631);


            // AST REWRITE
            // elements: COLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 959:10: -> ^( INCOMPLETE_PREFIX COLON )
            {
                // Objcm.g:959:13: ^( INCOMPLETE_PREFIX COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INCOMPLETE_PREFIX, "INCOMPLETE_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "incomplete_prefix"


    public static class typedef_struct_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_wrapper"
    // Objcm.g:966:1: typedef_struct_declaration_wrapper : typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) ;
    public final ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration632 =null;


        RewriteRuleSubtreeStream stream_typedef_struct_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_struct_declaration");
        try {
            // Objcm.g:967:2: ( typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) )
            // Objcm.g:967:4: typedef_struct_declaration
            {
            pushFollow(FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5230);
            typedef_struct_declaration632=typedef_struct_declaration();

            state._fsp--;

            stream_typedef_struct_declaration.add(typedef_struct_declaration632.getTree());

            // AST REWRITE
            // elements: typedef_struct_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 967:31: -> ^( TYPEDEF_STRUCT typedef_struct_declaration )
            {
                // Objcm.g:967:34: ^( TYPEDEF_STRUCT typedef_struct_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_STRUCT, "TYPEDEF_STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_struct_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_wrapper"


    public static class typedef_struct_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration"
    // Objcm.g:970:1: typedef_struct_declaration : STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? ;
    public final ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_return retval = new ObjcmParser.typedef_struct_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX633=null;
        Token L_FBR635=null;
        Token R_FBR637=null;
        Token SEMICOLON639=null;
        ObjcmParser.name_return name634 =null;

        ObjcmParser.typedef_struct_body_return typedef_struct_body636 =null;

        ObjcmParser.name_return name638 =null;


        Object STRUCT_PREFIX633_tree=null;
        Object L_FBR635_tree=null;
        Object R_FBR637_tree=null;
        Object SEMICOLON639_tree=null;

        try {
            // Objcm.g:971:2: ( STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? )
            // Objcm.g:971:4: STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX633=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5250); 
            STRUCT_PREFIX633_tree = 
            (Object)adaptor.create(STRUCT_PREFIX633)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX633_tree);


            // Objcm.g:971:18: ( name )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==ID||LA178_0==183) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // Objcm.g:971:18: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5252);
                    name634=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name634.getTree());

                    }
                    break;

            }


            L_FBR635=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_struct_declaration5256); 
            L_FBR635_tree = 
            (Object)adaptor.create(L_FBR635)
            ;
            adaptor.addChild(root_0, L_FBR635_tree);


            // Objcm.g:973:3: ( typedef_struct_body )+
            int cnt179=0;
            loop179:
            do {
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==ID||LA179_0==VOID) ) {
                    alt179=1;
                }


                switch (alt179) {
            	case 1 :
            	    // Objcm.g:973:3: typedef_struct_body
            	    {
            	    pushFollow(FOLLOW_typedef_struct_body_in_typedef_struct_declaration5261);
            	    typedef_struct_body636=typedef_struct_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_struct_body636.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt179 >= 1 ) break loop179;
                        EarlyExitException eee =
                            new EarlyExitException(179, input);
                        throw eee;
                }
                cnt179++;
            } while (true);


            R_FBR637=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_struct_declaration5265); 
            R_FBR637_tree = 
            (Object)adaptor.create(R_FBR637)
            ;
            adaptor.addChild(root_0, R_FBR637_tree);


            // Objcm.g:974:9: ( name )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==ID) ) {
                int LA180_1 = input.LA(2);

                if ( (LA180_1==EOF||LA180_1==CONST_PREFIX||LA180_1==L_MINUS||LA180_1==L_PLUS||LA180_1==SEMICOLON||LA180_1==STATIC_PREFIX||LA180_1==STRUCT_PREFIX||LA180_1==VOID||LA180_1==161||(LA180_1 >= 163 && LA180_1 <= 164)||LA180_1==169||LA180_1==180||LA180_1==188) ) {
                    alt180=1;
                }
                else if ( (LA180_1==ID) ) {
                    int LA180_21 = input.LA(3);

                    if ( (LA180_21==ASTERISK||LA180_21==ID||LA180_21==L_KBR||LA180_21==L_LESS||LA180_21==183) ) {
                        alt180=1;
                    }
                }
            }
            else if ( (LA180_0==183) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // Objcm.g:974:9: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5268);
                    name638=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name638.getTree());

                    }
                    break;

            }


            // Objcm.g:974:15: ( SEMICOLON )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==SEMICOLON) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // Objcm.g:974:15: SEMICOLON
                    {
                    SEMICOLON639=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_struct_declaration5271); 
                    SEMICOLON639_tree = 
                    (Object)adaptor.create(SEMICOLON639)
                    ;
                    adaptor.addChild(root_0, SEMICOLON639_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration"


    public static class typedef_struct_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_body"
    // Objcm.g:977:1: typedef_struct_body : typedef_struct_declaration_element_wrapper ;
    public final ObjcmParser.typedef_struct_body_return typedef_struct_body() throws RecognitionException {
        ObjcmParser.typedef_struct_body_return retval = new ObjcmParser.typedef_struct_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper640 =null;



        try {
            // Objcm.g:978:2: ( typedef_struct_declaration_element_wrapper )
            // Objcm.g:978:4: typedef_struct_declaration_element_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5284);
            typedef_struct_declaration_element_wrapper640=typedef_struct_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_struct_declaration_element_wrapper640.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_body"


    public static class typedef_struct_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_element_wrapper"
    // Objcm.g:981:1: typedef_struct_declaration_element_wrapper : struct_field -> ^( STRUCT_FIELD struct_field ) ;
    public final ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_element_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_field_return struct_field641 =null;


        RewriteRuleSubtreeStream stream_struct_field=new RewriteRuleSubtreeStream(adaptor,"rule struct_field");
        try {
            // Objcm.g:982:2: ( struct_field -> ^( STRUCT_FIELD struct_field ) )
            // Objcm.g:982:4: struct_field
            {
            pushFollow(FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5296);
            struct_field641=struct_field();

            state._fsp--;

            stream_struct_field.add(struct_field641.getTree());

            // AST REWRITE
            // elements: struct_field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 982:17: -> ^( STRUCT_FIELD struct_field )
            {
                // Objcm.g:982:20: ^( STRUCT_FIELD struct_field )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT_FIELD, "STRUCT_FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_struct_field.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_element_wrapper"


    public static class struct_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_field"
    // Objcm.g:984:1: struct_field : field_type name ( COMMA name )* SEMICOLON ;
    public final ObjcmParser.struct_field_return struct_field() throws RecognitionException {
        ObjcmParser.struct_field_return retval = new ObjcmParser.struct_field_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA644=null;
        Token SEMICOLON646=null;
        ObjcmParser.field_type_return field_type642 =null;

        ObjcmParser.name_return name643 =null;

        ObjcmParser.name_return name645 =null;


        Object COMMA644_tree=null;
        Object SEMICOLON646_tree=null;

        try {
            // Objcm.g:985:2: ( field_type name ( COMMA name )* SEMICOLON )
            // Objcm.g:985:4: field_type name ( COMMA name )* SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_struct_field5314);
            field_type642=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type642.getTree());

            pushFollow(FOLLOW_name_in_struct_field5316);
            name643=name();

            state._fsp--;

            adaptor.addChild(root_0, name643.getTree());

            // Objcm.g:985:21: ( COMMA name )*
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==COMMA) ) {
                    alt182=1;
                }


                switch (alt182) {
            	case 1 :
            	    // Objcm.g:985:22: COMMA name
            	    {
            	    COMMA644=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_field5320); 
            	    COMMA644_tree = 
            	    (Object)adaptor.create(COMMA644)
            	    ;
            	    adaptor.addChild(root_0, COMMA644_tree);


            	    pushFollow(FOLLOW_name_in_struct_field5323);
            	    name645=name();

            	    state._fsp--;

            	    adaptor.addChild(root_0, name645.getTree());

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);


            SEMICOLON646=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_field5327); 
            SEMICOLON646_tree = 
            (Object)adaptor.create(SEMICOLON646)
            ;
            adaptor.addChild(root_0, SEMICOLON646_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_field"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // Objcm.g:992:1: typedef_declaration_wrapper : typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_wrapper_return retval = new ObjcmParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration647 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // Objcm.g:993:2: ( typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // Objcm.g:993:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5343);
            typedef_declaration647=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration647.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 993:24: -> ^( TYPEDEF typedef_declaration )
            {
                // Objcm.g:993:27: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class enum_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_declaration"
    // Objcm.g:996:1: enum_declaration : typedef_declaration -> ^( ENUM typedef_declaration ) ;
    public final ObjcmParser.enum_declaration_return enum_declaration() throws RecognitionException {
        ObjcmParser.enum_declaration_return retval = new ObjcmParser.enum_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration648 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // Objcm.g:997:2: ( typedef_declaration -> ^( ENUM typedef_declaration ) )
            // Objcm.g:997:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_enum_declaration5363);
            typedef_declaration648=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration648.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 997:24: -> ^( ENUM typedef_declaration )
            {
                // Objcm.g:997:27: ^( ENUM typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_declaration"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // Objcm.g:999:1: typedef_declaration : ENUM_PREFIX L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON ;
    public final ObjcmParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcmParser.typedef_declaration_return retval = new ObjcmParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX649=null;
        Token L_FBR650=null;
        Token COMMA652=null;
        Token R_FBR654=null;
        Token SEMICOLON656=null;
        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper651 =null;

        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper653 =null;

        ObjcmParser.name_return name655 =null;


        Object ENUM_PREFIX649_tree=null;
        Object L_FBR650_tree=null;
        Object COMMA652_tree=null;
        Object R_FBR654_tree=null;
        Object SEMICOLON656_tree=null;

        try {
            // Objcm.g:1000:2: ( ENUM_PREFIX L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON )
            // Objcm.g:1000:5: ENUM_PREFIX L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX649=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_typedef_declaration5383); 
            ENUM_PREFIX649_tree = 
            (Object)adaptor.create(ENUM_PREFIX649)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX649_tree);


            L_FBR650=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_declaration5385); 
            L_FBR650_tree = 
            (Object)adaptor.create(L_FBR650)
            ;
            adaptor.addChild(root_0, L_FBR650_tree);


            pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5388);
            typedef_declaration_element_wrapper651=typedef_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_declaration_element_wrapper651.getTree());

            // Objcm.g:1000:61: ( COMMA typedef_declaration_element_wrapper )*
            loop183:
            do {
                int alt183=2;
                int LA183_0 = input.LA(1);

                if ( (LA183_0==COMMA) ) {
                    alt183=1;
                }


                switch (alt183) {
            	case 1 :
            	    // Objcm.g:1000:62: COMMA typedef_declaration_element_wrapper
            	    {
            	    COMMA652=(Token)match(input,COMMA,FOLLOW_COMMA_in_typedef_declaration5392); 
            	    COMMA652_tree = 
            	    (Object)adaptor.create(COMMA652)
            	    ;
            	    adaptor.addChild(root_0, COMMA652_tree);


            	    pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5395);
            	    typedef_declaration_element_wrapper653=typedef_declaration_element_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_declaration_element_wrapper653.getTree());

            	    }
            	    break;

            	default :
            	    break loop183;
                }
            } while (true);


            R_FBR654=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_declaration5399); 
            R_FBR654_tree = 
            (Object)adaptor.create(R_FBR654)
            ;
            adaptor.addChild(root_0, R_FBR654_tree);


            // Objcm.g:1000:114: ( name )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==ID||LA184_0==183) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // Objcm.g:1000:114: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_declaration5402);
                    name655=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name655.getTree());

                    }
                    break;

            }


            SEMICOLON656=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_declaration5405); 
            SEMICOLON656_tree = 
            (Object)adaptor.create(SEMICOLON656)
            ;
            adaptor.addChild(root_0, SEMICOLON656_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class typedef_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element_wrapper"
    // Objcm.g:1002:1: typedef_declaration_element_wrapper : typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) ;
    public final ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_wrapper_return retval = new ObjcmParser.typedef_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_element_return typedef_declaration_element657 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration_element=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration_element");
        try {
            // Objcm.g:1003:2: ( typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) )
            // Objcm.g:1003:4: typedef_declaration_element
            {
            pushFollow(FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5415);
            typedef_declaration_element657=typedef_declaration_element();

            state._fsp--;

            stream_typedef_declaration_element.add(typedef_declaration_element657.getTree());

            // AST REWRITE
            // elements: typedef_declaration_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1003:32: -> ^( TYPEDEF_ELEMENT typedef_declaration_element )
            {
                // Objcm.g:1003:35: ^( TYPEDEF_ELEMENT typedef_declaration_element )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_ELEMENT, "TYPEDEF_ELEMENT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration_element.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element_wrapper"


    public static class typedef_declaration_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element"
    // Objcm.g:1006:1: typedef_declaration_element : ID ( L_EQ ( ID | NUMBER ) )? ;
    public final ObjcmParser.typedef_declaration_element_return typedef_declaration_element() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_return retval = new ObjcmParser.typedef_declaration_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID658=null;
        Token L_EQ659=null;
        Token set660=null;

        Object ID658_tree=null;
        Object L_EQ659_tree=null;
        Object set660_tree=null;

        try {
            // Objcm.g:1007:2: ( ID ( L_EQ ( ID | NUMBER ) )? )
            // Objcm.g:1007:4: ID ( L_EQ ( ID | NUMBER ) )?
            {
            root_0 = (Object)adaptor.nil();


            ID658=(Token)match(input,ID,FOLLOW_ID_in_typedef_declaration_element5434); 
            ID658_tree = 
            (Object)adaptor.create(ID658)
            ;
            adaptor.addChild(root_0, ID658_tree);


            // Objcm.g:1007:8: ( L_EQ ( ID | NUMBER ) )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==L_EQ) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // Objcm.g:1007:9: L_EQ ( ID | NUMBER )
                    {
                    L_EQ659=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_typedef_declaration_element5438); 
                    L_EQ659_tree = 
                    (Object)adaptor.create(L_EQ659)
                    ;
                    adaptor.addChild(root_0, L_EQ659_tree);


                    set660=(Token)input.LT(1);

                    if ( input.LA(1)==ID||input.LA(1)==NUMBER ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set660)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // Objcm.g:1014:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_wrapper_return retval = new ObjcmParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_return field_declaration661 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // Objcm.g:1015:2: ( field_declaration -> ^( FIELD field_declaration ) )
            // Objcm.g:1015:4: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper5462);
            field_declaration661=field_declaration();

            state._fsp--;

            stream_field_declaration.add(field_declaration661.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1015:22: -> ^( FIELD field_declaration )
            {
                // Objcm.g:1015:25: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // Objcm.g:1017:1: field_declaration : field_modifier_wrapper field_type name field_declaration_end ;
    public final ObjcmParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcmParser.field_declaration_return retval = new ObjcmParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper662 =null;

        ObjcmParser.field_type_return field_type663 =null;

        ObjcmParser.name_return name664 =null;

        ObjcmParser.field_declaration_end_return field_declaration_end665 =null;



        try {
            // Objcm.g:1018:2: ( field_modifier_wrapper field_type name field_declaration_end )
            // Objcm.g:1018:4: field_modifier_wrapper field_type name field_declaration_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_modifier_wrapper_in_field_declaration5479);
            field_modifier_wrapper662=field_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, field_modifier_wrapper662.getTree());

            pushFollow(FOLLOW_field_type_in_field_declaration5482);
            field_type663=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type663.getTree());

            pushFollow(FOLLOW_name_in_field_declaration5484);
            name664=name();

            state._fsp--;

            adaptor.addChild(root_0, name664.getTree());

            pushFollow(FOLLOW_field_declaration_end_in_field_declaration5486);
            field_declaration_end665=field_declaration_end();

            state._fsp--;

            adaptor.addChild(root_0, field_declaration_end665.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end"
    // Objcm.g:1020:1: field_declaration_end : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_declaration_end_return field_declaration_end() throws RecognitionException {
        ObjcmParser.field_declaration_end_return retval = new ObjcmParser.field_declaration_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON667=null;
        ObjcmParser.value_set_return value_set666 =null;


        Object SEMICOLON667_tree=null;

        try {
            // Objcm.g:1021:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:1021:5: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1021:5: ( value_set )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==L_EQ) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // Objcm.g:1021:5: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_declaration_end5497);
                    value_set666=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set666.getTree());

                    }
                    break;

            }


            SEMICOLON667=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration_end5500); 
            SEMICOLON667_tree = 
            (Object)adaptor.create(SEMICOLON667)
            ;
            adaptor.addChild(root_0, SEMICOLON667_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end"


    public static class type_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start_wrapper"
    // Objcm.g:1023:1: type_start_wrapper : type_start -> ^( M_TYPE_START type_start ) ;
    public final ObjcmParser.type_start_wrapper_return type_start_wrapper() throws RecognitionException {
        ObjcmParser.type_start_wrapper_return retval = new ObjcmParser.type_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_start_return type_start668 =null;


        RewriteRuleSubtreeStream stream_type_start=new RewriteRuleSubtreeStream(adaptor,"rule type_start");
        try {
            // Objcm.g:1024:2: ( type_start -> ^( M_TYPE_START type_start ) )
            // Objcm.g:1024:4: type_start
            {
            pushFollow(FOLLOW_type_start_in_type_start_wrapper5510);
            type_start668=type_start();

            state._fsp--;

            stream_type_start.add(type_start668.getTree());

            // AST REWRITE
            // elements: type_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1024:15: -> ^( M_TYPE_START type_start )
            {
                // Objcm.g:1024:18: ^( M_TYPE_START type_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(M_TYPE_START, "M_TYPE_START")
                , root_1);

                adaptor.addChild(root_1, stream_type_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start_wrapper"


    public static class type_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start"
    // Objcm.g:1026:1: type_start : ( CONST_PREFIX )? field_type name type_end ;
    public final ObjcmParser.type_start_return type_start() throws RecognitionException {
        ObjcmParser.type_start_return retval = new ObjcmParser.type_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX669=null;
        ObjcmParser.field_type_return field_type670 =null;

        ObjcmParser.name_return name671 =null;

        ObjcmParser.type_end_return type_end672 =null;


        Object CONST_PREFIX669_tree=null;

        try {
            // Objcm.g:1027:2: ( ( CONST_PREFIX )? field_type name type_end )
            // Objcm.g:1027:4: ( CONST_PREFIX )? field_type name type_end
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1027:4: ( CONST_PREFIX )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==CONST_PREFIX) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // Objcm.g:1027:4: CONST_PREFIX
                    {
                    CONST_PREFIX669=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_start5527); 
                    CONST_PREFIX669_tree = 
                    (Object)adaptor.create(CONST_PREFIX669)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX669_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_type_start5530);
            field_type670=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type670.getTree());

            pushFollow(FOLLOW_name_in_type_start5532);
            name671=name();

            state._fsp--;

            adaptor.addChild(root_0, name671.getTree());

            pushFollow(FOLLOW_type_end_in_type_start5534);
            type_end672=type_end();

            state._fsp--;

            adaptor.addChild(root_0, type_end672.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start"


    public static class type_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_end"
    // Objcm.g:1029:1: type_end : ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) );
    public final ObjcmParser.type_end_return type_end() throws RecognitionException {
        ObjcmParser.type_end_return retval = new ObjcmParser.type_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration4_return field_declaration4673 =null;

        ObjcmParser.method_declaration4_return method_declaration4674 =null;


        RewriteRuleSubtreeStream stream_field_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration4");
        RewriteRuleSubtreeStream stream_method_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration4");
        try {
            // Objcm.g:1029:9: ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) )
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==L_EQ||LA188_0==SEMICOLON) ) {
                alt188=1;
            }
            else if ( (LA188_0==L_BR) ) {
                alt188=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;

            }
            switch (alt188) {
                case 1 :
                    // Objcm.g:1029:11: field_declaration4
                    {
                    pushFollow(FOLLOW_field_declaration4_in_type_end5542);
                    field_declaration4673=field_declaration4();

                    state._fsp--;

                    stream_field_declaration4.add(field_declaration4673.getTree());

                    // AST REWRITE
                    // elements: field_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1029:30: -> ^( FIELD field_declaration4 )
                    {
                        // Objcm.g:1029:33: ^( FIELD field_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD, "FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_field_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:1030:4: method_declaration4
                    {
                    pushFollow(FOLLOW_method_declaration4_in_type_end5555);
                    method_declaration4674=method_declaration4();

                    state._fsp--;

                    stream_method_declaration4.add(method_declaration4674.getTree());

                    // AST REWRITE
                    // elements: method_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1030:24: -> ^( STATIC_METHOD method_declaration4 )
                    {
                        // Objcm.g:1030:27: ^( STATIC_METHOD method_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_end"


    public static class field_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration4"
    // Objcm.g:1033:1: field_declaration4 : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_declaration4_return field_declaration4() throws RecognitionException {
        ObjcmParser.field_declaration4_return retval = new ObjcmParser.field_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON676=null;
        ObjcmParser.value_set_return value_set675 =null;


        Object SEMICOLON676_tree=null;

        try {
            // Objcm.g:1034:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:1034:5: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1034:5: ( value_set )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==L_EQ) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // Objcm.g:1034:5: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_declaration45577);
                    value_set675=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set675.getTree());

                    }
                    break;

            }


            SEMICOLON676=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration45580); 
            SEMICOLON676_tree = 
            (Object)adaptor.create(SEMICOLON676)
            ;
            adaptor.addChild(root_0, SEMICOLON676_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration4"


    public static class method_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration4"
    // Objcm.g:1037:1: method_declaration4 : method_params2 block_wrapper ;
    public final ObjcmParser.method_declaration4_return method_declaration4() throws RecognitionException {
        ObjcmParser.method_declaration4_return retval = new ObjcmParser.method_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2677 =null;

        ObjcmParser.block_wrapper_return block_wrapper678 =null;



        try {
            // Objcm.g:1038:2: ( method_params2 block_wrapper )
            // Objcm.g:1038:5: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_declaration45593);
            method_params2677=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2677.getTree());

            pushFollow(FOLLOW_block_wrapper_in_method_declaration45598);
            block_wrapper678=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper678.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration4"


    public static class field_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier_wrapper"
    // Objcm.g:1042:1: field_modifier_wrapper : field_modifier -> ^( MODIFIER field_modifier ) ;
    public final ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper() throws RecognitionException {
        ObjcmParser.field_modifier_wrapper_return retval = new ObjcmParser.field_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_return field_modifier679 =null;


        RewriteRuleSubtreeStream stream_field_modifier=new RewriteRuleSubtreeStream(adaptor,"rule field_modifier");
        try {
            // Objcm.g:1043:2: ( field_modifier -> ^( MODIFIER field_modifier ) )
            // Objcm.g:1043:4: field_modifier
            {
            pushFollow(FOLLOW_field_modifier_in_field_modifier_wrapper5610);
            field_modifier679=field_modifier();

            state._fsp--;

            stream_field_modifier.add(field_modifier679.getTree());

            // AST REWRITE
            // elements: field_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1043:19: -> ^( MODIFIER field_modifier )
            {
                // Objcm.g:1043:22: ^( MODIFIER field_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_field_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier_wrapper"


    public static class field_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier"
    // Objcm.g:1045:1: field_modifier : 'extern' ;
    public final ObjcmParser.field_modifier_return field_modifier() throws RecognitionException {
        ObjcmParser.field_modifier_return retval = new ObjcmParser.field_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal680=null;

        Object string_literal680_tree=null;

        try {
            // Objcm.g:1046:2: ( 'extern' )
            // Objcm.g:1046:4: 'extern'
            {
            root_0 = (Object)adaptor.nil();


            string_literal680=(Token)match(input,180,FOLLOW_180_in_field_modifier5628); 
            string_literal680_tree = 
            (Object)adaptor.create(string_literal680)
            ;
            adaptor.addChild(root_0, string_literal680_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier"


    public static class field_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type"
    // Objcm.g:1049:1: field_type : field_type_internal -> ^( TYPE field_type_internal ) ;
    public final ObjcmParser.field_type_return field_type() throws RecognitionException {
        ObjcmParser.field_type_return retval = new ObjcmParser.field_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_internal_return field_type_internal681 =null;


        RewriteRuleSubtreeStream stream_field_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_type_internal");
        try {
            // Objcm.g:1050:2: ( field_type_internal -> ^( TYPE field_type_internal ) )
            // Objcm.g:1050:5: field_type_internal
            {
            pushFollow(FOLLOW_field_type_internal_in_field_type5640);
            field_type_internal681=field_type_internal();

            state._fsp--;

            stream_field_type_internal.add(field_type_internal681.getTree());

            // AST REWRITE
            // elements: field_type_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1050:25: -> ^( TYPE field_type_internal )
            {
                // Objcm.g:1050:28: ^( TYPE field_type_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE, "TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type"


    public static class field_type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_internal"
    // Objcm.g:1052:1: field_type_internal : type_internal ( generic )? ( ASTERISK )* ;
    public final ObjcmParser.field_type_internal_return field_type_internal() throws RecognitionException {
        ObjcmParser.field_type_internal_return retval = new ObjcmParser.field_type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK684=null;
        ObjcmParser.type_internal_return type_internal682 =null;

        ObjcmParser.generic_return generic683 =null;


        Object ASTERISK684_tree=null;

        try {
            // Objcm.g:1053:2: ( type_internal ( generic )? ( ASTERISK )* )
            // Objcm.g:1053:4: type_internal ( generic )? ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_field_type_internal5659);
            type_internal682=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal682.getTree());

            // Objcm.g:1053:19: ( generic )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==L_LESS) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // Objcm.g:1053:19: generic
                    {
                    pushFollow(FOLLOW_generic_in_field_type_internal5662);
                    generic683=generic();

                    state._fsp--;

                    adaptor.addChild(root_0, generic683.getTree());

                    }
                    break;

            }


            // Objcm.g:1053:28: ( ASTERISK )*
            loop191:
            do {
                int alt191=2;
                int LA191_0 = input.LA(1);

                if ( (LA191_0==ASTERISK) ) {
                    alt191=1;
                }


                switch (alt191) {
            	case 1 :
            	    // Objcm.g:1053:28: ASTERISK
            	    {
            	    ASTERISK684=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_field_type_internal5665); 
            	    ASTERISK684_tree = 
            	    (Object)adaptor.create(ASTERISK684)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK684_tree);


            	    }
            	    break;

            	default :
            	    break loop191;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_internal"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // Objcm.g:1059:1: name : name_internal -> ^( NAME name_internal ) ;
    public final ObjcmParser.name_return name() throws RecognitionException {
        ObjcmParser.name_return retval = new ObjcmParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal685 =null;


        RewriteRuleSubtreeStream stream_name_internal=new RewriteRuleSubtreeStream(adaptor,"rule name_internal");
        try {
            // Objcm.g:1060:2: ( name_internal -> ^( NAME name_internal ) )
            // Objcm.g:1060:4: name_internal
            {
            pushFollow(FOLLOW_name_internal_in_name5679);
            name_internal685=name_internal();

            state._fsp--;

            stream_name_internal.add(name_internal685.getTree());

            // AST REWRITE
            // elements: name_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1060:18: -> ^( NAME name_internal )
            {
                // Objcm.g:1060:21: ^( NAME name_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, stream_name_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_internal"
    // Objcm.g:1063:1: name_internal : ( ID | 'in' );
    public final ObjcmParser.name_internal_return name_internal() throws RecognitionException {
        ObjcmParser.name_internal_return retval = new ObjcmParser.name_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set686=null;

        Object set686_tree=null;

        try {
            // Objcm.g:1064:2: ( ID | 'in' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set686=(Token)input.LT(1);

            if ( input.LA(1)==ID||input.LA(1)==183 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set686)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_internal"


    public static class value_set_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value_set"
    // Objcm.g:1068:1: value_set : L_EQ value -> ^( VALUE value ) ;
    public final ObjcmParser.value_set_return value_set() throws RecognitionException {
        ObjcmParser.value_set_return retval = new ObjcmParser.value_set_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_EQ687=null;
        ObjcmParser.value_return value688 =null;


        Object L_EQ687_tree=null;
        RewriteRuleTokenStream stream_L_EQ=new RewriteRuleTokenStream(adaptor,"token L_EQ");
        RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
        try {
            // Objcm.g:1069:2: ( L_EQ value -> ^( VALUE value ) )
            // Objcm.g:1069:4: L_EQ value
            {
            L_EQ687=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_value_set5719);  
            stream_L_EQ.add(L_EQ687);


            pushFollow(FOLLOW_value_in_value_set5722);
            value688=value();

            state._fsp--;

            stream_value.add(value688.getTree());

            // AST REWRITE
            // elements: value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1069:16: -> ^( VALUE value )
            {
                // Objcm.g:1069:19: ^( VALUE value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VALUE, "VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "value_set"


    public static class value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value"
    // Objcm.g:1071:1: value : ( ID | string_value | null_stmt | array | NUMBER | struct_init2 );
    public final ObjcmParser.value_return value() throws RecognitionException {
        ObjcmParser.value_return retval = new ObjcmParser.value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID689=null;
        Token NUMBER693=null;
        ObjcmParser.string_value_return string_value690 =null;

        ObjcmParser.null_stmt_return null_stmt691 =null;

        ObjcmParser.array_return array692 =null;

        ObjcmParser.struct_init2_return struct_init2694 =null;


        Object ID689_tree=null;
        Object NUMBER693_tree=null;

        try {
            // Objcm.g:1071:7: ( ID | string_value | null_stmt | array | NUMBER | struct_init2 )
            int alt192=6;
            alt192 = dfa192.predict(input);
            switch (alt192) {
                case 1 :
                    // Objcm.g:1071:9: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID689=(Token)match(input,ID,FOLLOW_ID_in_value5738); 
                    ID689_tree = 
                    (Object)adaptor.create(ID689)
                    ;
                    adaptor.addChild(root_0, ID689_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:1071:14: string_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_string_value_in_value5742);
                    string_value690=string_value();

                    state._fsp--;

                    adaptor.addChild(root_0, string_value690.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:1071:29: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_value5746);
                    null_stmt691=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt691.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:1071:41: array
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_in_value5750);
                    array692=array();

                    state._fsp--;

                    adaptor.addChild(root_0, array692.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:1071:49: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER693=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_value5754); 
                    NUMBER693_tree = 
                    (Object)adaptor.create(NUMBER693)
                    ;
                    adaptor.addChild(root_0, NUMBER693_tree);


                    }
                    break;
                case 6 :
                    // Objcm.g:1071:58: struct_init2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init2_in_value5758);
                    struct_init2694=struct_init2();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init2694.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "value"


    public static class string_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_value"
    // Objcm.g:1073:1: string_value : STRING_LITERAL ;
    public final ObjcmParser.string_value_return string_value() throws RecognitionException {
        ObjcmParser.string_value_return retval = new ObjcmParser.string_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL695=null;

        Object STRING_LITERAL695_tree=null;

        try {
            // Objcm.g:1074:2: ( STRING_LITERAL )
            // Objcm.g:1074:4: STRING_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL695=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string_value5768); 
            STRING_LITERAL695_tree = 
            (Object)adaptor.create(STRING_LITERAL695)
            ;
            adaptor.addChild(root_0, STRING_LITERAL695_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_value"


    public static class null_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_stmt"
    // Objcm.g:1076:1: null_stmt : ( 'nil' | 'Nil' );
    public final ObjcmParser.null_stmt_return null_stmt() throws RecognitionException {
        ObjcmParser.null_stmt_return retval = new ObjcmParser.null_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set696=null;

        Object set696_tree=null;

        try {
            // Objcm.g:1076:11: ( 'nil' | 'Nil' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set696=(Token)input.LT(1);

            if ( input.LA(1)==172||input.LA(1)==185 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set696)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_stmt"


    public static class array_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array"
    // Objcm.g:1078:1: array : L_FBR value ( COMMA value )* R_FBR ;
    public final ObjcmParser.array_return array() throws RecognitionException {
        ObjcmParser.array_return retval = new ObjcmParser.array_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR697=null;
        Token COMMA699=null;
        Token R_FBR701=null;
        ObjcmParser.value_return value698 =null;

        ObjcmParser.value_return value700 =null;


        Object L_FBR697_tree=null;
        Object COMMA699_tree=null;
        Object R_FBR701_tree=null;

        try {
            // Objcm.g:1078:7: ( L_FBR value ( COMMA value )* R_FBR )
            // Objcm.g:1078:9: L_FBR value ( COMMA value )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR697=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array5789); 
            L_FBR697_tree = 
            (Object)adaptor.create(L_FBR697)
            ;
            adaptor.addChild(root_0, L_FBR697_tree);


            pushFollow(FOLLOW_value_in_array5792);
            value698=value();

            state._fsp--;

            adaptor.addChild(root_0, value698.getTree());

            // Objcm.g:1078:23: ( COMMA value )*
            loop193:
            do {
                int alt193=2;
                int LA193_0 = input.LA(1);

                if ( (LA193_0==COMMA) ) {
                    alt193=1;
                }


                switch (alt193) {
            	case 1 :
            	    // Objcm.g:1078:24: COMMA value
            	    {
            	    COMMA699=(Token)match(input,COMMA,FOLLOW_COMMA_in_array5796); 
            	    COMMA699_tree = 
            	    (Object)adaptor.create(COMMA699)
            	    ;
            	    adaptor.addChild(root_0, COMMA699_tree);


            	    pushFollow(FOLLOW_value_in_array5799);
            	    value700=value();

            	    state._fsp--;

            	    adaptor.addChild(root_0, value700.getTree());

            	    }
            	    break;

            	default :
            	    break loop193;
                }
            } while (true);


            R_FBR701=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array5803); 
            R_FBR701_tree = 
            (Object)adaptor.create(R_FBR701)
            ;
            adaptor.addChild(root_0, R_FBR701_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array"

    // Delegated rules


    protected DFA28 dfa28 = new DFA28(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA192 dfa192 = new DFA192(this);
    static final String DFA28_eotS =
        "\u0116\uffff";
    static final String DFA28_eofS =
        "\u0116\uffff";
    static final String DFA28_minS =
        "\1\5\15\uffff\1\5\27\uffff\1\5\1\uffff\1\5\1\uffff\2\5\2\64\2\uffff"+
        "\1\5\12\uffff\2\5\6\uffff\2\5\2\64\15\uffff\2\5\u00c0\uffff";
    static final String DFA28_maxS =
        "\1\u00bf\15\uffff\1\u00b7\27\uffff\1\u00b7\1\uffff\1\u00b7\1\uffff"+
        "\2\u00be\2\u00b7\2\uffff\1\u00be\12\uffff\2\u00be\6\uffff\2\u00be"+
        "\2\u00b7\15\uffff\2\u00be\u00c0\uffff";
    static final String DFA28_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\22\uffff\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\uffff\1\16\1\17\1\20\1\21\1\22\32\uffff\1\6\30\uffff"+
        "\1\6\1\uffff\25\6\1\uffff\27\6\22\uffff\24\6\11\uffff\1\6\11\uffff"+
        "\1\6\1\uffff\76\6\11\uffff\1\6\11\uffff\1\6\1\uffff";
    static final String DFA28_specialS =
        "\u0116\uffff}>";
    static final String[] DFA28_transitionS = {
            "\1\6\2\uffff\1\37\11\uffff\1\5\6\uffff\1\42\32\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\5\uffff\1\6\4\uffff\1\6\1\uffff\1\6\4\uffff"+
            "\1\6\5\uffff\1\6\1\uffff\1\6\3\uffff\1\6\16\uffff\1\6\16\uffff"+
            "\1\45\2\uffff\1\37\1\6\2\uffff\1\3\2\uffff\3\6\1\uffff\1\41"+
            "\16\uffff\1\44\7\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1"+
            "\2\1\1\1\6\1\uffff\1\43\3\uffff\1\4\1\32\1\uffff\1\35\1\31\1"+
            "\6\1\uffff\1\6\1\34\1\33\2\uffff\1\16\1\36",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\44\56\uffff\1\46\143\uffff\1\44\36\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\60\12\uffff\1\100\1\74\4\uffff\1\54\35\uffff\1\6\7\uffff"+
            "\2\6\1\73\1\52\1\100\2\73\1\6\1\uffff\1\53\1\6\1\73\3\6\1\73"+
            "\3\6\1\73\1\6\1\uffff\1\6\1\73\1\6\1\100\1\73\1\6\1\73\3\6\1"+
            "\73\1\uffff\1\6\1\73\33\uffff\1\100\34\uffff\1\6\4\uffff\1\55"+
            "\31\uffff\1\6",
            "",
            "\1\100\12\uffff\1\131\1\125\4\uffff\1\105\35\uffff\1\100\7"+
            "\uffff\2\100\1\124\1\103\1\100\2\124\1\100\1\uffff\1\104\1\100"+
            "\1\124\3\100\1\124\3\100\1\124\1\100\1\uffff\1\100\1\124\2\100"+
            "\1\124\1\100\1\124\3\100\1\124\1\uffff\1\100\1\124\33\uffff"+
            "\1\131\34\uffff\1\100\4\uffff\1\106\31\uffff\1\100",
            "",
            "\1\134\56\uffff\1\144\7\uffff\1\135\2\uffff\1\133\5\uffff\1"+
            "\145\4\uffff\1\136\1\uffff\1\142\4\uffff\1\137\5\uffff\1\136"+
            "\1\uffff\1\142\3\uffff\1\140\16\uffff\1\146\11\uffff\1\156\10"+
            "\uffff\1\141\5\uffff\1\147\1\150\1\151\20\uffff\1\44\7\uffff"+
            "\1\154\5\uffff\1\155\1\uffff\1\153\3\uffff\1\152\12\uffff\1"+
            "\157\1\uffff\1\152\4\uffff\1\143",
            "\1\163\56\uffff\1\173\7\uffff\1\164\2\uffff\1\162\5\uffff\1"+
            "\174\4\uffff\1\165\1\uffff\1\171\4\uffff\1\166\5\uffff\1\165"+
            "\1\uffff\1\171\3\uffff\1\167\16\uffff\1\175\13\uffff\1\161\6"+
            "\uffff\1\170\5\uffff\1\176\1\177\1\u0080\30\uffff\1\u0083\5"+
            "\uffff\1\u0084\1\uffff\1\u0082\3\uffff\1\u0081\12\uffff\1\173"+
            "\1\uffff\1\u0081\4\uffff\1\172",
            "\1\u0085\u0082\uffff\1\u0085",
            "\1\u0086\u0082\uffff\1\u0086",
            "",
            "",
            "\1\131\56\uffff\1\131\7\uffff\1\131\2\uffff\1\u0087\5\uffff"+
            "\1\131\4\uffff\1\131\1\uffff\1\131\4\uffff\1\131\5\uffff\1\131"+
            "\1\uffff\1\131\3\uffff\1\131\16\uffff\1\131\22\uffff\1\131\5"+
            "\uffff\3\131\30\uffff\1\131\5\uffff\1\131\1\uffff\1\131\3\uffff"+
            "\1\131\12\uffff\1\131\1\uffff\1\131\4\uffff\1\131",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u009b\56\uffff\1\u00a3\7\uffff\1\u009c\2\uffff\1\u009a\4"+
            "\uffff\1\u00ad\1\u00a4\4\uffff\1\u009d\1\uffff\1\u00a1\4\uffff"+
            "\1\u009e\5\uffff\1\u009d\1\uffff\1\u00a1\3\uffff\1\u009f\16"+
            "\uffff\1\u00a5\22\uffff\1\u00a0\5\uffff\1\u00a6\1\u00a7\1\u00a8"+
            "\30\uffff\1\u00ab\5\uffff\1\u00ac\1\uffff\1\u00aa\3\uffff\1"+
            "\u00a9\12\uffff\1\u00a3\1\uffff\1\u00a9\4\uffff\1\u00a2",
            "\1\131\56\uffff\1\u00b7\7\uffff\1\131\2\uffff\1\131\5\uffff"+
            "\1\131\4\uffff\1\131\1\uffff\1\131\4\uffff\1\131\5\uffff\1\131"+
            "\1\uffff\1\131\3\uffff\1\131\16\uffff\1\131\22\uffff\1\131\5"+
            "\uffff\3\131\20\uffff\1\44\7\uffff\1\131\5\uffff\1\131\1\uffff"+
            "\1\131\3\uffff\1\131\12\uffff\1\u00c1\1\uffff\1\131\4\uffff"+
            "\1\131",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c4\56\uffff\1\u00cc\7\uffff\1\u00c5\2\uffff\1\u00c3\5"+
            "\uffff\1\u00cd\4\uffff\1\u00c6\1\uffff\1\u00ca\4\uffff\1\u00c7"+
            "\5\uffff\1\u00c6\1\uffff\1\u00ca\3\uffff\1\u00c8\16\uffff\1"+
            "\u00ce\11\uffff\1\u00d6\10\uffff\1\u00c9\5\uffff\1\u00cf\1\u00d0"+
            "\1\u00d1\30\uffff\1\u00d4\5\uffff\1\u00d5\1\uffff\1\u00d3\3"+
            "\uffff\1\u00d2\12\uffff\1\u00cc\1\uffff\1\u00d2\4\uffff\1\u00cb",
            "\1\u00d8\56\uffff\1\u00e0\7\uffff\1\u00d9\2\uffff\1\u00d7\5"+
            "\uffff\1\u00e1\4\uffff\1\u00da\1\uffff\1\u00de\4\uffff\1\u00db"+
            "\5\uffff\1\u00da\1\uffff\1\u00de\3\uffff\1\u00dc\16\uffff\1"+
            "\u00e2\13\uffff\1\u00ea\6\uffff\1\u00dd\5\uffff\1\u00e3\1\u00e4"+
            "\1\u00e5\30\uffff\1\u00e8\5\uffff\1\u00e9\1\uffff\1\u00e7\3"+
            "\uffff\1\u00e6\12\uffff\1\u00e0\1\uffff\1\u00e6\4\uffff\1\u00df",
            "\1\u00eb\u0082\uffff\1\u00eb",
            "\1\u00ec\u0082\uffff\1\u00ec",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ee\56\uffff\1\u00f6\7\uffff\1\u00ef\2\uffff\1\u00ed\4"+
            "\uffff\1\u0100\1\u00f7\4\uffff\1\u00f0\1\uffff\1\u00f4\4\uffff"+
            "\1\u00f1\5\uffff\1\u00f0\1\uffff\1\u00f4\3\uffff\1\u00f2\16"+
            "\uffff\1\u00f8\22\uffff\1\u00f3\5\uffff\1\u00f9\1\u00fa\1\u00fb"+
            "\30\uffff\1\u00fe\5\uffff\1\u00ff\1\uffff\1\u00fd\3\uffff\1"+
            "\u00fc\12\uffff\1\u00f6\1\uffff\1\u00fc\4\uffff\1\u00f5",
            "\1\131\56\uffff\1\u010a\7\uffff\1\131\2\uffff\1\131\5\uffff"+
            "\1\131\4\uffff\1\131\1\uffff\1\131\4\uffff\1\131\5\uffff\1\131"+
            "\1\uffff\1\131\3\uffff\1\131\16\uffff\1\131\22\uffff\1\131\5"+
            "\uffff\3\131\20\uffff\1\44\7\uffff\1\131\5\uffff\1\131\1\uffff"+
            "\1\131\3\uffff\1\131\12\uffff\1\u0114\1\uffff\1\131\4\uffff"+
            "\1\131",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_specialS);
    static final short[][] DFA28_transition;

    static {
        int numStates = DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_transitionS[i]);
        }
    }

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;
        }
        public String getDescription() {
            return "270:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON );";
        }
    }
    static final String DFA48_eotS =
        "\u019a\uffff";
    static final String DFA48_eofS =
        "\u019a\uffff";
    static final String DFA48_minS =
        "\1\64\1\21\4\uffff\1\26\2\5\16\uffff\2\5\16\uffff\2\5\1\64\1\5\20"+
        "\uffff\1\5\10\64\1\5\1\64\5\5\3\77\u014c\uffff";
    static final String DFA48_maxS =
        "\1\u00b7\1\u00be\4\uffff\3\u00be\16\uffff\2\u00be\16\uffff\1\u00be"+
        "\1\u009d\1\u00b7\1\170\20\uffff\10\u00be\1\u00b7\1\u009d\1\u00b7"+
        "\5\166\3\77\u014c\uffff";
    static final String DFA48_acceptS =
        "\2\uffff\1\2\1\uffff\1\3\1\1\111\uffff\23\1\1\uffff\1\1\10\uffff"+
        "\2\1\1\uffff\1\1\7\uffff\3\1\10\uffff\1\1\12\uffff\4\1\20\uffff"+
        "\4\1\17\uffff\u0093\1\1\uffff\22\1\1\uffff\16\1\1\uffff\16\1\1\uffff"+
        "\16\1\1\uffff\16\1\1\uffff\3\1";
    static final String DFA48_specialS =
        "\u019a\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\2\106\uffff\1\4\34\uffff\1\2\36\uffff\1\1",
            "\1\2\4\uffff\1\2\35\uffff\1\5\11\uffff\1\2\1\10\1\uffff\2\2"+
            "\2\uffff\1\7\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\14\uffff\1"+
            "\5\16\uffff\1\2\11\uffff\3\5\25\uffff\1\2\2\uffff\1\5\5\uffff"+
            "\1\5\1\uffff\1\5\3\uffff\1\5\12\uffff\1\6\1\uffff\1\5\4\uffff"+
            "\1\5",
            "",
            "",
            "",
            "",
            "\1\5\35\uffff\1\2\12\uffff\1\27\5\uffff\1\30\2\uffff\1\5\43"+
            "\uffff\1\2\11\uffff\1\5\16\uffff\3\2\25\uffff\1\5\2\uffff\1"+
            "\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\2\56\uffff\1\50\7\uffff\1\2\2\uffff\1\47\5\uffff\1\51\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\13\uffff\1\2\6\uffff\1\2\5\uffff\1\52"+
            "\2\2\30\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\50\1\uffff\1\2\4\uffff\1\2",
            "\1\74\56\uffff\1\104\7\uffff\1\75\2\uffff\1\73\5\uffff\1\105"+
            "\4\uffff\1\76\1\uffff\1\102\4\uffff\1\77\5\uffff\1\76\1\uffff"+
            "\1\102\3\uffff\1\100\16\uffff\1\106\11\uffff\1\2\10\uffff\1"+
            "\101\5\uffff\1\107\1\110\1\111\30\uffff\1\114\5\uffff\1\115"+
            "\1\uffff\1\113\3\uffff\1\112\12\uffff\1\104\1\uffff\1\112\4"+
            "\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\120\56\uffff\1\130\7\uffff\1\121\2\uffff\1\117\5\uffff\1"+
            "\131\4\uffff\1\122\1\uffff\1\126\4\uffff\1\123\5\uffff\1\122"+
            "\1\uffff\1\126\3\uffff\1\124\16\uffff\1\132\11\uffff\1\5\10"+
            "\uffff\1\125\5\uffff\1\133\1\134\1\135\30\uffff\1\140\5\uffff"+
            "\1\141\1\uffff\1\137\3\uffff\1\136\12\uffff\1\130\1\uffff\1"+
            "\136\4\uffff\1\127",
            "\1\5\56\uffff\1\154\7\uffff\1\5\2\uffff\1\143\5\uffff\1\155"+
            "\4\uffff\1\5\1\uffff\1\5\4\uffff\1\5\5\uffff\1\5\1\uffff\1\5"+
            "\3\uffff\1\5\16\uffff\1\5\13\uffff\1\5\6\uffff\1\5\5\uffff\1"+
            "\157\2\5\30\uffff\1\5\5\uffff\1\5\1\uffff\1\5\3\uffff\1\5\12"+
            "\uffff\1\154\1\uffff\1\5\4\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\14\uffff\1\167\41\uffff\1\171\7\uffff\1\2\2\uffff\1\2"+
            "\5\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2"+
            "\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3"+
            "\2\20\uffff\1\u0082\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\170",
            "\1\2\20\uffff\1\u008f\35\uffff\1\5\7\uffff\3\2\1\u008d\4\2"+
            "\1\uffff\1\u008e\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff\1\2"+
            "\44\uffff\1\u0090",
            "\1\u00a2\12\uffff\1\u00a1\5\uffff\1\u00a3\77\uffff\1\u00a4"+
            "\61\uffff\1\u00a2",
            "\1\2\56\uffff\1\5\7\uffff\3\2\1\uffff\4\2\2\uffff\13\2\1\uffff"+
            "\13\2\1\uffff\2\2\30\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00b8\14\uffff\1\u00b4\41\uffff\1\u00b6\7\uffff\1\u00b9"+
            "\2\uffff\1\u00b7\5\uffff\1\u00c1\4\uffff\1\u00ba\1\uffff\1\u00be"+
            "\4\uffff\1\u00bb\5\uffff\1\u00ba\1\uffff\1\u00be\3\uffff\1\u00bc"+
            "\16\uffff\1\u00c2\22\uffff\1\u00bd\5\uffff\1\u00c3\1\u00c4\1"+
            "\u00c5\20\uffff\1\u00bf\7\uffff\1\u00c8\5\uffff\1\u00c9\1\uffff"+
            "\1\u00c7\3\uffff\1\u00c6\12\uffff\1\u00c0\1\uffff\1\u00c6\4"+
            "\uffff\1\u00b5",
            "\1\u00d2\7\uffff\1\u00cb\2\uffff\1\u00ca\5\uffff\1\u00d3\4"+
            "\uffff\1\u00cc\1\uffff\1\u00d0\4\uffff\1\u00cd\5\uffff\1\u00cc"+
            "\1\uffff\1\u00d0\3\uffff\1\u00ce\16\uffff\1\u00d4\22\uffff\1"+
            "\u00cf\5\uffff\1\u00d5\1\u00d6\1\u00d7\30\uffff\1\u00da\5\uffff"+
            "\1\u00db\1\uffff\1\u00d9\3\uffff\1\u00d8\12\uffff\1\u00d2\1"+
            "\uffff\1\u00d8\4\uffff\1\u00d1",
            "\1\u00e2\12\uffff\1\u00e4\5\uffff\1\u00e3\4\uffff\1\u00dc\1"+
            "\uffff\1\u00e0\4\uffff\1\u00dd\5\uffff\1\u00dc\1\uffff\1\u00e0"+
            "\3\uffff\1\u00de\16\uffff\1\u00e5\22\uffff\1\u00df\5\uffff\1"+
            "\u00e6\1\u00e7\1\u00e8\30\uffff\1\u00eb\5\uffff\1\u00ec\1\uffff"+
            "\1\u00ea\3\uffff\1\u00e9\12\uffff\1\u00e2\1\uffff\1\u00e9\4"+
            "\uffff\1\u00e1",
            "\1\u00f2\12\uffff\1\u00f4\5\uffff\1\u00f3\6\uffff\1\u00f0\4"+
            "\uffff\1\u00ed\7\uffff\1\u00f0\3\uffff\1\u00ee\16\uffff\1\u00f5"+
            "\22\uffff\1\u00ef\5\uffff\1\u00f6\1\u00f7\1\u00f8\30\uffff\1"+
            "\u00fb\5\uffff\1\u00fc\1\uffff\1\u00fa\3\uffff\1\u00f9\12\uffff"+
            "\1\u00f2\1\uffff\1\u00f9\4\uffff\1\u00f1",
            "\1\u0101\12\uffff\1\u0103\5\uffff\1\u0102\6\uffff\1\u00ff\14"+
            "\uffff\1\u00ff\3\uffff\1\u00fd\16\uffff\1\u0104\22\uffff\1\u00fe"+
            "\5\uffff\1\u0105\1\u0106\1\u0107\30\uffff\1\u010a\5\uffff\1"+
            "\u010b\1\uffff\1\u0109\3\uffff\1\u0108\12\uffff\1\u0101\1\uffff"+
            "\1\u0108\4\uffff\1\u0100",
            "\1\u010f\12\uffff\1\u0111\5\uffff\1\u0110\6\uffff\1\u010d\14"+
            "\uffff\1\u010d\22\uffff\1\u0112\22\uffff\1\u010c\5\uffff\1\u0113"+
            "\1\u0114\1\u0115\30\uffff\1\u0118\5\uffff\1\u0119\1\uffff\1"+
            "\u0117\3\uffff\1\u0116\12\uffff\1\u010f\1\uffff\1\u0116\4\uffff"+
            "\1\u010e",
            "\1\u011c\12\uffff\1\u011e\5\uffff\1\u011d\6\uffff\1\u011a\14"+
            "\uffff\1\u011a\22\uffff\1\u011f\30\uffff\1\u0120\1\u0121\1\u0122"+
            "\30\uffff\1\u0125\5\uffff\1\u0126\1\uffff\1\u0124\3\uffff\1"+
            "\u0123\12\uffff\1\u011c\1\uffff\1\u0123\4\uffff\1\u011b",
            "\1\u0128\12\uffff\1\u012a\5\uffff\1\u0129\46\uffff\1\u012b"+
            "\30\uffff\1\u012c\1\u012d\1\u012e\30\uffff\1\u0131\5\uffff\1"+
            "\u0132\1\uffff\1\u0130\3\uffff\1\u012f\12\uffff\1\u0128\1\uffff"+
            "\1\u012f\4\uffff\1\u0127",
            "\1\u0133\u0082\uffff\1\u0133",
            "\1\u013a\13\uffff\1\2\4\uffff\1\u0136\45\uffff\1\u013f\1\u0142"+
            "\1\u0145\1\u0134\1\u013a\2\u0145\1\u013e\1\uffff\1\u0135\1\u013c"+
            "\1\u0145\1\u0138\1\u013d\1\u013b\1\u0145\1\u0139\2\u013d\1\u0145"+
            "\1\u013e\1\uffff\1\u0141\1\u0145\1\u0143\1\u013a\1\u0145\1\u013b"+
            "\1\u0145\1\u0139\1\u0144\1\u013c\1\u0145\1\uffff\1\u0140\1\u0145"+
            "\26\uffff\1\u0146\46\uffff\1\u0137",
            "\1\u0149\12\uffff\1\u0148\5\uffff\1\u014a\77\uffff\1\u014b"+
            "\61\uffff\1\u0149",
            "\1\u014d\13\uffff\1\2\52\uffff\1\u0152\1\u0155\1\u0158\1\uffff"+
            "\1\u014d\2\u0158\1\u0151\2\uffff\1\u014f\1\u0158\2\u0150\1\u014e"+
            "\1\u0158\1\u014c\2\u0150\1\u0158\1\u0151\1\uffff\1\u0154\1\u0158"+
            "\1\u0156\1\u014d\1\u0158\1\u014e\1\u0158\1\u014c\1\u0157\1\u014f"+
            "\1\u0158\1\uffff\1\u0153\1\u0158\26\uffff\1\u0159",
            "\1\u015c\13\uffff\1\2\52\uffff\1\u0161\1\u0164\1\u0167\1\uffff"+
            "\1\u015c\2\u0167\1\u0160\2\uffff\1\u015e\1\u0167\2\u015f\1\u015d"+
            "\1\u0167\1\u015b\2\u015f\1\u0167\1\u0160\1\uffff\1\u0163\1\u0167"+
            "\1\u0165\1\u015c\1\u0167\1\u015d\1\u0167\1\u015b\1\u0166\1\u015e"+
            "\1\u0167\1\uffff\1\u0162\1\u0167\26\uffff\1\u0168",
            "\1\u016b\13\uffff\1\2\52\uffff\1\u0170\1\u0173\1\u0176\1\uffff"+
            "\1\u016b\2\u0176\1\u016f\2\uffff\1\u016d\1\u0176\2\u016e\1\u016c"+
            "\1\u0176\1\u016a\2\u016e\1\u0176\1\u016f\1\uffff\1\u0172\1\u0176"+
            "\1\u0174\1\u016b\1\u0176\1\u016c\1\u0176\1\u016a\1\u0175\1\u016d"+
            "\1\u0176\1\uffff\1\u0171\1\u0176\26\uffff\1\u0177",
            "\1\u017a\13\uffff\1\2\52\uffff\1\u017f\1\u0182\1\u0185\1\uffff"+
            "\1\u017a\2\u0185\1\u017e\2\uffff\1\u017c\1\u0185\2\u017d\1\u017b"+
            "\1\u0185\1\u0179\2\u017d\1\u0185\1\u017e\1\uffff\1\u0181\1\u0185"+
            "\1\u0183\1\u017a\1\u0185\1\u017b\1\u0185\1\u0179\1\u0184\1\u017c"+
            "\1\u0185\1\uffff\1\u0180\1\u0185\26\uffff\1\u0186",
            "\1\u0189\13\uffff\1\2\52\uffff\1\u018e\1\u0191\1\u0194\1\uffff"+
            "\1\u0189\2\u0194\1\u018d\2\uffff\1\u018b\1\u0194\2\u018c\1\u018a"+
            "\1\u0194\1\u0188\2\u018c\1\u0194\1\u018d\1\uffff\1\u0190\1\u0194"+
            "\1\u0192\1\u0189\1\u0194\1\u018a\1\u0194\1\u0188\1\u0193\1\u018b"+
            "\1\u0194\1\uffff\1\u018f\1\u0194\26\uffff\1\u0195",
            "\1\u0197",
            "\1\u0198",
            "\1\u0199",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "427:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )";
        }
    }
    static final String DFA56_eotS =
        "\u046c\uffff";
    static final String DFA56_eofS =
        "\u046c\uffff";
    static final String DFA56_minS =
        "\1\64\2\5\1\uffff\2\5\2\64\1\5\6\uffff\2\5\2\64\7\uffff\1\5\10\64"+
        "\1\5\1\64\5\5\3\77\2\5\1\uffff\2\5\10\64\1\5\1\64\5\5\3\77\2\5\5"+
        "\uffff\1\5\10\64\1\5\1\64\5\5\3\77\2\5\10\64\1\5\1\64\5\5\3\77\3"+
        "\5\u03f7\uffff";
    static final String DFA56_maxS =
        "\3\u00b7\1\uffff\2\u00be\3\u00b7\6\uffff\2\u00be\2\u00b7\7\uffff"+
        "\10\u00be\1\u00b7\1\u009d\1\u00b7\5\166\3\77\1\u00b7\1\u009d\1\uffff"+
        "\1\u00b7\10\u00be\1\u00b7\1\u009d\1\u00b7\5\170\3\77\2\u00b7\5\uffff"+
        "\10\u00be\1\u00b7\1\u009d\1\u00b7\5\166\3\77\1\u00b7\10\u00be\1"+
        "\u00b7\1\u009d\1\u00b7\5\170\3\77\3\u00b7\u03f7\uffff";
    static final String DFA56_acceptS =
        "\3\uffff\1\2\5\uffff\1\1\153\uffff\51\1\1\uffff\u00c1\1\7\uffff"+
        "\25\1\1\uffff\2\1\3\uffff\1\1\3\uffff\u00e2\1\4\uffff\2\1\3\uffff"+
        "\2\1\4\uffff\2\1\3\uffff\u00e9\1\7\uffff\u00e2\1\4\uffff\1\1\3\uffff"+
        "\2\1\4\uffff\2\1\3\uffff\2\1\4\uffff\2\1\3\uffff";
    static final String DFA56_specialS =
        "\u046c\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\1\143\uffff\1\3\36\uffff\1\2",
            "\1\10\13\uffff\1\3\4\uffff\1\6\35\uffff\1\11\11\uffff\1\3\1"+
            "\4\1\uffff\2\3\2\uffff\1\5\1\uffff\1\3\3\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff\1"+
            "\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\7\31\uffff\1\11",
            "\1\11\13\uffff\1\3\4\uffff\1\21\35\uffff\1\11\11\uffff\1\3"+
            "\1\17\1\uffff\2\3\2\uffff\1\20\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\22\31\uffff\1\11",
            "",
            "\1\33\56\uffff\1\43\7\uffff\1\34\2\uffff\1\32\5\uffff\1\44"+
            "\4\uffff\1\35\1\uffff\1\41\4\uffff\1\36\5\uffff\1\35\1\uffff"+
            "\1\41\3\uffff\1\37\16\uffff\1\45\11\uffff\1\55\10\uffff\1\40"+
            "\5\uffff\1\46\1\47\1\50\20\uffff\1\3\7\uffff\1\53\5\uffff\1"+
            "\54\1\uffff\1\52\3\uffff\1\51\12\uffff\1\56\1\uffff\1\51\4\uffff"+
            "\1\42",
            "\1\62\56\uffff\1\72\7\uffff\1\63\2\uffff\1\61\5\uffff\1\73"+
            "\4\uffff\1\64\1\uffff\1\70\4\uffff\1\65\5\uffff\1\64\1\uffff"+
            "\1\70\3\uffff\1\66\16\uffff\1\74\13\uffff\1\60\6\uffff\1\67"+
            "\5\uffff\1\75\1\76\1\77\30\uffff\1\102\5\uffff\1\103\1\uffff"+
            "\1\101\3\uffff\1\100\12\uffff\1\72\1\uffff\1\100\4\uffff\1\71",
            "\1\104\u0082\uffff\1\104",
            "\1\105\u0082\uffff\1\105",
            "\1\11\56\uffff\1\11\12\uffff\1\3\130\uffff\1\11\36\uffff\1"+
            "\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\114\56\uffff\1\124\7\uffff\1\115\2\uffff\1\113\5\uffff\1"+
            "\125\4\uffff\1\116\1\uffff\1\122\4\uffff\1\117\5\uffff\1\116"+
            "\1\uffff\1\122\3\uffff\1\120\16\uffff\1\126\11\uffff\1\136\10"+
            "\uffff\1\121\5\uffff\1\127\1\130\1\131\30\uffff\1\134\5\uffff"+
            "\1\135\1\uffff\1\133\3\uffff\1\132\12\uffff\1\124\1\uffff\1"+
            "\132\4\uffff\1\123",
            "\1\140\56\uffff\1\150\7\uffff\1\141\2\uffff\1\137\5\uffff\1"+
            "\151\4\uffff\1\142\1\uffff\1\146\4\uffff\1\143\5\uffff\1\142"+
            "\1\uffff\1\146\3\uffff\1\144\16\uffff\1\152\13\uffff\1\162\6"+
            "\uffff\1\145\5\uffff\1\153\1\154\1\155\30\uffff\1\160\5\uffff"+
            "\1\161\1\uffff\1\157\3\uffff\1\156\12\uffff\1\150\1\uffff\1"+
            "\156\4\uffff\1\147",
            "\1\163\u0082\uffff\1\163",
            "\1\164\u0082\uffff\1\164",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\171\14\uffff\1\165\41\uffff\1\167\7\uffff\1\172\2\uffff"+
            "\1\170\5\uffff\1\u0082\4\uffff\1\173\1\uffff\1\177\4\uffff\1"+
            "\174\5\uffff\1\173\1\uffff\1\177\3\uffff\1\175\16\uffff\1\u0083"+
            "\22\uffff\1\176\5\uffff\1\u0084\1\u0085\1\u0086\20\uffff\1\u0080"+
            "\7\uffff\1\u0089\5\uffff\1\u008a\1\uffff\1\u0088\3\uffff\1\u0087"+
            "\12\uffff\1\u0081\1\uffff\1\u0087\4\uffff\1\166",
            "\1\u0093\7\uffff\1\u008c\2\uffff\1\u008b\5\uffff\1\u0094\4"+
            "\uffff\1\u008d\1\uffff\1\u0091\4\uffff\1\u008e\5\uffff\1\u008d"+
            "\1\uffff\1\u0091\3\uffff\1\u008f\16\uffff\1\u0095\22\uffff\1"+
            "\u0090\5\uffff\1\u0096\1\u0097\1\u0098\20\uffff\1\3\7\uffff"+
            "\1\u009b\5\uffff\1\u009c\1\uffff\1\u009a\3\uffff\1\u0099\12"+
            "\uffff\1\u009d\1\uffff\1\u0099\4\uffff\1\u0092",
            "\1\u00a5\12\uffff\1\u00a7\5\uffff\1\u00a6\4\uffff\1\u009f\1"+
            "\uffff\1\u00a3\4\uffff\1\u00a0\5\uffff\1\u009f\1\uffff\1\u00a3"+
            "\3\uffff\1\u00a1\16\uffff\1\u00a8\22\uffff\1\u00a2\5\uffff\1"+
            "\u00a9\1\u00aa\1\u00ab\30\uffff\1\u00ae\5\uffff\1\u00af\1\uffff"+
            "\1\u00ad\3\uffff\1\u00ac\12\uffff\1\u00a5\1\uffff\1\u00ac\4"+
            "\uffff\1\u00a4",
            "\1\u00b5\12\uffff\1\u00b7\5\uffff\1\u00b6\6\uffff\1\u00b3\4"+
            "\uffff\1\u00b0\7\uffff\1\u00b3\3\uffff\1\u00b1\16\uffff\1\u00b8"+
            "\22\uffff\1\u00b2\5\uffff\1\u00b9\1\u00ba\1\u00bb\30\uffff\1"+
            "\u00be\5\uffff\1\u00bf\1\uffff\1\u00bd\3\uffff\1\u00bc\12\uffff"+
            "\1\u00b5\1\uffff\1\u00bc\4\uffff\1\u00b4",
            "\1\u00c4\12\uffff\1\u00c6\5\uffff\1\u00c5\6\uffff\1\u00c2\14"+
            "\uffff\1\u00c2\3\uffff\1\u00c0\16\uffff\1\u00c7\22\uffff\1\u00c1"+
            "\5\uffff\1\u00c8\1\u00c9\1\u00ca\30\uffff\1\u00cd\5\uffff\1"+
            "\u00ce\1\uffff\1\u00cc\3\uffff\1\u00cb\12\uffff\1\u00c4\1\uffff"+
            "\1\u00cb\4\uffff\1\u00c3",
            "\1\u00d2\12\uffff\1\u00d4\5\uffff\1\u00d3\6\uffff\1\u00d0\14"+
            "\uffff\1\u00d0\22\uffff\1\u00d5\22\uffff\1\u00cf\5\uffff\1\u00d6"+
            "\1\u00d7\1\u00d8\30\uffff\1\u00db\5\uffff\1\u00dc\1\uffff\1"+
            "\u00da\3\uffff\1\u00d9\12\uffff\1\u00d2\1\uffff\1\u00d9\4\uffff"+
            "\1\u00d1",
            "\1\u00df\12\uffff\1\u00e1\5\uffff\1\u00e0\6\uffff\1\u00dd\14"+
            "\uffff\1\u00dd\22\uffff\1\u00e2\30\uffff\1\u00e3\1\u00e4\1\u00e5"+
            "\30\uffff\1\u00e8\5\uffff\1\u00e9\1\uffff\1\u00e7\3\uffff\1"+
            "\u00e6\12\uffff\1\u00df\1\uffff\1\u00e6\4\uffff\1\u00de",
            "\1\u00eb\12\uffff\1\u00ed\5\uffff\1\u00ec\46\uffff\1\u00ee"+
            "\30\uffff\1\u00ef\1\u00f0\1\u00f1\30\uffff\1\u00f4\5\uffff\1"+
            "\u00f5\1\uffff\1\u00f3\3\uffff\1\u00f2\12\uffff\1\u00eb\1\uffff"+
            "\1\u00f2\4\uffff\1\u00ea",
            "\1\u00f6\u0082\uffff\1\u00f6",
            "\1\u00fd\13\uffff\1\u0109\4\uffff\1\u00f9\45\uffff\1\u0102"+
            "\1\u0105\1\u0108\1\u00f7\1\u00fd\2\u0108\1\u0101\1\uffff\1\u00f8"+
            "\1\u00ff\1\u0108\1\u00fb\1\u0100\1\u00fe\1\u0108\1\u00fc\2\u0100"+
            "\1\u0108\1\u0101\1\uffff\1\u0104\1\u0108\1\u0106\1\u00fd\1\u0108"+
            "\1\u00fe\1\u0108\1\u00fc\1\u0107\1\u00ff\1\u0108\1\uffff\1\u0103"+
            "\1\u0108\26\uffff\1\u010a\46\uffff\1\u00fa",
            "\1\u010c\12\uffff\1\u010b\5\uffff\1\u010d\77\uffff\1\u010e"+
            "\61\uffff\1\u010c",
            "\1\u0110\13\uffff\1\u011c\52\uffff\1\u0115\1\u0118\1\u011b"+
            "\1\uffff\1\u0110\2\u011b\1\u0114\2\uffff\1\u0112\1\u011b\2\u0113"+
            "\1\u0111\1\u011b\1\u010f\2\u0113\1\u011b\1\u0114\1\uffff\1\u0117"+
            "\1\u011b\1\u0119\1\u0110\1\u011b\1\u0111\1\u011b\1\u010f\1\u011a"+
            "\1\u0112\1\u011b\1\uffff\1\u0116\1\u011b\26\uffff\1\u011d",
            "\1\u011f\13\uffff\1\u012b\52\uffff\1\u0124\1\u0127\1\u012a"+
            "\1\uffff\1\u011f\2\u012a\1\u0123\2\uffff\1\u0121\1\u012a\2\u0122"+
            "\1\u0120\1\u012a\1\u011e\2\u0122\1\u012a\1\u0123\1\uffff\1\u0126"+
            "\1\u012a\1\u0128\1\u011f\1\u012a\1\u0120\1\u012a\1\u011e\1\u0129"+
            "\1\u0121\1\u012a\1\uffff\1\u0125\1\u012a\26\uffff\1\u012c",
            "\1\u012e\13\uffff\1\u013a\52\uffff\1\u0133\1\u0136\1\u0139"+
            "\1\uffff\1\u012e\2\u0139\1\u0132\2\uffff\1\u0130\1\u0139\2\u0131"+
            "\1\u012f\1\u0139\1\u012d\2\u0131\1\u0139\1\u0132\1\uffff\1\u0135"+
            "\1\u0139\1\u0137\1\u012e\1\u0139\1\u012f\1\u0139\1\u012d\1\u0138"+
            "\1\u0130\1\u0139\1\uffff\1\u0134\1\u0139\26\uffff\1\u013b",
            "\1\u013d\13\uffff\1\u0149\52\uffff\1\u0142\1\u0145\1\u0148"+
            "\1\uffff\1\u013d\2\u0148\1\u0141\2\uffff\1\u013f\1\u0148\2\u0140"+
            "\1\u013e\1\u0148\1\u013c\2\u0140\1\u0148\1\u0141\1\uffff\1\u0144"+
            "\1\u0148\1\u0146\1\u013d\1\u0148\1\u013e\1\u0148\1\u013c\1\u0147"+
            "\1\u013f\1\u0148\1\uffff\1\u0143\1\u0148\26\uffff\1\u014a",
            "\1\u014c\13\uffff\1\u0158\52\uffff\1\u0151\1\u0154\1\u0157"+
            "\1\uffff\1\u014c\2\u0157\1\u0150\2\uffff\1\u014e\1\u0157\2\u014f"+
            "\1\u014d\1\u0157\1\u014b\2\u014f\1\u0157\1\u0150\1\uffff\1\u0153"+
            "\1\u0157\1\u0155\1\u014c\1\u0157\1\u014d\1\u0157\1\u014b\1\u0156"+
            "\1\u014e\1\u0157\1\uffff\1\u0152\1\u0157\26\uffff\1\u0159",
            "\1\u015a",
            "\1\u015b",
            "\1\u015c",
            "\1\11\13\uffff\1\3\4\uffff\1\u015e\35\uffff\1\11\11\uffff\1"+
            "\3\2\uffff\2\3\2\uffff\1\u015d\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u015f\31\uffff\1\11",
            "\1\u016d\13\uffff\1\u0179\4\uffff\1\u0169\45\uffff\1\u0172"+
            "\1\u0175\1\u0178\1\u0167\1\u016d\2\u0178\1\u0171\1\uffff\1\u0168"+
            "\1\u016f\1\u0178\1\u016b\1\u0170\1\u016e\1\u0178\1\u016c\2\u0170"+
            "\1\u0178\1\u0171\1\uffff\1\u0174\1\u0178\1\u0176\1\u016d\1\u0178"+
            "\1\u016e\1\u0178\1\u016c\1\u0177\1\u016f\1\u0178\1\uffff\1\u0173"+
            "\1\u0178\26\uffff\1\u017a\46\uffff\1\u016a",
            "",
            "\1\u017b\13\uffff\1\3\4\uffff\1\u017d\35\uffff\1\11\11\uffff"+
            "\2\3\1\uffff\2\3\2\uffff\1\u0182\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u017e\31\uffff\1\11",
            "\1\u018a\14\uffff\1\u0186\41\uffff\1\u0188\7\uffff\1\u018b"+
            "\2\uffff\1\u0189\5\uffff\1\u0193\4\uffff\1\u018c\1\uffff\1\u0190"+
            "\4\uffff\1\u018d\5\uffff\1\u018c\1\uffff\1\u0190\3\uffff\1\u018e"+
            "\16\uffff\1\u0194\22\uffff\1\u018f\5\uffff\1\u0195\1\u0196\1"+
            "\u0197\20\uffff\1\u0191\7\uffff\1\u019a\5\uffff\1\u019b\1\uffff"+
            "\1\u0199\3\uffff\1\u0198\12\uffff\1\u0192\1\uffff\1\u0198\4"+
            "\uffff\1\u0187",
            "\1\u01a4\7\uffff\1\u019d\2\uffff\1\u019c\5\uffff\1\u01a5\4"+
            "\uffff\1\u019e\1\uffff\1\u01a2\4\uffff\1\u019f\5\uffff\1\u019e"+
            "\1\uffff\1\u01a2\3\uffff\1\u01a0\16\uffff\1\u01a6\22\uffff\1"+
            "\u01a1\5\uffff\1\u01a7\1\u01a8\1\u01a9\30\uffff\1\u01ac\5\uffff"+
            "\1\u01ad\1\uffff\1\u01ab\3\uffff\1\u01aa\12\uffff\1\u01a4\1"+
            "\uffff\1\u01aa\4\uffff\1\u01a3",
            "\1\u01b4\12\uffff\1\u01b6\5\uffff\1\u01b5\4\uffff\1\u01ae\1"+
            "\uffff\1\u01b2\4\uffff\1\u01af\5\uffff\1\u01ae\1\uffff\1\u01b2"+
            "\3\uffff\1\u01b0\16\uffff\1\u01b7\22\uffff\1\u01b1\5\uffff\1"+
            "\u01b8\1\u01b9\1\u01ba\30\uffff\1\u01bd\5\uffff\1\u01be\1\uffff"+
            "\1\u01bc\3\uffff\1\u01bb\12\uffff\1\u01b4\1\uffff\1\u01bb\4"+
            "\uffff\1\u01b3",
            "\1\u01c4\12\uffff\1\u01c6\5\uffff\1\u01c5\6\uffff\1\u01c2\4"+
            "\uffff\1\u01bf\7\uffff\1\u01c2\3\uffff\1\u01c0\16\uffff\1\u01c7"+
            "\22\uffff\1\u01c1\5\uffff\1\u01c8\1\u01c9\1\u01ca\30\uffff\1"+
            "\u01cd\5\uffff\1\u01ce\1\uffff\1\u01cc\3\uffff\1\u01cb\12\uffff"+
            "\1\u01c4\1\uffff\1\u01cb\4\uffff\1\u01c3",
            "\1\u01d3\12\uffff\1\u01d5\5\uffff\1\u01d4\6\uffff\1\u01d1\14"+
            "\uffff\1\u01d1\3\uffff\1\u01cf\16\uffff\1\u01d6\22\uffff\1\u01d0"+
            "\5\uffff\1\u01d7\1\u01d8\1\u01d9\30\uffff\1\u01dc\5\uffff\1"+
            "\u01dd\1\uffff\1\u01db\3\uffff\1\u01da\12\uffff\1\u01d3\1\uffff"+
            "\1\u01da\4\uffff\1\u01d2",
            "\1\u01e1\12\uffff\1\u01e3\5\uffff\1\u01e2\6\uffff\1\u01df\14"+
            "\uffff\1\u01df\22\uffff\1\u01e4\22\uffff\1\u01de\5\uffff\1\u01e5"+
            "\1\u01e6\1\u01e7\30\uffff\1\u01ea\5\uffff\1\u01eb\1\uffff\1"+
            "\u01e9\3\uffff\1\u01e8\12\uffff\1\u01e1\1\uffff\1\u01e8\4\uffff"+
            "\1\u01e0",
            "\1\u01ee\12\uffff\1\u01f0\5\uffff\1\u01ef\6\uffff\1\u01ec\14"+
            "\uffff\1\u01ec\22\uffff\1\u01f1\30\uffff\1\u01f2\1\u01f3\1\u01f4"+
            "\30\uffff\1\u01f7\5\uffff\1\u01f8\1\uffff\1\u01f6\3\uffff\1"+
            "\u01f5\12\uffff\1\u01ee\1\uffff\1\u01f5\4\uffff\1\u01ed",
            "\1\u01fa\12\uffff\1\u01fc\5\uffff\1\u01fb\46\uffff\1\u01fd"+
            "\30\uffff\1\u01fe\1\u01ff\1\u0200\30\uffff\1\u0203\5\uffff\1"+
            "\u0204\1\uffff\1\u0202\3\uffff\1\u0201\12\uffff\1\u01fa\1\uffff"+
            "\1\u0201\4\uffff\1\u01f9",
            "\1\u0205\u0082\uffff\1\u0205",
            "\1\u020c\20\uffff\1\u0208\45\uffff\1\u0211\1\u0214\1\u0217"+
            "\1\u0206\1\u020c\2\u0217\1\u0210\1\uffff\1\u0207\1\u020e\1\u0217"+
            "\1\u020a\1\u020f\1\u020d\1\u0217\1\u020b\2\u020f\1\u0217\1\u0210"+
            "\1\uffff\1\u0213\1\u0217\1\u0215\1\u020c\1\u0217\1\u020d\1\u0217"+
            "\1\u020b\1\u0216\1\u020e\1\u0217\1\uffff\1\u0212\1\u0217\30"+
            "\uffff\1\u0218\44\uffff\1\u0209",
            "\1\u021a\12\uffff\1\u0219\5\uffff\1\u021b\77\uffff\1\u021c"+
            "\61\uffff\1\u021a",
            "\1\u021e\66\uffff\1\u0223\1\u0226\1\u0229\1\uffff\1\u021e\2"+
            "\u0229\1\u0222\2\uffff\1\u0220\1\u0229\2\u0221\1\u021f\1\u0229"+
            "\1\u021d\2\u0221\1\u0229\1\u0222\1\uffff\1\u0225\1\u0229\1\u0227"+
            "\1\u021e\1\u0229\1\u021f\1\u0229\1\u021d\1\u0228\1\u0220\1\u0229"+
            "\1\uffff\1\u0224\1\u0229\30\uffff\1\u022a",
            "\1\u022c\66\uffff\1\u0231\1\u0234\1\u0237\1\uffff\1\u022c\2"+
            "\u0237\1\u0230\2\uffff\1\u022e\1\u0237\2\u022f\1\u022d\1\u0237"+
            "\1\u022b\2\u022f\1\u0237\1\u0230\1\uffff\1\u0233\1\u0237\1\u0235"+
            "\1\u022c\1\u0237\1\u022d\1\u0237\1\u022b\1\u0236\1\u022e\1\u0237"+
            "\1\uffff\1\u0232\1\u0237\30\uffff\1\u0238",
            "\1\u023a\66\uffff\1\u023f\1\u0242\1\u0245\1\uffff\1\u023a\2"+
            "\u0245\1\u023e\2\uffff\1\u023c\1\u0245\2\u023d\1\u023b\1\u0245"+
            "\1\u0239\2\u023d\1\u0245\1\u023e\1\uffff\1\u0241\1\u0245\1\u0243"+
            "\1\u023a\1\u0245\1\u023b\1\u0245\1\u0239\1\u0244\1\u023c\1\u0245"+
            "\1\uffff\1\u0240\1\u0245\30\uffff\1\u0246",
            "\1\u0248\66\uffff\1\u024d\1\u0250\1\u0253\1\uffff\1\u0248\2"+
            "\u0253\1\u024c\2\uffff\1\u024a\1\u0253\2\u024b\1\u0249\1\u0253"+
            "\1\u0247\2\u024b\1\u0253\1\u024c\1\uffff\1\u024f\1\u0253\1\u0251"+
            "\1\u0248\1\u0253\1\u0249\1\u0253\1\u0247\1\u0252\1\u024a\1\u0253"+
            "\1\uffff\1\u024e\1\u0253\30\uffff\1\u0254",
            "\1\u0256\66\uffff\1\u025b\1\u025e\1\u0261\1\uffff\1\u0256\2"+
            "\u0261\1\u025a\2\uffff\1\u0258\1\u0261\2\u0259\1\u0257\1\u0261"+
            "\1\u0255\2\u0259\1\u0261\1\u025a\1\uffff\1\u025d\1\u0261\1\u025f"+
            "\1\u0256\1\u0261\1\u0257\1\u0261\1\u0255\1\u0260\1\u0258\1\u0261"+
            "\1\uffff\1\u025c\1\u0261\30\uffff\1\u0262",
            "\1\u0263",
            "\1\u0264",
            "\1\u0265",
            "\1\11\13\uffff\1\3\4\uffff\1\u026c\35\uffff\1\11\11\uffff\1"+
            "\3\1\u0266\1\uffff\2\3\2\uffff\1\u0267\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u026d\31"+
            "\uffff\1\11",
            "\1\11\13\uffff\1\3\4\uffff\1\u0277\35\uffff\1\11\11\uffff\1"+
            "\3\1\u0271\1\uffff\2\3\2\uffff\1\u0272\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u0278\31"+
            "\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\u0280\14\uffff\1\u027c\41\uffff\1\u027e\7\uffff\1\u0281"+
            "\2\uffff\1\u027f\5\uffff\1\u0289\4\uffff\1\u0282\1\uffff\1\u0286"+
            "\4\uffff\1\u0283\5\uffff\1\u0282\1\uffff\1\u0286\3\uffff\1\u0284"+
            "\16\uffff\1\u028a\22\uffff\1\u0285\5\uffff\1\u028b\1\u028c\1"+
            "\u028d\20\uffff\1\u0287\7\uffff\1\u0290\5\uffff\1\u0291\1\uffff"+
            "\1\u028f\3\uffff\1\u028e\12\uffff\1\u0288\1\uffff\1\u028e\4"+
            "\uffff\1\u027d",
            "\1\u029a\7\uffff\1\u0293\2\uffff\1\u0292\5\uffff\1\u029b\4"+
            "\uffff\1\u0294\1\uffff\1\u0298\4\uffff\1\u0295\5\uffff\1\u0294"+
            "\1\uffff\1\u0298\3\uffff\1\u0296\16\uffff\1\u029c\22\uffff\1"+
            "\u0297\5\uffff\1\u029d\1\u029e\1\u029f\30\uffff\1\u02a2\5\uffff"+
            "\1\u02a3\1\uffff\1\u02a1\3\uffff\1\u02a0\12\uffff\1\u029a\1"+
            "\uffff\1\u02a0\4\uffff\1\u0299",
            "\1\u02aa\12\uffff\1\u02ac\5\uffff\1\u02ab\4\uffff\1\u02a4\1"+
            "\uffff\1\u02a8\4\uffff\1\u02a5\5\uffff\1\u02a4\1\uffff\1\u02a8"+
            "\3\uffff\1\u02a6\16\uffff\1\u02ad\22\uffff\1\u02a7\5\uffff\1"+
            "\u02ae\1\u02af\1\u02b0\30\uffff\1\u02b3\5\uffff\1\u02b4\1\uffff"+
            "\1\u02b2\3\uffff\1\u02b1\12\uffff\1\u02aa\1\uffff\1\u02b1\4"+
            "\uffff\1\u02a9",
            "\1\u02ba\12\uffff\1\u02bc\5\uffff\1\u02bb\6\uffff\1\u02b8\4"+
            "\uffff\1\u02b5\7\uffff\1\u02b8\3\uffff\1\u02b6\16\uffff\1\u02bd"+
            "\22\uffff\1\u02b7\5\uffff\1\u02be\1\u02bf\1\u02c0\30\uffff\1"+
            "\u02c3\5\uffff\1\u02c4\1\uffff\1\u02c2\3\uffff\1\u02c1\12\uffff"+
            "\1\u02ba\1\uffff\1\u02c1\4\uffff\1\u02b9",
            "\1\u02c9\12\uffff\1\u02cb\5\uffff\1\u02ca\6\uffff\1\u02c7\14"+
            "\uffff\1\u02c7\3\uffff\1\u02c5\16\uffff\1\u02cc\22\uffff\1\u02c6"+
            "\5\uffff\1\u02cd\1\u02ce\1\u02cf\30\uffff\1\u02d2\5\uffff\1"+
            "\u02d3\1\uffff\1\u02d1\3\uffff\1\u02d0\12\uffff\1\u02c9\1\uffff"+
            "\1\u02d0\4\uffff\1\u02c8",
            "\1\u02d7\12\uffff\1\u02d9\5\uffff\1\u02d8\6\uffff\1\u02d5\14"+
            "\uffff\1\u02d5\22\uffff\1\u02da\22\uffff\1\u02d4\5\uffff\1\u02db"+
            "\1\u02dc\1\u02dd\30\uffff\1\u02e0\5\uffff\1\u02e1\1\uffff\1"+
            "\u02df\3\uffff\1\u02de\12\uffff\1\u02d7\1\uffff\1\u02de\4\uffff"+
            "\1\u02d6",
            "\1\u02e4\12\uffff\1\u02e6\5\uffff\1\u02e5\6\uffff\1\u02e2\14"+
            "\uffff\1\u02e2\22\uffff\1\u02e7\30\uffff\1\u02e8\1\u02e9\1\u02ea"+
            "\30\uffff\1\u02ed\5\uffff\1\u02ee\1\uffff\1\u02ec\3\uffff\1"+
            "\u02eb\12\uffff\1\u02e4\1\uffff\1\u02eb\4\uffff\1\u02e3",
            "\1\u02f0\12\uffff\1\u02f2\5\uffff\1\u02f1\46\uffff\1\u02f3"+
            "\30\uffff\1\u02f4\1\u02f5\1\u02f6\30\uffff\1\u02f9\5\uffff\1"+
            "\u02fa\1\uffff\1\u02f8\3\uffff\1\u02f7\12\uffff\1\u02f0\1\uffff"+
            "\1\u02f7\4\uffff\1\u02ef",
            "\1\u02fb\u0082\uffff\1\u02fb",
            "\1\u0302\13\uffff\1\u030e\4\uffff\1\u02fe\45\uffff\1\u0307"+
            "\1\u030a\1\u030d\1\u02fc\1\u0302\2\u030d\1\u0306\1\uffff\1\u02fd"+
            "\1\u0304\1\u030d\1\u0300\1\u0305\1\u0303\1\u030d\1\u0301\2\u0305"+
            "\1\u030d\1\u0306\1\uffff\1\u0309\1\u030d\1\u030b\1\u0302\1\u030d"+
            "\1\u0303\1\u030d\1\u0301\1\u030c\1\u0304\1\u030d\1\uffff\1\u0308"+
            "\1\u030d\26\uffff\1\u030f\46\uffff\1\u02ff",
            "\1\u0311\12\uffff\1\u0310\5\uffff\1\u0312\77\uffff\1\u0313"+
            "\61\uffff\1\u0311",
            "\1\u0315\13\uffff\1\u0321\52\uffff\1\u031a\1\u031d\1\u0320"+
            "\1\uffff\1\u0315\2\u0320\1\u0319\2\uffff\1\u0317\1\u0320\2\u0318"+
            "\1\u0316\1\u0320\1\u0314\2\u0318\1\u0320\1\u0319\1\uffff\1\u031c"+
            "\1\u0320\1\u031e\1\u0315\1\u0320\1\u0316\1\u0320\1\u0314\1\u031f"+
            "\1\u0317\1\u0320\1\uffff\1\u031b\1\u0320\26\uffff\1\u0322",
            "\1\u0324\13\uffff\1\u0330\52\uffff\1\u0329\1\u032c\1\u032f"+
            "\1\uffff\1\u0324\2\u032f\1\u0328\2\uffff\1\u0326\1\u032f\2\u0327"+
            "\1\u0325\1\u032f\1\u0323\2\u0327\1\u032f\1\u0328\1\uffff\1\u032b"+
            "\1\u032f\1\u032d\1\u0324\1\u032f\1\u0325\1\u032f\1\u0323\1\u032e"+
            "\1\u0326\1\u032f\1\uffff\1\u032a\1\u032f\26\uffff\1\u0331",
            "\1\u0333\13\uffff\1\u033f\52\uffff\1\u0338\1\u033b\1\u033e"+
            "\1\uffff\1\u0333\2\u033e\1\u0337\2\uffff\1\u0335\1\u033e\2\u0336"+
            "\1\u0334\1\u033e\1\u0332\2\u0336\1\u033e\1\u0337\1\uffff\1\u033a"+
            "\1\u033e\1\u033c\1\u0333\1\u033e\1\u0334\1\u033e\1\u0332\1\u033d"+
            "\1\u0335\1\u033e\1\uffff\1\u0339\1\u033e\26\uffff\1\u0340",
            "\1\u0342\13\uffff\1\u034e\52\uffff\1\u0347\1\u034a\1\u034d"+
            "\1\uffff\1\u0342\2\u034d\1\u0346\2\uffff\1\u0344\1\u034d\2\u0345"+
            "\1\u0343\1\u034d\1\u0341\2\u0345\1\u034d\1\u0346\1\uffff\1\u0349"+
            "\1\u034d\1\u034b\1\u0342\1\u034d\1\u0343\1\u034d\1\u0341\1\u034c"+
            "\1\u0344\1\u034d\1\uffff\1\u0348\1\u034d\26\uffff\1\u034f",
            "\1\u0351\13\uffff\1\u035d\52\uffff\1\u0356\1\u0359\1\u035c"+
            "\1\uffff\1\u0351\2\u035c\1\u0355\2\uffff\1\u0353\1\u035c\2\u0354"+
            "\1\u0352\1\u035c\1\u0350\2\u0354\1\u035c\1\u0355\1\uffff\1\u0358"+
            "\1\u035c\1\u035a\1\u0351\1\u035c\1\u0352\1\u035c\1\u0350\1\u035b"+
            "\1\u0353\1\u035c\1\uffff\1\u0357\1\u035c\26\uffff\1\u035e",
            "\1\u035f",
            "\1\u0360",
            "\1\u0361",
            "\1\11\13\uffff\1\3\4\uffff\1\u0363\35\uffff\1\11\11\uffff\1"+
            "\3\2\uffff\2\3\2\uffff\1\u0362\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u0364\31\uffff\1\11",
            "\1\u0370\14\uffff\1\u036c\41\uffff\1\u036e\7\uffff\1\u0371"+
            "\2\uffff\1\u036f\5\uffff\1\u0379\4\uffff\1\u0372\1\uffff\1\u0376"+
            "\4\uffff\1\u0373\5\uffff\1\u0372\1\uffff\1\u0376\3\uffff\1\u0374"+
            "\16\uffff\1\u037a\22\uffff\1\u0375\5\uffff\1\u037b\1\u037c\1"+
            "\u037d\20\uffff\1\u0377\7\uffff\1\u0380\5\uffff\1\u0381\1\uffff"+
            "\1\u037f\3\uffff\1\u037e\12\uffff\1\u0378\1\uffff\1\u037e\4"+
            "\uffff\1\u036d",
            "\1\u038a\7\uffff\1\u0383\2\uffff\1\u0382\5\uffff\1\u038b\4"+
            "\uffff\1\u0384\1\uffff\1\u0388\4\uffff\1\u0385\5\uffff\1\u0384"+
            "\1\uffff\1\u0388\3\uffff\1\u0386\16\uffff\1\u038c\22\uffff\1"+
            "\u0387\5\uffff\1\u038d\1\u038e\1\u038f\30\uffff\1\u0392\5\uffff"+
            "\1\u0393\1\uffff\1\u0391\3\uffff\1\u0390\12\uffff\1\u038a\1"+
            "\uffff\1\u0390\4\uffff\1\u0389",
            "\1\u039a\12\uffff\1\u039c\5\uffff\1\u039b\4\uffff\1\u0394\1"+
            "\uffff\1\u0398\4\uffff\1\u0395\5\uffff\1\u0394\1\uffff\1\u0398"+
            "\3\uffff\1\u0396\16\uffff\1\u039d\22\uffff\1\u0397\5\uffff\1"+
            "\u039e\1\u039f\1\u03a0\30\uffff\1\u03a3\5\uffff\1\u03a4\1\uffff"+
            "\1\u03a2\3\uffff\1\u03a1\12\uffff\1\u039a\1\uffff\1\u03a1\4"+
            "\uffff\1\u0399",
            "\1\u03aa\12\uffff\1\u03ac\5\uffff\1\u03ab\6\uffff\1\u03a8\4"+
            "\uffff\1\u03a5\7\uffff\1\u03a8\3\uffff\1\u03a6\16\uffff\1\u03ad"+
            "\22\uffff\1\u03a7\5\uffff\1\u03ae\1\u03af\1\u03b0\30\uffff\1"+
            "\u03b3\5\uffff\1\u03b4\1\uffff\1\u03b2\3\uffff\1\u03b1\12\uffff"+
            "\1\u03aa\1\uffff\1\u03b1\4\uffff\1\u03a9",
            "\1\u03b9\12\uffff\1\u03bb\5\uffff\1\u03ba\6\uffff\1\u03b7\14"+
            "\uffff\1\u03b7\3\uffff\1\u03b5\16\uffff\1\u03bc\22\uffff\1\u03b6"+
            "\5\uffff\1\u03bd\1\u03be\1\u03bf\30\uffff\1\u03c2\5\uffff\1"+
            "\u03c3\1\uffff\1\u03c1\3\uffff\1\u03c0\12\uffff\1\u03b9\1\uffff"+
            "\1\u03c0\4\uffff\1\u03b8",
            "\1\u03c7\12\uffff\1\u03c9\5\uffff\1\u03c8\6\uffff\1\u03c5\14"+
            "\uffff\1\u03c5\22\uffff\1\u03ca\22\uffff\1\u03c4\5\uffff\1\u03cb"+
            "\1\u03cc\1\u03cd\30\uffff\1\u03d0\5\uffff\1\u03d1\1\uffff\1"+
            "\u03cf\3\uffff\1\u03ce\12\uffff\1\u03c7\1\uffff\1\u03ce\4\uffff"+
            "\1\u03c6",
            "\1\u03d4\12\uffff\1\u03d6\5\uffff\1\u03d5\6\uffff\1\u03d2\14"+
            "\uffff\1\u03d2\22\uffff\1\u03d7\30\uffff\1\u03d8\1\u03d9\1\u03da"+
            "\30\uffff\1\u03dd\5\uffff\1\u03de\1\uffff\1\u03dc\3\uffff\1"+
            "\u03db\12\uffff\1\u03d4\1\uffff\1\u03db\4\uffff\1\u03d3",
            "\1\u03e0\12\uffff\1\u03e2\5\uffff\1\u03e1\46\uffff\1\u03e3"+
            "\30\uffff\1\u03e4\1\u03e5\1\u03e6\30\uffff\1\u03e9\5\uffff\1"+
            "\u03ea\1\uffff\1\u03e8\3\uffff\1\u03e7\12\uffff\1\u03e0\1\uffff"+
            "\1\u03e7\4\uffff\1\u03df",
            "\1\u03eb\u0082\uffff\1\u03eb",
            "\1\u03f2\20\uffff\1\u03ee\45\uffff\1\u03f7\1\u03fa\1\u03fd"+
            "\1\u03ec\1\u03f2\2\u03fd\1\u03f6\1\uffff\1\u03ed\1\u03f4\1\u03fd"+
            "\1\u03f0\1\u03f5\1\u03f3\1\u03fd\1\u03f1\2\u03f5\1\u03fd\1\u03f6"+
            "\1\uffff\1\u03f9\1\u03fd\1\u03fb\1\u03f2\1\u03fd\1\u03f3\1\u03fd"+
            "\1\u03f1\1\u03fc\1\u03f4\1\u03fd\1\uffff\1\u03f8\1\u03fd\30"+
            "\uffff\1\u03fe\44\uffff\1\u03ef",
            "\1\u0400\12\uffff\1\u03ff\5\uffff\1\u0401\77\uffff\1\u0402"+
            "\61\uffff\1\u0400",
            "\1\u0404\66\uffff\1\u0409\1\u040c\1\u040f\1\uffff\1\u0404\2"+
            "\u040f\1\u0408\2\uffff\1\u0406\1\u040f\2\u0407\1\u0405\1\u040f"+
            "\1\u0403\2\u0407\1\u040f\1\u0408\1\uffff\1\u040b\1\u040f\1\u040d"+
            "\1\u0404\1\u040f\1\u0405\1\u040f\1\u0403\1\u040e\1\u0406\1\u040f"+
            "\1\uffff\1\u040a\1\u040f\30\uffff\1\u0410",
            "\1\u0412\66\uffff\1\u0417\1\u041a\1\u041d\1\uffff\1\u0412\2"+
            "\u041d\1\u0416\2\uffff\1\u0414\1\u041d\2\u0415\1\u0413\1\u041d"+
            "\1\u0411\2\u0415\1\u041d\1\u0416\1\uffff\1\u0419\1\u041d\1\u041b"+
            "\1\u0412\1\u041d\1\u0413\1\u041d\1\u0411\1\u041c\1\u0414\1\u041d"+
            "\1\uffff\1\u0418\1\u041d\30\uffff\1\u041e",
            "\1\u0420\66\uffff\1\u0425\1\u0428\1\u042b\1\uffff\1\u0420\2"+
            "\u042b\1\u0424\2\uffff\1\u0422\1\u042b\2\u0423\1\u0421\1\u042b"+
            "\1\u041f\2\u0423\1\u042b\1\u0424\1\uffff\1\u0427\1\u042b\1\u0429"+
            "\1\u0420\1\u042b\1\u0421\1\u042b\1\u041f\1\u042a\1\u0422\1\u042b"+
            "\1\uffff\1\u0426\1\u042b\30\uffff\1\u042c",
            "\1\u042e\66\uffff\1\u0433\1\u0436\1\u0439\1\uffff\1\u042e\2"+
            "\u0439\1\u0432\2\uffff\1\u0430\1\u0439\2\u0431\1\u042f\1\u0439"+
            "\1\u042d\2\u0431\1\u0439\1\u0432\1\uffff\1\u0435\1\u0439\1\u0437"+
            "\1\u042e\1\u0439\1\u042f\1\u0439\1\u042d\1\u0438\1\u0430\1\u0439"+
            "\1\uffff\1\u0434\1\u0439\30\uffff\1\u043a",
            "\1\u043c\66\uffff\1\u0441\1\u0444\1\u0447\1\uffff\1\u043c\2"+
            "\u0447\1\u0440\2\uffff\1\u043e\1\u0447\2\u043f\1\u043d\1\u0447"+
            "\1\u043b\2\u043f\1\u0447\1\u0440\1\uffff\1\u0443\1\u0447\1\u0445"+
            "\1\u043c\1\u0447\1\u043d\1\u0447\1\u043b\1\u0446\1\u043e\1\u0447"+
            "\1\uffff\1\u0442\1\u0447\30\uffff\1\u0448",
            "\1\u0449",
            "\1\u044a",
            "\1\u044b",
            "\1\11\13\uffff\1\3\4\uffff\1\u044c\35\uffff\1\11\11\uffff\1"+
            "\3\2\uffff\2\3\2\uffff\1\u0452\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u044d\31\uffff\1\11",
            "\1\11\13\uffff\1\3\4\uffff\1\u045c\35\uffff\1\11\11\uffff\1"+
            "\3\1\u0456\1\uffff\2\3\2\uffff\1\u0457\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u045d\31"+
            "\uffff\1\11",
            "\1\11\13\uffff\1\3\4\uffff\1\u0467\35\uffff\1\11\11\uffff\1"+
            "\3\1\u0461\1\uffff\2\3\2\uffff\1\u0462\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u0468\31"+
            "\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "475:4: ( object_name ( ASTERISK )* )?";
        }
    }
    static final String DFA72_eotS =
        "\142\uffff";
    static final String DFA72_eofS =
        "\142\uffff";
    static final String DFA72_minS =
        "\2\5\24\uffff\1\5\24\uffff\1\5\66\uffff";
    static final String DFA72_maxS =
        "\2\u00be\24\uffff\1\u009d\24\uffff\1\u00be\66\uffff";
    static final String DFA72_acceptS =
        "\2\uffff\1\1\47\uffff\1\2\67\uffff";
    static final String DFA72_specialS =
        "\142\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\2\56\uffff\1\2\7\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "\1\2\14\uffff\1\2\41\uffff\1\26\7\uffff\1\2\2\uffff\1\2\5\uffff"+
            "\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\1\uffff"+
            "\1\52\16\uffff\1\2\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\20\uffff\1\2\45\uffff\10\2\1\uffff\14\2\1\uffff\13\2\1"+
            "\uffff\2\2\26\uffff\1\53\46\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\13\uffff\1\2\4\uffff\1\2\35\uffff\1\2\7\uffff\10\2\1\52"+
            "\33\2\14\uffff\1\2\11\uffff\2\2\7\uffff\1\2\5\uffff\3\2\25\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "557:1: expression : ( classical_expr_wrp | struct_init );";
        }
    }
    static final String DFA76_eotS =
        "\155\uffff";
    static final String DFA76_eofS =
        "\155\uffff";
    static final String DFA76_minS =
        "\2\5\25\uffff\1\5\10\uffff\1\5\12\uffff\1\5\3\uffff\1\5\17\uffff"+
        "\1\170\55\uffff";
    static final String DFA76_maxS =
        "\2\u00be\25\uffff\1\u009d\10\uffff\1\166\12\uffff\1\u00be\3\uffff"+
        "\1\u00be\17\uffff\1\170\55\uffff";
    static final String DFA76_acceptS =
        "\2\uffff\1\1\21\uffff\1\2\56\uffff\1\3\1\1\23\uffff\1\1\23\uffff"+
        "\1\1";
    static final String DFA76_specialS =
        "\155\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\2\56\uffff\1\2\7\uffff\1\2\2\uffff\1\1\4\uffff\1\24\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1"+
            "\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\2\14\uffff\1\2\41\uffff\1\27\7\uffff\1\2\2\uffff\1\2\5\uffff"+
            "\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\20\uffff"+
            "\1\40\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\20\uffff\1\2\45\uffff\3\2\1\57\4\2\1\uffff\1\53\13\2\1"+
            "\uffff\13\2\1\uffff\2\2\26\uffff\1\2\46\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\71\uffff\1\103\5\uffff\1\77\2\uffff\1\2\55\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\56\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\104\6\uffff\1\2\5\uffff\3\2\30"+
            "\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "\1\130\56\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\5\uffff\3\2\30\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\154",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "575:19: ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) )";
        }
    }
    static final String DFA81_eotS =
        "\150\uffff";
    static final String DFA81_eofS =
        "\150\uffff";
    static final String DFA81_minS =
        "\1\64\1\5\2\uffff\2\5\10\uffff\1\64\7\uffff\1\5\14\uffff\1\5\104"+
        "\uffff";
    static final String DFA81_maxS =
        "\2\u00b7\2\uffff\2\u00be\10\uffff\1\u00be\7\uffff\1\u009d\14\uffff"+
        "\1\u00b7\104\uffff";
    static final String DFA81_acceptS =
        "\2\uffff\1\1\1\2\73\uffff\1\1\14\uffff\1\1\21\uffff\1\1\11\uffff";
    static final String DFA81_specialS =
        "\150\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\1\143\uffff\1\3\36\uffff\1\2",
            "\1\3\13\uffff\1\2\4\uffff\1\2\47\uffff\1\2\1\4\1\uffff\2\2"+
            "\2\uffff\1\5\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\33\uffff\1"+
            "\2\41\uffff\1\2\31\uffff\1\2",
            "",
            "",
            "\1\16\56\uffff\1\26\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\5\uffff\3\2\20\uffff"+
            "\1\3\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\56\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\43\6\uffff\1\2\5\uffff\3\2\30\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\77\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\5\uffff\3\2\20\uffff\1\3\7\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\13\uffff\1\2\4\uffff\1\2\45\uffff\10\2\1\uffff\1\114\13"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\136\46\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\13\uffff\1\136\4\uffff\1\136\47\uffff\1\136\1\3\1\uffff"+
            "\2\136\2\uffff\1\136\1\uffff\1\136\3\uffff\1\136\3\uffff\1\136"+
            "\3\uffff\1\136\2\uffff\1\136\1\uffff\1\136\3\uffff\1\136\2\uffff"+
            "\1\136\33\uffff\1\136\41\uffff\1\136\31\uffff\1\136",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "596:4: ( object_name | func_pointer1 )";
        }
    }
    static final String DFA93_eotS =
        "\u00b9\uffff";
    static final String DFA93_eofS =
        "\60\uffff\1\2\u0088\uffff";
    static final String DFA93_minS =
        "\2\5\23\uffff\1\64\1\5\23\uffff\1\5\2\uffff\4\5\u0088\uffff";
    static final String DFA93_maxS =
        "\2\u00be\23\uffff\1\u00b7\1\u009d\23\uffff\1\u009d\2\uffff\4\u00be"+
        "\u0088\uffff";
    static final String DFA93_acceptS =
        "\2\uffff\1\2\21\uffff\1\1\54\uffff\4\1\20\uffff\1\1\23\uffff\1\1"+
        "\24\uffff\1\1\22\uffff\3\1\3\uffff\1\1\1\uffff\1\1\32\uffff\1\1"+
        "\4\uffff";
    static final String DFA93_specialS =
        "\u00b9\uffff}>";
    static final String[] DFA93_transitionS = {
            "\1\2\56\uffff\1\2\7\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "\1\2\14\uffff\1\24\41\uffff\1\26\7\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2"+
            "\20\uffff\1\24\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\52\143\uffff\1\24\36\uffff\1\2",
            "\1\57\20\uffff\1\2\45\uffff\10\2\1\uffff\1\55\2\2\1\56\10\2"+
            "\1\uffff\13\2\1\uffff\2\2\26\uffff\1\60\46\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\20\uffff\1\2\45\uffff\10\2\1\uffff\1\101\2\2\1\102\10"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\104\46\uffff\1\2",
            "",
            "",
            "\1\2\56\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\125\6\uffff\1\2\5\uffff\3\2\30"+
            "\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2",
            "\1\2\56\uffff\1\151\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "\1\176\56\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\11\uffff\1\24\10\uffff\1\2\5\uffff\3\2\30"+
            "\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2",
            "\1\u0091\12\uffff\2\2\4\uffff\1\2\35\uffff\1\u0099\7\uffff"+
            "\1\u0092\2\2\1\u0099\4\2\1\uffff\1\u0099\4\2\1\u0093\1\2\1\u0097"+
            "\4\2\1\u0093\5\2\1\u0093\1\2\1\u0097\3\2\1\u0093\2\2\14\uffff"+
            "\1\u0099\11\uffff\3\2\2\uffff\1\2\3\uffff\1\u0093\5\uffff\3"+
            "\u0099\20\uffff\1\2\4\uffff\1\2\2\uffff\1\u0099\5\uffff\1\u0099"+
            "\1\uffff\1\u0099\3\uffff\1\u0099\12\uffff\1\u00b4\1\uffff\1"+
            "\u0099\4\uffff\1\u0093",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "679:4: ( type_convertion )?";
        }
    }
    static final String DFA94_eotS =
        "\u00b7\uffff";
    static final String DFA94_eofS =
        "\57\uffff\1\2\u0087\uffff";
    static final String DFA94_minS =
        "\1\64\1\5\22\uffff\1\64\1\5\23\uffff\1\5\2\uffff\4\5\u0087\uffff";
    static final String DFA94_maxS =
        "\2\u00be\22\uffff\1\u00b7\1\u009d\23\uffff\1\u009d\2\uffff\4\u00be"+
        "\u0087\uffff";
    static final String DFA94_acceptS =
        "\2\uffff\1\2\20\uffff\1\1\54\uffff\4\1\20\uffff\1\1\23\uffff\1\1"+
        "\24\uffff\1\1\22\uffff\2\1\3\uffff\1\1\1\uffff\1\1\32\uffff\1\1"+
        "\4\uffff";
    static final String DFA94_specialS =
        "\u00b7\uffff}>";
    static final String[] DFA94_transitionS = {
            "\1\2\7\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1\2\5\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\14\uffff\1\23\41\uffff\1\25\7\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2"+
            "\20\uffff\1\23\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51\143\uffff\1\23\36\uffff\1\2",
            "\1\56\20\uffff\1\2\45\uffff\10\2\1\uffff\1\54\2\2\1\55\10\2"+
            "\1\uffff\13\2\1\uffff\2\2\26\uffff\1\57\46\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\102\20\uffff\1\2\45\uffff\10\2\1\uffff\1\100\2\2\1\101\10"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\103\46\uffff\1\2",
            "",
            "",
            "\1\2\56\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\124\6\uffff\1\2\5\uffff\3\2\30"+
            "\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2",
            "\1\2\56\uffff\1\150\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "\1\175\56\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\11\uffff\1\23\10\uffff\1\2\5\uffff\3\2\30"+
            "\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2",
            "\1\2\12\uffff\2\2\4\uffff\1\2\35\uffff\1\u0097\7\uffff\1\u0090"+
            "\2\2\1\u0097\4\2\1\uffff\1\u0097\4\2\1\u0091\1\2\1\u0095\4\2"+
            "\1\u0091\5\2\1\u0091\1\2\1\u0095\3\2\1\u0091\2\2\14\uffff\1"+
            "\u0097\11\uffff\3\2\2\uffff\1\2\3\uffff\1\u0091\5\uffff\3\u0097"+
            "\20\uffff\1\2\4\uffff\1\2\2\uffff\1\u0097\5\uffff\1\u0097\1"+
            "\uffff\1\u0097\3\uffff\1\u0097\12\uffff\1\u00b2\1\uffff\1\u0097"+
            "\4\uffff\1\u0091",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "682:14: ( type_convertion )?";
        }
    }
    static final String DFA104_eotS =
        "\u009d\uffff";
    static final String DFA104_eofS =
        "\1\2\30\uffff\1\2\25\uffff\1\113\155\uffff";
    static final String DFA104_minS =
        "\2\5\27\uffff\1\5\23\uffff\3\5\155\uffff";
    static final String DFA104_maxS =
        "\1\u00b7\1\u00be\27\uffff\1\u00b7\23\uffff\3\u00be\155\uffff";
    static final String DFA104_acceptS =
        "\2\uffff\1\2\110\uffff\1\1\1\uffff\1\1\22\uffff\1\1\27\uffff\3\1"+
        "\3\uffff\1\1\11\uffff\1\1\3\uffff\1\1\20\uffff";
    static final String DFA104_specialS =
        "\u009d\uffff}>";
    static final String[] DFA104_transitionS = {
            "\1\2\12\uffff\2\2\42\uffff\1\2\7\uffff\3\2\1\uffff\4\2\2\uffff"+
            "\2\2\1\1\10\2\1\uffff\13\2\1\uffff\2\2\26\uffff\3\2\2\uffff"+
            "\1\2\34\uffff\1\2\36\uffff\1\2",
            "\1\2\56\uffff\1\31\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\55\12\uffff\1\2\1\56\4\uffff\1\2\35\uffff\1\2\7\uffff\10"+
            "\2\1\uffff\10\2\1\57\3\2\1\uffff\13\2\1\uffff\2\2\26\uffff\3"+
            "\2\2\uffff\1\2\34\uffff\1\2\4\uffff\1\2\31\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\115\13\uffff\1\113\42\uffff\1\2\7\uffff\1\2\2\uffff\1\2"+
            "\5\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\113\3\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff"+
            "\3\2\30\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\20\uffff\1\2\35\uffff\1\140\7\uffff\1\2\2\uffff\1\2\4"+
            "\uffff\2\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2"+
            "\20\uffff\1\2\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\171\12\uffff\1\u0088\1\113\42\uffff\1\u0088\7\uffff\1\176"+
            "\2\113\1\2\1\u008c\3\113\1\uffff\1\2\4\113\1\172\1\113\1\170"+
            "\4\113\1\2\3\113\1\u008c\1\113\1\172\1\113\1\170\3\113\1\2\2"+
            "\113\14\uffff\1\2\11\uffff\1\113\2\u0088\2\uffff\1\113\3\uffff"+
            "\1\2\5\uffff\3\2\20\uffff\1\u008c\7\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\12\uffff\1\u008c\1\uffff\1\2\4\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "710:29: ( generic )?";
        }
    }
    static final String DFA192_eotS =
        "\u00b5\uffff";
    static final String DFA192_eofS =
        "\u00b5\uffff";
    static final String DFA192_minS =
        "\1\64\3\uffff\1\5\1\uffff\3\5\1\uffff\1\5\21\uffff\1\5\23\uffff"+
        "\1\5\16\uffff\1\5\16\uffff\1\5\146\uffff";
    static final String DFA192_maxS =
        "\1\u00b9\3\uffff\1\u00be\1\uffff\1\u009d\2\167\1\uffff\1\167\21"+
        "\uffff\1\u00be\23\uffff\1\u00be\16\uffff\1\u00be\16\uffff\1\u00be"+
        "\146\uffff";
    static final String DFA192_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\uffff\1\5\3\uffff\1\4\1\uffff\1\6\21\uffff"+
        "\1\4\23\uffff\1\4\16\uffff\1\4\16\uffff\1\4\15\uffff\3\4\1\uffff"+
        "\1\4\21\uffff\3\4\1\uffff\1\4\21\uffff\3\4\1\uffff\1\4\21\uffff"+
        "\3\4\1\uffff\1\4\21\uffff";
    static final String DFA192_specialS =
        "\u00b5\uffff}>";
    static final String[] DFA192_transitionS = {
            "\1\1\17\uffff\1\4\47\uffff\1\5\30\uffff\1\2\46\uffff\1\3\14"+
            "\uffff\1\3",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\35\uffff\1\6\7\uffff\1\13\2\uffff\1\13"+
            "\4\uffff\1\11\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\12\22\uffff"+
            "\1\13\5\uffff\1\7\2\13\30\uffff\1\13\5\uffff\1\13\1\uffff\1"+
            "\13\3\uffff\1\10\12\uffff\1\13\1\uffff\1\10\4\uffff\1\13",
            "",
            "\1\13\13\uffff\1\34\4\uffff\1\13\45\uffff\10\13\1\uffff\14"+
            "\13\1\uffff\13\13\1\uffff\2\13\27\uffff\1\35\45\uffff\1\13",
            "\1\13\13\uffff\1\60\52\uffff\3\13\1\uffff\4\13\2\uffff\13\13"+
            "\1\uffff\13\13\1\uffff\2\13\27\uffff\1\61",
            "\1\13\13\uffff\1\77\52\uffff\3\13\1\uffff\4\13\2\uffff\13\13"+
            "\1\uffff\13\13\1\uffff\2\13\27\uffff\1\100",
            "",
            "\1\13\13\uffff\1\116\52\uffff\3\13\1\uffff\4\13\2\uffff\13"+
            "\13\1\uffff\13\13\1\uffff\2\13\27\uffff\1\117",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\35\uffff\1\135\7\uffff\1\13\2\uffff\1\13"+
            "\4\uffff\1\117\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\141\22\uffff"+
            "\1\13\5\uffff\1\136\2\13\30\uffff\1\13\5\uffff\1\13\1\uffff"+
            "\1\13\3\uffff\1\137\12\uffff\1\13\1\uffff\1\137\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\35\uffff\1\163\7\uffff\1\13\2\uffff\1\13"+
            "\4\uffff\1\117\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\167\22\uffff"+
            "\1\13\5\uffff\1\164\2\13\30\uffff\1\13\5\uffff\1\13\1\uffff"+
            "\1\13\3\uffff\1\165\12\uffff\1\13\1\uffff\1\165\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\35\uffff\1\u0089\7\uffff\1\13\2\uffff\1"+
            "\13\4\uffff\1\117\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13"+
            "\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\u008d\22"+
            "\uffff\1\13\5\uffff\1\u008a\2\13\30\uffff\1\13\5\uffff\1\13"+
            "\1\uffff\1\13\3\uffff\1\u008b\12\uffff\1\13\1\uffff\1\u008b"+
            "\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\35\uffff\1\u009f\7\uffff\1\13\2\uffff\1"+
            "\13\4\uffff\1\117\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13"+
            "\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\u00a3\22"+
            "\uffff\1\13\5\uffff\1\u00a0\2\13\30\uffff\1\13\5\uffff\1\13"+
            "\1\uffff\1\13\3\uffff\1\u00a1\12\uffff\1\13\1\uffff\1\u00a1"+
            "\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA192_eot = DFA.unpackEncodedString(DFA192_eotS);
    static final short[] DFA192_eof = DFA.unpackEncodedString(DFA192_eofS);
    static final char[] DFA192_min = DFA.unpackEncodedStringToUnsignedChars(DFA192_minS);
    static final char[] DFA192_max = DFA.unpackEncodedStringToUnsignedChars(DFA192_maxS);
    static final short[] DFA192_accept = DFA.unpackEncodedString(DFA192_acceptS);
    static final short[] DFA192_special = DFA.unpackEncodedString(DFA192_specialS);
    static final short[][] DFA192_transition;

    static {
        int numStates = DFA192_transitionS.length;
        DFA192_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA192_transition[i] = DFA.unpackEncodedString(DFA192_transitionS[i]);
        }
    }

    class DFA192 extends DFA {

        public DFA192(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 192;
            this.eot = DFA192_eot;
            this.eof = DFA192_eof;
            this.min = DFA192_min;
            this.max = DFA192_max;
            this.accept = DFA192_accept;
            this.special = DFA192_special;
            this.transition = DFA192_transition;
        }
        public String getDescription() {
            return "1071:1: value : ( ID | string_value | null_stmt | array | NUMBER | struct_init2 );";
        }
    }
 

    public static final BitSet FOLLOW_code_internal_in_code411 = new BitSet(new long[]{0x0010000000040002L,0x0000000000000000L,0x0010001801000204L});
    public static final BitSet FOLLOW_operator_wrapper_in_code_internal425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_in_operator_wrapper442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_wrapper_in_operator460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_operator466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_wrapper_in_operator471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_operator478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_operator484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_extern522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_156_in_extern525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_FBR_in_extern528 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFF7FFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_extern530 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_extern535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_implementation566 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_implementation569 = new BitSet(new long[]{0x8010000000010000L,0x0000000000800400L,0x1010020001000204L});
    public static final BitSet FOLLOW_category_in_implementation572 = new BitSet(new long[]{0x0010000000010000L,0x0000000000800400L,0x1010020001000204L});
    public static final BitSet FOLLOW_super_class_in_implementation575 = new BitSet(new long[]{0x0010000000000000L,0x0000000000800400L,0x1010020001000204L});
    public static final BitSet FOLLOW_implementation_body_in_implementation580 = new BitSet(new long[]{0x0010000000000000L,0x0000000000800400L,0x1010020201000204L});
    public static final BitSet FOLLOW_161_in_implementation585 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_category600 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_category603 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_category606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_in_implementation_body630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_implementation_body636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_wrapper_in_implementation_body648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_implementation_body654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_synthesize683 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize686 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synthesize689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_typedef701 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_typedef705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_typedef709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_in_static_section_wrapper724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_section744 = new BitSet(new long[]{0x0010000002040000L,0x0800000000000010L,0x0100000001000200L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_section746 = new BitSet(new long[]{0x0010000002000000L,0x0800000000000010L,0x0100000001000200L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_static_section749 = new BitSet(new long[]{0x0010000002000000L,0x0800000000000010L,0x0100000001000000L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_static_section752 = new BitSet(new long[]{0x0010000000000000L,0x0800000000000010L,0x0100000001000000L});
    public static final BitSet FOLLOW_static_section2_in_static_section755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_section_in_static_section2764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper2_in_static_section2771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section3_in_static_section2778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_inline_section790 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_field_type_in_inline_section793 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_inline_section795 = new BitSet(new long[]{0x8000000000000000L,0x0800000000000010L});
    public static final BitSet FOLLOW_method_params2_in_inline_section798 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000010L});
    public static final BitSet FOLLOW_block_wrapper_in_inline_section802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_inline_section806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_static_section3817 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_static_section3819 = new BitSet(new long[]{0x8000000000000000L,0x0800000000000024L});
    public static final BitSet FOLLOW_indexed_in_static_section3821 = new BitSet(new long[]{0x8000000000000000L,0x0800000000000024L});
    public static final BitSet FOLLOW_static_end_in_static_section3825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper3_in_static_end837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_in_static_end843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_internal_in_field_end854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_end_internal872 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_end_internal875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method3_in_implementation_method_wrapper3887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body3_in_implementation_method3905 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000010L,0x0000200000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method3908 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L,0x0000200000000000L});
    public static final BitSet FOLLOW_attribute_in_implementation_method3913 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method3918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_attribute931 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_attribute934 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_attribute937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_176_in_attribute940 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute943 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute946 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_attribute949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method2961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method2966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_in_field_type_started_wrapper978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_field_type_started997 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_field_type_started999 = new BitSet(new long[]{0x8000000000000000L,0x0800000000000004L});
    public static final BitSet FOLLOW_classic_method_declaration_wrapper_in_field_type_started1002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_wrapper_in_field_type_started1006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_classic_method_declaration1055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_block_wrapper_in_classic_method_declaration1060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_in_implementation_method_wrapper1073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method2_in_implementation_method_wrapper21090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_implementation_method1107 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000010L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method1109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method1114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_block_wrapper1127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block1149 = new BitSet(new long[]{0x9010000002040120L,0xC880100022821430L,0xCEEC5D41010002E4L});
    public static final BitSet FOLLOW_block_internal_full_in_block1155 = new BitSet(new long[]{0x9010000002040120L,0xC880100022821430L,0xCEEC5D41010002E4L});
    public static final BitSet FOLLOW_block_in_block1159 = new BitSet(new long[]{0x9010000002040120L,0xC880100022821430L,0xCEEC5D41010002E4L});
    public static final BitSet FOLLOW_R_FBR_in_block1167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block_case1182 = new BitSet(new long[]{0x9010000002040120L,0xC880100022821430L,0xCEEE5D41010002E4L});
    public static final BitSet FOLLOW_block_internal_full_in_block_case1188 = new BitSet(new long[]{0x9010000002040120L,0xC880100022821430L,0xCEEE5D41010002E4L});
    public static final BitSet FOLLOW_block_in_block_case1192 = new BitSet(new long[]{0x9010000002040120L,0xC880100022821430L,0xCEEE5D41010002E4L});
    public static final BitSet FOLLOW_default_stmt_in_block_case1201 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_block_case1206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_full1218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_in_block_internal1229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_wrapper_in_block_internal1239 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expression_in_block_internal1251 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_wrapper_in_block_internal1258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_wrapper_in_block_internal1263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_wrapper_in_block_internal1273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_operators_in_block_internal1293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_variable_in_block_internal1298 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_variable_in_block_internal1305 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_started_in_block_internal1312 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_type_started_in_block_internal1319 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_in_variable_init_wrapper1338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_variable_init1356 = new BitSet(new long[]{0x0010000000010000L,0x0800000000000000L,0x0080000001000000L});
    public static final BitSet FOLLOW_full_expr2_in_variable_init1360 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_variable_init1363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_variable_init1368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_types_in_known_type_started1380 = new BitSet(new long[]{0x0010000000000020L,0x0000000000000000L,0x0080000001000000L});
    public static final BitSet FOLLOW_ASTERISK_in_known_type_started1382 = new BitSet(new long[]{0x0010000000000020L,0x0000000000000000L,0x0080000001000000L});
    public static final BitSet FOLLOW_full_expr2_in_known_type_started1385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_in_typeof_started1397 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_typeof_started1399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_variable1412 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_struct_variable1414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_enum_variable1423 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_enum_variable1425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_const_expression1436 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_const_expression1438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper1447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_throw_stmt1464 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_throw_stmt1467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_try_stmt1478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_block_in_try_stmt1481 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000480000000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt1484 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000480000000L});
    public static final BitSet FOLLOW_162_in_try_stmt1488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_block_in_try_stmt1491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_catch_stmt1505 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_catch_stmt1508 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1511 = new BitSet(new long[]{0x0010000000000020L});
    public static final BitSet FOLLOW_ASTERISK_in_catch_stmt1514 = new BitSet(new long[]{0x0010000000000020L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1517 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_catch_stmt1520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_block_in_catch_stmt1523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_switch_stmt_wrapper1536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_switch_stmt1553 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_switch_stmt1556 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_switch_expr_in_switch_stmt1559 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_switch_stmt1561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_switch_body_wrapper_in_switch_stmt1567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_switch_body_wrapper1580 = new BitSet(new long[]{0x9010000002040120L,0xC880100022821420L,0xCEEEDD41010002E4L});
    public static final BitSet FOLLOW_switch_body_in_switch_body_wrapper1582 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_switch_body_wrapper1584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_switch_body1603 = new BitSet(new long[]{0x9010000002040122L,0xC800100022821420L,0xCEEEDD41010002E4L});
    public static final BitSet FOLLOW_switch_internal_in_switch_body1608 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002800000000000L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_switch_expr1621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_wrapper_in_switch_internal1638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_wrapper_in_switch_internal1644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_case_stmt_wrapper1653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_case_stmt1670 = new BitSet(new long[]{0x0010000000000000L,0x0000100000000000L,0x02001000000000E0L});
    public static final BitSet FOLLOW_case_expr_wrapper_in_case_stmt1673 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_case_stmt1676 = new BitSet(new long[]{0x9010000002040122L,0xC800100022821430L,0xCEEC5D41010002E4L});
    public static final BitSet FOLLOW_case_body_wrapper_in_case_stmt1681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_body_in_case_body_wrapper1695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_case_body1714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_case_body1721 = new BitSet(new long[]{0x9010000002040122L,0xC800100022821420L,0xCEEC5D41010002E4L});
    public static final BitSet FOLLOW_case_expr_in_case_expr_wrapper1737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_case_expr1759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_case_expr1766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_case_in_block_break1777 = new BitSet(new long[]{0x0000000000000102L,0x4000000000000000L});
    public static final BitSet FOLLOW_single_operators_in_block_break1779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_default_stmt_wrapper1791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_default_stmt1808 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_default_stmt1811 = new BitSet(new long[]{0x9010000002040122L,0xC800100022821430L,0xCEEC5D41010002E4L});
    public static final BitSet FOLLOW_default_body_wrapper_in_default_stmt1816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_body_in_default_body_wrapper1829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_default_body1849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_default_body1855 = new BitSet(new long[]{0x9010000002040122L,0xC800100022821420L,0xCEEC5D41010002E4L});
    public static final BitSet FOLLOW_SINGLE_OP_in_single_operators1870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_wrapper_in_single_operators1877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_break_wrapper1889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_WORD_in_break_stmt1907 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_break_stmt1910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_do_stmt1920 = new BitSet(new long[]{0x9010000002040120L,0xC800100022821430L,0xCEEC5D41010002E4L});
    public static final BitSet FOLLOW_if_stmt_block_in_do_stmt1923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_191_in_do_stmt1926 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_do_stmt1929 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_expression_in_do_stmt1932 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_do_stmt1934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper1943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_while_stmt1962 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_while_stmt1965 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_while_expr_in_while_stmt1968 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_while_stmt1970 = new BitSet(new long[]{0x9010000002040120L,0xC800100022821430L,0xCEEC5D41010002E4L});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_while_stmt1973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_while_expr1986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper2005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_for_stmt2022 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_for_stmt2025 = new BitSet(new long[]{0x9010000000000020L,0x8800100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_for_stmt_expr_wrapper_in_for_stmt2028 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_for_stmt2030 = new BitSet(new long[]{0x9010000002040120L,0xC800100022821430L,0xCEEC5D41010002E4L});
    public static final BitSet FOLLOW_if_stmt_block_in_for_stmt2033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_expr_in_for_stmt_expr_wrapper2045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_for_stmt_expr2064 = new BitSet(new long[]{0x0010000000000000L,0x0800000000000000L,0x0080000001000000L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr2_in_for_stmt_expr2072 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_for_stmt_int12106 = new BitSet(new long[]{0x8010000000000000L,0x0000100000000020L,0x42801141000000E0L});
    public static final BitSet FOLLOW_object_wrapped2_in_for_stmt_int12108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22128 = new BitSet(new long[]{0x9010000000000020L,0x8800100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22130 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22133 = new BitSet(new long[]{0x9010000000000022L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_return_stmt2152 = new BitSet(new long[]{0x9010000000000020L,0x8800100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_return_stmt2154 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_return_stmt2157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_if_stmt_wrapper2178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_if_stmt2194 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_if_stmt2197 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_if_expr_in_if_stmt2200 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_if_stmt2202 = new BitSet(new long[]{0x9010000002040120L,0xC800100022821430L,0xCEEC5D41010002E4L});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_if_stmt2205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_if_expr2218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_else_stmt2237 = new BitSet(new long[]{0x9010000002040120L,0xC800100022821430L,0xCEEC5D41010002E4L});
    public static final BitSet FOLLOW_if_stmt_block_in_else_stmt2240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_if_stmt_block2266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_if_stmt_block2272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_in_static_start_wrapper2284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_start2302 = new BitSet(new long[]{0x0010000000040000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_start2304 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_static_type_wrapper_in_static_start2307 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000001000000L});
    public static final BitSet FOLLOW_full_expr2_in_static_start2309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_type_in_static_type_wrapper2321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_static_type2341 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASTERISK_in_static_type2343 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_id_part_end_internal_in_id_part_end2357 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_DOT_in_id_part_end_internal2372 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_157_in_id_part_end_internal2376 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_id_part_in_id_part_end_internal2379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_internal_in_id_part2417 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_function_brackets_wrapper_in_id_part2419 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_index_in_id_part2422 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_id_part_in_object_name2435 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_name2437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_method_call_wrapper2451 = new BitSet(new long[]{0x8010000000000000L,0x0000000000000020L,0x0080000000000020L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper2453 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_method_call_wrapper2455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper22478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_in_method_call22497 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_method_name_in_method_call22499 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_method_call_message_list_wrapper_in_method_call22503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_internal_in_object_wrapper2514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_in_object_wrapper_internal2533 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000020L,0x0080000000000000L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_object_wrapper_internal2556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_message32568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_type_convertion2587 = new BitSet(new long[]{0x0010000000040000L,0x0000000000000000L,0x4000000001000000L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_convertion2589 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x4000000001000000L});
    public static final BitSet FOLLOW_190_in_type_convertion2592 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_type_internal_in_type_convertion2595 = new BitSet(new long[]{0x0000000000000020L,0x0040000000000100L});
    public static final BitSet FOLLOW_generic_in_type_convertion2597 = new BitSet(new long[]{0x0000000000000020L,0x0040000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_type_convertion2600 = new BitSet(new long[]{0x0000000000000020L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_type_convertion2603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name2624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2658 = new BitSet(new long[]{0x0010000000010002L});
    public static final BitSet FOLLOW_method_call_message_wrapper_in_method_call_message_list2660 = new BitSet(new long[]{0x0010000000010002L});
    public static final BitSet FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_method_call_message_first2688 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_message_in_method_call_message_first2691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_in_method_call_message_wrapper2701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_in_method_call_message2720 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_incomplete_prefix_in_method_call_message2724 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_message_in_method_call_message2728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_msg_expr_in_message2737 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_message2740 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_msg_expr_in_message2742 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_msg_expr2776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expression2792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_in_expression2797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_in_full_expr_wrapper2808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr2825 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr2828 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr2830 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr22841 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr22844 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000001000000L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr22846 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_expr_assign_in_expr_assign_wrapper2857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_wrapper_in_expr_assign2876 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821430L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_assign2879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_in_expr_assign2883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer2_in_expr_assign2888 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_method_call_wrapper_in_expr_assign2890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array_init2903 = new BitSet(new long[]{0x9010000000000020L,0x8080100022821430L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init2906 = new BitSet(new long[]{0x0000000000020000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array_init2909 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821430L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init2911 = new BitSet(new long[]{0x0000000000020000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array_init2917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_in_classical_expr_wrp32929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_classical_expr_wrp32935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_in_classical_expr_wrp2948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_classical_expr2965 = new BitSet(new long[]{0x4000000000000002L,0x0000000095488886L});
    public static final BitSet FOLLOW_expr_question_wrapper_in_classical_expr2968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr2972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr2_in_classical_expr_wrp22984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_classical_expr23002 = new BitSet(new long[]{0x4000000000000002L,0x0000000091488886L});
    public static final BitSet FOLLOW_func_pointer1_in_classical_expr23006 = new BitSet(new long[]{0x4000000000000002L,0x0000000091488886L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr23009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_question_in_expr_question_wrapper3019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_QUESTION_in_expr_question3036 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question3038 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_expr_question3040 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question3042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_in_assign_wrapper3051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_in_simple_expr_wrapper3124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_or_in_simple_expr3142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_and_wrapper_in_expr_or_or3159 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_L_OR_OR_in_expr_or_or3162 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_or_or3164 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_expr_and_and_in_expr_and_and_wrapper3175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_wrapper_in_expr_and_and3192 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_L_AND_AND_in_expr_and_and3195 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_and_and3197 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_expr_or_in_expr_or_wrapper3208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_xor_wrapper_in_expr_or3226 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_L_OR_in_expr_or3229 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_or3231 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_expr_xor_in_expr_xor_wrapper3242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_wrapper_in_expr_xor3259 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_L_XOR_in_expr_xor3262 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_xor3264 = new BitSet(new long[]{0x0000000000000002L,0x0000000040000000L});
    public static final BitSet FOLLOW_expr_and_in_expr_and_wrapper3276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eq_wrapper_in_expr_and3294 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_L_AND_in_expr_and3297 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_and3299 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_expr_eq_in_expr_eq_wrapper3311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_cond_wrapper_in_expr_eq3329 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010008L});
    public static final BitSet FOLLOW_set_in_expr_eq3332 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_eq3340 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010008L});
    public static final BitSet FOLLOW_expr_cond_in_expr_cond_wrapper3351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mov_wrapper_in_expr_cond3368 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006300L});
    public static final BitSet FOLLOW_set_in_expr_cond3371 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_cond3387 = new BitSet(new long[]{0x0000000000000002L,0x0000000000006300L});
    public static final BitSet FOLLOW_expr_mov_in_expr_mov_wrapper3398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_add_wrapper_in_expr_mov3416 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000040L});
    public static final BitSet FOLLOW_set_in_expr_mov3419 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_mov3427 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000040L});
    public static final BitSet FOLLOW_expr_add_in_expr_add_wrapper3439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mult_wrapper_in_expr_add3456 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800400L});
    public static final BitSet FOLLOW_set_in_expr_add3459 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_add3467 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800400L});
    public static final BitSet FOLLOW_expr_mult_in_expr_mult_wrapper3478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_type_wrapper_in_expr_mult3495 = new BitSet(new long[]{0x0000000000000022L,0x0000000000200001L});
    public static final BitSet FOLLOW_set_in_expr_mult3498 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_mult3510 = new BitSet(new long[]{0x0000000000000022L,0x0000000000200001L});
    public static final BitSet FOLLOW_expr_type_in_expr_type_wrapper3522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_in_expr_type3539 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_expr_unname_in_expr_type3542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_expr_unname3553 = new BitSet(new long[]{0x9010000000000000L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_type_convertion_in_expr_unname3555 = new BitSet(new long[]{0x9010000000000000L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_expr_addr_in_expr_unname3560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_AND_in_expr_addr3570 = new BitSet(new long[]{0x8010000000000000L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_expr_sign_in_expr_addr3573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_wrapper_in_expr_sign3592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_in_expr_not_wrapper3602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_NOT_in_expr_not3621 = new BitSet(new long[]{0x8010000000000000L,0x8000100022001020L,0x42801141000000E0L});
    public static final BitSet FOLLOW_expr_not2_in_expr_not3624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_TILDA_in_expr_not23633 = new BitSet(new long[]{0x8010000000000000L,0x8000100002001020L,0x42801141000000E0L});
    public static final BitSet FOLLOW_expr_size_of_in_expr_not23636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_expr_size_of3646 = new BitSet(new long[]{0x8010000000000000L,0x0000100002001020L,0x42801141000000E0L});
    public static final BitSet FOLLOW_expr_xcrement_in_expr_size_of3649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped1_in_expr_xcrement3668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped2_in_object_wrapped13678 = new BitSet(new long[]{0x0000000000000002L,0x0000000002001000L});
    public static final BitSet FOLLOW_190_in_object_wrapped23699 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_object_name_in_object_wrapped23702 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_generic_in_object_wrapped23704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapped23710 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_object_wrapped23718 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_object_wrapped23720 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_object_wrapped23722 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_object_wrapped23730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_started_in_object_wrapped23735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_brackets_in_function_brackets_wrapper3747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_function_brackets3766 = new BitSet(new long[]{0x9010000000000020L,0x8040100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets3769 = new BitSet(new long[]{0x0000000000020000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_function_brackets3772 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets3774 = new BitSet(new long[]{0x0000000000020000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_function_brackets3780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index3790 = new BitSet(new long[]{0x9010000000000020L,0x8100100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index3792 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index3795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_struct_init3805 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_init3808 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_ID_in_struct_init3811 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_struct_init3814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init3817 = new BitSet(new long[]{0x9010000000400020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init3823 = new BitSet(new long[]{0x0000000000020000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init3826 = new BitSet(new long[]{0x9010000000400020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init3829 = new BitSet(new long[]{0x0000000000020000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init3835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init23849 = new BitSet(new long[]{0x9010000000400020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init23855 = new BitSet(new long[]{0x0000000000020000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init23858 = new BitSet(new long[]{0x9010000000400020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init23861 = new BitSet(new long[]{0x0000000000020000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init23867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_var_in_struct_init_line3880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_expression_in_struct_init_line3885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_expression3898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_method3909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_struct_init_var3921 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_id_part_in_struct_init_var3923 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000004L});
    public static final BitSet FOLLOW_L_EQ_in_struct_init_var3928 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821430L,0x42801141000000E0L});
    public static final BitSet FOLLOW_in_q_brackets_in_struct_init_var3932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_struct_init_var3936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_wrapper_in_a_started3948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_wrapper_in_a_started3953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_wrapper_in_a_started3958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_typeof3968 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_typeof3971 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_ID_in_typeof3974 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_typeof3977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_in_a_selector_wrapper3988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_a_selector4005 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_a_selector4007 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_selector4009 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_selector4011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_in_a_protocol_wrapper4021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_a_protocol4039 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_a_protocol4041 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_protocol4043 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_protocol4045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_in_a_encode_wrapper4055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_value_in_a_selector_value_wrapper4072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_a_selector_value4091 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4095 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_ID_in_a_selector_value4099 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4102 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_160_in_a_encode4113 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_a_encode4115 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFBFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_R_BR_in_a_encode4123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_const_expr4134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_const_expr4138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL2_in_const_expr4142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_const_expr4146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_const_expr4150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_string_literal34160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_brackets4170 = new BitSet(new long[]{0x9010000000000020L,0x8040100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_expression_in_method_brackets4174 = new BitSet(new long[]{0x0000000000020000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_brackets4178 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_brackets4181 = new BitSet(new long[]{0x0000000000020000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_brackets4187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14197 = new BitSet(new long[]{0x8000000000000020L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14200 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer14203 = new BitSet(new long[]{0x0010000000000020L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14205 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14208 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer14211 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer14214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24227 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer24230 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24232 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer24235 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24238 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer24241 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer_params4257 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4260 = new BitSet(new long[]{0x0000000000020020L,0x0040000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4263 = new BitSet(new long[]{0x0000000000020020L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_func_pointer_params4267 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4270 = new BitSet(new long[]{0x0000000000020020L,0x0040000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4273 = new BitSet(new long[]{0x0000000000020020L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer_params4278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_in_brackets_end14288 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_expression_in_in_brackets_end14291 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_in_brackets_end14294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_start_in_in_brackets_end14299 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_index_brackets_in_in_brackets_end14301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_in_brackets_end14307 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_method_start_in_in_brackets_end14315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_in_brackets_end14320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_in_brackets_end24332 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_expression_in_in_brackets_end24335 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_in_brackets_end24338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_in_brackets_end24343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_start4356 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_method_brackets_in_method_start4358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_in_q_brackets4369 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821430L,0x42801141000000E0L});
    public static final BitSet FOLLOW_q_brackets_source_in_in_q_brackets4372 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_in_q_brackets4374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_source_in_q_brackets_source4386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_br_source_in_q_brackets_source4391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4404 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4411 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_q_source4427 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_source4431 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_expression_in_q_source4434 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_ID_in_simple_method_call4451 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_method_brackets_in_simple_method_call4453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index_brackets4469 = new BitSet(new long[]{0x9010000000000020L,0x8000100022821420L,0x42801141000000E0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_brackets4472 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index_brackets4474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper4488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_interface_declaration4506 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_interface_declaration4509 = new BitSet(new long[]{0x8000000002010000L,0x0000000000800410L});
    public static final BitSet FOLLOW_interface_category_in_interface_declaration4512 = new BitSet(new long[]{0x0000000002010000L,0x0000000000800410L});
    public static final BitSet FOLLOW_super_class_in_interface_declaration4516 = new BitSet(new long[]{0x0000000002000000L,0x0000000000800410L});
    public static final BitSet FOLLOW_annotated_block_in_interface_declaration4523 = new BitSet(new long[]{0x0000000002000000L,0x0000000000800410L,0x0000000200000000L});
    public static final BitSet FOLLOW_interface_methods_in_interface_declaration4527 = new BitSet(new long[]{0x0000000002000000L,0x0000000000800410L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_interface_declaration4536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_annotated_block4547 = new BitSet(new long[]{0x0010000000000000L,0x0080000000000000L,0x200000A001000000L});
    public static final BitSet FOLLOW_annotated_block_internal_in_annotated_block4552 = new BitSet(new long[]{0x0010000000000000L,0x0080000000000000L,0x200000A001000000L});
    public static final BitSet FOLLOW_R_FBR_in_annotated_block4557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_annotation_in_annotated_block_internal4570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_public_block_internal_in_annotated_block_internal4577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_field_declaration_in_public_block_internal4612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_declaration_in_public_block_internal4617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_simple_field_declaration4629 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_simple_field_declaration4631 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_field_declaration4634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_union_declaration4647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_FBR_in_union_declaration4650 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_simple_field_declaration_in_union_declaration4656 = new BitSet(new long[]{0x0010000000000000L,0x0080000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_R_FBR_in_union_declaration4661 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_ID_in_union_declaration4664 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_union_declaration4667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_super_class4681 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_ID_in_super_class4684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_interface_category4704 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_ID_in_interface_category4707 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_interface_category4710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_declaration_in_interface_methods4739 = new BitSet(new long[]{0x0000000002000002L,0x0000000000800400L});
    public static final BitSet FOLLOW_interface_method_in_interface_methods4743 = new BitSet(new long[]{0x0000000002000002L,0x0000000000800400L});
    public static final BitSet FOLLOW_method_header_in_interface_method4755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_method_header4774 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_method_header4776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_header_body4786 = new BitSet(new long[]{0x8000000000000000L});
    public static final BitSet FOLLOW_method_type_in_method_header_body4789 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_method_header_body4792 = new BitSet(new long[]{0x8010000000030002L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_method_params_in_method_header_body4795 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_va_args_wrapper_in_method_header_body4798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_va_args_in_va_args_wrapper4808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_va_args4825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_158_in_va_args4828 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_va_args4831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_type_in_method_header_body24842 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_method_header_body24844 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body24847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body34857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper4866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type4898 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000001000200L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_type4901 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_type_internal_in_method_type4904 = new BitSet(new long[]{0x0000000000000020L,0x0040000000000100L});
    public static final BitSet FOLLOW_generic_in_method_type4907 = new BitSet(new long[]{0x0000000000000020L,0x0040000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type4910 = new BitSet(new long[]{0x0000000000000020L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type4913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type4927 = new BitSet(new long[]{0x0010000000040020L,0x0040000000000100L,0x4000000001000000L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_type4930 = new BitSet(new long[]{0x0010000000000020L,0x0040000000000100L,0x4000000001000000L});
    public static final BitSet FOLLOW_known_types_in_method_type4933 = new BitSet(new long[]{0x0010000000000020L,0x0040000000000100L});
    public static final BitSet FOLLOW_ID_in_method_type4936 = new BitSet(new long[]{0x0010000000000020L,0x0040000000000100L});
    public static final BitSet FOLLOW_generic_in_method_type4939 = new BitSet(new long[]{0x0000000000000020L,0x0040000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type4942 = new BitSet(new long[]{0x0000000000000020L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type4945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal1_in_type_internal4970 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_L_KBR_in_type_internal4973 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_type_internal4976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_LESS_in_generic5009 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_generic_internal_in_generic5011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_L_MORE_in_generic5013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_generic_internal5032 = new BitSet(new long[]{0x0000000000020022L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal5035 = new BitSet(new long[]{0x0000000000020022L});
    public static final BitSet FOLLOW_COMMA_in_generic_internal5039 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_ID_in_generic_internal5042 = new BitSet(new long[]{0x0000000000020022L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal5045 = new BitSet(new long[]{0x0000000000020022L});
    public static final BitSet FOLLOW_L_BR_in_method_params25057 = new BitSet(new long[]{0x0010000002040000L,0x0000000000000000L,0x4000000001000200L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25060 = new BitSet(new long[]{0x0000000000020000L,0x0040000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_params25064 = new BitSet(new long[]{0x0010000002040000L,0x0000000000000000L,0x4000000001000200L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25067 = new BitSet(new long[]{0x0000000000020000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_params25071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param2_in_method_param_wrapper25082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_param25100 = new BitSet(new long[]{0x0010000002000000L,0x0000000000000000L,0x4000000001000200L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_method_param25103 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x4000000001000200L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_param25106 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x4000000001000000L});
    public static final BitSet FOLLOW_190_in_method_param25109 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_field_type_in_method_param25112 = new BitSet(new long[]{0x0010000000000002L,0x0000000000000020L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_method_param25114 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_indexed_in_method_param25117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_indexed5127 = new BitSet(new long[]{0x0000000000000000L,0x0100100000000000L});
    public static final BitSet FOLLOW_NUMBER_in_indexed5129 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_indexed5132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params5142 = new BitSet(new long[]{0x8010000000010002L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_prefix_in_method_param5164 = new BitSet(new long[]{0x8010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COLON_in_method_param5169 = new BitSet(new long[]{0x8010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_method_type_in_method_param5172 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_method_param5175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5187 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_prefix5189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_incomplete_prefix5208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5250 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000010L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_struct_declaration5256 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_typedef_struct_body_in_typedef_struct_declaration5261 = new BitSet(new long[]{0x0010000000000000L,0x0080000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_struct_declaration5265 = new BitSet(new long[]{0x0010000000000002L,0x0800000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5268 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_struct_declaration5271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_struct_field5314 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_struct_field5316 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_field5320 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_struct_field5323 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_field5327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_enum_declaration5363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_typedef_declaration5383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_declaration5385 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5388 = new BitSet(new long[]{0x0000000000020000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_typedef_declaration5392 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5395 = new BitSet(new long[]{0x0000000000020000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_declaration5399 = new BitSet(new long[]{0x0010000000000000L,0x0800000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_typedef_declaration5402 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_declaration5405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_declaration_element5434 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_L_EQ_in_typedef_declaration_element5438 = new BitSet(new long[]{0x0010000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_set_in_typedef_declaration_element5441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper5462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_wrapper_in_field_declaration5479 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_field_type_in_field_declaration5482 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_field_declaration5484 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000004L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration5486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_declaration_end5497 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration_end5500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_in_type_start_wrapper5510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_start5527 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_field_type_in_type_start5530 = new BitSet(new long[]{0x0010000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_type_start5532 = new BitSet(new long[]{0x8000000000000000L,0x0800000000000004L});
    public static final BitSet FOLLOW_type_end_in_type_start5534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration4_in_type_end5542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration4_in_type_end5555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_declaration45577 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration45580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_declaration45593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_block_wrapper_in_method_declaration45598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_in_field_modifier_wrapper5610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_field_modifier5628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_internal_in_field_type5640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_field_type_internal5659 = new BitSet(new long[]{0x0000000000000022L,0x0000000000000100L});
    public static final BitSet FOLLOW_generic_in_field_type_internal5662 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASTERISK_in_field_type_internal5665 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_name_internal_in_name5679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_EQ_in_value_set5719 = new BitSet(new long[]{0x0010000000000000L,0x0000100000000010L,0x0200100000000020L});
    public static final BitSet FOLLOW_value_in_value_set5722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_value5738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_value_in_value5742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_value5746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_in_value5750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_value5754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init2_in_value5758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string_value5768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array5789 = new BitSet(new long[]{0x0010000000000000L,0x0000100000000010L,0x0200100000000020L});
    public static final BitSet FOLLOW_value_in_array5792 = new BitSet(new long[]{0x0000000000020000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array5796 = new BitSet(new long[]{0x0010000000000000L,0x0000100000000010L,0x0200100000000020L});
    public static final BitSet FOLLOW_value_in_array5799 = new BitSet(new long[]{0x0000000000020000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array5803 = new BitSet(new long[]{0x0000000000000002L});

}