// $ANTLR 3.4 Objcm.g 2012-11-06 23:56:42

package ru.andremoniy.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcmParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARRAY_INIT", "ASSIGN", "ASTERISK", "BLOCK", "BREAK", "BREAK_WORD", "CASE_BODY", "CASE_EXPR", "CASE_STMT", "CATEGORY", "CLASSICAL_EXPR", "CLASSICAL_EXPR_2", "COLON", "COMMA", "CONST_EXPR", "CONST_PREFIX", "DEFAULT_BODY", "DEFAULT_STMT", "DIGIT", "DOT", "ENCODE", "ENUM", "ENUM_PREFIX", "ESC", "EXPR", "EXPR_ADD", "EXPR_AND", "EXPR_AND_AND", "EXPR_ASSIGN", "EXPR_COND", "EXPR_EQ", "EXPR_FULL", "EXPR_MOV", "EXPR_MULT", "EXPR_NOT", "EXPR_OR", "EXPR_OR_OR", "EXPR_QUESTION", "EXPR_TYPE", "EXPR_XOR", "EXTERN", "FIELD", "FIELD_ACCESS", "FIELD_TYPE_STARTED", "FOR_IN_STMT", "FOR_STMT", "FOR_STMT_EXPR", "FUNCTION", "GENERIC", "GOTO", "ID", "IF_BLOCK", "IF_EXPR", "IF_STMT", "IMPLEMENTATION", "INCOMPLETE_PREFIX", "INDEX", "INDEX_NUMBER", "INTERFACE", "LETTER", "L_AND", "L_AND_AND", "L_AND_EQ", "L_BR", "L_DIV", "L_DIV_EQ", "L_EQ", "L_EQ_EQ", "L_FBR", "L_KBR", "L_LEFT", "L_LEFT_EQ", "L_LESS", "L_LESS_EQ", "L_MINUS", "L_MINUS_EQ", "L_MINUS_MINUS", "L_MORE", "L_MORE_EQ", "L_MULT_EQ", "L_NEQ", "L_NOT", "L_OR", "L_OR_EQ", "L_OR_OR", "L_PERC", "L_PERC_EQ", "L_PLUS", "L_PLUS_EQ", "L_PLUS_PLUS", "L_QUESTION", "L_RIGHT", "L_RIGHT_EQ", "L_TILDA", "L_XOR", "L_XOR_EQ", "MESSAGE", "METHOD", "METHOD_CALL", "METHOD_MSG", "METHOD_NAME", "MODIFIER", "MSG_LIST", "MULTI_COMMENT", "M_IMPORT", "M_TYPE_START", "NAME", "NOT", "NUMBER", "OBJECT", "OP", "OPER", "OPERATOR", "PARAM", "PREFIX", "PREPROCESSOR_DECLARATION", "PROTOCOL", "RETURN_STMT", "R_BR", "R_FBR", "R_KBR", "SELECTOR", "SELECTOR_VALUE", "SEMICOLON", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_OP", "SIZEOF", "STATIC", "STATIC_METHOD", "STATIC_PREFIX", "STATIC_START", "STATIC_TYPE", "STRING", "STRING_LITERAL", "STRING_LITERAL2", "STRING_LITERAL3", "STRUCT_FIELD", "STRUCT_PREFIX", "SUPER_CLASS", "SWITCH", "SWITCH_BODY", "SWITCH_EXPRESSION", "THROW_EXCEPTION", "THROW_STMT", "TYPE", "TYPEDEF", "TYPEDEF_ELEMENT", "TYPEDEF_STRUCT", "TYPE_CONVERTION", "TYPE_RENAME", "VALUE", "VARIABLE_INIT", "VA_ARGS", "VOID", "WHILE_EXPR", "WHILE_STMT", "WS", "'\"C\"'", "'->'", "'...'", "'@catch'", "'@encode'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@private'", "'@property'", "'@protocol'", "'@public'", "'@selector'", "'@synthesize'", "'@throw'", "'@try'", "'Nil'", "'__attribute__'", "'__typeof__'", "'assign'", "'case'", "'constructor'", "'copy'", "'default'", "'do'", "'else'", "'extern'", "'for'", "'goto'", "'if'", "'in'", "'inline'", "'nil'", "'readwrite'", "'return'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'while'"
    };

    public static final int EOF=-1;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int T__198=198;
    public static final int T__199=199;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int T__202=202;
    public static final int ARRAY_INIT=4;
    public static final int ASSIGN=5;
    public static final int ASTERISK=6;
    public static final int BLOCK=7;
    public static final int BREAK=8;
    public static final int BREAK_WORD=9;
    public static final int CASE_BODY=10;
    public static final int CASE_EXPR=11;
    public static final int CASE_STMT=12;
    public static final int CATEGORY=13;
    public static final int CLASSICAL_EXPR=14;
    public static final int CLASSICAL_EXPR_2=15;
    public static final int COLON=16;
    public static final int COMMA=17;
    public static final int CONST_EXPR=18;
    public static final int CONST_PREFIX=19;
    public static final int DEFAULT_BODY=20;
    public static final int DEFAULT_STMT=21;
    public static final int DIGIT=22;
    public static final int DOT=23;
    public static final int ENCODE=24;
    public static final int ENUM=25;
    public static final int ENUM_PREFIX=26;
    public static final int ESC=27;
    public static final int EXPR=28;
    public static final int EXPR_ADD=29;
    public static final int EXPR_AND=30;
    public static final int EXPR_AND_AND=31;
    public static final int EXPR_ASSIGN=32;
    public static final int EXPR_COND=33;
    public static final int EXPR_EQ=34;
    public static final int EXPR_FULL=35;
    public static final int EXPR_MOV=36;
    public static final int EXPR_MULT=37;
    public static final int EXPR_NOT=38;
    public static final int EXPR_OR=39;
    public static final int EXPR_OR_OR=40;
    public static final int EXPR_QUESTION=41;
    public static final int EXPR_TYPE=42;
    public static final int EXPR_XOR=43;
    public static final int EXTERN=44;
    public static final int FIELD=45;
    public static final int FIELD_ACCESS=46;
    public static final int FIELD_TYPE_STARTED=47;
    public static final int FOR_IN_STMT=48;
    public static final int FOR_STMT=49;
    public static final int FOR_STMT_EXPR=50;
    public static final int FUNCTION=51;
    public static final int GENERIC=52;
    public static final int GOTO=53;
    public static final int ID=54;
    public static final int IF_BLOCK=55;
    public static final int IF_EXPR=56;
    public static final int IF_STMT=57;
    public static final int IMPLEMENTATION=58;
    public static final int INCOMPLETE_PREFIX=59;
    public static final int INDEX=60;
    public static final int INDEX_NUMBER=61;
    public static final int INTERFACE=62;
    public static final int LETTER=63;
    public static final int L_AND=64;
    public static final int L_AND_AND=65;
    public static final int L_AND_EQ=66;
    public static final int L_BR=67;
    public static final int L_DIV=68;
    public static final int L_DIV_EQ=69;
    public static final int L_EQ=70;
    public static final int L_EQ_EQ=71;
    public static final int L_FBR=72;
    public static final int L_KBR=73;
    public static final int L_LEFT=74;
    public static final int L_LEFT_EQ=75;
    public static final int L_LESS=76;
    public static final int L_LESS_EQ=77;
    public static final int L_MINUS=78;
    public static final int L_MINUS_EQ=79;
    public static final int L_MINUS_MINUS=80;
    public static final int L_MORE=81;
    public static final int L_MORE_EQ=82;
    public static final int L_MULT_EQ=83;
    public static final int L_NEQ=84;
    public static final int L_NOT=85;
    public static final int L_OR=86;
    public static final int L_OR_EQ=87;
    public static final int L_OR_OR=88;
    public static final int L_PERC=89;
    public static final int L_PERC_EQ=90;
    public static final int L_PLUS=91;
    public static final int L_PLUS_EQ=92;
    public static final int L_PLUS_PLUS=93;
    public static final int L_QUESTION=94;
    public static final int L_RIGHT=95;
    public static final int L_RIGHT_EQ=96;
    public static final int L_TILDA=97;
    public static final int L_XOR=98;
    public static final int L_XOR_EQ=99;
    public static final int MESSAGE=100;
    public static final int METHOD=101;
    public static final int METHOD_CALL=102;
    public static final int METHOD_MSG=103;
    public static final int METHOD_NAME=104;
    public static final int MODIFIER=105;
    public static final int MSG_LIST=106;
    public static final int MULTI_COMMENT=107;
    public static final int M_IMPORT=108;
    public static final int M_TYPE_START=109;
    public static final int NAME=110;
    public static final int NOT=111;
    public static final int NUMBER=112;
    public static final int OBJECT=113;
    public static final int OP=114;
    public static final int OPER=115;
    public static final int OPERATOR=116;
    public static final int PARAM=117;
    public static final int PREFIX=118;
    public static final int PREPROCESSOR_DECLARATION=119;
    public static final int PROTOCOL=120;
    public static final int RETURN_STMT=121;
    public static final int R_BR=122;
    public static final int R_FBR=123;
    public static final int R_KBR=124;
    public static final int SELECTOR=125;
    public static final int SELECTOR_VALUE=126;
    public static final int SEMICOLON=127;
    public static final int SIMPLE_EXPR=128;
    public static final int SINGLE_COMMENT=129;
    public static final int SINGLE_OP=130;
    public static final int SIZEOF=131;
    public static final int STATIC=132;
    public static final int STATIC_METHOD=133;
    public static final int STATIC_PREFIX=134;
    public static final int STATIC_START=135;
    public static final int STATIC_TYPE=136;
    public static final int STRING=137;
    public static final int STRING_LITERAL=138;
    public static final int STRING_LITERAL2=139;
    public static final int STRING_LITERAL3=140;
    public static final int STRUCT_FIELD=141;
    public static final int STRUCT_PREFIX=142;
    public static final int SUPER_CLASS=143;
    public static final int SWITCH=144;
    public static final int SWITCH_BODY=145;
    public static final int SWITCH_EXPRESSION=146;
    public static final int THROW_EXCEPTION=147;
    public static final int THROW_STMT=148;
    public static final int TYPE=149;
    public static final int TYPEDEF=150;
    public static final int TYPEDEF_ELEMENT=151;
    public static final int TYPEDEF_STRUCT=152;
    public static final int TYPE_CONVERTION=153;
    public static final int TYPE_RENAME=154;
    public static final int VALUE=155;
    public static final int VARIABLE_INIT=156;
    public static final int VA_ARGS=157;
    public static final int VOID=158;
    public static final int WHILE_EXPR=159;
    public static final int WHILE_STMT=160;
    public static final int WS=161;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcmParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcmParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcmParser.tokenNames; }
    public String getGrammarFileName() { return "Objcm.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // Objcm.g:116:1: code : ( code_internal )+ ;
    public final ObjcmParser.code_return code() throws RecognitionException {
        ObjcmParser.code_return retval = new ObjcmParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.code_internal_return code_internal1 =null;



        try {
            // Objcm.g:116:6: ( ( code_internal )+ )
            // Objcm.g:117:3: ( code_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:117:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CONST_PREFIX||LA1_0==ENUM_PREFIX||LA1_0==ID||LA1_0==STATIC_PREFIX||LA1_0==STRUCT_PREFIX||LA1_0==VOID||(LA1_0 >= 169 && LA1_0 <= 170)||LA1_0==189||LA1_0==194||LA1_0==199||LA1_0==201) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // Objcm.g:117:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code435);
            	    code_internal1=code_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // Objcm.g:121:1: code_internal : ( operator_wrapper | implementation_wrapper );
    public final ObjcmParser.code_internal_return code_internal() throws RecognitionException {
        ObjcmParser.code_internal_return retval = new ObjcmParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_wrapper_return operator_wrapper2 =null;

        ObjcmParser.implementation_wrapper_return implementation_wrapper3 =null;



        try {
            // Objcm.g:122:2: ( operator_wrapper | implementation_wrapper )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==CONST_PREFIX||LA2_0==ENUM_PREFIX||LA2_0==ID||LA2_0==STATIC_PREFIX||LA2_0==STRUCT_PREFIX||LA2_0==VOID||LA2_0==170||LA2_0==189||LA2_0==194||LA2_0==199||LA2_0==201) ) {
                alt2=1;
            }
            else if ( (LA2_0==169) ) {
                alt2=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }
            switch (alt2) {
                case 1 :
                    // Objcm.g:122:4: operator_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_operator_wrapper_in_code_internal449);
                    operator_wrapper2=operator_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, operator_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:123:5: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal455);
                    implementation_wrapper3=implementation_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_wrapper3.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class operator_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator_wrapper"
    // Objcm.g:126:1: operator_wrapper : operator -> ^( OPERATOR operator ) ;
    public final ObjcmParser.operator_wrapper_return operator_wrapper() throws RecognitionException {
        ObjcmParser.operator_wrapper_return retval = new ObjcmParser.operator_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_return operator4 =null;


        RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
        try {
            // Objcm.g:127:2: ( operator -> ^( OPERATOR operator ) )
            // Objcm.g:127:4: operator
            {
            pushFollow(FOLLOW_operator_in_operator_wrapper466);
            operator4=operator();

            state._fsp--;

            stream_operator.add(operator4.getTree());

            // AST REWRITE
            // elements: operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 127:13: -> ^( OPERATOR operator )
            {
                // Objcm.g:127:16: ^( OPERATOR operator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OPERATOR, "OPERATOR")
                , root_1);

                adaptor.addChild(root_1, stream_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_wrapper"


    public static class operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator"
    // Objcm.g:129:1: operator : ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration | typedef_declaration_wrapper | typedef );
    public final ObjcmParser.operator_return operator() throws RecognitionException {
        ObjcmParser.operator_return retval = new ObjcmParser.operator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_wrapper_return extern_wrapper5 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper6 =null;

        ObjcmParser.type_start_wrapper_return type_start_wrapper7 =null;

        ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper8 =null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration9 =null;

        ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper10 =null;

        ObjcmParser.typedef_return typedef11 =null;



        try {
            // Objcm.g:130:2: ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration | typedef_declaration_wrapper | typedef )
            int alt3=7;
            switch ( input.LA(1) ) {
            case 189:
                {
                alt3=1;
                }
                break;
            case STATIC_PREFIX:
            case 194:
                {
                alt3=2;
                }
                break;
            case CONST_PREFIX:
            case ID:
            case VOID:
            case 201:
                {
                alt3=3;
                }
                break;
            case 170:
                {
                alt3=4;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt3=5;
                }
                break;
            case ENUM_PREFIX:
                {
                alt3=6;
                }
                break;
            case 199:
                {
                alt3=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }

            switch (alt3) {
                case 1 :
                    // Objcm.g:130:4: extern_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_wrapper_in_operator484);
                    extern_wrapper5=extern_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, extern_wrapper5.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:131:4: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_operator490);
                    static_section_wrapper6=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper6.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:132:4: type_start_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_start_wrapper_in_operator495);
                    type_start_wrapper7=type_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, type_start_wrapper7.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:133:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_operator502);
                    interface_declaration_wrapper8=interface_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_declaration_wrapper8.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:134:4: typedef_struct_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_in_operator508);
                    typedef_struct_declaration9=typedef_struct_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration9.getTree());

                    }
                    break;
                case 6 :
                    // Objcm.g:135:4: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_operator514);
                    typedef_declaration_wrapper10=typedef_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_declaration_wrapper10.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:136:4: typedef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_in_operator519);
                    typedef11=typedef();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef11.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // Objcm.g:143:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcmParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcmParser.extern_wrapper_return retval = new ObjcmParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_return extern12 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // Objcm.g:144:3: ( extern -> ^( EXTERN ) )
            // Objcm.g:144:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper537);
            extern12=extern();

            state._fsp--;

            stream_extern.add(extern12.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 144:12: -> ^( EXTERN )
            {
                // Objcm.g:144:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // Objcm.g:147:2: extern : 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR ;
    public final ObjcmParser.extern_return extern() throws RecognitionException {
        ObjcmParser.extern_return retval = new ObjcmParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal13=null;
        Token string_literal14=null;
        Token L_FBR15=null;
        Token set16=null;
        Token R_FBR17=null;

        Object string_literal13_tree=null;
        Object string_literal14_tree=null;
        Object L_FBR15_tree=null;
        Object set16_tree=null;
        Object R_FBR17_tree=null;

        try {
            // Objcm.g:147:9: ( 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR )
            // Objcm.g:147:11: 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR
            {
            root_0 = (Object)adaptor.nil();


            string_literal13=(Token)match(input,189,FOLLOW_189_in_extern556); 
            string_literal13_tree = 
            (Object)adaptor.create(string_literal13)
            ;
            adaptor.addChild(root_0, string_literal13_tree);


            string_literal14=(Token)match(input,162,FOLLOW_162_in_extern559); 
            string_literal14_tree = 
            (Object)adaptor.create(string_literal14)
            ;
            adaptor.addChild(root_0, string_literal14_tree);


            L_FBR15=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_extern562); 
            L_FBR15_tree = 
            (Object)adaptor.create(L_FBR15)
            ;
            adaptor.addChild(root_0, L_FBR15_tree);


            set16=(Token)input.LT(1);

            if ( (input.LA(1) >= ARRAY_INIT && input.LA(1) <= R_BR)||(input.LA(1) >= R_KBR && input.LA(1) <= 202) ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set16)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            R_FBR17=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_extern569); 
            R_FBR17_tree = 
            (Object)adaptor.create(R_FBR17)
            ;
            adaptor.addChild(root_0, R_FBR17_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // Objcm.g:149:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcmParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcmParser.implementation_wrapper_return retval = new ObjcmParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_return implementation18 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // Objcm.g:150:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // Objcm.g:150:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper581);
            implementation18=implementation();

            state._fsp--;

            stream_implementation.add(implementation18.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 150:20: -> ^( IMPLEMENTATION implementation )
            {
                // Objcm.g:150:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // Objcm.g:152:1: implementation : '@implementation' name ( category )? ( super_class )? ( implementation_body )* '@end' ( SEMICOLON )? ;
    public final ObjcmParser.implementation_return implementation() throws RecognitionException {
        ObjcmParser.implementation_return retval = new ObjcmParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal19=null;
        Token string_literal24=null;
        Token SEMICOLON25=null;
        ObjcmParser.name_return name20 =null;

        ObjcmParser.category_return category21 =null;

        ObjcmParser.super_class_return super_class22 =null;

        ObjcmParser.implementation_body_return implementation_body23 =null;


        Object string_literal19_tree=null;
        Object string_literal24_tree=null;
        Object SEMICOLON25_tree=null;

        try {
            // Objcm.g:153:2: ( '@implementation' name ( category )? ( super_class )? ( implementation_body )* '@end' ( SEMICOLON )? )
            // Objcm.g:153:4: '@implementation' name ( category )? ( super_class )? ( implementation_body )* '@end' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal19=(Token)match(input,169,FOLLOW_169_in_implementation600); 
            string_literal19_tree = 
            (Object)adaptor.create(string_literal19)
            ;
            adaptor.addChild(root_0, string_literal19_tree);


            pushFollow(FOLLOW_name_in_implementation603);
            name20=name();

            state._fsp--;

            adaptor.addChild(root_0, name20.getTree());

            // Objcm.g:153:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==L_BR) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // Objcm.g:153:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation606);
                    category21=category();

                    state._fsp--;

                    adaptor.addChild(root_0, category21.getTree());

                    }
                    break;

            }


            // Objcm.g:153:39: ( super_class )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==COLON) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // Objcm.g:153:39: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_implementation609);
                    super_class22=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class22.getTree());

                    }
                    break;

            }


            // Objcm.g:154:3: ( implementation_body )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==ID||LA6_0==L_MINUS||LA6_0==L_PLUS||LA6_0==STATIC_PREFIX||LA6_0==STRUCT_PREFIX||LA6_0==VOID||LA6_0==176||LA6_0==189||LA6_0==194||LA6_0==199||LA6_0==201) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // Objcm.g:154:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation614);
            	    implementation_body23=implementation_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, implementation_body23.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            string_literal24=(Token)match(input,167,FOLLOW_167_in_implementation619); 
            string_literal24_tree = 
            (Object)adaptor.create(string_literal24)
            ;
            adaptor.addChild(root_0, string_literal24_tree);


            // Objcm.g:155:11: ( SEMICOLON )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==SEMICOLON) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // Objcm.g:155:11: SEMICOLON
                    {
                    SEMICOLON25=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation622); 
                    SEMICOLON25_tree = 
                    (Object)adaptor.create(SEMICOLON25)
                    ;
                    adaptor.addChild(root_0, SEMICOLON25_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // Objcm.g:158:1: category : L_BR name R_BR -> ^( CATEGORY name ) ;
    public final ObjcmParser.category_return category() throws RecognitionException {
        ObjcmParser.category_return retval = new ObjcmParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR26=null;
        Token R_BR28=null;
        ObjcmParser.name_return name27 =null;


        Object L_BR26_tree=null;
        Object R_BR28_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // Objcm.g:158:9: ( L_BR name R_BR -> ^( CATEGORY name ) )
            // Objcm.g:158:11: L_BR name R_BR
            {
            L_BR26=(Token)match(input,L_BR,FOLLOW_L_BR_in_category634);  
            stream_L_BR.add(L_BR26);


            pushFollow(FOLLOW_name_in_category637);
            name27=name();

            state._fsp--;

            stream_name.add(name27.getTree());

            R_BR28=(Token)match(input,R_BR,FOLLOW_R_BR_in_category640);  
            stream_R_BR.add(R_BR28);


            // AST REWRITE
            // elements: name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 158:28: -> ^( CATEGORY name )
            {
                // Objcm.g:158:31: ^( CATEGORY name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // Objcm.g:160:1: implementation_body : ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper );
    public final ObjcmParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcmParser.implementation_body_return retval = new ObjcmParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.directives_return directives29 =null;

        ObjcmParser.typedef_return typedef30 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper31 =null;

        ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper32 =null;

        ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper33 =null;

        ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper34 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper35 =null;



        try {
            // Objcm.g:161:2: ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper )
            int alt8=7;
            switch ( input.LA(1) ) {
            case 176:
                {
                alt8=1;
                }
                break;
            case 199:
                {
                alt8=2;
                }
                break;
            case STATIC_PREFIX:
            case 194:
                {
                alt8=3;
                }
                break;
            case L_MINUS:
            case L_PLUS:
                {
                alt8=4;
                }
                break;
            case ID:
            case VOID:
            case 201:
                {
                alt8=5;
                }
                break;
            case 189:
                {
                alt8=6;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt8=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }

            switch (alt8) {
                case 1 :
                    // Objcm.g:161:4: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body658);
                    directives29=directives();

                    state._fsp--;

                    adaptor.addChild(root_0, directives29.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:162:5: typedef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_in_implementation_body664);
                    typedef30=typedef();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef30.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:163:5: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_implementation_body670);
                    static_section_wrapper31=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper31.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:164:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body676);
                    implementation_method_wrapper32=implementation_method_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper32.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:166:4: field_type_started_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_type_started_wrapper_in_implementation_body682);
                    field_type_started_wrapper33=field_type_started_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_type_started_wrapper33.getTree());

                    }
                    break;
                case 6 :
                    // Objcm.g:167:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_implementation_body688);
                    field_declaration_wrapper34=field_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_wrapper34.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:168:4: typedef_struct_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body693);
                    typedef_struct_declaration_wrapper35=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper35.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // Objcm.g:171:1: directives : synthesize ;
    public final ObjcmParser.directives_return directives() throws RecognitionException {
        ObjcmParser.directives_return retval = new ObjcmParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.synthesize_return synthesize36 =null;



        try {
            // Objcm.g:172:2: ( synthesize )
            // Objcm.g:172:4: synthesize
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_synthesize_in_directives704);
            synthesize36=synthesize();

            state._fsp--;

            adaptor.addChild(root_0, synthesize36.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // Objcm.g:175:1: synthesize : '@synthesize' ID ( L_EQ ID )? SEMICOLON ;
    public final ObjcmParser.synthesize_return synthesize() throws RecognitionException {
        ObjcmParser.synthesize_return retval = new ObjcmParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal37=null;
        Token ID38=null;
        Token L_EQ39=null;
        Token ID40=null;
        Token SEMICOLON41=null;

        Object string_literal37_tree=null;
        Object ID38_tree=null;
        Object L_EQ39_tree=null;
        Object ID40_tree=null;
        Object SEMICOLON41_tree=null;

        try {
            // Objcm.g:176:2: ( '@synthesize' ID ( L_EQ ID )? SEMICOLON )
            // Objcm.g:176:4: '@synthesize' ID ( L_EQ ID )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal37=(Token)match(input,176,FOLLOW_176_in_synthesize717); 
            string_literal37_tree = 
            (Object)adaptor.create(string_literal37)
            ;
            adaptor.addChild(root_0, string_literal37_tree);


            ID38=(Token)match(input,ID,FOLLOW_ID_in_synthesize720); 
            ID38_tree = 
            (Object)adaptor.create(ID38)
            ;
            adaptor.addChild(root_0, ID38_tree);


            // Objcm.g:176:22: ( L_EQ ID )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==L_EQ) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // Objcm.g:176:23: L_EQ ID
                    {
                    L_EQ39=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_synthesize723); 
                    L_EQ39_tree = 
                    (Object)adaptor.create(L_EQ39)
                    ;
                    adaptor.addChild(root_0, L_EQ39_tree);


                    ID40=(Token)match(input,ID,FOLLOW_ID_in_synthesize725); 
                    ID40_tree = 
                    (Object)adaptor.create(ID40)
                    ;
                    adaptor.addChild(root_0, ID40_tree);


                    }
                    break;

            }


            SEMICOLON41=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synthesize729); 
            SEMICOLON41_tree = 
            (Object)adaptor.create(SEMICOLON41)
            ;
            adaptor.addChild(root_0, SEMICOLON41_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class typedef_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef"
    // Objcm.g:179:1: typedef : 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper ) ;
    public final ObjcmParser.typedef_return typedef() throws RecognitionException {
        ObjcmParser.typedef_return retval = new ObjcmParser.typedef_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal42=null;
        ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper43 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper44 =null;

        ObjcmParser.type_rename_wrapper_return type_rename_wrapper45 =null;


        Object string_literal42_tree=null;

        try {
            // Objcm.g:179:9: ( 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper ) )
            // Objcm.g:179:11: 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            string_literal42=(Token)match(input,199,FOLLOW_199_in_typedef741); 
            string_literal42_tree = 
            (Object)adaptor.create(string_literal42)
            ;
            adaptor.addChild(root_0, string_literal42_tree);


            // Objcm.g:179:22: ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper )
            int alt10=3;
            switch ( input.LA(1) ) {
            case ENUM_PREFIX:
                {
                alt10=1;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt10=2;
                }
                break;
            case ID:
                {
                alt10=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;

            }

            switch (alt10) {
                case 1 :
                    // Objcm.g:179:23: typedef_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_typedef745);
                    typedef_declaration_wrapper43=typedef_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_declaration_wrapper43.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:179:53: typedef_struct_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_typedef749);
                    typedef_struct_declaration_wrapper44=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper44.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:179:90: type_rename_wrapper
                    {
                    pushFollow(FOLLOW_type_rename_wrapper_in_typedef753);
                    type_rename_wrapper45=type_rename_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, type_rename_wrapper45.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef"


    public static class type_rename_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_rename_wrapper"
    // Objcm.g:182:1: type_rename_wrapper : type_rename -> ^( TYPE_RENAME type_rename ) ;
    public final ObjcmParser.type_rename_wrapper_return type_rename_wrapper() throws RecognitionException {
        ObjcmParser.type_rename_wrapper_return retval = new ObjcmParser.type_rename_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_rename_return type_rename46 =null;


        RewriteRuleSubtreeStream stream_type_rename=new RewriteRuleSubtreeStream(adaptor,"rule type_rename");
        try {
            // Objcm.g:183:2: ( type_rename -> ^( TYPE_RENAME type_rename ) )
            // Objcm.g:183:4: type_rename
            {
            pushFollow(FOLLOW_type_rename_in_type_rename_wrapper767);
            type_rename46=type_rename();

            state._fsp--;

            stream_type_rename.add(type_rename46.getTree());

            // AST REWRITE
            // elements: type_rename
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 183:16: -> ^( TYPE_RENAME type_rename )
            {
                // Objcm.g:183:19: ^( TYPE_RENAME type_rename )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_RENAME, "TYPE_RENAME")
                , root_1);

                adaptor.addChild(root_1, stream_type_rename.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_rename_wrapper"


    public static class type_rename_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_rename"
    // Objcm.g:185:1: type_rename : ID ID SEMICOLON ;
    public final ObjcmParser.type_rename_return type_rename() throws RecognitionException {
        ObjcmParser.type_rename_return retval = new ObjcmParser.type_rename_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID47=null;
        Token ID48=null;
        Token SEMICOLON49=null;

        Object ID47_tree=null;
        Object ID48_tree=null;
        Object SEMICOLON49_tree=null;

        try {
            // Objcm.g:186:2: ( ID ID SEMICOLON )
            // Objcm.g:186:4: ID ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            ID47=(Token)match(input,ID,FOLLOW_ID_in_type_rename786); 
            ID47_tree = 
            (Object)adaptor.create(ID47)
            ;
            adaptor.addChild(root_0, ID47_tree);


            ID48=(Token)match(input,ID,FOLLOW_ID_in_type_rename788); 
            ID48_tree = 
            (Object)adaptor.create(ID48)
            ;
            adaptor.addChild(root_0, ID48_tree);


            SEMICOLON49=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_rename790); 
            SEMICOLON49_tree = 
            (Object)adaptor.create(SEMICOLON49)
            ;
            adaptor.addChild(root_0, SEMICOLON49_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_rename"


    public static class static_section_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section_wrapper"
    // Objcm.g:188:1: static_section_wrapper : static_section -> ^( STATIC static_section ) ;
    public final ObjcmParser.static_section_wrapper_return static_section_wrapper() throws RecognitionException {
        ObjcmParser.static_section_wrapper_return retval = new ObjcmParser.static_section_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_section_return static_section50 =null;


        RewriteRuleSubtreeStream stream_static_section=new RewriteRuleSubtreeStream(adaptor,"rule static_section");
        try {
            // Objcm.g:189:2: ( static_section -> ^( STATIC static_section ) )
            // Objcm.g:189:4: static_section
            {
            pushFollow(FOLLOW_static_section_in_static_section_wrapper802);
            static_section50=static_section();

            state._fsp--;

            stream_static_section.add(static_section50.getTree());

            // AST REWRITE
            // elements: static_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 189:19: -> ^( STATIC static_section )
            {
                // Objcm.g:189:22: ^( STATIC static_section )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC, "STATIC")
                , root_1);

                adaptor.addChild(root_1, stream_static_section.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section_wrapper"


    public static class static_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section"
    // Objcm.g:191:1: static_section : ( 'inline' )? STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 ;
    public final ObjcmParser.static_section_return static_section() throws RecognitionException {
        ObjcmParser.static_section_return retval = new ObjcmParser.static_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal51=null;
        Token STATIC_PREFIX52=null;
        Token CONST_PREFIX53=null;
        Token STRUCT_PREFIX54=null;
        Token ENUM_PREFIX55=null;
        ObjcmParser.static_section2_return static_section256 =null;


        Object string_literal51_tree=null;
        Object STATIC_PREFIX52_tree=null;
        Object CONST_PREFIX53_tree=null;
        Object STRUCT_PREFIX54_tree=null;
        Object ENUM_PREFIX55_tree=null;

        try {
            // Objcm.g:192:2: ( ( 'inline' )? STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 )
            // Objcm.g:192:4: ( 'inline' )? STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:192:4: ( 'inline' )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==194) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // Objcm.g:192:4: 'inline'
                    {
                    string_literal51=(Token)match(input,194,FOLLOW_194_in_static_section822); 
                    string_literal51_tree = 
                    (Object)adaptor.create(string_literal51)
                    ;
                    adaptor.addChild(root_0, string_literal51_tree);


                    }
                    break;

            }


            STATIC_PREFIX52=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_section825); 
            STATIC_PREFIX52_tree = 
            (Object)adaptor.create(STATIC_PREFIX52)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX52_tree);


            // Objcm.g:192:28: ( CONST_PREFIX )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==CONST_PREFIX) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // Objcm.g:192:28: CONST_PREFIX
                    {
                    CONST_PREFIX53=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_section827); 
                    CONST_PREFIX53_tree = 
                    (Object)adaptor.create(CONST_PREFIX53)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX53_tree);


                    }
                    break;

            }


            // Objcm.g:192:42: ( STRUCT_PREFIX )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==STRUCT_PREFIX) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // Objcm.g:192:42: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX54=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_static_section830); 
                    STRUCT_PREFIX54_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX54)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX54_tree);


                    }
                    break;

            }


            // Objcm.g:192:57: ( ENUM_PREFIX )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==ENUM_PREFIX) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // Objcm.g:192:57: ENUM_PREFIX
                    {
                    ENUM_PREFIX55=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_static_section833); 
                    ENUM_PREFIX55_tree = 
                    (Object)adaptor.create(ENUM_PREFIX55)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX55_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_static_section2_in_static_section836);
            static_section256=static_section2();

            state._fsp--;

            adaptor.addChild(root_0, static_section256.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section"


    public static class static_section2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section2"
    // Objcm.g:194:1: static_section2 : ( inline_section | implementation_method_wrapper2 | static_section3 );
    public final ObjcmParser.static_section2_return static_section2() throws RecognitionException {
        ObjcmParser.static_section2_return retval = new ObjcmParser.static_section2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.inline_section_return inline_section57 =null;

        ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper258 =null;

        ObjcmParser.static_section3_return static_section359 =null;



        try {
            // Objcm.g:195:2: ( inline_section | implementation_method_wrapper2 | static_section3 )
            int alt15=3;
            switch ( input.LA(1) ) {
            case 194:
                {
                alt15=1;
                }
                break;
            case L_FBR:
            case SEMICOLON:
                {
                alt15=2;
                }
                break;
            case ID:
            case VOID:
            case 201:
                {
                alt15=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;

            }

            switch (alt15) {
                case 1 :
                    // Objcm.g:195:4: inline_section
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_inline_section_in_static_section2845);
                    inline_section57=inline_section();

                    state._fsp--;

                    adaptor.addChild(root_0, inline_section57.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:196:5: implementation_method_wrapper2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper2_in_static_section2852);
                    implementation_method_wrapper258=implementation_method_wrapper2();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper258.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:197:5: static_section3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section3_in_static_section2859);
                    static_section359=static_section3();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section359.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section2"


    public static class inline_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_section"
    // Objcm.g:200:1: inline_section : 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) ;
    public final ObjcmParser.inline_section_return inline_section() throws RecognitionException {
        ObjcmParser.inline_section_return retval = new ObjcmParser.inline_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal60=null;
        Token SEMICOLON65=null;
        ObjcmParser.field_type_return field_type61 =null;

        ObjcmParser.name_return name62 =null;

        ObjcmParser.method_params2_return method_params263 =null;

        ObjcmParser.block_wrapper_return block_wrapper64 =null;


        Object string_literal60_tree=null;
        Object SEMICOLON65_tree=null;

        try {
            // Objcm.g:201:2: ( 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) )
            // Objcm.g:201:4: 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON )
            {
            root_0 = (Object)adaptor.nil();


            string_literal60=(Token)match(input,194,FOLLOW_194_in_inline_section871); 
            string_literal60_tree = 
            (Object)adaptor.create(string_literal60)
            ;
            adaptor.addChild(root_0, string_literal60_tree);


            pushFollow(FOLLOW_field_type_in_inline_section874);
            field_type61=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type61.getTree());

            pushFollow(FOLLOW_name_in_inline_section876);
            name62=name();

            state._fsp--;

            adaptor.addChild(root_0, name62.getTree());

            // Objcm.g:201:31: ( method_params2 )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==L_BR) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // Objcm.g:201:31: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_inline_section879);
                    method_params263=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params263.getTree());

                    }
                    break;

            }


            // Objcm.g:201:47: ( block_wrapper | SEMICOLON )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==L_FBR) ) {
                alt17=1;
            }
            else if ( (LA17_0==SEMICOLON) ) {
                alt17=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // Objcm.g:201:48: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_inline_section883);
                    block_wrapper64=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper64.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:201:64: SEMICOLON
                    {
                    SEMICOLON65=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inline_section887); 
                    SEMICOLON65_tree = 
                    (Object)adaptor.create(SEMICOLON65)
                    ;
                    adaptor.addChild(root_0, SEMICOLON65_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_section"


    public static class static_section3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section3"
    // Objcm.g:203:1: static_section3 : field_type name ( indexed )* static_end ;
    public final ObjcmParser.static_section3_return static_section3() throws RecognitionException {
        ObjcmParser.static_section3_return retval = new ObjcmParser.static_section3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type66 =null;

        ObjcmParser.name_return name67 =null;

        ObjcmParser.indexed_return indexed68 =null;

        ObjcmParser.static_end_return static_end69 =null;



        try {
            // Objcm.g:204:2: ( field_type name ( indexed )* static_end )
            // Objcm.g:204:4: field_type name ( indexed )* static_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_static_section3898);
            field_type66=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type66.getTree());

            pushFollow(FOLLOW_name_in_static_section3900);
            name67=name();

            state._fsp--;

            adaptor.addChild(root_0, name67.getTree());

            // Objcm.g:204:20: ( indexed )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==L_KBR) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // Objcm.g:204:20: indexed
            	    {
            	    pushFollow(FOLLOW_indexed_in_static_section3902);
            	    indexed68=indexed();

            	    state._fsp--;

            	    adaptor.addChild(root_0, indexed68.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);


            pushFollow(FOLLOW_static_end_in_static_section3906);
            static_end69=static_end();

            state._fsp--;

            adaptor.addChild(root_0, static_end69.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section3"


    public static class static_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_end"
    // Objcm.g:207:1: static_end : ( implementation_method_wrapper3 | field_end );
    public final ObjcmParser.static_end_return static_end() throws RecognitionException {
        ObjcmParser.static_end_return retval = new ObjcmParser.static_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper370 =null;

        ObjcmParser.field_end_return field_end71 =null;



        try {
            // Objcm.g:208:2: ( implementation_method_wrapper3 | field_end )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==L_BR) ) {
                alt19=1;
            }
            else if ( (LA19_0==L_EQ||LA19_0==SEMICOLON) ) {
                alt19=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }
            switch (alt19) {
                case 1 :
                    // Objcm.g:208:4: implementation_method_wrapper3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper3_in_static_end918);
                    implementation_method_wrapper370=implementation_method_wrapper3();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper370.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:209:5: field_end
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_end_in_static_end924);
                    field_end71=field_end();

                    state._fsp--;

                    adaptor.addChild(root_0, field_end71.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_end"


    public static class field_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end"
    // Objcm.g:211:1: field_end : field_end_internal -> ^( FIELD field_end_internal ) ;
    public final ObjcmParser.field_end_return field_end() throws RecognitionException {
        ObjcmParser.field_end_return retval = new ObjcmParser.field_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_end_internal_return field_end_internal72 =null;


        RewriteRuleSubtreeStream stream_field_end_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_end_internal");
        try {
            // Objcm.g:212:2: ( field_end_internal -> ^( FIELD field_end_internal ) )
            // Objcm.g:212:4: field_end_internal
            {
            pushFollow(FOLLOW_field_end_internal_in_field_end935);
            field_end_internal72=field_end_internal();

            state._fsp--;

            stream_field_end_internal.add(field_end_internal72.getTree());

            // AST REWRITE
            // elements: field_end_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 212:23: -> ^( FIELD field_end_internal )
            {
                // Objcm.g:212:26: ^( FIELD field_end_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_end_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end"


    public static class field_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end_internal"
    // Objcm.g:214:1: field_end_internal : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_end_internal_return field_end_internal() throws RecognitionException {
        ObjcmParser.field_end_internal_return retval = new ObjcmParser.field_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON74=null;
        ObjcmParser.value_set_return value_set73 =null;


        Object SEMICOLON74_tree=null;

        try {
            // Objcm.g:215:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:215:4: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:215:4: ( value_set )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==L_EQ) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // Objcm.g:215:4: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_end_internal953);
                    value_set73=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set73.getTree());

                    }
                    break;

            }


            SEMICOLON74=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_end_internal956); 
            SEMICOLON74_tree = 
            (Object)adaptor.create(SEMICOLON74)
            ;
            adaptor.addChild(root_0, SEMICOLON74_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end_internal"


    public static class implementation_method_wrapper3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper3"
    // Objcm.g:217:1: implementation_method_wrapper3 : implementation_method3 -> ^( METHOD implementation_method3 ) ;
    public final ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper3() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper3_return retval = new ObjcmParser.implementation_method_wrapper3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method3_return implementation_method375 =null;


        RewriteRuleSubtreeStream stream_implementation_method3=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method3");
        try {
            // Objcm.g:218:2: ( implementation_method3 -> ^( METHOD implementation_method3 ) )
            // Objcm.g:218:4: implementation_method3
            {
            pushFollow(FOLLOW_implementation_method3_in_implementation_method_wrapper3968);
            implementation_method375=implementation_method3();

            state._fsp--;

            stream_implementation_method3.add(implementation_method375.getTree());

            // AST REWRITE
            // elements: implementation_method3
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 218:27: -> ^( METHOD implementation_method3 )
            {
                // Objcm.g:218:30: ^( METHOD implementation_method3 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method3.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper3"


    public static class implementation_method3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method3"
    // Objcm.g:220:1: implementation_method3 : method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? ;
    public final ObjcmParser.implementation_method3_return implementation_method3() throws RecognitionException {
        ObjcmParser.implementation_method3_return retval = new ObjcmParser.implementation_method3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON77=null;
        ObjcmParser.method_header_body3_return method_header_body376 =null;

        ObjcmParser.attribute_return attribute78 =null;

        ObjcmParser.block_wrapper_return block_wrapper79 =null;


        Object SEMICOLON77_tree=null;

        try {
            // Objcm.g:221:2: ( method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? )
            // Objcm.g:221:4: method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body3_in_implementation_method3986);
            method_header_body376=method_header_body3();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body376.getTree());

            // Objcm.g:221:25: ( SEMICOLON )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==SEMICOLON) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // Objcm.g:221:25: SEMICOLON
                    {
                    SEMICOLON77=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method3989); 
                    SEMICOLON77_tree = 
                    (Object)adaptor.create(SEMICOLON77)
                    ;
                    adaptor.addChild(root_0, SEMICOLON77_tree);


                    }
                    break;

            }


            // Objcm.g:222:3: ( attribute )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==180) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // Objcm.g:222:3: attribute
                    {
                    pushFollow(FOLLOW_attribute_in_implementation_method3994);
                    attribute78=attribute();

                    state._fsp--;

                    adaptor.addChild(root_0, attribute78.getTree());

                    }
                    break;

            }


            // Objcm.g:223:3: ( block_wrapper )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==L_FBR) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // Objcm.g:223:3: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_implementation_method3999);
                    block_wrapper79=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper79.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method3"


    public static class attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute"
    // Objcm.g:226:1: attribute : '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON ;
    public final ObjcmParser.attribute_return attribute() throws RecognitionException {
        ObjcmParser.attribute_return retval = new ObjcmParser.attribute_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal80=null;
        Token L_BR81=null;
        Token L_BR82=null;
        Token string_literal83=null;
        Token R_BR84=null;
        Token R_BR85=null;
        Token SEMICOLON86=null;

        Object string_literal80_tree=null;
        Object L_BR81_tree=null;
        Object L_BR82_tree=null;
        Object string_literal83_tree=null;
        Object R_BR84_tree=null;
        Object R_BR85_tree=null;
        Object SEMICOLON86_tree=null;

        try {
            // Objcm.g:227:2: ( '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON )
            // Objcm.g:227:4: '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal80=(Token)match(input,180,FOLLOW_180_in_attribute1012); 
            string_literal80_tree = 
            (Object)adaptor.create(string_literal80)
            ;
            adaptor.addChild(root_0, string_literal80_tree);


            L_BR81=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute1015); 
            L_BR81_tree = 
            (Object)adaptor.create(L_BR81)
            ;
            adaptor.addChild(root_0, L_BR81_tree);


            L_BR82=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute1018); 
            L_BR82_tree = 
            (Object)adaptor.create(L_BR82)
            ;
            adaptor.addChild(root_0, L_BR82_tree);


            string_literal83=(Token)match(input,184,FOLLOW_184_in_attribute1021); 
            string_literal83_tree = 
            (Object)adaptor.create(string_literal83)
            ;
            adaptor.addChild(root_0, string_literal83_tree);


            R_BR84=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute1024); 
            R_BR84_tree = 
            (Object)adaptor.create(R_BR84)
            ;
            adaptor.addChild(root_0, R_BR84_tree);


            R_BR85=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute1027); 
            R_BR85_tree = 
            (Object)adaptor.create(R_BR85)
            ;
            adaptor.addChild(root_0, R_BR85_tree);


            SEMICOLON86=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_attribute1030); 
            SEMICOLON86_tree = 
            (Object)adaptor.create(SEMICOLON86)
            ;
            adaptor.addChild(root_0, SEMICOLON86_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute"


    public static class implementation_method2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method2"
    // Objcm.g:229:1: implementation_method2 : ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method2_return implementation_method2() throws RecognitionException {
        ObjcmParser.implementation_method2_return retval = new ObjcmParser.implementation_method2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON87=null;
        ObjcmParser.block_wrapper_return block_wrapper88 =null;


        Object SEMICOLON87_tree=null;

        try {
            // Objcm.g:230:2: ( ( SEMICOLON )? block_wrapper )
            // Objcm.g:230:5: ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:230:5: ( SEMICOLON )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==SEMICOLON) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // Objcm.g:230:5: SEMICOLON
                    {
                    SEMICOLON87=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method21042); 
                    SEMICOLON87_tree = 
                    (Object)adaptor.create(SEMICOLON87)
                    ;
                    adaptor.addChild(root_0, SEMICOLON87_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method21047);
            block_wrapper88=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper88.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method2"


    public static class field_type_started_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started_wrapper"
    // Objcm.g:234:1: field_type_started_wrapper : field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) ;
    public final ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper() throws RecognitionException {
        ObjcmParser.field_type_started_wrapper_return retval = new ObjcmParser.field_type_started_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_started_return field_type_started89 =null;


        RewriteRuleSubtreeStream stream_field_type_started=new RewriteRuleSubtreeStream(adaptor,"rule field_type_started");
        try {
            // Objcm.g:235:2: ( field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) )
            // Objcm.g:235:4: field_type_started
            {
            pushFollow(FOLLOW_field_type_started_in_field_type_started_wrapper1059);
            field_type_started89=field_type_started();

            state._fsp--;

            stream_field_type_started.add(field_type_started89.getTree());

            // AST REWRITE
            // elements: field_type_started
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 235:23: -> ^( FIELD_TYPE_STARTED field_type_started )
            {
                // Objcm.g:235:26: ^( FIELD_TYPE_STARTED field_type_started )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_TYPE_STARTED, "FIELD_TYPE_STARTED")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_started.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started_wrapper"


    public static class field_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started"
    // Objcm.g:237:1: field_type_started : field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) ;
    public final ObjcmParser.field_type_started_return field_type_started() throws RecognitionException {
        ObjcmParser.field_type_started_return retval = new ObjcmParser.field_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type90 =null;

        ObjcmParser.name_return name91 =null;

        ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper92 =null;

        ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper93 =null;



        try {
            // Objcm.g:238:2: ( field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) )
            // Objcm.g:238:4: field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_field_type_started1078);
            field_type90=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type90.getTree());

            pushFollow(FOLLOW_name_in_field_type_started1080);
            name91=name();

            state._fsp--;

            adaptor.addChild(root_0, name91.getTree());

            // Objcm.g:238:20: ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==L_BR) ) {
                alt25=1;
            }
            else if ( (LA25_0==L_EQ||LA25_0==SEMICOLON) ) {
                alt25=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;

            }
            switch (alt25) {
                case 1 :
                    // Objcm.g:238:21: classic_method_declaration_wrapper
                    {
                    pushFollow(FOLLOW_classic_method_declaration_wrapper_in_field_type_started1083);
                    classic_method_declaration_wrapper92=classic_method_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, classic_method_declaration_wrapper92.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:238:58: field_declaration_end_wrapper
                    {
                    pushFollow(FOLLOW_field_declaration_end_wrapper_in_field_type_started1087);
                    field_declaration_end_wrapper93=field_declaration_end_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_end_wrapper93.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started"


    public static class field_declaration_end_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end_wrapper"
    // Objcm.g:240:1: field_declaration_end_wrapper : field_declaration_end -> ^( FIELD field_declaration_end ) ;
    public final ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_end_wrapper_return retval = new ObjcmParser.field_declaration_end_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_end_return field_declaration_end94 =null;


        RewriteRuleSubtreeStream stream_field_declaration_end=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_end");
        try {
            // Objcm.g:241:2: ( field_declaration_end -> ^( FIELD field_declaration_end ) )
            // Objcm.g:241:4: field_declaration_end
            {
            pushFollow(FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1098);
            field_declaration_end94=field_declaration_end();

            state._fsp--;

            stream_field_declaration_end.add(field_declaration_end94.getTree());

            // AST REWRITE
            // elements: field_declaration_end
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 241:26: -> ^( FIELD field_declaration_end )
            {
                // Objcm.g:241:29: ^( FIELD field_declaration_end )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_end.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end_wrapper"


    public static class classic_method_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration_wrapper"
    // Objcm.g:243:1: classic_method_declaration_wrapper : classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) ;
    public final ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper() throws RecognitionException {
        ObjcmParser.classic_method_declaration_wrapper_return retval = new ObjcmParser.classic_method_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classic_method_declaration_return classic_method_declaration95 =null;


        RewriteRuleSubtreeStream stream_classic_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classic_method_declaration");
        try {
            // Objcm.g:244:2: ( classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) )
            // Objcm.g:244:4: classic_method_declaration
            {
            pushFollow(FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1116);
            classic_method_declaration95=classic_method_declaration();

            state._fsp--;

            stream_classic_method_declaration.add(classic_method_declaration95.getTree());

            // AST REWRITE
            // elements: classic_method_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 244:31: -> ^( STATIC_METHOD classic_method_declaration )
            {
                // Objcm.g:244:34: ^( STATIC_METHOD classic_method_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_classic_method_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration_wrapper"


    public static class classic_method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration"
    // Objcm.g:246:1: classic_method_declaration : method_params2 block_wrapper ;
    public final ObjcmParser.classic_method_declaration_return classic_method_declaration() throws RecognitionException {
        ObjcmParser.classic_method_declaration_return retval = new ObjcmParser.classic_method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params296 =null;

        ObjcmParser.block_wrapper_return block_wrapper97 =null;



        try {
            // Objcm.g:248:2: ( method_params2 block_wrapper )
            // Objcm.g:248:4: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_classic_method_declaration1136);
            method_params296=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params296.getTree());

            pushFollow(FOLLOW_block_wrapper_in_classic_method_declaration1141);
            block_wrapper97=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper97.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // Objcm.g:252:1: implementation_method_wrapper : implementation_method -> ^( METHOD implementation_method ) ;
    public final ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper_return retval = new ObjcmParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_return implementation_method98 =null;


        RewriteRuleSubtreeStream stream_implementation_method=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method");
        try {
            // Objcm.g:253:2: ( implementation_method -> ^( METHOD implementation_method ) )
            // Objcm.g:253:4: implementation_method
            {
            pushFollow(FOLLOW_implementation_method_in_implementation_method_wrapper1154);
            implementation_method98=implementation_method();

            state._fsp--;

            stream_implementation_method.add(implementation_method98.getTree());

            // AST REWRITE
            // elements: implementation_method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 253:26: -> ^( METHOD implementation_method )
            {
                // Objcm.g:253:29: ^( METHOD implementation_method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class implementation_method_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper2"
    // Objcm.g:255:1: implementation_method_wrapper2 : implementation_method2 -> ^( METHOD implementation_method2 ) ;
    public final ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper2() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper2_return retval = new ObjcmParser.implementation_method_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method2_return implementation_method299 =null;


        RewriteRuleSubtreeStream stream_implementation_method2=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method2");
        try {
            // Objcm.g:256:2: ( implementation_method2 -> ^( METHOD implementation_method2 ) )
            // Objcm.g:256:4: implementation_method2
            {
            pushFollow(FOLLOW_implementation_method2_in_implementation_method_wrapper21171);
            implementation_method299=implementation_method2();

            state._fsp--;

            stream_implementation_method2.add(implementation_method299.getTree());

            // AST REWRITE
            // elements: implementation_method2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 256:27: -> ^( METHOD implementation_method2 )
            {
                // Objcm.g:256:30: ^( METHOD implementation_method2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper2"


    public static class implementation_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method"
    // Objcm.g:258:1: implementation_method : method_header_body ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method_return implementation_method() throws RecognitionException {
        ObjcmParser.implementation_method_return retval = new ObjcmParser.implementation_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON101=null;
        ObjcmParser.method_header_body_return method_header_body100 =null;

        ObjcmParser.block_wrapper_return block_wrapper102 =null;


        Object SEMICOLON101_tree=null;

        try {
            // Objcm.g:259:2: ( method_header_body ( SEMICOLON )? block_wrapper )
            // Objcm.g:259:4: method_header_body ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_implementation_method1188);
            method_header_body100=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body100.getTree());

            // Objcm.g:259:23: ( SEMICOLON )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==SEMICOLON) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // Objcm.g:259:23: SEMICOLON
                    {
                    SEMICOLON101=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method1190); 
                    SEMICOLON101_tree = 
                    (Object)adaptor.create(SEMICOLON101)
                    ;
                    adaptor.addChild(root_0, SEMICOLON101_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method1195);
            block_wrapper102=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper102.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method"


    public static class block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_wrapper"
    // Objcm.g:263:1: block_wrapper : block -> ^( BLOCK block ) ;
    public final ObjcmParser.block_wrapper_return block_wrapper() throws RecognitionException {
        ObjcmParser.block_wrapper_return retval = new ObjcmParser.block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_return block103 =null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // Objcm.g:264:2: ( block -> ^( BLOCK block ) )
            // Objcm.g:264:4: block
            {
            pushFollow(FOLLOW_block_in_block_wrapper1208);
            block103=block();

            state._fsp--;

            stream_block.add(block103.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 264:10: -> ^( BLOCK block )
            {
                // Objcm.g:264:13: ^( BLOCK block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK, "BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_wrapper"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // Objcm.g:266:1: block : L_FBR ( block_internal_full | block )* R_FBR ;
    public final ObjcmParser.block_return block() throws RecognitionException {
        ObjcmParser.block_return retval = new ObjcmParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR104=null;
        Token R_FBR107=null;
        ObjcmParser.block_internal_full_return block_internal_full105 =null;

        ObjcmParser.block_return block106 =null;


        Object L_FBR104_tree=null;
        Object R_FBR107_tree=null;

        try {
            // Objcm.g:266:7: ( L_FBR ( block_internal_full | block )* R_FBR )
            // Objcm.g:267:3: L_FBR ( block_internal_full | block )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR104=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block1230); 
            L_FBR104_tree = 
            (Object)adaptor.create(L_FBR104)
            ;
            adaptor.addChild(root_0, L_FBR104_tree);


            // Objcm.g:268:4: ( block_internal_full | block )*
            loop27:
            do {
                int alt27=3;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==ASTERISK||LA27_0==BREAK_WORD||LA27_0==CONST_PREFIX||LA27_0==ENUM_PREFIX||LA27_0==ID||LA27_0==L_AND||LA27_0==L_BR||LA27_0==L_KBR||LA27_0==L_MINUS||LA27_0==L_MINUS_MINUS||LA27_0==L_NOT||LA27_0==L_PLUS||LA27_0==L_PLUS_PLUS||LA27_0==L_TILDA||LA27_0==NUMBER||LA27_0==SEMICOLON||(LA27_0 >= SINGLE_OP && LA27_0 <= SIZEOF)||LA27_0==STATIC_PREFIX||(LA27_0 >= STRING_LITERAL && LA27_0 <= STRING_LITERAL3)||LA27_0==STRUCT_PREFIX||LA27_0==VOID||LA27_0==166||LA27_0==173||LA27_0==175||(LA27_0 >= 177 && LA27_0 <= 179)||(LA27_0 >= 181 && LA27_0 <= 182)||LA27_0==185||(LA27_0 >= 187 && LA27_0 <= 193)||(LA27_0 >= 195 && LA27_0 <= 198)||(LA27_0 >= 201 && LA27_0 <= 202)) ) {
                    alt27=1;
                }
                else if ( (LA27_0==L_FBR) ) {
                    alt27=2;
                }


                switch (alt27) {
            	case 1 :
            	    // Objcm.g:268:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block1236);
            	    block_internal_full105=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full105.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:268:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block1240);
            	    block106=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block106.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            R_FBR107=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block1248); 
            R_FBR107_tree = 
            (Object)adaptor.create(R_FBR107)
            ;
            adaptor.addChild(root_0, R_FBR107_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_case_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_case"
    // Objcm.g:272:1: block_case : L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR ;
    public final ObjcmParser.block_case_return block_case() throws RecognitionException {
        ObjcmParser.block_case_return retval = new ObjcmParser.block_case_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR108=null;
        Token R_FBR112=null;
        ObjcmParser.block_internal_full_return block_internal_full109 =null;

        ObjcmParser.block_return block110 =null;

        ObjcmParser.default_stmt_return default_stmt111 =null;


        Object L_FBR108_tree=null;
        Object R_FBR112_tree=null;

        try {
            // Objcm.g:273:2: ( L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR )
            // Objcm.g:274:3: L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR108=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block_case1263); 
            L_FBR108_tree = 
            (Object)adaptor.create(L_FBR108)
            ;
            adaptor.addChild(root_0, L_FBR108_tree);


            // Objcm.g:275:4: ( block_internal_full | block )*
            loop28:
            do {
                int alt28=3;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==ASTERISK||LA28_0==BREAK_WORD||LA28_0==CONST_PREFIX||LA28_0==ENUM_PREFIX||LA28_0==ID||LA28_0==L_AND||LA28_0==L_BR||LA28_0==L_KBR||LA28_0==L_MINUS||LA28_0==L_MINUS_MINUS||LA28_0==L_NOT||LA28_0==L_PLUS||LA28_0==L_PLUS_PLUS||LA28_0==L_TILDA||LA28_0==NUMBER||LA28_0==SEMICOLON||(LA28_0 >= SINGLE_OP && LA28_0 <= SIZEOF)||LA28_0==STATIC_PREFIX||(LA28_0 >= STRING_LITERAL && LA28_0 <= STRING_LITERAL3)||LA28_0==STRUCT_PREFIX||LA28_0==VOID||LA28_0==166||LA28_0==173||LA28_0==175||(LA28_0 >= 177 && LA28_0 <= 179)||(LA28_0 >= 181 && LA28_0 <= 182)||LA28_0==185||(LA28_0 >= 187 && LA28_0 <= 193)||(LA28_0 >= 195 && LA28_0 <= 198)||(LA28_0 >= 201 && LA28_0 <= 202)) ) {
                    alt28=1;
                }
                else if ( (LA28_0==L_FBR) ) {
                    alt28=2;
                }


                switch (alt28) {
            	case 1 :
            	    // Objcm.g:275:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block_case1269);
            	    block_internal_full109=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full109.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:275:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block_case1273);
            	    block110=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block110.getTree());

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            // Objcm.g:276:4: ( default_stmt )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==186) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // Objcm.g:276:4: default_stmt
                    {
                    pushFollow(FOLLOW_default_stmt_in_block_case1282);
                    default_stmt111=default_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt111.getTree());

                    }
                    break;

            }


            R_FBR112=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block_case1287); 
            R_FBR112_tree = 
            (Object)adaptor.create(R_FBR112)
            ;
            adaptor.addChild(root_0, R_FBR112_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_case"


    public static class block_internal_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_full"
    // Objcm.g:280:1: block_internal_full : block_internal ;
    public final ObjcmParser.block_internal_full_return block_internal_full() throws RecognitionException {
        ObjcmParser.block_internal_full_return retval = new ObjcmParser.block_internal_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_return block_internal113 =null;



        try {
            // Objcm.g:281:2: ( block_internal )
            // Objcm.g:281:4: block_internal
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_internal_in_block_internal_full1299);
            block_internal113=block_internal();

            state._fsp--;

            adaptor.addChild(root_0, block_internal113.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_full"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // Objcm.g:284:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper | 'extern' );
    public final ObjcmParser.block_internal_return block_internal() throws RecognitionException {
        ObjcmParser.block_internal_return retval = new ObjcmParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON117=null;
        Token SEMICOLON120=null;
        Token SEMICOLON130=null;
        Token SEMICOLON132=null;
        Token SEMICOLON134=null;
        Token SEMICOLON136=null;
        Token SEMICOLON137=null;
        Token string_literal139=null;
        ObjcmParser.try_stmt_return try_stmt114 =null;

        ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper115 =null;

        ObjcmParser.static_start_wrapper_return static_start_wrapper116 =null;

        ObjcmParser.do_stmt_return do_stmt118 =null;

        ObjcmParser.const_expression_return const_expression119 =null;

        ObjcmParser.variable_init_wrapper_return variable_init_wrapper121 =null;

        ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper122 =null;

        ObjcmParser.else_stmt_return else_stmt123 =null;

        ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper124 =null;

        ObjcmParser.return_stmt_return return_stmt125 =null;

        ObjcmParser.for_stmt_wrapper_return for_stmt_wrapper126 =null;

        ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper127 =null;

        ObjcmParser.single_operators_return single_operators128 =null;

        ObjcmParser.struct_variable_return struct_variable129 =null;

        ObjcmParser.enum_variable_return enum_variable131 =null;

        ObjcmParser.typeof_started_return typeof_started133 =null;

        ObjcmParser.known_type_started_return known_type_started135 =null;

        ObjcmParser.goto_wrapper_return goto_wrapper138 =null;


        Object SEMICOLON117_tree=null;
        Object SEMICOLON120_tree=null;
        Object SEMICOLON130_tree=null;
        Object SEMICOLON132_tree=null;
        Object SEMICOLON134_tree=null;
        Object SEMICOLON136_tree=null;
        Object SEMICOLON137_tree=null;
        Object string_literal139_tree=null;

        try {
            // Objcm.g:285:2: ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper | 'extern' )
            int alt30=20;
            alt30 = dfa30.predict(input);
            switch (alt30) {
                case 1 :
                    // Objcm.g:285:4: try_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_in_block_internal1310);
                    try_stmt114=try_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, try_stmt114.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:286:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1315);
                    throw_stmt_wrapper115=throw_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, throw_stmt_wrapper115.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:287:4: static_start_wrapper SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_start_wrapper_in_block_internal1320);
                    static_start_wrapper116=static_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_start_wrapper116.getTree());

                    SEMICOLON117=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1322); 
                    SEMICOLON117_tree = 
                    (Object)adaptor.create(SEMICOLON117)
                    ;
                    adaptor.addChild(root_0, SEMICOLON117_tree);


                    }
                    break;
                case 4 :
                    // Objcm.g:288:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1327);
                    do_stmt118=do_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, do_stmt118.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:289:4: const_expression SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expression_in_block_internal1332);
                    const_expression119=const_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expression119.getTree());

                    SEMICOLON120=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1334); 
                    SEMICOLON120_tree = 
                    (Object)adaptor.create(SEMICOLON120)
                    ;
                    adaptor.addChild(root_0, SEMICOLON120_tree);


                    }
                    break;
                case 6 :
                    // Objcm.g:290:4: variable_init_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_init_wrapper_in_block_internal1339);
                    variable_init_wrapper121=variable_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, variable_init_wrapper121.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:291:4: if_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_wrapper_in_block_internal1344);
                    if_stmt_wrapper122=if_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, if_stmt_wrapper122.getTree());

                    }
                    break;
                case 8 :
                    // Objcm.g:292:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1349);
                    else_stmt123=else_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, else_stmt123.getTree());

                    }
                    break;
                case 9 :
                    // Objcm.g:293:4: switch_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_wrapper_in_block_internal1354);
                    switch_stmt_wrapper124=switch_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, switch_stmt_wrapper124.getTree());

                    }
                    break;
                case 10 :
                    // Objcm.g:294:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1359);
                    return_stmt125=return_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, return_stmt125.getTree());

                    }
                    break;
                case 11 :
                    // Objcm.g:295:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1364);
                    for_stmt_wrapper126=for_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_wrapper126.getTree());

                    }
                    break;
                case 12 :
                    // Objcm.g:296:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1369);
                    while_stmt_wrapper127=while_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, while_stmt_wrapper127.getTree());

                    }
                    break;
                case 13 :
                    // Objcm.g:297:4: single_operators
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_operators_in_block_internal1374);
                    single_operators128=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators128.getTree());

                    }
                    break;
                case 14 :
                    // Objcm.g:298:4: struct_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_variable_in_block_internal1379);
                    struct_variable129=struct_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_variable129.getTree());

                    SEMICOLON130=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1381); 
                    SEMICOLON130_tree = 
                    (Object)adaptor.create(SEMICOLON130)
                    ;
                    adaptor.addChild(root_0, SEMICOLON130_tree);


                    }
                    break;
                case 15 :
                    // Objcm.g:299:4: enum_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_enum_variable_in_block_internal1386);
                    enum_variable131=enum_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, enum_variable131.getTree());

                    SEMICOLON132=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1388); 
                    SEMICOLON132_tree = 
                    (Object)adaptor.create(SEMICOLON132)
                    ;
                    adaptor.addChild(root_0, SEMICOLON132_tree);


                    }
                    break;
                case 16 :
                    // Objcm.g:300:4: typeof_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typeof_started_in_block_internal1393);
                    typeof_started133=typeof_started();

                    state._fsp--;

                    adaptor.addChild(root_0, typeof_started133.getTree());

                    SEMICOLON134=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1395); 
                    SEMICOLON134_tree = 
                    (Object)adaptor.create(SEMICOLON134)
                    ;
                    adaptor.addChild(root_0, SEMICOLON134_tree);


                    }
                    break;
                case 17 :
                    // Objcm.g:301:4: known_type_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_known_type_started_in_block_internal1400);
                    known_type_started135=known_type_started();

                    state._fsp--;

                    adaptor.addChild(root_0, known_type_started135.getTree());

                    SEMICOLON136=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1402); 
                    SEMICOLON136_tree = 
                    (Object)adaptor.create(SEMICOLON136)
                    ;
                    adaptor.addChild(root_0, SEMICOLON136_tree);


                    }
                    break;
                case 18 :
                    // Objcm.g:302:4: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    SEMICOLON137=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1407); 
                    SEMICOLON137_tree = 
                    (Object)adaptor.create(SEMICOLON137)
                    ;
                    adaptor.addChild(root_0, SEMICOLON137_tree);


                    }
                    break;
                case 19 :
                    // Objcm.g:303:4: goto_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_wrapper_in_block_internal1413);
                    goto_wrapper138=goto_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, goto_wrapper138.getTree());

                    }
                    break;
                case 20 :
                    // Objcm.g:304:4: 'extern'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal139=(Token)match(input,189,FOLLOW_189_in_block_internal1418); 
                    string_literal139_tree = 
                    (Object)adaptor.create(string_literal139)
                    ;
                    adaptor.addChild(root_0, string_literal139_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class goto_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_wrapper"
    // Objcm.g:307:1: goto_wrapper : goto_operator -> ^( GOTO goto_operator ) ;
    public final ObjcmParser.goto_wrapper_return goto_wrapper() throws RecognitionException {
        ObjcmParser.goto_wrapper_return retval = new ObjcmParser.goto_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.goto_operator_return goto_operator140 =null;


        RewriteRuleSubtreeStream stream_goto_operator=new RewriteRuleSubtreeStream(adaptor,"rule goto_operator");
        try {
            // Objcm.g:308:2: ( goto_operator -> ^( GOTO goto_operator ) )
            // Objcm.g:308:4: goto_operator
            {
            pushFollow(FOLLOW_goto_operator_in_goto_wrapper1430);
            goto_operator140=goto_operator();

            state._fsp--;

            stream_goto_operator.add(goto_operator140.getTree());

            // AST REWRITE
            // elements: goto_operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 308:18: -> ^( GOTO goto_operator )
            {
                // Objcm.g:308:21: ^( GOTO goto_operator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GOTO, "GOTO")
                , root_1);

                adaptor.addChild(root_1, stream_goto_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_wrapper"


    public static class goto_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_operator"
    // Objcm.g:310:1: goto_operator : 'goto' ID SEMICOLON ;
    public final ObjcmParser.goto_operator_return goto_operator() throws RecognitionException {
        ObjcmParser.goto_operator_return retval = new ObjcmParser.goto_operator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal141=null;
        Token ID142=null;
        Token SEMICOLON143=null;

        Object string_literal141_tree=null;
        Object ID142_tree=null;
        Object SEMICOLON143_tree=null;

        try {
            // Objcm.g:311:2: ( 'goto' ID SEMICOLON )
            // Objcm.g:311:4: 'goto' ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal141=(Token)match(input,191,FOLLOW_191_in_goto_operator1447); 
            string_literal141_tree = 
            (Object)adaptor.create(string_literal141)
            ;
            adaptor.addChild(root_0, string_literal141_tree);


            ID142=(Token)match(input,ID,FOLLOW_ID_in_goto_operator1449); 
            ID142_tree = 
            (Object)adaptor.create(ID142)
            ;
            adaptor.addChild(root_0, ID142_tree);


            SEMICOLON143=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_goto_operator1451); 
            SEMICOLON143_tree = 
            (Object)adaptor.create(SEMICOLON143)
            ;
            adaptor.addChild(root_0, SEMICOLON143_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_operator"


    public static class variable_init_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init_wrapper"
    // Objcm.g:313:1: variable_init_wrapper : variable_init -> ^( VARIABLE_INIT variable_init ) ;
    public final ObjcmParser.variable_init_wrapper_return variable_init_wrapper() throws RecognitionException {
        ObjcmParser.variable_init_wrapper_return retval = new ObjcmParser.variable_init_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.variable_init_return variable_init144 =null;


        RewriteRuleSubtreeStream stream_variable_init=new RewriteRuleSubtreeStream(adaptor,"rule variable_init");
        try {
            // Objcm.g:314:2: ( variable_init -> ^( VARIABLE_INIT variable_init ) )
            // Objcm.g:314:4: variable_init
            {
            pushFollow(FOLLOW_variable_init_in_variable_init_wrapper1462);
            variable_init144=variable_init();

            state._fsp--;

            stream_variable_init.add(variable_init144.getTree());

            // AST REWRITE
            // elements: variable_init
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 314:18: -> ^( VARIABLE_INIT variable_init )
            {
                // Objcm.g:314:21: ^( VARIABLE_INIT variable_init )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_INIT, "VARIABLE_INIT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_init.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init_wrapper"


    public static class variable_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init"
    // Objcm.g:316:1: variable_init : full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) ;
    public final ObjcmParser.variable_init_return variable_init() throws RecognitionException {
        ObjcmParser.variable_init_return retval = new ObjcmParser.variable_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON147=null;
        Token COLON148=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper145 =null;

        ObjcmParser.full_expr2_return full_expr2146 =null;


        Object SEMICOLON147_tree=null;
        Object COLON148_tree=null;

        try {
            // Objcm.g:317:2: ( full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) )
            // Objcm.g:317:4: full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_full_expr_wrapper_in_variable_init1480);
            full_expr_wrapper145=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper145.getTree());

            // Objcm.g:317:22: ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==ID||LA32_0==SEMICOLON||LA32_0==VOID||LA32_0==182||LA32_0==185||LA32_0==193||LA32_0==196||LA32_0==201) ) {
                alt32=1;
            }
            else if ( (LA32_0==COLON) ) {
                alt32=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }
            switch (alt32) {
                case 1 :
                    // Objcm.g:317:23: ( ( full_expr2 )? SEMICOLON )
                    {
                    // Objcm.g:317:23: ( ( full_expr2 )? SEMICOLON )
                    // Objcm.g:317:24: ( full_expr2 )? SEMICOLON
                    {
                    // Objcm.g:317:24: ( full_expr2 )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==ID||LA31_0==VOID||LA31_0==182||LA31_0==185||LA31_0==193||LA31_0==196||LA31_0==201) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // Objcm.g:317:24: full_expr2
                            {
                            pushFollow(FOLLOW_full_expr2_in_variable_init1484);
                            full_expr2146=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2146.getTree());

                            }
                            break;

                    }


                    SEMICOLON147=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_variable_init1487); 
                    SEMICOLON147_tree = 
                    (Object)adaptor.create(SEMICOLON147)
                    ;
                    adaptor.addChild(root_0, SEMICOLON147_tree);


                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:317:49: COLON
                    {
                    COLON148=(Token)match(input,COLON,FOLLOW_COLON_in_variable_init1492); 
                    COLON148_tree = 
                    (Object)adaptor.create(COLON148)
                    ;
                    adaptor.addChild(root_0, COLON148_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init"


    public static class known_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_type_started"
    // Objcm.g:319:1: known_type_started : known_types ( ASTERISK )* full_expr2 ;
    public final ObjcmParser.known_type_started_return known_type_started() throws RecognitionException {
        ObjcmParser.known_type_started_return retval = new ObjcmParser.known_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK150=null;
        ObjcmParser.known_types_return known_types149 =null;

        ObjcmParser.full_expr2_return full_expr2151 =null;


        Object ASTERISK150_tree=null;

        try {
            // Objcm.g:320:2: ( known_types ( ASTERISK )* full_expr2 )
            // Objcm.g:320:4: known_types ( ASTERISK )* full_expr2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_known_types_in_known_type_started1504);
            known_types149=known_types();

            state._fsp--;

            adaptor.addChild(root_0, known_types149.getTree());

            // Objcm.g:320:16: ( ASTERISK )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==ASTERISK) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // Objcm.g:320:16: ASTERISK
            	    {
            	    ASTERISK150=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_known_type_started1506); 
            	    ASTERISK150_tree = 
            	    (Object)adaptor.create(ASTERISK150)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK150_tree);


            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);


            pushFollow(FOLLOW_full_expr2_in_known_type_started1509);
            full_expr2151=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2151.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_type_started"


    public static class typeof_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof_started"
    // Objcm.g:322:1: typeof_started : typeof full_expr_wrapper ;
    public final ObjcmParser.typeof_started_return typeof_started() throws RecognitionException {
        ObjcmParser.typeof_started_return retval = new ObjcmParser.typeof_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typeof_return typeof152 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper153 =null;



        try {
            // Objcm.g:323:2: ( typeof full_expr_wrapper )
            // Objcm.g:323:4: typeof full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typeof_in_typeof_started1521);
            typeof152=typeof();

            state._fsp--;

            adaptor.addChild(root_0, typeof152.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_typeof_started1523);
            full_expr_wrapper153=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper153.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof_started"


    public static class struct_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_variable"
    // Objcm.g:326:1: struct_variable : STRUCT_PREFIX full_expr_wrapper ;
    public final ObjcmParser.struct_variable_return struct_variable() throws RecognitionException {
        ObjcmParser.struct_variable_return retval = new ObjcmParser.struct_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX154=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper155 =null;


        Object STRUCT_PREFIX154_tree=null;

        try {
            // Objcm.g:327:2: ( STRUCT_PREFIX full_expr_wrapper )
            // Objcm.g:327:4: STRUCT_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX154=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_variable1536); 
            STRUCT_PREFIX154_tree = 
            (Object)adaptor.create(STRUCT_PREFIX154)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX154_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_struct_variable1538);
            full_expr_wrapper155=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper155.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_variable"


    public static class enum_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_variable"
    // Objcm.g:329:1: enum_variable : ENUM_PREFIX full_expr_wrapper ;
    public final ObjcmParser.enum_variable_return enum_variable() throws RecognitionException {
        ObjcmParser.enum_variable_return retval = new ObjcmParser.enum_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX156=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper157 =null;


        Object ENUM_PREFIX156_tree=null;

        try {
            // Objcm.g:330:2: ( ENUM_PREFIX full_expr_wrapper )
            // Objcm.g:330:4: ENUM_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX156=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_enum_variable1547); 
            ENUM_PREFIX156_tree = 
            (Object)adaptor.create(ENUM_PREFIX156)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX156_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_enum_variable1549);
            full_expr_wrapper157=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper157.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_variable"


    public static class const_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expression"
    // Objcm.g:332:1: const_expression : CONST_PREFIX full_expr_wrapper ;
    public final ObjcmParser.const_expression_return const_expression() throws RecognitionException {
        ObjcmParser.const_expression_return retval = new ObjcmParser.const_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX158=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper159 =null;


        Object CONST_PREFIX158_tree=null;

        try {
            // Objcm.g:333:2: ( CONST_PREFIX full_expr_wrapper )
            // Objcm.g:333:4: CONST_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            CONST_PREFIX158=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_const_expression1560); 
            CONST_PREFIX158_tree = 
            (Object)adaptor.create(CONST_PREFIX158)
            ;
            adaptor.addChild(root_0, CONST_PREFIX158_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_const_expression1562);
            full_expr_wrapper159=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper159.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expression"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // Objcm.g:335:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcmParser.throw_stmt_wrapper_return retval = new ObjcmParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.throw_stmt_return throw_stmt160 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // Objcm.g:336:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // Objcm.g:336:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper1571);
            throw_stmt160=throw_stmt();

            state._fsp--;

            stream_throw_stmt.add(throw_stmt160.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 336:15: -> ^( THROW_STMT throw_stmt )
            {
                // Objcm.g:336:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // Objcm.g:338:1: throw_stmt : '@throw' SEMICOLON ;
    public final ObjcmParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcmParser.throw_stmt_return retval = new ObjcmParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal161=null;
        Token SEMICOLON162=null;

        Object string_literal161_tree=null;
        Object SEMICOLON162_tree=null;

        try {
            // Objcm.g:339:2: ( '@throw' SEMICOLON )
            // Objcm.g:339:4: '@throw' SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal161=(Token)match(input,177,FOLLOW_177_in_throw_stmt1588); 
            string_literal161_tree = 
            (Object)adaptor.create(string_literal161)
            ;
            adaptor.addChild(root_0, string_literal161_tree);


            SEMICOLON162=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_throw_stmt1591); 
            SEMICOLON162_tree = 
            (Object)adaptor.create(SEMICOLON162)
            ;
            adaptor.addChild(root_0, SEMICOLON162_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class try_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt"
    // Objcm.g:342:1: try_stmt : '@try' block ( catch_stmt )* ( '@finally' block )? ;
    public final ObjcmParser.try_stmt_return try_stmt() throws RecognitionException {
        ObjcmParser.try_stmt_return retval = new ObjcmParser.try_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal163=null;
        Token string_literal166=null;
        ObjcmParser.block_return block164 =null;

        ObjcmParser.catch_stmt_return catch_stmt165 =null;

        ObjcmParser.block_return block167 =null;


        Object string_literal163_tree=null;
        Object string_literal166_tree=null;

        try {
            // Objcm.g:342:9: ( '@try' block ( catch_stmt )* ( '@finally' block )? )
            // Objcm.g:342:11: '@try' block ( catch_stmt )* ( '@finally' block )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal163=(Token)match(input,178,FOLLOW_178_in_try_stmt1602); 
            string_literal163_tree = 
            (Object)adaptor.create(string_literal163)
            ;
            adaptor.addChild(root_0, string_literal163_tree);


            pushFollow(FOLLOW_block_in_try_stmt1605);
            block164=block();

            state._fsp--;

            adaptor.addChild(root_0, block164.getTree());

            // Objcm.g:342:26: ( catch_stmt )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==165) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // Objcm.g:342:26: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt1608);
            	    catch_stmt165=catch_stmt();

            	    state._fsp--;

            	    adaptor.addChild(root_0, catch_stmt165.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            // Objcm.g:342:38: ( '@finally' block )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==168) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // Objcm.g:342:39: '@finally' block
                    {
                    string_literal166=(Token)match(input,168,FOLLOW_168_in_try_stmt1612); 
                    string_literal166_tree = 
                    (Object)adaptor.create(string_literal166)
                    ;
                    adaptor.addChild(root_0, string_literal166_tree);


                    pushFollow(FOLLOW_block_in_try_stmt1615);
                    block167=block();

                    state._fsp--;

                    adaptor.addChild(root_0, block167.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // Objcm.g:345:1: catch_stmt : '@catch' L_BR ID ( ASTERISK )* ID R_BR block ;
    public final ObjcmParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcmParser.catch_stmt_return retval = new ObjcmParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal168=null;
        Token L_BR169=null;
        Token ID170=null;
        Token ASTERISK171=null;
        Token ID172=null;
        Token R_BR173=null;
        ObjcmParser.block_return block174 =null;


        Object string_literal168_tree=null;
        Object L_BR169_tree=null;
        Object ID170_tree=null;
        Object ASTERISK171_tree=null;
        Object ID172_tree=null;
        Object R_BR173_tree=null;

        try {
            // Objcm.g:346:2: ( '@catch' L_BR ID ( ASTERISK )* ID R_BR block )
            // Objcm.g:346:4: '@catch' L_BR ID ( ASTERISK )* ID R_BR block
            {
            root_0 = (Object)adaptor.nil();


            string_literal168=(Token)match(input,165,FOLLOW_165_in_catch_stmt1629); 
            string_literal168_tree = 
            (Object)adaptor.create(string_literal168)
            ;
            adaptor.addChild(root_0, string_literal168_tree);


            L_BR169=(Token)match(input,L_BR,FOLLOW_L_BR_in_catch_stmt1632); 
            L_BR169_tree = 
            (Object)adaptor.create(L_BR169)
            ;
            adaptor.addChild(root_0, L_BR169_tree);


            ID170=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1635); 
            ID170_tree = 
            (Object)adaptor.create(ID170)
            ;
            adaptor.addChild(root_0, ID170_tree);


            // Objcm.g:346:24: ( ASTERISK )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==ASTERISK) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // Objcm.g:346:24: ASTERISK
            	    {
            	    ASTERISK171=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_catch_stmt1638); 
            	    ASTERISK171_tree = 
            	    (Object)adaptor.create(ASTERISK171)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK171_tree);


            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            ID172=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1641); 
            ID172_tree = 
            (Object)adaptor.create(ID172)
            ;
            adaptor.addChild(root_0, ID172_tree);


            R_BR173=(Token)match(input,R_BR,FOLLOW_R_BR_in_catch_stmt1644); 
            R_BR173_tree = 
            (Object)adaptor.create(R_BR173)
            ;
            adaptor.addChild(root_0, R_BR173_tree);


            pushFollow(FOLLOW_block_in_catch_stmt1647);
            block174=block();

            state._fsp--;

            adaptor.addChild(root_0, block174.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class switch_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt_wrapper"
    // Objcm.g:349:1: switch_stmt_wrapper : switch_stmt -> ^( SWITCH switch_stmt ) ;
    public final ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper() throws RecognitionException {
        ObjcmParser.switch_stmt_wrapper_return retval = new ObjcmParser.switch_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.switch_stmt_return switch_stmt175 =null;


        RewriteRuleSubtreeStream stream_switch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule switch_stmt");
        try {
            // Objcm.g:350:2: ( switch_stmt -> ^( SWITCH switch_stmt ) )
            // Objcm.g:350:4: switch_stmt
            {
            pushFollow(FOLLOW_switch_stmt_in_switch_stmt_wrapper1660);
            switch_stmt175=switch_stmt();

            state._fsp--;

            stream_switch_stmt.add(switch_stmt175.getTree());

            // AST REWRITE
            // elements: switch_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 350:16: -> ^( SWITCH switch_stmt )
            {
                // Objcm.g:350:19: ^( SWITCH switch_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH, "SWITCH")
                , root_1);

                adaptor.addChild(root_1, stream_switch_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt_wrapper"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // Objcm.g:352:1: switch_stmt : 'switch' L_BR switch_expr R_BR switch_body_wrapper ;
    public final ObjcmParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcmParser.switch_stmt_return retval = new ObjcmParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal176=null;
        Token L_BR177=null;
        Token R_BR179=null;
        ObjcmParser.switch_expr_return switch_expr178 =null;

        ObjcmParser.switch_body_wrapper_return switch_body_wrapper180 =null;


        Object string_literal176_tree=null;
        Object L_BR177_tree=null;
        Object R_BR179_tree=null;

        try {
            // Objcm.g:353:2: ( 'switch' L_BR switch_expr R_BR switch_body_wrapper )
            // Objcm.g:353:4: 'switch' L_BR switch_expr R_BR switch_body_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal176=(Token)match(input,198,FOLLOW_198_in_switch_stmt1677); 
            string_literal176_tree = 
            (Object)adaptor.create(string_literal176)
            ;
            adaptor.addChild(root_0, string_literal176_tree);


            L_BR177=(Token)match(input,L_BR,FOLLOW_L_BR_in_switch_stmt1680); 
            L_BR177_tree = 
            (Object)adaptor.create(L_BR177)
            ;
            adaptor.addChild(root_0, L_BR177_tree);


            pushFollow(FOLLOW_switch_expr_in_switch_stmt1683);
            switch_expr178=switch_expr();

            state._fsp--;

            adaptor.addChild(root_0, switch_expr178.getTree());

            R_BR179=(Token)match(input,R_BR,FOLLOW_R_BR_in_switch_stmt1685); 
            R_BR179_tree = 
            (Object)adaptor.create(R_BR179)
            ;
            adaptor.addChild(root_0, R_BR179_tree);


            pushFollow(FOLLOW_switch_body_wrapper_in_switch_stmt1691);
            switch_body_wrapper180=switch_body_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, switch_body_wrapper180.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body_wrapper"
    // Objcm.g:357:1: switch_body_wrapper : L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) ;
    public final ObjcmParser.switch_body_wrapper_return switch_body_wrapper() throws RecognitionException {
        ObjcmParser.switch_body_wrapper_return retval = new ObjcmParser.switch_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR181=null;
        Token R_FBR183=null;
        ObjcmParser.switch_body_return switch_body182 =null;


        Object L_FBR181_tree=null;
        Object R_FBR183_tree=null;
        RewriteRuleTokenStream stream_R_FBR=new RewriteRuleTokenStream(adaptor,"token R_FBR");
        RewriteRuleTokenStream stream_L_FBR=new RewriteRuleTokenStream(adaptor,"token L_FBR");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // Objcm.g:358:2: ( L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) )
            // Objcm.g:358:4: L_FBR switch_body R_FBR
            {
            L_FBR181=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_switch_body_wrapper1704);  
            stream_L_FBR.add(L_FBR181);


            pushFollow(FOLLOW_switch_body_in_switch_body_wrapper1706);
            switch_body182=switch_body();

            state._fsp--;

            stream_switch_body.add(switch_body182.getTree());

            R_FBR183=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_switch_body_wrapper1708);  
            stream_R_FBR.add(R_FBR183);


            // AST REWRITE
            // elements: switch_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 358:28: -> ^( SWITCH_BODY switch_body )
            {
                // Objcm.g:358:31: ^( SWITCH_BODY switch_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_BODY, "SWITCH_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_switch_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body_wrapper"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // Objcm.g:360:1: switch_body : ( block_internal_full )* ( switch_internal )* ;
    public final ObjcmParser.switch_body_return switch_body() throws RecognitionException {
        ObjcmParser.switch_body_return retval = new ObjcmParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_full_return block_internal_full184 =null;

        ObjcmParser.switch_internal_return switch_internal185 =null;



        try {
            // Objcm.g:361:2: ( ( block_internal_full )* ( switch_internal )* )
            // Objcm.g:361:4: ( block_internal_full )* ( switch_internal )*
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:361:4: ( block_internal_full )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==ASTERISK||LA37_0==BREAK_WORD||LA37_0==CONST_PREFIX||LA37_0==ENUM_PREFIX||LA37_0==ID||LA37_0==L_AND||LA37_0==L_BR||LA37_0==L_KBR||LA37_0==L_MINUS||LA37_0==L_MINUS_MINUS||LA37_0==L_NOT||LA37_0==L_PLUS||LA37_0==L_PLUS_PLUS||LA37_0==L_TILDA||LA37_0==NUMBER||LA37_0==SEMICOLON||(LA37_0 >= SINGLE_OP && LA37_0 <= SIZEOF)||LA37_0==STATIC_PREFIX||(LA37_0 >= STRING_LITERAL && LA37_0 <= STRING_LITERAL3)||LA37_0==STRUCT_PREFIX||LA37_0==VOID||LA37_0==166||LA37_0==173||LA37_0==175||(LA37_0 >= 177 && LA37_0 <= 179)||(LA37_0 >= 181 && LA37_0 <= 182)||LA37_0==185||(LA37_0 >= 187 && LA37_0 <= 193)||(LA37_0 >= 195 && LA37_0 <= 198)||(LA37_0 >= 201 && LA37_0 <= 202)) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // Objcm.g:361:4: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_switch_body1727);
            	    block_internal_full184=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full184.getTree());

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);


            // Objcm.g:362:3: ( switch_internal )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==183||LA38_0==186) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // Objcm.g:362:3: switch_internal
            	    {
            	    pushFollow(FOLLOW_switch_internal_in_switch_body1732);
            	    switch_internal185=switch_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, switch_internal185.getTree());

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class switch_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_expr"
    // Objcm.g:365:1: switch_expr : classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) ;
    public final ObjcmParser.switch_expr_return switch_expr() throws RecognitionException {
        ObjcmParser.switch_expr_return retval = new ObjcmParser.switch_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp186 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:366:2: ( classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) )
            // Objcm.g:366:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_switch_expr1745);
            classical_expr_wrp186=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp186.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:23: -> ^( SWITCH_EXPRESSION classical_expr_wrp )
            {
                // Objcm.g:366:26: ^( SWITCH_EXPRESSION classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_EXPRESSION, "SWITCH_EXPRESSION")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_expr"


    public static class switch_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_internal"
    // Objcm.g:368:1: switch_internal : ( case_stmt_wrapper | default_stmt_wrapper );
    public final ObjcmParser.switch_internal_return switch_internal() throws RecognitionException {
        ObjcmParser.switch_internal_return retval = new ObjcmParser.switch_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper187 =null;

        ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper188 =null;



        try {
            // Objcm.g:369:2: ( case_stmt_wrapper | default_stmt_wrapper )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==183) ) {
                alt39=1;
            }
            else if ( (LA39_0==186) ) {
                alt39=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }
            switch (alt39) {
                case 1 :
                    // Objcm.g:369:4: case_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_wrapper_in_switch_internal1762);
                    case_stmt_wrapper187=case_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_stmt_wrapper187.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:370:5: default_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_wrapper_in_switch_internal1768);
                    default_stmt_wrapper188=default_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt_wrapper188.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_internal"


    public static class case_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt_wrapper"
    // Objcm.g:372:1: case_stmt_wrapper : case_stmt -> ^( CASE_STMT case_stmt ) ;
    public final ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper() throws RecognitionException {
        ObjcmParser.case_stmt_wrapper_return retval = new ObjcmParser.case_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_return case_stmt189 =null;


        RewriteRuleSubtreeStream stream_case_stmt=new RewriteRuleSubtreeStream(adaptor,"rule case_stmt");
        try {
            // Objcm.g:373:2: ( case_stmt -> ^( CASE_STMT case_stmt ) )
            // Objcm.g:373:4: case_stmt
            {
            pushFollow(FOLLOW_case_stmt_in_case_stmt_wrapper1777);
            case_stmt189=case_stmt();

            state._fsp--;

            stream_case_stmt.add(case_stmt189.getTree());

            // AST REWRITE
            // elements: case_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 373:14: -> ^( CASE_STMT case_stmt )
            {
                // Objcm.g:373:17: ^( CASE_STMT case_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_case_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt_wrapper"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // Objcm.g:375:1: case_stmt : 'case' case_expr_wrapper COLON ( case_body_wrapper )? ;
    public final ObjcmParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcmParser.case_stmt_return retval = new ObjcmParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal190=null;
        Token COLON192=null;
        ObjcmParser.case_expr_wrapper_return case_expr_wrapper191 =null;

        ObjcmParser.case_body_wrapper_return case_body_wrapper193 =null;


        Object string_literal190_tree=null;
        Object COLON192_tree=null;

        try {
            // Objcm.g:376:2: ( 'case' case_expr_wrapper COLON ( case_body_wrapper )? )
            // Objcm.g:376:4: 'case' case_expr_wrapper COLON ( case_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal190=(Token)match(input,183,FOLLOW_183_in_case_stmt1794); 
            string_literal190_tree = 
            (Object)adaptor.create(string_literal190)
            ;
            adaptor.addChild(root_0, string_literal190_tree);


            pushFollow(FOLLOW_case_expr_wrapper_in_case_stmt1797);
            case_expr_wrapper191=case_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, case_expr_wrapper191.getTree());

            COLON192=(Token)match(input,COLON,FOLLOW_COLON_in_case_stmt1800); 
            COLON192_tree = 
            (Object)adaptor.create(COLON192)
            ;
            adaptor.addChild(root_0, COLON192_tree);


            // Objcm.g:377:3: ( case_body_wrapper )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==ASTERISK||LA40_0==BREAK_WORD||LA40_0==CONST_PREFIX||LA40_0==ENUM_PREFIX||LA40_0==ID||LA40_0==L_AND||LA40_0==L_BR||(LA40_0 >= L_FBR && LA40_0 <= L_KBR)||LA40_0==L_MINUS||LA40_0==L_MINUS_MINUS||LA40_0==L_NOT||LA40_0==L_PLUS||LA40_0==L_PLUS_PLUS||LA40_0==L_TILDA||LA40_0==NUMBER||LA40_0==SEMICOLON||(LA40_0 >= SINGLE_OP && LA40_0 <= SIZEOF)||LA40_0==STATIC_PREFIX||(LA40_0 >= STRING_LITERAL && LA40_0 <= STRING_LITERAL3)||LA40_0==STRUCT_PREFIX||LA40_0==VOID||LA40_0==166||LA40_0==173||LA40_0==175||(LA40_0 >= 177 && LA40_0 <= 179)||(LA40_0 >= 181 && LA40_0 <= 182)||LA40_0==185||(LA40_0 >= 187 && LA40_0 <= 193)||(LA40_0 >= 195 && LA40_0 <= 198)||(LA40_0 >= 201 && LA40_0 <= 202)) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // Objcm.g:377:3: case_body_wrapper
                    {
                    pushFollow(FOLLOW_case_body_wrapper_in_case_stmt1805);
                    case_body_wrapper193=case_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_body_wrapper193.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class case_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body_wrapper"
    // Objcm.g:380:1: case_body_wrapper : case_body -> ^( CASE_BODY case_body ) ;
    public final ObjcmParser.case_body_wrapper_return case_body_wrapper() throws RecognitionException {
        ObjcmParser.case_body_wrapper_return retval = new ObjcmParser.case_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_body_return case_body194 =null;


        RewriteRuleSubtreeStream stream_case_body=new RewriteRuleSubtreeStream(adaptor,"rule case_body");
        try {
            // Objcm.g:381:2: ( case_body -> ^( CASE_BODY case_body ) )
            // Objcm.g:381:4: case_body
            {
            pushFollow(FOLLOW_case_body_in_case_body_wrapper1819);
            case_body194=case_body();

            state._fsp--;

            stream_case_body.add(case_body194.getTree());

            // AST REWRITE
            // elements: case_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 381:14: -> ^( CASE_BODY case_body )
            {
                // Objcm.g:381:17: ^( CASE_BODY case_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_BODY, "CASE_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_case_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body_wrapper"


    public static class case_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body"
    // Objcm.g:383:1: case_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.case_body_return case_body() throws RecognitionException {
        ObjcmParser.case_body_return retval = new ObjcmParser.case_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break195 =null;

        ObjcmParser.block_internal_full_return block_internal_full196 =null;



        try {
            // Objcm.g:384:2: ( block_break | ( block_internal_full )+ )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==L_FBR) ) {
                alt42=1;
            }
            else if ( (LA42_0==ASTERISK||LA42_0==BREAK_WORD||LA42_0==CONST_PREFIX||LA42_0==ENUM_PREFIX||LA42_0==ID||LA42_0==L_AND||LA42_0==L_BR||LA42_0==L_KBR||LA42_0==L_MINUS||LA42_0==L_MINUS_MINUS||LA42_0==L_NOT||LA42_0==L_PLUS||LA42_0==L_PLUS_PLUS||LA42_0==L_TILDA||LA42_0==NUMBER||LA42_0==SEMICOLON||(LA42_0 >= SINGLE_OP && LA42_0 <= SIZEOF)||LA42_0==STATIC_PREFIX||(LA42_0 >= STRING_LITERAL && LA42_0 <= STRING_LITERAL3)||LA42_0==STRUCT_PREFIX||LA42_0==VOID||LA42_0==166||LA42_0==173||LA42_0==175||(LA42_0 >= 177 && LA42_0 <= 179)||(LA42_0 >= 181 && LA42_0 <= 182)||LA42_0==185||(LA42_0 >= 187 && LA42_0 <= 193)||(LA42_0 >= 195 && LA42_0 <= 198)||(LA42_0 >= 201 && LA42_0 <= 202)) ) {
                alt42=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }
            switch (alt42) {
                case 1 :
                    // Objcm.g:384:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_case_body1838);
                    block_break195=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break195.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:385:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:385:5: ( block_internal_full )+
                    int cnt41=0;
                    loop41:
                    do {
                        int alt41=2;
                        int LA41_0 = input.LA(1);

                        if ( (LA41_0==ASTERISK||LA41_0==BREAK_WORD||LA41_0==CONST_PREFIX||LA41_0==ENUM_PREFIX||LA41_0==ID||LA41_0==L_AND||LA41_0==L_BR||LA41_0==L_KBR||LA41_0==L_MINUS||LA41_0==L_MINUS_MINUS||LA41_0==L_NOT||LA41_0==L_PLUS||LA41_0==L_PLUS_PLUS||LA41_0==L_TILDA||LA41_0==NUMBER||LA41_0==SEMICOLON||(LA41_0 >= SINGLE_OP && LA41_0 <= SIZEOF)||LA41_0==STATIC_PREFIX||(LA41_0 >= STRING_LITERAL && LA41_0 <= STRING_LITERAL3)||LA41_0==STRUCT_PREFIX||LA41_0==VOID||LA41_0==166||LA41_0==173||LA41_0==175||(LA41_0 >= 177 && LA41_0 <= 179)||(LA41_0 >= 181 && LA41_0 <= 182)||LA41_0==185||(LA41_0 >= 187 && LA41_0 <= 193)||(LA41_0 >= 195 && LA41_0 <= 198)||(LA41_0 >= 201 && LA41_0 <= 202)) ) {
                            alt41=1;
                        }


                        switch (alt41) {
                    	case 1 :
                    	    // Objcm.g:385:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_case_body1845);
                    	    block_internal_full196=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full196.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt41 >= 1 ) break loop41;
                                EarlyExitException eee =
                                    new EarlyExitException(41, input);
                                throw eee;
                        }
                        cnt41++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body"


    public static class case_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr_wrapper"
    // Objcm.g:388:1: case_expr_wrapper : case_expr -> ^( CASE_EXPR case_expr ) ;
    public final ObjcmParser.case_expr_wrapper_return case_expr_wrapper() throws RecognitionException {
        ObjcmParser.case_expr_wrapper_return retval = new ObjcmParser.case_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_expr_return case_expr197 =null;


        RewriteRuleSubtreeStream stream_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule case_expr");
        try {
            // Objcm.g:389:2: ( case_expr -> ^( CASE_EXPR case_expr ) )
            // Objcm.g:389:4: case_expr
            {
            pushFollow(FOLLOW_case_expr_in_case_expr_wrapper1861);
            case_expr197=case_expr();

            state._fsp--;

            stream_case_expr.add(case_expr197.getTree());

            // AST REWRITE
            // elements: case_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 389:14: -> ^( CASE_EXPR case_expr )
            {
                // Objcm.g:389:17: ^( CASE_EXPR case_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_EXPR, "CASE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_case_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr_wrapper"


    public static class case_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr"
    // Objcm.g:391:1: case_expr : ( const_expr | ID );
    public final ObjcmParser.case_expr_return case_expr() throws RecognitionException {
        ObjcmParser.case_expr_return retval = new ObjcmParser.case_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID199=null;
        ObjcmParser.const_expr_return const_expr198 =null;


        Object ID199_tree=null;

        try {
            // Objcm.g:392:2: ( const_expr | ID )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==NUMBER||(LA43_0 >= STRING_LITERAL && LA43_0 <= STRING_LITERAL3)||LA43_0==179||LA43_0==195) ) {
                alt43=1;
            }
            else if ( (LA43_0==ID) ) {
                alt43=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;

            }
            switch (alt43) {
                case 1 :
                    // Objcm.g:392:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_case_expr1883);
                    const_expr198=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr198.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:393:5: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID199=(Token)match(input,ID,FOLLOW_ID_in_case_expr1890); 
                    ID199_tree = 
                    (Object)adaptor.create(ID199)
                    ;
                    adaptor.addChild(root_0, ID199_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr"


    public static class block_break_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_break"
    // Objcm.g:395:1: block_break : block_case ( single_operators )? ;
    public final ObjcmParser.block_break_return block_break() throws RecognitionException {
        ObjcmParser.block_break_return retval = new ObjcmParser.block_break_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_case_return block_case200 =null;

        ObjcmParser.single_operators_return single_operators201 =null;



        try {
            // Objcm.g:396:2: ( block_case ( single_operators )? )
            // Objcm.g:396:4: block_case ( single_operators )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_case_in_block_break1901);
            block_case200=block_case();

            state._fsp--;

            adaptor.addChild(root_0, block_case200.getTree());

            // Objcm.g:396:15: ( single_operators )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==BREAK_WORD||LA44_0==SINGLE_OP) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // Objcm.g:396:15: single_operators
                    {
                    pushFollow(FOLLOW_single_operators_in_block_break1903);
                    single_operators201=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators201.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_break"


    public static class default_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt_wrapper"
    // Objcm.g:399:1: default_stmt_wrapper : default_stmt -> ^( DEFAULT_STMT default_stmt ) ;
    public final ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper() throws RecognitionException {
        ObjcmParser.default_stmt_wrapper_return retval = new ObjcmParser.default_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_stmt_return default_stmt202 =null;


        RewriteRuleSubtreeStream stream_default_stmt=new RewriteRuleSubtreeStream(adaptor,"rule default_stmt");
        try {
            // Objcm.g:400:2: ( default_stmt -> ^( DEFAULT_STMT default_stmt ) )
            // Objcm.g:400:4: default_stmt
            {
            pushFollow(FOLLOW_default_stmt_in_default_stmt_wrapper1915);
            default_stmt202=default_stmt();

            state._fsp--;

            stream_default_stmt.add(default_stmt202.getTree());

            // AST REWRITE
            // elements: default_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 400:17: -> ^( DEFAULT_STMT default_stmt )
            {
                // Objcm.g:400:20: ^( DEFAULT_STMT default_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_default_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt_wrapper"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // Objcm.g:402:1: default_stmt : 'default' COLON ( default_body_wrapper )? ;
    public final ObjcmParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcmParser.default_stmt_return retval = new ObjcmParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal203=null;
        Token COLON204=null;
        ObjcmParser.default_body_wrapper_return default_body_wrapper205 =null;


        Object string_literal203_tree=null;
        Object COLON204_tree=null;

        try {
            // Objcm.g:403:2: ( 'default' COLON ( default_body_wrapper )? )
            // Objcm.g:403:4: 'default' COLON ( default_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal203=(Token)match(input,186,FOLLOW_186_in_default_stmt1932); 
            string_literal203_tree = 
            (Object)adaptor.create(string_literal203)
            ;
            adaptor.addChild(root_0, string_literal203_tree);


            COLON204=(Token)match(input,COLON,FOLLOW_COLON_in_default_stmt1935); 
            COLON204_tree = 
            (Object)adaptor.create(COLON204)
            ;
            adaptor.addChild(root_0, COLON204_tree);


            // Objcm.g:404:3: ( default_body_wrapper )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==ASTERISK||LA45_0==BREAK_WORD||LA45_0==CONST_PREFIX||LA45_0==ENUM_PREFIX||LA45_0==ID||LA45_0==L_AND||LA45_0==L_BR||(LA45_0 >= L_FBR && LA45_0 <= L_KBR)||LA45_0==L_MINUS||LA45_0==L_MINUS_MINUS||LA45_0==L_NOT||LA45_0==L_PLUS||LA45_0==L_PLUS_PLUS||LA45_0==L_TILDA||LA45_0==NUMBER||LA45_0==SEMICOLON||(LA45_0 >= SINGLE_OP && LA45_0 <= SIZEOF)||LA45_0==STATIC_PREFIX||(LA45_0 >= STRING_LITERAL && LA45_0 <= STRING_LITERAL3)||LA45_0==STRUCT_PREFIX||LA45_0==VOID||LA45_0==166||LA45_0==173||LA45_0==175||(LA45_0 >= 177 && LA45_0 <= 179)||(LA45_0 >= 181 && LA45_0 <= 182)||LA45_0==185||(LA45_0 >= 187 && LA45_0 <= 193)||(LA45_0 >= 195 && LA45_0 <= 198)||(LA45_0 >= 201 && LA45_0 <= 202)) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // Objcm.g:404:3: default_body_wrapper
                    {
                    pushFollow(FOLLOW_default_body_wrapper_in_default_stmt1940);
                    default_body_wrapper205=default_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_body_wrapper205.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class default_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body_wrapper"
    // Objcm.g:407:1: default_body_wrapper : default_body -> ^( DEFAULT_BODY default_body ) ;
    public final ObjcmParser.default_body_wrapper_return default_body_wrapper() throws RecognitionException {
        ObjcmParser.default_body_wrapper_return retval = new ObjcmParser.default_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_body_return default_body206 =null;


        RewriteRuleSubtreeStream stream_default_body=new RewriteRuleSubtreeStream(adaptor,"rule default_body");
        try {
            // Objcm.g:408:2: ( default_body -> ^( DEFAULT_BODY default_body ) )
            // Objcm.g:408:4: default_body
            {
            pushFollow(FOLLOW_default_body_in_default_body_wrapper1953);
            default_body206=default_body();

            state._fsp--;

            stream_default_body.add(default_body206.getTree());

            // AST REWRITE
            // elements: default_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 408:17: -> ^( DEFAULT_BODY default_body )
            {
                // Objcm.g:408:20: ^( DEFAULT_BODY default_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_BODY, "DEFAULT_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_default_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body_wrapper"


    public static class default_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body"
    // Objcm.g:411:1: default_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.default_body_return default_body() throws RecognitionException {
        ObjcmParser.default_body_return retval = new ObjcmParser.default_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break207 =null;

        ObjcmParser.block_internal_full_return block_internal_full208 =null;



        try {
            // Objcm.g:412:2: ( block_break | ( block_internal_full )+ )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==L_FBR) ) {
                alt47=1;
            }
            else if ( (LA47_0==ASTERISK||LA47_0==BREAK_WORD||LA47_0==CONST_PREFIX||LA47_0==ENUM_PREFIX||LA47_0==ID||LA47_0==L_AND||LA47_0==L_BR||LA47_0==L_KBR||LA47_0==L_MINUS||LA47_0==L_MINUS_MINUS||LA47_0==L_NOT||LA47_0==L_PLUS||LA47_0==L_PLUS_PLUS||LA47_0==L_TILDA||LA47_0==NUMBER||LA47_0==SEMICOLON||(LA47_0 >= SINGLE_OP && LA47_0 <= SIZEOF)||LA47_0==STATIC_PREFIX||(LA47_0 >= STRING_LITERAL && LA47_0 <= STRING_LITERAL3)||LA47_0==STRUCT_PREFIX||LA47_0==VOID||LA47_0==166||LA47_0==173||LA47_0==175||(LA47_0 >= 177 && LA47_0 <= 179)||(LA47_0 >= 181 && LA47_0 <= 182)||LA47_0==185||(LA47_0 >= 187 && LA47_0 <= 193)||(LA47_0 >= 195 && LA47_0 <= 198)||(LA47_0 >= 201 && LA47_0 <= 202)) ) {
                alt47=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }
            switch (alt47) {
                case 1 :
                    // Objcm.g:412:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_default_body1973);
                    block_break207=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break207.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:413:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:413:5: ( block_internal_full )+
                    int cnt46=0;
                    loop46:
                    do {
                        int alt46=2;
                        int LA46_0 = input.LA(1);

                        if ( (LA46_0==ASTERISK||LA46_0==BREAK_WORD||LA46_0==CONST_PREFIX||LA46_0==ENUM_PREFIX||LA46_0==ID||LA46_0==L_AND||LA46_0==L_BR||LA46_0==L_KBR||LA46_0==L_MINUS||LA46_0==L_MINUS_MINUS||LA46_0==L_NOT||LA46_0==L_PLUS||LA46_0==L_PLUS_PLUS||LA46_0==L_TILDA||LA46_0==NUMBER||LA46_0==SEMICOLON||(LA46_0 >= SINGLE_OP && LA46_0 <= SIZEOF)||LA46_0==STATIC_PREFIX||(LA46_0 >= STRING_LITERAL && LA46_0 <= STRING_LITERAL3)||LA46_0==STRUCT_PREFIX||LA46_0==VOID||LA46_0==166||LA46_0==173||LA46_0==175||(LA46_0 >= 177 && LA46_0 <= 179)||(LA46_0 >= 181 && LA46_0 <= 182)||LA46_0==185||(LA46_0 >= 187 && LA46_0 <= 193)||(LA46_0 >= 195 && LA46_0 <= 198)||(LA46_0 >= 201 && LA46_0 <= 202)) ) {
                            alt46=1;
                        }


                        switch (alt46) {
                    	case 1 :
                    	    // Objcm.g:413:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_default_body1979);
                    	    block_internal_full208=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full208.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt46 >= 1 ) break loop46;
                                EarlyExitException eee =
                                    new EarlyExitException(46, input);
                                throw eee;
                        }
                        cnt46++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body"


    public static class single_operators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_operators"
    // Objcm.g:416:1: single_operators : ( SINGLE_OP | break_wrapper );
    public final ObjcmParser.single_operators_return single_operators() throws RecognitionException {
        ObjcmParser.single_operators_return retval = new ObjcmParser.single_operators_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_OP209=null;
        ObjcmParser.break_wrapper_return break_wrapper210 =null;


        Object SINGLE_OP209_tree=null;

        try {
            // Objcm.g:417:2: ( SINGLE_OP | break_wrapper )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==SINGLE_OP) ) {
                alt48=1;
            }
            else if ( (LA48_0==BREAK_WORD) ) {
                alt48=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;

            }
            switch (alt48) {
                case 1 :
                    // Objcm.g:417:4: SINGLE_OP
                    {
                    root_0 = (Object)adaptor.nil();


                    SINGLE_OP209=(Token)match(input,SINGLE_OP,FOLLOW_SINGLE_OP_in_single_operators1994); 
                    SINGLE_OP209_tree = 
                    (Object)adaptor.create(SINGLE_OP209)
                    ;
                    adaptor.addChild(root_0, SINGLE_OP209_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:418:5: break_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_wrapper_in_single_operators2001);
                    break_wrapper210=break_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, break_wrapper210.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_operators"


    public static class break_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_wrapper"
    // Objcm.g:421:1: break_wrapper : break_stmt -> ^( BREAK break_stmt ) ;
    public final ObjcmParser.break_wrapper_return break_wrapper() throws RecognitionException {
        ObjcmParser.break_wrapper_return retval = new ObjcmParser.break_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.break_stmt_return break_stmt211 =null;


        RewriteRuleSubtreeStream stream_break_stmt=new RewriteRuleSubtreeStream(adaptor,"rule break_stmt");
        try {
            // Objcm.g:422:2: ( break_stmt -> ^( BREAK break_stmt ) )
            // Objcm.g:422:4: break_stmt
            {
            pushFollow(FOLLOW_break_stmt_in_break_wrapper2013);
            break_stmt211=break_stmt();

            state._fsp--;

            stream_break_stmt.add(break_stmt211.getTree());

            // AST REWRITE
            // elements: break_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 422:15: -> ^( BREAK break_stmt )
            {
                // Objcm.g:422:18: ^( BREAK break_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK, "BREAK")
                , root_1);

                adaptor.addChild(root_1, stream_break_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_wrapper"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // Objcm.g:424:1: break_stmt : BREAK_WORD SEMICOLON ;
    public final ObjcmParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcmParser.break_stmt_return retval = new ObjcmParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BREAK_WORD212=null;
        Token SEMICOLON213=null;

        Object BREAK_WORD212_tree=null;
        Object SEMICOLON213_tree=null;

        try {
            // Objcm.g:425:2: ( BREAK_WORD SEMICOLON )
            // Objcm.g:425:4: BREAK_WORD SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            BREAK_WORD212=(Token)match(input,BREAK_WORD,FOLLOW_BREAK_WORD_in_break_stmt2031); 
            BREAK_WORD212_tree = 
            (Object)adaptor.create(BREAK_WORD212)
            ;
            adaptor.addChild(root_0, BREAK_WORD212_tree);


            SEMICOLON213=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_break_stmt2034); 
            SEMICOLON213_tree = 
            (Object)adaptor.create(SEMICOLON213)
            ;
            adaptor.addChild(root_0, SEMICOLON213_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // Objcm.g:427:1: do_stmt : 'do' if_stmt_block 'while' L_BR expression R_BR ;
    public final ObjcmParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcmParser.do_stmt_return retval = new ObjcmParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal214=null;
        Token string_literal216=null;
        Token L_BR217=null;
        Token R_BR219=null;
        ObjcmParser.if_stmt_block_return if_stmt_block215 =null;

        ObjcmParser.expression_return expression218 =null;


        Object string_literal214_tree=null;
        Object string_literal216_tree=null;
        Object L_BR217_tree=null;
        Object R_BR219_tree=null;

        try {
            // Objcm.g:427:9: ( 'do' if_stmt_block 'while' L_BR expression R_BR )
            // Objcm.g:427:11: 'do' if_stmt_block 'while' L_BR expression R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal214=(Token)match(input,187,FOLLOW_187_in_do_stmt2044); 
            string_literal214_tree = 
            (Object)adaptor.create(string_literal214)
            ;
            adaptor.addChild(root_0, string_literal214_tree);


            pushFollow(FOLLOW_if_stmt_block_in_do_stmt2047);
            if_stmt_block215=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block215.getTree());

            string_literal216=(Token)match(input,202,FOLLOW_202_in_do_stmt2050); 
            string_literal216_tree = 
            (Object)adaptor.create(string_literal216)
            ;
            adaptor.addChild(root_0, string_literal216_tree);


            L_BR217=(Token)match(input,L_BR,FOLLOW_L_BR_in_do_stmt2053); 
            L_BR217_tree = 
            (Object)adaptor.create(L_BR217)
            ;
            adaptor.addChild(root_0, L_BR217_tree);


            pushFollow(FOLLOW_expression_in_do_stmt2056);
            expression218=expression();

            state._fsp--;

            adaptor.addChild(root_0, expression218.getTree());

            R_BR219=(Token)match(input,R_BR,FOLLOW_R_BR_in_do_stmt2058); 
            R_BR219_tree = 
            (Object)adaptor.create(R_BR219)
            ;
            adaptor.addChild(root_0, R_BR219_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // Objcm.g:429:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcmParser.while_stmt_wrapper_return retval = new ObjcmParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.while_stmt_return while_stmt220 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // Objcm.g:430:2: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // Objcm.g:430:4: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper2067);
            while_stmt220=while_stmt();

            state._fsp--;

            stream_while_stmt.add(while_stmt220.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 430:15: -> ^( WHILE_STMT while_stmt )
            {
                // Objcm.g:430:18: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // Objcm.g:433:1: while_stmt : 'while' L_BR while_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcmParser.while_stmt_return retval = new ObjcmParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal221=null;
        Token L_BR222=null;
        Token R_BR224=null;
        ObjcmParser.while_expr_return while_expr223 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper225 =null;


        Object string_literal221_tree=null;
        Object L_BR222_tree=null;
        Object R_BR224_tree=null;

        try {
            // Objcm.g:434:2: ( 'while' L_BR while_expr R_BR if_stmt_block_wrapper )
            // Objcm.g:434:4: 'while' L_BR while_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal221=(Token)match(input,202,FOLLOW_202_in_while_stmt2086); 
            string_literal221_tree = 
            (Object)adaptor.create(string_literal221)
            ;
            adaptor.addChild(root_0, string_literal221_tree);


            L_BR222=(Token)match(input,L_BR,FOLLOW_L_BR_in_while_stmt2089); 
            L_BR222_tree = 
            (Object)adaptor.create(L_BR222)
            ;
            adaptor.addChild(root_0, L_BR222_tree);


            pushFollow(FOLLOW_while_expr_in_while_stmt2092);
            while_expr223=while_expr();

            state._fsp--;

            adaptor.addChild(root_0, while_expr223.getTree());

            R_BR224=(Token)match(input,R_BR,FOLLOW_R_BR_in_while_stmt2094); 
            R_BR224_tree = 
            (Object)adaptor.create(R_BR224)
            ;
            adaptor.addChild(root_0, R_BR224_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_while_stmt2097);
            if_stmt_block_wrapper225=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper225.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class while_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_expr"
    // Objcm.g:436:1: while_expr : classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.while_expr_return while_expr() throws RecognitionException {
        ObjcmParser.while_expr_return retval = new ObjcmParser.while_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp226 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:437:2: ( classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) )
            // Objcm.g:437:5: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_while_expr2110);
            classical_expr_wrp226=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp226.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 437:24: -> ^( WHILE_EXPR classical_expr_wrp )
            {
                // Objcm.g:437:27: ^( WHILE_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_EXPR, "WHILE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_expr"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // Objcm.g:439:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcmParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcmParser.for_stmt_wrapper_return retval = new ObjcmParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.for_stmt_return for_stmt227 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // Objcm.g:440:2: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // Objcm.g:440:4: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper2129);
            for_stmt227=for_stmt();

            state._fsp--;

            stream_for_stmt.add(for_stmt227.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 440:13: -> ^( FOR_STMT for_stmt )
            {
                // Objcm.g:440:16: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // Objcm.g:442:1: for_stmt : 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block ;
    public final ObjcmParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcmParser.for_stmt_return retval = new ObjcmParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal228=null;
        Token L_BR229=null;
        Token R_BR231=null;
        ObjcmParser.for_stmt_expr_wrapper_return for_stmt_expr_wrapper230 =null;

        ObjcmParser.if_stmt_block_return if_stmt_block232 =null;


        Object string_literal228_tree=null;
        Object L_BR229_tree=null;
        Object R_BR231_tree=null;

        try {
            // Objcm.g:442:9: ( 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block )
            // Objcm.g:442:11: 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal228=(Token)match(input,190,FOLLOW_190_in_for_stmt2146); 
            string_literal228_tree = 
            (Object)adaptor.create(string_literal228)
            ;
            adaptor.addChild(root_0, string_literal228_tree);


            L_BR229=(Token)match(input,L_BR,FOLLOW_L_BR_in_for_stmt2149); 
            L_BR229_tree = 
            (Object)adaptor.create(L_BR229)
            ;
            adaptor.addChild(root_0, L_BR229_tree);


            pushFollow(FOLLOW_for_stmt_expr_wrapper_in_for_stmt2152);
            for_stmt_expr_wrapper230=for_stmt_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, for_stmt_expr_wrapper230.getTree());

            R_BR231=(Token)match(input,R_BR,FOLLOW_R_BR_in_for_stmt2154); 
            R_BR231_tree = 
            (Object)adaptor.create(R_BR231)
            ;
            adaptor.addChild(root_0, R_BR231_tree);


            pushFollow(FOLLOW_if_stmt_block_in_for_stmt2157);
            if_stmt_block232=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block232.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr_wrapper"
    // Objcm.g:445:1: for_stmt_expr_wrapper : for_stmt_expr -> ^( FOR_STMT_EXPR for_stmt_expr ) ;
    public final ObjcmParser.for_stmt_expr_wrapper_return for_stmt_expr_wrapper() throws RecognitionException {
        ObjcmParser.for_stmt_expr_wrapper_return retval = new ObjcmParser.for_stmt_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.for_stmt_expr_return for_stmt_expr233 =null;


        RewriteRuleSubtreeStream stream_for_stmt_expr=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt_expr");
        try {
            // Objcm.g:446:2: ( for_stmt_expr -> ^( FOR_STMT_EXPR for_stmt_expr ) )
            // Objcm.g:446:4: for_stmt_expr
            {
            pushFollow(FOLLOW_for_stmt_expr_in_for_stmt_expr_wrapper2169);
            for_stmt_expr233=for_stmt_expr();

            state._fsp--;

            stream_for_stmt_expr.add(for_stmt_expr233.getTree());

            // AST REWRITE
            // elements: for_stmt_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:18: -> ^( FOR_STMT_EXPR for_stmt_expr )
            {
                // Objcm.g:446:21: ^( FOR_STMT_EXPR for_stmt_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT_EXPR, "FOR_STMT_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr_wrapper"


    public static class for_stmt_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr"
    // Objcm.g:448:1: for_stmt_expr : ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 );
    public final ObjcmParser.for_stmt_expr_return for_stmt_expr() throws RecognitionException {
        ObjcmParser.for_stmt_expr_return retval = new ObjcmParser.for_stmt_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper234 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1235 =null;

        ObjcmParser.full_expr2_return full_expr2236 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1237 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2238 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2239 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2240 =null;



        try {
            // Objcm.g:449:2: ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==ASTERISK||LA51_0==ID||LA51_0==L_AND||LA51_0==L_BR||LA51_0==L_KBR||LA51_0==L_MINUS||LA51_0==L_MINUS_MINUS||LA51_0==L_NOT||LA51_0==L_PLUS||LA51_0==L_PLUS_PLUS||LA51_0==L_TILDA||LA51_0==NUMBER||LA51_0==SIZEOF||(LA51_0 >= STRING_LITERAL && LA51_0 <= STRING_LITERAL3)||LA51_0==166||LA51_0==173||LA51_0==175||LA51_0==179||LA51_0==182||LA51_0==185||LA51_0==193||(LA51_0 >= 195 && LA51_0 <= 196)||LA51_0==201) ) {
                alt51=1;
            }
            else if ( (LA51_0==SEMICOLON) ) {
                alt51=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;

            }
            switch (alt51) {
                case 1 :
                    // Objcm.g:449:4: full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_full_expr_wrapper_in_for_stmt_expr2188);
                    full_expr_wrapper234=full_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, full_expr_wrapper234.getTree());

                    // Objcm.g:449:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    int alt50=3;
                    alt50 = dfa50.predict(input);
                    switch (alt50) {
                        case 1 :
                            // Objcm.g:449:23: for_stmt_int1
                            {
                            pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2191);
                            for_stmt_int1235=for_stmt_int1();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int1235.getTree());

                            }
                            break;
                        case 2 :
                            // Objcm.g:449:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            {
                            // Objcm.g:449:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            // Objcm.g:449:40: full_expr2 ( for_stmt_int1 | for_stmt_int2 )
                            {
                            pushFollow(FOLLOW_full_expr2_in_for_stmt_expr2196);
                            full_expr2236=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2236.getTree());

                            // Objcm.g:449:51: ( for_stmt_int1 | for_stmt_int2 )
                            int alt49=2;
                            int LA49_0 = input.LA(1);

                            if ( (LA49_0==193) ) {
                                alt49=1;
                            }
                            else if ( (LA49_0==SEMICOLON) ) {
                                alt49=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 49, 0, input);

                                throw nvae;

                            }
                            switch (alt49) {
                                case 1 :
                                    // Objcm.g:449:52: for_stmt_int1
                                    {
                                    pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2199);
                                    for_stmt_int1237=for_stmt_int1();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int1237.getTree());

                                    }
                                    break;
                                case 2 :
                                    // Objcm.g:449:68: for_stmt_int2
                                    {
                                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2203);
                                    for_stmt_int2238=for_stmt_int2();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int2238.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            // Objcm.g:449:86: for_stmt_int2
                            {
                            pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2209);
                            for_stmt_int2239=for_stmt_int2();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int2239.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:450:4: for_stmt_int2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2215);
                    for_stmt_int2240=for_stmt_int2();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_int2240.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr"


    public static class for_stmt_int1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int1"
    // Objcm.g:453:1: for_stmt_int1 : 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) ;
    public final ObjcmParser.for_stmt_int1_return for_stmt_int1() throws RecognitionException {
        ObjcmParser.for_stmt_int1_return retval = new ObjcmParser.for_stmt_int1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal241=null;
        ObjcmParser.object_wrapped2_return object_wrapped2242 =null;


        Object string_literal241_tree=null;
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_object_wrapped2=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapped2");
        try {
            // Objcm.g:454:2: ( 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) )
            // Objcm.g:454:4: 'in' object_wrapped2
            {
            string_literal241=(Token)match(input,193,FOLLOW_193_in_for_stmt_int12230);  
            stream_193.add(string_literal241);


            pushFollow(FOLLOW_object_wrapped2_in_for_stmt_int12232);
            object_wrapped2242=object_wrapped2();

            state._fsp--;

            stream_object_wrapped2.add(object_wrapped2242.getTree());

            // AST REWRITE
            // elements: object_wrapped2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 454:26: -> ^( FOR_IN_STMT object_wrapped2 )
            {
                // Objcm.g:454:29: ^( FOR_IN_STMT object_wrapped2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapped2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int1"


    public static class for_stmt_int2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int2"
    // Objcm.g:456:1: for_stmt_int2 : SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? ;
    public final ObjcmParser.for_stmt_int2_return for_stmt_int2() throws RecognitionException {
        ObjcmParser.for_stmt_int2_return retval = new ObjcmParser.for_stmt_int2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON243=null;
        Token SEMICOLON245=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp244 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp246 =null;


        Object SEMICOLON243_tree=null;
        Object SEMICOLON245_tree=null;

        try {
            // Objcm.g:457:2: ( SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? )
            // Objcm.g:457:4: SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )?
            {
            root_0 = (Object)adaptor.nil();


            SEMICOLON243=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22252); 
            SEMICOLON243_tree = 
            (Object)adaptor.create(SEMICOLON243)
            ;
            adaptor.addChild(root_0, SEMICOLON243_tree);


            // Objcm.g:457:14: ( classical_expr_wrp )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==ASTERISK||LA52_0==ID||LA52_0==L_AND||LA52_0==L_BR||LA52_0==L_KBR||LA52_0==L_MINUS||LA52_0==L_MINUS_MINUS||LA52_0==L_NOT||LA52_0==L_PLUS||LA52_0==L_PLUS_PLUS||LA52_0==L_TILDA||LA52_0==NUMBER||LA52_0==SIZEOF||(LA52_0 >= STRING_LITERAL && LA52_0 <= STRING_LITERAL3)||LA52_0==166||LA52_0==173||LA52_0==175||LA52_0==179||LA52_0==182||LA52_0==185||LA52_0==193||(LA52_0 >= 195 && LA52_0 <= 196)||LA52_0==201) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // Objcm.g:457:14: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22254);
                    classical_expr_wrp244=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp244.getTree());

                    }
                    break;

            }


            SEMICOLON245=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22257); 
            SEMICOLON245_tree = 
            (Object)adaptor.create(SEMICOLON245)
            ;
            adaptor.addChild(root_0, SEMICOLON245_tree);


            // Objcm.g:457:44: ( classical_expr_wrp )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==ASTERISK||LA53_0==ID||LA53_0==L_AND||LA53_0==L_BR||LA53_0==L_KBR||LA53_0==L_MINUS||LA53_0==L_MINUS_MINUS||LA53_0==L_NOT||LA53_0==L_PLUS||LA53_0==L_PLUS_PLUS||LA53_0==L_TILDA||LA53_0==NUMBER||LA53_0==SIZEOF||(LA53_0 >= STRING_LITERAL && LA53_0 <= STRING_LITERAL3)||LA53_0==166||LA53_0==173||LA53_0==175||LA53_0==179||LA53_0==182||LA53_0==185||LA53_0==193||(LA53_0 >= 195 && LA53_0 <= 196)||LA53_0==201) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // Objcm.g:457:44: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22259);
                    classical_expr_wrp246=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp246.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int2"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // Objcm.g:464:1: return_stmt : 'return' ( classical_expr_wrp )? SEMICOLON -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON ) ;
    public final ObjcmParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcmParser.return_stmt_return retval = new ObjcmParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal247=null;
        Token SEMICOLON249=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp248 =null;


        Object string_literal247_tree=null;
        Object SEMICOLON249_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:465:2: ( 'return' ( classical_expr_wrp )? SEMICOLON -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON ) )
            // Objcm.g:465:4: 'return' ( classical_expr_wrp )? SEMICOLON
            {
            string_literal247=(Token)match(input,197,FOLLOW_197_in_return_stmt2276);  
            stream_197.add(string_literal247);


            // Objcm.g:465:13: ( classical_expr_wrp )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==ASTERISK||LA54_0==ID||LA54_0==L_AND||LA54_0==L_BR||LA54_0==L_KBR||LA54_0==L_MINUS||LA54_0==L_MINUS_MINUS||LA54_0==L_NOT||LA54_0==L_PLUS||LA54_0==L_PLUS_PLUS||LA54_0==L_TILDA||LA54_0==NUMBER||LA54_0==SIZEOF||(LA54_0 >= STRING_LITERAL && LA54_0 <= STRING_LITERAL3)||LA54_0==166||LA54_0==173||LA54_0==175||LA54_0==179||LA54_0==182||LA54_0==185||LA54_0==193||(LA54_0 >= 195 && LA54_0 <= 196)||LA54_0==201) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // Objcm.g:465:13: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_return_stmt2278);
                    classical_expr_wrp248=classical_expr_wrp();

                    state._fsp--;

                    stream_classical_expr_wrp.add(classical_expr_wrp248.getTree());

                    }
                    break;

            }


            SEMICOLON249=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_return_stmt2281);  
            stream_SEMICOLON.add(SEMICOLON249);


            // AST REWRITE
            // elements: classical_expr_wrp, SEMICOLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 465:43: -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON )
            {
                // Objcm.g:465:46: ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                // Objcm.g:465:60: ( classical_expr_wrp )?
                if ( stream_classical_expr_wrp.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                }
                stream_classical_expr_wrp.reset();

                adaptor.addChild(root_1, 
                stream_SEMICOLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class if_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_wrapper"
    // Objcm.g:467:1: if_stmt_wrapper : if_stmt -> ^( IF_STMT if_stmt ) ;
    public final ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_wrapper_return retval = new ObjcmParser.if_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_return if_stmt250 =null;


        RewriteRuleSubtreeStream stream_if_stmt=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt");
        try {
            // Objcm.g:468:2: ( if_stmt -> ^( IF_STMT if_stmt ) )
            // Objcm.g:468:4: if_stmt
            {
            pushFollow(FOLLOW_if_stmt_in_if_stmt_wrapper2302);
            if_stmt250=if_stmt();

            state._fsp--;

            stream_if_stmt.add(if_stmt250.getTree());

            // AST REWRITE
            // elements: if_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 468:12: -> ^( IF_STMT if_stmt )
            {
                // Objcm.g:468:15: ^( IF_STMT if_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_wrapper"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // Objcm.g:470:1: if_stmt : 'if' L_BR if_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcmParser.if_stmt_return retval = new ObjcmParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal251=null;
        Token L_BR252=null;
        Token R_BR254=null;
        ObjcmParser.if_expr_return if_expr253 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper255 =null;


        Object string_literal251_tree=null;
        Object L_BR252_tree=null;
        Object R_BR254_tree=null;

        try {
            // Objcm.g:470:9: ( 'if' L_BR if_expr R_BR if_stmt_block_wrapper )
            // Objcm.g:470:11: 'if' L_BR if_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal251=(Token)match(input,192,FOLLOW_192_in_if_stmt2318); 
            string_literal251_tree = 
            (Object)adaptor.create(string_literal251)
            ;
            adaptor.addChild(root_0, string_literal251_tree);


            L_BR252=(Token)match(input,L_BR,FOLLOW_L_BR_in_if_stmt2321); 
            L_BR252_tree = 
            (Object)adaptor.create(L_BR252)
            ;
            adaptor.addChild(root_0, L_BR252_tree);


            pushFollow(FOLLOW_if_expr_in_if_stmt2324);
            if_expr253=if_expr();

            state._fsp--;

            adaptor.addChild(root_0, if_expr253.getTree());

            R_BR254=(Token)match(input,R_BR,FOLLOW_R_BR_in_if_stmt2326); 
            R_BR254_tree = 
            (Object)adaptor.create(R_BR254)
            ;
            adaptor.addChild(root_0, R_BR254_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_if_stmt2329);
            if_stmt_block_wrapper255=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper255.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class if_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_expr"
    // Objcm.g:473:1: if_expr : classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.if_expr_return if_expr() throws RecognitionException {
        ObjcmParser.if_expr_return retval = new ObjcmParser.if_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp256 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:473:9: ( classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) )
            // Objcm.g:473:12: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_if_expr2342);
            classical_expr_wrp256=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp256.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 473:31: -> ^( IF_EXPR classical_expr_wrp )
            {
                // Objcm.g:473:34: ^( IF_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_EXPR, "IF_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_expr"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // Objcm.g:475:1: else_stmt : 'else' if_stmt_block ;
    public final ObjcmParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcmParser.else_stmt_return retval = new ObjcmParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal257=null;
        ObjcmParser.if_stmt_block_return if_stmt_block258 =null;


        Object string_literal257_tree=null;

        try {
            // Objcm.g:476:2: ( 'else' if_stmt_block )
            // Objcm.g:476:4: 'else' if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal257=(Token)match(input,188,FOLLOW_188_in_else_stmt2361); 
            string_literal257_tree = 
            (Object)adaptor.create(string_literal257)
            ;
            adaptor.addChild(root_0, string_literal257_tree);


            pushFollow(FOLLOW_if_stmt_block_in_else_stmt2364);
            if_stmt_block258=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block258.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class if_stmt_block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block_wrapper"
    // Objcm.g:478:1: if_stmt_block_wrapper : if_stmt_block -> ^( IF_BLOCK if_stmt_block ) ;
    public final ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_block_wrapper_return retval = new ObjcmParser.if_stmt_block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_block_return if_stmt_block259 =null;


        RewriteRuleSubtreeStream stream_if_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt_block");
        try {
            // Objcm.g:479:2: ( if_stmt_block -> ^( IF_BLOCK if_stmt_block ) )
            // Objcm.g:479:4: if_stmt_block
            {
            pushFollow(FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2373);
            if_stmt_block259=if_stmt_block();

            state._fsp--;

            stream_if_stmt_block.add(if_stmt_block259.getTree());

            // AST REWRITE
            // elements: if_stmt_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 479:18: -> ^( IF_BLOCK if_stmt_block )
            {
                // Objcm.g:479:21: ^( IF_BLOCK if_stmt_block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_BLOCK, "IF_BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block_wrapper"


    public static class if_stmt_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block"
    // Objcm.g:481:1: if_stmt_block : ( block_wrapper | block_internal );
    public final ObjcmParser.if_stmt_block_return if_stmt_block() throws RecognitionException {
        ObjcmParser.if_stmt_block_return retval = new ObjcmParser.if_stmt_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_wrapper_return block_wrapper260 =null;

        ObjcmParser.block_internal_return block_internal261 =null;



        try {
            // Objcm.g:482:2: ( block_wrapper | block_internal )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==L_FBR) ) {
                alt55=1;
            }
            else if ( (LA55_0==ASTERISK||LA55_0==BREAK_WORD||LA55_0==CONST_PREFIX||LA55_0==ENUM_PREFIX||LA55_0==ID||LA55_0==L_AND||LA55_0==L_BR||LA55_0==L_KBR||LA55_0==L_MINUS||LA55_0==L_MINUS_MINUS||LA55_0==L_NOT||LA55_0==L_PLUS||LA55_0==L_PLUS_PLUS||LA55_0==L_TILDA||LA55_0==NUMBER||LA55_0==SEMICOLON||(LA55_0 >= SINGLE_OP && LA55_0 <= SIZEOF)||LA55_0==STATIC_PREFIX||(LA55_0 >= STRING_LITERAL && LA55_0 <= STRING_LITERAL3)||LA55_0==STRUCT_PREFIX||LA55_0==VOID||LA55_0==166||LA55_0==173||LA55_0==175||(LA55_0 >= 177 && LA55_0 <= 179)||(LA55_0 >= 181 && LA55_0 <= 182)||LA55_0==185||(LA55_0 >= 187 && LA55_0 <= 193)||(LA55_0 >= 195 && LA55_0 <= 198)||(LA55_0 >= 201 && LA55_0 <= 202)) ) {
                alt55=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;

            }
            switch (alt55) {
                case 1 :
                    // Objcm.g:482:4: block_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_wrapper_in_if_stmt_block2390);
                    block_wrapper260=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper260.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:483:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_if_stmt_block2396);
                    block_internal261=block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, block_internal261.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block"


    public static class static_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start_wrapper"
    // Objcm.g:486:1: static_start_wrapper : static_start -> ^( STATIC_START static_start ) ;
    public final ObjcmParser.static_start_wrapper_return static_start_wrapper() throws RecognitionException {
        ObjcmParser.static_start_wrapper_return retval = new ObjcmParser.static_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_start_return static_start262 =null;


        RewriteRuleSubtreeStream stream_static_start=new RewriteRuleSubtreeStream(adaptor,"rule static_start");
        try {
            // Objcm.g:487:2: ( static_start -> ^( STATIC_START static_start ) )
            // Objcm.g:487:4: static_start
            {
            pushFollow(FOLLOW_static_start_in_static_start_wrapper2408);
            static_start262=static_start();

            state._fsp--;

            stream_static_start.add(static_start262.getTree());

            // AST REWRITE
            // elements: static_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 487:17: -> ^( STATIC_START static_start )
            {
                // Objcm.g:487:20: ^( STATIC_START static_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_START, "STATIC_START")
                , root_1);

                adaptor.addChild(root_1, stream_static_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start_wrapper"


    public static class static_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start"
    // Objcm.g:489:1: static_start : STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2 ;
    public final ObjcmParser.static_start_return static_start() throws RecognitionException {
        ObjcmParser.static_start_return retval = new ObjcmParser.static_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX263=null;
        Token CONST_PREFIX264=null;
        ObjcmParser.static_type_wrapper_return static_type_wrapper265 =null;

        ObjcmParser.full_expr2_return full_expr2266 =null;


        Object STATIC_PREFIX263_tree=null;
        Object CONST_PREFIX264_tree=null;

        try {
            // Objcm.g:490:2: ( STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2 )
            // Objcm.g:490:4: STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX263=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_start2426); 
            STATIC_PREFIX263_tree = 
            (Object)adaptor.create(STATIC_PREFIX263)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX263_tree);


            // Objcm.g:490:18: ( CONST_PREFIX )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==CONST_PREFIX) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // Objcm.g:490:18: CONST_PREFIX
                    {
                    CONST_PREFIX264=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_start2428); 
                    CONST_PREFIX264_tree = 
                    (Object)adaptor.create(CONST_PREFIX264)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX264_tree);


                    }
                    break;

            }


            // Objcm.g:490:32: ( static_type_wrapper )?
            int alt57=2;
            alt57 = dfa57.predict(input);
            switch (alt57) {
                case 1 :
                    // Objcm.g:490:32: static_type_wrapper
                    {
                    pushFollow(FOLLOW_static_type_wrapper_in_static_start2431);
                    static_type_wrapper265=static_type_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_type_wrapper265.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_full_expr2_in_static_start2434);
            full_expr2266=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2266.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start"


    public static class static_type_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type_wrapper"
    // Objcm.g:493:1: static_type_wrapper : static_type -> ^( STATIC_TYPE static_type ) ;
    public final ObjcmParser.static_type_wrapper_return static_type_wrapper() throws RecognitionException {
        ObjcmParser.static_type_wrapper_return retval = new ObjcmParser.static_type_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_type_return static_type267 =null;


        RewriteRuleSubtreeStream stream_static_type=new RewriteRuleSubtreeStream(adaptor,"rule static_type");
        try {
            // Objcm.g:494:2: ( static_type -> ^( STATIC_TYPE static_type ) )
            // Objcm.g:494:4: static_type
            {
            pushFollow(FOLLOW_static_type_in_static_type_wrapper2446);
            static_type267=static_type();

            state._fsp--;

            stream_static_type.add(static_type267.getTree());

            // AST REWRITE
            // elements: static_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 494:16: -> ^( STATIC_TYPE static_type )
            {
                // Objcm.g:494:19: ^( STATIC_TYPE static_type )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_TYPE, "STATIC_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_static_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type_wrapper"


    public static class static_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type"
    // Objcm.g:496:1: static_type : object_name ( ASTERISK )* ;
    public final ObjcmParser.static_type_return static_type() throws RecognitionException {
        ObjcmParser.static_type_return retval = new ObjcmParser.static_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK269=null;
        ObjcmParser.object_name_return object_name268 =null;


        Object ASTERISK269_tree=null;

        try {
            // Objcm.g:497:2: ( object_name ( ASTERISK )* )
            // Objcm.g:497:4: object_name ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_name_in_static_type2465);
            object_name268=object_name();

            state._fsp--;

            adaptor.addChild(root_0, object_name268.getTree());

            // Objcm.g:497:16: ( ASTERISK )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==ASTERISK) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // Objcm.g:497:16: ASTERISK
            	    {
            	    ASTERISK269=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_static_type2467); 
            	    ASTERISK269_tree = 
            	    (Object)adaptor.create(ASTERISK269)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK269_tree);


            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type"


    public static class id_part_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end"
    // Objcm.g:499:1: id_part_end : ( id_part_end_internal )+ ;
    public final ObjcmParser.id_part_end_return id_part_end() throws RecognitionException {
        ObjcmParser.id_part_end_return retval = new ObjcmParser.id_part_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_end_internal_return id_part_end_internal270 =null;



        try {
            // Objcm.g:500:2: ( ( id_part_end_internal )+ )
            // Objcm.g:500:4: ( id_part_end_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:500:4: ( id_part_end_internal )+
            int cnt59=0;
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==DOT||LA59_0==163) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // Objcm.g:500:4: id_part_end_internal
            	    {
            	    pushFollow(FOLLOW_id_part_end_internal_in_id_part_end2479);
            	    id_part_end_internal270=id_part_end_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part_end_internal270.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt59 >= 1 ) break loop59;
                        EarlyExitException eee =
                            new EarlyExitException(59, input);
                        throw eee;
                }
                cnt59++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end"


    public static class id_part_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end_internal"
    // Objcm.g:503:1: id_part_end_internal : ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) ;
    public final ObjcmParser.id_part_end_internal_return id_part_end_internal() throws RecognitionException {
        ObjcmParser.id_part_end_internal_return retval = new ObjcmParser.id_part_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT271=null;
        Token string_literal272=null;
        ObjcmParser.id_part_return id_part273 =null;


        Object DOT271_tree=null;
        Object string_literal272_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_id_part=new RewriteRuleSubtreeStream(adaptor,"rule id_part");
        try {
            // Objcm.g:504:2: ( ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) )
            // Objcm.g:504:4: ( DOT | '->' ) id_part
            {
            // Objcm.g:504:4: ( DOT | '->' )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==DOT) ) {
                alt60=1;
            }
            else if ( (LA60_0==163) ) {
                alt60=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;

            }
            switch (alt60) {
                case 1 :
                    // Objcm.g:504:5: DOT
                    {
                    DOT271=(Token)match(input,DOT,FOLLOW_DOT_in_id_part_end_internal2494);  
                    stream_DOT.add(DOT271);


                    }
                    break;
                case 2 :
                    // Objcm.g:504:11: '->'
                    {
                    string_literal272=(Token)match(input,163,FOLLOW_163_in_id_part_end_internal2498);  
                    stream_163.add(string_literal272);


                    }
                    break;

            }


            pushFollow(FOLLOW_id_part_in_id_part_end_internal2501);
            id_part273=id_part();

            state._fsp--;

            stream_id_part.add(id_part273.getTree());

            // AST REWRITE
            // elements: id_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 504:25: -> ^( FIELD_ACCESS id_part )
            {
                // Objcm.g:504:28: ^( FIELD_ACCESS id_part )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_ACCESS, "FIELD_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_id_part.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end_internal"


    public static class known_types_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_types"
    // Objcm.g:507:1: known_types : ( 'unsigned' | VOID );
    public final ObjcmParser.known_types_return known_types() throws RecognitionException {
        ObjcmParser.known_types_return retval = new ObjcmParser.known_types_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set274=null;

        Object set274_tree=null;

        try {
            // Objcm.g:508:2: ( 'unsigned' | VOID )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set274=(Token)input.LT(1);

            if ( input.LA(1)==VOID||input.LA(1)==201 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set274)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_types"


    public static class id_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part"
    // Objcm.g:512:1: id_part : name_internal ( function_brackets_wrapper )? ( index_wrapper )* ;
    public final ObjcmParser.id_part_return id_part() throws RecognitionException {
        ObjcmParser.id_part_return retval = new ObjcmParser.id_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal275 =null;

        ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper276 =null;

        ObjcmParser.index_wrapper_return index_wrapper277 =null;



        try {
            // Objcm.g:512:9: ( name_internal ( function_brackets_wrapper )? ( index_wrapper )* )
            // Objcm.g:512:12: name_internal ( function_brackets_wrapper )? ( index_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_internal_in_id_part2539);
            name_internal275=name_internal();

            state._fsp--;

            adaptor.addChild(root_0, name_internal275.getTree());

            // Objcm.g:512:26: ( function_brackets_wrapper )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==L_BR) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // Objcm.g:512:26: function_brackets_wrapper
                    {
                    pushFollow(FOLLOW_function_brackets_wrapper_in_id_part2541);
                    function_brackets_wrapper276=function_brackets_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, function_brackets_wrapper276.getTree());

                    }
                    break;

            }


            // Objcm.g:512:53: ( index_wrapper )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==L_KBR) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // Objcm.g:512:53: index_wrapper
            	    {
            	    pushFollow(FOLLOW_index_wrapper_in_id_part2544);
            	    index_wrapper277=index_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, index_wrapper277.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part"


    public static class object_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_name"
    // Objcm.g:515:1: object_name : id_part ( id_part_end )? ;
    public final ObjcmParser.object_name_return object_name() throws RecognitionException {
        ObjcmParser.object_name_return retval = new ObjcmParser.object_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_return id_part278 =null;

        ObjcmParser.id_part_end_return id_part_end279 =null;



        try {
            // Objcm.g:516:2: ( id_part ( id_part_end )? )
            // Objcm.g:516:4: id_part ( id_part_end )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_id_part_in_object_name2557);
            id_part278=id_part();

            state._fsp--;

            adaptor.addChild(root_0, id_part278.getTree());

            // Objcm.g:516:12: ( id_part_end )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==DOT||LA63_0==163) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // Objcm.g:516:12: id_part_end
                    {
                    pushFollow(FOLLOW_id_part_end_in_object_name2559);
                    id_part_end279=id_part_end();

                    state._fsp--;

                    adaptor.addChild(root_0, id_part_end279.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_name"


    public static class method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper"
    // Objcm.g:519:1: method_call_wrapper : L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper_return method_call_wrapper() throws RecognitionException {
        ObjcmParser.method_call_wrapper_return retval = new ObjcmParser.method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR280=null;
        Token R_KBR282=null;
        ObjcmParser.method_call2_return method_call2281 =null;


        Object L_KBR280_tree=null;
        Object R_KBR282_tree=null;
        RewriteRuleTokenStream stream_R_KBR=new RewriteRuleTokenStream(adaptor,"token R_KBR");
        RewriteRuleTokenStream stream_L_KBR=new RewriteRuleTokenStream(adaptor,"token L_KBR");
        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // Objcm.g:520:2: ( L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) )
            // Objcm.g:520:4: L_KBR method_call2 R_KBR
            {
            L_KBR280=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_method_call_wrapper2573);  
            stream_L_KBR.add(L_KBR280);


            pushFollow(FOLLOW_method_call2_in_method_call_wrapper2575);
            method_call2281=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2281.getTree());

            R_KBR282=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_method_call_wrapper2577);  
            stream_R_KBR.add(R_KBR282);


            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:29: -> ^( METHOD_CALL method_call2 )
            {
                // Objcm.g:520:32: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper"


    public static class method_call_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper2"
    // Objcm.g:523:1: method_call_wrapper2 : method_call2 -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper2_return method_call_wrapper2() throws RecognitionException {
        ObjcmParser.method_call_wrapper2_return retval = new ObjcmParser.method_call_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call2_return method_call2283 =null;


        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // Objcm.g:524:2: ( method_call2 -> ^( METHOD_CALL method_call2 ) )
            // Objcm.g:524:4: method_call2
            {
            pushFollow(FOLLOW_method_call2_in_method_call_wrapper22600);
            method_call2283=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2283.getTree());

            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 524:17: -> ^( METHOD_CALL method_call2 )
            {
                // Objcm.g:524:20: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper2"


    public static class method_call2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call2"
    // Objcm.g:526:1: method_call2 : object_wrapper method_name ( method_call_message_list_wrapper )? ;
    public final ObjcmParser.method_call2_return method_call2() throws RecognitionException {
        ObjcmParser.method_call2_return retval = new ObjcmParser.method_call2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_return object_wrapper284 =null;

        ObjcmParser.method_name_return method_name285 =null;

        ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper286 =null;



        try {
            // Objcm.g:527:2: ( object_wrapper method_name ( method_call_message_list_wrapper )? )
            // Objcm.g:527:4: object_wrapper method_name ( method_call_message_list_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapper_in_method_call22619);
            object_wrapper284=object_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapper284.getTree());

            pushFollow(FOLLOW_method_name_in_method_call22621);
            method_name285=method_name();

            state._fsp--;

            adaptor.addChild(root_0, method_name285.getTree());

            // Objcm.g:527:31: ( method_call_message_list_wrapper )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==COLON) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // Objcm.g:527:33: method_call_message_list_wrapper
                    {
                    pushFollow(FOLLOW_method_call_message_list_wrapper_in_method_call22625);
                    method_call_message_list_wrapper286=method_call_message_list_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_message_list_wrapper286.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call2"


    public static class object_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper"
    // Objcm.g:529:1: object_wrapper : object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) ;
    public final ObjcmParser.object_wrapper_return object_wrapper() throws RecognitionException {
        ObjcmParser.object_wrapper_return retval = new ObjcmParser.object_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_internal_return object_wrapper_internal287 =null;


        RewriteRuleSubtreeStream stream_object_wrapper_internal=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapper_internal");
        try {
            // Objcm.g:530:2: ( object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) )
            // Objcm.g:530:4: object_wrapper_internal
            {
            pushFollow(FOLLOW_object_wrapper_internal_in_object_wrapper2636);
            object_wrapper_internal287=object_wrapper_internal();

            state._fsp--;

            stream_object_wrapper_internal.add(object_wrapper_internal287.getTree());

            // AST REWRITE
            // elements: object_wrapper_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 530:28: -> ^( OBJECT object_wrapper_internal )
            {
                // Objcm.g:530:31: ^( OBJECT object_wrapper_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT, "OBJECT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapper_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper"


    public static class object_wrapper_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper_internal"
    // Objcm.g:532:1: object_wrapper_internal : ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL );
    public final ObjcmParser.object_wrapper_internal_return object_wrapper_internal() throws RecognitionException {
        ObjcmParser.object_wrapper_internal_return retval = new ObjcmParser.object_wrapper_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL293=null;
        ObjcmParser.type_convertion_return type_convertion288 =null;

        ObjcmParser.object_name_return object_name289 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper290 =null;

        ObjcmParser.object_name_return object_name291 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper292 =null;


        Object STRING_LITERAL293_tree=null;

        try {
            // Objcm.g:534:2: ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL )
            int alt66=4;
            switch ( input.LA(1) ) {
            case L_BR:
                {
                alt66=1;
                }
                break;
            case ID:
            case 182:
            case 185:
            case 193:
            case 196:
                {
                alt66=2;
                }
                break;
            case L_KBR:
                {
                alt66=3;
                }
                break;
            case STRING_LITERAL:
                {
                alt66=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;

            }

            switch (alt66) {
                case 1 :
                    // Objcm.g:534:4: type_convertion ( object_name | method_call_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_convertion_in_object_wrapper_internal2655);
                    type_convertion288=type_convertion();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion288.getTree());

                    // Objcm.g:534:20: ( object_name | method_call_wrapper )
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==ID||LA65_0==182||LA65_0==185||LA65_0==193||LA65_0==196) ) {
                        alt65=1;
                    }
                    else if ( (LA65_0==L_KBR) ) {
                        alt65=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 65, 0, input);

                        throw nvae;

                    }
                    switch (alt65) {
                        case 1 :
                            // Objcm.g:534:21: object_name
                            {
                            pushFollow(FOLLOW_object_name_in_object_wrapper_internal2658);
                            object_name289=object_name();

                            state._fsp--;

                            adaptor.addChild(root_0, object_name289.getTree());

                            }
                            break;
                        case 2 :
                            // Objcm.g:534:35: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2662);
                            method_call_wrapper290=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper290.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:535:4: object_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_name_in_object_wrapper_internal2668);
                    object_name291=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name291.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:536:4: method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2673);
                    method_call_wrapper292=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper292.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:537:4: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL293=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_object_wrapper_internal2678); 
                    STRING_LITERAL293_tree = 
                    (Object)adaptor.create(STRING_LITERAL293)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL293_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper_internal"


    public static class method_message3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_message3"
    // Objcm.g:540:1: method_message3 : classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) ;
    public final ObjcmParser.method_message3_return method_message3() throws RecognitionException {
        ObjcmParser.method_message3_return retval = new ObjcmParser.method_message3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp294 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:541:2: ( classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) )
            // Objcm.g:541:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_method_message32690);
            classical_expr_wrp294=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp294.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 541:23: -> ^( MESSAGE classical_expr_wrp )
            {
                // Objcm.g:541:26: ^( MESSAGE classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_message3"


    public static class type_convertion_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion"
    // Objcm.g:543:1: type_convertion : type_convertion_internal -> ^( TYPE_CONVERTION type_convertion_internal ) ;
    public final ObjcmParser.type_convertion_return type_convertion() throws RecognitionException {
        ObjcmParser.type_convertion_return retval = new ObjcmParser.type_convertion_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_convertion_internal_return type_convertion_internal295 =null;


        RewriteRuleSubtreeStream stream_type_convertion_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_convertion_internal");
        try {
            // Objcm.g:544:2: ( type_convertion_internal -> ^( TYPE_CONVERTION type_convertion_internal ) )
            // Objcm.g:544:4: type_convertion_internal
            {
            pushFollow(FOLLOW_type_convertion_internal_in_type_convertion2709);
            type_convertion_internal295=type_convertion_internal();

            state._fsp--;

            stream_type_convertion_internal.add(type_convertion_internal295.getTree());

            // AST REWRITE
            // elements: type_convertion_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 544:29: -> ^( TYPE_CONVERTION type_convertion_internal )
            {
                // Objcm.g:544:32: ^( TYPE_CONVERTION type_convertion_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CONVERTION, "TYPE_CONVERTION")
                , root_1);

                adaptor.addChild(root_1, stream_type_convertion_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion"


    public static class type_convertion_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion_internal"
    // Objcm.g:546:1: type_convertion_internal : L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( type_internal ( generic )? ) ;
    public final ObjcmParser.type_convertion_internal_return type_convertion_internal() throws RecognitionException {
        ObjcmParser.type_convertion_internal_return retval = new ObjcmParser.type_convertion_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR296=null;
        Token string_literal297=null;
        Token string_literal298=null;
        Token ASTERISK301=null;
        Token R_BR302=null;
        ObjcmParser.type_internal_return type_internal299 =null;

        ObjcmParser.generic_return generic300 =null;


        Object L_BR296_tree=null;
        Object string_literal297_tree=null;
        Object string_literal298_tree=null;
        Object ASTERISK301_tree=null;
        Object R_BR302_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        RewriteRuleSubtreeStream stream_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_internal");
        try {
            // Objcm.g:547:2: ( L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( type_internal ( generic )? ) )
            // Objcm.g:547:4: L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR
            {
            L_BR296=(Token)match(input,L_BR,FOLLOW_L_BR_in_type_convertion_internal2728);  
            stream_L_BR.add(L_BR296);


            // Objcm.g:547:9: ( 'const' )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==CONST_PREFIX) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // Objcm.g:547:9: 'const'
                    {
                    string_literal297=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_convertion_internal2730);  
                    stream_CONST_PREFIX.add(string_literal297);


                    }
                    break;

            }


            // Objcm.g:547:18: ( 'unsigned' )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==201) ) {
                int LA68_1 = input.LA(2);

                if ( (LA68_1==ID||LA68_1==VOID||LA68_1==201) ) {
                    alt68=1;
                }
            }
            switch (alt68) {
                case 1 :
                    // Objcm.g:547:18: 'unsigned'
                    {
                    string_literal298=(Token)match(input,201,FOLLOW_201_in_type_convertion_internal2733);  
                    stream_201.add(string_literal298);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_type_convertion_internal2736);
            type_internal299=type_internal();

            state._fsp--;

            stream_type_internal.add(type_internal299.getTree());

            // Objcm.g:547:44: ( generic )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==L_LESS) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // Objcm.g:547:44: generic
                    {
                    pushFollow(FOLLOW_generic_in_type_convertion_internal2738);
                    generic300=generic();

                    state._fsp--;

                    stream_generic.add(generic300.getTree());

                    }
                    break;

            }


            // Objcm.g:547:53: ( ASTERISK )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==ASTERISK) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // Objcm.g:547:53: ASTERISK
            	    {
            	    ASTERISK301=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_type_convertion_internal2741);  
            	    stream_ASTERISK.add(ASTERISK301);


            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            R_BR302=(Token)match(input,R_BR,FOLLOW_R_BR_in_type_convertion_internal2744);  
            stream_R_BR.add(R_BR302);


            // AST REWRITE
            // elements: type_internal, generic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 547:68: -> ^( type_internal ( generic )? )
            {
                // Objcm.g:547:71: ^( type_internal ( generic )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_type_internal.nextNode(), root_1);

                // Objcm.g:547:87: ( generic )?
                if ( stream_generic.hasNext() ) {
                    adaptor.addChild(root_1, stream_generic.nextTree());

                }
                stream_generic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion_internal"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // Objcm.g:549:1: method_name : ( ID -> ^( METHOD_NAME ID ) | property -> ^( METHOD_NAME property ) );
    public final ObjcmParser.method_name_return method_name() throws RecognitionException {
        ObjcmParser.method_name_return retval = new ObjcmParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID303=null;
        ObjcmParser.property_return property304 =null;


        Object ID303_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_property=new RewriteRuleSubtreeStream(adaptor,"rule property");
        try {
            // Objcm.g:550:2: ( ID -> ^( METHOD_NAME ID ) | property -> ^( METHOD_NAME property ) )
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==ID) ) {
                alt71=1;
            }
            else if ( (LA71_0==182||LA71_0==185||LA71_0==196) ) {
                alt71=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;

            }
            switch (alt71) {
                case 1 :
                    // Objcm.g:550:4: ID
                    {
                    ID303=(Token)match(input,ID,FOLLOW_ID_in_method_name2762);  
                    stream_ID.add(ID303);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 550:7: -> ^( METHOD_NAME ID )
                    {
                        // Objcm.g:550:10: ^( METHOD_NAME ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_ID.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:551:4: property
                    {
                    pushFollow(FOLLOW_property_in_method_name2775);
                    property304=property();

                    state._fsp--;

                    stream_property.add(property304.getTree());

                    // AST REWRITE
                    // elements: property
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 551:13: -> ^( METHOD_NAME property )
                    {
                        // Objcm.g:551:16: ^( METHOD_NAME property )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                        , root_1);

                        adaptor.addChild(root_1, stream_property.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_call_message_list_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list_wrapper"
    // Objcm.g:553:1: method_call_message_list_wrapper : method_call_message_list -> ^( MSG_LIST method_call_message_list ) ;
    public final ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_list_wrapper_return retval = new ObjcmParser.method_call_message_list_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_list_return method_call_message_list305 =null;


        RewriteRuleSubtreeStream stream_method_call_message_list=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_list");
        try {
            // Objcm.g:554:2: ( method_call_message_list -> ^( MSG_LIST method_call_message_list ) )
            // Objcm.g:554:4: method_call_message_list
            {
            pushFollow(FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2792);
            method_call_message_list305=method_call_message_list();

            state._fsp--;

            stream_method_call_message_list.add(method_call_message_list305.getTree());

            // AST REWRITE
            // elements: method_call_message_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 554:29: -> ^( MSG_LIST method_call_message_list )
            {
                // Objcm.g:554:32: ^( MSG_LIST method_call_message_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MSG_LIST, "MSG_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list_wrapper"


    public static class method_call_message_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list"
    // Objcm.g:556:1: method_call_message_list : method_call_message_first_wrapper ( method_call_message_wrapper )* ;
    public final ObjcmParser.method_call_message_list_return method_call_message_list() throws RecognitionException {
        ObjcmParser.method_call_message_list_return retval = new ObjcmParser.method_call_message_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper306 =null;

        ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper307 =null;



        try {
            // Objcm.g:557:2: ( method_call_message_first_wrapper ( method_call_message_wrapper )* )
            // Objcm.g:557:4: method_call_message_first_wrapper ( method_call_message_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2809);
            method_call_message_first_wrapper306=method_call_message_first_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_call_message_first_wrapper306.getTree());

            // Objcm.g:557:38: ( method_call_message_wrapper )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==COLON||LA72_0==ID) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // Objcm.g:557:38: method_call_message_wrapper
            	    {
            	    pushFollow(FOLLOW_method_call_message_wrapper_in_method_call_message_list2811);
            	    method_call_message_wrapper307=method_call_message_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_call_message_wrapper307.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list"


    public static class method_call_message_first_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first_wrapper"
    // Objcm.g:559:1: method_call_message_first_wrapper : method_call_message_first -> ^( METHOD_MSG method_call_message_first ) ;
    public final ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_first_wrapper_return retval = new ObjcmParser.method_call_message_first_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_return method_call_message_first308 =null;


        RewriteRuleSubtreeStream stream_method_call_message_first=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_first");
        try {
            // Objcm.g:560:2: ( method_call_message_first -> ^( METHOD_MSG method_call_message_first ) )
            // Objcm.g:560:4: method_call_message_first
            {
            pushFollow(FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2822);
            method_call_message_first308=method_call_message_first();

            state._fsp--;

            stream_method_call_message_first.add(method_call_message_first308.getTree());

            // AST REWRITE
            // elements: method_call_message_first
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 560:30: -> ^( METHOD_MSG method_call_message_first )
            {
                // Objcm.g:560:33: ^( METHOD_MSG method_call_message_first )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_first.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first_wrapper"


    public static class method_call_message_first_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first"
    // Objcm.g:562:1: method_call_message_first : COLON message ;
    public final ObjcmParser.method_call_message_first_return method_call_message_first() throws RecognitionException {
        ObjcmParser.method_call_message_first_return retval = new ObjcmParser.method_call_message_first_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON309=null;
        ObjcmParser.message_return message310 =null;


        Object COLON309_tree=null;

        try {
            // Objcm.g:563:2: ( COLON message )
            // Objcm.g:563:4: COLON message
            {
            root_0 = (Object)adaptor.nil();


            COLON309=(Token)match(input,COLON,FOLLOW_COLON_in_method_call_message_first2839); 
            COLON309_tree = 
            (Object)adaptor.create(COLON309)
            ;
            adaptor.addChild(root_0, COLON309_tree);


            pushFollow(FOLLOW_message_in_method_call_message_first2842);
            message310=message();

            state._fsp--;

            adaptor.addChild(root_0, message310.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first"


    public static class method_call_message_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_wrapper"
    // Objcm.g:565:1: method_call_message_wrapper : method_call_message -> ^( METHOD_MSG method_call_message ) ;
    public final ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_wrapper_return retval = new ObjcmParser.method_call_message_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_return method_call_message311 =null;


        RewriteRuleSubtreeStream stream_method_call_message=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message");
        try {
            // Objcm.g:566:2: ( method_call_message -> ^( METHOD_MSG method_call_message ) )
            // Objcm.g:566:4: method_call_message
            {
            pushFollow(FOLLOW_method_call_message_in_method_call_message_wrapper2852);
            method_call_message311=method_call_message();

            state._fsp--;

            stream_method_call_message.add(method_call_message311.getTree());

            // AST REWRITE
            // elements: method_call_message
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 566:24: -> ^( METHOD_MSG method_call_message )
            {
                // Objcm.g:566:27: ^( METHOD_MSG method_call_message )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_wrapper"


    public static class method_call_message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message"
    // Objcm.g:568:1: method_call_message : ( prefix | incomplete_prefix ) message ;
    public final ObjcmParser.method_call_message_return method_call_message() throws RecognitionException {
        ObjcmParser.method_call_message_return retval = new ObjcmParser.method_call_message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.prefix_return prefix312 =null;

        ObjcmParser.incomplete_prefix_return incomplete_prefix313 =null;

        ObjcmParser.message_return message314 =null;



        try {
            // Objcm.g:569:2: ( ( prefix | incomplete_prefix ) message )
            // Objcm.g:569:4: ( prefix | incomplete_prefix ) message
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:569:4: ( prefix | incomplete_prefix )
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==ID) ) {
                alt73=1;
            }
            else if ( (LA73_0==COLON) ) {
                alt73=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;

            }
            switch (alt73) {
                case 1 :
                    // Objcm.g:569:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_call_message2871);
                    prefix312=prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, prefix312.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:569:14: incomplete_prefix
                    {
                    pushFollow(FOLLOW_incomplete_prefix_in_method_call_message2875);
                    incomplete_prefix313=incomplete_prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, incomplete_prefix313.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_message_in_method_call_message2879);
            message314=message();

            state._fsp--;

            adaptor.addChild(root_0, message314.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message"


    public static class message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "message"
    // Objcm.g:571:1: message : msg_expr ( COMMA msg_expr )* -> ^( MESSAGE msg_expr ( COMMA msg_expr )* ) ;
    public final ObjcmParser.message_return message() throws RecognitionException {
        ObjcmParser.message_return retval = new ObjcmParser.message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA316=null;
        ObjcmParser.msg_expr_return msg_expr315 =null;

        ObjcmParser.msg_expr_return msg_expr317 =null;


        Object COMMA316_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_msg_expr=new RewriteRuleSubtreeStream(adaptor,"rule msg_expr");
        try {
            // Objcm.g:571:9: ( msg_expr ( COMMA msg_expr )* -> ^( MESSAGE msg_expr ( COMMA msg_expr )* ) )
            // Objcm.g:571:11: msg_expr ( COMMA msg_expr )*
            {
            pushFollow(FOLLOW_msg_expr_in_message2888);
            msg_expr315=msg_expr();

            state._fsp--;

            stream_msg_expr.add(msg_expr315.getTree());

            // Objcm.g:571:20: ( COMMA msg_expr )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==COMMA) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // Objcm.g:571:21: COMMA msg_expr
            	    {
            	    COMMA316=(Token)match(input,COMMA,FOLLOW_COMMA_in_message2891);  
            	    stream_COMMA.add(COMMA316);


            	    pushFollow(FOLLOW_msg_expr_in_message2893);
            	    msg_expr317=msg_expr();

            	    state._fsp--;

            	    stream_msg_expr.add(msg_expr317.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            // AST REWRITE
            // elements: COMMA, msg_expr, msg_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 571:38: -> ^( MESSAGE msg_expr ( COMMA msg_expr )* )
            {
                // Objcm.g:571:41: ^( MESSAGE msg_expr ( COMMA msg_expr )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_msg_expr.nextTree());

                // Objcm.g:571:60: ( COMMA msg_expr )*
                while ( stream_COMMA.hasNext()||stream_msg_expr.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_COMMA.nextNode()
                    );

                    adaptor.addChild(root_1, stream_msg_expr.nextTree());

                }
                stream_COMMA.reset();
                stream_msg_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "message"


    public static class msg_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "msg_expr"
    // Objcm.g:575:1: msg_expr : classical_expr_wrp ;
    public final ObjcmParser.msg_expr_return msg_expr() throws RecognitionException {
        ObjcmParser.msg_expr_return retval = new ObjcmParser.msg_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp318 =null;



        try {
            // Objcm.g:576:2: ( classical_expr_wrp )
            // Objcm.g:576:5: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_msg_expr2927);
            classical_expr_wrp318=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp318.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "msg_expr"


    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // Objcm.g:583:1: expression : ( classical_expr_wrp | struct_init );
    public final ObjcmParser.expression_return expression() throws RecognitionException {
        ObjcmParser.expression_return retval = new ObjcmParser.expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp319 =null;

        ObjcmParser.struct_init_return struct_init320 =null;



        try {
            // Objcm.g:584:2: ( classical_expr_wrp | struct_init )
            int alt75=2;
            alt75 = dfa75.predict(input);
            switch (alt75) {
                case 1 :
                    // Objcm.g:584:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_expression2943);
                    classical_expr_wrp319=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp319.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:585:4: struct_init
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_in_expression2948);
                    struct_init320=struct_init();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init320.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class full_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr_wrapper"
    // Objcm.g:588:1: full_expr_wrapper : full_expr -> ^( EXPR_FULL full_expr ) ;
    public final ObjcmParser.full_expr_wrapper_return full_expr_wrapper() throws RecognitionException {
        ObjcmParser.full_expr_wrapper_return retval = new ObjcmParser.full_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_return full_expr321 =null;


        RewriteRuleSubtreeStream stream_full_expr=new RewriteRuleSubtreeStream(adaptor,"rule full_expr");
        try {
            // Objcm.g:589:2: ( full_expr -> ^( EXPR_FULL full_expr ) )
            // Objcm.g:589:4: full_expr
            {
            pushFollow(FOLLOW_full_expr_in_full_expr_wrapper2959);
            full_expr321=full_expr();

            state._fsp--;

            stream_full_expr.add(full_expr321.getTree());

            // AST REWRITE
            // elements: full_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 589:14: -> ^( EXPR_FULL full_expr )
            {
                // Objcm.g:589:17: ^( EXPR_FULL full_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_FULL, "EXPR_FULL")
                , root_1);

                adaptor.addChild(root_1, stream_full_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr_wrapper"


    public static class full_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr"
    // Objcm.g:591:1: full_expr : classical_expr_wrp ( COMMA classical_expr_wrp )* ;
    public final ObjcmParser.full_expr_return full_expr() throws RecognitionException {
        ObjcmParser.full_expr_return retval = new ObjcmParser.full_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA323=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp322 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp324 =null;


        Object COMMA323_tree=null;

        try {
            // Objcm.g:592:2: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )
            // Objcm.g:592:4: classical_expr_wrp ( COMMA classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_full_expr2976);
            classical_expr_wrp322=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp322.getTree());

            // Objcm.g:592:23: ( COMMA classical_expr_wrp )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==COMMA) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // Objcm.g:592:24: COMMA classical_expr_wrp
            	    {
            	    COMMA323=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr2979); 
            	    COMMA323_tree = 
            	    (Object)adaptor.create(COMMA323)
            	    ;
            	    adaptor.addChild(root_0, COMMA323_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_full_expr2981);
            	    classical_expr_wrp324=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp324.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr"


    public static class full_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr2"
    // Objcm.g:594:1: full_expr2 : classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* ;
    public final ObjcmParser.full_expr2_return full_expr2() throws RecognitionException {
        ObjcmParser.full_expr2_return retval = new ObjcmParser.full_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA326=null;
        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2325 =null;

        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2327 =null;


        Object COMMA326_tree=null;

        try {
            // Objcm.g:595:2: ( classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* )
            // Objcm.g:595:4: classical_expr_wrp2 ( COMMA classical_expr_wrp2 )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr22992);
            classical_expr_wrp2325=classical_expr_wrp2();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp2325.getTree());

            // Objcm.g:595:24: ( COMMA classical_expr_wrp2 )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==COMMA) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // Objcm.g:595:25: COMMA classical_expr_wrp2
            	    {
            	    COMMA326=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr22995); 
            	    COMMA326_tree = 
            	    (Object)adaptor.create(COMMA326)
            	    ;
            	    adaptor.addChild(root_0, COMMA326_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr22997);
            	    classical_expr_wrp2327=classical_expr_wrp2();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp2327.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr2"


    public static class expr_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign_wrapper"
    // Objcm.g:597:1: expr_assign_wrapper : expr_assign -> ^( EXPR_ASSIGN expr_assign ) ;
    public final ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper() throws RecognitionException {
        ObjcmParser.expr_assign_wrapper_return retval = new ObjcmParser.expr_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_assign_return expr_assign328 =null;


        RewriteRuleSubtreeStream stream_expr_assign=new RewriteRuleSubtreeStream(adaptor,"rule expr_assign");
        try {
            // Objcm.g:598:2: ( expr_assign -> ^( EXPR_ASSIGN expr_assign ) )
            // Objcm.g:598:4: expr_assign
            {
            pushFollow(FOLLOW_expr_assign_in_expr_assign_wrapper3008);
            expr_assign328=expr_assign();

            state._fsp--;

            stream_expr_assign.add(expr_assign328.getTree());

            // AST REWRITE
            // elements: expr_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 598:16: -> ^( EXPR_ASSIGN expr_assign )
            {
                // Objcm.g:598:19: ^( EXPR_ASSIGN expr_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ASSIGN, "EXPR_ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_expr_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign_wrapper"


    public static class expr_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign"
    // Objcm.g:600:1: expr_assign : assign_wrapper ( classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) ) ;
    public final ObjcmParser.expr_assign_return expr_assign() throws RecognitionException {
        ObjcmParser.expr_assign_return retval = new ObjcmParser.expr_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_wrapper_return assign_wrapper329 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp330 =null;

        ObjcmParser.array_init_wrapper_return array_init_wrapper331 =null;

        ObjcmParser.func_pointer2_return func_pointer2332 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper333 =null;



        try {
            // Objcm.g:601:2: ( assign_wrapper ( classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) ) )
            // Objcm.g:601:4: assign_wrapper ( classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_assign_wrapper_in_expr_assign3027);
            assign_wrapper329=assign_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, assign_wrapper329.getTree());

            // Objcm.g:601:19: ( classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )
            int alt79=3;
            alt79 = dfa79.predict(input);
            switch (alt79) {
                case 1 :
                    // Objcm.g:601:20: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_expr_assign3030);
                    classical_expr_wrp330=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp330.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:601:41: array_init_wrapper
                    {
                    pushFollow(FOLLOW_array_init_wrapper_in_expr_assign3034);
                    array_init_wrapper331=array_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init_wrapper331.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:601:62: ( func_pointer2 ( method_call_wrapper )? )
                    {
                    // Objcm.g:601:62: ( func_pointer2 ( method_call_wrapper )? )
                    // Objcm.g:601:63: func_pointer2 ( method_call_wrapper )?
                    {
                    pushFollow(FOLLOW_func_pointer2_in_expr_assign3039);
                    func_pointer2332=func_pointer2();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer2332.getTree());

                    // Objcm.g:601:77: ( method_call_wrapper )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==L_KBR) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // Objcm.g:601:77: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_expr_assign3041);
                            method_call_wrapper333=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper333.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign"


    public static class array_init_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init_wrapper"
    // Objcm.g:603:1: array_init_wrapper : array_init -> ^( ARRAY_INIT array_init ) ;
    public final ObjcmParser.array_init_wrapper_return array_init_wrapper() throws RecognitionException {
        ObjcmParser.array_init_wrapper_return retval = new ObjcmParser.array_init_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.array_init_return array_init334 =null;


        RewriteRuleSubtreeStream stream_array_init=new RewriteRuleSubtreeStream(adaptor,"rule array_init");
        try {
            // Objcm.g:604:2: ( array_init -> ^( ARRAY_INIT array_init ) )
            // Objcm.g:604:4: array_init
            {
            pushFollow(FOLLOW_array_init_in_array_init_wrapper3053);
            array_init334=array_init();

            state._fsp--;

            stream_array_init.add(array_init334.getTree());

            // AST REWRITE
            // elements: array_init
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 604:15: -> ^( ARRAY_INIT array_init )
            {
                // Objcm.g:604:18: ^( ARRAY_INIT array_init )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ARRAY_INIT, "ARRAY_INIT")
                , root_1);

                adaptor.addChild(root_1, stream_array_init.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init_wrapper"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // Objcm.g:606:1: array_init : L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR ;
    public final ObjcmParser.array_init_return array_init() throws RecognitionException {
        ObjcmParser.array_init_return retval = new ObjcmParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR335=null;
        Token COMMA337=null;
        Token R_FBR339=null;
        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3336 =null;

        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3338 =null;


        Object L_FBR335_tree=null;
        Object COMMA337_tree=null;
        Object R_FBR339_tree=null;

        try {
            // Objcm.g:607:2: ( L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR )
            // Objcm.g:607:4: L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR335=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array_init3072); 
            L_FBR335_tree = 
            (Object)adaptor.create(L_FBR335)
            ;
            adaptor.addChild(root_0, L_FBR335_tree);


            // Objcm.g:607:10: ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==ASTERISK||LA81_0==ID||LA81_0==L_AND||LA81_0==L_BR||(LA81_0 >= L_FBR && LA81_0 <= L_KBR)||LA81_0==L_MINUS||LA81_0==L_MINUS_MINUS||LA81_0==L_NOT||LA81_0==L_PLUS||LA81_0==L_PLUS_PLUS||LA81_0==L_TILDA||LA81_0==NUMBER||LA81_0==SIZEOF||(LA81_0 >= STRING_LITERAL && LA81_0 <= STRING_LITERAL3)||LA81_0==166||LA81_0==173||LA81_0==175||LA81_0==179||LA81_0==182||LA81_0==185||LA81_0==193||(LA81_0 >= 195 && LA81_0 <= 196)||LA81_0==201) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // Objcm.g:607:11: classical_expr_wrp3 ( COMMA classical_expr_wrp3 )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init3075);
                    classical_expr_wrp3336=classical_expr_wrp3();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp3336.getTree());

                    // Objcm.g:607:31: ( COMMA classical_expr_wrp3 )*
                    loop80:
                    do {
                        int alt80=2;
                        int LA80_0 = input.LA(1);

                        if ( (LA80_0==COMMA) ) {
                            alt80=1;
                        }


                        switch (alt80) {
                    	case 1 :
                    	    // Objcm.g:607:32: COMMA classical_expr_wrp3
                    	    {
                    	    COMMA337=(Token)match(input,COMMA,FOLLOW_COMMA_in_array_init3078); 
                    	    COMMA337_tree = 
                    	    (Object)adaptor.create(COMMA337)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA337_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init3080);
                    	    classical_expr_wrp3338=classical_expr_wrp3();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp3338.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop80;
                        }
                    } while (true);


                    }
                    break;

            }


            R_FBR339=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array_init3086); 
            R_FBR339_tree = 
            (Object)adaptor.create(R_FBR339)
            ;
            adaptor.addChild(root_0, R_FBR339_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class classical_expr_wrp3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp3"
    // Objcm.g:610:1: classical_expr_wrp3 : ( array_init_wrapper | classical_expr_wrp );
    public final ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3() throws RecognitionException {
        ObjcmParser.classical_expr_wrp3_return retval = new ObjcmParser.classical_expr_wrp3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.array_init_wrapper_return array_init_wrapper340 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp341 =null;



        try {
            // Objcm.g:611:2: ( array_init_wrapper | classical_expr_wrp )
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==L_FBR) ) {
                alt82=1;
            }
            else if ( (LA82_0==ASTERISK||LA82_0==ID||LA82_0==L_AND||LA82_0==L_BR||LA82_0==L_KBR||LA82_0==L_MINUS||LA82_0==L_MINUS_MINUS||LA82_0==L_NOT||LA82_0==L_PLUS||LA82_0==L_PLUS_PLUS||LA82_0==L_TILDA||LA82_0==NUMBER||LA82_0==SIZEOF||(LA82_0 >= STRING_LITERAL && LA82_0 <= STRING_LITERAL3)||LA82_0==166||LA82_0==173||LA82_0==175||LA82_0==179||LA82_0==182||LA82_0==185||LA82_0==193||(LA82_0 >= 195 && LA82_0 <= 196)||LA82_0==201) ) {
                alt82=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;

            }
            switch (alt82) {
                case 1 :
                    // Objcm.g:611:4: array_init_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_init_wrapper_in_classical_expr_wrp33098);
                    array_init_wrapper340=array_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init_wrapper340.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:612:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_classical_expr_wrp33104);
                    classical_expr_wrp341=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp341.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp3"


    public static class classical_expr_wrp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp"
    // Objcm.g:615:1: classical_expr_wrp : classical_expr -> ^( CLASSICAL_EXPR classical_expr ) ;
    public final ObjcmParser.classical_expr_wrp_return classical_expr_wrp() throws RecognitionException {
        ObjcmParser.classical_expr_wrp_return retval = new ObjcmParser.classical_expr_wrp_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_return classical_expr342 =null;


        RewriteRuleSubtreeStream stream_classical_expr=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr");
        try {
            // Objcm.g:616:2: ( classical_expr -> ^( CLASSICAL_EXPR classical_expr ) )
            // Objcm.g:616:4: classical_expr
            {
            pushFollow(FOLLOW_classical_expr_in_classical_expr_wrp3117);
            classical_expr342=classical_expr();

            state._fsp--;

            stream_classical_expr.add(classical_expr342.getTree());

            // AST REWRITE
            // elements: classical_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 616:19: -> ^( CLASSICAL_EXPR classical_expr )
            {
                // Objcm.g:616:22: ^( CLASSICAL_EXPR classical_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR, "CLASSICAL_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp"


    public static class classical_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr"
    // Objcm.g:618:1: classical_expr : simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr_return classical_expr() throws RecognitionException {
        ObjcmParser.classical_expr_return retval = new ObjcmParser.classical_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper343 =null;

        ObjcmParser.expr_question_wrapper_return expr_question_wrapper344 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper345 =null;



        try {
            // Objcm.g:619:2: ( simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? )
            // Objcm.g:619:4: simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_simple_expr_wrapper_in_classical_expr3134);
            simple_expr_wrapper343=simple_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, simple_expr_wrapper343.getTree());

            // Objcm.g:619:24: ( expr_question_wrapper | expr_assign_wrapper )?
            int alt83=3;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==L_QUESTION) ) {
                alt83=1;
            }
            else if ( (LA83_0==L_AND_EQ||(LA83_0 >= L_DIV_EQ && LA83_0 <= L_EQ)||LA83_0==L_LEFT_EQ||LA83_0==L_MINUS_EQ||LA83_0==L_MULT_EQ||LA83_0==L_OR_EQ||LA83_0==L_PERC_EQ||LA83_0==L_PLUS_EQ||LA83_0==L_RIGHT_EQ||LA83_0==L_XOR_EQ) ) {
                alt83=2;
            }
            switch (alt83) {
                case 1 :
                    // Objcm.g:619:25: expr_question_wrapper
                    {
                    pushFollow(FOLLOW_expr_question_wrapper_in_classical_expr3137);
                    expr_question_wrapper344=expr_question_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_question_wrapper344.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:619:49: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr3141);
                    expr_assign_wrapper345=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper345.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr"


    public static class classical_expr_wrp2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp2"
    // Objcm.g:621:1: classical_expr_wrp2 : classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) ;
    public final ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2() throws RecognitionException {
        ObjcmParser.classical_expr_wrp2_return retval = new ObjcmParser.classical_expr_wrp2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr2_return classical_expr2346 =null;


        RewriteRuleSubtreeStream stream_classical_expr2=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr2");
        try {
            // Objcm.g:622:2: ( classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) )
            // Objcm.g:622:4: classical_expr2
            {
            pushFollow(FOLLOW_classical_expr2_in_classical_expr_wrp23153);
            classical_expr2346=classical_expr2();

            state._fsp--;

            stream_classical_expr2.add(classical_expr2346.getTree());

            // AST REWRITE
            // elements: classical_expr2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 622:20: -> ^( CLASSICAL_EXPR_2 classical_expr2 )
            {
                // Objcm.g:622:23: ^( CLASSICAL_EXPR_2 classical_expr2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR_2, "CLASSICAL_EXPR_2")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp2"


    public static class classical_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr2"
    // Objcm.g:624:1: classical_expr2 : ( object_name | func_pointer1 ) ( expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr2_return classical_expr2() throws RecognitionException {
        ObjcmParser.classical_expr2_return retval = new ObjcmParser.classical_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_name_return object_name347 =null;

        ObjcmParser.func_pointer1_return func_pointer1348 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper349 =null;



        try {
            // Objcm.g:625:2: ( ( object_name | func_pointer1 ) ( expr_assign_wrapper )? )
            // Objcm.g:625:4: ( object_name | func_pointer1 ) ( expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:625:4: ( object_name | func_pointer1 )
            int alt84=2;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // Objcm.g:625:5: object_name
                    {
                    pushFollow(FOLLOW_object_name_in_classical_expr23171);
                    object_name347=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name347.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:625:19: func_pointer1
                    {
                    pushFollow(FOLLOW_func_pointer1_in_classical_expr23175);
                    func_pointer1348=func_pointer1();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer1348.getTree());

                    }
                    break;

            }


            // Objcm.g:625:34: ( expr_assign_wrapper )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==L_AND_EQ||(LA85_0 >= L_DIV_EQ && LA85_0 <= L_EQ)||LA85_0==L_LEFT_EQ||LA85_0==L_MINUS_EQ||LA85_0==L_MULT_EQ||LA85_0==L_OR_EQ||LA85_0==L_PERC_EQ||LA85_0==L_PLUS_EQ||LA85_0==L_RIGHT_EQ||LA85_0==L_XOR_EQ) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // Objcm.g:625:34: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr23178);
                    expr_assign_wrapper349=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper349.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr2"


    public static class expr_question_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question_wrapper"
    // Objcm.g:627:1: expr_question_wrapper : expr_question -> ^( EXPR_QUESTION expr_question ) ;
    public final ObjcmParser.expr_question_wrapper_return expr_question_wrapper() throws RecognitionException {
        ObjcmParser.expr_question_wrapper_return retval = new ObjcmParser.expr_question_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_question_return expr_question350 =null;


        RewriteRuleSubtreeStream stream_expr_question=new RewriteRuleSubtreeStream(adaptor,"rule expr_question");
        try {
            // Objcm.g:628:2: ( expr_question -> ^( EXPR_QUESTION expr_question ) )
            // Objcm.g:628:4: expr_question
            {
            pushFollow(FOLLOW_expr_question_in_expr_question_wrapper3188);
            expr_question350=expr_question();

            state._fsp--;

            stream_expr_question.add(expr_question350.getTree());

            // AST REWRITE
            // elements: expr_question
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 628:18: -> ^( EXPR_QUESTION expr_question )
            {
                // Objcm.g:628:21: ^( EXPR_QUESTION expr_question )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_QUESTION, "EXPR_QUESTION")
                , root_1);

                adaptor.addChild(root_1, stream_expr_question.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question_wrapper"


    public static class expr_question_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question"
    // Objcm.g:630:1: expr_question : L_QUESTION classical_expr_wrp COLON classical_expr_wrp ;
    public final ObjcmParser.expr_question_return expr_question() throws RecognitionException {
        ObjcmParser.expr_question_return retval = new ObjcmParser.expr_question_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_QUESTION351=null;
        Token COLON353=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp352 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp354 =null;


        Object L_QUESTION351_tree=null;
        Object COLON353_tree=null;

        try {
            // Objcm.g:631:2: ( L_QUESTION classical_expr_wrp COLON classical_expr_wrp )
            // Objcm.g:631:4: L_QUESTION classical_expr_wrp COLON classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            L_QUESTION351=(Token)match(input,L_QUESTION,FOLLOW_L_QUESTION_in_expr_question3205); 
            L_QUESTION351_tree = 
            (Object)adaptor.create(L_QUESTION351)
            ;
            adaptor.addChild(root_0, L_QUESTION351_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question3207);
            classical_expr_wrp352=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp352.getTree());

            COLON353=(Token)match(input,COLON,FOLLOW_COLON_in_expr_question3209); 
            COLON353_tree = 
            (Object)adaptor.create(COLON353)
            ;
            adaptor.addChild(root_0, COLON353_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question3211);
            classical_expr_wrp354=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp354.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question"


    public static class assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign_wrapper"
    // Objcm.g:633:1: assign_wrapper : assign -> ^( ASSIGN assign ) ;
    public final ObjcmParser.assign_wrapper_return assign_wrapper() throws RecognitionException {
        ObjcmParser.assign_wrapper_return retval = new ObjcmParser.assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_return assign355 =null;


        RewriteRuleSubtreeStream stream_assign=new RewriteRuleSubtreeStream(adaptor,"rule assign");
        try {
            // Objcm.g:634:2: ( assign -> ^( ASSIGN assign ) )
            // Objcm.g:634:4: assign
            {
            pushFollow(FOLLOW_assign_in_assign_wrapper3220);
            assign355=assign();

            state._fsp--;

            stream_assign.add(assign355.getTree());

            // AST REWRITE
            // elements: assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 634:11: -> ^( ASSIGN assign )
            {
                // Objcm.g:634:14: ^( ASSIGN assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ASSIGN, "ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign_wrapper"


    public static class assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign"
    // Objcm.g:636:1: assign : ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ );
    public final ObjcmParser.assign_return assign() throws RecognitionException {
        ObjcmParser.assign_return retval = new ObjcmParser.assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set356=null;

        Object set356_tree=null;

        try {
            // Objcm.g:637:2: ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set356=(Token)input.LT(1);

            if ( input.LA(1)==L_AND_EQ||(input.LA(1) >= L_DIV_EQ && input.LA(1) <= L_EQ)||input.LA(1)==L_LEFT_EQ||input.LA(1)==L_MINUS_EQ||input.LA(1)==L_MULT_EQ||input.LA(1)==L_OR_EQ||input.LA(1)==L_PERC_EQ||input.LA(1)==L_PLUS_EQ||input.LA(1)==L_RIGHT_EQ||input.LA(1)==L_XOR_EQ ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set356)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign"


    public static class simple_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr_wrapper"
    // Objcm.g:641:1: simple_expr_wrapper : simple_expr -> ^( SIMPLE_EXPR simple_expr ) ;
    public final ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper() throws RecognitionException {
        ObjcmParser.simple_expr_wrapper_return retval = new ObjcmParser.simple_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_return simple_expr357 =null;


        RewriteRuleSubtreeStream stream_simple_expr=new RewriteRuleSubtreeStream(adaptor,"rule simple_expr");
        try {
            // Objcm.g:642:2: ( simple_expr -> ^( SIMPLE_EXPR simple_expr ) )
            // Objcm.g:642:4: simple_expr
            {
            pushFollow(FOLLOW_simple_expr_in_simple_expr_wrapper3293);
            simple_expr357=simple_expr();

            state._fsp--;

            stream_simple_expr.add(simple_expr357.getTree());

            // AST REWRITE
            // elements: simple_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 642:16: -> ^( SIMPLE_EXPR simple_expr )
            {
                // Objcm.g:642:19: ^( SIMPLE_EXPR simple_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SIMPLE_EXPR, "SIMPLE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr_wrapper"


    public static class simple_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr"
    // Objcm.g:644:1: simple_expr : expr_or_or -> ^( EXPR_OR_OR expr_or_or ) ;
    public final ObjcmParser.simple_expr_return simple_expr() throws RecognitionException {
        ObjcmParser.simple_expr_return retval = new ObjcmParser.simple_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_or_return expr_or_or358 =null;


        RewriteRuleSubtreeStream stream_expr_or_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or_or");
        try {
            // Objcm.g:645:2: ( expr_or_or -> ^( EXPR_OR_OR expr_or_or ) )
            // Objcm.g:645:4: expr_or_or
            {
            pushFollow(FOLLOW_expr_or_or_in_simple_expr3311);
            expr_or_or358=expr_or_or();

            state._fsp--;

            stream_expr_or_or.add(expr_or_or358.getTree());

            // AST REWRITE
            // elements: expr_or_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 645:15: -> ^( EXPR_OR_OR expr_or_or )
            {
                // Objcm.g:645:18: ^( EXPR_OR_OR expr_or_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR_OR, "EXPR_OR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr"


    public static class expr_or_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_or"
    // Objcm.g:647:1: expr_or_or : expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_or_or_return expr_or_or() throws RecognitionException {
        ObjcmParser.expr_or_or_return retval = new ObjcmParser.expr_or_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR_OR360=null;
        ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper359 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper361 =null;


        Object L_OR_OR360_tree=null;

        try {
            // Objcm.g:648:2: ( expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )* )
            // Objcm.g:648:4: expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_and_wrapper_in_expr_or_or3328);
            expr_and_and_wrapper359=expr_and_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_and_wrapper359.getTree());

            // Objcm.g:648:25: ( L_OR_OR simple_expr_wrapper )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==L_OR_OR) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // Objcm.g:648:26: L_OR_OR simple_expr_wrapper
            	    {
            	    L_OR_OR360=(Token)match(input,L_OR_OR,FOLLOW_L_OR_OR_in_expr_or_or3331); 
            	    L_OR_OR360_tree = 
            	    (Object)adaptor.create(L_OR_OR360)
            	    ;
            	    adaptor.addChild(root_0, L_OR_OR360_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_or_or3333);
            	    simple_expr_wrapper361=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper361.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_or"


    public static class expr_and_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and_wrapper"
    // Objcm.g:650:1: expr_and_and_wrapper : expr_and_and -> ^( EXPR_AND_AND expr_and_and ) ;
    public final ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_and_wrapper_return retval = new ObjcmParser.expr_and_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_and_return expr_and_and362 =null;


        RewriteRuleSubtreeStream stream_expr_and_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and_and");
        try {
            // Objcm.g:651:2: ( expr_and_and -> ^( EXPR_AND_AND expr_and_and ) )
            // Objcm.g:651:4: expr_and_and
            {
            pushFollow(FOLLOW_expr_and_and_in_expr_and_and_wrapper3344);
            expr_and_and362=expr_and_and();

            state._fsp--;

            stream_expr_and_and.add(expr_and_and362.getTree());

            // AST REWRITE
            // elements: expr_and_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 651:17: -> ^( EXPR_AND_AND expr_and_and )
            {
                // Objcm.g:651:20: ^( EXPR_AND_AND expr_and_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND_AND, "EXPR_AND_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and_wrapper"


    public static class expr_and_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and"
    // Objcm.g:653:1: expr_and_and : expr_or_wrapper ( L_AND_AND simple_expr_wrapper )* ;
    public final ObjcmParser.expr_and_and_return expr_and_and() throws RecognitionException {
        ObjcmParser.expr_and_and_return retval = new ObjcmParser.expr_and_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND_AND364=null;
        ObjcmParser.expr_or_wrapper_return expr_or_wrapper363 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper365 =null;


        Object L_AND_AND364_tree=null;

        try {
            // Objcm.g:654:2: ( expr_or_wrapper ( L_AND_AND simple_expr_wrapper )* )
            // Objcm.g:654:4: expr_or_wrapper ( L_AND_AND simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_or_wrapper_in_expr_and_and3361);
            expr_or_wrapper363=expr_or_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_or_wrapper363.getTree());

            // Objcm.g:654:20: ( L_AND_AND simple_expr_wrapper )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==L_AND_AND) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // Objcm.g:654:21: L_AND_AND simple_expr_wrapper
            	    {
            	    L_AND_AND364=(Token)match(input,L_AND_AND,FOLLOW_L_AND_AND_in_expr_and_and3364); 
            	    L_AND_AND364_tree = 
            	    (Object)adaptor.create(L_AND_AND364)
            	    ;
            	    adaptor.addChild(root_0, L_AND_AND364_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_and_and3366);
            	    simple_expr_wrapper365=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper365.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and"


    public static class expr_or_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_wrapper"
    // Objcm.g:656:1: expr_or_wrapper : expr_or -> ^( EXPR_OR expr_or ) ;
    public final ObjcmParser.expr_or_wrapper_return expr_or_wrapper() throws RecognitionException {
        ObjcmParser.expr_or_wrapper_return retval = new ObjcmParser.expr_or_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_return expr_or366 =null;


        RewriteRuleSubtreeStream stream_expr_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or");
        try {
            // Objcm.g:657:2: ( expr_or -> ^( EXPR_OR expr_or ) )
            // Objcm.g:657:4: expr_or
            {
            pushFollow(FOLLOW_expr_or_in_expr_or_wrapper3377);
            expr_or366=expr_or();

            state._fsp--;

            stream_expr_or.add(expr_or366.getTree());

            // AST REWRITE
            // elements: expr_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 657:12: -> ^( EXPR_OR expr_or )
            {
                // Objcm.g:657:15: ^( EXPR_OR expr_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR, "EXPR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_wrapper"


    public static class expr_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or"
    // Objcm.g:659:1: expr_or : expr_xor_wrapper ( L_OR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_or_return expr_or() throws RecognitionException {
        ObjcmParser.expr_or_return retval = new ObjcmParser.expr_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR368=null;
        ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper367 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper369 =null;


        Object L_OR368_tree=null;

        try {
            // Objcm.g:660:2: ( expr_xor_wrapper ( L_OR simple_expr_wrapper )* )
            // Objcm.g:660:4: expr_xor_wrapper ( L_OR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_xor_wrapper_in_expr_or3395);
            expr_xor_wrapper367=expr_xor_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_xor_wrapper367.getTree());

            // Objcm.g:660:21: ( L_OR simple_expr_wrapper )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==L_OR) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // Objcm.g:660:22: L_OR simple_expr_wrapper
            	    {
            	    L_OR368=(Token)match(input,L_OR,FOLLOW_L_OR_in_expr_or3398); 
            	    L_OR368_tree = 
            	    (Object)adaptor.create(L_OR368)
            	    ;
            	    adaptor.addChild(root_0, L_OR368_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_or3400);
            	    simple_expr_wrapper369=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper369.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or"


    public static class expr_xor_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor_wrapper"
    // Objcm.g:662:1: expr_xor_wrapper : expr_xor -> ^( EXPR_XOR expr_xor ) ;
    public final ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper() throws RecognitionException {
        ObjcmParser.expr_xor_wrapper_return retval = new ObjcmParser.expr_xor_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_xor_return expr_xor370 =null;


        RewriteRuleSubtreeStream stream_expr_xor=new RewriteRuleSubtreeStream(adaptor,"rule expr_xor");
        try {
            // Objcm.g:663:2: ( expr_xor -> ^( EXPR_XOR expr_xor ) )
            // Objcm.g:663:4: expr_xor
            {
            pushFollow(FOLLOW_expr_xor_in_expr_xor_wrapper3411);
            expr_xor370=expr_xor();

            state._fsp--;

            stream_expr_xor.add(expr_xor370.getTree());

            // AST REWRITE
            // elements: expr_xor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 663:13: -> ^( EXPR_XOR expr_xor )
            {
                // Objcm.g:663:16: ^( EXPR_XOR expr_xor )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_XOR, "EXPR_XOR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_xor.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor_wrapper"


    public static class expr_xor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor"
    // Objcm.g:665:1: expr_xor : expr_and_wrapper ( L_XOR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_xor_return expr_xor() throws RecognitionException {
        ObjcmParser.expr_xor_return retval = new ObjcmParser.expr_xor_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_XOR372=null;
        ObjcmParser.expr_and_wrapper_return expr_and_wrapper371 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper373 =null;


        Object L_XOR372_tree=null;

        try {
            // Objcm.g:666:2: ( expr_and_wrapper ( L_XOR simple_expr_wrapper )* )
            // Objcm.g:666:4: expr_and_wrapper ( L_XOR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_wrapper_in_expr_xor3428);
            expr_and_wrapper371=expr_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_wrapper371.getTree());

            // Objcm.g:666:21: ( L_XOR simple_expr_wrapper )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==L_XOR) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // Objcm.g:666:22: L_XOR simple_expr_wrapper
            	    {
            	    L_XOR372=(Token)match(input,L_XOR,FOLLOW_L_XOR_in_expr_xor3431); 
            	    L_XOR372_tree = 
            	    (Object)adaptor.create(L_XOR372)
            	    ;
            	    adaptor.addChild(root_0, L_XOR372_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_xor3433);
            	    simple_expr_wrapper373=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper373.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor"


    public static class expr_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_wrapper"
    // Objcm.g:668:1: expr_and_wrapper : expr_and -> ^( EXPR_AND expr_and ) ;
    public final ObjcmParser.expr_and_wrapper_return expr_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_wrapper_return retval = new ObjcmParser.expr_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_return expr_and374 =null;


        RewriteRuleSubtreeStream stream_expr_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and");
        try {
            // Objcm.g:669:2: ( expr_and -> ^( EXPR_AND expr_and ) )
            // Objcm.g:669:4: expr_and
            {
            pushFollow(FOLLOW_expr_and_in_expr_and_wrapper3445);
            expr_and374=expr_and();

            state._fsp--;

            stream_expr_and.add(expr_and374.getTree());

            // AST REWRITE
            // elements: expr_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 669:13: -> ^( EXPR_AND expr_and )
            {
                // Objcm.g:669:16: ^( EXPR_AND expr_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND, "EXPR_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_wrapper"


    public static class expr_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and"
    // Objcm.g:671:1: expr_and : expr_eq_wrapper ( L_AND simple_expr_wrapper )* ;
    public final ObjcmParser.expr_and_return expr_and() throws RecognitionException {
        ObjcmParser.expr_and_return retval = new ObjcmParser.expr_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND376=null;
        ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper375 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper377 =null;


        Object L_AND376_tree=null;

        try {
            // Objcm.g:672:2: ( expr_eq_wrapper ( L_AND simple_expr_wrapper )* )
            // Objcm.g:672:4: expr_eq_wrapper ( L_AND simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_eq_wrapper_in_expr_and3463);
            expr_eq_wrapper375=expr_eq_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_eq_wrapper375.getTree());

            // Objcm.g:672:20: ( L_AND simple_expr_wrapper )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==L_AND) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // Objcm.g:672:21: L_AND simple_expr_wrapper
            	    {
            	    L_AND376=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_and3466); 
            	    L_AND376_tree = 
            	    (Object)adaptor.create(L_AND376)
            	    ;
            	    adaptor.addChild(root_0, L_AND376_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_and3468);
            	    simple_expr_wrapper377=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper377.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and"


    public static class expr_eq_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq_wrapper"
    // Objcm.g:674:1: expr_eq_wrapper : expr_eq -> ^( EXPR_EQ expr_eq ) ;
    public final ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper() throws RecognitionException {
        ObjcmParser.expr_eq_wrapper_return retval = new ObjcmParser.expr_eq_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_eq_return expr_eq378 =null;


        RewriteRuleSubtreeStream stream_expr_eq=new RewriteRuleSubtreeStream(adaptor,"rule expr_eq");
        try {
            // Objcm.g:675:2: ( expr_eq -> ^( EXPR_EQ expr_eq ) )
            // Objcm.g:675:4: expr_eq
            {
            pushFollow(FOLLOW_expr_eq_in_expr_eq_wrapper3480);
            expr_eq378=expr_eq();

            state._fsp--;

            stream_expr_eq.add(expr_eq378.getTree());

            // AST REWRITE
            // elements: expr_eq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 675:12: -> ^( EXPR_EQ expr_eq )
            {
                // Objcm.g:675:15: ^( EXPR_EQ expr_eq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_EQ, "EXPR_EQ")
                , root_1);

                adaptor.addChild(root_1, stream_expr_eq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq_wrapper"


    public static class expr_eq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq"
    // Objcm.g:677:1: expr_eq : expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_eq_return expr_eq() throws RecognitionException {
        ObjcmParser.expr_eq_return retval = new ObjcmParser.expr_eq_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set380=null;
        ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper379 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper381 =null;


        Object set380_tree=null;

        try {
            // Objcm.g:678:2: ( expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )* )
            // Objcm.g:678:4: expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_cond_wrapper_in_expr_eq3498);
            expr_cond_wrapper379=expr_cond_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_cond_wrapper379.getTree());

            // Objcm.g:678:22: ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==L_EQ_EQ||LA91_0==L_NEQ) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // Objcm.g:678:23: ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper
            	    {
            	    set380=(Token)input.LT(1);

            	    if ( input.LA(1)==L_EQ_EQ||input.LA(1)==L_NEQ ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set380)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_eq3509);
            	    simple_expr_wrapper381=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper381.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq"


    public static class expr_cond_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond_wrapper"
    // Objcm.g:680:1: expr_cond_wrapper : expr_cond -> ^( EXPR_COND expr_cond ) ;
    public final ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper() throws RecognitionException {
        ObjcmParser.expr_cond_wrapper_return retval = new ObjcmParser.expr_cond_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_cond_return expr_cond382 =null;


        RewriteRuleSubtreeStream stream_expr_cond=new RewriteRuleSubtreeStream(adaptor,"rule expr_cond");
        try {
            // Objcm.g:681:2: ( expr_cond -> ^( EXPR_COND expr_cond ) )
            // Objcm.g:681:4: expr_cond
            {
            pushFollow(FOLLOW_expr_cond_in_expr_cond_wrapper3520);
            expr_cond382=expr_cond();

            state._fsp--;

            stream_expr_cond.add(expr_cond382.getTree());

            // AST REWRITE
            // elements: expr_cond
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 681:14: -> ^( EXPR_COND expr_cond )
            {
                // Objcm.g:681:17: ^( EXPR_COND expr_cond )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_COND, "EXPR_COND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_cond.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond_wrapper"


    public static class expr_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond"
    // Objcm.g:683:1: expr_cond : expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_cond_return expr_cond() throws RecognitionException {
        ObjcmParser.expr_cond_return retval = new ObjcmParser.expr_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set384=null;
        ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper383 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper385 =null;


        Object set384_tree=null;

        try {
            // Objcm.g:684:2: ( expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )* )
            // Objcm.g:684:4: expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mov_wrapper_in_expr_cond3537);
            expr_mov_wrapper383=expr_mov_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mov_wrapper383.getTree());

            // Objcm.g:684:21: ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( ((LA92_0 >= L_LESS && LA92_0 <= L_LESS_EQ)||(LA92_0 >= L_MORE && LA92_0 <= L_MORE_EQ)) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // Objcm.g:684:22: ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper
            	    {
            	    set384=(Token)input.LT(1);

            	    if ( (input.LA(1) >= L_LESS && input.LA(1) <= L_LESS_EQ)||(input.LA(1) >= L_MORE && input.LA(1) <= L_MORE_EQ) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set384)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_cond3556);
            	    simple_expr_wrapper385=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper385.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond"


    public static class expr_mov_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov_wrapper"
    // Objcm.g:686:1: expr_mov_wrapper : expr_mov -> ^( EXPR_MOV expr_mov ) ;
    public final ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper() throws RecognitionException {
        ObjcmParser.expr_mov_wrapper_return retval = new ObjcmParser.expr_mov_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mov_return expr_mov386 =null;


        RewriteRuleSubtreeStream stream_expr_mov=new RewriteRuleSubtreeStream(adaptor,"rule expr_mov");
        try {
            // Objcm.g:687:2: ( expr_mov -> ^( EXPR_MOV expr_mov ) )
            // Objcm.g:687:4: expr_mov
            {
            pushFollow(FOLLOW_expr_mov_in_expr_mov_wrapper3567);
            expr_mov386=expr_mov();

            state._fsp--;

            stream_expr_mov.add(expr_mov386.getTree());

            // AST REWRITE
            // elements: expr_mov
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 687:13: -> ^( EXPR_MOV expr_mov )
            {
                // Objcm.g:687:16: ^( EXPR_MOV expr_mov )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MOV, "EXPR_MOV")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mov.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov_wrapper"


    public static class expr_mov_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov"
    // Objcm.g:689:1: expr_mov : expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_mov_return expr_mov() throws RecognitionException {
        ObjcmParser.expr_mov_return retval = new ObjcmParser.expr_mov_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set388=null;
        ObjcmParser.expr_add_wrapper_return expr_add_wrapper387 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper389 =null;


        Object set388_tree=null;

        try {
            // Objcm.g:690:2: ( expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )* )
            // Objcm.g:690:4: expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_add_wrapper_in_expr_mov3585);
            expr_add_wrapper387=expr_add_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_add_wrapper387.getTree());

            // Objcm.g:690:21: ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==L_LEFT||LA93_0==L_RIGHT) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // Objcm.g:690:22: ( L_LEFT | L_RIGHT ) simple_expr_wrapper
            	    {
            	    set388=(Token)input.LT(1);

            	    if ( input.LA(1)==L_LEFT||input.LA(1)==L_RIGHT ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set388)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_mov3596);
            	    simple_expr_wrapper389=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper389.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov"


    public static class expr_add_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add_wrapper"
    // Objcm.g:692:1: expr_add_wrapper : expr_add -> ^( EXPR_ADD expr_add ) ;
    public final ObjcmParser.expr_add_wrapper_return expr_add_wrapper() throws RecognitionException {
        ObjcmParser.expr_add_wrapper_return retval = new ObjcmParser.expr_add_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_add_return expr_add390 =null;


        RewriteRuleSubtreeStream stream_expr_add=new RewriteRuleSubtreeStream(adaptor,"rule expr_add");
        try {
            // Objcm.g:693:2: ( expr_add -> ^( EXPR_ADD expr_add ) )
            // Objcm.g:693:4: expr_add
            {
            pushFollow(FOLLOW_expr_add_in_expr_add_wrapper3608);
            expr_add390=expr_add();

            state._fsp--;

            stream_expr_add.add(expr_add390.getTree());

            // AST REWRITE
            // elements: expr_add
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 693:13: -> ^( EXPR_ADD expr_add )
            {
                // Objcm.g:693:16: ^( EXPR_ADD expr_add )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ADD, "EXPR_ADD")
                , root_1);

                adaptor.addChild(root_1, stream_expr_add.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add_wrapper"


    public static class expr_add_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add"
    // Objcm.g:695:1: expr_add : expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_add_return expr_add() throws RecognitionException {
        ObjcmParser.expr_add_return retval = new ObjcmParser.expr_add_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set392=null;
        ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper391 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper393 =null;


        Object set392_tree=null;

        try {
            // Objcm.g:696:2: ( expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )* )
            // Objcm.g:696:4: expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mult_wrapper_in_expr_add3625);
            expr_mult_wrapper391=expr_mult_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mult_wrapper391.getTree());

            // Objcm.g:696:22: ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==L_MINUS||LA94_0==L_PLUS) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // Objcm.g:696:23: ( L_PLUS | L_MINUS ) simple_expr_wrapper
            	    {
            	    set392=(Token)input.LT(1);

            	    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set392)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_add3636);
            	    simple_expr_wrapper393=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper393.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add"


    public static class expr_mult_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult_wrapper"
    // Objcm.g:698:1: expr_mult_wrapper : expr_mult -> ^( EXPR_MULT expr_mult ) ;
    public final ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper() throws RecognitionException {
        ObjcmParser.expr_mult_wrapper_return retval = new ObjcmParser.expr_mult_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mult_return expr_mult394 =null;


        RewriteRuleSubtreeStream stream_expr_mult=new RewriteRuleSubtreeStream(adaptor,"rule expr_mult");
        try {
            // Objcm.g:699:2: ( expr_mult -> ^( EXPR_MULT expr_mult ) )
            // Objcm.g:699:4: expr_mult
            {
            pushFollow(FOLLOW_expr_mult_in_expr_mult_wrapper3647);
            expr_mult394=expr_mult();

            state._fsp--;

            stream_expr_mult.add(expr_mult394.getTree());

            // AST REWRITE
            // elements: expr_mult
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 699:14: -> ^( EXPR_MULT expr_mult )
            {
                // Objcm.g:699:17: ^( EXPR_MULT expr_mult )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MULT, "EXPR_MULT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mult.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult_wrapper"


    public static class expr_mult_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult"
    // Objcm.g:701:1: expr_mult : expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_mult_return expr_mult() throws RecognitionException {
        ObjcmParser.expr_mult_return retval = new ObjcmParser.expr_mult_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set396=null;
        ObjcmParser.expr_type_wrapper_return expr_type_wrapper395 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper397 =null;


        Object set396_tree=null;

        try {
            // Objcm.g:702:2: ( expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) simple_expr_wrapper )* )
            // Objcm.g:702:4: expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_type_wrapper_in_expr_mult3664);
            expr_type_wrapper395=expr_type_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_type_wrapper395.getTree());

            // Objcm.g:702:22: ( ( ASTERISK | L_DIV | L_PERC ) simple_expr_wrapper )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==ASTERISK||LA95_0==L_DIV||LA95_0==L_PERC) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // Objcm.g:702:23: ( ASTERISK | L_DIV | L_PERC ) simple_expr_wrapper
            	    {
            	    set396=(Token)input.LT(1);

            	    if ( input.LA(1)==ASTERISK||input.LA(1)==L_DIV||input.LA(1)==L_PERC ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set396)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_mult3679);
            	    simple_expr_wrapper397=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper397.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult"


    public static class expr_type_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_type_wrapper"
    // Objcm.g:704:1: expr_type_wrapper : expr_type -> ^( EXPR_TYPE expr_type ) ;
    public final ObjcmParser.expr_type_wrapper_return expr_type_wrapper() throws RecognitionException {
        ObjcmParser.expr_type_wrapper_return retval = new ObjcmParser.expr_type_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_type_return expr_type398 =null;


        RewriteRuleSubtreeStream stream_expr_type=new RewriteRuleSubtreeStream(adaptor,"rule expr_type");
        try {
            // Objcm.g:705:2: ( expr_type -> ^( EXPR_TYPE expr_type ) )
            // Objcm.g:705:4: expr_type
            {
            pushFollow(FOLLOW_expr_type_in_expr_type_wrapper3691);
            expr_type398=expr_type();

            state._fsp--;

            stream_expr_type.add(expr_type398.getTree());

            // AST REWRITE
            // elements: expr_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 705:14: -> ^( EXPR_TYPE expr_type )
            {
                // Objcm.g:705:17: ^( EXPR_TYPE expr_type )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_TYPE, "EXPR_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_expr_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_type_wrapper"


    public static class expr_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_type"
    // Objcm.g:707:1: expr_type : ( type_convertion )? expr_unname ;
    public final ObjcmParser.expr_type_return expr_type() throws RecognitionException {
        ObjcmParser.expr_type_return retval = new ObjcmParser.expr_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_convertion_return type_convertion399 =null;

        ObjcmParser.expr_unname_return expr_unname400 =null;



        try {
            // Objcm.g:708:2: ( ( type_convertion )? expr_unname )
            // Objcm.g:708:4: ( type_convertion )? expr_unname
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:708:4: ( type_convertion )?
            int alt96=2;
            alt96 = dfa96.predict(input);
            switch (alt96) {
                case 1 :
                    // Objcm.g:708:4: type_convertion
                    {
                    pushFollow(FOLLOW_type_convertion_in_expr_type3708);
                    type_convertion399=type_convertion();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion399.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_expr_unname_in_expr_type3711);
            expr_unname400=expr_unname();

            state._fsp--;

            adaptor.addChild(root_0, expr_unname400.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_type"


    public static class expr_unname_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_unname"
    // Objcm.g:710:1: expr_unname : ( ASTERISK ( type_convertion )? )? expr_addr ;
    public final ObjcmParser.expr_unname_return expr_unname() throws RecognitionException {
        ObjcmParser.expr_unname_return retval = new ObjcmParser.expr_unname_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK401=null;
        ObjcmParser.type_convertion_return type_convertion402 =null;

        ObjcmParser.expr_addr_return expr_addr403 =null;


        Object ASTERISK401_tree=null;

        try {
            // Objcm.g:711:2: ( ( ASTERISK ( type_convertion )? )? expr_addr )
            // Objcm.g:711:4: ( ASTERISK ( type_convertion )? )? expr_addr
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:711:4: ( ASTERISK ( type_convertion )? )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==ASTERISK) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // Objcm.g:711:5: ASTERISK ( type_convertion )?
                    {
                    ASTERISK401=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_expr_unname3722); 
                    ASTERISK401_tree = 
                    (Object)adaptor.create(ASTERISK401)
                    ;
                    adaptor.addChild(root_0, ASTERISK401_tree);


                    // Objcm.g:711:14: ( type_convertion )?
                    int alt97=2;
                    alt97 = dfa97.predict(input);
                    switch (alt97) {
                        case 1 :
                            // Objcm.g:711:14: type_convertion
                            {
                            pushFollow(FOLLOW_type_convertion_in_expr_unname3724);
                            type_convertion402=type_convertion();

                            state._fsp--;

                            adaptor.addChild(root_0, type_convertion402.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_addr_in_expr_unname3729);
            expr_addr403=expr_addr();

            state._fsp--;

            adaptor.addChild(root_0, expr_addr403.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_unname"


    public static class expr_addr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_addr"
    // Objcm.g:713:1: expr_addr : ( L_AND )? expr_sign ;
    public final ObjcmParser.expr_addr_return expr_addr() throws RecognitionException {
        ObjcmParser.expr_addr_return retval = new ObjcmParser.expr_addr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND404=null;
        ObjcmParser.expr_sign_return expr_sign405 =null;


        Object L_AND404_tree=null;

        try {
            // Objcm.g:714:2: ( ( L_AND )? expr_sign )
            // Objcm.g:714:4: ( L_AND )? expr_sign
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:714:4: ( L_AND )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==L_AND) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // Objcm.g:714:4: L_AND
                    {
                    L_AND404=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_addr3739); 
                    L_AND404_tree = 
                    (Object)adaptor.create(L_AND404)
                    ;
                    adaptor.addChild(root_0, L_AND404_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_sign_in_expr_addr3742);
            expr_sign405=expr_sign();

            state._fsp--;

            adaptor.addChild(root_0, expr_sign405.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_addr"


    public static class expr_sign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_sign"
    // Objcm.g:716:1: expr_sign : ( L_MINUS | L_PLUS )? expr_not_wrapper ;
    public final ObjcmParser.expr_sign_return expr_sign() throws RecognitionException {
        ObjcmParser.expr_sign_return retval = new ObjcmParser.expr_sign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set406=null;
        ObjcmParser.expr_not_wrapper_return expr_not_wrapper407 =null;


        Object set406_tree=null;

        try {
            // Objcm.g:717:2: ( ( L_MINUS | L_PLUS )? expr_not_wrapper )
            // Objcm.g:717:4: ( L_MINUS | L_PLUS )? expr_not_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:717:4: ( L_MINUS | L_PLUS )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==L_MINUS||LA100_0==L_PLUS) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // Objcm.g:
                    {
                    set406=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set406)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not_wrapper_in_expr_sign3761);
            expr_not_wrapper407=expr_not_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_not_wrapper407.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_sign"


    public static class expr_not_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not_wrapper"
    // Objcm.g:719:1: expr_not_wrapper : expr_not -> ^( EXPR_NOT expr_not ) ;
    public final ObjcmParser.expr_not_wrapper_return expr_not_wrapper() throws RecognitionException {
        ObjcmParser.expr_not_wrapper_return retval = new ObjcmParser.expr_not_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_not_return expr_not408 =null;


        RewriteRuleSubtreeStream stream_expr_not=new RewriteRuleSubtreeStream(adaptor,"rule expr_not");
        try {
            // Objcm.g:720:2: ( expr_not -> ^( EXPR_NOT expr_not ) )
            // Objcm.g:720:4: expr_not
            {
            pushFollow(FOLLOW_expr_not_in_expr_not_wrapper3771);
            expr_not408=expr_not();

            state._fsp--;

            stream_expr_not.add(expr_not408.getTree());

            // AST REWRITE
            // elements: expr_not
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 720:13: -> ^( EXPR_NOT expr_not )
            {
                // Objcm.g:720:16: ^( EXPR_NOT expr_not )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_not.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not_wrapper"


    public static class expr_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not"
    // Objcm.g:722:1: expr_not : ( L_NOT )? expr_not2 ;
    public final ObjcmParser.expr_not_return expr_not() throws RecognitionException {
        ObjcmParser.expr_not_return retval = new ObjcmParser.expr_not_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_NOT409=null;
        ObjcmParser.expr_not2_return expr_not2410 =null;


        Object L_NOT409_tree=null;

        try {
            // Objcm.g:723:2: ( ( L_NOT )? expr_not2 )
            // Objcm.g:723:4: ( L_NOT )? expr_not2
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:723:4: ( L_NOT )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==L_NOT) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // Objcm.g:723:4: L_NOT
                    {
                    L_NOT409=(Token)match(input,L_NOT,FOLLOW_L_NOT_in_expr_not3790); 
                    L_NOT409_tree = 
                    (Object)adaptor.create(L_NOT409)
                    ;
                    adaptor.addChild(root_0, L_NOT409_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not2_in_expr_not3793);
            expr_not2410=expr_not2();

            state._fsp--;

            adaptor.addChild(root_0, expr_not2410.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not"


    public static class expr_not2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not2"
    // Objcm.g:725:1: expr_not2 : ( L_TILDA )? expr_size_of ;
    public final ObjcmParser.expr_not2_return expr_not2() throws RecognitionException {
        ObjcmParser.expr_not2_return retval = new ObjcmParser.expr_not2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_TILDA411=null;
        ObjcmParser.expr_size_of_return expr_size_of412 =null;


        Object L_TILDA411_tree=null;

        try {
            // Objcm.g:726:2: ( ( L_TILDA )? expr_size_of )
            // Objcm.g:726:4: ( L_TILDA )? expr_size_of
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:726:4: ( L_TILDA )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==L_TILDA) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // Objcm.g:726:4: L_TILDA
                    {
                    L_TILDA411=(Token)match(input,L_TILDA,FOLLOW_L_TILDA_in_expr_not23803); 
                    L_TILDA411_tree = 
                    (Object)adaptor.create(L_TILDA411)
                    ;
                    adaptor.addChild(root_0, L_TILDA411_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_size_of_in_expr_not23806);
            expr_size_of412=expr_size_of();

            state._fsp--;

            adaptor.addChild(root_0, expr_size_of412.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not2"


    public static class expr_size_of_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_size_of"
    // Objcm.g:728:1: expr_size_of : ( SIZEOF )? expr_xcrement ;
    public final ObjcmParser.expr_size_of_return expr_size_of() throws RecognitionException {
        ObjcmParser.expr_size_of_return retval = new ObjcmParser.expr_size_of_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SIZEOF413=null;
        ObjcmParser.expr_xcrement_return expr_xcrement414 =null;


        Object SIZEOF413_tree=null;

        try {
            // Objcm.g:729:2: ( ( SIZEOF )? expr_xcrement )
            // Objcm.g:729:4: ( SIZEOF )? expr_xcrement
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:729:4: ( SIZEOF )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==SIZEOF) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // Objcm.g:729:4: SIZEOF
                    {
                    SIZEOF413=(Token)match(input,SIZEOF,FOLLOW_SIZEOF_in_expr_size_of3816); 
                    SIZEOF413_tree = 
                    (Object)adaptor.create(SIZEOF413)
                    ;
                    adaptor.addChild(root_0, SIZEOF413_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_xcrement_in_expr_size_of3819);
            expr_xcrement414=expr_xcrement();

            state._fsp--;

            adaptor.addChild(root_0, expr_xcrement414.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_size_of"


    public static class expr_xcrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xcrement"
    // Objcm.g:731:1: expr_xcrement : ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 ;
    public final ObjcmParser.expr_xcrement_return expr_xcrement() throws RecognitionException {
        ObjcmParser.expr_xcrement_return retval = new ObjcmParser.expr_xcrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set415=null;
        ObjcmParser.object_wrapped1_return object_wrapped1416 =null;


        Object set415_tree=null;

        try {
            // Objcm.g:732:2: ( ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 )
            // Objcm.g:732:4: ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:732:4: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==L_MINUS_MINUS||LA104_0==L_PLUS_PLUS) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // Objcm.g:
                    {
                    set415=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set415)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_object_wrapped1_in_expr_xcrement3838);
            object_wrapped1416=object_wrapped1();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped1416.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xcrement"


    public static class object_wrapped1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped1"
    // Objcm.g:734:1: object_wrapped1 : object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? ;
    public final ObjcmParser.object_wrapped1_return object_wrapped1() throws RecognitionException {
        ObjcmParser.object_wrapped1_return retval = new ObjcmParser.object_wrapped1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set418=null;
        ObjcmParser.object_wrapped2_return object_wrapped2417 =null;


        Object set418_tree=null;

        try {
            // Objcm.g:735:2: ( object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? )
            // Objcm.g:735:4: object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapped2_in_object_wrapped13848);
            object_wrapped2417=object_wrapped2();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped2417.getTree());

            // Objcm.g:735:20: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==L_MINUS_MINUS||LA105_0==L_PLUS_PLUS) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // Objcm.g:
                    {
                    set418=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set418)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped1"


    public static class object_wrapped2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped2"
    // Objcm.g:738:1: object_wrapped2 : ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR classical_expr_wrp R_BR ( id_part_end )? | const_expr_wrapper | a_started );
    public final ObjcmParser.object_wrapped2_return object_wrapped2() throws RecognitionException {
        ObjcmParser.object_wrapped2_return retval = new ObjcmParser.object_wrapped2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal419=null;
        Token L_BR424=null;
        Token R_BR426=null;
        ObjcmParser.object_name_return object_name420 =null;

        ObjcmParser.generic_return generic421 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper422 =null;

        ObjcmParser.id_part_end_return id_part_end423 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp425 =null;

        ObjcmParser.id_part_end_return id_part_end427 =null;

        ObjcmParser.const_expr_wrapper_return const_expr_wrapper428 =null;

        ObjcmParser.a_started_return a_started429 =null;


        Object string_literal419_tree=null;
        Object L_BR424_tree=null;
        Object R_BR426_tree=null;

        try {
            // Objcm.g:739:2: ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR classical_expr_wrp R_BR ( id_part_end )? | const_expr_wrapper | a_started )
            int alt110=5;
            switch ( input.LA(1) ) {
            case ID:
            case 182:
            case 185:
            case 193:
            case 196:
            case 201:
                {
                alt110=1;
                }
                break;
            case L_KBR:
                {
                alt110=2;
                }
                break;
            case L_BR:
                {
                alt110=3;
                }
                break;
            case NUMBER:
            case STRING_LITERAL:
            case STRING_LITERAL2:
            case STRING_LITERAL3:
            case 179:
            case 195:
                {
                alt110=4;
                }
                break;
            case 166:
            case 173:
            case 175:
                {
                alt110=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }

            switch (alt110) {
                case 1 :
                    // Objcm.g:739:5: ( 'unsigned' )? object_name ( generic )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:739:5: ( 'unsigned' )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==201) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // Objcm.g:739:5: 'unsigned'
                            {
                            string_literal419=(Token)match(input,201,FOLLOW_201_in_object_wrapped23869); 
                            string_literal419_tree = 
                            (Object)adaptor.create(string_literal419)
                            ;
                            adaptor.addChild(root_0, string_literal419_tree);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_object_name_in_object_wrapped23872);
                    object_name420=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name420.getTree());

                    // Objcm.g:739:29: ( generic )?
                    int alt107=2;
                    alt107 = dfa107.predict(input);
                    switch (alt107) {
                        case 1 :
                            // Objcm.g:739:29: generic
                            {
                            pushFollow(FOLLOW_generic_in_object_wrapped23874);
                            generic421=generic();

                            state._fsp--;

                            adaptor.addChild(root_0, generic421.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:740:4: method_call_wrapper ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapped23880);
                    method_call_wrapper422=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper422.getTree());

                    // Objcm.g:740:24: ( id_part_end )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==DOT||LA108_0==163) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // Objcm.g:740:24: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23882);
                            id_part_end423=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end423.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // Objcm.g:741:4: L_BR classical_expr_wrp R_BR ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR424=(Token)match(input,L_BR,FOLLOW_L_BR_in_object_wrapped23888); 
                    L_BR424_tree = 
                    (Object)adaptor.create(L_BR424)
                    ;
                    adaptor.addChild(root_0, L_BR424_tree);


                    pushFollow(FOLLOW_classical_expr_wrp_in_object_wrapped23890);
                    classical_expr_wrp425=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp425.getTree());

                    R_BR426=(Token)match(input,R_BR,FOLLOW_R_BR_in_object_wrapped23892); 
                    R_BR426_tree = 
                    (Object)adaptor.create(R_BR426)
                    ;
                    adaptor.addChild(root_0, R_BR426_tree);


                    // Objcm.g:741:33: ( id_part_end )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==DOT||LA109_0==163) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // Objcm.g:741:33: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23894);
                            id_part_end427=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end427.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // Objcm.g:742:4: const_expr_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_wrapper_in_object_wrapped23900);
                    const_expr_wrapper428=const_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr_wrapper428.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:743:4: a_started
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_started_in_object_wrapped23905);
                    a_started429=a_started();

                    state._fsp--;

                    adaptor.addChild(root_0, a_started429.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped2"


    public static class function_brackets_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets_wrapper"
    // Objcm.g:746:1: function_brackets_wrapper : function_brackets -> ^( FUNCTION function_brackets ) ;
    public final ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper() throws RecognitionException {
        ObjcmParser.function_brackets_wrapper_return retval = new ObjcmParser.function_brackets_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.function_brackets_return function_brackets430 =null;


        RewriteRuleSubtreeStream stream_function_brackets=new RewriteRuleSubtreeStream(adaptor,"rule function_brackets");
        try {
            // Objcm.g:747:2: ( function_brackets -> ^( FUNCTION function_brackets ) )
            // Objcm.g:747:4: function_brackets
            {
            pushFollow(FOLLOW_function_brackets_in_function_brackets_wrapper3917);
            function_brackets430=function_brackets();

            state._fsp--;

            stream_function_brackets.add(function_brackets430.getTree());

            // AST REWRITE
            // elements: function_brackets
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 747:22: -> ^( FUNCTION function_brackets )
            {
                // Objcm.g:747:25: ^( FUNCTION function_brackets )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNCTION, "FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_function_brackets.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets_wrapper"


    public static class function_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets"
    // Objcm.g:749:1: function_brackets : L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.function_brackets_return function_brackets() throws RecognitionException {
        ObjcmParser.function_brackets_return retval = new ObjcmParser.function_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR431=null;
        Token COMMA433=null;
        Token R_BR435=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp432 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp434 =null;


        Object L_BR431_tree=null;
        Object COMMA433_tree=null;
        Object R_BR435_tree=null;

        try {
            // Objcm.g:750:2: ( L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR )
            // Objcm.g:750:4: L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR431=(Token)match(input,L_BR,FOLLOW_L_BR_in_function_brackets3936); 
            L_BR431_tree = 
            (Object)adaptor.create(L_BR431)
            ;
            adaptor.addChild(root_0, L_BR431_tree);


            // Objcm.g:750:9: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==ASTERISK||LA112_0==ID||LA112_0==L_AND||LA112_0==L_BR||LA112_0==L_KBR||LA112_0==L_MINUS||LA112_0==L_MINUS_MINUS||LA112_0==L_NOT||LA112_0==L_PLUS||LA112_0==L_PLUS_PLUS||LA112_0==L_TILDA||LA112_0==NUMBER||LA112_0==SIZEOF||(LA112_0 >= STRING_LITERAL && LA112_0 <= STRING_LITERAL3)||LA112_0==166||LA112_0==173||LA112_0==175||LA112_0==179||LA112_0==182||LA112_0==185||LA112_0==193||(LA112_0 >= 195 && LA112_0 <= 196)||LA112_0==201) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // Objcm.g:750:10: classical_expr_wrp ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets3939);
                    classical_expr_wrp432=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp432.getTree());

                    // Objcm.g:750:29: ( COMMA classical_expr_wrp )*
                    loop111:
                    do {
                        int alt111=2;
                        int LA111_0 = input.LA(1);

                        if ( (LA111_0==COMMA) ) {
                            alt111=1;
                        }


                        switch (alt111) {
                    	case 1 :
                    	    // Objcm.g:750:30: COMMA classical_expr_wrp
                    	    {
                    	    COMMA433=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_brackets3942); 
                    	    COMMA433_tree = 
                    	    (Object)adaptor.create(COMMA433)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA433_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets3944);
                    	    classical_expr_wrp434=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp434.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop111;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR435=(Token)match(input,R_BR,FOLLOW_R_BR_in_function_brackets3950); 
            R_BR435_tree = 
            (Object)adaptor.create(R_BR435)
            ;
            adaptor.addChild(root_0, R_BR435_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets"


    public static class index_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_wrapper"
    // Objcm.g:752:1: index_wrapper : index -> ^( INDEX index ) ;
    public final ObjcmParser.index_wrapper_return index_wrapper() throws RecognitionException {
        ObjcmParser.index_wrapper_return retval = new ObjcmParser.index_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.index_return index436 =null;


        RewriteRuleSubtreeStream stream_index=new RewriteRuleSubtreeStream(adaptor,"rule index");
        try {
            // Objcm.g:753:2: ( index -> ^( INDEX index ) )
            // Objcm.g:753:4: index
            {
            pushFollow(FOLLOW_index_in_index_wrapper3960);
            index436=index();

            state._fsp--;

            stream_index.add(index436.getTree());

            // AST REWRITE
            // elements: index
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 753:10: -> ^( INDEX index )
            {
                // Objcm.g:753:13: ^( INDEX index )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INDEX, "INDEX")
                , root_1);

                adaptor.addChild(root_1, stream_index.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_wrapper"


    public static class index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index"
    // Objcm.g:755:1: index : L_KBR ( index_number_wrapper )? R_KBR ;
    public final ObjcmParser.index_return index() throws RecognitionException {
        ObjcmParser.index_return retval = new ObjcmParser.index_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR437=null;
        Token R_KBR439=null;
        ObjcmParser.index_number_wrapper_return index_number_wrapper438 =null;


        Object L_KBR437_tree=null;
        Object R_KBR439_tree=null;

        try {
            // Objcm.g:755:7: ( L_KBR ( index_number_wrapper )? R_KBR )
            // Objcm.g:755:9: L_KBR ( index_number_wrapper )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR437=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index3977); 
            L_KBR437_tree = 
            (Object)adaptor.create(L_KBR437)
            ;
            adaptor.addChild(root_0, L_KBR437_tree);


            // Objcm.g:755:15: ( index_number_wrapper )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==ASTERISK||LA113_0==ID||LA113_0==L_AND||LA113_0==L_BR||LA113_0==L_KBR||LA113_0==L_MINUS||LA113_0==L_MINUS_MINUS||LA113_0==L_NOT||LA113_0==L_PLUS||LA113_0==L_PLUS_PLUS||LA113_0==L_TILDA||LA113_0==NUMBER||LA113_0==SIZEOF||(LA113_0 >= STRING_LITERAL && LA113_0 <= STRING_LITERAL3)||LA113_0==166||LA113_0==173||LA113_0==175||LA113_0==179||LA113_0==182||LA113_0==185||LA113_0==193||(LA113_0 >= 195 && LA113_0 <= 196)||LA113_0==201) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // Objcm.g:755:15: index_number_wrapper
                    {
                    pushFollow(FOLLOW_index_number_wrapper_in_index3979);
                    index_number_wrapper438=index_number_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, index_number_wrapper438.getTree());

                    }
                    break;

            }


            R_KBR439=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index3982); 
            R_KBR439_tree = 
            (Object)adaptor.create(R_KBR439)
            ;
            adaptor.addChild(root_0, R_KBR439_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index"


    public static class index_number_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_number_wrapper"
    // Objcm.g:757:1: index_number_wrapper : classical_expr_wrp -> ^( INDEX_NUMBER classical_expr_wrp ) ;
    public final ObjcmParser.index_number_wrapper_return index_number_wrapper() throws RecognitionException {
        ObjcmParser.index_number_wrapper_return retval = new ObjcmParser.index_number_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp440 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:758:2: ( classical_expr_wrp -> ^( INDEX_NUMBER classical_expr_wrp ) )
            // Objcm.g:758:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_index_number_wrapper3991);
            classical_expr_wrp440=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp440.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 758:23: -> ^( INDEX_NUMBER classical_expr_wrp )
            {
                // Objcm.g:758:26: ^( INDEX_NUMBER classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INDEX_NUMBER, "INDEX_NUMBER")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_number_wrapper"


    public static class struct_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init"
    // Objcm.g:760:1: struct_init : L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init_return struct_init() throws RecognitionException {
        ObjcmParser.struct_init_return retval = new ObjcmParser.struct_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR441=null;
        Token STRUCT_PREFIX442=null;
        Token ID443=null;
        Token R_BR444=null;
        Token L_FBR445=null;
        Token COMMA447=null;
        Token R_FBR449=null;
        ObjcmParser.struct_init_line_return struct_init_line446 =null;

        ObjcmParser.struct_init_line_return struct_init_line448 =null;


        Object L_BR441_tree=null;
        Object STRUCT_PREFIX442_tree=null;
        Object ID443_tree=null;
        Object R_BR444_tree=null;
        Object L_FBR445_tree=null;
        Object COMMA447_tree=null;
        Object R_FBR449_tree=null;

        try {
            // Objcm.g:761:2: ( L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // Objcm.g:761:4: L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_BR441=(Token)match(input,L_BR,FOLLOW_L_BR_in_struct_init4008); 
            L_BR441_tree = 
            (Object)adaptor.create(L_BR441)
            ;
            adaptor.addChild(root_0, L_BR441_tree);


            // Objcm.g:761:10: ( STRUCT_PREFIX )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==STRUCT_PREFIX) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // Objcm.g:761:10: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX442=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_init4011); 
                    STRUCT_PREFIX442_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX442)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX442_tree);


                    }
                    break;

            }


            ID443=(Token)match(input,ID,FOLLOW_ID_in_struct_init4014); 
            ID443_tree = 
            (Object)adaptor.create(ID443)
            ;
            adaptor.addChild(root_0, ID443_tree);


            R_BR444=(Token)match(input,R_BR,FOLLOW_R_BR_in_struct_init4017); 
            R_BR444_tree = 
            (Object)adaptor.create(R_BR444)
            ;
            adaptor.addChild(root_0, R_BR444_tree);


            L_FBR445=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init4020); 
            L_FBR445_tree = 
            (Object)adaptor.create(L_FBR445)
            ;
            adaptor.addChild(root_0, L_FBR445_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init4026);
            struct_init_line446=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line446.getTree());

            // Objcm.g:762:21: ( COMMA struct_init_line )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==COMMA) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // Objcm.g:762:22: COMMA struct_init_line
            	    {
            	    COMMA447=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init4029); 
            	    COMMA447_tree = 
            	    (Object)adaptor.create(COMMA447)
            	    ;
            	    adaptor.addChild(root_0, COMMA447_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init4032);
            	    struct_init_line448=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line448.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            R_FBR449=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init4038); 
            R_FBR449_tree = 
            (Object)adaptor.create(R_FBR449)
            ;
            adaptor.addChild(root_0, R_FBR449_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init"


    public static class struct_init2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init2"
    // Objcm.g:766:1: struct_init2 : L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init2_return struct_init2() throws RecognitionException {
        ObjcmParser.struct_init2_return retval = new ObjcmParser.struct_init2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR450=null;
        Token COMMA452=null;
        Token R_FBR454=null;
        ObjcmParser.struct_init_line_return struct_init_line451 =null;

        ObjcmParser.struct_init_line_return struct_init_line453 =null;


        Object L_FBR450_tree=null;
        Object COMMA452_tree=null;
        Object R_FBR454_tree=null;

        try {
            // Objcm.g:767:2: ( L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // Objcm.g:767:4: L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR450=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init24052); 
            L_FBR450_tree = 
            (Object)adaptor.create(L_FBR450)
            ;
            adaptor.addChild(root_0, L_FBR450_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init24058);
            struct_init_line451=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line451.getTree());

            // Objcm.g:768:21: ( COMMA struct_init_line )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==COMMA) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // Objcm.g:768:22: COMMA struct_init_line
            	    {
            	    COMMA452=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init24061); 
            	    COMMA452_tree = 
            	    (Object)adaptor.create(COMMA452)
            	    ;
            	    adaptor.addChild(root_0, COMMA452_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init24064);
            	    struct_init_line453=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line453.getTree());

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            R_FBR454=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init24070); 
            R_FBR454_tree = 
            (Object)adaptor.create(R_FBR454)
            ;
            adaptor.addChild(root_0, R_FBR454_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init2"


    public static class struct_init_line_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_line"
    // Objcm.g:772:1: struct_init_line : ( struct_init_var | struct_init_expression );
    public final ObjcmParser.struct_init_line_return struct_init_line() throws RecognitionException {
        ObjcmParser.struct_init_line_return retval = new ObjcmParser.struct_init_line_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_init_var_return struct_init_var455 =null;

        ObjcmParser.struct_init_expression_return struct_init_expression456 =null;



        try {
            // Objcm.g:773:2: ( struct_init_var | struct_init_expression )
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==DOT) ) {
                alt117=1;
            }
            else if ( (LA117_0==ASTERISK||LA117_0==ID||LA117_0==L_AND||LA117_0==L_BR||LA117_0==L_KBR||LA117_0==L_MINUS||LA117_0==L_MINUS_MINUS||LA117_0==L_NOT||LA117_0==L_PLUS||LA117_0==L_PLUS_PLUS||LA117_0==L_TILDA||LA117_0==NUMBER||LA117_0==SIZEOF||(LA117_0 >= STRING_LITERAL && LA117_0 <= STRING_LITERAL3)||LA117_0==166||LA117_0==173||LA117_0==175||LA117_0==179||LA117_0==182||LA117_0==185||LA117_0==193||(LA117_0 >= 195 && LA117_0 <= 196)||LA117_0==201) ) {
                alt117=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }
            switch (alt117) {
                case 1 :
                    // Objcm.g:773:4: struct_init_var
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_var_in_struct_init_line4083);
                    struct_init_var455=struct_init_var();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_var455.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:774:4: struct_init_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_expression_in_struct_init_line4088);
                    struct_init_expression456=struct_init_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_expression456.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_line"


    public static class struct_init_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_expression"
    // Objcm.g:777:1: struct_init_expression : classical_expr_wrp ;
    public final ObjcmParser.struct_init_expression_return struct_init_expression() throws RecognitionException {
        ObjcmParser.struct_init_expression_return retval = new ObjcmParser.struct_init_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp457 =null;



        try {
            // Objcm.g:778:2: ( classical_expr_wrp )
            // Objcm.g:778:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_expression4101);
            classical_expr_wrp457=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp457.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_expression"


    public static class struct_init_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_method"
    // Objcm.g:780:1: struct_init_method : classical_expr_wrp ;
    public final ObjcmParser.struct_init_method_return struct_init_method() throws RecognitionException {
        ObjcmParser.struct_init_method_return retval = new ObjcmParser.struct_init_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp458 =null;



        try {
            // Objcm.g:781:2: ( classical_expr_wrp )
            // Objcm.g:781:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_method4112);
            classical_expr_wrp458=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp458.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_method"


    public static class struct_init_var_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_var"
    // Objcm.g:783:1: struct_init_var : ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) ;
    public final ObjcmParser.struct_init_var_return struct_init_var() throws RecognitionException {
        ObjcmParser.struct_init_var_return retval = new ObjcmParser.struct_init_var_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT459=null;
        Token L_EQ461=null;
        ObjcmParser.id_part_return id_part460 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets462 =null;

        ObjcmParser.expression_return expression463 =null;


        Object DOT459_tree=null;
        Object L_EQ461_tree=null;

        try {
            // Objcm.g:784:2: ( ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) )
            // Objcm.g:784:4: ( DOT id_part )+ L_EQ ( in_q_brackets | expression )
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:784:4: ( DOT id_part )+
            int cnt118=0;
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==DOT) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // Objcm.g:784:5: DOT id_part
            	    {
            	    DOT459=(Token)match(input,DOT,FOLLOW_DOT_in_struct_init_var4124); 
            	    DOT459_tree = 
            	    (Object)adaptor.create(DOT459)
            	    ;
            	    adaptor.addChild(root_0, DOT459_tree);


            	    pushFollow(FOLLOW_id_part_in_struct_init_var4126);
            	    id_part460=id_part();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part460.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt118 >= 1 ) break loop118;
                        EarlyExitException eee =
                            new EarlyExitException(118, input);
                        throw eee;
                }
                cnt118++;
            } while (true);


            L_EQ461=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_struct_init_var4131); 
            L_EQ461_tree = 
            (Object)adaptor.create(L_EQ461)
            ;
            adaptor.addChild(root_0, L_EQ461_tree);


            // Objcm.g:784:26: ( in_q_brackets | expression )
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==L_FBR) ) {
                alt119=1;
            }
            else if ( (LA119_0==ASTERISK||LA119_0==ID||LA119_0==L_AND||LA119_0==L_BR||LA119_0==L_KBR||LA119_0==L_MINUS||LA119_0==L_MINUS_MINUS||LA119_0==L_NOT||LA119_0==L_PLUS||LA119_0==L_PLUS_PLUS||LA119_0==L_TILDA||LA119_0==NUMBER||LA119_0==SIZEOF||(LA119_0 >= STRING_LITERAL && LA119_0 <= STRING_LITERAL3)||LA119_0==166||LA119_0==173||LA119_0==175||LA119_0==179||LA119_0==182||LA119_0==185||LA119_0==193||(LA119_0 >= 195 && LA119_0 <= 196)||LA119_0==201) ) {
                alt119=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);

                throw nvae;

            }
            switch (alt119) {
                case 1 :
                    // Objcm.g:784:27: in_q_brackets
                    {
                    pushFollow(FOLLOW_in_q_brackets_in_struct_init_var4135);
                    in_q_brackets462=in_q_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, in_q_brackets462.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:784:43: expression
                    {
                    pushFollow(FOLLOW_expression_in_struct_init_var4139);
                    expression463=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression463.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_var"


    public static class a_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_started"
    // Objcm.g:786:1: a_started : ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper );
    public final ObjcmParser.a_started_return a_started() throws RecognitionException {
        ObjcmParser.a_started_return retval = new ObjcmParser.a_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_wrapper_return a_selector_wrapper464 =null;

        ObjcmParser.a_encode_wrapper_return a_encode_wrapper465 =null;

        ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper466 =null;



        try {
            // Objcm.g:787:2: ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper )
            int alt120=3;
            switch ( input.LA(1) ) {
            case 175:
                {
                alt120=1;
                }
                break;
            case 166:
                {
                alt120=2;
                }
                break;
            case 173:
                {
                alt120=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;

            }

            switch (alt120) {
                case 1 :
                    // Objcm.g:787:4: a_selector_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_selector_wrapper_in_a_started4151);
                    a_selector_wrapper464=a_selector_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_selector_wrapper464.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:788:4: a_encode_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_encode_wrapper_in_a_started4156);
                    a_encode_wrapper465=a_encode_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_encode_wrapper465.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:789:4: a_protocol_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_protocol_wrapper_in_a_started4161);
                    a_protocol_wrapper466=a_protocol_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_protocol_wrapper466.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_started"


    public static class typeof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof"
    // Objcm.g:792:1: typeof : '__typeof__' L_BR ID R_BR ;
    public final ObjcmParser.typeof_return typeof() throws RecognitionException {
        ObjcmParser.typeof_return retval = new ObjcmParser.typeof_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal467=null;
        Token L_BR468=null;
        Token ID469=null;
        Token R_BR470=null;

        Object string_literal467_tree=null;
        Object L_BR468_tree=null;
        Object ID469_tree=null;
        Object R_BR470_tree=null;

        try {
            // Objcm.g:792:8: ( '__typeof__' L_BR ID R_BR )
            // Objcm.g:792:10: '__typeof__' L_BR ID R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal467=(Token)match(input,181,FOLLOW_181_in_typeof4171); 
            string_literal467_tree = 
            (Object)adaptor.create(string_literal467)
            ;
            adaptor.addChild(root_0, string_literal467_tree);


            L_BR468=(Token)match(input,L_BR,FOLLOW_L_BR_in_typeof4174); 
            L_BR468_tree = 
            (Object)adaptor.create(L_BR468)
            ;
            adaptor.addChild(root_0, L_BR468_tree);


            ID469=(Token)match(input,ID,FOLLOW_ID_in_typeof4177); 
            ID469_tree = 
            (Object)adaptor.create(ID469)
            ;
            adaptor.addChild(root_0, ID469_tree);


            R_BR470=(Token)match(input,R_BR,FOLLOW_R_BR_in_typeof4180); 
            R_BR470_tree = 
            (Object)adaptor.create(R_BR470)
            ;
            adaptor.addChild(root_0, R_BR470_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof"


    public static class a_selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_wrapper"
    // Objcm.g:794:1: a_selector_wrapper : a_selector -> ^( SELECTOR a_selector ) ;
    public final ObjcmParser.a_selector_wrapper_return a_selector_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_wrapper_return retval = new ObjcmParser.a_selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_return a_selector471 =null;


        RewriteRuleSubtreeStream stream_a_selector=new RewriteRuleSubtreeStream(adaptor,"rule a_selector");
        try {
            // Objcm.g:795:2: ( a_selector -> ^( SELECTOR a_selector ) )
            // Objcm.g:795:4: a_selector
            {
            pushFollow(FOLLOW_a_selector_in_a_selector_wrapper4191);
            a_selector471=a_selector();

            state._fsp--;

            stream_a_selector.add(a_selector471.getTree());

            // AST REWRITE
            // elements: a_selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 795:15: -> ^( SELECTOR a_selector )
            {
                // Objcm.g:795:18: ^( SELECTOR a_selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR, "SELECTOR")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_wrapper"


    public static class a_selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector"
    // Objcm.g:797:1: a_selector : '@selector' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_selector_return a_selector() throws RecognitionException {
        ObjcmParser.a_selector_return retval = new ObjcmParser.a_selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal472=null;
        Token L_BR473=null;
        Token R_BR475=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper474 =null;


        Object string_literal472_tree=null;
        Object L_BR473_tree=null;
        Object R_BR475_tree=null;

        try {
            // Objcm.g:797:11: ( '@selector' L_BR a_selector_value_wrapper R_BR )
            // Objcm.g:797:13: '@selector' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal472=(Token)match(input,175,FOLLOW_175_in_a_selector4208); 
            string_literal472_tree = 
            (Object)adaptor.create(string_literal472)
            ;
            adaptor.addChild(root_0, string_literal472_tree);


            L_BR473=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_selector4210); 
            L_BR473_tree = 
            (Object)adaptor.create(L_BR473)
            ;
            adaptor.addChild(root_0, L_BR473_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_selector4212);
            a_selector_value_wrapper474=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper474.getTree());

            R_BR475=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_selector4214); 
            R_BR475_tree = 
            (Object)adaptor.create(R_BR475)
            ;
            adaptor.addChild(root_0, R_BR475_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector"


    public static class a_protocol_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol_wrapper"
    // Objcm.g:799:1: a_protocol_wrapper : a_protocol -> ^( PROTOCOL a_protocol ) ;
    public final ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper() throws RecognitionException {
        ObjcmParser.a_protocol_wrapper_return retval = new ObjcmParser.a_protocol_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_protocol_return a_protocol476 =null;


        RewriteRuleSubtreeStream stream_a_protocol=new RewriteRuleSubtreeStream(adaptor,"rule a_protocol");
        try {
            // Objcm.g:800:2: ( a_protocol -> ^( PROTOCOL a_protocol ) )
            // Objcm.g:800:4: a_protocol
            {
            pushFollow(FOLLOW_a_protocol_in_a_protocol_wrapper4224);
            a_protocol476=a_protocol();

            state._fsp--;

            stream_a_protocol.add(a_protocol476.getTree());

            // AST REWRITE
            // elements: a_protocol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 800:15: -> ^( PROTOCOL a_protocol )
            {
                // Objcm.g:800:18: ^( PROTOCOL a_protocol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_a_protocol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol_wrapper"


    public static class a_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol"
    // Objcm.g:802:1: a_protocol : '@protocol' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_protocol_return a_protocol() throws RecognitionException {
        ObjcmParser.a_protocol_return retval = new ObjcmParser.a_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal477=null;
        Token L_BR478=null;
        Token R_BR480=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper479 =null;


        Object string_literal477_tree=null;
        Object L_BR478_tree=null;
        Object R_BR480_tree=null;

        try {
            // Objcm.g:803:2: ( '@protocol' L_BR a_selector_value_wrapper R_BR )
            // Objcm.g:803:4: '@protocol' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal477=(Token)match(input,173,FOLLOW_173_in_a_protocol4242); 
            string_literal477_tree = 
            (Object)adaptor.create(string_literal477)
            ;
            adaptor.addChild(root_0, string_literal477_tree);


            L_BR478=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_protocol4244); 
            L_BR478_tree = 
            (Object)adaptor.create(L_BR478)
            ;
            adaptor.addChild(root_0, L_BR478_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_protocol4246);
            a_selector_value_wrapper479=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper479.getTree());

            R_BR480=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_protocol4248); 
            R_BR480_tree = 
            (Object)adaptor.create(R_BR480)
            ;
            adaptor.addChild(root_0, R_BR480_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol"


    public static class a_encode_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode_wrapper"
    // Objcm.g:805:1: a_encode_wrapper : a_encode -> ^( ENCODE a_encode ) ;
    public final ObjcmParser.a_encode_wrapper_return a_encode_wrapper() throws RecognitionException {
        ObjcmParser.a_encode_wrapper_return retval = new ObjcmParser.a_encode_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_encode_return a_encode481 =null;


        RewriteRuleSubtreeStream stream_a_encode=new RewriteRuleSubtreeStream(adaptor,"rule a_encode");
        try {
            // Objcm.g:806:2: ( a_encode -> ^( ENCODE a_encode ) )
            // Objcm.g:806:4: a_encode
            {
            pushFollow(FOLLOW_a_encode_in_a_encode_wrapper4258);
            a_encode481=a_encode();

            state._fsp--;

            stream_a_encode.add(a_encode481.getTree());

            // AST REWRITE
            // elements: a_encode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 806:13: -> ^( ENCODE a_encode )
            {
                // Objcm.g:806:16: ^( ENCODE a_encode )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENCODE, "ENCODE")
                , root_1);

                adaptor.addChild(root_1, stream_a_encode.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode_wrapper"


    public static class a_selector_value_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value_wrapper"
    // Objcm.g:808:1: a_selector_value_wrapper : a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) ;
    public final ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_value_wrapper_return retval = new ObjcmParser.a_selector_value_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_value_return a_selector_value482 =null;


        RewriteRuleSubtreeStream stream_a_selector_value=new RewriteRuleSubtreeStream(adaptor,"rule a_selector_value");
        try {
            // Objcm.g:809:2: ( a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) )
            // Objcm.g:809:4: a_selector_value
            {
            pushFollow(FOLLOW_a_selector_value_in_a_selector_value_wrapper4275);
            a_selector_value482=a_selector_value();

            state._fsp--;

            stream_a_selector_value.add(a_selector_value482.getTree());

            // AST REWRITE
            // elements: a_selector_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 809:21: -> ^( SELECTOR_VALUE a_selector_value )
            {
                // Objcm.g:809:24: ^( SELECTOR_VALUE a_selector_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR_VALUE, "SELECTOR_VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value_wrapper"


    public static class a_selector_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value"
    // Objcm.g:811:1: a_selector_value : sel_id ( COLON ( sel_id COLON )* )? ;
    public final ObjcmParser.a_selector_value_return a_selector_value() throws RecognitionException {
        ObjcmParser.a_selector_value_return retval = new ObjcmParser.a_selector_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON484=null;
        Token COLON486=null;
        ObjcmParser.sel_id_return sel_id483 =null;

        ObjcmParser.sel_id_return sel_id485 =null;


        Object COLON484_tree=null;
        Object COLON486_tree=null;

        try {
            // Objcm.g:812:2: ( sel_id ( COLON ( sel_id COLON )* )? )
            // Objcm.g:812:5: sel_id ( COLON ( sel_id COLON )* )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sel_id_in_a_selector_value4294);
            sel_id483=sel_id();

            state._fsp--;

            adaptor.addChild(root_0, sel_id483.getTree());

            // Objcm.g:812:13: ( COLON ( sel_id COLON )* )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==COLON) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // Objcm.g:812:14: COLON ( sel_id COLON )*
                    {
                    COLON484=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4298); 
                    COLON484_tree = 
                    (Object)adaptor.create(COLON484)
                    ;
                    adaptor.addChild(root_0, COLON484_tree);


                    // Objcm.g:812:21: ( sel_id COLON )*
                    loop121:
                    do {
                        int alt121=2;
                        int LA121_0 = input.LA(1);

                        if ( (LA121_0==ID||LA121_0==182||LA121_0==185||LA121_0==196) ) {
                            alt121=1;
                        }


                        switch (alt121) {
                    	case 1 :
                    	    // Objcm.g:812:22: sel_id COLON
                    	    {
                    	    pushFollow(FOLLOW_sel_id_in_a_selector_value4302);
                    	    sel_id485=sel_id();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, sel_id485.getTree());

                    	    COLON486=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4305); 
                    	    COLON486_tree = 
                    	    (Object)adaptor.create(COLON486)
                    	    ;
                    	    adaptor.addChild(root_0, COLON486_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop121;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value"


    public static class sel_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sel_id"
    // Objcm.g:814:1: sel_id : ( ID | property );
    public final ObjcmParser.sel_id_return sel_id() throws RecognitionException {
        ObjcmParser.sel_id_return retval = new ObjcmParser.sel_id_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID487=null;
        ObjcmParser.property_return property488 =null;


        Object ID487_tree=null;

        try {
            // Objcm.g:814:8: ( ID | property )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==ID) ) {
                alt123=1;
            }
            else if ( (LA123_0==182||LA123_0==185||LA123_0==196) ) {
                alt123=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;

            }
            switch (alt123) {
                case 1 :
                    // Objcm.g:814:10: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID487=(Token)match(input,ID,FOLLOW_ID_in_sel_id4318); 
                    ID487_tree = 
                    (Object)adaptor.create(ID487)
                    ;
                    adaptor.addChild(root_0, ID487_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:815:4: property
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_property_in_sel_id4323);
                    property488=property();

                    state._fsp--;

                    adaptor.addChild(root_0, property488.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sel_id"


    public static class a_encode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode"
    // Objcm.g:818:1: a_encode : '@encode' L_BR (~ ( R_BR ) )+ R_BR ;
    public final ObjcmParser.a_encode_return a_encode() throws RecognitionException {
        ObjcmParser.a_encode_return retval = new ObjcmParser.a_encode_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal489=null;
        Token L_BR490=null;
        Token set491=null;
        Token R_BR492=null;

        Object string_literal489_tree=null;
        Object L_BR490_tree=null;
        Object set491_tree=null;
        Object R_BR492_tree=null;

        try {
            // Objcm.g:818:9: ( '@encode' L_BR (~ ( R_BR ) )+ R_BR )
            // Objcm.g:818:11: '@encode' L_BR (~ ( R_BR ) )+ R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal489=(Token)match(input,166,FOLLOW_166_in_a_encode4333); 
            string_literal489_tree = 
            (Object)adaptor.create(string_literal489)
            ;
            adaptor.addChild(root_0, string_literal489_tree);


            L_BR490=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_encode4335); 
            L_BR490_tree = 
            (Object)adaptor.create(L_BR490)
            ;
            adaptor.addChild(root_0, L_BR490_tree);


            // Objcm.g:818:26: (~ ( R_BR ) )+
            int cnt124=0;
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( ((LA124_0 >= ARRAY_INIT && LA124_0 <= RETURN_STMT)||(LA124_0 >= R_FBR && LA124_0 <= 202)) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // Objcm.g:
            	    {
            	    set491=(Token)input.LT(1);

            	    if ( (input.LA(1) >= ARRAY_INIT && input.LA(1) <= RETURN_STMT)||(input.LA(1) >= R_FBR && input.LA(1) <= 202) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set491)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt124 >= 1 ) break loop124;
                        EarlyExitException eee =
                            new EarlyExitException(124, input);
                        throw eee;
                }
                cnt124++;
            } while (true);


            R_BR492=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_encode4343); 
            R_BR492_tree = 
            (Object)adaptor.create(R_BR492)
            ;
            adaptor.addChild(root_0, R_BR492_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode"


    public static class const_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr_wrapper"
    // Objcm.g:820:1: const_expr_wrapper : const_expr -> ^( CONST_EXPR const_expr ) ;
    public final ObjcmParser.const_expr_wrapper_return const_expr_wrapper() throws RecognitionException {
        ObjcmParser.const_expr_wrapper_return retval = new ObjcmParser.const_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.const_expr_return const_expr493 =null;


        RewriteRuleSubtreeStream stream_const_expr=new RewriteRuleSubtreeStream(adaptor,"rule const_expr");
        try {
            // Objcm.g:821:2: ( const_expr -> ^( CONST_EXPR const_expr ) )
            // Objcm.g:821:4: const_expr
            {
            pushFollow(FOLLOW_const_expr_in_const_expr_wrapper4352);
            const_expr493=const_expr();

            state._fsp--;

            stream_const_expr.add(const_expr493.getTree());

            // AST REWRITE
            // elements: const_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 821:15: -> ^( CONST_EXPR const_expr )
            {
                // Objcm.g:821:18: ^( CONST_EXPR const_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONST_EXPR, "CONST_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_const_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr_wrapper"


    public static class const_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // Objcm.g:823:1: const_expr : ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt );
    public final ObjcmParser.const_expr_return const_expr() throws RecognitionException {
        ObjcmParser.const_expr_return retval = new ObjcmParser.const_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NUMBER494=null;
        Token STRING_LITERAL495=null;
        Token STRING_LITERAL2496=null;
        Token STRING_LITERAL3497=null;
        ObjcmParser.null_stmt_return null_stmt498 =null;


        Object NUMBER494_tree=null;
        Object STRING_LITERAL495_tree=null;
        Object STRING_LITERAL2496_tree=null;
        Object STRING_LITERAL3497_tree=null;

        try {
            // Objcm.g:824:2: ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt )
            int alt125=5;
            switch ( input.LA(1) ) {
            case NUMBER:
                {
                alt125=1;
                }
                break;
            case STRING_LITERAL:
                {
                alt125=2;
                }
                break;
            case STRING_LITERAL2:
                {
                alt125=3;
                }
                break;
            case STRING_LITERAL3:
                {
                alt125=4;
                }
                break;
            case 179:
            case 195:
                {
                alt125=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;

            }

            switch (alt125) {
                case 1 :
                    // Objcm.g:824:5: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER494=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_const_expr4371); 
                    NUMBER494_tree = 
                    (Object)adaptor.create(NUMBER494)
                    ;
                    adaptor.addChild(root_0, NUMBER494_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:824:14: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL495=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_const_expr4375); 
                    STRING_LITERAL495_tree = 
                    (Object)adaptor.create(STRING_LITERAL495)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL495_tree);


                    }
                    break;
                case 3 :
                    // Objcm.g:824:31: STRING_LITERAL2
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL2496=(Token)match(input,STRING_LITERAL2,FOLLOW_STRING_LITERAL2_in_const_expr4379); 
                    STRING_LITERAL2496_tree = 
                    (Object)adaptor.create(STRING_LITERAL2496)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL2496_tree);


                    }
                    break;
                case 4 :
                    // Objcm.g:824:49: STRING_LITERAL3
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL3497=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_const_expr4383); 
                    STRING_LITERAL3497_tree = 
                    (Object)adaptor.create(STRING_LITERAL3497)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL3497_tree);


                    }
                    break;
                case 5 :
                    // Objcm.g:824:67: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_const_expr4387);
                    null_stmt498=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt498.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class string_literal3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_literal3"
    // Objcm.g:832:1: string_literal3 : STRING_LITERAL3 ;
    public final ObjcmParser.string_literal3_return string_literal3() throws RecognitionException {
        ObjcmParser.string_literal3_return retval = new ObjcmParser.string_literal3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL3499=null;

        Object STRING_LITERAL3499_tree=null;

        try {
            // Objcm.g:833:2: ( STRING_LITERAL3 )
            // Objcm.g:833:4: STRING_LITERAL3
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL3499=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_string_literal34405); 
            STRING_LITERAL3499_tree = 
            (Object)adaptor.create(STRING_LITERAL3499)
            ;
            adaptor.addChild(root_0, STRING_LITERAL3499_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_literal3"


    public static class method_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_brackets"
    // Objcm.g:835:1: method_brackets : L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.method_brackets_return method_brackets() throws RecognitionException {
        ObjcmParser.method_brackets_return retval = new ObjcmParser.method_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR500=null;
        Token COMMA502=null;
        Token R_BR504=null;
        ObjcmParser.expression_return expression501 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp503 =null;


        Object L_BR500_tree=null;
        Object COMMA502_tree=null;
        Object R_BR504_tree=null;

        try {
            // Objcm.g:836:2: ( L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR )
            // Objcm.g:836:4: L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR500=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_brackets4415); 
            L_BR500_tree = 
            (Object)adaptor.create(L_BR500)
            ;
            adaptor.addChild(root_0, L_BR500_tree);


            // Objcm.g:836:10: ( expression ( COMMA classical_expr_wrp )* )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==ASTERISK||LA127_0==ID||LA127_0==L_AND||LA127_0==L_BR||LA127_0==L_KBR||LA127_0==L_MINUS||LA127_0==L_MINUS_MINUS||LA127_0==L_NOT||LA127_0==L_PLUS||LA127_0==L_PLUS_PLUS||LA127_0==L_TILDA||LA127_0==NUMBER||LA127_0==SIZEOF||(LA127_0 >= STRING_LITERAL && LA127_0 <= STRING_LITERAL3)||LA127_0==166||LA127_0==173||LA127_0==175||LA127_0==179||LA127_0==182||LA127_0==185||LA127_0==193||(LA127_0 >= 195 && LA127_0 <= 196)||LA127_0==201) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // Objcm.g:836:11: expression ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_expression_in_method_brackets4419);
                    expression501=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression501.getTree());

                    // Objcm.g:836:23: ( COMMA classical_expr_wrp )*
                    loop126:
                    do {
                        int alt126=2;
                        int LA126_0 = input.LA(1);

                        if ( (LA126_0==COMMA) ) {
                            alt126=1;
                        }


                        switch (alt126) {
                    	case 1 :
                    	    // Objcm.g:836:24: COMMA classical_expr_wrp
                    	    {
                    	    COMMA502=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_brackets4423); 
                    	    COMMA502_tree = 
                    	    (Object)adaptor.create(COMMA502)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA502_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_method_brackets4426);
                    	    classical_expr_wrp503=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp503.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop126;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR504=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_brackets4432); 
            R_BR504_tree = 
            (Object)adaptor.create(R_BR504)
            ;
            adaptor.addChild(root_0, R_BR504_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_brackets"


    public static class func_pointer1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer1"
    // Objcm.g:838:1: func_pointer1 : type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? ;
    public final ObjcmParser.func_pointer1_return func_pointer1() throws RecognitionException {
        ObjcmParser.func_pointer1_return retval = new ObjcmParser.func_pointer1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK506=null;
        Token L_BR507=null;
        Token ASTERISK508=null;
        Token R_BR510=null;
        ObjcmParser.type_internal_return type_internal505 =null;

        ObjcmParser.type_internal_return type_internal509 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params511 =null;


        Object ASTERISK506_tree=null;
        Object L_BR507_tree=null;
        Object ASTERISK508_tree=null;
        Object R_BR510_tree=null;

        try {
            // Objcm.g:839:2: ( type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? )
            // Objcm.g:839:4: type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_func_pointer14442);
            type_internal505=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal505.getTree());

            // Objcm.g:839:19: ( ASTERISK )?
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==ASTERISK) ) {
                alt128=1;
            }
            switch (alt128) {
                case 1 :
                    // Objcm.g:839:19: ASTERISK
                    {
                    ASTERISK506=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14445); 
                    ASTERISK506_tree = 
                    (Object)adaptor.create(ASTERISK506)
                    ;
                    adaptor.addChild(root_0, ASTERISK506_tree);


                    }
                    break;

            }


            L_BR507=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer14448); 
            L_BR507_tree = 
            (Object)adaptor.create(L_BR507)
            ;
            adaptor.addChild(root_0, L_BR507_tree);


            // Objcm.g:839:34: ( ASTERISK )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==ASTERISK) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // Objcm.g:839:34: ASTERISK
                    {
                    ASTERISK508=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14450); 
                    ASTERISK508_tree = 
                    (Object)adaptor.create(ASTERISK508)
                    ;
                    adaptor.addChild(root_0, ASTERISK508_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_func_pointer14453);
            type_internal509=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal509.getTree());

            R_BR510=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer14456); 
            R_BR510_tree = 
            (Object)adaptor.create(R_BR510)
            ;
            adaptor.addChild(root_0, R_BR510_tree);


            // Objcm.g:839:65: ( func_pointer_params )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==L_BR) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // Objcm.g:839:65: func_pointer_params
                    {
                    pushFollow(FOLLOW_func_pointer_params_in_func_pointer14459);
                    func_pointer_params511=func_pointer_params();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer_params511.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer1"


    public static class func_pointer2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer2"
    // Objcm.g:842:1: func_pointer2 : L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR ;
    public final ObjcmParser.func_pointer2_return func_pointer2() throws RecognitionException {
        ObjcmParser.func_pointer2_return retval = new ObjcmParser.func_pointer2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR512=null;
        Token L_BR514=null;
        Token ASTERISK515=null;
        Token R_BR516=null;
        Token R_BR518=null;
        ObjcmParser.type_internal_return type_internal513 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params517 =null;


        Object L_BR512_tree=null;
        Object L_BR514_tree=null;
        Object ASTERISK515_tree=null;
        Object R_BR516_tree=null;
        Object R_BR518_tree=null;

        try {
            // Objcm.g:843:2: ( L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR )
            // Objcm.g:843:4: L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR512=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24472); 
            L_BR512_tree = 
            (Object)adaptor.create(L_BR512)
            ;
            adaptor.addChild(root_0, L_BR512_tree);


            pushFollow(FOLLOW_type_internal_in_func_pointer24475);
            type_internal513=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal513.getTree());

            L_BR514=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24477); 
            L_BR514_tree = 
            (Object)adaptor.create(L_BR514)
            ;
            adaptor.addChild(root_0, L_BR514_tree);


            ASTERISK515=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer24480); 
            ASTERISK515_tree = 
            (Object)adaptor.create(ASTERISK515)
            ;
            adaptor.addChild(root_0, ASTERISK515_tree);


            R_BR516=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24483); 
            R_BR516_tree = 
            (Object)adaptor.create(R_BR516)
            ;
            adaptor.addChild(root_0, R_BR516_tree);


            pushFollow(FOLLOW_func_pointer_params_in_func_pointer24486);
            func_pointer_params517=func_pointer_params();

            state._fsp--;

            adaptor.addChild(root_0, func_pointer_params517.getTree());

            R_BR518=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24489); 
            R_BR518_tree = 
            (Object)adaptor.create(R_BR518)
            ;
            adaptor.addChild(root_0, R_BR518_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer2"


    public static class func_pointer_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_params"
    // Objcm.g:846:1: func_pointer_params : L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR ;
    public final ObjcmParser.func_pointer_params_return func_pointer_params() throws RecognitionException {
        ObjcmParser.func_pointer_params_return retval = new ObjcmParser.func_pointer_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR519=null;
        Token ID520=null;
        Token ASTERISK521=null;
        Token COMMA522=null;
        Token ID523=null;
        Token ASTERISK524=null;
        Token R_BR525=null;

        Object L_BR519_tree=null;
        Object ID520_tree=null;
        Object ASTERISK521_tree=null;
        Object COMMA522_tree=null;
        Object ID523_tree=null;
        Object ASTERISK524_tree=null;
        Object R_BR525_tree=null;

        try {
            // Objcm.g:847:2: ( L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR )
            // Objcm.g:847:4: L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR519=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer_params4502); 
            L_BR519_tree = 
            (Object)adaptor.create(L_BR519)
            ;
            adaptor.addChild(root_0, L_BR519_tree);


            ID520=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4505); 
            ID520_tree = 
            (Object)adaptor.create(ID520)
            ;
            adaptor.addChild(root_0, ID520_tree);


            // Objcm.g:847:14: ( ASTERISK )*
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);

                if ( (LA131_0==ASTERISK) ) {
                    alt131=1;
                }


                switch (alt131) {
            	case 1 :
            	    // Objcm.g:847:14: ASTERISK
            	    {
            	    ASTERISK521=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4508); 
            	    ASTERISK521_tree = 
            	    (Object)adaptor.create(ASTERISK521)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK521_tree);


            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);


            // Objcm.g:847:24: ( COMMA ID ( ASTERISK )* )*
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==COMMA) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // Objcm.g:847:25: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA522=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_pointer_params4512); 
            	    COMMA522_tree = 
            	    (Object)adaptor.create(COMMA522)
            	    ;
            	    adaptor.addChild(root_0, COMMA522_tree);


            	    ID523=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4515); 
            	    ID523_tree = 
            	    (Object)adaptor.create(ID523)
            	    ;
            	    adaptor.addChild(root_0, ID523_tree);


            	    // Objcm.g:847:36: ( ASTERISK )*
            	    loop132:
            	    do {
            	        int alt132=2;
            	        int LA132_0 = input.LA(1);

            	        if ( (LA132_0==ASTERISK) ) {
            	            alt132=1;
            	        }


            	        switch (alt132) {
            	    	case 1 :
            	    	    // Objcm.g:847:36: ASTERISK
            	    	    {
            	    	    ASTERISK524=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4518); 
            	    	    ASTERISK524_tree = 
            	    	    (Object)adaptor.create(ASTERISK524)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK524_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop132;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);


            R_BR525=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer_params4523); 
            R_BR525_tree = 
            (Object)adaptor.create(R_BR525)
            ;
            adaptor.addChild(root_0, R_BR525_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_params"


    public static class method_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_start"
    // Objcm.g:849:1: method_start : ID ( method_brackets )? ;
    public final ObjcmParser.method_start_return method_start() throws RecognitionException {
        ObjcmParser.method_start_return retval = new ObjcmParser.method_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID526=null;
        ObjcmParser.method_brackets_return method_brackets527 =null;


        Object ID526_tree=null;

        try {
            // Objcm.g:850:2: ( ID ( method_brackets )? )
            // Objcm.g:850:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID526=(Token)match(input,ID,FOLLOW_ID_in_method_start4534); 
            ID526_tree = 
            (Object)adaptor.create(ID526)
            ;
            adaptor.addChild(root_0, ID526_tree);


            // Objcm.g:850:7: ( method_brackets )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==L_BR) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // Objcm.g:850:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_method_start4536);
                    method_brackets527=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets527.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_start"


    public static class in_q_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_q_brackets"
    // Objcm.g:852:1: in_q_brackets : L_FBR q_brackets_source R_FBR ;
    public final ObjcmParser.in_q_brackets_return in_q_brackets() throws RecognitionException {
        ObjcmParser.in_q_brackets_return retval = new ObjcmParser.in_q_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR528=null;
        Token R_FBR530=null;
        ObjcmParser.q_brackets_source_return q_brackets_source529 =null;


        Object L_FBR528_tree=null;
        Object R_FBR530_tree=null;

        try {
            // Objcm.g:853:2: ( L_FBR q_brackets_source R_FBR )
            // Objcm.g:853:4: L_FBR q_brackets_source R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR528=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_in_q_brackets4547); 
            L_FBR528_tree = 
            (Object)adaptor.create(L_FBR528)
            ;
            adaptor.addChild(root_0, L_FBR528_tree);


            pushFollow(FOLLOW_q_brackets_source_in_in_q_brackets4550);
            q_brackets_source529=q_brackets_source();

            state._fsp--;

            adaptor.addChild(root_0, q_brackets_source529.getTree());

            R_FBR530=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_in_q_brackets4552); 
            R_FBR530_tree = 
            (Object)adaptor.create(R_FBR530)
            ;
            adaptor.addChild(root_0, R_FBR530_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_q_brackets"


    public static class q_brackets_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_brackets_source"
    // Objcm.g:856:1: q_brackets_source : ( q_source | q_br_source );
    public final ObjcmParser.q_brackets_source_return q_brackets_source() throws RecognitionException {
        ObjcmParser.q_brackets_source_return retval = new ObjcmParser.q_brackets_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.q_source_return q_source531 =null;

        ObjcmParser.q_br_source_return q_br_source532 =null;



        try {
            // Objcm.g:857:2: ( q_source | q_br_source )
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==ASTERISK||LA135_0==ID||LA135_0==L_AND||LA135_0==L_BR||LA135_0==L_KBR||LA135_0==L_MINUS||LA135_0==L_MINUS_MINUS||LA135_0==L_NOT||LA135_0==L_PLUS||LA135_0==L_PLUS_PLUS||LA135_0==L_TILDA||LA135_0==NUMBER||LA135_0==R_FBR||LA135_0==SIZEOF||(LA135_0 >= STRING_LITERAL && LA135_0 <= STRING_LITERAL3)||LA135_0==166||LA135_0==173||LA135_0==175||LA135_0==179||LA135_0==182||LA135_0==185||LA135_0==193||(LA135_0 >= 195 && LA135_0 <= 196)||LA135_0==201) ) {
                alt135=1;
            }
            else if ( (LA135_0==L_FBR) ) {
                alt135=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;

            }
            switch (alt135) {
                case 1 :
                    // Objcm.g:857:4: q_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_source_in_q_brackets_source4564);
                    q_source531=q_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_source531.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:858:4: q_br_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_br_source_in_q_brackets_source4569);
                    q_br_source532=q_br_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_br_source532.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_brackets_source"


    public static class q_br_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_br_source"
    // Objcm.g:861:1: q_br_source : in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? ;
    public final ObjcmParser.q_br_source_return q_br_source() throws RecognitionException {
        ObjcmParser.q_br_source_return retval = new ObjcmParser.q_br_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA534=null;
        Token COMMA536=null;
        ObjcmParser.in_q_brackets_return in_q_brackets533 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets535 =null;


        Object COMMA534_tree=null;
        Object COMMA536_tree=null;

        try {
            // Objcm.g:862:2: ( in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? )
            // Objcm.g:862:4: in_q_brackets ( COMMA in_q_brackets )* ( COMMA )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_in_q_brackets_in_q_br_source4582);
            in_q_brackets533=in_q_brackets();

            state._fsp--;

            adaptor.addChild(root_0, in_q_brackets533.getTree());

            // Objcm.g:862:19: ( COMMA in_q_brackets )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==COMMA) ) {
                    int LA136_1 = input.LA(2);

                    if ( (LA136_1==L_FBR) ) {
                        alt136=1;
                    }


                }


                switch (alt136) {
            	case 1 :
            	    // Objcm.g:862:20: COMMA in_q_brackets
            	    {
            	    COMMA534=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4586); 
            	    COMMA534_tree = 
            	    (Object)adaptor.create(COMMA534)
            	    ;
            	    adaptor.addChild(root_0, COMMA534_tree);


            	    pushFollow(FOLLOW_in_q_brackets_in_q_br_source4589);
            	    in_q_brackets535=in_q_brackets();

            	    state._fsp--;

            	    adaptor.addChild(root_0, in_q_brackets535.getTree());

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);


            // Objcm.g:862:43: ( COMMA )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==COMMA) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // Objcm.g:862:43: COMMA
                    {
                    COMMA536=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4593); 
                    COMMA536_tree = 
                    (Object)adaptor.create(COMMA536)
                    ;
                    adaptor.addChild(root_0, COMMA536_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_br_source"


    public static class q_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_source"
    // Objcm.g:865:1: q_source : ( expression ( COMMA expression )* )? ;
    public final ObjcmParser.q_source_return q_source() throws RecognitionException {
        ObjcmParser.q_source_return retval = new ObjcmParser.q_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA538=null;
        ObjcmParser.expression_return expression537 =null;

        ObjcmParser.expression_return expression539 =null;


        Object COMMA538_tree=null;

        try {
            // Objcm.g:865:9: ( ( expression ( COMMA expression )* )? )
            // Objcm.g:865:11: ( expression ( COMMA expression )* )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:865:11: ( expression ( COMMA expression )* )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==ASTERISK||LA139_0==ID||LA139_0==L_AND||LA139_0==L_BR||LA139_0==L_KBR||LA139_0==L_MINUS||LA139_0==L_MINUS_MINUS||LA139_0==L_NOT||LA139_0==L_PLUS||LA139_0==L_PLUS_PLUS||LA139_0==L_TILDA||LA139_0==NUMBER||LA139_0==SIZEOF||(LA139_0 >= STRING_LITERAL && LA139_0 <= STRING_LITERAL3)||LA139_0==166||LA139_0==173||LA139_0==175||LA139_0==179||LA139_0==182||LA139_0==185||LA139_0==193||(LA139_0 >= 195 && LA139_0 <= 196)||LA139_0==201) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // Objcm.g:865:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_q_source4605);
                    expression537=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression537.getTree());

                    // Objcm.g:865:24: ( COMMA expression )*
                    loop138:
                    do {
                        int alt138=2;
                        int LA138_0 = input.LA(1);

                        if ( (LA138_0==COMMA) ) {
                            alt138=1;
                        }


                        switch (alt138) {
                    	case 1 :
                    	    // Objcm.g:865:25: COMMA expression
                    	    {
                    	    COMMA538=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_source4609); 
                    	    COMMA538_tree = 
                    	    (Object)adaptor.create(COMMA538)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA538_tree);


                    	    pushFollow(FOLLOW_expression_in_q_source4612);
                    	    expression539=expression();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, expression539.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop138;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_source"


    public static class simple_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_method_call"
    // Objcm.g:868:1: simple_method_call : ID ( method_brackets )? ;
    public final ObjcmParser.simple_method_call_return simple_method_call() throws RecognitionException {
        ObjcmParser.simple_method_call_return retval = new ObjcmParser.simple_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID540=null;
        ObjcmParser.method_brackets_return method_brackets541 =null;


        Object ID540_tree=null;

        try {
            // Objcm.g:869:2: ( ID ( method_brackets )? )
            // Objcm.g:869:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID540=(Token)match(input,ID,FOLLOW_ID_in_simple_method_call4629); 
            ID540_tree = 
            (Object)adaptor.create(ID540)
            ;
            adaptor.addChild(root_0, ID540_tree);


            // Objcm.g:869:7: ( method_brackets )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==L_BR) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // Objcm.g:869:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_simple_method_call4631);
                    method_brackets541=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets541.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_method_call"


    public static class index_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_brackets"
    // Objcm.g:871:1: index_brackets : L_KBR classical_expr_wrp R_KBR ;
    public final ObjcmParser.index_brackets_return index_brackets() throws RecognitionException {
        ObjcmParser.index_brackets_return retval = new ObjcmParser.index_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR542=null;
        Token R_KBR544=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp543 =null;


        Object L_KBR542_tree=null;
        Object R_KBR544_tree=null;

        try {
            // Objcm.g:872:2: ( L_KBR classical_expr_wrp R_KBR )
            // Objcm.g:872:4: L_KBR classical_expr_wrp R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR542=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index_brackets4647); 
            L_KBR542_tree = 
            (Object)adaptor.create(L_KBR542)
            ;
            adaptor.addChild(root_0, L_KBR542_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_index_brackets4650);
            classical_expr_wrp543=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp543.getTree());

            R_KBR544=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index_brackets4652); 
            R_KBR544_tree = 
            (Object)adaptor.create(R_KBR544)
            ;
            adaptor.addChild(root_0, R_KBR544_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_brackets"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // Objcm.g:879:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcmParser.interface_declaration_wrapper_return retval = new ObjcmParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_declaration_return interface_declaration545 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // Objcm.g:880:2: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // Objcm.g:880:4: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper4666);
            interface_declaration545=interface_declaration();

            state._fsp--;

            stream_interface_declaration.add(interface_declaration545.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 880:26: -> ^( INTERFACE interface_declaration )
            {
                // Objcm.g:880:29: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // Objcm.g:882:1: interface_declaration : '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods | interface_fields )* '@end' ;
    public final ObjcmParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcmParser.interface_declaration_return retval = new ObjcmParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal546=null;
        Token string_literal553=null;
        ObjcmParser.name_return name547 =null;

        ObjcmParser.interface_category_return interface_category548 =null;

        ObjcmParser.super_class_return super_class549 =null;

        ObjcmParser.annotated_block_return annotated_block550 =null;

        ObjcmParser.interface_methods_return interface_methods551 =null;

        ObjcmParser.interface_fields_return interface_fields552 =null;


        Object string_literal546_tree=null;
        Object string_literal553_tree=null;

        try {
            // Objcm.g:883:2: ( '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods | interface_fields )* '@end' )
            // Objcm.g:883:4: '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods | interface_fields )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal546=(Token)match(input,170,FOLLOW_170_in_interface_declaration4684); 
            string_literal546_tree = 
            (Object)adaptor.create(string_literal546)
            ;
            adaptor.addChild(root_0, string_literal546_tree);


            pushFollow(FOLLOW_name_in_interface_declaration4687);
            name547=name();

            state._fsp--;

            adaptor.addChild(root_0, name547.getTree());

            // Objcm.g:883:24: ( interface_category )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==L_BR) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // Objcm.g:883:24: interface_category
                    {
                    pushFollow(FOLLOW_interface_category_in_interface_declaration4690);
                    interface_category548=interface_category();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_category548.getTree());

                    }
                    break;

            }


            // Objcm.g:883:44: ( super_class )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==COLON) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // Objcm.g:883:45: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_interface_declaration4694);
                    super_class549=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class549.getTree());

                    }
                    break;

            }


            // Objcm.g:884:3: ( annotated_block | interface_methods | interface_fields )*
            loop143:
            do {
                int alt143=4;
                switch ( input.LA(1) ) {
                case L_FBR:
                    {
                    alt143=1;
                    }
                    break;
                case ENUM_PREFIX:
                case L_MINUS:
                case L_PLUS:
                    {
                    alt143=2;
                    }
                    break;
                case ID:
                case VOID:
                case 172:
                case 201:
                    {
                    alt143=3;
                    }
                    break;

                }

                switch (alt143) {
            	case 1 :
            	    // Objcm.g:884:4: annotated_block
            	    {
            	    pushFollow(FOLLOW_annotated_block_in_interface_declaration4701);
            	    annotated_block550=annotated_block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block550.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:884:22: interface_methods
            	    {
            	    pushFollow(FOLLOW_interface_methods_in_interface_declaration4705);
            	    interface_methods551=interface_methods();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_methods551.getTree());

            	    }
            	    break;
            	case 3 :
            	    // Objcm.g:884:42: interface_fields
            	    {
            	    pushFollow(FOLLOW_interface_fields_in_interface_declaration4709);
            	    interface_fields552=interface_fields();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_fields552.getTree());

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            string_literal553=(Token)match(input,167,FOLLOW_167_in_interface_declaration4718); 
            string_literal553_tree = 
            (Object)adaptor.create(string_literal553)
            ;
            adaptor.addChild(root_0, string_literal553_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class annotated_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block"
    // Objcm.g:888:1: annotated_block : L_FBR ( annotated_block_internal )* R_FBR ;
    public final ObjcmParser.annotated_block_return annotated_block() throws RecognitionException {
        ObjcmParser.annotated_block_return retval = new ObjcmParser.annotated_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR554=null;
        Token R_FBR556=null;
        ObjcmParser.annotated_block_internal_return annotated_block_internal555 =null;


        Object L_FBR554_tree=null;
        Object R_FBR556_tree=null;

        try {
            // Objcm.g:889:2: ( L_FBR ( annotated_block_internal )* R_FBR )
            // Objcm.g:889:4: L_FBR ( annotated_block_internal )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR554=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_annotated_block4729); 
            L_FBR554_tree = 
            (Object)adaptor.create(L_FBR554)
            ;
            adaptor.addChild(root_0, L_FBR554_tree);


            // Objcm.g:890:3: ( annotated_block_internal )*
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);

                if ( (LA144_0==ID||LA144_0==VOID||LA144_0==171||LA144_0==174||(LA144_0 >= 200 && LA144_0 <= 201)) ) {
                    alt144=1;
                }


                switch (alt144) {
            	case 1 :
            	    // Objcm.g:890:3: annotated_block_internal
            	    {
            	    pushFollow(FOLLOW_annotated_block_internal_in_annotated_block4734);
            	    annotated_block_internal555=annotated_block_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block_internal555.getTree());

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);


            R_FBR556=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_annotated_block4739); 
            R_FBR556_tree = 
            (Object)adaptor.create(R_FBR556)
            ;
            adaptor.addChild(root_0, R_FBR556_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block"


    public static class annotated_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block_internal"
    // Objcm.g:894:1: annotated_block_internal : ( block_annotation | public_block_internal );
    public final ObjcmParser.annotated_block_internal_return annotated_block_internal() throws RecognitionException {
        ObjcmParser.annotated_block_internal_return retval = new ObjcmParser.annotated_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_annotation_return block_annotation557 =null;

        ObjcmParser.public_block_internal_return public_block_internal558 =null;



        try {
            // Objcm.g:895:2: ( block_annotation | public_block_internal )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==171||LA145_0==174) ) {
                alt145=1;
            }
            else if ( (LA145_0==ID||LA145_0==VOID||(LA145_0 >= 200 && LA145_0 <= 201)) ) {
                alt145=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;

            }
            switch (alt145) {
                case 1 :
                    // Objcm.g:895:4: block_annotation
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_annotation_in_annotated_block_internal4752);
                    block_annotation557=block_annotation();

                    state._fsp--;

                    adaptor.addChild(root_0, block_annotation557.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:896:5: public_block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_public_block_internal_in_annotated_block_internal4759);
                    public_block_internal558=public_block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, public_block_internal558.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block_internal"


    public static class block_annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_annotation"
    // Objcm.g:899:1: block_annotation : ( '@public' | '@private' );
    public final ObjcmParser.block_annotation_return block_annotation() throws RecognitionException {
        ObjcmParser.block_annotation_return retval = new ObjcmParser.block_annotation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set559=null;

        Object set559_tree=null;

        try {
            // Objcm.g:900:2: ( '@public' | '@private' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set559=(Token)input.LT(1);

            if ( input.LA(1)==171||input.LA(1)==174 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set559)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_annotation"


    public static class public_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "public_block_internal"
    // Objcm.g:904:1: public_block_internal : ( simple_field_declaration | union_declaration );
    public final ObjcmParser.public_block_internal_return public_block_internal() throws RecognitionException {
        ObjcmParser.public_block_internal_return retval = new ObjcmParser.public_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_field_declaration_return simple_field_declaration560 =null;

        ObjcmParser.union_declaration_return union_declaration561 =null;



        try {
            // Objcm.g:905:2: ( simple_field_declaration | union_declaration )
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==ID||LA146_0==VOID||LA146_0==201) ) {
                alt146=1;
            }
            else if ( (LA146_0==200) ) {
                alt146=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;

            }
            switch (alt146) {
                case 1 :
                    // Objcm.g:905:4: simple_field_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_field_declaration_in_public_block_internal4794);
                    simple_field_declaration560=simple_field_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, simple_field_declaration560.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:906:4: union_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_union_declaration_in_public_block_internal4799);
                    union_declaration561=union_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, union_declaration561.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "public_block_internal"


    public static class simple_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_field_declaration"
    // Objcm.g:909:1: simple_field_declaration : field_type name SEMICOLON ;
    public final ObjcmParser.simple_field_declaration_return simple_field_declaration() throws RecognitionException {
        ObjcmParser.simple_field_declaration_return retval = new ObjcmParser.simple_field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON564=null;
        ObjcmParser.field_type_return field_type562 =null;

        ObjcmParser.name_return name563 =null;


        Object SEMICOLON564_tree=null;

        try {
            // Objcm.g:910:2: ( field_type name SEMICOLON )
            // Objcm.g:910:4: field_type name SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_simple_field_declaration4811);
            field_type562=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type562.getTree());

            pushFollow(FOLLOW_name_in_simple_field_declaration4813);
            name563=name();

            state._fsp--;

            adaptor.addChild(root_0, name563.getTree());

            SEMICOLON564=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_field_declaration4816); 
            SEMICOLON564_tree = 
            (Object)adaptor.create(SEMICOLON564)
            ;
            adaptor.addChild(root_0, SEMICOLON564_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_field_declaration"


    public static class union_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_declaration"
    // Objcm.g:913:1: union_declaration : 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON ;
    public final ObjcmParser.union_declaration_return union_declaration() throws RecognitionException {
        ObjcmParser.union_declaration_return retval = new ObjcmParser.union_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal565=null;
        Token L_FBR566=null;
        Token R_FBR568=null;
        Token ID569=null;
        Token SEMICOLON570=null;
        ObjcmParser.simple_field_declaration_return simple_field_declaration567 =null;


        Object string_literal565_tree=null;
        Object L_FBR566_tree=null;
        Object R_FBR568_tree=null;
        Object ID569_tree=null;
        Object SEMICOLON570_tree=null;

        try {
            // Objcm.g:914:2: ( 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON )
            // Objcm.g:914:4: 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal565=(Token)match(input,200,FOLLOW_200_in_union_declaration4829); 
            string_literal565_tree = 
            (Object)adaptor.create(string_literal565)
            ;
            adaptor.addChild(root_0, string_literal565_tree);


            L_FBR566=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_union_declaration4832); 
            L_FBR566_tree = 
            (Object)adaptor.create(L_FBR566)
            ;
            adaptor.addChild(root_0, L_FBR566_tree);


            // Objcm.g:915:4: ( simple_field_declaration )+
            int cnt147=0;
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==ID||LA147_0==VOID||LA147_0==201) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    // Objcm.g:915:4: simple_field_declaration
            	    {
            	    pushFollow(FOLLOW_simple_field_declaration_in_union_declaration4838);
            	    simple_field_declaration567=simple_field_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_field_declaration567.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt147 >= 1 ) break loop147;
                        EarlyExitException eee =
                            new EarlyExitException(147, input);
                        throw eee;
                }
                cnt147++;
            } while (true);


            R_FBR568=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_union_declaration4843); 
            R_FBR568_tree = 
            (Object)adaptor.create(R_FBR568)
            ;
            adaptor.addChild(root_0, R_FBR568_tree);


            ID569=(Token)match(input,ID,FOLLOW_ID_in_union_declaration4846); 
            ID569_tree = 
            (Object)adaptor.create(ID569)
            ;
            adaptor.addChild(root_0, ID569_tree);


            SEMICOLON570=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_union_declaration4849); 
            SEMICOLON570_tree = 
            (Object)adaptor.create(SEMICOLON570)
            ;
            adaptor.addChild(root_0, SEMICOLON570_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_declaration"


    public static class super_class_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "super_class"
    // Objcm.g:919:1: super_class : COLON ID -> ^( SUPER_CLASS ID ) ;
    public final ObjcmParser.super_class_return super_class() throws RecognitionException {
        ObjcmParser.super_class_return retval = new ObjcmParser.super_class_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON571=null;
        Token ID572=null;

        Object COLON571_tree=null;
        Object ID572_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:920:2: ( COLON ID -> ^( SUPER_CLASS ID ) )
            // Objcm.g:920:4: COLON ID
            {
            COLON571=(Token)match(input,COLON,FOLLOW_COLON_in_super_class4863);  
            stream_COLON.add(COLON571);


            ID572=(Token)match(input,ID,FOLLOW_ID_in_super_class4866);  
            stream_ID.add(ID572);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 920:15: -> ^( SUPER_CLASS ID )
            {
                // Objcm.g:920:18: ^( SUPER_CLASS ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPER_CLASS, "SUPER_CLASS")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "super_class"


    public static class interface_category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_category"
    // Objcm.g:922:1: interface_category : L_BR ( ID )? R_BR -> ^( CATEGORY L_BR ( ID )? R_BR ) ;
    public final ObjcmParser.interface_category_return interface_category() throws RecognitionException {
        ObjcmParser.interface_category_return retval = new ObjcmParser.interface_category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR573=null;
        Token ID574=null;
        Token R_BR575=null;

        Object L_BR573_tree=null;
        Object ID574_tree=null;
        Object R_BR575_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");

        try {
            // Objcm.g:923:2: ( L_BR ( ID )? R_BR -> ^( CATEGORY L_BR ( ID )? R_BR ) )
            // Objcm.g:923:4: L_BR ( ID )? R_BR
            {
            L_BR573=(Token)match(input,L_BR,FOLLOW_L_BR_in_interface_category4886);  
            stream_L_BR.add(L_BR573);


            // Objcm.g:923:10: ( ID )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==ID) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // Objcm.g:923:10: ID
                    {
                    ID574=(Token)match(input,ID,FOLLOW_ID_in_interface_category4889);  
                    stream_ID.add(ID574);


                    }
                    break;

            }


            R_BR575=(Token)match(input,R_BR,FOLLOW_R_BR_in_interface_category4893);  
            stream_R_BR.add(R_BR575);


            // AST REWRITE
            // elements: L_BR, ID, R_BR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 923:20: -> ^( CATEGORY L_BR ( ID )? R_BR )
            {
                // Objcm.g:923:23: ^( CATEGORY L_BR ( ID )? R_BR )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_L_BR.nextNode()
                );

                // Objcm.g:923:40: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                adaptor.addChild(root_1, 
                stream_R_BR.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_category"


    public static class interface_fields_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_fields"
    // Objcm.g:925:1: interface_fields : ( interface_field_wrapper )+ ;
    public final ObjcmParser.interface_fields_return interface_fields() throws RecognitionException {
        ObjcmParser.interface_fields_return retval = new ObjcmParser.interface_fields_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_field_wrapper_return interface_field_wrapper576 =null;



        try {
            // Objcm.g:926:2: ( ( interface_field_wrapper )+ )
            // Objcm.g:926:4: ( interface_field_wrapper )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:926:4: ( interface_field_wrapper )+
            int cnt149=0;
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==172) ) {
                    alt149=1;
                }
                else if ( (LA149_0==ID||LA149_0==VOID||LA149_0==201) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // Objcm.g:926:4: interface_field_wrapper
            	    {
            	    pushFollow(FOLLOW_interface_field_wrapper_in_interface_fields4922);
            	    interface_field_wrapper576=interface_field_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_field_wrapper576.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt149 >= 1 ) break loop149;
                        EarlyExitException eee =
                            new EarlyExitException(149, input);
                        throw eee;
                }
                cnt149++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_fields"


    public static class interface_field_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_field_wrapper"
    // Objcm.g:928:1: interface_field_wrapper : interface_field -> ^( FIELD interface_field ) ;
    public final ObjcmParser.interface_field_wrapper_return interface_field_wrapper() throws RecognitionException {
        ObjcmParser.interface_field_wrapper_return retval = new ObjcmParser.interface_field_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_field_return interface_field577 =null;


        RewriteRuleSubtreeStream stream_interface_field=new RewriteRuleSubtreeStream(adaptor,"rule interface_field");
        try {
            // Objcm.g:929:2: ( interface_field -> ^( FIELD interface_field ) )
            // Objcm.g:929:4: interface_field
            {
            pushFollow(FOLLOW_interface_field_in_interface_field_wrapper4933);
            interface_field577=interface_field();

            state._fsp--;

            stream_interface_field.add(interface_field577.getTree());

            // AST REWRITE
            // elements: interface_field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 929:20: -> ^( FIELD interface_field )
            {
                // Objcm.g:929:23: ^( FIELD interface_field )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_interface_field.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_field_wrapper"


    public static class interface_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_field"
    // Objcm.g:931:1: interface_field : ( property_prefix )? interface_field_declaration ;
    public final ObjcmParser.interface_field_return interface_field() throws RecognitionException {
        ObjcmParser.interface_field_return retval = new ObjcmParser.interface_field_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.property_prefix_return property_prefix578 =null;

        ObjcmParser.interface_field_declaration_return interface_field_declaration579 =null;



        try {
            // Objcm.g:932:2: ( ( property_prefix )? interface_field_declaration )
            // Objcm.g:932:4: ( property_prefix )? interface_field_declaration
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:932:4: ( property_prefix )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==172) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // Objcm.g:932:4: property_prefix
                    {
                    pushFollow(FOLLOW_property_prefix_in_interface_field4952);
                    property_prefix578=property_prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, property_prefix578.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_interface_field_declaration_in_interface_field4955);
            interface_field_declaration579=interface_field_declaration();

            state._fsp--;

            adaptor.addChild(root_0, interface_field_declaration579.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_field"


    public static class interface_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_field_declaration"
    // Objcm.g:934:1: interface_field_declaration : field_type name SEMICOLON ;
    public final ObjcmParser.interface_field_declaration_return interface_field_declaration() throws RecognitionException {
        ObjcmParser.interface_field_declaration_return retval = new ObjcmParser.interface_field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON582=null;
        ObjcmParser.field_type_return field_type580 =null;

        ObjcmParser.name_return name581 =null;


        Object SEMICOLON582_tree=null;

        try {
            // Objcm.g:935:2: ( field_type name SEMICOLON )
            // Objcm.g:935:4: field_type name SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_interface_field_declaration4966);
            field_type580=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type580.getTree());

            pushFollow(FOLLOW_name_in_interface_field_declaration4968);
            name581=name();

            state._fsp--;

            adaptor.addChild(root_0, name581.getTree());

            SEMICOLON582=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_field_declaration4970); 
            SEMICOLON582_tree = 
            (Object)adaptor.create(SEMICOLON582)
            ;
            adaptor.addChild(root_0, SEMICOLON582_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_field_declaration"


    public static class property_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_prefix"
    // Objcm.g:937:1: property_prefix : '@property' L_BR property ( COMMA property )* R_BR ;
    public final ObjcmParser.property_prefix_return property_prefix() throws RecognitionException {
        ObjcmParser.property_prefix_return retval = new ObjcmParser.property_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal583=null;
        Token L_BR584=null;
        Token COMMA586=null;
        Token R_BR588=null;
        ObjcmParser.property_return property585 =null;

        ObjcmParser.property_return property587 =null;


        Object string_literal583_tree=null;
        Object L_BR584_tree=null;
        Object COMMA586_tree=null;
        Object R_BR588_tree=null;

        try {
            // Objcm.g:938:2: ( '@property' L_BR property ( COMMA property )* R_BR )
            // Objcm.g:938:4: '@property' L_BR property ( COMMA property )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal583=(Token)match(input,172,FOLLOW_172_in_property_prefix4981); 
            string_literal583_tree = 
            (Object)adaptor.create(string_literal583)
            ;
            adaptor.addChild(root_0, string_literal583_tree);


            L_BR584=(Token)match(input,L_BR,FOLLOW_L_BR_in_property_prefix4983); 
            L_BR584_tree = 
            (Object)adaptor.create(L_BR584)
            ;
            adaptor.addChild(root_0, L_BR584_tree);


            pushFollow(FOLLOW_property_in_property_prefix4985);
            property585=property();

            state._fsp--;

            adaptor.addChild(root_0, property585.getTree());

            // Objcm.g:938:30: ( COMMA property )*
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);

                if ( (LA151_0==COMMA) ) {
                    alt151=1;
                }


                switch (alt151) {
            	case 1 :
            	    // Objcm.g:938:31: COMMA property
            	    {
            	    COMMA586=(Token)match(input,COMMA,FOLLOW_COMMA_in_property_prefix4988); 
            	    COMMA586_tree = 
            	    (Object)adaptor.create(COMMA586)
            	    ;
            	    adaptor.addChild(root_0, COMMA586_tree);


            	    pushFollow(FOLLOW_property_in_property_prefix4990);
            	    property587=property();

            	    state._fsp--;

            	    adaptor.addChild(root_0, property587.getTree());

            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);


            R_BR588=(Token)match(input,R_BR,FOLLOW_R_BR_in_property_prefix4994); 
            R_BR588_tree = 
            (Object)adaptor.create(R_BR588)
            ;
            adaptor.addChild(root_0, R_BR588_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_prefix"


    public static class property_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property"
    // Objcm.g:940:1: property : ( 'readwrite' | 'assign' | 'copy' );
    public final ObjcmParser.property_return property() throws RecognitionException {
        ObjcmParser.property_return retval = new ObjcmParser.property_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set589=null;

        Object set589_tree=null;

        try {
            // Objcm.g:940:9: ( 'readwrite' | 'assign' | 'copy' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set589=(Token)input.LT(1);

            if ( input.LA(1)==182||input.LA(1)==185||input.LA(1)==196 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set589)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property"


    public static class interface_methods_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_methods"
    // Objcm.g:945:1: interface_methods : ( enum_declaration | interface_method )+ ;
    public final ObjcmParser.interface_methods_return interface_methods() throws RecognitionException {
        ObjcmParser.interface_methods_return retval = new ObjcmParser.interface_methods_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.enum_declaration_return enum_declaration590 =null;

        ObjcmParser.interface_method_return interface_method591 =null;



        try {
            // Objcm.g:946:2: ( ( enum_declaration | interface_method )+ )
            // Objcm.g:946:4: ( enum_declaration | interface_method )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:946:4: ( enum_declaration | interface_method )+
            int cnt152=0;
            loop152:
            do {
                int alt152=3;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==ENUM_PREFIX) ) {
                    alt152=1;
                }
                else if ( (LA152_0==L_MINUS||LA152_0==L_PLUS) ) {
                    alt152=2;
                }


                switch (alt152) {
            	case 1 :
            	    // Objcm.g:946:5: enum_declaration
            	    {
            	    pushFollow(FOLLOW_enum_declaration_in_interface_methods5027);
            	    enum_declaration590=enum_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, enum_declaration590.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:946:24: interface_method
            	    {
            	    pushFollow(FOLLOW_interface_method_in_interface_methods5031);
            	    interface_method591=interface_method();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_method591.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt152 >= 1 ) break loop152;
                        EarlyExitException eee =
                            new EarlyExitException(152, input);
                        throw eee;
                }
                cnt152++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_methods"


    public static class interface_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_method"
    // Objcm.g:948:1: interface_method : method_header -> ^( METHOD method_header ) ;
    public final ObjcmParser.interface_method_return interface_method() throws RecognitionException {
        ObjcmParser.interface_method_return retval = new ObjcmParser.interface_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_header_return method_header592 =null;


        RewriteRuleSubtreeStream stream_method_header=new RewriteRuleSubtreeStream(adaptor,"rule method_header");
        try {
            // Objcm.g:949:2: ( method_header -> ^( METHOD method_header ) )
            // Objcm.g:949:4: method_header
            {
            pushFollow(FOLLOW_method_header_in_interface_method5045);
            method_header592=method_header();

            state._fsp--;

            stream_method_header.add(method_header592.getTree());

            // AST REWRITE
            // elements: method_header
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 949:18: -> ^( METHOD method_header )
            {
                // Objcm.g:949:21: ^( METHOD method_header )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_method_header.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_method"


    public static class method_header_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header"
    // Objcm.g:951:1: method_header : method_header_body ( SEMICOLON )? ;
    public final ObjcmParser.method_header_return method_header() throws RecognitionException {
        ObjcmParser.method_header_return retval = new ObjcmParser.method_header_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON594=null;
        ObjcmParser.method_header_body_return method_header_body593 =null;


        Object SEMICOLON594_tree=null;

        try {
            // Objcm.g:952:2: ( method_header_body ( SEMICOLON )? )
            // Objcm.g:952:4: method_header_body ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_method_header5064);
            method_header_body593=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body593.getTree());

            // Objcm.g:952:23: ( SEMICOLON )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==SEMICOLON) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // Objcm.g:952:23: SEMICOLON
                    {
                    SEMICOLON594=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_method_header5066); 
                    SEMICOLON594_tree = 
                    (Object)adaptor.create(SEMICOLON594)
                    ;
                    adaptor.addChild(root_0, SEMICOLON594_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header"


    public static class method_header_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body"
    // Objcm.g:954:1: method_header_body : method_modifier_wrapper ( method_type )? name ( method_params )? ( va_args_wrapper )? ;
    public final ObjcmParser.method_header_body_return method_header_body() throws RecognitionException {
        ObjcmParser.method_header_body_return retval = new ObjcmParser.method_header_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper595 =null;

        ObjcmParser.method_type_return method_type596 =null;

        ObjcmParser.name_return name597 =null;

        ObjcmParser.method_params_return method_params598 =null;

        ObjcmParser.va_args_wrapper_return va_args_wrapper599 =null;



        try {
            // Objcm.g:955:2: ( method_modifier_wrapper ( method_type )? name ( method_params )? ( va_args_wrapper )? )
            // Objcm.g:955:4: method_modifier_wrapper ( method_type )? name ( method_params )? ( va_args_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_header_body5076);
            method_modifier_wrapper595=method_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_modifier_wrapper595.getTree());

            // Objcm.g:955:29: ( method_type )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==L_BR) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // Objcm.g:955:29: method_type
                    {
                    pushFollow(FOLLOW_method_type_in_method_header_body5079);
                    method_type596=method_type();

                    state._fsp--;

                    adaptor.addChild(root_0, method_type596.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_name_in_method_header_body5083);
            name597=name();

            state._fsp--;

            adaptor.addChild(root_0, name597.getTree());

            // Objcm.g:955:49: ( method_params )?
            int alt155=2;
            alt155 = dfa155.predict(input);
            switch (alt155) {
                case 1 :
                    // Objcm.g:955:49: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_header_body5086);
                    method_params598=method_params();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params598.getTree());

                    }
                    break;

            }


            // Objcm.g:955:64: ( va_args_wrapper )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==COMMA) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // Objcm.g:955:64: va_args_wrapper
                    {
                    pushFollow(FOLLOW_va_args_wrapper_in_method_header_body5089);
                    va_args_wrapper599=va_args_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, va_args_wrapper599.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body"


    public static class va_args_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args_wrapper"
    // Objcm.g:957:1: va_args_wrapper : va_args -> ^( VA_ARGS va_args ) ;
    public final ObjcmParser.va_args_wrapper_return va_args_wrapper() throws RecognitionException {
        ObjcmParser.va_args_wrapper_return retval = new ObjcmParser.va_args_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.va_args_return va_args600 =null;


        RewriteRuleSubtreeStream stream_va_args=new RewriteRuleSubtreeStream(adaptor,"rule va_args");
        try {
            // Objcm.g:958:2: ( va_args -> ^( VA_ARGS va_args ) )
            // Objcm.g:958:4: va_args
            {
            pushFollow(FOLLOW_va_args_in_va_args_wrapper5099);
            va_args600=va_args();

            state._fsp--;

            stream_va_args.add(va_args600.getTree());

            // AST REWRITE
            // elements: va_args
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 958:12: -> ^( VA_ARGS va_args )
            {
                // Objcm.g:958:15: ^( VA_ARGS va_args )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VA_ARGS, "VA_ARGS")
                , root_1);

                adaptor.addChild(root_1, stream_va_args.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args_wrapper"


    public static class va_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args"
    // Objcm.g:960:1: va_args : COMMA '...' ( SEMICOLON )? ;
    public final ObjcmParser.va_args_return va_args() throws RecognitionException {
        ObjcmParser.va_args_return retval = new ObjcmParser.va_args_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA601=null;
        Token string_literal602=null;
        Token SEMICOLON603=null;

        Object COMMA601_tree=null;
        Object string_literal602_tree=null;
        Object SEMICOLON603_tree=null;

        try {
            // Objcm.g:960:9: ( COMMA '...' ( SEMICOLON )? )
            // Objcm.g:960:11: COMMA '...' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            COMMA601=(Token)match(input,COMMA,FOLLOW_COMMA_in_va_args5116); 
            COMMA601_tree = 
            (Object)adaptor.create(COMMA601)
            ;
            adaptor.addChild(root_0, COMMA601_tree);


            string_literal602=(Token)match(input,164,FOLLOW_164_in_va_args5119); 
            string_literal602_tree = 
            (Object)adaptor.create(string_literal602)
            ;
            adaptor.addChild(root_0, string_literal602_tree);


            // Objcm.g:960:25: ( SEMICOLON )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==SEMICOLON) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // Objcm.g:960:25: SEMICOLON
                    {
                    SEMICOLON603=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_va_args5122); 
                    SEMICOLON603_tree = 
                    (Object)adaptor.create(SEMICOLON603)
                    ;
                    adaptor.addChild(root_0, SEMICOLON603_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args"


    public static class method_header_body2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body2"
    // Objcm.g:962:1: method_header_body2 : method_type name ( method_params2 )? ;
    public final ObjcmParser.method_header_body2_return method_header_body2() throws RecognitionException {
        ObjcmParser.method_header_body2_return retval = new ObjcmParser.method_header_body2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_type_return method_type604 =null;

        ObjcmParser.name_return name605 =null;

        ObjcmParser.method_params2_return method_params2606 =null;



        try {
            // Objcm.g:963:2: ( method_type name ( method_params2 )? )
            // Objcm.g:963:4: method_type name ( method_params2 )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_type_in_method_header_body25133);
            method_type604=method_type();

            state._fsp--;

            adaptor.addChild(root_0, method_type604.getTree());

            pushFollow(FOLLOW_name_in_method_header_body25135);
            name605=name();

            state._fsp--;

            adaptor.addChild(root_0, name605.getTree());

            // Objcm.g:963:22: ( method_params2 )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==L_BR) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // Objcm.g:963:22: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_method_header_body25138);
                    method_params2606=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params2606.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body2"


    public static class method_header_body3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body3"
    // Objcm.g:965:1: method_header_body3 : method_params2 ;
    public final ObjcmParser.method_header_body3_return method_header_body3() throws RecognitionException {
        ObjcmParser.method_header_body3_return retval = new ObjcmParser.method_header_body3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2607 =null;



        try {
            // Objcm.g:966:2: ( method_params2 )
            // Objcm.g:966:4: method_params2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_header_body35148);
            method_params2607=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2607.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body3"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // Objcm.g:968:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcmParser.method_modifier_wrapper_return retval = new ObjcmParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_return method_modifier608 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // Objcm.g:969:2: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // Objcm.g:969:4: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper5157);
            method_modifier608=method_modifier();

            state._fsp--;

            stream_method_modifier.add(method_modifier608.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 969:20: -> ^( MODIFIER method_modifier )
            {
                // Objcm.g:969:23: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // Objcm.g:971:1: method_modifier : ( '+' | '-' );
    public final ObjcmParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcmParser.method_modifier_return retval = new ObjcmParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set609=null;

        Object set609_tree=null;

        try {
            // Objcm.g:972:2: ( '+' | '-' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set609=(Token)input.LT(1);

            if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set609)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_type"
    // Objcm.g:974:1: method_type : ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE type_internal ) | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? ( ASTERISK )* R_BR -> ^( TYPE ( ID )+ ) );
    public final ObjcmParser.method_type_return method_type() throws RecognitionException {
        ObjcmParser.method_type_return retval = new ObjcmParser.method_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR610=null;
        Token STRUCT_PREFIX611=null;
        Token ASTERISK614=null;
        Token R_BR615=null;
        Token L_BR616=null;
        Token CONST_PREFIX617=null;
        Token ID619=null;
        Token L_KBR620=null;
        Token R_KBR621=null;
        Token ASTERISK623=null;
        Token R_BR624=null;
        ObjcmParser.type_internal_return type_internal612 =null;

        ObjcmParser.generic_return generic613 =null;

        ObjcmParser.known_types_return known_types618 =null;

        ObjcmParser.generic_return generic622 =null;


        Object L_BR610_tree=null;
        Object STRUCT_PREFIX611_tree=null;
        Object ASTERISK614_tree=null;
        Object R_BR615_tree=null;
        Object L_BR616_tree=null;
        Object CONST_PREFIX617_tree=null;
        Object ID619_tree=null;
        Object L_KBR620_tree=null;
        Object R_KBR621_tree=null;
        Object ASTERISK623_tree=null;
        Object R_BR624_tree=null;
        RewriteRuleTokenStream stream_R_KBR=new RewriteRuleTokenStream(adaptor,"token R_KBR");
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_STRUCT_PREFIX=new RewriteRuleTokenStream(adaptor,"token STRUCT_PREFIX");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_L_KBR=new RewriteRuleTokenStream(adaptor,"token L_KBR");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        RewriteRuleSubtreeStream stream_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_internal");
        RewriteRuleSubtreeStream stream_known_types=new RewriteRuleSubtreeStream(adaptor,"rule known_types");
        try {
            // Objcm.g:975:2: ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE type_internal ) | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? ( ASTERISK )* R_BR -> ^( TYPE ( ID )+ ) )
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==L_BR) ) {
                switch ( input.LA(2) ) {
                case STRUCT_PREFIX:
                    {
                    alt168=1;
                    }
                    break;
                case VOID:
                case 201:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        int LA168_10 = input.LA(4);

                        if ( (LA168_10==R_KBR) ) {
                            alt168=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 168, 10, input);

                            throw nvae;

                        }
                        }
                        break;
                    case L_LESS:
                        {
                        int LA168_11 = input.LA(4);

                        if ( (LA168_11==ID) ) {
                            alt168=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 168, 11, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA168_12 = input.LA(4);

                        if ( (LA168_12==R_BR) ) {
                            alt168=1;
                        }
                        else if ( (LA168_12==ASTERISK) ) {
                            alt168=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 168, 12, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt168=1;
                        }
                        break;
                    case ID:
                        {
                        alt168=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 168, 3, input);

                        throw nvae;

                    }

                    }
                    break;
                case ASTERISK:
                case CONST_PREFIX:
                case L_KBR:
                case L_LESS:
                case R_BR:
                    {
                    alt168=2;
                    }
                    break;
                case ID:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        int LA168_15 = input.LA(4);

                        if ( (LA168_15==R_KBR) ) {
                            alt168=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 168, 15, input);

                            throw nvae;

                        }
                        }
                        break;
                    case L_LESS:
                        {
                        int LA168_16 = input.LA(4);

                        if ( (LA168_16==ID) ) {
                            alt168=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 168, 16, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA168_17 = input.LA(4);

                        if ( (LA168_17==R_BR) ) {
                            alt168=1;
                        }
                        else if ( (LA168_17==ASTERISK) ) {
                            alt168=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 168, 17, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt168=1;
                        }
                        break;
                    case ID:
                        {
                        alt168=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 168, 5, input);

                        throw nvae;

                    }

                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 168, 1, input);

                    throw nvae;

                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 168, 0, input);

                throw nvae;

            }
            switch (alt168) {
                case 1 :
                    // Objcm.g:975:4: L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR610=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type5189);  
                    stream_L_BR.add(L_BR610);


                    // Objcm.g:975:10: ( STRUCT_PREFIX )?
                    int alt159=2;
                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==STRUCT_PREFIX) ) {
                        alt159=1;
                    }
                    switch (alt159) {
                        case 1 :
                            // Objcm.g:975:10: STRUCT_PREFIX
                            {
                            STRUCT_PREFIX611=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_type5192);  
                            stream_STRUCT_PREFIX.add(STRUCT_PREFIX611);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_internal_in_method_type5195);
                    type_internal612=type_internal();

                    state._fsp--;

                    stream_type_internal.add(type_internal612.getTree());

                    // Objcm.g:975:40: ( generic )?
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==L_LESS) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            // Objcm.g:975:40: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type5198);
                            generic613=generic();

                            state._fsp--;

                            stream_generic.add(generic613.getTree());

                            }
                            break;

                    }


                    // Objcm.g:975:49: ( ASTERISK )*
                    loop161:
                    do {
                        int alt161=2;
                        int LA161_0 = input.LA(1);

                        if ( (LA161_0==ASTERISK) ) {
                            alt161=1;
                        }


                        switch (alt161) {
                    	case 1 :
                    	    // Objcm.g:975:49: ASTERISK
                    	    {
                    	    ASTERISK614=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type5201);  
                    	    stream_ASTERISK.add(ASTERISK614);


                    	    }
                    	    break;

                    	default :
                    	    break loop161;
                        }
                    } while (true);


                    R_BR615=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type5204);  
                    stream_R_BR.add(R_BR615);


                    // AST REWRITE
                    // elements: type_internal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 975:64: -> ^( TYPE type_internal )
                    {
                        // Objcm.g:975:67: ^( TYPE type_internal )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE, "TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_internal.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:976:5: L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR616=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type5218);  
                    stream_L_BR.add(L_BR616);


                    // Objcm.g:976:11: ( CONST_PREFIX )?
                    int alt162=2;
                    int LA162_0 = input.LA(1);

                    if ( (LA162_0==CONST_PREFIX) ) {
                        alt162=1;
                    }
                    switch (alt162) {
                        case 1 :
                            // Objcm.g:976:11: CONST_PREFIX
                            {
                            CONST_PREFIX617=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_type5221);  
                            stream_CONST_PREFIX.add(CONST_PREFIX617);


                            }
                            break;

                    }


                    // Objcm.g:976:25: ( known_types )?
                    int alt163=2;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==VOID||LA163_0==201) ) {
                        alt163=1;
                    }
                    switch (alt163) {
                        case 1 :
                            // Objcm.g:976:25: known_types
                            {
                            pushFollow(FOLLOW_known_types_in_method_type5224);
                            known_types618=known_types();

                            state._fsp--;

                            stream_known_types.add(known_types618.getTree());

                            }
                            break;

                    }


                    // Objcm.g:976:38: ( ID )*
                    loop164:
                    do {
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==ID) ) {
                            alt164=1;
                        }


                        switch (alt164) {
                    	case 1 :
                    	    // Objcm.g:976:38: ID
                    	    {
                    	    ID619=(Token)match(input,ID,FOLLOW_ID_in_method_type5227);  
                    	    stream_ID.add(ID619);


                    	    }
                    	    break;

                    	default :
                    	    break loop164;
                        }
                    } while (true);


                    // Objcm.g:976:42: ( L_KBR R_KBR )*
                    loop165:
                    do {
                        int alt165=2;
                        int LA165_0 = input.LA(1);

                        if ( (LA165_0==L_KBR) ) {
                            alt165=1;
                        }


                        switch (alt165) {
                    	case 1 :
                    	    // Objcm.g:976:43: L_KBR R_KBR
                    	    {
                    	    L_KBR620=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_method_type5231);  
                    	    stream_L_KBR.add(L_KBR620);


                    	    R_KBR621=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_method_type5233);  
                    	    stream_R_KBR.add(R_KBR621);


                    	    }
                    	    break;

                    	default :
                    	    break loop165;
                        }
                    } while (true);


                    // Objcm.g:976:57: ( generic )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==L_LESS) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // Objcm.g:976:57: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type5237);
                            generic622=generic();

                            state._fsp--;

                            stream_generic.add(generic622.getTree());

                            }
                            break;

                    }


                    // Objcm.g:976:66: ( ASTERISK )*
                    loop167:
                    do {
                        int alt167=2;
                        int LA167_0 = input.LA(1);

                        if ( (LA167_0==ASTERISK) ) {
                            alt167=1;
                        }


                        switch (alt167) {
                    	case 1 :
                    	    // Objcm.g:976:66: ASTERISK
                    	    {
                    	    ASTERISK623=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type5240);  
                    	    stream_ASTERISK.add(ASTERISK623);


                    	    }
                    	    break;

                    	default :
                    	    break loop167;
                        }
                    } while (true);


                    R_BR624=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type5243);  
                    stream_R_BR.add(R_BR624);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 976:81: -> ^( TYPE ( ID )+ )
                    {
                        // Objcm.g:976:84: ^( TYPE ( ID )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE, "TYPE")
                        , root_1);

                        if ( !(stream_ID.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_ID.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_ID.nextNode()
                            );

                        }
                        stream_ID.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_type"


    public static class type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal"
    // Objcm.g:979:1: type_internal : type_internal1 ( L_KBR R_KBR )? ;
    public final ObjcmParser.type_internal_return type_internal() throws RecognitionException {
        ObjcmParser.type_internal_return retval = new ObjcmParser.type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR626=null;
        Token R_KBR627=null;
        ObjcmParser.type_internal1_return type_internal1625 =null;


        Object L_KBR626_tree=null;
        Object R_KBR627_tree=null;

        try {
            // Objcm.g:980:2: ( type_internal1 ( L_KBR R_KBR )? )
            // Objcm.g:980:4: type_internal1 ( L_KBR R_KBR )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal1_in_type_internal5268);
            type_internal1625=type_internal1();

            state._fsp--;

            adaptor.addChild(root_0, type_internal1625.getTree());

            // Objcm.g:980:19: ( L_KBR R_KBR )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==L_KBR) ) {
                int LA169_1 = input.LA(2);

                if ( (LA169_1==R_KBR) ) {
                    alt169=1;
                }
            }
            switch (alt169) {
                case 1 :
                    // Objcm.g:980:20: L_KBR R_KBR
                    {
                    L_KBR626=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_type_internal5271); 
                    L_KBR626_tree = 
                    (Object)adaptor.create(L_KBR626)
                    ;
                    adaptor.addChild(root_0, L_KBR626_tree);


                    R_KBR627=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_type_internal5274); 
                    R_KBR627_tree = 
                    (Object)adaptor.create(R_KBR627)
                    ;
                    adaptor.addChild(root_0, R_KBR627_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal"


    public static class type_internal1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal1"
    // Objcm.g:983:1: type_internal1 : ( VOID | ID | 'unsigned' );
    public final ObjcmParser.type_internal1_return type_internal1() throws RecognitionException {
        ObjcmParser.type_internal1_return retval = new ObjcmParser.type_internal1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set628=null;

        Object set628_tree=null;

        try {
            // Objcm.g:984:2: ( VOID | ID | 'unsigned' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set628=(Token)input.LT(1);

            if ( input.LA(1)==ID||input.LA(1)==VOID||input.LA(1)==201 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set628)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal1"


    public static class generic_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic"
    // Objcm.g:989:1: generic : L_LESS generic_internal L_MORE -> ^( GENERIC generic_internal ) ;
    public final ObjcmParser.generic_return generic() throws RecognitionException {
        ObjcmParser.generic_return retval = new ObjcmParser.generic_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_LESS629=null;
        Token L_MORE631=null;
        ObjcmParser.generic_internal_return generic_internal630 =null;


        Object L_LESS629_tree=null;
        Object L_MORE631_tree=null;
        RewriteRuleTokenStream stream_L_MORE=new RewriteRuleTokenStream(adaptor,"token L_MORE");
        RewriteRuleTokenStream stream_L_LESS=new RewriteRuleTokenStream(adaptor,"token L_LESS");
        RewriteRuleSubtreeStream stream_generic_internal=new RewriteRuleSubtreeStream(adaptor,"rule generic_internal");
        try {
            // Objcm.g:989:8: ( L_LESS generic_internal L_MORE -> ^( GENERIC generic_internal ) )
            // Objcm.g:989:11: L_LESS generic_internal L_MORE
            {
            L_LESS629=(Token)match(input,L_LESS,FOLLOW_L_LESS_in_generic5313);  
            stream_L_LESS.add(L_LESS629);


            pushFollow(FOLLOW_generic_internal_in_generic5315);
            generic_internal630=generic_internal();

            state._fsp--;

            stream_generic_internal.add(generic_internal630.getTree());

            L_MORE631=(Token)match(input,L_MORE,FOLLOW_L_MORE_in_generic5317);  
            stream_L_MORE.add(L_MORE631);


            // AST REWRITE
            // elements: generic_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 989:42: -> ^( GENERIC generic_internal )
            {
                // Objcm.g:989:45: ^( GENERIC generic_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GENERIC, "GENERIC")
                , root_1);

                adaptor.addChild(root_1, stream_generic_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic"


    public static class generic_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic_internal"
    // Objcm.g:991:1: generic_internal : ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* ;
    public final ObjcmParser.generic_internal_return generic_internal() throws RecognitionException {
        ObjcmParser.generic_internal_return retval = new ObjcmParser.generic_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID632=null;
        Token ASTERISK633=null;
        Token COMMA634=null;
        Token ID635=null;
        Token ASTERISK636=null;

        Object ID632_tree=null;
        Object ASTERISK633_tree=null;
        Object COMMA634_tree=null;
        Object ID635_tree=null;
        Object ASTERISK636_tree=null;

        try {
            // Objcm.g:992:2: ( ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* )
            // Objcm.g:992:5: ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )*
            {
            root_0 = (Object)adaptor.nil();


            ID632=(Token)match(input,ID,FOLLOW_ID_in_generic_internal5336); 
            ID632_tree = 
            (Object)adaptor.create(ID632)
            ;
            adaptor.addChild(root_0, ID632_tree);


            // Objcm.g:992:8: ( ASTERISK )*
            loop170:
            do {
                int alt170=2;
                int LA170_0 = input.LA(1);

                if ( (LA170_0==ASTERISK) ) {
                    alt170=1;
                }


                switch (alt170) {
            	case 1 :
            	    // Objcm.g:992:8: ASTERISK
            	    {
            	    ASTERISK633=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal5338); 
            	    ASTERISK633_tree = 
            	    (Object)adaptor.create(ASTERISK633)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK633_tree);


            	    }
            	    break;

            	default :
            	    break loop170;
                }
            } while (true);


            // Objcm.g:992:18: ( COMMA ID ( ASTERISK )* )*
            loop172:
            do {
                int alt172=2;
                int LA172_0 = input.LA(1);

                if ( (LA172_0==COMMA) ) {
                    alt172=1;
                }


                switch (alt172) {
            	case 1 :
            	    // Objcm.g:992:19: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA634=(Token)match(input,COMMA,FOLLOW_COMMA_in_generic_internal5342); 
            	    COMMA634_tree = 
            	    (Object)adaptor.create(COMMA634)
            	    ;
            	    adaptor.addChild(root_0, COMMA634_tree);


            	    ID635=(Token)match(input,ID,FOLLOW_ID_in_generic_internal5345); 
            	    ID635_tree = 
            	    (Object)adaptor.create(ID635)
            	    ;
            	    adaptor.addChild(root_0, ID635_tree);


            	    // Objcm.g:992:30: ( ASTERISK )*
            	    loop171:
            	    do {
            	        int alt171=2;
            	        int LA171_0 = input.LA(1);

            	        if ( (LA171_0==ASTERISK) ) {
            	            alt171=1;
            	        }


            	        switch (alt171) {
            	    	case 1 :
            	    	    // Objcm.g:992:30: ASTERISK
            	    	    {
            	    	    ASTERISK636=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal5348); 
            	    	    ASTERISK636_tree = 
            	    	    (Object)adaptor.create(ASTERISK636)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK636_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop171;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop172;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic_internal"


    public static class method_params2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params2"
    // Objcm.g:994:1: method_params2 : L_BR ( method_param_wrapper2 ( COMMA method_param_wrapper2 )* )? R_BR ;
    public final ObjcmParser.method_params2_return method_params2() throws RecognitionException {
        ObjcmParser.method_params2_return retval = new ObjcmParser.method_params2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR637=null;
        Token COMMA639=null;
        Token R_BR641=null;
        ObjcmParser.method_param_wrapper2_return method_param_wrapper2638 =null;

        ObjcmParser.method_param_wrapper2_return method_param_wrapper2640 =null;


        Object L_BR637_tree=null;
        Object COMMA639_tree=null;
        Object R_BR641_tree=null;

        try {
            // Objcm.g:995:2: ( L_BR ( method_param_wrapper2 ( COMMA method_param_wrapper2 )* )? R_BR )
            // Objcm.g:995:4: L_BR ( method_param_wrapper2 ( COMMA method_param_wrapper2 )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR637=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_params25360); 
            L_BR637_tree = 
            (Object)adaptor.create(L_BR637)
            ;
            adaptor.addChild(root_0, L_BR637_tree);


            // Objcm.g:995:10: ( method_param_wrapper2 ( COMMA method_param_wrapper2 )* )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==CONST_PREFIX||LA174_0==ENUM_PREFIX||LA174_0==ID||LA174_0==STRUCT_PREFIX||LA174_0==VOID||LA174_0==201) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // Objcm.g:995:11: method_param_wrapper2 ( COMMA method_param_wrapper2 )*
                    {
                    pushFollow(FOLLOW_method_param_wrapper2_in_method_params25364);
                    method_param_wrapper2638=method_param_wrapper2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_param_wrapper2638.getTree());

                    // Objcm.g:995:33: ( COMMA method_param_wrapper2 )*
                    loop173:
                    do {
                        int alt173=2;
                        int LA173_0 = input.LA(1);

                        if ( (LA173_0==COMMA) ) {
                            alt173=1;
                        }


                        switch (alt173) {
                    	case 1 :
                    	    // Objcm.g:995:34: COMMA method_param_wrapper2
                    	    {
                    	    COMMA639=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_params25367); 
                    	    COMMA639_tree = 
                    	    (Object)adaptor.create(COMMA639)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA639_tree);


                    	    pushFollow(FOLLOW_method_param_wrapper2_in_method_params25369);
                    	    method_param_wrapper2640=method_param_wrapper2();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, method_param_wrapper2640.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop173;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR641=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_params25375); 
            R_BR641_tree = 
            (Object)adaptor.create(R_BR641)
            ;
            adaptor.addChild(root_0, R_BR641_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params2"


    public static class method_param_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_wrapper2"
    // Objcm.g:998:1: method_param_wrapper2 : method_param2 -> ^( PARAM method_param2 ) ;
    public final ObjcmParser.method_param_wrapper2_return method_param_wrapper2() throws RecognitionException {
        ObjcmParser.method_param_wrapper2_return retval = new ObjcmParser.method_param_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param2_return method_param2642 =null;


        RewriteRuleSubtreeStream stream_method_param2=new RewriteRuleSubtreeStream(adaptor,"rule method_param2");
        try {
            // Objcm.g:999:2: ( method_param2 -> ^( PARAM method_param2 ) )
            // Objcm.g:999:4: method_param2
            {
            pushFollow(FOLLOW_method_param2_in_method_param_wrapper25386);
            method_param2642=method_param2();

            state._fsp--;

            stream_method_param2.add(method_param2642.getTree());

            // AST REWRITE
            // elements: method_param2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 999:18: -> ^( PARAM method_param2 )
            {
                // Objcm.g:999:21: ^( PARAM method_param2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM, "PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_method_param2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_wrapper2"


    public static class method_param2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param2"
    // Objcm.g:1001:1: method_param2 : ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )? ;
    public final ObjcmParser.method_param2_return method_param2() throws RecognitionException {
        ObjcmParser.method_param2_return retval = new ObjcmParser.method_param2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX643=null;
        Token ENUM_PREFIX644=null;
        Token STRUCT_PREFIX645=null;
        Token string_literal646=null;
        ObjcmParser.field_type_return field_type647 =null;

        ObjcmParser.name_return name648 =null;

        ObjcmParser.indexed_return indexed649 =null;


        Object CONST_PREFIX643_tree=null;
        Object ENUM_PREFIX644_tree=null;
        Object STRUCT_PREFIX645_tree=null;
        Object string_literal646_tree=null;

        try {
            // Objcm.g:1002:2: ( ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )? )
            // Objcm.g:1002:4: ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1002:4: ( CONST_PREFIX )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==CONST_PREFIX) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // Objcm.g:1002:4: CONST_PREFIX
                    {
                    CONST_PREFIX643=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_param25404); 
                    CONST_PREFIX643_tree = 
                    (Object)adaptor.create(CONST_PREFIX643)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX643_tree);


                    }
                    break;

            }


            // Objcm.g:1002:18: ( ENUM_PREFIX )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==ENUM_PREFIX) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // Objcm.g:1002:18: ENUM_PREFIX
                    {
                    ENUM_PREFIX644=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_method_param25407); 
                    ENUM_PREFIX644_tree = 
                    (Object)adaptor.create(ENUM_PREFIX644)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX644_tree);


                    }
                    break;

            }


            // Objcm.g:1002:31: ( STRUCT_PREFIX )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==STRUCT_PREFIX) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // Objcm.g:1002:31: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX645=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_param25410); 
                    STRUCT_PREFIX645_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX645)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX645_tree);


                    }
                    break;

            }


            // Objcm.g:1002:46: ( 'unsigned' )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==201) ) {
                int LA178_1 = input.LA(2);

                if ( (LA178_1==ID||LA178_1==VOID||LA178_1==201) ) {
                    alt178=1;
                }
            }
            switch (alt178) {
                case 1 :
                    // Objcm.g:1002:46: 'unsigned'
                    {
                    string_literal646=(Token)match(input,201,FOLLOW_201_in_method_param25413); 
                    string_literal646_tree = 
                    (Object)adaptor.create(string_literal646)
                    ;
                    adaptor.addChild(root_0, string_literal646_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_method_param25416);
            field_type647=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type647.getTree());

            // Objcm.g:1002:69: ( name )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==ID||LA179_0==182||LA179_0==185||LA179_0==193||LA179_0==196) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // Objcm.g:1002:69: name
                    {
                    pushFollow(FOLLOW_name_in_method_param25418);
                    name648=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name648.getTree());

                    }
                    break;

            }


            // Objcm.g:1002:75: ( indexed )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==L_KBR) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // Objcm.g:1002:75: indexed
                    {
                    pushFollow(FOLLOW_indexed_in_method_param25421);
                    indexed649=indexed();

                    state._fsp--;

                    adaptor.addChild(root_0, indexed649.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param2"


    public static class indexed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexed"
    // Objcm.g:1004:1: indexed : L_KBR ( NUMBER )? R_KBR ;
    public final ObjcmParser.indexed_return indexed() throws RecognitionException {
        ObjcmParser.indexed_return retval = new ObjcmParser.indexed_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR650=null;
        Token NUMBER651=null;
        Token R_KBR652=null;

        Object L_KBR650_tree=null;
        Object NUMBER651_tree=null;
        Object R_KBR652_tree=null;

        try {
            // Objcm.g:1004:9: ( L_KBR ( NUMBER )? R_KBR )
            // Objcm.g:1004:11: L_KBR ( NUMBER )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR650=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_indexed5431); 
            L_KBR650_tree = 
            (Object)adaptor.create(L_KBR650)
            ;
            adaptor.addChild(root_0, L_KBR650_tree);


            // Objcm.g:1004:17: ( NUMBER )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==NUMBER) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // Objcm.g:1004:17: NUMBER
                    {
                    NUMBER651=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_indexed5433); 
                    NUMBER651_tree = 
                    (Object)adaptor.create(NUMBER651)
                    ;
                    adaptor.addChild(root_0, NUMBER651_tree);


                    }
                    break;

            }


            R_KBR652=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_indexed5436); 
            R_KBR652_tree = 
            (Object)adaptor.create(R_KBR652)
            ;
            adaptor.addChild(root_0, R_KBR652_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexed"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // Objcm.g:1006:1: method_params : ( method_param )+ -> ( ^( PARAM method_param ) )+ ;
    public final ObjcmParser.method_params_return method_params() throws RecognitionException {
        ObjcmParser.method_params_return retval = new ObjcmParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param_return method_param653 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // Objcm.g:1007:2: ( ( method_param )+ -> ( ^( PARAM method_param ) )+ )
            // Objcm.g:1007:4: ( method_param )+
            {
            // Objcm.g:1007:4: ( method_param )+
            int cnt182=0;
            loop182:
            do {
                int alt182=2;
                alt182 = dfa182.predict(input);
                switch (alt182) {
            	case 1 :
            	    // Objcm.g:1007:4: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params5446);
            	    method_param653=method_param();

            	    state._fsp--;

            	    stream_method_param.add(method_param653.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt182 >= 1 ) break loop182;
                        EarlyExitException eee =
                            new EarlyExitException(182, input);
                        throw eee;
                }
                cnt182++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1007:18: -> ( ^( PARAM method_param ) )+
            {
                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    // Objcm.g:1007:21: ^( PARAM method_param )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(PARAM, "PARAM")
                    , root_1);

                    adaptor.addChild(root_1, stream_method_param.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_method_param.reset();

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // Objcm.g:1009:1: method_param : ( ( prefix )? | COLON ) ( method_type )? name ;
    public final ObjcmParser.method_param_return method_param() throws RecognitionException {
        ObjcmParser.method_param_return retval = new ObjcmParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON655=null;
        ObjcmParser.prefix_return prefix654 =null;

        ObjcmParser.method_type_return method_type656 =null;

        ObjcmParser.name_return name657 =null;


        Object COLON655_tree=null;

        try {
            // Objcm.g:1010:2: ( ( ( prefix )? | COLON ) ( method_type )? name )
            // Objcm.g:1010:4: ( ( prefix )? | COLON ) ( method_type )? name
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1010:4: ( ( prefix )? | COLON )
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==ID||LA184_0==L_BR||LA184_0==182||LA184_0==185||LA184_0==193||LA184_0==196) ) {
                alt184=1;
            }
            else if ( (LA184_0==COLON) ) {
                alt184=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;

            }
            switch (alt184) {
                case 1 :
                    // Objcm.g:1010:5: ( prefix )?
                    {
                    // Objcm.g:1010:5: ( prefix )?
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==ID) ) {
                        int LA183_1 = input.LA(2);

                        if ( (LA183_1==COLON) ) {
                            alt183=1;
                        }
                    }
                    switch (alt183) {
                        case 1 :
                            // Objcm.g:1010:5: prefix
                            {
                            pushFollow(FOLLOW_prefix_in_method_param5468);
                            prefix654=prefix();

                            state._fsp--;

                            adaptor.addChild(root_0, prefix654.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:1010:15: COLON
                    {
                    COLON655=(Token)match(input,COLON,FOLLOW_COLON_in_method_param5473); 
                    COLON655_tree = 
                    (Object)adaptor.create(COLON655)
                    ;
                    adaptor.addChild(root_0, COLON655_tree);


                    }
                    break;

            }


            // Objcm.g:1010:22: ( method_type )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==L_BR) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // Objcm.g:1010:22: method_type
                    {
                    pushFollow(FOLLOW_method_type_in_method_param5476);
                    method_type656=method_type();

                    state._fsp--;

                    adaptor.addChild(root_0, method_type656.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_name_in_method_param5479);
            name657=name();

            state._fsp--;

            adaptor.addChild(root_0, name657.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // Objcm.g:1013:1: prefix : ID COLON -> ^( PREFIX ID COLON ) ;
    public final ObjcmParser.prefix_return prefix() throws RecognitionException {
        ObjcmParser.prefix_return retval = new ObjcmParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID658=null;
        Token COLON659=null;

        Object ID658_tree=null;
        Object COLON659_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:1013:8: ( ID COLON -> ^( PREFIX ID COLON ) )
            // Objcm.g:1013:10: ID COLON
            {
            ID658=(Token)match(input,ID,FOLLOW_ID_in_prefix5491);  
            stream_ID.add(ID658);


            COLON659=(Token)match(input,COLON,FOLLOW_COLON_in_prefix5493);  
            stream_COLON.add(COLON659);


            // AST REWRITE
            // elements: COLON, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1013:19: -> ^( PREFIX ID COLON )
            {
                // Objcm.g:1013:22: ^( PREFIX ID COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PREFIX, "PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class incomplete_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "incomplete_prefix"
    // Objcm.g:1015:1: incomplete_prefix : COLON -> ^( INCOMPLETE_PREFIX COLON ) ;
    public final ObjcmParser.incomplete_prefix_return incomplete_prefix() throws RecognitionException {
        ObjcmParser.incomplete_prefix_return retval = new ObjcmParser.incomplete_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON660=null;

        Object COLON660_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");

        try {
            // Objcm.g:1016:2: ( COLON -> ^( INCOMPLETE_PREFIX COLON ) )
            // Objcm.g:1016:4: COLON
            {
            COLON660=(Token)match(input,COLON,FOLLOW_COLON_in_incomplete_prefix5512);  
            stream_COLON.add(COLON660);


            // AST REWRITE
            // elements: COLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1016:10: -> ^( INCOMPLETE_PREFIX COLON )
            {
                // Objcm.g:1016:13: ^( INCOMPLETE_PREFIX COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INCOMPLETE_PREFIX, "INCOMPLETE_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "incomplete_prefix"


    public static class typedef_struct_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_wrapper"
    // Objcm.g:1023:1: typedef_struct_declaration_wrapper : typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) ;
    public final ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration661 =null;


        RewriteRuleSubtreeStream stream_typedef_struct_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_struct_declaration");
        try {
            // Objcm.g:1024:2: ( typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) )
            // Objcm.g:1024:4: typedef_struct_declaration
            {
            pushFollow(FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5534);
            typedef_struct_declaration661=typedef_struct_declaration();

            state._fsp--;

            stream_typedef_struct_declaration.add(typedef_struct_declaration661.getTree());

            // AST REWRITE
            // elements: typedef_struct_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1024:31: -> ^( TYPEDEF_STRUCT typedef_struct_declaration )
            {
                // Objcm.g:1024:34: ^( TYPEDEF_STRUCT typedef_struct_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_STRUCT, "TYPEDEF_STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_struct_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_wrapper"


    public static class typedef_struct_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration"
    // Objcm.g:1028:1: typedef_struct_declaration : STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? ;
    public final ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_return retval = new ObjcmParser.typedef_struct_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX662=null;
        Token L_FBR664=null;
        Token R_FBR666=null;
        Token SEMICOLON668=null;
        ObjcmParser.name_return name663 =null;

        ObjcmParser.typedef_struct_body_return typedef_struct_body665 =null;

        ObjcmParser.name_return name667 =null;


        Object STRUCT_PREFIX662_tree=null;
        Object L_FBR664_tree=null;
        Object R_FBR666_tree=null;
        Object SEMICOLON668_tree=null;

        try {
            // Objcm.g:1029:2: ( STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? )
            // Objcm.g:1029:4: STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX662=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5555); 
            STRUCT_PREFIX662_tree = 
            (Object)adaptor.create(STRUCT_PREFIX662)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX662_tree);


            // Objcm.g:1029:18: ( name )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==ID||LA186_0==182||LA186_0==185||LA186_0==193||LA186_0==196) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // Objcm.g:1029:18: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5557);
                    name663=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name663.getTree());

                    }
                    break;

            }


            L_FBR664=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_struct_declaration5561); 
            L_FBR664_tree = 
            (Object)adaptor.create(L_FBR664)
            ;
            adaptor.addChild(root_0, L_FBR664_tree);


            // Objcm.g:1031:3: ( typedef_struct_body )+
            int cnt187=0;
            loop187:
            do {
                int alt187=2;
                int LA187_0 = input.LA(1);

                if ( (LA187_0==ID||LA187_0==VOID||LA187_0==201) ) {
                    alt187=1;
                }


                switch (alt187) {
            	case 1 :
            	    // Objcm.g:1031:3: typedef_struct_body
            	    {
            	    pushFollow(FOLLOW_typedef_struct_body_in_typedef_struct_declaration5566);
            	    typedef_struct_body665=typedef_struct_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_struct_body665.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt187 >= 1 ) break loop187;
                        EarlyExitException eee =
                            new EarlyExitException(187, input);
                        throw eee;
                }
                cnt187++;
            } while (true);


            R_FBR666=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_struct_declaration5570); 
            R_FBR666_tree = 
            (Object)adaptor.create(R_FBR666)
            ;
            adaptor.addChild(root_0, R_FBR666_tree);


            // Objcm.g:1032:9: ( name )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==ID) ) {
                int LA188_1 = input.LA(2);

                if ( (LA188_1==EOF||LA188_1==CONST_PREFIX||LA188_1==ENUM_PREFIX||LA188_1==L_MINUS||LA188_1==L_PLUS||LA188_1==SEMICOLON||LA188_1==STATIC_PREFIX||LA188_1==STRUCT_PREFIX||LA188_1==VOID||LA188_1==167||(LA188_1 >= 169 && LA188_1 <= 170)||LA188_1==176||LA188_1==189||LA188_1==194||LA188_1==199||LA188_1==201) ) {
                    alt188=1;
                }
                else if ( (LA188_1==ID) ) {
                    int LA188_25 = input.LA(3);

                    if ( (LA188_25==L_KBR) ) {
                        int LA188_40 = input.LA(4);

                        if ( (LA188_40==R_KBR) ) {
                            alt188=1;
                        }
                    }
                    else if ( (LA188_25==ASTERISK||LA188_25==ID||LA188_25==L_LESS||LA188_25==182||LA188_25==185||LA188_25==193||LA188_25==196) ) {
                        alt188=1;
                    }
                }
            }
            else if ( (LA188_0==182||LA188_0==185||LA188_0==193||LA188_0==196) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // Objcm.g:1032:9: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5573);
                    name667=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name667.getTree());

                    }
                    break;

            }


            // Objcm.g:1032:15: ( SEMICOLON )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==SEMICOLON) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // Objcm.g:1032:15: SEMICOLON
                    {
                    SEMICOLON668=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_struct_declaration5576); 
                    SEMICOLON668_tree = 
                    (Object)adaptor.create(SEMICOLON668)
                    ;
                    adaptor.addChild(root_0, SEMICOLON668_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration"


    public static class typedef_struct_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_body"
    // Objcm.g:1035:1: typedef_struct_body : typedef_struct_declaration_element_wrapper ;
    public final ObjcmParser.typedef_struct_body_return typedef_struct_body() throws RecognitionException {
        ObjcmParser.typedef_struct_body_return retval = new ObjcmParser.typedef_struct_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper669 =null;



        try {
            // Objcm.g:1036:2: ( typedef_struct_declaration_element_wrapper )
            // Objcm.g:1036:4: typedef_struct_declaration_element_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5589);
            typedef_struct_declaration_element_wrapper669=typedef_struct_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_struct_declaration_element_wrapper669.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_body"


    public static class typedef_struct_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_element_wrapper"
    // Objcm.g:1039:1: typedef_struct_declaration_element_wrapper : struct_field -> ^( STRUCT_FIELD struct_field ) ;
    public final ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_element_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_field_return struct_field670 =null;


        RewriteRuleSubtreeStream stream_struct_field=new RewriteRuleSubtreeStream(adaptor,"rule struct_field");
        try {
            // Objcm.g:1040:2: ( struct_field -> ^( STRUCT_FIELD struct_field ) )
            // Objcm.g:1040:4: struct_field
            {
            pushFollow(FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5601);
            struct_field670=struct_field();

            state._fsp--;

            stream_struct_field.add(struct_field670.getTree());

            // AST REWRITE
            // elements: struct_field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1040:17: -> ^( STRUCT_FIELD struct_field )
            {
                // Objcm.g:1040:20: ^( STRUCT_FIELD struct_field )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT_FIELD, "STRUCT_FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_struct_field.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_element_wrapper"


    public static class struct_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_field"
    // Objcm.g:1042:1: struct_field : field_type name ( COMMA name )* SEMICOLON ;
    public final ObjcmParser.struct_field_return struct_field() throws RecognitionException {
        ObjcmParser.struct_field_return retval = new ObjcmParser.struct_field_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA673=null;
        Token SEMICOLON675=null;
        ObjcmParser.field_type_return field_type671 =null;

        ObjcmParser.name_return name672 =null;

        ObjcmParser.name_return name674 =null;


        Object COMMA673_tree=null;
        Object SEMICOLON675_tree=null;

        try {
            // Objcm.g:1043:2: ( field_type name ( COMMA name )* SEMICOLON )
            // Objcm.g:1043:4: field_type name ( COMMA name )* SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_struct_field5619);
            field_type671=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type671.getTree());

            pushFollow(FOLLOW_name_in_struct_field5621);
            name672=name();

            state._fsp--;

            adaptor.addChild(root_0, name672.getTree());

            // Objcm.g:1043:21: ( COMMA name )*
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==COMMA) ) {
                    alt190=1;
                }


                switch (alt190) {
            	case 1 :
            	    // Objcm.g:1043:22: COMMA name
            	    {
            	    COMMA673=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_field5625); 
            	    COMMA673_tree = 
            	    (Object)adaptor.create(COMMA673)
            	    ;
            	    adaptor.addChild(root_0, COMMA673_tree);


            	    pushFollow(FOLLOW_name_in_struct_field5628);
            	    name674=name();

            	    state._fsp--;

            	    adaptor.addChild(root_0, name674.getTree());

            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);


            SEMICOLON675=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_field5632); 
            SEMICOLON675_tree = 
            (Object)adaptor.create(SEMICOLON675)
            ;
            adaptor.addChild(root_0, SEMICOLON675_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_field"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // Objcm.g:1050:1: typedef_declaration_wrapper : typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_wrapper_return retval = new ObjcmParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration676 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // Objcm.g:1051:2: ( typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // Objcm.g:1051:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5648);
            typedef_declaration676=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration676.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1051:24: -> ^( TYPEDEF typedef_declaration )
            {
                // Objcm.g:1051:27: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class enum_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_declaration"
    // Objcm.g:1054:1: enum_declaration : typedef_declaration -> ^( ENUM typedef_declaration ) ;
    public final ObjcmParser.enum_declaration_return enum_declaration() throws RecognitionException {
        ObjcmParser.enum_declaration_return retval = new ObjcmParser.enum_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration677 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // Objcm.g:1055:2: ( typedef_declaration -> ^( ENUM typedef_declaration ) )
            // Objcm.g:1055:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_enum_declaration5668);
            typedef_declaration677=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration677.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1055:24: -> ^( ENUM typedef_declaration )
            {
                // Objcm.g:1055:27: ^( ENUM typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_declaration"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // Objcm.g:1057:1: typedef_declaration : ENUM_PREFIX ( name )? L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON ;
    public final ObjcmParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcmParser.typedef_declaration_return retval = new ObjcmParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX678=null;
        Token L_FBR680=null;
        Token COMMA682=null;
        Token R_FBR684=null;
        Token SEMICOLON686=null;
        ObjcmParser.name_return name679 =null;

        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper681 =null;

        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper683 =null;

        ObjcmParser.name_return name685 =null;


        Object ENUM_PREFIX678_tree=null;
        Object L_FBR680_tree=null;
        Object COMMA682_tree=null;
        Object R_FBR684_tree=null;
        Object SEMICOLON686_tree=null;

        try {
            // Objcm.g:1058:2: ( ENUM_PREFIX ( name )? L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON )
            // Objcm.g:1058:5: ENUM_PREFIX ( name )? L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX678=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_typedef_declaration5688); 
            ENUM_PREFIX678_tree = 
            (Object)adaptor.create(ENUM_PREFIX678)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX678_tree);


            // Objcm.g:1058:17: ( name )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==ID||LA191_0==182||LA191_0==185||LA191_0==193||LA191_0==196) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // Objcm.g:1058:17: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_declaration5690);
                    name679=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name679.getTree());

                    }
                    break;

            }


            L_FBR680=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_declaration5693); 
            L_FBR680_tree = 
            (Object)adaptor.create(L_FBR680)
            ;
            adaptor.addChild(root_0, L_FBR680_tree);


            pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5696);
            typedef_declaration_element_wrapper681=typedef_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_declaration_element_wrapper681.getTree());

            // Objcm.g:1058:67: ( COMMA typedef_declaration_element_wrapper )*
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==COMMA) ) {
                    alt192=1;
                }


                switch (alt192) {
            	case 1 :
            	    // Objcm.g:1058:68: COMMA typedef_declaration_element_wrapper
            	    {
            	    COMMA682=(Token)match(input,COMMA,FOLLOW_COMMA_in_typedef_declaration5700); 
            	    COMMA682_tree = 
            	    (Object)adaptor.create(COMMA682)
            	    ;
            	    adaptor.addChild(root_0, COMMA682_tree);


            	    pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5703);
            	    typedef_declaration_element_wrapper683=typedef_declaration_element_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_declaration_element_wrapper683.getTree());

            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);


            R_FBR684=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_declaration5707); 
            R_FBR684_tree = 
            (Object)adaptor.create(R_FBR684)
            ;
            adaptor.addChild(root_0, R_FBR684_tree);


            // Objcm.g:1058:120: ( name )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==ID||LA193_0==182||LA193_0==185||LA193_0==193||LA193_0==196) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // Objcm.g:1058:120: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_declaration5710);
                    name685=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name685.getTree());

                    }
                    break;

            }


            SEMICOLON686=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_declaration5713); 
            SEMICOLON686_tree = 
            (Object)adaptor.create(SEMICOLON686)
            ;
            adaptor.addChild(root_0, SEMICOLON686_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class typedef_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element_wrapper"
    // Objcm.g:1060:1: typedef_declaration_element_wrapper : typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) ;
    public final ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_wrapper_return retval = new ObjcmParser.typedef_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_element_return typedef_declaration_element687 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration_element=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration_element");
        try {
            // Objcm.g:1061:2: ( typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) )
            // Objcm.g:1061:4: typedef_declaration_element
            {
            pushFollow(FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5723);
            typedef_declaration_element687=typedef_declaration_element();

            state._fsp--;

            stream_typedef_declaration_element.add(typedef_declaration_element687.getTree());

            // AST REWRITE
            // elements: typedef_declaration_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1061:32: -> ^( TYPEDEF_ELEMENT typedef_declaration_element )
            {
                // Objcm.g:1061:35: ^( TYPEDEF_ELEMENT typedef_declaration_element )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_ELEMENT, "TYPEDEF_ELEMENT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration_element.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element_wrapper"


    public static class typedef_declaration_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element"
    // Objcm.g:1064:1: typedef_declaration_element : ( ID ( L_EQ ( ID | NUMBER ) )? | NUMBER L_EQ NUMBER );
    public final ObjcmParser.typedef_declaration_element_return typedef_declaration_element() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_return retval = new ObjcmParser.typedef_declaration_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID688=null;
        Token L_EQ689=null;
        Token set690=null;
        Token NUMBER691=null;
        Token L_EQ692=null;
        Token NUMBER693=null;

        Object ID688_tree=null;
        Object L_EQ689_tree=null;
        Object set690_tree=null;
        Object NUMBER691_tree=null;
        Object L_EQ692_tree=null;
        Object NUMBER693_tree=null;

        try {
            // Objcm.g:1065:2: ( ID ( L_EQ ( ID | NUMBER ) )? | NUMBER L_EQ NUMBER )
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==ID) ) {
                alt195=1;
            }
            else if ( (LA195_0==NUMBER) ) {
                alt195=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;

            }
            switch (alt195) {
                case 1 :
                    // Objcm.g:1065:4: ID ( L_EQ ( ID | NUMBER ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    ID688=(Token)match(input,ID,FOLLOW_ID_in_typedef_declaration_element5742); 
                    ID688_tree = 
                    (Object)adaptor.create(ID688)
                    ;
                    adaptor.addChild(root_0, ID688_tree);


                    // Objcm.g:1065:8: ( L_EQ ( ID | NUMBER ) )?
                    int alt194=2;
                    int LA194_0 = input.LA(1);

                    if ( (LA194_0==L_EQ) ) {
                        alt194=1;
                    }
                    switch (alt194) {
                        case 1 :
                            // Objcm.g:1065:9: L_EQ ( ID | NUMBER )
                            {
                            L_EQ689=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_typedef_declaration_element5746); 
                            L_EQ689_tree = 
                            (Object)adaptor.create(L_EQ689)
                            ;
                            adaptor.addChild(root_0, L_EQ689_tree);


                            set690=(Token)input.LT(1);

                            if ( input.LA(1)==ID||input.LA(1)==NUMBER ) {
                                input.consume();
                                adaptor.addChild(root_0, 
                                (Object)adaptor.create(set690)
                                );
                                state.errorRecovery=false;
                            }
                            else {
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:1066:4: NUMBER L_EQ NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER691=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_typedef_declaration_element5761); 
                    NUMBER691_tree = 
                    (Object)adaptor.create(NUMBER691)
                    ;
                    adaptor.addChild(root_0, NUMBER691_tree);


                    L_EQ692=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_typedef_declaration_element5763); 
                    L_EQ692_tree = 
                    (Object)adaptor.create(L_EQ692)
                    ;
                    adaptor.addChild(root_0, L_EQ692_tree);


                    NUMBER693=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_typedef_declaration_element5765); 
                    NUMBER693_tree = 
                    (Object)adaptor.create(NUMBER693)
                    ;
                    adaptor.addChild(root_0, NUMBER693_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // Objcm.g:1073:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_wrapper_return retval = new ObjcmParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_return field_declaration694 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // Objcm.g:1074:2: ( field_declaration -> ^( FIELD field_declaration ) )
            // Objcm.g:1074:4: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper5779);
            field_declaration694=field_declaration();

            state._fsp--;

            stream_field_declaration.add(field_declaration694.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1074:22: -> ^( FIELD field_declaration )
            {
                // Objcm.g:1074:25: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // Objcm.g:1076:1: field_declaration : field_modifier_wrapper field_type name field_declaration_end ;
    public final ObjcmParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcmParser.field_declaration_return retval = new ObjcmParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper695 =null;

        ObjcmParser.field_type_return field_type696 =null;

        ObjcmParser.name_return name697 =null;

        ObjcmParser.field_declaration_end_return field_declaration_end698 =null;



        try {
            // Objcm.g:1077:2: ( field_modifier_wrapper field_type name field_declaration_end )
            // Objcm.g:1077:4: field_modifier_wrapper field_type name field_declaration_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_modifier_wrapper_in_field_declaration5796);
            field_modifier_wrapper695=field_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, field_modifier_wrapper695.getTree());

            pushFollow(FOLLOW_field_type_in_field_declaration5799);
            field_type696=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type696.getTree());

            pushFollow(FOLLOW_name_in_field_declaration5801);
            name697=name();

            state._fsp--;

            adaptor.addChild(root_0, name697.getTree());

            pushFollow(FOLLOW_field_declaration_end_in_field_declaration5803);
            field_declaration_end698=field_declaration_end();

            state._fsp--;

            adaptor.addChild(root_0, field_declaration_end698.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end"
    // Objcm.g:1079:1: field_declaration_end : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_declaration_end_return field_declaration_end() throws RecognitionException {
        ObjcmParser.field_declaration_end_return retval = new ObjcmParser.field_declaration_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON700=null;
        ObjcmParser.value_set_return value_set699 =null;


        Object SEMICOLON700_tree=null;

        try {
            // Objcm.g:1080:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:1080:5: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1080:5: ( value_set )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==L_EQ) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // Objcm.g:1080:5: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_declaration_end5814);
                    value_set699=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set699.getTree());

                    }
                    break;

            }


            SEMICOLON700=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration_end5817); 
            SEMICOLON700_tree = 
            (Object)adaptor.create(SEMICOLON700)
            ;
            adaptor.addChild(root_0, SEMICOLON700_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end"


    public static class type_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start_wrapper"
    // Objcm.g:1082:1: type_start_wrapper : type_start -> ^( M_TYPE_START type_start ) ;
    public final ObjcmParser.type_start_wrapper_return type_start_wrapper() throws RecognitionException {
        ObjcmParser.type_start_wrapper_return retval = new ObjcmParser.type_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_start_return type_start701 =null;


        RewriteRuleSubtreeStream stream_type_start=new RewriteRuleSubtreeStream(adaptor,"rule type_start");
        try {
            // Objcm.g:1083:2: ( type_start -> ^( M_TYPE_START type_start ) )
            // Objcm.g:1083:4: type_start
            {
            pushFollow(FOLLOW_type_start_in_type_start_wrapper5827);
            type_start701=type_start();

            state._fsp--;

            stream_type_start.add(type_start701.getTree());

            // AST REWRITE
            // elements: type_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1083:15: -> ^( M_TYPE_START type_start )
            {
                // Objcm.g:1083:18: ^( M_TYPE_START type_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(M_TYPE_START, "M_TYPE_START")
                , root_1);

                adaptor.addChild(root_1, stream_type_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start_wrapper"


    public static class type_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start"
    // Objcm.g:1085:1: type_start : ( CONST_PREFIX )? field_type name ( L_KBR R_KBR )? type_end ;
    public final ObjcmParser.type_start_return type_start() throws RecognitionException {
        ObjcmParser.type_start_return retval = new ObjcmParser.type_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX702=null;
        Token L_KBR705=null;
        Token R_KBR706=null;
        ObjcmParser.field_type_return field_type703 =null;

        ObjcmParser.name_return name704 =null;

        ObjcmParser.type_end_return type_end707 =null;


        Object CONST_PREFIX702_tree=null;
        Object L_KBR705_tree=null;
        Object R_KBR706_tree=null;

        try {
            // Objcm.g:1086:2: ( ( CONST_PREFIX )? field_type name ( L_KBR R_KBR )? type_end )
            // Objcm.g:1086:4: ( CONST_PREFIX )? field_type name ( L_KBR R_KBR )? type_end
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1086:4: ( CONST_PREFIX )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==CONST_PREFIX) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // Objcm.g:1086:4: CONST_PREFIX
                    {
                    CONST_PREFIX702=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_start5844); 
                    CONST_PREFIX702_tree = 
                    (Object)adaptor.create(CONST_PREFIX702)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX702_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_type_start5847);
            field_type703=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type703.getTree());

            pushFollow(FOLLOW_name_in_type_start5849);
            name704=name();

            state._fsp--;

            adaptor.addChild(root_0, name704.getTree());

            // Objcm.g:1086:34: ( L_KBR R_KBR )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==L_KBR) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // Objcm.g:1086:35: L_KBR R_KBR
                    {
                    L_KBR705=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_type_start5852); 
                    L_KBR705_tree = 
                    (Object)adaptor.create(L_KBR705)
                    ;
                    adaptor.addChild(root_0, L_KBR705_tree);


                    R_KBR706=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_type_start5854); 
                    R_KBR706_tree = 
                    (Object)adaptor.create(R_KBR706)
                    ;
                    adaptor.addChild(root_0, R_KBR706_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_end_in_type_start5858);
            type_end707=type_end();

            state._fsp--;

            adaptor.addChild(root_0, type_end707.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start"


    public static class type_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_end"
    // Objcm.g:1088:1: type_end : ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) );
    public final ObjcmParser.type_end_return type_end() throws RecognitionException {
        ObjcmParser.type_end_return retval = new ObjcmParser.type_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration4_return field_declaration4708 =null;

        ObjcmParser.method_declaration4_return method_declaration4709 =null;


        RewriteRuleSubtreeStream stream_field_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration4");
        RewriteRuleSubtreeStream stream_method_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration4");
        try {
            // Objcm.g:1088:9: ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) )
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==L_EQ||LA199_0==SEMICOLON) ) {
                alt199=1;
            }
            else if ( (LA199_0==L_BR) ) {
                alt199=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);

                throw nvae;

            }
            switch (alt199) {
                case 1 :
                    // Objcm.g:1088:11: field_declaration4
                    {
                    pushFollow(FOLLOW_field_declaration4_in_type_end5866);
                    field_declaration4708=field_declaration4();

                    state._fsp--;

                    stream_field_declaration4.add(field_declaration4708.getTree());

                    // AST REWRITE
                    // elements: field_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1088:30: -> ^( FIELD field_declaration4 )
                    {
                        // Objcm.g:1088:33: ^( FIELD field_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD, "FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_field_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:1089:4: method_declaration4
                    {
                    pushFollow(FOLLOW_method_declaration4_in_type_end5879);
                    method_declaration4709=method_declaration4();

                    state._fsp--;

                    stream_method_declaration4.add(method_declaration4709.getTree());

                    // AST REWRITE
                    // elements: method_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1089:24: -> ^( STATIC_METHOD method_declaration4 )
                    {
                        // Objcm.g:1089:27: ^( STATIC_METHOD method_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_end"


    public static class field_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration4"
    // Objcm.g:1092:1: field_declaration4 : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_declaration4_return field_declaration4() throws RecognitionException {
        ObjcmParser.field_declaration4_return retval = new ObjcmParser.field_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON711=null;
        ObjcmParser.value_set_return value_set710 =null;


        Object SEMICOLON711_tree=null;

        try {
            // Objcm.g:1093:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:1093:5: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1093:5: ( value_set )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==L_EQ) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // Objcm.g:1093:5: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_declaration45901);
                    value_set710=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set710.getTree());

                    }
                    break;

            }


            SEMICOLON711=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration45904); 
            SEMICOLON711_tree = 
            (Object)adaptor.create(SEMICOLON711)
            ;
            adaptor.addChild(root_0, SEMICOLON711_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration4"


    public static class method_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration4"
    // Objcm.g:1096:1: method_declaration4 : method_params2 block_wrapper ;
    public final ObjcmParser.method_declaration4_return method_declaration4() throws RecognitionException {
        ObjcmParser.method_declaration4_return retval = new ObjcmParser.method_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2712 =null;

        ObjcmParser.block_wrapper_return block_wrapper713 =null;



        try {
            // Objcm.g:1097:2: ( method_params2 block_wrapper )
            // Objcm.g:1097:5: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_declaration45917);
            method_params2712=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2712.getTree());

            pushFollow(FOLLOW_block_wrapper_in_method_declaration45922);
            block_wrapper713=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper713.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration4"


    public static class field_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier_wrapper"
    // Objcm.g:1101:1: field_modifier_wrapper : field_modifier -> ^( MODIFIER field_modifier ) ;
    public final ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper() throws RecognitionException {
        ObjcmParser.field_modifier_wrapper_return retval = new ObjcmParser.field_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_return field_modifier714 =null;


        RewriteRuleSubtreeStream stream_field_modifier=new RewriteRuleSubtreeStream(adaptor,"rule field_modifier");
        try {
            // Objcm.g:1102:2: ( field_modifier -> ^( MODIFIER field_modifier ) )
            // Objcm.g:1102:4: field_modifier
            {
            pushFollow(FOLLOW_field_modifier_in_field_modifier_wrapper5934);
            field_modifier714=field_modifier();

            state._fsp--;

            stream_field_modifier.add(field_modifier714.getTree());

            // AST REWRITE
            // elements: field_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1102:19: -> ^( MODIFIER field_modifier )
            {
                // Objcm.g:1102:22: ^( MODIFIER field_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_field_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier_wrapper"


    public static class field_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier"
    // Objcm.g:1104:1: field_modifier : 'extern' ;
    public final ObjcmParser.field_modifier_return field_modifier() throws RecognitionException {
        ObjcmParser.field_modifier_return retval = new ObjcmParser.field_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal715=null;

        Object string_literal715_tree=null;

        try {
            // Objcm.g:1105:2: ( 'extern' )
            // Objcm.g:1105:4: 'extern'
            {
            root_0 = (Object)adaptor.nil();


            string_literal715=(Token)match(input,189,FOLLOW_189_in_field_modifier5952); 
            string_literal715_tree = 
            (Object)adaptor.create(string_literal715)
            ;
            adaptor.addChild(root_0, string_literal715_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier"


    public static class field_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type"
    // Objcm.g:1108:1: field_type : field_type_internal -> ^( TYPE field_type_internal ) ;
    public final ObjcmParser.field_type_return field_type() throws RecognitionException {
        ObjcmParser.field_type_return retval = new ObjcmParser.field_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_internal_return field_type_internal716 =null;


        RewriteRuleSubtreeStream stream_field_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_type_internal");
        try {
            // Objcm.g:1109:2: ( field_type_internal -> ^( TYPE field_type_internal ) )
            // Objcm.g:1109:5: field_type_internal
            {
            pushFollow(FOLLOW_field_type_internal_in_field_type5964);
            field_type_internal716=field_type_internal();

            state._fsp--;

            stream_field_type_internal.add(field_type_internal716.getTree());

            // AST REWRITE
            // elements: field_type_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1109:25: -> ^( TYPE field_type_internal )
            {
                // Objcm.g:1109:28: ^( TYPE field_type_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE, "TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type"


    public static class field_type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_internal"
    // Objcm.g:1111:1: field_type_internal : type_internal ( generic )? ( ASTERISK )* ;
    public final ObjcmParser.field_type_internal_return field_type_internal() throws RecognitionException {
        ObjcmParser.field_type_internal_return retval = new ObjcmParser.field_type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK719=null;
        ObjcmParser.type_internal_return type_internal717 =null;

        ObjcmParser.generic_return generic718 =null;


        Object ASTERISK719_tree=null;

        try {
            // Objcm.g:1112:2: ( type_internal ( generic )? ( ASTERISK )* )
            // Objcm.g:1112:4: type_internal ( generic )? ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_field_type_internal5983);
            type_internal717=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal717.getTree());

            // Objcm.g:1112:18: ( generic )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==L_LESS) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // Objcm.g:1112:18: generic
                    {
                    pushFollow(FOLLOW_generic_in_field_type_internal5985);
                    generic718=generic();

                    state._fsp--;

                    adaptor.addChild(root_0, generic718.getTree());

                    }
                    break;

            }


            // Objcm.g:1112:27: ( ASTERISK )*
            loop202:
            do {
                int alt202=2;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==ASTERISK) ) {
                    alt202=1;
                }


                switch (alt202) {
            	case 1 :
            	    // Objcm.g:1112:27: ASTERISK
            	    {
            	    ASTERISK719=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_field_type_internal5988); 
            	    ASTERISK719_tree = 
            	    (Object)adaptor.create(ASTERISK719)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK719_tree);


            	    }
            	    break;

            	default :
            	    break loop202;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_internal"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // Objcm.g:1118:1: name : name_internal -> ^( NAME name_internal ) ;
    public final ObjcmParser.name_return name() throws RecognitionException {
        ObjcmParser.name_return retval = new ObjcmParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal720 =null;


        RewriteRuleSubtreeStream stream_name_internal=new RewriteRuleSubtreeStream(adaptor,"rule name_internal");
        try {
            // Objcm.g:1118:6: ( name_internal -> ^( NAME name_internal ) )
            // Objcm.g:1118:8: name_internal
            {
            pushFollow(FOLLOW_name_internal_in_name6001);
            name_internal720=name_internal();

            state._fsp--;

            stream_name_internal.add(name_internal720.getTree());

            // AST REWRITE
            // elements: name_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1118:22: -> ^( NAME name_internal )
            {
                // Objcm.g:1118:25: ^( NAME name_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, stream_name_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_internal"
    // Objcm.g:1121:1: name_internal : ( ID | 'in' | property );
    public final ObjcmParser.name_internal_return name_internal() throws RecognitionException {
        ObjcmParser.name_internal_return retval = new ObjcmParser.name_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID721=null;
        Token string_literal722=null;
        ObjcmParser.property_return property723 =null;


        Object ID721_tree=null;
        Object string_literal722_tree=null;

        try {
            // Objcm.g:1122:2: ( ID | 'in' | property )
            int alt203=3;
            switch ( input.LA(1) ) {
            case ID:
                {
                alt203=1;
                }
                break;
            case 193:
                {
                alt203=2;
                }
                break;
            case 182:
            case 185:
            case 196:
                {
                alt203=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                throw nvae;

            }

            switch (alt203) {
                case 1 :
                    // Objcm.g:1122:4: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID721=(Token)match(input,ID,FOLLOW_ID_in_name_internal6022); 
                    ID721_tree = 
                    (Object)adaptor.create(ID721)
                    ;
                    adaptor.addChild(root_0, ID721_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:1123:5: 'in'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal722=(Token)match(input,193,FOLLOW_193_in_name_internal6029); 
                    string_literal722_tree = 
                    (Object)adaptor.create(string_literal722)
                    ;
                    adaptor.addChild(root_0, string_literal722_tree);


                    }
                    break;
                case 3 :
                    // Objcm.g:1124:5: property
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_property_in_name_internal6036);
                    property723=property();

                    state._fsp--;

                    adaptor.addChild(root_0, property723.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_internal"


    public static class value_set_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value_set"
    // Objcm.g:1127:1: value_set : L_EQ value -> ^( VALUE value ) ;
    public final ObjcmParser.value_set_return value_set() throws RecognitionException {
        ObjcmParser.value_set_return retval = new ObjcmParser.value_set_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_EQ724=null;
        ObjcmParser.value_return value725 =null;


        Object L_EQ724_tree=null;
        RewriteRuleTokenStream stream_L_EQ=new RewriteRuleTokenStream(adaptor,"token L_EQ");
        RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
        try {
            // Objcm.g:1128:2: ( L_EQ value -> ^( VALUE value ) )
            // Objcm.g:1128:4: L_EQ value
            {
            L_EQ724=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_value_set6047);  
            stream_L_EQ.add(L_EQ724);


            pushFollow(FOLLOW_value_in_value_set6050);
            value725=value();

            state._fsp--;

            stream_value.add(value725.getTree());

            // AST REWRITE
            // elements: value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1128:16: -> ^( VALUE value )
            {
                // Objcm.g:1128:19: ^( VALUE value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VALUE, "VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "value_set"


    public static class value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value"
    // Objcm.g:1130:1: value : ( ID | string_value | null_stmt | array | NUMBER | struct_init2 );
    public final ObjcmParser.value_return value() throws RecognitionException {
        ObjcmParser.value_return retval = new ObjcmParser.value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID726=null;
        Token NUMBER730=null;
        ObjcmParser.string_value_return string_value727 =null;

        ObjcmParser.null_stmt_return null_stmt728 =null;

        ObjcmParser.array_return array729 =null;

        ObjcmParser.struct_init2_return struct_init2731 =null;


        Object ID726_tree=null;
        Object NUMBER730_tree=null;

        try {
            // Objcm.g:1130:7: ( ID | string_value | null_stmt | array | NUMBER | struct_init2 )
            int alt204=6;
            alt204 = dfa204.predict(input);
            switch (alt204) {
                case 1 :
                    // Objcm.g:1130:9: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID726=(Token)match(input,ID,FOLLOW_ID_in_value6066); 
                    ID726_tree = 
                    (Object)adaptor.create(ID726)
                    ;
                    adaptor.addChild(root_0, ID726_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:1130:14: string_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_string_value_in_value6070);
                    string_value727=string_value();

                    state._fsp--;

                    adaptor.addChild(root_0, string_value727.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:1130:29: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_value6074);
                    null_stmt728=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt728.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:1130:41: array
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_in_value6078);
                    array729=array();

                    state._fsp--;

                    adaptor.addChild(root_0, array729.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:1130:49: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER730=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_value6082); 
                    NUMBER730_tree = 
                    (Object)adaptor.create(NUMBER730)
                    ;
                    adaptor.addChild(root_0, NUMBER730_tree);


                    }
                    break;
                case 6 :
                    // Objcm.g:1130:58: struct_init2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init2_in_value6086);
                    struct_init2731=struct_init2();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init2731.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "value"


    public static class string_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_value"
    // Objcm.g:1132:1: string_value : STRING_LITERAL ;
    public final ObjcmParser.string_value_return string_value() throws RecognitionException {
        ObjcmParser.string_value_return retval = new ObjcmParser.string_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL732=null;

        Object STRING_LITERAL732_tree=null;

        try {
            // Objcm.g:1133:2: ( STRING_LITERAL )
            // Objcm.g:1133:4: STRING_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL732=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string_value6096); 
            STRING_LITERAL732_tree = 
            (Object)adaptor.create(STRING_LITERAL732)
            ;
            adaptor.addChild(root_0, STRING_LITERAL732_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_value"


    public static class null_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_stmt"
    // Objcm.g:1135:1: null_stmt : ( 'nil' | 'Nil' );
    public final ObjcmParser.null_stmt_return null_stmt() throws RecognitionException {
        ObjcmParser.null_stmt_return retval = new ObjcmParser.null_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set733=null;

        Object set733_tree=null;

        try {
            // Objcm.g:1135:11: ( 'nil' | 'Nil' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set733=(Token)input.LT(1);

            if ( input.LA(1)==179||input.LA(1)==195 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set733)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_stmt"


    public static class array_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array"
    // Objcm.g:1137:1: array : L_FBR value ( COMMA value )* R_FBR ;
    public final ObjcmParser.array_return array() throws RecognitionException {
        ObjcmParser.array_return retval = new ObjcmParser.array_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR734=null;
        Token COMMA736=null;
        Token R_FBR738=null;
        ObjcmParser.value_return value735 =null;

        ObjcmParser.value_return value737 =null;


        Object L_FBR734_tree=null;
        Object COMMA736_tree=null;
        Object R_FBR738_tree=null;

        try {
            // Objcm.g:1137:7: ( L_FBR value ( COMMA value )* R_FBR )
            // Objcm.g:1137:9: L_FBR value ( COMMA value )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR734=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array6117); 
            L_FBR734_tree = 
            (Object)adaptor.create(L_FBR734)
            ;
            adaptor.addChild(root_0, L_FBR734_tree);


            pushFollow(FOLLOW_value_in_array6120);
            value735=value();

            state._fsp--;

            adaptor.addChild(root_0, value735.getTree());

            // Objcm.g:1137:23: ( COMMA value )*
            loop205:
            do {
                int alt205=2;
                int LA205_0 = input.LA(1);

                if ( (LA205_0==COMMA) ) {
                    alt205=1;
                }


                switch (alt205) {
            	case 1 :
            	    // Objcm.g:1137:24: COMMA value
            	    {
            	    COMMA736=(Token)match(input,COMMA,FOLLOW_COMMA_in_array6124); 
            	    COMMA736_tree = 
            	    (Object)adaptor.create(COMMA736)
            	    ;
            	    adaptor.addChild(root_0, COMMA736_tree);


            	    pushFollow(FOLLOW_value_in_array6127);
            	    value737=value();

            	    state._fsp--;

            	    adaptor.addChild(root_0, value737.getTree());

            	    }
            	    break;

            	default :
            	    break loop205;
                }
            } while (true);


            R_FBR738=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array6131); 
            R_FBR738_tree = 
            (Object)adaptor.create(R_FBR738)
            ;
            adaptor.addChild(root_0, R_FBR738_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array"

    // Delegated rules


    protected DFA30 dfa30 = new DFA30(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA182 dfa182 = new DFA182(this);
    protected DFA204 dfa204 = new DFA204(this);
    static final String DFA30_eotS =
        "\u01ab\uffff";
    static final String DFA30_eofS =
        "\u01ab\uffff";
    static final String DFA30_minS =
        "\1\6\15\uffff\1\6\33\uffff\3\6\2\uffff\2\6\2\66\2\uffff\1\6\12\uffff"+
        "\2\6\7\uffff\2\6\2\66\15\uffff\2\6\6\uffff\2\6\2\66\15\uffff\2\6"+
        "\u0136\uffff";
    static final String DFA30_maxS =
        "\1\u00ca\15\uffff\1\u00c9\33\uffff\3\u00c9\2\uffff\2\u00c9\2\u00c4"+
        "\2\uffff\1\u00c9\12\uffff\2\u00c9\7\uffff\2\u00c9\2\u00c4\15\uffff"+
        "\2\u00c9\6\uffff\2\u00c9\2\u00c4\15\uffff\2\u00c9\u0136\uffff";
    static final String DFA30_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\24\uffff\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\uffff\1\16\1\17\1\20\1\21\1\22\1\23\1\24\34\uffff\1"+
        "\6\31\uffff\1\6\30\uffff\1\6\1\uffff\26\6\1\uffff\35\6\24\uffff"+
        "\26\6\10\uffff\4\6\12\uffff\110\6\10\uffff\4\6\12\uffff\110\6\10"+
        "\uffff\4\6\12\uffff";
    static final String DFA30_specialS =
        "\u01ab\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\6\2\uffff\1\41\11\uffff\1\5\6\uffff\1\44\33\uffff\1\6\11"+
            "\uffff\1\6\2\uffff\1\6\5\uffff\1\6\4\uffff\1\6\1\uffff\1\6\4"+
            "\uffff\1\6\5\uffff\1\6\1\uffff\1\6\3\uffff\1\6\16\uffff\1\6"+
            "\16\uffff\1\47\2\uffff\1\41\1\6\2\uffff\1\3\3\uffff\3\6\1\uffff"+
            "\1\43\17\uffff\1\46\7\uffff\1\6\6\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\1\2\1\1\1\6\1\uffff\1\45\1\6\2\uffff\1\6\1\uffff\1\4\1\34\1"+
            "\51\1\37\1\50\1\33\1\6\1\uffff\2\6\1\36\1\35\2\uffff\1\16\1"+
            "\40",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\46\57\uffff\1\52\147\uffff\1\46\27\uffff\1\54\2\uffff\1"+
            "\54\7\uffff\1\53\2\uffff\1\54\4\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\65\11\uffff\1\106\1\101\5\uffff\1\61\36\uffff\1\6\11\uffff"+
            "\2\6\1\100\1\57\1\106\2\100\1\6\1\uffff\1\60\1\6\1\100\3\6\1"+
            "\100\3\6\1\100\1\6\1\uffff\1\6\1\100\1\6\1\106\1\100\1\6\1\100"+
            "\3\6\1\100\1\uffff\1\6\1\100\33\uffff\1\106\36\uffff\1\6\4\uffff"+
            "\1\62\22\uffff\1\6\2\uffff\1\6\7\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\1\6",
            "\1\106\11\uffff\1\140\1\133\5\uffff\1\113\36\uffff\1\106\11"+
            "\uffff\2\106\1\132\1\111\1\106\2\132\1\106\1\uffff\1\112\1\106"+
            "\1\132\3\106\1\132\3\106\1\132\1\106\1\uffff\1\106\1\132\2\106"+
            "\1\132\1\106\1\132\3\106\1\132\1\uffff\1\106\1\132\33\uffff"+
            "\1\140\36\uffff\1\106\4\uffff\1\114\22\uffff\1\106\2\uffff\1"+
            "\106\7\uffff\1\106\2\uffff\1\106\4\uffff\1\106",
            "\1\140\11\uffff\1\171\1\164\5\uffff\1\144\36\uffff\1\140\11"+
            "\uffff\2\140\1\163\1\142\1\140\2\163\1\140\1\uffff\1\143\1\140"+
            "\1\163\3\140\1\163\3\140\1\163\1\140\1\uffff\1\140\1\163\2\140"+
            "\1\163\1\140\1\163\3\140\1\163\1\uffff\1\140\1\163\33\uffff"+
            "\1\171\36\uffff\1\140\4\uffff\1\145\22\uffff\1\140\2\uffff\1"+
            "\140\7\uffff\1\140\2\uffff\1\140\4\uffff\1\140",
            "",
            "",
            "\1\174\57\uffff\1\u0084\11\uffff\1\175\2\uffff\1\173\5\uffff"+
            "\1\u0087\4\uffff\1\176\1\uffff\1\u0082\4\uffff\1\177\5\uffff"+
            "\1\176\1\uffff\1\u0082\3\uffff\1\u0080\16\uffff\1\u0088\11\uffff"+
            "\1\u0090\10\uffff\1\u0081\6\uffff\1\u0089\1\u008a\1\u008b\21"+
            "\uffff\1\46\7\uffff\1\u008e\6\uffff\1\u008f\1\uffff\1\u008d"+
            "\3\uffff\1\u008c\2\uffff\1\u0086\2\uffff\1\u0086\7\uffff\1\u0085"+
            "\1\uffff\1\u008c\1\u0086\4\uffff\1\u0083",
            "\1\u0094\57\uffff\1\u009c\11\uffff\1\u0095\2\uffff\1\u0093"+
            "\5\uffff\1\u009f\4\uffff\1\u0096\1\uffff\1\u009a\4\uffff\1\u0097"+
            "\5\uffff\1\u0096\1\uffff\1\u009a\3\uffff\1\u0098\16\uffff\1"+
            "\u00a0\13\uffff\1\u0092\6\uffff\1\u0099\6\uffff\1\u00a1\1\u00a2"+
            "\1\u00a3\31\uffff\1\u00a6\6\uffff\1\u00a7\1\uffff\1\u00a5\3"+
            "\uffff\1\u00a4\2\uffff\1\u009e\2\uffff\1\u009e\7\uffff\1\u009d"+
            "\1\uffff\1\u00a4\1\u009e\4\uffff\1\u009b",
            "\1\u00a8\177\uffff\1\u00aa\2\uffff\1\u00aa\7\uffff\1\u00a9"+
            "\2\uffff\1\u00aa",
            "\1\u00ab\177\uffff\1\u00ad\2\uffff\1\u00ad\7\uffff\1\u00ac"+
            "\2\uffff\1\u00ad",
            "",
            "",
            "\1\171\57\uffff\1\171\11\uffff\1\171\2\uffff\1\u00ae\5\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\31\uffff\1\171\6\uffff\1\171\1\uffff\1\171\3\uffff"+
            "\1\171\2\uffff\1\171\2\uffff\1\171\7\uffff\1\171\1\uffff\2\171"+
            "\4\uffff\1\171",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c4\57\uffff\1\u00cc\11\uffff\1\u00c5\2\uffff\1\u00c3"+
            "\4\uffff\1\u00d8\1\u00cf\4\uffff\1\u00c6\1\uffff\1\u00ca\4\uffff"+
            "\1\u00c7\5\uffff\1\u00c6\1\uffff\1\u00ca\3\uffff\1\u00c8\16"+
            "\uffff\1\u00d0\22\uffff\1\u00c9\6\uffff\1\u00d1\1\u00d2\1\u00d3"+
            "\31\uffff\1\u00d6\6\uffff\1\u00d7\1\uffff\1\u00d5\3\uffff\1"+
            "\u00d4\2\uffff\1\u00ce\2\uffff\1\u00ce\7\uffff\1\u00cd\1\uffff"+
            "\1\u00d4\1\u00ce\4\uffff\1\u00cb",
            "\1\171\57\uffff\1\u00e2\11\uffff\1\171\2\uffff\1\171\5\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\21\uffff\1\46\7\uffff\1\171\6\uffff\1\171\1\uffff"+
            "\1\171\3\uffff\1\171\2\uffff\1\u00e4\2\uffff\1\u00e4\7\uffff"+
            "\1\u00e3\1\uffff\1\171\1\u00e4\4\uffff\1\u00e1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00f0\57\uffff\1\u00f8\11\uffff\1\u00f1\2\uffff\1\u00ef"+
            "\5\uffff\1\u00fb\4\uffff\1\u00f2\1\uffff\1\u00f6\4\uffff\1\u00f3"+
            "\5\uffff\1\u00f2\1\uffff\1\u00f6\3\uffff\1\u00f4\16\uffff\1"+
            "\u00fc\11\uffff\1\u0104\10\uffff\1\u00f5\6\uffff\1\u00fd\1\u00fe"+
            "\1\u00ff\31\uffff\1\u0102\6\uffff\1\u0103\1\uffff\1\u0101\3"+
            "\uffff\1\u0100\2\uffff\1\u00fa\2\uffff\1\u00fa\7\uffff\1\u00f9"+
            "\1\uffff\1\u0100\1\u00fa\4\uffff\1\u00f7",
            "\1\u0106\57\uffff\1\u010e\11\uffff\1\u0107\2\uffff\1\u0105"+
            "\5\uffff\1\u0111\4\uffff\1\u0108\1\uffff\1\u010c\4\uffff\1\u0109"+
            "\5\uffff\1\u0108\1\uffff\1\u010c\3\uffff\1\u010a\16\uffff\1"+
            "\u0112\13\uffff\1\u011a\6\uffff\1\u010b\6\uffff\1\u0113\1\u0114"+
            "\1\u0115\31\uffff\1\u0118\6\uffff\1\u0119\1\uffff\1\u0117\3"+
            "\uffff\1\u0116\2\uffff\1\u0110\2\uffff\1\u0110\7\uffff\1\u010f"+
            "\1\uffff\1\u0116\1\u0110\4\uffff\1\u010d",
            "\1\u011b\177\uffff\1\u011d\2\uffff\1\u011d\7\uffff\1\u011c"+
            "\2\uffff\1\u011d",
            "\1\u011e\177\uffff\1\u0120\2\uffff\1\u0120\7\uffff\1\u011f"+
            "\2\uffff\1\u0120",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0122\57\uffff\1\u012a\11\uffff\1\u0123\2\uffff\1\u0121"+
            "\4\uffff\1\u0136\1\u012d\4\uffff\1\u0124\1\uffff\1\u0128\4\uffff"+
            "\1\u0125\5\uffff\1\u0124\1\uffff\1\u0128\3\uffff\1\u0126\16"+
            "\uffff\1\u012e\22\uffff\1\u0127\6\uffff\1\u012f\1\u0130\1\u0131"+
            "\31\uffff\1\u0134\6\uffff\1\u0135\1\uffff\1\u0133\3\uffff\1"+
            "\u0132\2\uffff\1\u012c\2\uffff\1\u012c\7\uffff\1\u012b\1\uffff"+
            "\1\u0132\1\u012c\4\uffff\1\u0129",
            "\1\171\57\uffff\1\u0140\11\uffff\1\171\2\uffff\1\171\5\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\21\uffff\1\46\7\uffff\1\171\6\uffff\1\171\1\uffff"+
            "\1\171\3\uffff\1\171\2\uffff\1\u0142\2\uffff\1\u0142\7\uffff"+
            "\1\u0141\1\uffff\1\171\1\u0142\4\uffff\1\u013f",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u014e\57\uffff\1\u0156\11\uffff\1\u014f\2\uffff\1\u014d"+
            "\5\uffff\1\u0159\4\uffff\1\u0150\1\uffff\1\u0154\4\uffff\1\u0151"+
            "\5\uffff\1\u0150\1\uffff\1\u0154\3\uffff\1\u0152\16\uffff\1"+
            "\u015a\11\uffff\1\u0162\10\uffff\1\u0153\6\uffff\1\u015b\1\u015c"+
            "\1\u015d\31\uffff\1\u0160\6\uffff\1\u0161\1\uffff\1\u015f\3"+
            "\uffff\1\u015e\2\uffff\1\u0158\2\uffff\1\u0158\7\uffff\1\u0157"+
            "\1\uffff\1\u015e\1\u0158\4\uffff\1\u0155",
            "\1\u0164\57\uffff\1\u016c\11\uffff\1\u0165\2\uffff\1\u0163"+
            "\5\uffff\1\u016f\4\uffff\1\u0166\1\uffff\1\u016a\4\uffff\1\u0167"+
            "\5\uffff\1\u0166\1\uffff\1\u016a\3\uffff\1\u0168\16\uffff\1"+
            "\u0170\13\uffff\1\u0178\6\uffff\1\u0169\6\uffff\1\u0171\1\u0172"+
            "\1\u0173\31\uffff\1\u0176\6\uffff\1\u0177\1\uffff\1\u0175\3"+
            "\uffff\1\u0174\2\uffff\1\u016e\2\uffff\1\u016e\7\uffff\1\u016d"+
            "\1\uffff\1\u0174\1\u016e\4\uffff\1\u016b",
            "\1\u0179\177\uffff\1\u017b\2\uffff\1\u017b\7\uffff\1\u017a"+
            "\2\uffff\1\u017b",
            "\1\u017c\177\uffff\1\u017e\2\uffff\1\u017e\7\uffff\1\u017d"+
            "\2\uffff\1\u017e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0180\57\uffff\1\u0188\11\uffff\1\u0181\2\uffff\1\u017f"+
            "\4\uffff\1\u0194\1\u018b\4\uffff\1\u0182\1\uffff\1\u0186\4\uffff"+
            "\1\u0183\5\uffff\1\u0182\1\uffff\1\u0186\3\uffff\1\u0184\16"+
            "\uffff\1\u018c\22\uffff\1\u0185\6\uffff\1\u018d\1\u018e\1\u018f"+
            "\31\uffff\1\u0192\6\uffff\1\u0193\1\uffff\1\u0191\3\uffff\1"+
            "\u0190\2\uffff\1\u018a\2\uffff\1\u018a\7\uffff\1\u0189\1\uffff"+
            "\1\u0190\1\u018a\4\uffff\1\u0187",
            "\1\171\57\uffff\1\u019e\11\uffff\1\171\2\uffff\1\171\5\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\21\uffff\1\46\7\uffff\1\171\6\uffff\1\171\1\uffff"+
            "\1\171\3\uffff\1\171\2\uffff\1\u01a0\2\uffff\1\u01a0\7\uffff"+
            "\1\u019f\1\uffff\1\171\1\u01a0\4\uffff\1\u019d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "284:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper | 'extern' );";
        }
    }
    static final String DFA50_eotS =
        "\u0210\uffff";
    static final String DFA50_eofS =
        "\u0210\uffff";
    static final String DFA50_minS =
        "\1\66\1\21\6\uffff\1\27\1\uffff\2\6\15\uffff\2\6\20\uffff\4\6\1"+
        "\66\1\6\20\uffff\1\6\10\66\3\6\1\66\5\6\3\103\u01ba\uffff";
    static final String DFA50_maxS =
        "\2\u00c9\6\uffff\1\u00c9\1\uffff\2\u00c9\15\uffff\2\u00c9\20\uffff"+
        "\1\u00c9\5\u00c4\20\uffff\10\u00c9\1\u00c4\3\u00a3\1\u00c4\5\172"+
        "\3\103\u01ba\uffff";
    static final String DFA50_acceptS =
        "\2\uffff\1\2\2\uffff\1\3\1\1\120\uffff\25\1\1\uffff\1\1\10\uffff"+
        "\4\1\1\uffff\1\1\7\uffff\3\1\10\uffff\1\1\13\uffff\4\1\21\uffff"+
        "\4\1\21\uffff\4\1\21\uffff\6\1\20\uffff\u00a4\1\1\uffff\23\1\1\uffff"+
        "\23\1\1\uffff\24\1\1\uffff\16\1\1\uffff\16\1\1\uffff\16\1\1\uffff"+
        "\16\1\1\uffff\3\1";
    static final String DFA50_specialS =
        "\u0210\uffff}>";
    static final String[] DFA50_transitionS = {
            "\1\2\110\uffff\1\5\36\uffff\1\2\27\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\1\2\uffff\1\2\4\uffff\1\2",
            "\1\2\5\uffff\1\2\36\uffff\1\6\13\uffff\1\2\1\13\1\uffff\2\2"+
            "\2\uffff\1\12\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\14\uffff"+
            "\1\6\16\uffff\1\2\12\uffff\3\6\26\uffff\1\2\2\uffff\1\6\6\uffff"+
            "\1\6\1\uffff\1\6\3\uffff\1\6\2\uffff\1\6\2\uffff\1\6\7\uffff"+
            "\1\10\1\uffff\2\6\4\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\6\36\uffff\1\2\14\uffff\1\31\5\uffff\1\32\2\uffff\1\6\43"+
            "\uffff\1\2\11\uffff\1\6\17\uffff\3\2\26\uffff\1\6\2\uffff\1"+
            "\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1"+
            "\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "\1\2\57\uffff\1\54\11\uffff\1\2\2\uffff\1\53\5\uffff\1\57\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\13\uffff\1\2\6\uffff\1\2\6\uffff\1\60"+
            "\2\2\31\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\56\2\uffff\1\56\7\uffff\1\55\1\uffff\1\2\1\56\4\uffff\1\2",
            "\1\102\57\uffff\1\112\11\uffff\1\103\2\uffff\1\101\5\uffff"+
            "\1\115\4\uffff\1\104\1\uffff\1\110\4\uffff\1\105\5\uffff\1\104"+
            "\1\uffff\1\110\3\uffff\1\106\16\uffff\1\116\11\uffff\1\2\10"+
            "\uffff\1\107\6\uffff\1\117\1\120\1\121\31\uffff\1\124\6\uffff"+
            "\1\125\1\uffff\1\123\3\uffff\1\122\2\uffff\1\114\2\uffff\1\114"+
            "\7\uffff\1\113\1\uffff\1\122\1\114\4\uffff\1\111",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\130\57\uffff\1\140\11\uffff\1\131\2\uffff\1\127\5\uffff"+
            "\1\143\4\uffff\1\132\1\uffff\1\136\4\uffff\1\133\5\uffff\1\132"+
            "\1\uffff\1\136\3\uffff\1\134\16\uffff\1\144\11\uffff\1\6\10"+
            "\uffff\1\135\6\uffff\1\145\1\146\1\147\31\uffff\1\152\6\uffff"+
            "\1\153\1\uffff\1\151\3\uffff\1\150\2\uffff\1\142\2\uffff\1\142"+
            "\7\uffff\1\141\1\uffff\1\150\1\142\4\uffff\1\137",
            "\1\6\57\uffff\1\166\11\uffff\1\6\2\uffff\1\155\5\uffff\1\171"+
            "\4\uffff\1\6\1\uffff\1\6\4\uffff\1\6\5\uffff\1\6\1\uffff\1\6"+
            "\3\uffff\1\6\16\uffff\1\6\13\uffff\1\6\6\uffff\1\6\6\uffff\1"+
            "\173\2\6\31\uffff\1\6\6\uffff\1\6\1\uffff\1\6\3\uffff\1\6\2"+
            "\uffff\1\170\2\uffff\1\170\7\uffff\1\167\1\uffff\1\6\1\170\4"+
            "\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\14\uffff\1\u0083\42\uffff\1\u0085\11\uffff\1\2\2\uffff"+
            "\1\2\5\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff"+
            "\3\2\21\uffff\1\u008e\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4"+
            "\uffff\1\u0084",
            "\1\2\20\uffff\1\u009c\36\uffff\1\6\11\uffff\3\2\1\u009a\4\2"+
            "\1\uffff\1\u009b\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff\1\2"+
            "\46\uffff\1\u009d\22\uffff\1\6\2\uffff\1\6\12\uffff\1\6",
            "\1\2\20\uffff\1\u00b1\36\uffff\1\6\11\uffff\3\2\1\u00af\4\2"+
            "\1\uffff\1\u00b0\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff\1\2"+
            "\46\uffff\1\u00b2\22\uffff\1\6\2\uffff\1\6\12\uffff\1\6",
            "\1\2\20\uffff\1\u00c6\36\uffff\1\6\11\uffff\3\2\1\u00c4\4\2"+
            "\1\uffff\1\u00c5\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff\1\2"+
            "\46\uffff\1\u00c7\22\uffff\1\6\2\uffff\1\6\12\uffff\1\6",
            "\1\u00da\14\uffff\1\u00d9\5\uffff\1\u00dd\100\uffff\1\u00de"+
            "\53\uffff\1\u00dc\2\uffff\1\u00dc\7\uffff\1\u00db\2\uffff\1"+
            "\u00dc",
            "\1\2\57\uffff\1\6\11\uffff\3\2\1\uffff\4\2\2\uffff\13\2\1\uffff"+
            "\13\2\1\uffff\2\2\30\uffff\1\2\71\uffff\1\6\2\uffff\1\6\12\uffff"+
            "\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00f3\14\uffff\1\u00ef\42\uffff\1\u00f1\11\uffff\1\u00f4"+
            "\2\uffff\1\u00f2\5\uffff\1\u00fd\4\uffff\1\u00f5\1\uffff\1\u00f9"+
            "\4\uffff\1\u00f6\5\uffff\1\u00f5\1\uffff\1\u00f9\3\uffff\1\u00f7"+
            "\16\uffff\1\u00fe\22\uffff\1\u00f8\6\uffff\1\u00ff\1\u0100\1"+
            "\u0101\21\uffff\1\u00fa\7\uffff\1\u0104\6\uffff\1\u0105\1\uffff"+
            "\1\u0103\3\uffff\1\u0102\2\uffff\1\u00fc\2\uffff\1\u00fc\7\uffff"+
            "\1\u00fb\1\uffff\1\u0102\1\u00fc\4\uffff\1\u00f0",
            "\1\u010e\11\uffff\1\u0107\2\uffff\1\u0106\5\uffff\1\u0111\4"+
            "\uffff\1\u0108\1\uffff\1\u010c\4\uffff\1\u0109\5\uffff\1\u0108"+
            "\1\uffff\1\u010c\3\uffff\1\u010a\16\uffff\1\u0112\22\uffff\1"+
            "\u010b\6\uffff\1\u0113\1\u0114\1\u0115\31\uffff\1\u0118\6\uffff"+
            "\1\u0119\1\uffff\1\u0117\3\uffff\1\u0116\2\uffff\1\u0110\2\uffff"+
            "\1\u0110\7\uffff\1\u010f\1\uffff\1\u0116\1\u0110\4\uffff\1\u010d",
            "\1\u0120\14\uffff\1\u0124\5\uffff\1\u0123\4\uffff\1\u011a\1"+
            "\uffff\1\u011e\4\uffff\1\u011b\5\uffff\1\u011a\1\uffff\1\u011e"+
            "\3\uffff\1\u011c\16\uffff\1\u0125\22\uffff\1\u011d\6\uffff\1"+
            "\u0126\1\u0127\1\u0128\31\uffff\1\u012b\6\uffff\1\u012c\1\uffff"+
            "\1\u012a\3\uffff\1\u0129\2\uffff\1\u0122\2\uffff\1\u0122\7\uffff"+
            "\1\u0121\1\uffff\1\u0129\1\u0122\4\uffff\1\u011f",
            "\1\u0132\14\uffff\1\u0136\5\uffff\1\u0135\6\uffff\1\u0130\4"+
            "\uffff\1\u012d\7\uffff\1\u0130\3\uffff\1\u012e\16\uffff\1\u0137"+
            "\22\uffff\1\u012f\6\uffff\1\u0138\1\u0139\1\u013a\31\uffff\1"+
            "\u013d\6\uffff\1\u013e\1\uffff\1\u013c\3\uffff\1\u013b\2\uffff"+
            "\1\u0134\2\uffff\1\u0134\7\uffff\1\u0133\1\uffff\1\u013b\1\u0134"+
            "\4\uffff\1\u0131",
            "\1\u0143\14\uffff\1\u0147\5\uffff\1\u0146\6\uffff\1\u0141\14"+
            "\uffff\1\u0141\3\uffff\1\u013f\16\uffff\1\u0148\22\uffff\1\u0140"+
            "\6\uffff\1\u0149\1\u014a\1\u014b\31\uffff\1\u014e\6\uffff\1"+
            "\u014f\1\uffff\1\u014d\3\uffff\1\u014c\2\uffff\1\u0145\2\uffff"+
            "\1\u0145\7\uffff\1\u0144\1\uffff\1\u014c\1\u0145\4\uffff\1\u0142",
            "\1\u0153\14\uffff\1\u0157\5\uffff\1\u0156\6\uffff\1\u0151\14"+
            "\uffff\1\u0151\22\uffff\1\u0158\22\uffff\1\u0150\6\uffff\1\u0159"+
            "\1\u015a\1\u015b\31\uffff\1\u015e\6\uffff\1\u015f\1\uffff\1"+
            "\u015d\3\uffff\1\u015c\2\uffff\1\u0155\2\uffff\1\u0155\7\uffff"+
            "\1\u0154\1\uffff\1\u015c\1\u0155\4\uffff\1\u0152",
            "\1\u0162\14\uffff\1\u0166\5\uffff\1\u0165\6\uffff\1\u0160\14"+
            "\uffff\1\u0160\22\uffff\1\u0167\31\uffff\1\u0168\1\u0169\1\u016a"+
            "\31\uffff\1\u016d\6\uffff\1\u016e\1\uffff\1\u016c\3\uffff\1"+
            "\u016b\2\uffff\1\u0164\2\uffff\1\u0164\7\uffff\1\u0163\1\uffff"+
            "\1\u016b\1\u0164\4\uffff\1\u0161",
            "\1\u0170\14\uffff\1\u0174\5\uffff\1\u0173\46\uffff\1\u0175"+
            "\31\uffff\1\u0176\1\u0177\1\u0178\31\uffff\1\u017b\6\uffff\1"+
            "\u017c\1\uffff\1\u017a\3\uffff\1\u0179\2\uffff\1\u0172\2\uffff"+
            "\1\u0172\7\uffff\1\u0171\1\uffff\1\u0179\1\u0172\4\uffff\1\u016f",
            "\1\u017d\177\uffff\1\u017f\2\uffff\1\u017f\7\uffff\1\u017e"+
            "\2\uffff\1\u017f",
            "\1\u0186\12\uffff\1\2\5\uffff\1\u0182\50\uffff\1\u018b\1\u018e"+
            "\1\u0191\1\u0180\1\u0186\2\u0191\1\u018a\1\uffff\1\u0181\1\u0188"+
            "\1\u0191\1\u0184\1\u0189\1\u0187\1\u0191\1\u0185\2\u0189\1\u0191"+
            "\1\u018a\1\uffff\1\u018d\1\u0191\1\u018f\1\u0186\1\u0191\1\u0187"+
            "\1\u0191\1\u0185\1\u0190\1\u0188\1\u0191\1\uffff\1\u018c\1\u0191"+
            "\26\uffff\1\u0192\50\uffff\1\u0183",
            "\1\u019a\12\uffff\1\2\5\uffff\1\u0196\50\uffff\1\u019f\1\u01a2"+
            "\1\u01a5\1\u0194\1\u019a\2\u01a5\1\u019e\1\uffff\1\u0195\1\u019c"+
            "\1\u01a5\1\u0198\1\u019d\1\u019b\1\u01a5\1\u0199\2\u019d\1\u01a5"+
            "\1\u019e\1\uffff\1\u01a1\1\u01a5\1\u01a3\1\u019a\1\u01a5\1\u019b"+
            "\1\u01a5\1\u0199\1\u01a4\1\u019c\1\u01a5\1\uffff\1\u01a0\1\u01a5"+
            "\26\uffff\1\u01a6\50\uffff\1\u0197",
            "\1\u01ae\12\uffff\1\2\5\uffff\1\u01aa\50\uffff\1\u01b3\1\u01b6"+
            "\1\u01b9\1\u01a8\1\u01ae\2\u01b9\1\u01b2\1\uffff\1\u01a9\1\u01b0"+
            "\1\u01b9\1\u01ac\1\u01b1\1\u01af\1\u01b9\1\u01ad\2\u01b1\1\u01b9"+
            "\1\u01b2\1\uffff\1\u01b5\1\u01b9\1\u01b7\1\u01ae\1\u01b9\1\u01af"+
            "\1\u01b9\1\u01ad\1\u01b8\1\u01b0\1\u01b9\1\uffff\1\u01b4\1\u01b9"+
            "\26\uffff\1\u01ba\50\uffff\1\u01ab",
            "\1\u01bd\14\uffff\1\u01bc\5\uffff\1\u01c0\100\uffff\1\u01c1"+
            "\53\uffff\1\u01bf\2\uffff\1\u01bf\7\uffff\1\u01be\2\uffff\1"+
            "\u01bf",
            "\1\u01c3\12\uffff\1\2\56\uffff\1\u01c8\1\u01cb\1\u01ce\1\uffff"+
            "\1\u01c3\2\u01ce\1\u01c7\2\uffff\1\u01c5\1\u01ce\2\u01c6\1\u01c4"+
            "\1\u01ce\1\u01c2\2\u01c6\1\u01ce\1\u01c7\1\uffff\1\u01ca\1\u01ce"+
            "\1\u01cc\1\u01c3\1\u01ce\1\u01c4\1\u01ce\1\u01c2\1\u01cd\1\u01c5"+
            "\1\u01ce\1\uffff\1\u01c9\1\u01ce\26\uffff\1\u01cf",
            "\1\u01d2\12\uffff\1\2\56\uffff\1\u01d7\1\u01da\1\u01dd\1\uffff"+
            "\1\u01d2\2\u01dd\1\u01d6\2\uffff\1\u01d4\1\u01dd\2\u01d5\1\u01d3"+
            "\1\u01dd\1\u01d1\2\u01d5\1\u01dd\1\u01d6\1\uffff\1\u01d9\1\u01dd"+
            "\1\u01db\1\u01d2\1\u01dd\1\u01d3\1\u01dd\1\u01d1\1\u01dc\1\u01d4"+
            "\1\u01dd\1\uffff\1\u01d8\1\u01dd\26\uffff\1\u01de",
            "\1\u01e1\12\uffff\1\2\56\uffff\1\u01e6\1\u01e9\1\u01ec\1\uffff"+
            "\1\u01e1\2\u01ec\1\u01e5\2\uffff\1\u01e3\1\u01ec\2\u01e4\1\u01e2"+
            "\1\u01ec\1\u01e0\2\u01e4\1\u01ec\1\u01e5\1\uffff\1\u01e8\1\u01ec"+
            "\1\u01ea\1\u01e1\1\u01ec\1\u01e2\1\u01ec\1\u01e0\1\u01eb\1\u01e3"+
            "\1\u01ec\1\uffff\1\u01e7\1\u01ec\26\uffff\1\u01ed",
            "\1\u01f0\12\uffff\1\2\56\uffff\1\u01f5\1\u01f8\1\u01fb\1\uffff"+
            "\1\u01f0\2\u01fb\1\u01f4\2\uffff\1\u01f2\1\u01fb\2\u01f3\1\u01f1"+
            "\1\u01fb\1\u01ef\2\u01f3\1\u01fb\1\u01f4\1\uffff\1\u01f7\1\u01fb"+
            "\1\u01f9\1\u01f0\1\u01fb\1\u01f1\1\u01fb\1\u01ef\1\u01fa\1\u01f2"+
            "\1\u01fb\1\uffff\1\u01f6\1\u01fb\26\uffff\1\u01fc",
            "\1\u01ff\12\uffff\1\2\56\uffff\1\u0204\1\u0207\1\u020a\1\uffff"+
            "\1\u01ff\2\u020a\1\u0203\2\uffff\1\u0201\1\u020a\2\u0202\1\u0200"+
            "\1\u020a\1\u01fe\2\u0202\1\u020a\1\u0203\1\uffff\1\u0206\1\u020a"+
            "\1\u0208\1\u01ff\1\u020a\1\u0200\1\u020a\1\u01fe\1\u0209\1\u0201"+
            "\1\u020a\1\uffff\1\u0205\1\u020a\26\uffff\1\u020b",
            "\1\u020d",
            "\1\u020e",
            "\1\u020f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "449:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )";
        }
    }
    static final String DFA57_eotS =
        "\u0892\uffff";
    static final String DFA57_eofS =
        "\u0892\uffff";
    static final String DFA57_minS =
        "\1\66\3\6\1\uffff\2\6\2\66\1\6\7\uffff\2\6\2\66\10\uffff\2\6\2\66"+
        "\10\uffff\1\6\10\66\3\6\1\66\5\6\3\103\1\6\1\uffff\2\6\10\66\3\6"+
        "\1\66\5\6\3\103\6\6\6\uffff\1\6\10\66\3\6\1\66\5\6\3\103\2\6\10"+
        "\66\3\6\1\66\5\6\3\103\10\6\10\66\3\6\1\66\5\6\3\103\2\6\10\66\3"+
        "\6\1\66\5\6\3\103\7\6\u07cc\uffff";
    static final String DFA57_maxS =
        "\4\u00c9\1\uffff\2\u00c9\2\u00c4\1\u00c9\7\uffff\2\u00c9\2\u00c4"+
        "\10\uffff\2\u00c9\2\u00c4\10\uffff\10\u00c9\1\u00c4\3\u00a3\1\u00c4"+
        "\5\172\3\103\1\u00c9\1\uffff\11\u00c9\1\u00c4\3\u00a3\1\u00c4\5"+
        "\174\3\103\6\u00c9\6\uffff\10\u00c9\1\u00c4\3\u00a3\1\u00c4\5\172"+
        "\3\103\11\u00c9\1\u00c4\3\u00a3\1\u00c4\5\174\3\103\17\u00c9\1\u00c4"+
        "\3\u00a3\1\u00c4\5\172\3\103\11\u00c9\1\u00c4\3\u00a3\1\u00c4\5"+
        "\174\3\103\7\u00c9\u07cc\uffff";
    static final String DFA57_acceptS =
        "\4\uffff\1\2\5\uffff\1\1\u00bb\uffff\53\1\1\uffff\146\1\2\uffff"+
        "\u0093\1\10\uffff\1\1\1\uffff\2\1\4\uffff\1\1\3\uffff\u011b\1\5"+
        "\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff"+
        "\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1"+
        "\3\uffff\u0124\1\10\uffff\u011b\1\5\uffff\1\1\3\uffff\2\1\5\uffff"+
        "\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1"+
        "\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff"+
        "\u0124\1\10\uffff\u011b\1\5\uffff\1\1\3\uffff\2\1\5\uffff\2\1\3"+
        "\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff"+
        "\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff";
    static final String DFA57_specialS =
        "\u0892\uffff}>";
    static final String[] DFA57_transitionS = {
            "\1\1\147\uffff\1\4\27\uffff\1\3\2\uffff\1\3\7\uffff\1\2\2\uffff"+
            "\1\3\4\uffff\1\4",
            "\1\11\12\uffff\1\4\5\uffff\1\7\36\uffff\1\12\13\uffff\1\4\1"+
            "\5\1\uffff\2\4\2\uffff\1\6\1\uffff\1\4\3\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1"+
            "\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\10\22\uffff\1\12\2\uffff"+
            "\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\23\36\uffff\1\12\13\uffff\1\4"+
            "\1\21\1\uffff\2\4\2\uffff\1\22\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\24\22\uffff\1\12\2"+
            "\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\37\36\uffff\1\12\13\uffff\1\4"+
            "\1\35\1\uffff\2\4\2\uffff\1\36\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\40\22\uffff\1\12\2"+
            "\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "",
            "\1\52\57\uffff\1\62\11\uffff\1\53\2\uffff\1\51\5\uffff\1\65"+
            "\4\uffff\1\54\1\uffff\1\60\4\uffff\1\55\5\uffff\1\54\1\uffff"+
            "\1\60\3\uffff\1\56\16\uffff\1\66\11\uffff\1\76\10\uffff\1\57"+
            "\6\uffff\1\67\1\70\1\71\21\uffff\1\4\7\uffff\1\74\6\uffff\1"+
            "\75\1\uffff\1\73\3\uffff\1\72\2\uffff\1\64\2\uffff\1\64\7\uffff"+
            "\1\63\1\uffff\1\72\1\64\4\uffff\1\61",
            "\1\102\57\uffff\1\112\11\uffff\1\103\2\uffff\1\101\5\uffff"+
            "\1\115\4\uffff\1\104\1\uffff\1\110\4\uffff\1\105\5\uffff\1\104"+
            "\1\uffff\1\110\3\uffff\1\106\16\uffff\1\116\13\uffff\1\100\6"+
            "\uffff\1\107\6\uffff\1\117\1\120\1\121\31\uffff\1\124\6\uffff"+
            "\1\125\1\uffff\1\123\3\uffff\1\122\2\uffff\1\114\2\uffff\1\114"+
            "\7\uffff\1\113\1\uffff\1\122\1\114\4\uffff\1\111",
            "\1\126\177\uffff\1\130\2\uffff\1\130\7\uffff\1\127\2\uffff"+
            "\1\130",
            "\1\131\177\uffff\1\133\2\uffff\1\133\7\uffff\1\132\2\uffff"+
            "\1\133",
            "\1\12\57\uffff\1\12\14\uffff\1\4\132\uffff\1\12\27\uffff\1"+
            "\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\143\57\uffff\1\153\11\uffff\1\144\2\uffff\1\142\5\uffff"+
            "\1\156\4\uffff\1\145\1\uffff\1\151\4\uffff\1\146\5\uffff\1\145"+
            "\1\uffff\1\151\3\uffff\1\147\16\uffff\1\157\11\uffff\1\167\10"+
            "\uffff\1\150\6\uffff\1\160\1\161\1\162\31\uffff\1\165\6\uffff"+
            "\1\166\1\uffff\1\164\3\uffff\1\163\2\uffff\1\155\2\uffff\1\155"+
            "\7\uffff\1\154\1\uffff\1\163\1\155\4\uffff\1\152",
            "\1\171\57\uffff\1\u0081\11\uffff\1\172\2\uffff\1\170\5\uffff"+
            "\1\u0084\4\uffff\1\173\1\uffff\1\177\4\uffff\1\174\5\uffff\1"+
            "\173\1\uffff\1\177\3\uffff\1\175\16\uffff\1\u0085\13\uffff\1"+
            "\u008d\6\uffff\1\176\6\uffff\1\u0086\1\u0087\1\u0088\31\uffff"+
            "\1\u008b\6\uffff\1\u008c\1\uffff\1\u008a\3\uffff\1\u0089\2\uffff"+
            "\1\u0083\2\uffff\1\u0083\7\uffff\1\u0082\1\uffff\1\u0089\1\u0083"+
            "\4\uffff\1\u0080",
            "\1\u008e\177\uffff\1\u0090\2\uffff\1\u0090\7\uffff\1\u008f"+
            "\2\uffff\1\u0090",
            "\1\u0091\177\uffff\1\u0093\2\uffff\1\u0093\7\uffff\1\u0092"+
            "\2\uffff\1\u0093",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0095\57\uffff\1\u009d\11\uffff\1\u0096\2\uffff\1\u0094"+
            "\5\uffff\1\u00a0\4\uffff\1\u0097\1\uffff\1\u009b\4\uffff\1\u0098"+
            "\5\uffff\1\u0097\1\uffff\1\u009b\3\uffff\1\u0099\16\uffff\1"+
            "\u00a1\11\uffff\1\u00a9\10\uffff\1\u009a\6\uffff\1\u00a2\1\u00a3"+
            "\1\u00a4\31\uffff\1\u00a7\6\uffff\1\u00a8\1\uffff\1\u00a6\3"+
            "\uffff\1\u00a5\2\uffff\1\u009f\2\uffff\1\u009f\7\uffff\1\u009e"+
            "\1\uffff\1\u00a5\1\u009f\4\uffff\1\u009c",
            "\1\u00ab\57\uffff\1\u00b3\11\uffff\1\u00ac\2\uffff\1\u00aa"+
            "\5\uffff\1\u00b6\4\uffff\1\u00ad\1\uffff\1\u00b1\4\uffff\1\u00ae"+
            "\5\uffff\1\u00ad\1\uffff\1\u00b1\3\uffff\1\u00af\16\uffff\1"+
            "\u00b7\13\uffff\1\u00bf\6\uffff\1\u00b0\6\uffff\1\u00b8\1\u00b9"+
            "\1\u00ba\31\uffff\1\u00bd\6\uffff\1\u00be\1\uffff\1\u00bc\3"+
            "\uffff\1\u00bb\2\uffff\1\u00b5\2\uffff\1\u00b5\7\uffff\1\u00b4"+
            "\1\uffff\1\u00bb\1\u00b5\4\uffff\1\u00b2",
            "\1\u00c0\177\uffff\1\u00c2\2\uffff\1\u00c2\7\uffff\1\u00c1"+
            "\2\uffff\1\u00c2",
            "\1\u00c3\177\uffff\1\u00c5\2\uffff\1\u00c5\7\uffff\1\u00c4"+
            "\2\uffff\1\u00c5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ca\14\uffff\1\u00c6\42\uffff\1\u00c8\11\uffff\1\u00cb"+
            "\2\uffff\1\u00c9\5\uffff\1\u00d4\4\uffff\1\u00cc\1\uffff\1\u00d0"+
            "\4\uffff\1\u00cd\5\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00ce"+
            "\16\uffff\1\u00d5\22\uffff\1\u00cf\6\uffff\1\u00d6\1\u00d7\1"+
            "\u00d8\21\uffff\1\u00d1\7\uffff\1\u00db\6\uffff\1\u00dc\1\uffff"+
            "\1\u00da\3\uffff\1\u00d9\2\uffff\1\u00d3\2\uffff\1\u00d3\7\uffff"+
            "\1\u00d2\1\uffff\1\u00d9\1\u00d3\4\uffff\1\u00c7",
            "\1\u00e5\11\uffff\1\u00de\2\uffff\1\u00dd\5\uffff\1\u00e8\4"+
            "\uffff\1\u00df\1\uffff\1\u00e3\4\uffff\1\u00e0\5\uffff\1\u00df"+
            "\1\uffff\1\u00e3\3\uffff\1\u00e1\16\uffff\1\u00e9\22\uffff\1"+
            "\u00e2\6\uffff\1\u00ea\1\u00eb\1\u00ec\21\uffff\1\4\7\uffff"+
            "\1\u00ef\6\uffff\1\u00f0\1\uffff\1\u00ee\3\uffff\1\u00ed\2\uffff"+
            "\1\u00e7\2\uffff\1\u00e7\7\uffff\1\u00e6\1\uffff\1\u00ed\1\u00e7"+
            "\4\uffff\1\u00e4",
            "\1\u00f8\14\uffff\1\u00fc\5\uffff\1\u00fb\4\uffff\1\u00f2\1"+
            "\uffff\1\u00f6\4\uffff\1\u00f3\5\uffff\1\u00f2\1\uffff\1\u00f6"+
            "\3\uffff\1\u00f4\16\uffff\1\u00fd\22\uffff\1\u00f5\6\uffff\1"+
            "\u00fe\1\u00ff\1\u0100\31\uffff\1\u0103\6\uffff\1\u0104\1\uffff"+
            "\1\u0102\3\uffff\1\u0101\2\uffff\1\u00fa\2\uffff\1\u00fa\7\uffff"+
            "\1\u00f9\1\uffff\1\u0101\1\u00fa\4\uffff\1\u00f7",
            "\1\u010a\14\uffff\1\u010e\5\uffff\1\u010d\6\uffff\1\u0108\4"+
            "\uffff\1\u0105\7\uffff\1\u0108\3\uffff\1\u0106\16\uffff\1\u010f"+
            "\22\uffff\1\u0107\6\uffff\1\u0110\1\u0111\1\u0112\31\uffff\1"+
            "\u0115\6\uffff\1\u0116\1\uffff\1\u0114\3\uffff\1\u0113\2\uffff"+
            "\1\u010c\2\uffff\1\u010c\7\uffff\1\u010b\1\uffff\1\u0113\1\u010c"+
            "\4\uffff\1\u0109",
            "\1\u011b\14\uffff\1\u011f\5\uffff\1\u011e\6\uffff\1\u0119\14"+
            "\uffff\1\u0119\3\uffff\1\u0117\16\uffff\1\u0120\22\uffff\1\u0118"+
            "\6\uffff\1\u0121\1\u0122\1\u0123\31\uffff\1\u0126\6\uffff\1"+
            "\u0127\1\uffff\1\u0125\3\uffff\1\u0124\2\uffff\1\u011d\2\uffff"+
            "\1\u011d\7\uffff\1\u011c\1\uffff\1\u0124\1\u011d\4\uffff\1\u011a",
            "\1\u012b\14\uffff\1\u012f\5\uffff\1\u012e\6\uffff\1\u0129\14"+
            "\uffff\1\u0129\22\uffff\1\u0130\22\uffff\1\u0128\6\uffff\1\u0131"+
            "\1\u0132\1\u0133\31\uffff\1\u0136\6\uffff\1\u0137\1\uffff\1"+
            "\u0135\3\uffff\1\u0134\2\uffff\1\u012d\2\uffff\1\u012d\7\uffff"+
            "\1\u012c\1\uffff\1\u0134\1\u012d\4\uffff\1\u012a",
            "\1\u013a\14\uffff\1\u013e\5\uffff\1\u013d\6\uffff\1\u0138\14"+
            "\uffff\1\u0138\22\uffff\1\u013f\31\uffff\1\u0140\1\u0141\1\u0142"+
            "\31\uffff\1\u0145\6\uffff\1\u0146\1\uffff\1\u0144\3\uffff\1"+
            "\u0143\2\uffff\1\u013c\2\uffff\1\u013c\7\uffff\1\u013b\1\uffff"+
            "\1\u0143\1\u013c\4\uffff\1\u0139",
            "\1\u0148\14\uffff\1\u014c\5\uffff\1\u014b\46\uffff\1\u014d"+
            "\31\uffff\1\u014e\1\u014f\1\u0150\31\uffff\1\u0153\6\uffff\1"+
            "\u0154\1\uffff\1\u0152\3\uffff\1\u0151\2\uffff\1\u014a\2\uffff"+
            "\1\u014a\7\uffff\1\u0149\1\uffff\1\u0151\1\u014a\4\uffff\1\u0147",
            "\1\u0155\22\uffff\1\4\60\uffff\1\4\73\uffff\1\u0157\2\uffff"+
            "\1\u0157\7\uffff\1\u0156\2\uffff\1\u0157",
            "\1\u0160\12\uffff\1\u016c\5\uffff\1\u015c\50\uffff\1\u0165"+
            "\1\u0168\1\u016b\1\u015a\1\u0160\2\u016b\1\u0164\1\uffff\1\u015b"+
            "\1\u0162\1\u016b\1\u015e\1\u0163\1\u0161\1\u016b\1\u015f\2\u0163"+
            "\1\u016b\1\u0164\1\uffff\1\u0167\1\u016b\1\u0169\1\u0160\1\u016b"+
            "\1\u0161\1\u016b\1\u015f\1\u016a\1\u0162\1\u016b\1\uffff\1\u0166"+
            "\1\u016b\26\uffff\1\u016d\50\uffff\1\u015d",
            "\1\u0174\12\uffff\1\u0180\5\uffff\1\u0170\50\uffff\1\u0179"+
            "\1\u017c\1\u017f\1\u016e\1\u0174\2\u017f\1\u0178\1\uffff\1\u016f"+
            "\1\u0176\1\u017f\1\u0172\1\u0177\1\u0175\1\u017f\1\u0173\2\u0177"+
            "\1\u017f\1\u0178\1\uffff\1\u017b\1\u017f\1\u017d\1\u0174\1\u017f"+
            "\1\u0175\1\u017f\1\u0173\1\u017e\1\u0176\1\u017f\1\uffff\1\u017a"+
            "\1\u017f\26\uffff\1\u0181\50\uffff\1\u0171",
            "\1\u0188\12\uffff\1\u0194\5\uffff\1\u0184\50\uffff\1\u018d"+
            "\1\u0190\1\u0193\1\u0182\1\u0188\2\u0193\1\u018c\1\uffff\1\u0183"+
            "\1\u018a\1\u0193\1\u0186\1\u018b\1\u0189\1\u0193\1\u0187\2\u018b"+
            "\1\u0193\1\u018c\1\uffff\1\u018f\1\u0193\1\u0191\1\u0188\1\u0193"+
            "\1\u0189\1\u0193\1\u0187\1\u0192\1\u018a\1\u0193\1\uffff\1\u018e"+
            "\1\u0193\26\uffff\1\u0195\50\uffff\1\u0185",
            "\1\u0197\14\uffff\1\u0196\5\uffff\1\u019a\100\uffff\1\u019b"+
            "\53\uffff\1\u0199\2\uffff\1\u0199\7\uffff\1\u0198\2\uffff\1"+
            "\u0199",
            "\1\u019d\12\uffff\1\u01a9\56\uffff\1\u01a2\1\u01a5\1\u01a8"+
            "\1\uffff\1\u019d\2\u01a8\1\u01a1\2\uffff\1\u019f\1\u01a8\2\u01a0"+
            "\1\u019e\1\u01a8\1\u019c\2\u01a0\1\u01a8\1\u01a1\1\uffff\1\u01a4"+
            "\1\u01a8\1\u01a6\1\u019d\1\u01a8\1\u019e\1\u01a8\1\u019c\1\u01a7"+
            "\1\u019f\1\u01a8\1\uffff\1\u01a3\1\u01a8\26\uffff\1\u01aa",
            "\1\u01ac\12\uffff\1\u01b8\56\uffff\1\u01b1\1\u01b4\1\u01b7"+
            "\1\uffff\1\u01ac\2\u01b7\1\u01b0\2\uffff\1\u01ae\1\u01b7\2\u01af"+
            "\1\u01ad\1\u01b7\1\u01ab\2\u01af\1\u01b7\1\u01b0\1\uffff\1\u01b3"+
            "\1\u01b7\1\u01b5\1\u01ac\1\u01b7\1\u01ad\1\u01b7\1\u01ab\1\u01b6"+
            "\1\u01ae\1\u01b7\1\uffff\1\u01b2\1\u01b7\26\uffff\1\u01b9",
            "\1\u01bb\12\uffff\1\u01c7\56\uffff\1\u01c0\1\u01c3\1\u01c6"+
            "\1\uffff\1\u01bb\2\u01c6\1\u01bf\2\uffff\1\u01bd\1\u01c6\2\u01be"+
            "\1\u01bc\1\u01c6\1\u01ba\2\u01be\1\u01c6\1\u01bf\1\uffff\1\u01c2"+
            "\1\u01c6\1\u01c4\1\u01bb\1\u01c6\1\u01bc\1\u01c6\1\u01ba\1\u01c5"+
            "\1\u01bd\1\u01c6\1\uffff\1\u01c1\1\u01c6\26\uffff\1\u01c8",
            "\1\u01ca\12\uffff\1\u01d6\56\uffff\1\u01cf\1\u01d2\1\u01d5"+
            "\1\uffff\1\u01ca\2\u01d5\1\u01ce\2\uffff\1\u01cc\1\u01d5\2\u01cd"+
            "\1\u01cb\1\u01d5\1\u01c9\2\u01cd\1\u01d5\1\u01ce\1\uffff\1\u01d1"+
            "\1\u01d5\1\u01d3\1\u01ca\1\u01d5\1\u01cb\1\u01d5\1\u01c9\1\u01d4"+
            "\1\u01cc\1\u01d5\1\uffff\1\u01d0\1\u01d5\26\uffff\1\u01d7",
            "\1\u01d9\12\uffff\1\u01e5\56\uffff\1\u01de\1\u01e1\1\u01e4"+
            "\1\uffff\1\u01d9\2\u01e4\1\u01dd\2\uffff\1\u01db\1\u01e4\2\u01dc"+
            "\1\u01da\1\u01e4\1\u01d8\2\u01dc\1\u01e4\1\u01dd\1\uffff\1\u01e0"+
            "\1\u01e4\1\u01e2\1\u01d9\1\u01e4\1\u01da\1\u01e4\1\u01d8\1\u01e3"+
            "\1\u01db\1\u01e4\1\uffff\1\u01df\1\u01e4\26\uffff\1\u01e6",
            "\1\u01e7",
            "\1\u01e8",
            "\1\u01e9",
            "\1\12\12\uffff\1\4\5\uffff\1\u01eb\36\uffff\1\12\13\uffff\1"+
            "\4\2\uffff\2\4\2\uffff\1\u01ea\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u01ec\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "",
            "\1\u01f5\12\uffff\1\4\5\uffff\1\u01f7\36\uffff\1\12\13\uffff"+
            "\2\4\1\uffff\2\4\2\uffff\1\u01fd\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u01f8\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\u0205\14\uffff\1\u0201\42\uffff\1\u0203\11\uffff\1\u0206"+
            "\2\uffff\1\u0204\5\uffff\1\u020f\4\uffff\1\u0207\1\uffff\1\u020b"+
            "\4\uffff\1\u0208\5\uffff\1\u0207\1\uffff\1\u020b\3\uffff\1\u0209"+
            "\16\uffff\1\u0210\22\uffff\1\u020a\6\uffff\1\u0211\1\u0212\1"+
            "\u0213\21\uffff\1\u020c\7\uffff\1\u0216\6\uffff\1\u0217\1\uffff"+
            "\1\u0215\3\uffff\1\u0214\2\uffff\1\u020e\2\uffff\1\u020e\7\uffff"+
            "\1\u020d\1\uffff\1\u0214\1\u020e\4\uffff\1\u0202",
            "\1\u0220\11\uffff\1\u0219\2\uffff\1\u0218\5\uffff\1\u0223\4"+
            "\uffff\1\u021a\1\uffff\1\u021e\4\uffff\1\u021b\5\uffff\1\u021a"+
            "\1\uffff\1\u021e\3\uffff\1\u021c\16\uffff\1\u0224\22\uffff\1"+
            "\u021d\6\uffff\1\u0225\1\u0226\1\u0227\31\uffff\1\u022a\6\uffff"+
            "\1\u022b\1\uffff\1\u0229\3\uffff\1\u0228\2\uffff\1\u0222\2\uffff"+
            "\1\u0222\7\uffff\1\u0221\1\uffff\1\u0228\1\u0222\4\uffff\1\u021f",
            "\1\u0232\14\uffff\1\u0236\5\uffff\1\u0235\4\uffff\1\u022c\1"+
            "\uffff\1\u0230\4\uffff\1\u022d\5\uffff\1\u022c\1\uffff\1\u0230"+
            "\3\uffff\1\u022e\16\uffff\1\u0237\22\uffff\1\u022f\6\uffff\1"+
            "\u0238\1\u0239\1\u023a\31\uffff\1\u023d\6\uffff\1\u023e\1\uffff"+
            "\1\u023c\3\uffff\1\u023b\2\uffff\1\u0234\2\uffff\1\u0234\7\uffff"+
            "\1\u0233\1\uffff\1\u023b\1\u0234\4\uffff\1\u0231",
            "\1\u0244\14\uffff\1\u0248\5\uffff\1\u0247\6\uffff\1\u0242\4"+
            "\uffff\1\u023f\7\uffff\1\u0242\3\uffff\1\u0240\16\uffff\1\u0249"+
            "\22\uffff\1\u0241\6\uffff\1\u024a\1\u024b\1\u024c\31\uffff\1"+
            "\u024f\6\uffff\1\u0250\1\uffff\1\u024e\3\uffff\1\u024d\2\uffff"+
            "\1\u0246\2\uffff\1\u0246\7\uffff\1\u0245\1\uffff\1\u024d\1\u0246"+
            "\4\uffff\1\u0243",
            "\1\u0255\14\uffff\1\u0259\5\uffff\1\u0258\6\uffff\1\u0253\14"+
            "\uffff\1\u0253\3\uffff\1\u0251\16\uffff\1\u025a\22\uffff\1\u0252"+
            "\6\uffff\1\u025b\1\u025c\1\u025d\31\uffff\1\u0260\6\uffff\1"+
            "\u0261\1\uffff\1\u025f\3\uffff\1\u025e\2\uffff\1\u0257\2\uffff"+
            "\1\u0257\7\uffff\1\u0256\1\uffff\1\u025e\1\u0257\4\uffff\1\u0254",
            "\1\u0265\14\uffff\1\u0269\5\uffff\1\u0268\6\uffff\1\u0263\14"+
            "\uffff\1\u0263\22\uffff\1\u026a\22\uffff\1\u0262\6\uffff\1\u026b"+
            "\1\u026c\1\u026d\31\uffff\1\u0270\6\uffff\1\u0271\1\uffff\1"+
            "\u026f\3\uffff\1\u026e\2\uffff\1\u0267\2\uffff\1\u0267\7\uffff"+
            "\1\u0266\1\uffff\1\u026e\1\u0267\4\uffff\1\u0264",
            "\1\u0274\14\uffff\1\u0278\5\uffff\1\u0277\6\uffff\1\u0272\14"+
            "\uffff\1\u0272\22\uffff\1\u0279\31\uffff\1\u027a\1\u027b\1\u027c"+
            "\31\uffff\1\u027f\6\uffff\1\u0280\1\uffff\1\u027e\3\uffff\1"+
            "\u027d\2\uffff\1\u0276\2\uffff\1\u0276\7\uffff\1\u0275\1\uffff"+
            "\1\u027d\1\u0276\4\uffff\1\u0273",
            "\1\u0282\14\uffff\1\u0286\5\uffff\1\u0285\46\uffff\1\u0287"+
            "\31\uffff\1\u0288\1\u0289\1\u028a\31\uffff\1\u028d\6\uffff\1"+
            "\u028e\1\uffff\1\u028c\3\uffff\1\u028b\2\uffff\1\u0284\2\uffff"+
            "\1\u0284\7\uffff\1\u0283\1\uffff\1\u028b\1\u0284\4\uffff\1\u0281",
            "\1\u028f\177\uffff\1\u0291\2\uffff\1\u0291\7\uffff\1\u0290"+
            "\2\uffff\1\u0291",
            "\1\u0298\20\uffff\1\u0294\50\uffff\1\u029d\1\u02a0\1\u02a3"+
            "\1\u0292\1\u0298\2\u02a3\1\u029c\1\uffff\1\u0293\1\u029a\1\u02a3"+
            "\1\u0296\1\u029b\1\u0299\1\u02a3\1\u0297\2\u029b\1\u02a3\1\u029c"+
            "\1\uffff\1\u029f\1\u02a3\1\u02a1\1\u0298\1\u02a3\1\u0299\1\u02a3"+
            "\1\u0297\1\u02a2\1\u029a\1\u02a3\1\uffff\1\u029e\1\u02a3\30"+
            "\uffff\1\u02a4\46\uffff\1\u0295",
            "\1\u02ab\20\uffff\1\u02a7\50\uffff\1\u02b0\1\u02b3\1\u02b6"+
            "\1\u02a5\1\u02ab\2\u02b6\1\u02af\1\uffff\1\u02a6\1\u02ad\1\u02b6"+
            "\1\u02a9\1\u02ae\1\u02ac\1\u02b6\1\u02aa\2\u02ae\1\u02b6\1\u02af"+
            "\1\uffff\1\u02b2\1\u02b6\1\u02b4\1\u02ab\1\u02b6\1\u02ac\1\u02b6"+
            "\1\u02aa\1\u02b5\1\u02ad\1\u02b6\1\uffff\1\u02b1\1\u02b6\30"+
            "\uffff\1\u02b7\46\uffff\1\u02a8",
            "\1\u02be\20\uffff\1\u02ba\50\uffff\1\u02c3\1\u02c6\1\u02c9"+
            "\1\u02b8\1\u02be\2\u02c9\1\u02c2\1\uffff\1\u02b9\1\u02c0\1\u02c9"+
            "\1\u02bc\1\u02c1\1\u02bf\1\u02c9\1\u02bd\2\u02c1\1\u02c9\1\u02c2"+
            "\1\uffff\1\u02c5\1\u02c9\1\u02c7\1\u02be\1\u02c9\1\u02bf\1\u02c9"+
            "\1\u02bd\1\u02c8\1\u02c0\1\u02c9\1\uffff\1\u02c4\1\u02c9\30"+
            "\uffff\1\u02ca\46\uffff\1\u02bb",
            "\1\u02cc\14\uffff\1\u02cb\5\uffff\1\u02cf\100\uffff\1\u02d0"+
            "\53\uffff\1\u02ce\2\uffff\1\u02ce\7\uffff\1\u02cd\2\uffff\1"+
            "\u02ce",
            "\1\u02d2\71\uffff\1\u02d7\1\u02da\1\u02dd\1\uffff\1\u02d2\2"+
            "\u02dd\1\u02d6\2\uffff\1\u02d4\1\u02dd\2\u02d5\1\u02d3\1\u02dd"+
            "\1\u02d1\2\u02d5\1\u02dd\1\u02d6\1\uffff\1\u02d9\1\u02dd\1\u02db"+
            "\1\u02d2\1\u02dd\1\u02d3\1\u02dd\1\u02d1\1\u02dc\1\u02d4\1\u02dd"+
            "\1\uffff\1\u02d8\1\u02dd\30\uffff\1\u02de",
            "\1\u02e0\71\uffff\1\u02e5\1\u02e8\1\u02eb\1\uffff\1\u02e0\2"+
            "\u02eb\1\u02e4\2\uffff\1\u02e2\1\u02eb\2\u02e3\1\u02e1\1\u02eb"+
            "\1\u02df\2\u02e3\1\u02eb\1\u02e4\1\uffff\1\u02e7\1\u02eb\1\u02e9"+
            "\1\u02e0\1\u02eb\1\u02e1\1\u02eb\1\u02df\1\u02ea\1\u02e2\1\u02eb"+
            "\1\uffff\1\u02e6\1\u02eb\30\uffff\1\u02ec",
            "\1\u02ee\71\uffff\1\u02f3\1\u02f6\1\u02f9\1\uffff\1\u02ee\2"+
            "\u02f9\1\u02f2\2\uffff\1\u02f0\1\u02f9\2\u02f1\1\u02ef\1\u02f9"+
            "\1\u02ed\2\u02f1\1\u02f9\1\u02f2\1\uffff\1\u02f5\1\u02f9\1\u02f7"+
            "\1\u02ee\1\u02f9\1\u02ef\1\u02f9\1\u02ed\1\u02f8\1\u02f0\1\u02f9"+
            "\1\uffff\1\u02f4\1\u02f9\30\uffff\1\u02fa",
            "\1\u02fc\71\uffff\1\u0301\1\u0304\1\u0307\1\uffff\1\u02fc\2"+
            "\u0307\1\u0300\2\uffff\1\u02fe\1\u0307\2\u02ff\1\u02fd\1\u0307"+
            "\1\u02fb\2\u02ff\1\u0307\1\u0300\1\uffff\1\u0303\1\u0307\1\u0305"+
            "\1\u02fc\1\u0307\1\u02fd\1\u0307\1\u02fb\1\u0306\1\u02fe\1\u0307"+
            "\1\uffff\1\u0302\1\u0307\30\uffff\1\u0308",
            "\1\u030a\71\uffff\1\u030f\1\u0312\1\u0315\1\uffff\1\u030a\2"+
            "\u0315\1\u030e\2\uffff\1\u030c\1\u0315\2\u030d\1\u030b\1\u0315"+
            "\1\u0309\2\u030d\1\u0315\1\u030e\1\uffff\1\u0311\1\u0315\1\u0313"+
            "\1\u030a\1\u0315\1\u030b\1\u0315\1\u0309\1\u0314\1\u030c\1\u0315"+
            "\1\uffff\1\u0310\1\u0315\30\uffff\1\u0316",
            "\1\u0317",
            "\1\u0318",
            "\1\u0319",
            "\1\12\12\uffff\1\4\5\uffff\1\u0321\36\uffff\1\12\13\uffff\1"+
            "\4\1\u031a\1\uffff\2\4\2\uffff\1\u031b\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0322\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u032d\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0326\1\uffff\2\4\2\uffff\1\u0327\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u032e\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0339\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0332\1\uffff\2\4\2\uffff\1\u0333\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u033a\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0345\36\uffff\1\12\13\uffff\1"+
            "\4\1\u033e\1\uffff\2\4\2\uffff\1\u033f\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0346\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0351\36\uffff\1\12\13\uffff\1"+
            "\4\1\u034a\1\uffff\2\4\2\uffff\1\u034b\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0352\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u035d\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0356\1\uffff\2\4\2\uffff\1\u0357\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u035e\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0366\14\uffff\1\u0362\42\uffff\1\u0364\11\uffff\1\u0367"+
            "\2\uffff\1\u0365\5\uffff\1\u0370\4\uffff\1\u0368\1\uffff\1\u036c"+
            "\4\uffff\1\u0369\5\uffff\1\u0368\1\uffff\1\u036c\3\uffff\1\u036a"+
            "\16\uffff\1\u0371\22\uffff\1\u036b\6\uffff\1\u0372\1\u0373\1"+
            "\u0374\21\uffff\1\u036d\7\uffff\1\u0377\6\uffff\1\u0378\1\uffff"+
            "\1\u0376\3\uffff\1\u0375\2\uffff\1\u036f\2\uffff\1\u036f\7\uffff"+
            "\1\u036e\1\uffff\1\u0375\1\u036f\4\uffff\1\u0363",
            "\1\u0381\11\uffff\1\u037a\2\uffff\1\u0379\5\uffff\1\u0384\4"+
            "\uffff\1\u037b\1\uffff\1\u037f\4\uffff\1\u037c\5\uffff\1\u037b"+
            "\1\uffff\1\u037f\3\uffff\1\u037d\16\uffff\1\u0385\22\uffff\1"+
            "\u037e\6\uffff\1\u0386\1\u0387\1\u0388\31\uffff\1\u038b\6\uffff"+
            "\1\u038c\1\uffff\1\u038a\3\uffff\1\u0389\2\uffff\1\u0383\2\uffff"+
            "\1\u0383\7\uffff\1\u0382\1\uffff\1\u0389\1\u0383\4\uffff\1\u0380",
            "\1\u0393\14\uffff\1\u0397\5\uffff\1\u0396\4\uffff\1\u038d\1"+
            "\uffff\1\u0391\4\uffff\1\u038e\5\uffff\1\u038d\1\uffff\1\u0391"+
            "\3\uffff\1\u038f\16\uffff\1\u0398\22\uffff\1\u0390\6\uffff\1"+
            "\u0399\1\u039a\1\u039b\31\uffff\1\u039e\6\uffff\1\u039f\1\uffff"+
            "\1\u039d\3\uffff\1\u039c\2\uffff\1\u0395\2\uffff\1\u0395\7\uffff"+
            "\1\u0394\1\uffff\1\u039c\1\u0395\4\uffff\1\u0392",
            "\1\u03a5\14\uffff\1\u03a9\5\uffff\1\u03a8\6\uffff\1\u03a3\4"+
            "\uffff\1\u03a0\7\uffff\1\u03a3\3\uffff\1\u03a1\16\uffff\1\u03aa"+
            "\22\uffff\1\u03a2\6\uffff\1\u03ab\1\u03ac\1\u03ad\31\uffff\1"+
            "\u03b0\6\uffff\1\u03b1\1\uffff\1\u03af\3\uffff\1\u03ae\2\uffff"+
            "\1\u03a7\2\uffff\1\u03a7\7\uffff\1\u03a6\1\uffff\1\u03ae\1\u03a7"+
            "\4\uffff\1\u03a4",
            "\1\u03b6\14\uffff\1\u03ba\5\uffff\1\u03b9\6\uffff\1\u03b4\14"+
            "\uffff\1\u03b4\3\uffff\1\u03b2\16\uffff\1\u03bb\22\uffff\1\u03b3"+
            "\6\uffff\1\u03bc\1\u03bd\1\u03be\31\uffff\1\u03c1\6\uffff\1"+
            "\u03c2\1\uffff\1\u03c0\3\uffff\1\u03bf\2\uffff\1\u03b8\2\uffff"+
            "\1\u03b8\7\uffff\1\u03b7\1\uffff\1\u03bf\1\u03b8\4\uffff\1\u03b5",
            "\1\u03c6\14\uffff\1\u03ca\5\uffff\1\u03c9\6\uffff\1\u03c4\14"+
            "\uffff\1\u03c4\22\uffff\1\u03cb\22\uffff\1\u03c3\6\uffff\1\u03cc"+
            "\1\u03cd\1\u03ce\31\uffff\1\u03d1\6\uffff\1\u03d2\1\uffff\1"+
            "\u03d0\3\uffff\1\u03cf\2\uffff\1\u03c8\2\uffff\1\u03c8\7\uffff"+
            "\1\u03c7\1\uffff\1\u03cf\1\u03c8\4\uffff\1\u03c5",
            "\1\u03d5\14\uffff\1\u03d9\5\uffff\1\u03d8\6\uffff\1\u03d3\14"+
            "\uffff\1\u03d3\22\uffff\1\u03da\31\uffff\1\u03db\1\u03dc\1\u03dd"+
            "\31\uffff\1\u03e0\6\uffff\1\u03e1\1\uffff\1\u03df\3\uffff\1"+
            "\u03de\2\uffff\1\u03d7\2\uffff\1\u03d7\7\uffff\1\u03d6\1\uffff"+
            "\1\u03de\1\u03d7\4\uffff\1\u03d4",
            "\1\u03e3\14\uffff\1\u03e7\5\uffff\1\u03e6\46\uffff\1\u03e8"+
            "\31\uffff\1\u03e9\1\u03ea\1\u03eb\31\uffff\1\u03ee\6\uffff\1"+
            "\u03ef\1\uffff\1\u03ed\3\uffff\1\u03ec\2\uffff\1\u03e5\2\uffff"+
            "\1\u03e5\7\uffff\1\u03e4\1\uffff\1\u03ec\1\u03e5\4\uffff\1\u03e2",
            "\1\u03f0\177\uffff\1\u03f2\2\uffff\1\u03f2\7\uffff\1\u03f1"+
            "\2\uffff\1\u03f2",
            "\1\u03f9\12\uffff\1\u0405\5\uffff\1\u03f5\50\uffff\1\u03fe"+
            "\1\u0401\1\u0404\1\u03f3\1\u03f9\2\u0404\1\u03fd\1\uffff\1\u03f4"+
            "\1\u03fb\1\u0404\1\u03f7\1\u03fc\1\u03fa\1\u0404\1\u03f8\2\u03fc"+
            "\1\u0404\1\u03fd\1\uffff\1\u0400\1\u0404\1\u0402\1\u03f9\1\u0404"+
            "\1\u03fa\1\u0404\1\u03f8\1\u0403\1\u03fb\1\u0404\1\uffff\1\u03ff"+
            "\1\u0404\26\uffff\1\u0406\50\uffff\1\u03f6",
            "\1\u040d\12\uffff\1\u0419\5\uffff\1\u0409\50\uffff\1\u0412"+
            "\1\u0415\1\u0418\1\u0407\1\u040d\2\u0418\1\u0411\1\uffff\1\u0408"+
            "\1\u040f\1\u0418\1\u040b\1\u0410\1\u040e\1\u0418\1\u040c\2\u0410"+
            "\1\u0418\1\u0411\1\uffff\1\u0414\1\u0418\1\u0416\1\u040d\1\u0418"+
            "\1\u040e\1\u0418\1\u040c\1\u0417\1\u040f\1\u0418\1\uffff\1\u0413"+
            "\1\u0418\26\uffff\1\u041a\50\uffff\1\u040a",
            "\1\u0421\12\uffff\1\u042d\5\uffff\1\u041d\50\uffff\1\u0426"+
            "\1\u0429\1\u042c\1\u041b\1\u0421\2\u042c\1\u0425\1\uffff\1\u041c"+
            "\1\u0423\1\u042c\1\u041f\1\u0424\1\u0422\1\u042c\1\u0420\2\u0424"+
            "\1\u042c\1\u0425\1\uffff\1\u0428\1\u042c\1\u042a\1\u0421\1\u042c"+
            "\1\u0422\1\u042c\1\u0420\1\u042b\1\u0423\1\u042c\1\uffff\1\u0427"+
            "\1\u042c\26\uffff\1\u042e\50\uffff\1\u041e",
            "\1\u0430\14\uffff\1\u042f\5\uffff\1\u0433\100\uffff\1\u0434"+
            "\53\uffff\1\u0432\2\uffff\1\u0432\7\uffff\1\u0431\2\uffff\1"+
            "\u0432",
            "\1\u0436\12\uffff\1\u0442\56\uffff\1\u043b\1\u043e\1\u0441"+
            "\1\uffff\1\u0436\2\u0441\1\u043a\2\uffff\1\u0438\1\u0441\2\u0439"+
            "\1\u0437\1\u0441\1\u0435\2\u0439\1\u0441\1\u043a\1\uffff\1\u043d"+
            "\1\u0441\1\u043f\1\u0436\1\u0441\1\u0437\1\u0441\1\u0435\1\u0440"+
            "\1\u0438\1\u0441\1\uffff\1\u043c\1\u0441\26\uffff\1\u0443",
            "\1\u0445\12\uffff\1\u0451\56\uffff\1\u044a\1\u044d\1\u0450"+
            "\1\uffff\1\u0445\2\u0450\1\u0449\2\uffff\1\u0447\1\u0450\2\u0448"+
            "\1\u0446\1\u0450\1\u0444\2\u0448\1\u0450\1\u0449\1\uffff\1\u044c"+
            "\1\u0450\1\u044e\1\u0445\1\u0450\1\u0446\1\u0450\1\u0444\1\u044f"+
            "\1\u0447\1\u0450\1\uffff\1\u044b\1\u0450\26\uffff\1\u0452",
            "\1\u0454\12\uffff\1\u0460\56\uffff\1\u0459\1\u045c\1\u045f"+
            "\1\uffff\1\u0454\2\u045f\1\u0458\2\uffff\1\u0456\1\u045f\2\u0457"+
            "\1\u0455\1\u045f\1\u0453\2\u0457\1\u045f\1\u0458\1\uffff\1\u045b"+
            "\1\u045f\1\u045d\1\u0454\1\u045f\1\u0455\1\u045f\1\u0453\1\u045e"+
            "\1\u0456\1\u045f\1\uffff\1\u045a\1\u045f\26\uffff\1\u0461",
            "\1\u0463\12\uffff\1\u046f\56\uffff\1\u0468\1\u046b\1\u046e"+
            "\1\uffff\1\u0463\2\u046e\1\u0467\2\uffff\1\u0465\1\u046e\2\u0466"+
            "\1\u0464\1\u046e\1\u0462\2\u0466\1\u046e\1\u0467\1\uffff\1\u046a"+
            "\1\u046e\1\u046c\1\u0463\1\u046e\1\u0464\1\u046e\1\u0462\1\u046d"+
            "\1\u0465\1\u046e\1\uffff\1\u0469\1\u046e\26\uffff\1\u0470",
            "\1\u0472\12\uffff\1\u047e\56\uffff\1\u0477\1\u047a\1\u047d"+
            "\1\uffff\1\u0472\2\u047d\1\u0476\2\uffff\1\u0474\1\u047d\2\u0475"+
            "\1\u0473\1\u047d\1\u0471\2\u0475\1\u047d\1\u0476\1\uffff\1\u0479"+
            "\1\u047d\1\u047b\1\u0472\1\u047d\1\u0473\1\u047d\1\u0471\1\u047c"+
            "\1\u0474\1\u047d\1\uffff\1\u0478\1\u047d\26\uffff\1\u047f",
            "\1\u0480",
            "\1\u0481",
            "\1\u0482",
            "\1\12\12\uffff\1\4\5\uffff\1\u0484\36\uffff\1\12\13\uffff\1"+
            "\4\2\uffff\2\4\2\uffff\1\u0483\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0485\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\u0492\14\uffff\1\u048e\42\uffff\1\u0490\11\uffff\1\u0493"+
            "\2\uffff\1\u0491\5\uffff\1\u049c\4\uffff\1\u0494\1\uffff\1\u0498"+
            "\4\uffff\1\u0495\5\uffff\1\u0494\1\uffff\1\u0498\3\uffff\1\u0496"+
            "\16\uffff\1\u049d\22\uffff\1\u0497\6\uffff\1\u049e\1\u049f\1"+
            "\u04a0\21\uffff\1\u0499\7\uffff\1\u04a3\6\uffff\1\u04a4\1\uffff"+
            "\1\u04a2\3\uffff\1\u04a1\2\uffff\1\u049b\2\uffff\1\u049b\7\uffff"+
            "\1\u049a\1\uffff\1\u04a1\1\u049b\4\uffff\1\u048f",
            "\1\u04ad\11\uffff\1\u04a6\2\uffff\1\u04a5\5\uffff\1\u04b0\4"+
            "\uffff\1\u04a7\1\uffff\1\u04ab\4\uffff\1\u04a8\5\uffff\1\u04a7"+
            "\1\uffff\1\u04ab\3\uffff\1\u04a9\16\uffff\1\u04b1\22\uffff\1"+
            "\u04aa\6\uffff\1\u04b2\1\u04b3\1\u04b4\31\uffff\1\u04b7\6\uffff"+
            "\1\u04b8\1\uffff\1\u04b6\3\uffff\1\u04b5\2\uffff\1\u04af\2\uffff"+
            "\1\u04af\7\uffff\1\u04ae\1\uffff\1\u04b5\1\u04af\4\uffff\1\u04ac",
            "\1\u04bf\14\uffff\1\u04c3\5\uffff\1\u04c2\4\uffff\1\u04b9\1"+
            "\uffff\1\u04bd\4\uffff\1\u04ba\5\uffff\1\u04b9\1\uffff\1\u04bd"+
            "\3\uffff\1\u04bb\16\uffff\1\u04c4\22\uffff\1\u04bc\6\uffff\1"+
            "\u04c5\1\u04c6\1\u04c7\31\uffff\1\u04ca\6\uffff\1\u04cb\1\uffff"+
            "\1\u04c9\3\uffff\1\u04c8\2\uffff\1\u04c1\2\uffff\1\u04c1\7\uffff"+
            "\1\u04c0\1\uffff\1\u04c8\1\u04c1\4\uffff\1\u04be",
            "\1\u04d1\14\uffff\1\u04d5\5\uffff\1\u04d4\6\uffff\1\u04cf\4"+
            "\uffff\1\u04cc\7\uffff\1\u04cf\3\uffff\1\u04cd\16\uffff\1\u04d6"+
            "\22\uffff\1\u04ce\6\uffff\1\u04d7\1\u04d8\1\u04d9\31\uffff\1"+
            "\u04dc\6\uffff\1\u04dd\1\uffff\1\u04db\3\uffff\1\u04da\2\uffff"+
            "\1\u04d3\2\uffff\1\u04d3\7\uffff\1\u04d2\1\uffff\1\u04da\1\u04d3"+
            "\4\uffff\1\u04d0",
            "\1\u04e2\14\uffff\1\u04e6\5\uffff\1\u04e5\6\uffff\1\u04e0\14"+
            "\uffff\1\u04e0\3\uffff\1\u04de\16\uffff\1\u04e7\22\uffff\1\u04df"+
            "\6\uffff\1\u04e8\1\u04e9\1\u04ea\31\uffff\1\u04ed\6\uffff\1"+
            "\u04ee\1\uffff\1\u04ec\3\uffff\1\u04eb\2\uffff\1\u04e4\2\uffff"+
            "\1\u04e4\7\uffff\1\u04e3\1\uffff\1\u04eb\1\u04e4\4\uffff\1\u04e1",
            "\1\u04f2\14\uffff\1\u04f6\5\uffff\1\u04f5\6\uffff\1\u04f0\14"+
            "\uffff\1\u04f0\22\uffff\1\u04f7\22\uffff\1\u04ef\6\uffff\1\u04f8"+
            "\1\u04f9\1\u04fa\31\uffff\1\u04fd\6\uffff\1\u04fe\1\uffff\1"+
            "\u04fc\3\uffff\1\u04fb\2\uffff\1\u04f4\2\uffff\1\u04f4\7\uffff"+
            "\1\u04f3\1\uffff\1\u04fb\1\u04f4\4\uffff\1\u04f1",
            "\1\u0501\14\uffff\1\u0505\5\uffff\1\u0504\6\uffff\1\u04ff\14"+
            "\uffff\1\u04ff\22\uffff\1\u0506\31\uffff\1\u0507\1\u0508\1\u0509"+
            "\31\uffff\1\u050c\6\uffff\1\u050d\1\uffff\1\u050b\3\uffff\1"+
            "\u050a\2\uffff\1\u0503\2\uffff\1\u0503\7\uffff\1\u0502\1\uffff"+
            "\1\u050a\1\u0503\4\uffff\1\u0500",
            "\1\u050f\14\uffff\1\u0513\5\uffff\1\u0512\46\uffff\1\u0514"+
            "\31\uffff\1\u0515\1\u0516\1\u0517\31\uffff\1\u051a\6\uffff\1"+
            "\u051b\1\uffff\1\u0519\3\uffff\1\u0518\2\uffff\1\u0511\2\uffff"+
            "\1\u0511\7\uffff\1\u0510\1\uffff\1\u0518\1\u0511\4\uffff\1\u050e",
            "\1\u051c\177\uffff\1\u051e\2\uffff\1\u051e\7\uffff\1\u051d"+
            "\2\uffff\1\u051e",
            "\1\u0525\20\uffff\1\u0521\50\uffff\1\u052a\1\u052d\1\u0530"+
            "\1\u051f\1\u0525\2\u0530\1\u0529\1\uffff\1\u0520\1\u0527\1\u0530"+
            "\1\u0523\1\u0528\1\u0526\1\u0530\1\u0524\2\u0528\1\u0530\1\u0529"+
            "\1\uffff\1\u052c\1\u0530\1\u052e\1\u0525\1\u0530\1\u0526\1\u0530"+
            "\1\u0524\1\u052f\1\u0527\1\u0530\1\uffff\1\u052b\1\u0530\30"+
            "\uffff\1\u0531\46\uffff\1\u0522",
            "\1\u0538\20\uffff\1\u0534\50\uffff\1\u053d\1\u0540\1\u0543"+
            "\1\u0532\1\u0538\2\u0543\1\u053c\1\uffff\1\u0533\1\u053a\1\u0543"+
            "\1\u0536\1\u053b\1\u0539\1\u0543\1\u0537\2\u053b\1\u0543\1\u053c"+
            "\1\uffff\1\u053f\1\u0543\1\u0541\1\u0538\1\u0543\1\u0539\1\u0543"+
            "\1\u0537\1\u0542\1\u053a\1\u0543\1\uffff\1\u053e\1\u0543\30"+
            "\uffff\1\u0544\46\uffff\1\u0535",
            "\1\u054b\20\uffff\1\u0547\50\uffff\1\u0550\1\u0553\1\u0556"+
            "\1\u0545\1\u054b\2\u0556\1\u054f\1\uffff\1\u0546\1\u054d\1\u0556"+
            "\1\u0549\1\u054e\1\u054c\1\u0556\1\u054a\2\u054e\1\u0556\1\u054f"+
            "\1\uffff\1\u0552\1\u0556\1\u0554\1\u054b\1\u0556\1\u054c\1\u0556"+
            "\1\u054a\1\u0555\1\u054d\1\u0556\1\uffff\1\u0551\1\u0556\30"+
            "\uffff\1\u0557\46\uffff\1\u0548",
            "\1\u0559\14\uffff\1\u0558\5\uffff\1\u055c\100\uffff\1\u055d"+
            "\53\uffff\1\u055b\2\uffff\1\u055b\7\uffff\1\u055a\2\uffff\1"+
            "\u055b",
            "\1\u055f\71\uffff\1\u0564\1\u0567\1\u056a\1\uffff\1\u055f\2"+
            "\u056a\1\u0563\2\uffff\1\u0561\1\u056a\2\u0562\1\u0560\1\u056a"+
            "\1\u055e\2\u0562\1\u056a\1\u0563\1\uffff\1\u0566\1\u056a\1\u0568"+
            "\1\u055f\1\u056a\1\u0560\1\u056a\1\u055e\1\u0569\1\u0561\1\u056a"+
            "\1\uffff\1\u0565\1\u056a\30\uffff\1\u056b",
            "\1\u056d\71\uffff\1\u0572\1\u0575\1\u0578\1\uffff\1\u056d\2"+
            "\u0578\1\u0571\2\uffff\1\u056f\1\u0578\2\u0570\1\u056e\1\u0578"+
            "\1\u056c\2\u0570\1\u0578\1\u0571\1\uffff\1\u0574\1\u0578\1\u0576"+
            "\1\u056d\1\u0578\1\u056e\1\u0578\1\u056c\1\u0577\1\u056f\1\u0578"+
            "\1\uffff\1\u0573\1\u0578\30\uffff\1\u0579",
            "\1\u057b\71\uffff\1\u0580\1\u0583\1\u0586\1\uffff\1\u057b\2"+
            "\u0586\1\u057f\2\uffff\1\u057d\1\u0586\2\u057e\1\u057c\1\u0586"+
            "\1\u057a\2\u057e\1\u0586\1\u057f\1\uffff\1\u0582\1\u0586\1\u0584"+
            "\1\u057b\1\u0586\1\u057c\1\u0586\1\u057a\1\u0585\1\u057d\1\u0586"+
            "\1\uffff\1\u0581\1\u0586\30\uffff\1\u0587",
            "\1\u0589\71\uffff\1\u058e\1\u0591\1\u0594\1\uffff\1\u0589\2"+
            "\u0594\1\u058d\2\uffff\1\u058b\1\u0594\2\u058c\1\u058a\1\u0594"+
            "\1\u0588\2\u058c\1\u0594\1\u058d\1\uffff\1\u0590\1\u0594\1\u0592"+
            "\1\u0589\1\u0594\1\u058a\1\u0594\1\u0588\1\u0593\1\u058b\1\u0594"+
            "\1\uffff\1\u058f\1\u0594\30\uffff\1\u0595",
            "\1\u0597\71\uffff\1\u059c\1\u059f\1\u05a2\1\uffff\1\u0597\2"+
            "\u05a2\1\u059b\2\uffff\1\u0599\1\u05a2\2\u059a\1\u0598\1\u05a2"+
            "\1\u0596\2\u059a\1\u05a2\1\u059b\1\uffff\1\u059e\1\u05a2\1\u05a0"+
            "\1\u0597\1\u05a2\1\u0598\1\u05a2\1\u0596\1\u05a1\1\u0599\1\u05a2"+
            "\1\uffff\1\u059d\1\u05a2\30\uffff\1\u05a3",
            "\1\u05a4",
            "\1\u05a5",
            "\1\u05a6",
            "\1\12\12\uffff\1\4\5\uffff\1\u05a7\36\uffff\1\12\13\uffff\1"+
            "\4\2\uffff\2\4\2\uffff\1\u05ae\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05a8\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05b9\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05b2\1\uffff\2\4\2\uffff\1\u05b3\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05ba\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05c5\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05be\1\uffff\2\4\2\uffff\1\u05bf\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05c6\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05d1\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05ca\1\uffff\2\4\2\uffff\1\u05cb\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05d2\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05dd\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05d6\1\uffff\2\4\2\uffff\1\u05d7\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05de\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05e9\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05e2\1\uffff\2\4\2\uffff\1\u05e3\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05ea\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05f5\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05ee\1\uffff\2\4\2\uffff\1\u05ef\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05f6\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\u05fe\14\uffff\1\u05fa\42\uffff\1\u05fc\11\uffff\1\u05ff"+
            "\2\uffff\1\u05fd\5\uffff\1\u0608\4\uffff\1\u0600\1\uffff\1\u0604"+
            "\4\uffff\1\u0601\5\uffff\1\u0600\1\uffff\1\u0604\3\uffff\1\u0602"+
            "\16\uffff\1\u0609\22\uffff\1\u0603\6\uffff\1\u060a\1\u060b\1"+
            "\u060c\21\uffff\1\u0605\7\uffff\1\u060f\6\uffff\1\u0610\1\uffff"+
            "\1\u060e\3\uffff\1\u060d\2\uffff\1\u0607\2\uffff\1\u0607\7\uffff"+
            "\1\u0606\1\uffff\1\u060d\1\u0607\4\uffff\1\u05fb",
            "\1\u0619\11\uffff\1\u0612\2\uffff\1\u0611\5\uffff\1\u061c\4"+
            "\uffff\1\u0613\1\uffff\1\u0617\4\uffff\1\u0614\5\uffff\1\u0613"+
            "\1\uffff\1\u0617\3\uffff\1\u0615\16\uffff\1\u061d\22\uffff\1"+
            "\u0616\6\uffff\1\u061e\1\u061f\1\u0620\31\uffff\1\u0623\6\uffff"+
            "\1\u0624\1\uffff\1\u0622\3\uffff\1\u0621\2\uffff\1\u061b\2\uffff"+
            "\1\u061b\7\uffff\1\u061a\1\uffff\1\u0621\1\u061b\4\uffff\1\u0618",
            "\1\u062b\14\uffff\1\u062f\5\uffff\1\u062e\4\uffff\1\u0625\1"+
            "\uffff\1\u0629\4\uffff\1\u0626\5\uffff\1\u0625\1\uffff\1\u0629"+
            "\3\uffff\1\u0627\16\uffff\1\u0630\22\uffff\1\u0628\6\uffff\1"+
            "\u0631\1\u0632\1\u0633\31\uffff\1\u0636\6\uffff\1\u0637\1\uffff"+
            "\1\u0635\3\uffff\1\u0634\2\uffff\1\u062d\2\uffff\1\u062d\7\uffff"+
            "\1\u062c\1\uffff\1\u0634\1\u062d\4\uffff\1\u062a",
            "\1\u063d\14\uffff\1\u0641\5\uffff\1\u0640\6\uffff\1\u063b\4"+
            "\uffff\1\u0638\7\uffff\1\u063b\3\uffff\1\u0639\16\uffff\1\u0642"+
            "\22\uffff\1\u063a\6\uffff\1\u0643\1\u0644\1\u0645\31\uffff\1"+
            "\u0648\6\uffff\1\u0649\1\uffff\1\u0647\3\uffff\1\u0646\2\uffff"+
            "\1\u063f\2\uffff\1\u063f\7\uffff\1\u063e\1\uffff\1\u0646\1\u063f"+
            "\4\uffff\1\u063c",
            "\1\u064e\14\uffff\1\u0652\5\uffff\1\u0651\6\uffff\1\u064c\14"+
            "\uffff\1\u064c\3\uffff\1\u064a\16\uffff\1\u0653\22\uffff\1\u064b"+
            "\6\uffff\1\u0654\1\u0655\1\u0656\31\uffff\1\u0659\6\uffff\1"+
            "\u065a\1\uffff\1\u0658\3\uffff\1\u0657\2\uffff\1\u0650\2\uffff"+
            "\1\u0650\7\uffff\1\u064f\1\uffff\1\u0657\1\u0650\4\uffff\1\u064d",
            "\1\u065e\14\uffff\1\u0662\5\uffff\1\u0661\6\uffff\1\u065c\14"+
            "\uffff\1\u065c\22\uffff\1\u0663\22\uffff\1\u065b\6\uffff\1\u0664"+
            "\1\u0665\1\u0666\31\uffff\1\u0669\6\uffff\1\u066a\1\uffff\1"+
            "\u0668\3\uffff\1\u0667\2\uffff\1\u0660\2\uffff\1\u0660\7\uffff"+
            "\1\u065f\1\uffff\1\u0667\1\u0660\4\uffff\1\u065d",
            "\1\u066d\14\uffff\1\u0671\5\uffff\1\u0670\6\uffff\1\u066b\14"+
            "\uffff\1\u066b\22\uffff\1\u0672\31\uffff\1\u0673\1\u0674\1\u0675"+
            "\31\uffff\1\u0678\6\uffff\1\u0679\1\uffff\1\u0677\3\uffff\1"+
            "\u0676\2\uffff\1\u066f\2\uffff\1\u066f\7\uffff\1\u066e\1\uffff"+
            "\1\u0676\1\u066f\4\uffff\1\u066c",
            "\1\u067b\14\uffff\1\u067f\5\uffff\1\u067e\46\uffff\1\u0680"+
            "\31\uffff\1\u0681\1\u0682\1\u0683\31\uffff\1\u0686\6\uffff\1"+
            "\u0687\1\uffff\1\u0685\3\uffff\1\u0684\2\uffff\1\u067d\2\uffff"+
            "\1\u067d\7\uffff\1\u067c\1\uffff\1\u0684\1\u067d\4\uffff\1\u067a",
            "\1\u0688\177\uffff\1\u068a\2\uffff\1\u068a\7\uffff\1\u0689"+
            "\2\uffff\1\u068a",
            "\1\u0691\12\uffff\1\u069d\5\uffff\1\u068d\50\uffff\1\u0696"+
            "\1\u0699\1\u069c\1\u068b\1\u0691\2\u069c\1\u0695\1\uffff\1\u068c"+
            "\1\u0693\1\u069c\1\u068f\1\u0694\1\u0692\1\u069c\1\u0690\2\u0694"+
            "\1\u069c\1\u0695\1\uffff\1\u0698\1\u069c\1\u069a\1\u0691\1\u069c"+
            "\1\u0692\1\u069c\1\u0690\1\u069b\1\u0693\1\u069c\1\uffff\1\u0697"+
            "\1\u069c\26\uffff\1\u069e\50\uffff\1\u068e",
            "\1\u06a5\12\uffff\1\u06b1\5\uffff\1\u06a1\50\uffff\1\u06aa"+
            "\1\u06ad\1\u06b0\1\u069f\1\u06a5\2\u06b0\1\u06a9\1\uffff\1\u06a0"+
            "\1\u06a7\1\u06b0\1\u06a3\1\u06a8\1\u06a6\1\u06b0\1\u06a4\2\u06a8"+
            "\1\u06b0\1\u06a9\1\uffff\1\u06ac\1\u06b0\1\u06ae\1\u06a5\1\u06b0"+
            "\1\u06a6\1\u06b0\1\u06a4\1\u06af\1\u06a7\1\u06b0\1\uffff\1\u06ab"+
            "\1\u06b0\26\uffff\1\u06b2\50\uffff\1\u06a2",
            "\1\u06b9\12\uffff\1\u06c5\5\uffff\1\u06b5\50\uffff\1\u06be"+
            "\1\u06c1\1\u06c4\1\u06b3\1\u06b9\2\u06c4\1\u06bd\1\uffff\1\u06b4"+
            "\1\u06bb\1\u06c4\1\u06b7\1\u06bc\1\u06ba\1\u06c4\1\u06b8\2\u06bc"+
            "\1\u06c4\1\u06bd\1\uffff\1\u06c0\1\u06c4\1\u06c2\1\u06b9\1\u06c4"+
            "\1\u06ba\1\u06c4\1\u06b8\1\u06c3\1\u06bb\1\u06c4\1\uffff\1\u06bf"+
            "\1\u06c4\26\uffff\1\u06c6\50\uffff\1\u06b6",
            "\1\u06c8\14\uffff\1\u06c7\5\uffff\1\u06cb\100\uffff\1\u06cc"+
            "\53\uffff\1\u06ca\2\uffff\1\u06ca\7\uffff\1\u06c9\2\uffff\1"+
            "\u06ca",
            "\1\u06ce\12\uffff\1\u06da\56\uffff\1\u06d3\1\u06d6\1\u06d9"+
            "\1\uffff\1\u06ce\2\u06d9\1\u06d2\2\uffff\1\u06d0\1\u06d9\2\u06d1"+
            "\1\u06cf\1\u06d9\1\u06cd\2\u06d1\1\u06d9\1\u06d2\1\uffff\1\u06d5"+
            "\1\u06d9\1\u06d7\1\u06ce\1\u06d9\1\u06cf\1\u06d9\1\u06cd\1\u06d8"+
            "\1\u06d0\1\u06d9\1\uffff\1\u06d4\1\u06d9\26\uffff\1\u06db",
            "\1\u06dd\12\uffff\1\u06e9\56\uffff\1\u06e2\1\u06e5\1\u06e8"+
            "\1\uffff\1\u06dd\2\u06e8\1\u06e1\2\uffff\1\u06df\1\u06e8\2\u06e0"+
            "\1\u06de\1\u06e8\1\u06dc\2\u06e0\1\u06e8\1\u06e1\1\uffff\1\u06e4"+
            "\1\u06e8\1\u06e6\1\u06dd\1\u06e8\1\u06de\1\u06e8\1\u06dc\1\u06e7"+
            "\1\u06df\1\u06e8\1\uffff\1\u06e3\1\u06e8\26\uffff\1\u06ea",
            "\1\u06ec\12\uffff\1\u06f8\56\uffff\1\u06f1\1\u06f4\1\u06f7"+
            "\1\uffff\1\u06ec\2\u06f7\1\u06f0\2\uffff\1\u06ee\1\u06f7\2\u06ef"+
            "\1\u06ed\1\u06f7\1\u06eb\2\u06ef\1\u06f7\1\u06f0\1\uffff\1\u06f3"+
            "\1\u06f7\1\u06f5\1\u06ec\1\u06f7\1\u06ed\1\u06f7\1\u06eb\1\u06f6"+
            "\1\u06ee\1\u06f7\1\uffff\1\u06f2\1\u06f7\26\uffff\1\u06f9",
            "\1\u06fb\12\uffff\1\u0707\56\uffff\1\u0700\1\u0703\1\u0706"+
            "\1\uffff\1\u06fb\2\u0706\1\u06ff\2\uffff\1\u06fd\1\u0706\2\u06fe"+
            "\1\u06fc\1\u0706\1\u06fa\2\u06fe\1\u0706\1\u06ff\1\uffff\1\u0702"+
            "\1\u0706\1\u0704\1\u06fb\1\u0706\1\u06fc\1\u0706\1\u06fa\1\u0705"+
            "\1\u06fd\1\u0706\1\uffff\1\u0701\1\u0706\26\uffff\1\u0708",
            "\1\u070a\12\uffff\1\u0716\56\uffff\1\u070f\1\u0712\1\u0715"+
            "\1\uffff\1\u070a\2\u0715\1\u070e\2\uffff\1\u070c\1\u0715\2\u070d"+
            "\1\u070b\1\u0715\1\u0709\2\u070d\1\u0715\1\u070e\1\uffff\1\u0711"+
            "\1\u0715\1\u0713\1\u070a\1\u0715\1\u070b\1\u0715\1\u0709\1\u0714"+
            "\1\u070c\1\u0715\1\uffff\1\u0710\1\u0715\26\uffff\1\u0717",
            "\1\u0718",
            "\1\u0719",
            "\1\u071a",
            "\1\12\12\uffff\1\4\5\uffff\1\u071c\36\uffff\1\12\13\uffff\1"+
            "\4\2\uffff\2\4\2\uffff\1\u071b\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u071d\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\u072a\14\uffff\1\u0726\42\uffff\1\u0728\11\uffff\1\u072b"+
            "\2\uffff\1\u0729\5\uffff\1\u0734\4\uffff\1\u072c\1\uffff\1\u0730"+
            "\4\uffff\1\u072d\5\uffff\1\u072c\1\uffff\1\u0730\3\uffff\1\u072e"+
            "\16\uffff\1\u0735\22\uffff\1\u072f\6\uffff\1\u0736\1\u0737\1"+
            "\u0738\21\uffff\1\u0731\7\uffff\1\u073b\6\uffff\1\u073c\1\uffff"+
            "\1\u073a\3\uffff\1\u0739\2\uffff\1\u0733\2\uffff\1\u0733\7\uffff"+
            "\1\u0732\1\uffff\1\u0739\1\u0733\4\uffff\1\u0727",
            "\1\u0745\11\uffff\1\u073e\2\uffff\1\u073d\5\uffff\1\u0748\4"+
            "\uffff\1\u073f\1\uffff\1\u0743\4\uffff\1\u0740\5\uffff\1\u073f"+
            "\1\uffff\1\u0743\3\uffff\1\u0741\16\uffff\1\u0749\22\uffff\1"+
            "\u0742\6\uffff\1\u074a\1\u074b\1\u074c\31\uffff\1\u074f\6\uffff"+
            "\1\u0750\1\uffff\1\u074e\3\uffff\1\u074d\2\uffff\1\u0747\2\uffff"+
            "\1\u0747\7\uffff\1\u0746\1\uffff\1\u074d\1\u0747\4\uffff\1\u0744",
            "\1\u0757\14\uffff\1\u075b\5\uffff\1\u075a\4\uffff\1\u0751\1"+
            "\uffff\1\u0755\4\uffff\1\u0752\5\uffff\1\u0751\1\uffff\1\u0755"+
            "\3\uffff\1\u0753\16\uffff\1\u075c\22\uffff\1\u0754\6\uffff\1"+
            "\u075d\1\u075e\1\u075f\31\uffff\1\u0762\6\uffff\1\u0763\1\uffff"+
            "\1\u0761\3\uffff\1\u0760\2\uffff\1\u0759\2\uffff\1\u0759\7\uffff"+
            "\1\u0758\1\uffff\1\u0760\1\u0759\4\uffff\1\u0756",
            "\1\u0769\14\uffff\1\u076d\5\uffff\1\u076c\6\uffff\1\u0767\4"+
            "\uffff\1\u0764\7\uffff\1\u0767\3\uffff\1\u0765\16\uffff\1\u076e"+
            "\22\uffff\1\u0766\6\uffff\1\u076f\1\u0770\1\u0771\31\uffff\1"+
            "\u0774\6\uffff\1\u0775\1\uffff\1\u0773\3\uffff\1\u0772\2\uffff"+
            "\1\u076b\2\uffff\1\u076b\7\uffff\1\u076a\1\uffff\1\u0772\1\u076b"+
            "\4\uffff\1\u0768",
            "\1\u077a\14\uffff\1\u077e\5\uffff\1\u077d\6\uffff\1\u0778\14"+
            "\uffff\1\u0778\3\uffff\1\u0776\16\uffff\1\u077f\22\uffff\1\u0777"+
            "\6\uffff\1\u0780\1\u0781\1\u0782\31\uffff\1\u0785\6\uffff\1"+
            "\u0786\1\uffff\1\u0784\3\uffff\1\u0783\2\uffff\1\u077c\2\uffff"+
            "\1\u077c\7\uffff\1\u077b\1\uffff\1\u0783\1\u077c\4\uffff\1\u0779",
            "\1\u078a\14\uffff\1\u078e\5\uffff\1\u078d\6\uffff\1\u0788\14"+
            "\uffff\1\u0788\22\uffff\1\u078f\22\uffff\1\u0787\6\uffff\1\u0790"+
            "\1\u0791\1\u0792\31\uffff\1\u0795\6\uffff\1\u0796\1\uffff\1"+
            "\u0794\3\uffff\1\u0793\2\uffff\1\u078c\2\uffff\1\u078c\7\uffff"+
            "\1\u078b\1\uffff\1\u0793\1\u078c\4\uffff\1\u0789",
            "\1\u0799\14\uffff\1\u079d\5\uffff\1\u079c\6\uffff\1\u0797\14"+
            "\uffff\1\u0797\22\uffff\1\u079e\31\uffff\1\u079f\1\u07a0\1\u07a1"+
            "\31\uffff\1\u07a4\6\uffff\1\u07a5\1\uffff\1\u07a3\3\uffff\1"+
            "\u07a2\2\uffff\1\u079b\2\uffff\1\u079b\7\uffff\1\u079a\1\uffff"+
            "\1\u07a2\1\u079b\4\uffff\1\u0798",
            "\1\u07a7\14\uffff\1\u07ab\5\uffff\1\u07aa\46\uffff\1\u07ac"+
            "\31\uffff\1\u07ad\1\u07ae\1\u07af\31\uffff\1\u07b2\6\uffff\1"+
            "\u07b3\1\uffff\1\u07b1\3\uffff\1\u07b0\2\uffff\1\u07a9\2\uffff"+
            "\1\u07a9\7\uffff\1\u07a8\1\uffff\1\u07b0\1\u07a9\4\uffff\1\u07a6",
            "\1\u07b4\177\uffff\1\u07b6\2\uffff\1\u07b6\7\uffff\1\u07b5"+
            "\2\uffff\1\u07b6",
            "\1\u07bd\20\uffff\1\u07b9\50\uffff\1\u07c2\1\u07c5\1\u07c8"+
            "\1\u07b7\1\u07bd\2\u07c8\1\u07c1\1\uffff\1\u07b8\1\u07bf\1\u07c8"+
            "\1\u07bb\1\u07c0\1\u07be\1\u07c8\1\u07bc\2\u07c0\1\u07c8\1\u07c1"+
            "\1\uffff\1\u07c4\1\u07c8\1\u07c6\1\u07bd\1\u07c8\1\u07be\1\u07c8"+
            "\1\u07bc\1\u07c7\1\u07bf\1\u07c8\1\uffff\1\u07c3\1\u07c8\30"+
            "\uffff\1\u07c9\46\uffff\1\u07ba",
            "\1\u07d0\20\uffff\1\u07cc\50\uffff\1\u07d5\1\u07d8\1\u07db"+
            "\1\u07ca\1\u07d0\2\u07db\1\u07d4\1\uffff\1\u07cb\1\u07d2\1\u07db"+
            "\1\u07ce\1\u07d3\1\u07d1\1\u07db\1\u07cf\2\u07d3\1\u07db\1\u07d4"+
            "\1\uffff\1\u07d7\1\u07db\1\u07d9\1\u07d0\1\u07db\1\u07d1\1\u07db"+
            "\1\u07cf\1\u07da\1\u07d2\1\u07db\1\uffff\1\u07d6\1\u07db\30"+
            "\uffff\1\u07dc\46\uffff\1\u07cd",
            "\1\u07e3\20\uffff\1\u07df\50\uffff\1\u07e8\1\u07eb\1\u07ee"+
            "\1\u07dd\1\u07e3\2\u07ee\1\u07e7\1\uffff\1\u07de\1\u07e5\1\u07ee"+
            "\1\u07e1\1\u07e6\1\u07e4\1\u07ee\1\u07e2\2\u07e6\1\u07ee\1\u07e7"+
            "\1\uffff\1\u07ea\1\u07ee\1\u07ec\1\u07e3\1\u07ee\1\u07e4\1\u07ee"+
            "\1\u07e2\1\u07ed\1\u07e5\1\u07ee\1\uffff\1\u07e9\1\u07ee\30"+
            "\uffff\1\u07ef\46\uffff\1\u07e0",
            "\1\u07f1\14\uffff\1\u07f0\5\uffff\1\u07f4\100\uffff\1\u07f5"+
            "\53\uffff\1\u07f3\2\uffff\1\u07f3\7\uffff\1\u07f2\2\uffff\1"+
            "\u07f3",
            "\1\u07f7\71\uffff\1\u07fc\1\u07ff\1\u0802\1\uffff\1\u07f7\2"+
            "\u0802\1\u07fb\2\uffff\1\u07f9\1\u0802\2\u07fa\1\u07f8\1\u0802"+
            "\1\u07f6\2\u07fa\1\u0802\1\u07fb\1\uffff\1\u07fe\1\u0802\1\u0800"+
            "\1\u07f7\1\u0802\1\u07f8\1\u0802\1\u07f6\1\u0801\1\u07f9\1\u0802"+
            "\1\uffff\1\u07fd\1\u0802\30\uffff\1\u0803",
            "\1\u0805\71\uffff\1\u080a\1\u080d\1\u0810\1\uffff\1\u0805\2"+
            "\u0810\1\u0809\2\uffff\1\u0807\1\u0810\2\u0808\1\u0806\1\u0810"+
            "\1\u0804\2\u0808\1\u0810\1\u0809\1\uffff\1\u080c\1\u0810\1\u080e"+
            "\1\u0805\1\u0810\1\u0806\1\u0810\1\u0804\1\u080f\1\u0807\1\u0810"+
            "\1\uffff\1\u080b\1\u0810\30\uffff\1\u0811",
            "\1\u0813\71\uffff\1\u0818\1\u081b\1\u081e\1\uffff\1\u0813\2"+
            "\u081e\1\u0817\2\uffff\1\u0815\1\u081e\2\u0816\1\u0814\1\u081e"+
            "\1\u0812\2\u0816\1\u081e\1\u0817\1\uffff\1\u081a\1\u081e\1\u081c"+
            "\1\u0813\1\u081e\1\u0814\1\u081e\1\u0812\1\u081d\1\u0815\1\u081e"+
            "\1\uffff\1\u0819\1\u081e\30\uffff\1\u081f",
            "\1\u0821\71\uffff\1\u0826\1\u0829\1\u082c\1\uffff\1\u0821\2"+
            "\u082c\1\u0825\2\uffff\1\u0823\1\u082c\2\u0824\1\u0822\1\u082c"+
            "\1\u0820\2\u0824\1\u082c\1\u0825\1\uffff\1\u0828\1\u082c\1\u082a"+
            "\1\u0821\1\u082c\1\u0822\1\u082c\1\u0820\1\u082b\1\u0823\1\u082c"+
            "\1\uffff\1\u0827\1\u082c\30\uffff\1\u082d",
            "\1\u082f\71\uffff\1\u0834\1\u0837\1\u083a\1\uffff\1\u082f\2"+
            "\u083a\1\u0833\2\uffff\1\u0831\1\u083a\2\u0832\1\u0830\1\u083a"+
            "\1\u082e\2\u0832\1\u083a\1\u0833\1\uffff\1\u0836\1\u083a\1\u0838"+
            "\1\u082f\1\u083a\1\u0830\1\u083a\1\u082e\1\u0839\1\u0831\1\u083a"+
            "\1\uffff\1\u0835\1\u083a\30\uffff\1\u083b",
            "\1\u083c",
            "\1\u083d",
            "\1\u083e",
            "\1\12\12\uffff\1\4\5\uffff\1\u083f\36\uffff\1\12\13\uffff\1"+
            "\4\2\uffff\2\4\2\uffff\1\u0846\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0840\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0851\36\uffff\1\12\13\uffff\1"+
            "\4\1\u084a\1\uffff\2\4\2\uffff\1\u084b\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0852\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u085d\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0856\1\uffff\2\4\2\uffff\1\u0857\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u085e\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0869\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0862\1\uffff\2\4\2\uffff\1\u0863\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u086a\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0875\36\uffff\1\12\13\uffff\1"+
            "\4\1\u086e\1\uffff\2\4\2\uffff\1\u086f\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0876\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0881\36\uffff\1\12\13\uffff\1"+
            "\4\1\u087a\1\uffff\2\4\2\uffff\1\u087b\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0882\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u088d\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0886\1\uffff\2\4\2\uffff\1\u0887\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u088e\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "490:32: ( static_type_wrapper )?";
        }
    }
    static final String DFA75_eotS =
        "\147\uffff";
    static final String DFA75_eofS =
        "\147\uffff";
    static final String DFA75_minS =
        "\2\6\26\uffff\1\6\25\uffff\1\6\70\uffff";
    static final String DFA75_maxS =
        "\2\u00c9\26\uffff\1\u00a3\25\uffff\1\u00c9\70\uffff";
    static final String DFA75_acceptS =
        "\2\uffff\1\1\52\uffff\1\2\71\uffff";
    static final String DFA75_specialS =
        "\147\uffff}>";
    static final String[] DFA75_transitionS = {
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\14\uffff\1\2\42\uffff\1\30\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\1\uffff\1\55\17\uffff\1\2\7\uffff\1\2\6\uffff\1\2\1\uffff\1"+
            "\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2"+
            "\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\20\uffff\1\2\50\uffff\10\2\1\uffff\14\2\1\uffff\13\2\1"+
            "\uffff\2\2\26\uffff\1\56\50\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\12\uffff\1\2\5\uffff\1\2\36\uffff\1\2\11\uffff\10\2\1"+
            "\55\33\2\14\uffff\1\2\11\uffff\2\2\7\uffff\1\2\6\uffff\3\2\26"+
            "\uffff\1\2\2\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "583:1: expression : ( classical_expr_wrp | struct_init );";
        }
    }
    static final String DFA79_eotS =
        "\176\uffff";
    static final String DFA79_eofS =
        "\176\uffff";
    static final String DFA79_minS =
        "\2\6\26\uffff\2\6\10\uffff\1\6\14\uffff\1\174\7\uffff\1\6\3\uffff"+
        "\1\6\17\uffff\1\174\62\uffff";
    static final String DFA79_maxS =
        "\2\u00c9\26\uffff\1\u00c9\1\u00a3\10\uffff\1\172\14\uffff\1\174"+
        "\7\uffff\1\u00c9\3\uffff\1\u00c9\17\uffff\1\174\62\uffff";
    static final String DFA79_acceptS =
        "\2\uffff\1\1\23\uffff\1\2\37\uffff\1\3\31\uffff\2\1\25\uffff\1\1"+
        "\25\uffff\1\1";
    static final String DFA79_specialS =
        "\176\uffff}>";
    static final String[] DFA79_transitionS = {
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\1\4\uffff\1\26\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\14\uffff\1\2\42\uffff\1\31\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\21\uffff\1\42\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1"+
            "\30",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\57\uffff\1\2\14\uffff\1\66\5\uffff\1\57\2\uffff\1\2\55"+
            "\uffff\1\2\43\uffff\1\2\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2"+
            "\2\uffff\1\2\4\uffff\1\2",
            "\1\2\20\uffff\1\2\50\uffff\3\2\1\73\4\2\1\uffff\1\67\13\2\1"+
            "\uffff\13\2\1\uffff\2\2\26\uffff\1\2\50\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\74\uffff\1\66\5\uffff\1\113\2\uffff\1\2\55\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\120",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\121\6\uffff\1\2\6\uffff\3\2\31"+
            "\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2"+
            "\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "\1\147\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\6\uffff\3"+
            "\2\31\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\175",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "601:19: ( classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )";
        }
    }
    static final String DFA84_eotS =
        "\162\uffff";
    static final String DFA84_eofS =
        "\162\uffff";
    static final String DFA84_minS =
        "\1\66\1\6\3\uffff\2\6\10\uffff\1\66\6\uffff\1\66\1\6\15\uffff\1"+
        "\6\114\uffff";
    static final String DFA84_maxS =
        "\1\u00c9\1\u00c1\3\uffff\2\u00c9\10\uffff\1\u00c9\6\uffff\1\u00c4"+
        "\1\u00a3\15\uffff\1\u00c1\114\uffff";
    static final String DFA84_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\75\uffff\2\1\22\uffff\1\1\21\uffff\1\1"+
        "\11\uffff";
    static final String DFA84_specialS =
        "\162\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\1\147\uffff\1\4\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\4",
            "\1\4\12\uffff\1\2\5\uffff\1\2\52\uffff\1\2\1\5\1\uffff\2\2"+
            "\2\uffff\1\6\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\33\uffff\1"+
            "\2\43\uffff\1\2\35\uffff\1\2",
            "",
            "",
            "",
            "\1\17\57\uffff\1\27\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\6\uffff\3"+
            "\2\21\uffff\1\4\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff"+
            "\1\26",
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\45\6\uffff\1\2\6\uffff\3\2\31\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\6\uffff\3\2\21\uffff\1\4\7\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\2\2\4\uffff\1\102",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\22\uffff\1\4\60\uffff\1\4\73\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\2\uffff\1\2",
            "\1\2\12\uffff\1\2\5\uffff\1\2\50\uffff\10\2\1\uffff\1\126\13"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\150\50\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\4\12\uffff\1\150\5\uffff\1\150\52\uffff\1\150\1\4\1\uffff"+
            "\2\150\2\uffff\1\150\1\uffff\1\150\3\uffff\1\150\3\uffff\1\150"+
            "\3\uffff\1\150\2\uffff\1\150\1\uffff\1\150\3\uffff\1\150\2\uffff"+
            "\1\150\33\uffff\1\150\43\uffff\1\150\35\uffff\1\150",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "625:4: ( object_name | func_pointer1 )";
        }
    }
    static final String DFA96_eotS =
        "\u00c7\uffff";
    static final String DFA96_eofS =
        "\70\uffff\1\2\u008e\uffff";
    static final String DFA96_minS =
        "\2\6\25\uffff\2\6\24\uffff\1\6\7\uffff\4\6\u008e\uffff";
    static final String DFA96_maxS =
        "\2\u00c9\25\uffff\1\u00c9\1\u00a3\24\uffff\1\u00a3\7\uffff\4\u00c9"+
        "\u008e\uffff";
    static final String DFA96_acceptS =
        "\2\uffff\1\2\23\uffff\1\1\62\uffff\4\1\20\uffff\1\1\25\uffff\1\1"+
        "\25\uffff\1\1\24\uffff\3\1\3\uffff\5\1\36\uffff";
    static final String DFA96_specialS =
        "\u00c7\uffff}>";
    static final String[] DFA96_transitionS = {
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\14\uffff\1\26\42\uffff\1\30\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\21\uffff\1\26\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1"+
            "\27",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\26\57\uffff\1\55\22\uffff\1\26\2\uffff\1\26\55\uffff\1\26"+
            "\43\uffff\1\26\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\26",
            "\1\67\20\uffff\1\2\50\uffff\10\2\1\uffff\1\65\2\2\1\66\10\2"+
            "\1\uffff\13\2\1\uffff\2\2\26\uffff\1\70\50\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\113\20\uffff\1\2\50\uffff\10\2\1\uffff\1\111\2\2\1\112\10"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\114\50\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\135\6\uffff\1\2\6\uffff\3\2\31"+
            "\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2"+
            "\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\57\uffff\1\163\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff\1"+
            "\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1"+
            "\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\u0089\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\11\uffff\1\26\10\uffff\1\2\6\uffff"+
            "\3\2\31\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\u009e\11\uffff\2\2\5\uffff\1\2\36\uffff\1\u00a6\11\uffff"+
            "\1\u009f\2\2\1\u00a8\4\2\1\uffff\1\u00a8\4\2\1\u00a0\1\2\1\u00a4"+
            "\4\2\1\u00a0\5\2\1\u00a0\1\2\1\u00a4\3\2\1\u00a0\2\2\14\uffff"+
            "\1\u00a8\11\uffff\3\2\2\uffff\1\2\3\uffff\1\u00a0\6\uffff\3"+
            "\u00a8\21\uffff\1\2\4\uffff\1\2\2\uffff\1\u00a8\6\uffff\1\u00a8"+
            "\1\uffff\1\u00a8\3\uffff\1\u00a8\2\uffff\1\u00a8\2\uffff\1\u00a8"+
            "\7\uffff\1\u00a7\1\uffff\2\u00a8\4\uffff\1\u00a5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "708:4: ( type_convertion )?";
        }
    }
    static final String DFA97_eotS =
        "\u00c5\uffff";
    static final String DFA97_eofS =
        "\67\uffff\1\2\u008d\uffff";
    static final String DFA97_minS =
        "\1\66\1\6\24\uffff\2\6\24\uffff\1\6\7\uffff\4\6\u008d\uffff";
    static final String DFA97_maxS =
        "\2\u00c9\24\uffff\1\u00c9\1\u00a3\24\uffff\1\u00a3\7\uffff\4\u00c9"+
        "\u008d\uffff";
    static final String DFA97_acceptS =
        "\2\uffff\1\2\22\uffff\1\1\62\uffff\4\1\20\uffff\1\1\25\uffff\1\1"+
        "\25\uffff\1\1\24\uffff\2\1\3\uffff\5\1\36\uffff";
    static final String DFA97_specialS =
        "\u00c5\uffff}>";
    static final String[] DFA97_transitionS = {
            "\1\2\11\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff"+
            "\2\2\4\uffff\1\2",
            "\1\2\14\uffff\1\25\42\uffff\1\27\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\21\uffff\1\25\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1"+
            "\26",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\25\57\uffff\1\54\22\uffff\1\25\2\uffff\1\25\55\uffff\1\25"+
            "\43\uffff\1\25\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\25",
            "\1\66\20\uffff\1\2\50\uffff\10\2\1\uffff\1\64\2\2\1\65\10\2"+
            "\1\uffff\13\2\1\uffff\2\2\26\uffff\1\67\50\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\112\20\uffff\1\2\50\uffff\10\2\1\uffff\1\110\2\2\1\111\10"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\113\50\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\134\6\uffff\1\2\6\uffff\3\2\31"+
            "\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2"+
            "\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\57\uffff\1\162\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff\1"+
            "\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1"+
            "\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\u0088\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\11\uffff\1\25\10\uffff\1\2\6\uffff"+
            "\3\2\31\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\11\uffff\2\2\5\uffff\1\2\36\uffff\1\u00a4\11\uffff\1\u009d"+
            "\2\2\1\u00a6\4\2\1\uffff\1\u00a6\4\2\1\u009e\1\2\1\u00a2\4\2"+
            "\1\u009e\5\2\1\u009e\1\2\1\u00a2\3\2\1\u009e\2\2\14\uffff\1"+
            "\u00a6\11\uffff\3\2\2\uffff\1\2\3\uffff\1\u009e\6\uffff\3\u00a6"+
            "\21\uffff\1\2\4\uffff\1\2\2\uffff\1\u00a6\6\uffff\1\u00a6\1"+
            "\uffff\1\u00a6\3\uffff\1\u00a6\2\uffff\1\u00a6\2\uffff\1\u00a6"+
            "\7\uffff\1\u00a5\1\uffff\2\u00a6\4\uffff\1\u00a3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA97_eot = DFA.unpackEncodedString(DFA97_eotS);
    static final short[] DFA97_eof = DFA.unpackEncodedString(DFA97_eofS);
    static final char[] DFA97_min = DFA.unpackEncodedStringToUnsignedChars(DFA97_minS);
    static final char[] DFA97_max = DFA.unpackEncodedStringToUnsignedChars(DFA97_maxS);
    static final short[] DFA97_accept = DFA.unpackEncodedString(DFA97_acceptS);
    static final short[] DFA97_special = DFA.unpackEncodedString(DFA97_specialS);
    static final short[][] DFA97_transition;

    static {
        int numStates = DFA97_transitionS.length;
        DFA97_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA97_transition[i] = DFA.unpackEncodedString(DFA97_transitionS[i]);
        }
    }

    class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = DFA97_eot;
            this.eof = DFA97_eof;
            this.min = DFA97_min;
            this.max = DFA97_max;
            this.accept = DFA97_accept;
            this.special = DFA97_special;
            this.transition = DFA97_transition;
        }
        public String getDescription() {
            return "711:14: ( type_convertion )?";
        }
    }
    static final String DFA107_eotS =
        "\u00a4\uffff";
    static final String DFA107_eofS =
        "\1\2\31\uffff\1\2\26\uffff\1\116\162\uffff";
    static final String DFA107_minS =
        "\2\6\30\uffff\1\6\24\uffff\3\6\162\uffff";
    static final String DFA107_maxS =
        "\2\u00c9\30\uffff\1\u00c9\24\uffff\3\u00c9\162\uffff";
    static final String DFA107_acceptS =
        "\2\uffff\1\2\113\uffff\1\1\1\uffff\1\1\24\uffff\1\1\30\uffff\3\1"+
        "\3\uffff\1\1\11\uffff\1\1\3\uffff\3\1\17\uffff";
    static final String DFA107_specialS =
        "\u00a4\uffff}>";
    static final String[] DFA107_transitionS = {
            "\1\2\11\uffff\2\2\44\uffff\1\2\11\uffff\3\2\1\uffff\4\2\2\uffff"+
            "\2\2\1\1\10\2\1\uffff\13\2\1\uffff\2\2\26\uffff\3\2\2\uffff"+
            "\1\2\36\uffff\1\2\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\2\57\uffff\1\32\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\57\11\uffff\1\2\1\60\5\uffff\1\2\36\uffff\1\2\11\uffff\10"+
            "\2\1\uffff\10\2\1\61\3\2\1\uffff\13\2\1\uffff\2\2\26\uffff\3"+
            "\2\2\uffff\1\2\36\uffff\1\2\4\uffff\1\2\22\uffff\1\2\2\uffff"+
            "\1\2\7\uffff\1\2\2\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\120\12\uffff\1\116\44\uffff\1\2\11\uffff\1\2\2\uffff\1\2"+
            "\5\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\116\3\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff"+
            "\3\2\31\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\20\uffff\1\2\36\uffff\1\145\11\uffff\1\2\2\uffff\1\2\4"+
            "\uffff\2\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\21\uffff\1\2\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1"+
            "\2",
            "\1\177\11\uffff\1\u008e\1\116\44\uffff\1\u008e\11\uffff\1\u0084"+
            "\2\116\1\2\1\u0093\3\116\1\uffff\1\2\4\116\1\u0080\1\116\1\176"+
            "\4\116\1\2\3\116\1\u0093\1\116\1\u0080\1\116\1\176\3\116\1\2"+
            "\2\116\14\uffff\1\2\11\uffff\1\116\2\u008e\2\uffff\1\116\3\uffff"+
            "\1\2\6\uffff\3\2\21\uffff\1\u0093\7\uffff\1\2\6\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\2\uffff\1\u0093\2\uffff\1\u0093\7\uffff"+
            "\1\u0092\1\uffff\1\2\1\u0093\4\uffff\1\u0094",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA107_eot = DFA.unpackEncodedString(DFA107_eotS);
    static final short[] DFA107_eof = DFA.unpackEncodedString(DFA107_eofS);
    static final char[] DFA107_min = DFA.unpackEncodedStringToUnsignedChars(DFA107_minS);
    static final char[] DFA107_max = DFA.unpackEncodedStringToUnsignedChars(DFA107_maxS);
    static final short[] DFA107_accept = DFA.unpackEncodedString(DFA107_acceptS);
    static final short[] DFA107_special = DFA.unpackEncodedString(DFA107_specialS);
    static final short[][] DFA107_transition;

    static {
        int numStates = DFA107_transitionS.length;
        DFA107_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA107_transition[i] = DFA.unpackEncodedString(DFA107_transitionS[i]);
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = DFA107_eot;
            this.eof = DFA107_eof;
            this.min = DFA107_min;
            this.max = DFA107_max;
            this.accept = DFA107_accept;
            this.special = DFA107_special;
            this.transition = DFA107_transition;
        }
        public String getDescription() {
            return "739:29: ( generic )?";
        }
    }
    static final String DFA155_eotS =
        "\110\uffff";
    static final String DFA155_eofS =
        "\110\uffff";
    static final String DFA155_minS =
        "\1\20\1\6\24\uffff\1\6\2\uffff\2\20\55\uffff";
    static final String DFA155_maxS =
        "\2\u00c9\24\uffff\1\u00c9\2\uffff\2\u00c9\55\uffff";
    static final String DFA155_acceptS =
        "\2\uffff\1\1\3\uffff\1\2\37\uffff\1\1\10\uffff\1\1\14\uffff\1\1"+
        "\13\uffff";
    static final String DFA155_specialS =
        "\110\uffff}>";
    static final String[] DFA155_transitionS = {
            "\1\2\1\6\10\uffff\1\6\33\uffff\1\1\14\uffff\1\2\4\uffff\1\6"+
            "\5\uffff\1\6\14\uffff\1\6\43\uffff\1\6\36\uffff\1\6\10\uffff"+
            "\1\6\4\uffff\1\6\11\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\6",
            "\1\6\11\uffff\2\2\10\uffff\1\2\33\uffff\1\26\14\uffff\1\2\4"+
            "\uffff\1\2\1\6\2\uffff\1\6\1\uffff\1\2\14\uffff\1\2\43\uffff"+
            "\1\2\36\uffff\1\2\10\uffff\1\2\4\uffff\1\2\11\uffff\1\32\2\uffff"+
            "\1\32\7\uffff\1\31\2\uffff\1\32\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\11\uffff\2\2\10\uffff\1\46\33\uffff\1\2\14\uffff\1\46"+
            "\4\uffff\1\46\1\2\2\uffff\1\2\1\uffff\1\46\14\uffff\1\46\43"+
            "\uffff\1\46\36\uffff\1\46\10\uffff\1\46\4\uffff\1\46\11\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff\1\2\4\uffff\1\46",
            "",
            "",
            "\1\57\1\46\10\uffff\1\57\33\uffff\1\57\14\uffff\1\57\4\uffff"+
            "\1\57\5\uffff\1\57\14\uffff\1\57\43\uffff\1\57\36\uffff\1\57"+
            "\10\uffff\1\57\4\uffff\1\57\11\uffff\1\57\2\uffff\1\57\7\uffff"+
            "\1\57\2\uffff\1\57\4\uffff\1\57",
            "\1\74\1\57\10\uffff\1\74\33\uffff\1\74\14\uffff\1\74\4\uffff"+
            "\1\74\5\uffff\1\74\14\uffff\1\74\43\uffff\1\74\36\uffff\1\74"+
            "\10\uffff\1\74\4\uffff\1\74\11\uffff\1\74\2\uffff\1\74\7\uffff"+
            "\1\74\2\uffff\1\74\4\uffff\1\74",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "955:49: ( method_params )?";
        }
    }
    static final String DFA182_eotS =
        "\110\uffff";
    static final String DFA182_eofS =
        "\110\uffff";
    static final String DFA182_minS =
        "\1\20\7\uffff\1\6\11\uffff\1\6\2\20\63\uffff";
    static final String DFA182_maxS =
        "\1\u00c9\7\uffff\1\u00c9\11\uffff\3\u00c9\63\uffff";
    static final String DFA182_acceptS =
        "\1\uffff\1\2\10\uffff\1\1\24\uffff\1\1\16\uffff\1\1\14\uffff\1\1"+
        "\14\uffff";
    static final String DFA182_specialS =
        "\110\uffff}>";
    static final String[] DFA182_transitionS = {
            "\1\12\1\1\10\uffff\1\1\33\uffff\1\10\14\uffff\1\12\4\uffff\1"+
            "\1\5\uffff\1\1\14\uffff\1\1\43\uffff\1\1\36\uffff\1\1\10\uffff"+
            "\1\1\4\uffff\1\1\11\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff"+
            "\1\12\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\11\uffff\2\12\10\uffff\1\12\33\uffff\1\22\14\uffff\1\12"+
            "\4\uffff\1\12\1\1\2\uffff\1\1\1\uffff\1\12\14\uffff\1\12\43"+
            "\uffff\1\12\36\uffff\1\12\10\uffff\1\12\4\uffff\1\12\11\uffff"+
            "\1\24\2\uffff\1\24\7\uffff\1\23\2\uffff\1\24\4\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\37\11\uffff\1\12\1\37\10\uffff\1\37\33\uffff\1\37\14\uffff"+
            "\1\37\4\uffff\2\37\2\uffff\1\37\1\uffff\1\37\14\uffff\1\37\43"+
            "\uffff\1\37\36\uffff\1\37\10\uffff\1\37\4\uffff\1\37\11\uffff"+
            "\1\37\2\uffff\1\37\7\uffff\1\37\2\uffff\1\37\4\uffff\1\37",
            "\2\56\10\uffff\1\56\33\uffff\1\56\14\uffff\1\56\4\uffff\1\56"+
            "\5\uffff\1\56\14\uffff\1\56\43\uffff\1\56\36\uffff\1\56\10\uffff"+
            "\1\56\4\uffff\1\56\11\uffff\1\56\2\uffff\1\56\7\uffff\1\56\2"+
            "\uffff\1\56\4\uffff\1\56",
            "\2\73\10\uffff\1\73\33\uffff\1\73\14\uffff\1\73\4\uffff\1\73"+
            "\5\uffff\1\73\14\uffff\1\73\43\uffff\1\73\36\uffff\1\73\10\uffff"+
            "\1\73\4\uffff\1\73\11\uffff\1\73\2\uffff\1\73\7\uffff\1\73\2"+
            "\uffff\1\73\4\uffff\1\73",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA182_eot = DFA.unpackEncodedString(DFA182_eotS);
    static final short[] DFA182_eof = DFA.unpackEncodedString(DFA182_eofS);
    static final char[] DFA182_min = DFA.unpackEncodedStringToUnsignedChars(DFA182_minS);
    static final char[] DFA182_max = DFA.unpackEncodedStringToUnsignedChars(DFA182_maxS);
    static final short[] DFA182_accept = DFA.unpackEncodedString(DFA182_acceptS);
    static final short[] DFA182_special = DFA.unpackEncodedString(DFA182_specialS);
    static final short[][] DFA182_transition;

    static {
        int numStates = DFA182_transitionS.length;
        DFA182_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA182_transition[i] = DFA.unpackEncodedString(DFA182_transitionS[i]);
        }
    }

    class DFA182 extends DFA {

        public DFA182(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 182;
            this.eot = DFA182_eot;
            this.eof = DFA182_eof;
            this.min = DFA182_min;
            this.max = DFA182_max;
            this.accept = DFA182_accept;
            this.special = DFA182_special;
            this.transition = DFA182_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1007:4: ( method_param )+";
        }
    }
    static final String DFA204_eotS =
        "\u00ba\uffff";
    static final String DFA204_eofS =
        "\u00ba\uffff";
    static final String DFA204_minS =
        "\1\66\3\uffff\1\6\1\uffff\3\6\1\uffff\1\6\22\uffff\1\6\23\uffff"+
        "\1\6\16\uffff\1\6\16\uffff\1\6\152\uffff";
    static final String DFA204_maxS =
        "\1\u00c3\3\uffff\1\u00c9\1\uffff\1\u00a3\2\173\1\uffff\1\173\22"+
        "\uffff\1\u00c9\23\uffff\1\u00c9\16\uffff\1\u00c9\16\uffff\1\u00c9"+
        "\152\uffff";
    static final String DFA204_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\uffff\1\5\3\uffff\1\4\1\uffff\1\6\22\uffff"+
        "\1\4\23\uffff\1\4\16\uffff\1\4\16\uffff\1\4\15\uffff\3\4\1\uffff"+
        "\1\4\22\uffff\3\4\1\uffff\1\4\22\uffff\3\4\1\uffff\1\4\22\uffff"+
        "\3\4\1\uffff\1\4\22\uffff";
    static final String DFA204_specialS =
        "\u00ba\uffff}>";
    static final String[] DFA204_transitionS = {
            "\1\1\21\uffff\1\4\47\uffff\1\5\31\uffff\1\2\50\uffff\1\3\17"+
            "\uffff\1\3",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\36\uffff\1\6\11\uffff\1\13\2\uffff\1\13"+
            "\4\uffff\1\11\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\12\22\uffff"+
            "\1\13\6\uffff\1\7\2\13\31\uffff\1\13\6\uffff\1\13\1\uffff\1"+
            "\13\3\uffff\1\10\2\uffff\1\13\2\uffff\1\13\7\uffff\1\13\1\uffff"+
            "\1\10\1\13\4\uffff\1\13",
            "",
            "\1\13\12\uffff\1\35\5\uffff\1\13\50\uffff\10\13\1\uffff\14"+
            "\13\1\uffff\13\13\1\uffff\2\13\27\uffff\1\36\47\uffff\1\13",
            "\1\13\12\uffff\1\61\56\uffff\3\13\1\uffff\4\13\2\uffff\13\13"+
            "\1\uffff\13\13\1\uffff\2\13\27\uffff\1\62",
            "\1\13\12\uffff\1\100\56\uffff\3\13\1\uffff\4\13\2\uffff\13"+
            "\13\1\uffff\13\13\1\uffff\2\13\27\uffff\1\101",
            "",
            "\1\13\12\uffff\1\117\56\uffff\3\13\1\uffff\4\13\2\uffff\13"+
            "\13\1\uffff\13\13\1\uffff\2\13\27\uffff\1\120",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\36\uffff\1\136\11\uffff\1\13\2\uffff\1"+
            "\13\4\uffff\1\120\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13"+
            "\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\142\22\uffff"+
            "\1\13\6\uffff\1\137\2\13\31\uffff\1\13\6\uffff\1\13\1\uffff"+
            "\1\13\3\uffff\1\140\2\uffff\1\13\2\uffff\1\13\7\uffff\1\13\1"+
            "\uffff\1\140\1\13\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\36\uffff\1\165\11\uffff\1\13\2\uffff\1"+
            "\13\4\uffff\1\120\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13"+
            "\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\171\22\uffff"+
            "\1\13\6\uffff\1\166\2\13\31\uffff\1\13\6\uffff\1\13\1\uffff"+
            "\1\13\3\uffff\1\167\2\uffff\1\13\2\uffff\1\13\7\uffff\1\13\1"+
            "\uffff\1\167\1\13\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\36\uffff\1\u008c\11\uffff\1\13\2\uffff"+
            "\1\13\4\uffff\1\120\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1"+
            "\13\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\u0090"+
            "\22\uffff\1\13\6\uffff\1\u008d\2\13\31\uffff\1\13\6\uffff\1"+
            "\13\1\uffff\1\13\3\uffff\1\u008e\2\uffff\1\13\2\uffff\1\13\7"+
            "\uffff\1\13\1\uffff\1\u008e\1\13\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\36\uffff\1\u00a3\11\uffff\1\13\2\uffff"+
            "\1\13\4\uffff\1\120\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1"+
            "\13\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\u00a7"+
            "\22\uffff\1\13\6\uffff\1\u00a4\2\13\31\uffff\1\13\6\uffff\1"+
            "\13\1\uffff\1\13\3\uffff\1\u00a5\2\uffff\1\13\2\uffff\1\13\7"+
            "\uffff\1\13\1\uffff\1\u00a5\1\13\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA204_eot = DFA.unpackEncodedString(DFA204_eotS);
    static final short[] DFA204_eof = DFA.unpackEncodedString(DFA204_eofS);
    static final char[] DFA204_min = DFA.unpackEncodedStringToUnsignedChars(DFA204_minS);
    static final char[] DFA204_max = DFA.unpackEncodedStringToUnsignedChars(DFA204_maxS);
    static final short[] DFA204_accept = DFA.unpackEncodedString(DFA204_acceptS);
    static final short[] DFA204_special = DFA.unpackEncodedString(DFA204_specialS);
    static final short[][] DFA204_transition;

    static {
        int numStates = DFA204_transitionS.length;
        DFA204_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA204_transition[i] = DFA.unpackEncodedString(DFA204_transitionS[i]);
        }
    }

    class DFA204 extends DFA {

        public DFA204(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 204;
            this.eot = DFA204_eot;
            this.eof = DFA204_eof;
            this.min = DFA204_min;
            this.max = DFA204_max;
            this.accept = DFA204_accept;
            this.special = DFA204_special;
            this.transition = DFA204_transition;
        }
        public String getDescription() {
            return "1130:1: value : ( ID | string_value | null_stmt | array | NUMBER | struct_init2 );";
        }
    }
 

    public static final BitSet FOLLOW_code_internal_in_code435 = new BitSet(new long[]{0x0040000004080002L,0x0000000000000000L,0x2000060040004040L,0x0000000000000284L});
    public static final BitSet FOLLOW_operator_wrapper_in_code_internal449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_in_operator_wrapper466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_wrapper_in_operator484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_operator490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_wrapper_in_operator495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_operator502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_operator508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_operator514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_in_operator519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_extern556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_extern559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_extern562 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xF7FFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_set_in_extern564 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_extern569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_implementation600 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_implementation603 = new BitSet(new long[]{0x0040000000010000L,0x0000000008004008L,0x2001008040004040L,0x0000000000000284L});
    public static final BitSet FOLLOW_category_in_implementation606 = new BitSet(new long[]{0x0040000000010000L,0x0000000008004000L,0x2001008040004040L,0x0000000000000284L});
    public static final BitSet FOLLOW_super_class_in_implementation609 = new BitSet(new long[]{0x0040000000000000L,0x0000000008004000L,0x2001008040004040L,0x0000000000000284L});
    public static final BitSet FOLLOW_implementation_body_in_implementation614 = new BitSet(new long[]{0x0040000000000000L,0x0000000008004000L,0x2001008040004040L,0x0000000000000284L});
    public static final BitSet FOLLOW_167_in_implementation619 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_category634 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_category637 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_category640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_in_implementation_body664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_implementation_body670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_wrapper_in_implementation_body682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_implementation_body688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_synthesize717 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize720 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000040L});
    public static final BitSet FOLLOW_L_EQ_in_synthesize723 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize725 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synthesize729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_typedef741 = new BitSet(new long[]{0x0040000004000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_typedef745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_typedef749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_rename_wrapper_in_typedef753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_rename_in_type_rename_wrapper767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_rename786 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_type_rename788 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_type_rename790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_in_static_section_wrapper802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_static_section822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_section825 = new BitSet(new long[]{0x0040000004080000L,0x8000000000000100L,0x0000000040004000L,0x0000000000000204L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_section827 = new BitSet(new long[]{0x0040000004000000L,0x8000000000000100L,0x0000000040004000L,0x0000000000000204L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_static_section830 = new BitSet(new long[]{0x0040000004000000L,0x8000000000000100L,0x0000000040000000L,0x0000000000000204L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_static_section833 = new BitSet(new long[]{0x0040000000000000L,0x8000000000000100L,0x0000000040000000L,0x0000000000000204L});
    public static final BitSet FOLLOW_static_section2_in_static_section836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_section_in_static_section2845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper2_in_static_section2852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section3_in_static_section2859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_inline_section871 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_field_type_in_inline_section874 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_inline_section876 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000108L});
    public static final BitSet FOLLOW_method_params2_in_inline_section879 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_inline_section883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_inline_section887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_static_section3898 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_static_section3900 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000248L});
    public static final BitSet FOLLOW_indexed_in_static_section3902 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000248L});
    public static final BitSet FOLLOW_static_end_in_static_section3906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper3_in_static_end918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_in_static_end924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_internal_in_field_end935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_end_internal953 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_end_internal956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method3_in_implementation_method_wrapper3968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body3_in_implementation_method3986 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000100L,0x0010000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method3989 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L,0x0010000000000000L});
    public static final BitSet FOLLOW_attribute_in_implementation_method3994 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method3999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_attribute1012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_attribute1015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_attribute1018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_attribute1021 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute1024 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute1027 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_attribute1030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method21042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method21047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_in_field_type_started_wrapper1059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_field_type_started1078 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_field_type_started1080 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000048L});
    public static final BitSet FOLLOW_classic_method_declaration_wrapper_in_field_type_started1083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_wrapper_in_field_type_started1087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_classic_method_declaration1136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_classic_method_declaration1141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_in_implementation_method_wrapper1154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method2_in_implementation_method_wrapper21171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_implementation_method1188 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method1190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method1195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_block_wrapper1208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block1230 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_block_internal_full_in_block1236 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_block_in_block1240 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_R_FBR_in_block1248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block_case1263 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFE6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_block_internal_full_in_block_case1269 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFE6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_block_in_block_case1273 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFE6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_default_stmt_in_block_case1282 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_block_case1287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_full1299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_in_block_internal1310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_wrapper_in_block_internal1320 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expression_in_block_internal1332 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_wrapper_in_block_internal1339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_wrapper_in_block_internal1344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_wrapper_in_block_internal1354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_operators_in_block_internal1374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_variable_in_block_internal1379 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_variable_in_block_internal1386 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_started_in_block_internal1393 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_type_started_in_block_internal1400 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_wrapper_in_block_internal1413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_block_internal1418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_operator_in_goto_wrapper1430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_goto_operator1447 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_goto_operator1449 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_goto_operator1451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_in_variable_init_wrapper1462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_variable_init1480 = new BitSet(new long[]{0x0040000000010000L,0x8000000000000000L,0x0240000040000000L,0x0000000000000212L});
    public static final BitSet FOLLOW_full_expr2_in_variable_init1484 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_variable_init1487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_variable_init1492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_types_in_known_type_started1504 = new BitSet(new long[]{0x0040000000000040L,0x0000000000000000L,0x0240000040000000L,0x0000000000000212L});
    public static final BitSet FOLLOW_ASTERISK_in_known_type_started1506 = new BitSet(new long[]{0x0040000000000040L,0x0000000000000000L,0x0240000040000000L,0x0000000000000212L});
    public static final BitSet FOLLOW_full_expr2_in_known_type_started1509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_in_typeof_started1521 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_full_expr_wrapper_in_typeof_started1523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_variable1536 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_full_expr_wrapper_in_struct_variable1538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_enum_variable1547 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_full_expr_wrapper_in_enum_variable1549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_const_expression1560 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_full_expr_wrapper_in_const_expression1562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper1571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_throw_stmt1588 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_throw_stmt1591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_try_stmt1602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_in_try_stmt1605 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000012000000000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt1608 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000012000000000L});
    public static final BitSet FOLLOW_168_in_try_stmt1612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_in_try_stmt1615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_catch_stmt1629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_catch_stmt1632 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1635 = new BitSet(new long[]{0x0040000000000040L});
    public static final BitSet FOLLOW_ASTERISK_in_catch_stmt1638 = new BitSet(new long[]{0x0040000000000040L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1641 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_catch_stmt1644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_in_catch_stmt1647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_switch_stmt_wrapper1660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_switch_stmt1677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_switch_stmt1680 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_switch_expr_in_switch_stmt1683 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_switch_stmt1685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_switch_body_wrapper_in_switch_stmt1691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_switch_body_wrapper1704 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214209L,0xFEEEA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_switch_body_in_switch_body_wrapper1706 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_switch_body_wrapper1708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_switch_body1727 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214209L,0xFEEEA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_switch_internal_in_switch_body1732 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0480000000000000L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_switch_expr1745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_wrapper_in_switch_internal1762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_wrapper_in_switch_internal1768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_case_stmt_wrapper1777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_case_stmt1794 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000000L,0x0008000000001C00L,0x0000000000000008L});
    public static final BitSet FOLLOW_case_expr_wrapper_in_case_stmt1797 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_case_stmt1800 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_case_body_wrapper_in_case_stmt1805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_body_in_case_body_wrapper1819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_case_body1838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_case_body1845 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214209L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_case_expr_in_case_expr_wrapper1861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_case_expr1883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_case_expr1890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_case_in_block_break1901 = new BitSet(new long[]{0x0000000000000202L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_single_operators_in_block_break1903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_default_stmt_wrapper1915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_default_stmt1932 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_default_stmt1935 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_default_body_wrapper_in_default_stmt1940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_body_in_default_body_wrapper1953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_default_body1973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_default_body1979 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214209L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_SINGLE_OP_in_single_operators1994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_wrapper_in_single_operators2001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_break_wrapper2013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_WORD_in_break_stmt2031 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_break_stmt2034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_do_stmt2044 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_if_stmt_block_in_do_stmt2047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_do_stmt2050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_do_stmt2053 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expression_in_do_stmt2056 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_do_stmt2058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper2067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_while_stmt2086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_while_stmt2089 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_while_expr_in_while_stmt2092 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_while_stmt2094 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_while_stmt2097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_while_expr2110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper2129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_for_stmt2146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_for_stmt2149 = new BitSet(new long[]{0x0040000000000040L,0x8001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_for_stmt_expr_wrapper_in_for_stmt2152 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_for_stmt2154 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_if_stmt_block_in_for_stmt2157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_expr_in_for_stmt_expr_wrapper2169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_for_stmt_expr2188 = new BitSet(new long[]{0x0040000000000000L,0x8000000000000000L,0x0240000040000000L,0x0000000000000212L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr2_in_for_stmt_expr2196 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_for_stmt_int12230 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000208L,0x0248A04000001C00L,0x000000000000021AL});
    public static final BitSet FOLLOW_object_wrapped2_in_for_stmt_int12232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22252 = new BitSet(new long[]{0x0040000000000040L,0x8001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22254 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22257 = new BitSet(new long[]{0x0040000000000042L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_return_stmt2276 = new BitSet(new long[]{0x0040000000000040L,0x8001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_return_stmt2278 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_return_stmt2281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_if_stmt_wrapper2302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_if_stmt2318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_if_stmt2321 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_if_expr_in_if_stmt2324 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_if_stmt2326 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_if_stmt2329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_if_expr2342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_else_stmt2361 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_if_stmt_block_in_else_stmt2364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_if_stmt_block2390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_if_stmt_block2396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_in_static_start_wrapper2408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_start2426 = new BitSet(new long[]{0x0040000000080000L,0x0000000000000000L,0x0240000040000000L,0x0000000000000212L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_start2428 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000040000000L,0x0000000000000212L});
    public static final BitSet FOLLOW_static_type_wrapper_in_static_start2431 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000040000000L,0x0000000000000212L});
    public static final BitSet FOLLOW_full_expr2_in_static_start2434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_type_in_static_type_wrapper2446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_static_type2465 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASTERISK_in_static_type2467 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_id_part_end_internal_in_id_part_end2479 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_DOT_in_id_part_end_internal2494 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_163_in_id_part_end_internal2498 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_id_part_in_id_part_end_internal2501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_internal_in_id_part2539 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000208L});
    public static final BitSet FOLLOW_function_brackets_wrapper_in_id_part2541 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_index_wrapper_in_id_part2544 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_id_part_in_object_name2557 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_name2559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_method_call_wrapper2573 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000208L,0x0240000000000400L,0x0000000000000012L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper2575 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_method_call_wrapper2577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper22600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_in_method_call22619 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_method_name_in_method_call22621 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_method_call_message_list_wrapper_in_method_call22625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_internal_in_object_wrapper2636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_in_object_wrapper_internal2655 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000200L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_object_wrapper_internal2678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_message32690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_internal_in_type_convertion2709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_type_convertion_internal2728 = new BitSet(new long[]{0x0040000000080000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_convertion_internal2730 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_type_convertion_internal2733 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_internal_in_type_convertion_internal2736 = new BitSet(new long[]{0x0000000000000040L,0x0400000000001000L});
    public static final BitSet FOLLOW_generic_in_type_convertion_internal2738 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_type_convertion_internal2741 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_type_convertion_internal2744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name2762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_method_name2775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2809 = new BitSet(new long[]{0x0040000000010002L});
    public static final BitSet FOLLOW_method_call_message_wrapper_in_method_call_message_list2811 = new BitSet(new long[]{0x0040000000010002L});
    public static final BitSet FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_method_call_message_first2839 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_message_in_method_call_message_first2842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_in_method_call_message_wrapper2852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_in_method_call_message2871 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_incomplete_prefix_in_method_call_message2875 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_message_in_method_call_message2879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_msg_expr_in_message2888 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_message2891 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_msg_expr_in_message2893 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_msg_expr2927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expression2943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_in_expression2948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_in_full_expr_wrapper2959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr2976 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr2979 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr2981 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr22992 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr22995 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000040000000L,0x0000000000000212L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr22997 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_expr_assign_in_expr_assign_wrapper3008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_wrapper_in_expr_assign3027 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214309L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_assign3030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_wrapper_in_expr_assign3034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer2_in_expr_assign3039 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_method_call_wrapper_in_expr_assign3041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_in_array_init_wrapper3053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array_init3072 = new BitSet(new long[]{0x0040000000000040L,0x0801000228214309L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init3075 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array_init3078 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214309L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init3080 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array_init3086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_wrapper_in_classical_expr_wrp33098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_classical_expr_wrp33104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_in_classical_expr_wrp3117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_classical_expr3134 = new BitSet(new long[]{0x0000000000000002L,0x0000000954888864L});
    public static final BitSet FOLLOW_expr_question_wrapper_in_classical_expr3137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr3141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr2_in_classical_expr_wrp23153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_classical_expr23171 = new BitSet(new long[]{0x0000000000000002L,0x0000000914888864L});
    public static final BitSet FOLLOW_func_pointer1_in_classical_expr23175 = new BitSet(new long[]{0x0000000000000002L,0x0000000914888864L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr23178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_question_in_expr_question_wrapper3188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_QUESTION_in_expr_question3205 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question3207 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_expr_question3209 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question3211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_in_assign_wrapper3220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_in_simple_expr_wrapper3293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_or_in_simple_expr3311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_and_wrapper_in_expr_or_or3328 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_L_OR_OR_in_expr_or_or3331 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_or_or3333 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_expr_and_and_in_expr_and_and_wrapper3344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_wrapper_in_expr_and_and3361 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_L_AND_AND_in_expr_and_and3364 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_and_and3366 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_in_expr_or_wrapper3377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_xor_wrapper_in_expr_or3395 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_L_OR_in_expr_or3398 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_or3400 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_expr_xor_in_expr_xor_wrapper3411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_wrapper_in_expr_xor3428 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_L_XOR_in_expr_xor3431 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_xor3433 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_expr_and_in_expr_and_wrapper3445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eq_wrapper_in_expr_and3463 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_AND_in_expr_and3466 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_and3468 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_eq_in_expr_eq_wrapper3480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_cond_wrapper_in_expr_eq3498 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100080L});
    public static final BitSet FOLLOW_set_in_expr_eq3501 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_eq3509 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100080L});
    public static final BitSet FOLLOW_expr_cond_in_expr_cond_wrapper3520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mov_wrapper_in_expr_cond3537 = new BitSet(new long[]{0x0000000000000002L,0x0000000000063000L});
    public static final BitSet FOLLOW_set_in_expr_cond3540 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_cond3556 = new BitSet(new long[]{0x0000000000000002L,0x0000000000063000L});
    public static final BitSet FOLLOW_expr_mov_in_expr_mov_wrapper3567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_add_wrapper_in_expr_mov3585 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000400L});
    public static final BitSet FOLLOW_set_in_expr_mov3588 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_mov3596 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000400L});
    public static final BitSet FOLLOW_expr_add_in_expr_add_wrapper3608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mult_wrapper_in_expr_add3625 = new BitSet(new long[]{0x0000000000000002L,0x0000000008004000L});
    public static final BitSet FOLLOW_set_in_expr_add3628 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_add3636 = new BitSet(new long[]{0x0000000000000002L,0x0000000008004000L});
    public static final BitSet FOLLOW_expr_mult_in_expr_mult_wrapper3647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_type_wrapper_in_expr_mult3664 = new BitSet(new long[]{0x0000000000000042L,0x0000000002000010L});
    public static final BitSet FOLLOW_set_in_expr_mult3667 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_mult3679 = new BitSet(new long[]{0x0000000000000042L,0x0000000002000010L});
    public static final BitSet FOLLOW_expr_type_in_expr_type_wrapper3691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_in_expr_type3708 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_unname_in_expr_type3711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_expr_unname3722 = new BitSet(new long[]{0x0040000000000000L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_type_convertion_in_expr_unname3724 = new BitSet(new long[]{0x0040000000000000L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_addr_in_expr_unname3729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_AND_in_expr_addr3739 = new BitSet(new long[]{0x0040000000000000L,0x0001000228214208L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_sign_in_expr_addr3742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_wrapper_in_expr_sign3761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_in_expr_not_wrapper3771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_NOT_in_expr_not3790 = new BitSet(new long[]{0x0040000000000000L,0x0001000220010208L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_not2_in_expr_not3793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_TILDA_in_expr_not23803 = new BitSet(new long[]{0x0040000000000000L,0x0001000020010208L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_size_of_in_expr_not23806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_expr_size_of3816 = new BitSet(new long[]{0x0040000000000000L,0x0001000020010208L,0x0248A04000001C00L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_xcrement_in_expr_size_of3819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped1_in_expr_xcrement3838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped2_in_object_wrapped13848 = new BitSet(new long[]{0x0000000000000002L,0x0000000020010000L});
    public static final BitSet FOLLOW_201_in_object_wrapped23869 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_object_name_in_object_wrapped23872 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_generic_in_object_wrapped23874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapped23880 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_object_wrapped23888 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_object_wrapped23890 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_object_wrapped23892 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_wrapper_in_object_wrapped23900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_started_in_object_wrapped23905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_brackets_in_function_brackets_wrapper3917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_function_brackets3936 = new BitSet(new long[]{0x0040000000000040L,0x0401000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets3939 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_function_brackets3942 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets3944 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_function_brackets3950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_in_index_wrapper3960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index3977 = new BitSet(new long[]{0x0040000000000040L,0x1001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_index_number_wrapper_in_index3979 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index3982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_number_wrapper3991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_struct_init4008 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_init4011 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_struct_init4014 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_struct_init4017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init4020 = new BitSet(new long[]{0x0040000000800040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init4026 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init4029 = new BitSet(new long[]{0x0040000000800040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init4032 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init4038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init24052 = new BitSet(new long[]{0x0040000000800040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init24058 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init24061 = new BitSet(new long[]{0x0040000000800040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init24064 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init24070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_var_in_struct_init_line4083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_expression_in_struct_init_line4088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_expression4101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_method4112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_struct_init_var4124 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_id_part_in_struct_init_var4126 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000040L});
    public static final BitSet FOLLOW_L_EQ_in_struct_init_var4131 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214309L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_in_q_brackets_in_struct_init_var4135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_struct_init_var4139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_wrapper_in_a_started4151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_wrapper_in_a_started4156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_wrapper_in_a_started4161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_typeof4171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_typeof4174 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_typeof4177 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_typeof4180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_in_a_selector_wrapper4191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_a_selector4208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_a_selector4210 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_selector4212 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_selector4214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_in_a_protocol_wrapper4224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_a_protocol4242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_a_protocol4244 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_protocol4246 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_protocol4248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_in_a_encode_wrapper4258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_value_in_a_selector_value_wrapper4275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sel_id_in_a_selector_value4294 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4298 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_sel_id_in_a_selector_value4302 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4305 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_ID_in_sel_id4318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_sel_id4323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_a_encode4333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_a_encode4335 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFBFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_R_BR_in_a_encode4343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_const_expr_wrapper4352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_const_expr4371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_const_expr4375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL2_in_const_expr4379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_const_expr4383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_const_expr4387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_string_literal34405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_brackets4415 = new BitSet(new long[]{0x0040000000000040L,0x0401000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expression_in_method_brackets4419 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_brackets4423 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_brackets4426 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_brackets4432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14442 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000008L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer14448 = new BitSet(new long[]{0x0040000000000040L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14450 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14453 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer14456 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer14459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24472 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer24475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24477 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer24480 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer24486 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer_params4502 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4505 = new BitSet(new long[]{0x0000000000020040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4508 = new BitSet(new long[]{0x0000000000020040L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_func_pointer_params4512 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4515 = new BitSet(new long[]{0x0000000000020040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4518 = new BitSet(new long[]{0x0000000000020040L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer_params4523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_start4534 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_brackets_in_method_start4536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_in_q_brackets4547 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214309L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_q_brackets_source_in_in_q_brackets4550 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_in_q_brackets4552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_source_in_q_brackets_source4564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_br_source_in_q_brackets_source4569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4582 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4589 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_q_source4605 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_source4609 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expression_in_q_source4612 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_ID_in_simple_method_call4629 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_brackets_in_simple_method_call4631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index_brackets4647 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_brackets4650 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index_brackets4652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper4666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_interface_declaration4684 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_interface_declaration4687 = new BitSet(new long[]{0x0040000004010000L,0x0000000008004108L,0x0000108040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_interface_category_in_interface_declaration4690 = new BitSet(new long[]{0x0040000004010000L,0x0000000008004100L,0x0000108040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_super_class_in_interface_declaration4694 = new BitSet(new long[]{0x0040000004000000L,0x0000000008004100L,0x0000108040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_annotated_block_in_interface_declaration4701 = new BitSet(new long[]{0x0040000004000000L,0x0000000008004100L,0x0000108040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_interface_methods_in_interface_declaration4705 = new BitSet(new long[]{0x0040000004000000L,0x0000000008004100L,0x0000108040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_interface_fields_in_interface_declaration4709 = new BitSet(new long[]{0x0040000004000000L,0x0000000008004100L,0x0000108040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_167_in_interface_declaration4718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_annotated_block4729 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L,0x0000480040000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_annotated_block_internal_in_annotated_block4734 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L,0x0000480040000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_R_FBR_in_annotated_block4739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_annotation_in_annotated_block_internal4752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_public_block_internal_in_annotated_block_internal4759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_field_declaration_in_public_block_internal4794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_declaration_in_public_block_internal4799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_simple_field_declaration4811 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_simple_field_declaration4813 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_field_declaration4816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_union_declaration4829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_union_declaration4832 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_simple_field_declaration_in_union_declaration4838 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_R_FBR_in_union_declaration4843 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_union_declaration4846 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_union_declaration4849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_super_class4863 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_super_class4866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_interface_category4886 = new BitSet(new long[]{0x0040000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_ID_in_interface_category4889 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_interface_category4893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_field_wrapper_in_interface_fields4922 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000000L,0x0000100040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_interface_field_in_interface_field_wrapper4933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_prefix_in_interface_field4952 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_interface_field_declaration_in_interface_field4955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_interface_field_declaration4966 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_interface_field_declaration4968 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_field_declaration4970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_property_prefix4981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_property_prefix4983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_property_in_property_prefix4985 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_property_prefix4988 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_property_in_property_prefix4990 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_property_prefix4994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_declaration_in_interface_methods5027 = new BitSet(new long[]{0x0000000004000002L,0x0000000008004000L});
    public static final BitSet FOLLOW_interface_method_in_interface_methods5031 = new BitSet(new long[]{0x0000000004000002L,0x0000000008004000L});
    public static final BitSet FOLLOW_method_header_in_interface_method5045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_method_header5064 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_method_header5066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_header_body5076 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000008L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_method_type_in_method_header_body5079 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_method_header_body5083 = new BitSet(new long[]{0x0040000000030002L,0x0000000000000008L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_method_params_in_method_header_body5086 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_va_args_wrapper_in_method_header_body5089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_va_args_in_va_args_wrapper5099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_va_args5116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_va_args5119 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_va_args5122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_type_in_method_header_body25133 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_method_header_body25135 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body25138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body35148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper5157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type5189 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040004000L,0x0000000000000200L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_type5192 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_internal_in_method_type5195 = new BitSet(new long[]{0x0000000000000040L,0x0400000000001000L});
    public static final BitSet FOLLOW_generic_in_method_type5198 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type5201 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type5204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type5218 = new BitSet(new long[]{0x0040000000080040L,0x0400000000001200L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_type5221 = new BitSet(new long[]{0x0040000000000040L,0x0400000000001200L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_known_types_in_method_type5224 = new BitSet(new long[]{0x0040000000000040L,0x0400000000001200L});
    public static final BitSet FOLLOW_ID_in_method_type5227 = new BitSet(new long[]{0x0040000000000040L,0x0400000000001200L});
    public static final BitSet FOLLOW_L_KBR_in_method_type5231 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_method_type5233 = new BitSet(new long[]{0x0000000000000040L,0x0400000000001200L});
    public static final BitSet FOLLOW_generic_in_method_type5237 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type5240 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type5243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal1_in_type_internal5268 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_L_KBR_in_type_internal5271 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_type_internal5274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_LESS_in_generic5313 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_generic_internal_in_generic5315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_MORE_in_generic5317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_generic_internal5336 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal5338 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_COMMA_in_generic_internal5342 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_generic_internal5345 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal5348 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_L_BR_in_method_params25360 = new BitSet(new long[]{0x0040000004080000L,0x0400000000000000L,0x0000000040004000L,0x0000000000000200L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25364 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_params25367 = new BitSet(new long[]{0x0040000004080000L,0x0000000000000000L,0x0000000040004000L,0x0000000000000200L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25369 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_params25375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param2_in_method_param_wrapper25386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_param25404 = new BitSet(new long[]{0x0040000004000000L,0x0000000000000000L,0x0000000040004000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_method_param25407 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040004000L,0x0000000000000200L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_param25410 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_method_param25413 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_field_type_in_method_param25416 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000200L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_method_param25418 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_indexed_in_method_param25421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_indexed5431 = new BitSet(new long[]{0x0000000000000000L,0x1001000000000000L});
    public static final BitSet FOLLOW_NUMBER_in_indexed5433 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_indexed5436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params5446 = new BitSet(new long[]{0x0040000000010002L,0x0000000000000008L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_prefix_in_method_param5468 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000008L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_COLON_in_method_param5473 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000008L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_method_type_in_method_param5476 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_method_param5479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5491 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_prefix5493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_incomplete_prefix5512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5555 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000100L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_struct_declaration5561 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_typedef_struct_body_in_typedef_struct_declaration5566 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_struct_declaration5570 = new BitSet(new long[]{0x0040000000000002L,0x8000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5573 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_struct_declaration5576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_struct_field5619 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_struct_field5621 = new BitSet(new long[]{0x0000000000020000L,0x8000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_field5625 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_struct_field5628 = new BitSet(new long[]{0x0000000000020000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_field5632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_enum_declaration5668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_typedef_declaration5688 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000100L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_typedef_declaration5690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_declaration5693 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5696 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_typedef_declaration5700 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5703 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_declaration5707 = new BitSet(new long[]{0x0040000000000000L,0x8000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_typedef_declaration5710 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_declaration5713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_declaration_element5742 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_L_EQ_in_typedef_declaration_element5746 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_set_in_typedef_declaration_element5749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_typedef_declaration_element5761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_L_EQ_in_typedef_declaration_element5763 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_NUMBER_in_typedef_declaration_element5765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper5779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_wrapper_in_field_declaration5796 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_field_type_in_field_declaration5799 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_field_declaration5801 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000040L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration5803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_declaration_end5814 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration_end5817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_in_type_start_wrapper5827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_start5844 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_field_type_in_type_start5847 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_type_start5849 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000248L});
    public static final BitSet FOLLOW_L_KBR_in_type_start5852 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_type_start5854 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000048L});
    public static final BitSet FOLLOW_type_end_in_type_start5858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration4_in_type_end5866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration4_in_type_end5879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_declaration45901 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration45904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_declaration45917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_method_declaration45922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_in_field_modifier_wrapper5934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_field_modifier5952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_internal_in_field_type5964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_field_type_internal5983 = new BitSet(new long[]{0x0000000000000042L,0x0000000000001000L});
    public static final BitSet FOLLOW_generic_in_field_type_internal5985 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASTERISK_in_field_type_internal5988 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_name_internal_in_name6001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name_internal6022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_name_internal6029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_name_internal6036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_EQ_in_value_set6047 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000100L,0x0008000000000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_value_in_value_set6050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_value6066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_value_in_value6070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_value6074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_in_value6078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_value6082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init2_in_value6086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string_value6096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array6117 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000100L,0x0008000000000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_value_in_array6120 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array6124 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000100L,0x0008000000000400L,0x0000000000000008L});
    public static final BitSet FOLLOW_value_in_array6127 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array6131 = new BitSet(new long[]{0x0000000000000002L});

}