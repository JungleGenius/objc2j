// $ANTLR 3.4 Objcm.g 2012-11-27 09:39:00

package ru.andremoniy.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcmParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARRAY_INIT", "ASSIGN", "ASTERISK", "BLOCK", "BREAK", "BREAK_WORD", "CASE_BODY", "CASE_EXPR", "CASE_STMT", "CATEGORY", "CLASSICAL_EXPR", "CLASSICAL_EXPR_2", "COLON", "COMMA", "CONST_EXPR", "CONST_PREFIX", "DEFAULT_BODY", "DEFAULT_STMT", "DIGIT", "DOT", "ENCODE", "ENUM", "ENUM_PREFIX", "ESC", "EXPR", "EXPR_ADD", "EXPR_AND", "EXPR_AND_AND", "EXPR_ASSIGN", "EXPR_COND", "EXPR_EQ", "EXPR_FULL", "EXPR_MOV", "EXPR_MULT", "EXPR_NOT", "EXPR_OR", "EXPR_OR_OR", "EXPR_QUESTION", "EXPR_UNNAME", "EXPR_XOR", "EXTERN", "FIELD", "FIELD_ACCESS", "FIELD_TYPE_STARTED", "FOR_IN_STMT", "FOR_STMT", "FOR_STMT_EXPR", "FUNCTION", "GENERIC", "GOTO", "ID", "IF_BLOCK", "IF_EXPR", "IF_STMT", "IMPLEMENTATION", "INCOMPLETE_PREFIX", "INDEX", "INDEX_NUMBER", "INTERFACE", "LETTER", "L_AND", "L_AND_AND", "L_AND_EQ", "L_BR", "L_DIV", "L_DIV_EQ", "L_EQ", "L_EQ_EQ", "L_FBR", "L_KBR", "L_LEFT", "L_LEFT_EQ", "L_LESS", "L_LESS_EQ", "L_MINUS", "L_MINUS_EQ", "L_MINUS_MINUS", "L_MORE", "L_MORE_EQ", "L_MULT_EQ", "L_NEQ", "L_NOT", "L_OR", "L_OR_EQ", "L_OR_OR", "L_PERC", "L_PERC_EQ", "L_PLUS", "L_PLUS_EQ", "L_PLUS_PLUS", "L_QUESTION", "L_RIGHT", "L_RIGHT_EQ", "L_TILDA", "L_XOR", "L_XOR_EQ", "MESSAGE", "METHOD", "METHOD_CALL", "METHOD_MSG", "METHOD_NAME", "MODIFIER", "MSG_LIST", "MULTI_COMMENT", "M_IMPORT", "M_TYPE_START", "NAME", "NOT", "NUMBER", "OBJECT", "OP", "OPER", "OPERATOR", "PARAM", "PREFIX", "PREPROCESSOR_DECLARATION", "PROTOCOL", "RETURN_STMT", "R_BR", "R_FBR", "R_KBR", "SELECTOR", "SELECTOR_VALUE", "SEMICOLON", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_OP", "SIZEOF", "STATIC", "STATIC_METHOD", "STATIC_PREFIX", "STATIC_START", "STATIC_TYPE", "STRING", "STRING_LITERAL", "STRING_LITERAL2", "STRING_LITERAL3", "STRUCT_FIELD", "STRUCT_PREFIX", "SUPER_CLASS", "SWITCH", "SWITCH_BODY", "SWITCH_EXPRESSION", "THROW_EXCEPTION", "THROW_STMT", "TYPE", "TYPEDEF", "TYPEDEF_ELEMENT", "TYPEDEF_STRUCT", "TYPE_CONVERTION", "TYPE_RENAME", "VALUE", "VARIABLE_INIT", "VA_ARGS", "VOID", "WHILE_EXPR", "WHILE_STMT", "WS", "'\"C\"'", "'->'", "'...'", "'@catch'", "'@encode'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@private'", "'@property'", "'@protocol'", "'@public'", "'@selector'", "'@synthesize'", "'@throw'", "'@try'", "'Nil'", "'__attribute__'", "'__typeof__'", "'assign'", "'case'", "'constructor'", "'copy'", "'default'", "'do'", "'else'", "'extern'", "'for'", "'goto'", "'if'", "'in'", "'inline'", "'nil'", "'readwrite'", "'return'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'while'"
    };

    public static final int EOF=-1;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int T__198=198;
    public static final int T__199=199;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int T__202=202;
    public static final int ARRAY_INIT=4;
    public static final int ASSIGN=5;
    public static final int ASTERISK=6;
    public static final int BLOCK=7;
    public static final int BREAK=8;
    public static final int BREAK_WORD=9;
    public static final int CASE_BODY=10;
    public static final int CASE_EXPR=11;
    public static final int CASE_STMT=12;
    public static final int CATEGORY=13;
    public static final int CLASSICAL_EXPR=14;
    public static final int CLASSICAL_EXPR_2=15;
    public static final int COLON=16;
    public static final int COMMA=17;
    public static final int CONST_EXPR=18;
    public static final int CONST_PREFIX=19;
    public static final int DEFAULT_BODY=20;
    public static final int DEFAULT_STMT=21;
    public static final int DIGIT=22;
    public static final int DOT=23;
    public static final int ENCODE=24;
    public static final int ENUM=25;
    public static final int ENUM_PREFIX=26;
    public static final int ESC=27;
    public static final int EXPR=28;
    public static final int EXPR_ADD=29;
    public static final int EXPR_AND=30;
    public static final int EXPR_AND_AND=31;
    public static final int EXPR_ASSIGN=32;
    public static final int EXPR_COND=33;
    public static final int EXPR_EQ=34;
    public static final int EXPR_FULL=35;
    public static final int EXPR_MOV=36;
    public static final int EXPR_MULT=37;
    public static final int EXPR_NOT=38;
    public static final int EXPR_OR=39;
    public static final int EXPR_OR_OR=40;
    public static final int EXPR_QUESTION=41;
    public static final int EXPR_UNNAME=42;
    public static final int EXPR_XOR=43;
    public static final int EXTERN=44;
    public static final int FIELD=45;
    public static final int FIELD_ACCESS=46;
    public static final int FIELD_TYPE_STARTED=47;
    public static final int FOR_IN_STMT=48;
    public static final int FOR_STMT=49;
    public static final int FOR_STMT_EXPR=50;
    public static final int FUNCTION=51;
    public static final int GENERIC=52;
    public static final int GOTO=53;
    public static final int ID=54;
    public static final int IF_BLOCK=55;
    public static final int IF_EXPR=56;
    public static final int IF_STMT=57;
    public static final int IMPLEMENTATION=58;
    public static final int INCOMPLETE_PREFIX=59;
    public static final int INDEX=60;
    public static final int INDEX_NUMBER=61;
    public static final int INTERFACE=62;
    public static final int LETTER=63;
    public static final int L_AND=64;
    public static final int L_AND_AND=65;
    public static final int L_AND_EQ=66;
    public static final int L_BR=67;
    public static final int L_DIV=68;
    public static final int L_DIV_EQ=69;
    public static final int L_EQ=70;
    public static final int L_EQ_EQ=71;
    public static final int L_FBR=72;
    public static final int L_KBR=73;
    public static final int L_LEFT=74;
    public static final int L_LEFT_EQ=75;
    public static final int L_LESS=76;
    public static final int L_LESS_EQ=77;
    public static final int L_MINUS=78;
    public static final int L_MINUS_EQ=79;
    public static final int L_MINUS_MINUS=80;
    public static final int L_MORE=81;
    public static final int L_MORE_EQ=82;
    public static final int L_MULT_EQ=83;
    public static final int L_NEQ=84;
    public static final int L_NOT=85;
    public static final int L_OR=86;
    public static final int L_OR_EQ=87;
    public static final int L_OR_OR=88;
    public static final int L_PERC=89;
    public static final int L_PERC_EQ=90;
    public static final int L_PLUS=91;
    public static final int L_PLUS_EQ=92;
    public static final int L_PLUS_PLUS=93;
    public static final int L_QUESTION=94;
    public static final int L_RIGHT=95;
    public static final int L_RIGHT_EQ=96;
    public static final int L_TILDA=97;
    public static final int L_XOR=98;
    public static final int L_XOR_EQ=99;
    public static final int MESSAGE=100;
    public static final int METHOD=101;
    public static final int METHOD_CALL=102;
    public static final int METHOD_MSG=103;
    public static final int METHOD_NAME=104;
    public static final int MODIFIER=105;
    public static final int MSG_LIST=106;
    public static final int MULTI_COMMENT=107;
    public static final int M_IMPORT=108;
    public static final int M_TYPE_START=109;
    public static final int NAME=110;
    public static final int NOT=111;
    public static final int NUMBER=112;
    public static final int OBJECT=113;
    public static final int OP=114;
    public static final int OPER=115;
    public static final int OPERATOR=116;
    public static final int PARAM=117;
    public static final int PREFIX=118;
    public static final int PREPROCESSOR_DECLARATION=119;
    public static final int PROTOCOL=120;
    public static final int RETURN_STMT=121;
    public static final int R_BR=122;
    public static final int R_FBR=123;
    public static final int R_KBR=124;
    public static final int SELECTOR=125;
    public static final int SELECTOR_VALUE=126;
    public static final int SEMICOLON=127;
    public static final int SIMPLE_EXPR=128;
    public static final int SINGLE_COMMENT=129;
    public static final int SINGLE_OP=130;
    public static final int SIZEOF=131;
    public static final int STATIC=132;
    public static final int STATIC_METHOD=133;
    public static final int STATIC_PREFIX=134;
    public static final int STATIC_START=135;
    public static final int STATIC_TYPE=136;
    public static final int STRING=137;
    public static final int STRING_LITERAL=138;
    public static final int STRING_LITERAL2=139;
    public static final int STRING_LITERAL3=140;
    public static final int STRUCT_FIELD=141;
    public static final int STRUCT_PREFIX=142;
    public static final int SUPER_CLASS=143;
    public static final int SWITCH=144;
    public static final int SWITCH_BODY=145;
    public static final int SWITCH_EXPRESSION=146;
    public static final int THROW_EXCEPTION=147;
    public static final int THROW_STMT=148;
    public static final int TYPE=149;
    public static final int TYPEDEF=150;
    public static final int TYPEDEF_ELEMENT=151;
    public static final int TYPEDEF_STRUCT=152;
    public static final int TYPE_CONVERTION=153;
    public static final int TYPE_RENAME=154;
    public static final int VALUE=155;
    public static final int VARIABLE_INIT=156;
    public static final int VA_ARGS=157;
    public static final int VOID=158;
    public static final int WHILE_EXPR=159;
    public static final int WHILE_STMT=160;
    public static final int WS=161;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcmParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcmParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcmParser.tokenNames; }
    public String getGrammarFileName() { return "Objcm.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // Objcm.g:116:1: code : ( code_internal )* ;
    public final ObjcmParser.code_return code() throws RecognitionException {
        ObjcmParser.code_return retval = new ObjcmParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.code_internal_return code_internal1 =null;



        try {
            // Objcm.g:116:6: ( ( code_internal )* )
            // Objcm.g:117:3: ( code_internal )*
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:117:3: ( code_internal )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CONST_PREFIX||LA1_0==ENUM_PREFIX||LA1_0==ID||LA1_0==STATIC_PREFIX||LA1_0==STRUCT_PREFIX||LA1_0==VOID||(LA1_0 >= 169 && LA1_0 <= 170)||LA1_0==189||LA1_0==199||LA1_0==201) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // Objcm.g:117:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code435);
            	    code_internal1=code_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // Objcm.g:121:1: code_internal : ( operator_wrapper | implementation_wrapper );
    public final ObjcmParser.code_internal_return code_internal() throws RecognitionException {
        ObjcmParser.code_internal_return retval = new ObjcmParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_wrapper_return operator_wrapper2 =null;

        ObjcmParser.implementation_wrapper_return implementation_wrapper3 =null;



        try {
            // Objcm.g:122:2: ( operator_wrapper | implementation_wrapper )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==CONST_PREFIX||LA2_0==ENUM_PREFIX||LA2_0==ID||LA2_0==STATIC_PREFIX||LA2_0==STRUCT_PREFIX||LA2_0==VOID||LA2_0==170||LA2_0==189||LA2_0==199||LA2_0==201) ) {
                alt2=1;
            }
            else if ( (LA2_0==169) ) {
                alt2=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }
            switch (alt2) {
                case 1 :
                    // Objcm.g:122:4: operator_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_operator_wrapper_in_code_internal449);
                    operator_wrapper2=operator_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, operator_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:123:5: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal455);
                    implementation_wrapper3=implementation_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_wrapper3.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class operator_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator_wrapper"
    // Objcm.g:126:1: operator_wrapper : operator -> ^( OPERATOR operator ) ;
    public final ObjcmParser.operator_wrapper_return operator_wrapper() throws RecognitionException {
        ObjcmParser.operator_wrapper_return retval = new ObjcmParser.operator_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_return operator4 =null;


        RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
        try {
            // Objcm.g:127:2: ( operator -> ^( OPERATOR operator ) )
            // Objcm.g:127:4: operator
            {
            pushFollow(FOLLOW_operator_in_operator_wrapper466);
            operator4=operator();

            state._fsp--;

            stream_operator.add(operator4.getTree());

            // AST REWRITE
            // elements: operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 127:13: -> ^( OPERATOR operator )
            {
                // Objcm.g:127:16: ^( OPERATOR operator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OPERATOR, "OPERATOR")
                , root_1);

                adaptor.addChild(root_1, stream_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_wrapper"


    public static class operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator"
    // Objcm.g:129:1: operator : ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration_wrapper | typedef_declaration_wrapper | typedef );
    public final ObjcmParser.operator_return operator() throws RecognitionException {
        ObjcmParser.operator_return retval = new ObjcmParser.operator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_wrapper_return extern_wrapper5 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper6 =null;

        ObjcmParser.type_start_wrapper_return type_start_wrapper7 =null;

        ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper8 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper9 =null;

        ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper10 =null;

        ObjcmParser.typedef_return typedef11 =null;



        try {
            // Objcm.g:130:2: ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration_wrapper | typedef_declaration_wrapper | typedef )
            int alt3=7;
            switch ( input.LA(1) ) {
            case 189:
                {
                alt3=1;
                }
                break;
            case STATIC_PREFIX:
                {
                alt3=2;
                }
                break;
            case CONST_PREFIX:
            case ID:
            case VOID:
            case 201:
                {
                alt3=3;
                }
                break;
            case 170:
                {
                alt3=4;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt3=5;
                }
                break;
            case ENUM_PREFIX:
                {
                alt3=6;
                }
                break;
            case 199:
                {
                alt3=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }

            switch (alt3) {
                case 1 :
                    // Objcm.g:130:4: extern_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_wrapper_in_operator484);
                    extern_wrapper5=extern_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, extern_wrapper5.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:131:4: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_operator490);
                    static_section_wrapper6=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper6.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:132:4: type_start_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_start_wrapper_in_operator495);
                    type_start_wrapper7=type_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, type_start_wrapper7.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:133:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_operator502);
                    interface_declaration_wrapper8=interface_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_declaration_wrapper8.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:134:4: typedef_struct_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_operator508);
                    typedef_struct_declaration_wrapper9=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper9.getTree());

                    }
                    break;
                case 6 :
                    // Objcm.g:135:4: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_operator513);
                    typedef_declaration_wrapper10=typedef_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_declaration_wrapper10.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:136:4: typedef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_in_operator518);
                    typedef11=typedef();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef11.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // Objcm.g:143:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcmParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcmParser.extern_wrapper_return retval = new ObjcmParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_return extern12 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // Objcm.g:144:3: ( extern -> ^( EXTERN ) )
            // Objcm.g:144:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper536);
            extern12=extern();

            state._fsp--;

            stream_extern.add(extern12.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 144:12: -> ^( EXTERN )
            {
                // Objcm.g:144:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // Objcm.g:147:2: extern : 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR ;
    public final ObjcmParser.extern_return extern() throws RecognitionException {
        ObjcmParser.extern_return retval = new ObjcmParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal13=null;
        Token string_literal14=null;
        Token L_FBR15=null;
        Token set16=null;
        Token R_FBR17=null;

        Object string_literal13_tree=null;
        Object string_literal14_tree=null;
        Object L_FBR15_tree=null;
        Object set16_tree=null;
        Object R_FBR17_tree=null;

        try {
            // Objcm.g:147:9: ( 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR )
            // Objcm.g:147:11: 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR
            {
            root_0 = (Object)adaptor.nil();


            string_literal13=(Token)match(input,189,FOLLOW_189_in_extern555); 
            string_literal13_tree = 
            (Object)adaptor.create(string_literal13)
            ;
            adaptor.addChild(root_0, string_literal13_tree);


            string_literal14=(Token)match(input,162,FOLLOW_162_in_extern558); 
            string_literal14_tree = 
            (Object)adaptor.create(string_literal14)
            ;
            adaptor.addChild(root_0, string_literal14_tree);


            L_FBR15=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_extern561); 
            L_FBR15_tree = 
            (Object)adaptor.create(L_FBR15)
            ;
            adaptor.addChild(root_0, L_FBR15_tree);


            set16=(Token)input.LT(1);

            if ( (input.LA(1) >= ARRAY_INIT && input.LA(1) <= R_BR)||(input.LA(1) >= R_KBR && input.LA(1) <= 202) ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set16)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            R_FBR17=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_extern568); 
            R_FBR17_tree = 
            (Object)adaptor.create(R_FBR17)
            ;
            adaptor.addChild(root_0, R_FBR17_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // Objcm.g:149:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcmParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcmParser.implementation_wrapper_return retval = new ObjcmParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_return implementation18 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // Objcm.g:150:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // Objcm.g:150:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper580);
            implementation18=implementation();

            state._fsp--;

            stream_implementation.add(implementation18.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 150:20: -> ^( IMPLEMENTATION implementation )
            {
                // Objcm.g:150:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // Objcm.g:152:1: implementation : '@implementation' name ( category )? ( super_class )? ( implementation_body )* '@end' ( SEMICOLON )? ;
    public final ObjcmParser.implementation_return implementation() throws RecognitionException {
        ObjcmParser.implementation_return retval = new ObjcmParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal19=null;
        Token string_literal24=null;
        Token SEMICOLON25=null;
        ObjcmParser.name_return name20 =null;

        ObjcmParser.category_return category21 =null;

        ObjcmParser.super_class_return super_class22 =null;

        ObjcmParser.implementation_body_return implementation_body23 =null;


        Object string_literal19_tree=null;
        Object string_literal24_tree=null;
        Object SEMICOLON25_tree=null;

        try {
            // Objcm.g:153:2: ( '@implementation' name ( category )? ( super_class )? ( implementation_body )* '@end' ( SEMICOLON )? )
            // Objcm.g:153:4: '@implementation' name ( category )? ( super_class )? ( implementation_body )* '@end' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal19=(Token)match(input,169,FOLLOW_169_in_implementation599); 
            string_literal19_tree = 
            (Object)adaptor.create(string_literal19)
            ;
            adaptor.addChild(root_0, string_literal19_tree);


            pushFollow(FOLLOW_name_in_implementation602);
            name20=name();

            state._fsp--;

            adaptor.addChild(root_0, name20.getTree());

            // Objcm.g:153:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==L_BR) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // Objcm.g:153:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation605);
                    category21=category();

                    state._fsp--;

                    adaptor.addChild(root_0, category21.getTree());

                    }
                    break;

            }


            // Objcm.g:153:39: ( super_class )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==COLON) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // Objcm.g:153:39: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_implementation608);
                    super_class22=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class22.getTree());

                    }
                    break;

            }


            // Objcm.g:154:3: ( implementation_body )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==ID||LA6_0==L_MINUS||LA6_0==L_PLUS||LA6_0==STATIC_PREFIX||LA6_0==STRUCT_PREFIX||LA6_0==VOID||LA6_0==176||LA6_0==189||LA6_0==199||LA6_0==201) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // Objcm.g:154:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation613);
            	    implementation_body23=implementation_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, implementation_body23.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            string_literal24=(Token)match(input,167,FOLLOW_167_in_implementation618); 
            string_literal24_tree = 
            (Object)adaptor.create(string_literal24)
            ;
            adaptor.addChild(root_0, string_literal24_tree);


            // Objcm.g:155:11: ( SEMICOLON )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==SEMICOLON) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // Objcm.g:155:11: SEMICOLON
                    {
                    SEMICOLON25=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation621); 
                    SEMICOLON25_tree = 
                    (Object)adaptor.create(SEMICOLON25)
                    ;
                    adaptor.addChild(root_0, SEMICOLON25_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // Objcm.g:158:1: category : L_BR name R_BR -> ^( CATEGORY name ) ;
    public final ObjcmParser.category_return category() throws RecognitionException {
        ObjcmParser.category_return retval = new ObjcmParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR26=null;
        Token R_BR28=null;
        ObjcmParser.name_return name27 =null;


        Object L_BR26_tree=null;
        Object R_BR28_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // Objcm.g:158:9: ( L_BR name R_BR -> ^( CATEGORY name ) )
            // Objcm.g:158:11: L_BR name R_BR
            {
            L_BR26=(Token)match(input,L_BR,FOLLOW_L_BR_in_category633);  
            stream_L_BR.add(L_BR26);


            pushFollow(FOLLOW_name_in_category636);
            name27=name();

            state._fsp--;

            stream_name.add(name27.getTree());

            R_BR28=(Token)match(input,R_BR,FOLLOW_R_BR_in_category639);  
            stream_R_BR.add(R_BR28);


            // AST REWRITE
            // elements: name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 158:28: -> ^( CATEGORY name )
            {
                // Objcm.g:158:31: ^( CATEGORY name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // Objcm.g:160:1: implementation_body : ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper );
    public final ObjcmParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcmParser.implementation_body_return retval = new ObjcmParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.directives_return directives29 =null;

        ObjcmParser.typedef_return typedef30 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper31 =null;

        ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper32 =null;

        ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper33 =null;

        ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper34 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper35 =null;



        try {
            // Objcm.g:161:2: ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper )
            int alt8=7;
            switch ( input.LA(1) ) {
            case 176:
                {
                alt8=1;
                }
                break;
            case 199:
                {
                alt8=2;
                }
                break;
            case STATIC_PREFIX:
                {
                alt8=3;
                }
                break;
            case L_MINUS:
            case L_PLUS:
                {
                alt8=4;
                }
                break;
            case ID:
            case VOID:
            case 201:
                {
                alt8=5;
                }
                break;
            case 189:
                {
                alt8=6;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt8=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }

            switch (alt8) {
                case 1 :
                    // Objcm.g:161:4: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body657);
                    directives29=directives();

                    state._fsp--;

                    adaptor.addChild(root_0, directives29.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:162:5: typedef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_in_implementation_body663);
                    typedef30=typedef();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef30.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:163:5: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_implementation_body669);
                    static_section_wrapper31=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper31.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:164:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body675);
                    implementation_method_wrapper32=implementation_method_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper32.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:166:4: field_type_started_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_type_started_wrapper_in_implementation_body681);
                    field_type_started_wrapper33=field_type_started_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_type_started_wrapper33.getTree());

                    }
                    break;
                case 6 :
                    // Objcm.g:167:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_implementation_body687);
                    field_declaration_wrapper34=field_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_wrapper34.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:168:4: typedef_struct_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body692);
                    typedef_struct_declaration_wrapper35=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper35.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // Objcm.g:171:1: directives : synthesize ;
    public final ObjcmParser.directives_return directives() throws RecognitionException {
        ObjcmParser.directives_return retval = new ObjcmParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.synthesize_return synthesize36 =null;



        try {
            // Objcm.g:172:2: ( synthesize )
            // Objcm.g:172:4: synthesize
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_synthesize_in_directives703);
            synthesize36=synthesize();

            state._fsp--;

            adaptor.addChild(root_0, synthesize36.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // Objcm.g:175:1: synthesize : '@synthesize' ID ( L_EQ ID )? SEMICOLON ;
    public final ObjcmParser.synthesize_return synthesize() throws RecognitionException {
        ObjcmParser.synthesize_return retval = new ObjcmParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal37=null;
        Token ID38=null;
        Token L_EQ39=null;
        Token ID40=null;
        Token SEMICOLON41=null;

        Object string_literal37_tree=null;
        Object ID38_tree=null;
        Object L_EQ39_tree=null;
        Object ID40_tree=null;
        Object SEMICOLON41_tree=null;

        try {
            // Objcm.g:176:2: ( '@synthesize' ID ( L_EQ ID )? SEMICOLON )
            // Objcm.g:176:4: '@synthesize' ID ( L_EQ ID )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal37=(Token)match(input,176,FOLLOW_176_in_synthesize716); 
            string_literal37_tree = 
            (Object)adaptor.create(string_literal37)
            ;
            adaptor.addChild(root_0, string_literal37_tree);


            ID38=(Token)match(input,ID,FOLLOW_ID_in_synthesize719); 
            ID38_tree = 
            (Object)adaptor.create(ID38)
            ;
            adaptor.addChild(root_0, ID38_tree);


            // Objcm.g:176:22: ( L_EQ ID )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==L_EQ) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // Objcm.g:176:23: L_EQ ID
                    {
                    L_EQ39=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_synthesize722); 
                    L_EQ39_tree = 
                    (Object)adaptor.create(L_EQ39)
                    ;
                    adaptor.addChild(root_0, L_EQ39_tree);


                    ID40=(Token)match(input,ID,FOLLOW_ID_in_synthesize724); 
                    ID40_tree = 
                    (Object)adaptor.create(ID40)
                    ;
                    adaptor.addChild(root_0, ID40_tree);


                    }
                    break;

            }


            SEMICOLON41=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synthesize728); 
            SEMICOLON41_tree = 
            (Object)adaptor.create(SEMICOLON41)
            ;
            adaptor.addChild(root_0, SEMICOLON41_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class typedef_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef"
    // Objcm.g:179:1: typedef : 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper ) ;
    public final ObjcmParser.typedef_return typedef() throws RecognitionException {
        ObjcmParser.typedef_return retval = new ObjcmParser.typedef_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal42=null;
        ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper43 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper44 =null;

        ObjcmParser.type_rename_wrapper_return type_rename_wrapper45 =null;


        Object string_literal42_tree=null;

        try {
            // Objcm.g:179:9: ( 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper ) )
            // Objcm.g:179:11: 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            string_literal42=(Token)match(input,199,FOLLOW_199_in_typedef740); 
            string_literal42_tree = 
            (Object)adaptor.create(string_literal42)
            ;
            adaptor.addChild(root_0, string_literal42_tree);


            // Objcm.g:179:22: ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper )
            int alt10=3;
            switch ( input.LA(1) ) {
            case ENUM_PREFIX:
                {
                alt10=1;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt10=2;
                }
                break;
            case ID:
                {
                alt10=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;

            }

            switch (alt10) {
                case 1 :
                    // Objcm.g:179:23: typedef_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_typedef744);
                    typedef_declaration_wrapper43=typedef_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_declaration_wrapper43.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:179:53: typedef_struct_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_typedef748);
                    typedef_struct_declaration_wrapper44=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper44.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:179:90: type_rename_wrapper
                    {
                    pushFollow(FOLLOW_type_rename_wrapper_in_typedef752);
                    type_rename_wrapper45=type_rename_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, type_rename_wrapper45.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef"


    public static class type_rename_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_rename_wrapper"
    // Objcm.g:182:1: type_rename_wrapper : type_rename -> ^( TYPE_RENAME type_rename ) ;
    public final ObjcmParser.type_rename_wrapper_return type_rename_wrapper() throws RecognitionException {
        ObjcmParser.type_rename_wrapper_return retval = new ObjcmParser.type_rename_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_rename_return type_rename46 =null;


        RewriteRuleSubtreeStream stream_type_rename=new RewriteRuleSubtreeStream(adaptor,"rule type_rename");
        try {
            // Objcm.g:183:2: ( type_rename -> ^( TYPE_RENAME type_rename ) )
            // Objcm.g:183:4: type_rename
            {
            pushFollow(FOLLOW_type_rename_in_type_rename_wrapper766);
            type_rename46=type_rename();

            state._fsp--;

            stream_type_rename.add(type_rename46.getTree());

            // AST REWRITE
            // elements: type_rename
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 183:16: -> ^( TYPE_RENAME type_rename )
            {
                // Objcm.g:183:19: ^( TYPE_RENAME type_rename )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_RENAME, "TYPE_RENAME")
                , root_1);

                adaptor.addChild(root_1, stream_type_rename.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_rename_wrapper"


    public static class type_rename_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_rename"
    // Objcm.g:185:1: type_rename : ID ID SEMICOLON ;
    public final ObjcmParser.type_rename_return type_rename() throws RecognitionException {
        ObjcmParser.type_rename_return retval = new ObjcmParser.type_rename_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID47=null;
        Token ID48=null;
        Token SEMICOLON49=null;

        Object ID47_tree=null;
        Object ID48_tree=null;
        Object SEMICOLON49_tree=null;

        try {
            // Objcm.g:186:2: ( ID ID SEMICOLON )
            // Objcm.g:186:4: ID ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            ID47=(Token)match(input,ID,FOLLOW_ID_in_type_rename785); 
            ID47_tree = 
            (Object)adaptor.create(ID47)
            ;
            adaptor.addChild(root_0, ID47_tree);


            ID48=(Token)match(input,ID,FOLLOW_ID_in_type_rename787); 
            ID48_tree = 
            (Object)adaptor.create(ID48)
            ;
            adaptor.addChild(root_0, ID48_tree);


            SEMICOLON49=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_rename789); 
            SEMICOLON49_tree = 
            (Object)adaptor.create(SEMICOLON49)
            ;
            adaptor.addChild(root_0, SEMICOLON49_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_rename"


    public static class static_section_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section_wrapper"
    // Objcm.g:188:1: static_section_wrapper : static_section -> ^( STATIC static_section ) ;
    public final ObjcmParser.static_section_wrapper_return static_section_wrapper() throws RecognitionException {
        ObjcmParser.static_section_wrapper_return retval = new ObjcmParser.static_section_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_section_return static_section50 =null;


        RewriteRuleSubtreeStream stream_static_section=new RewriteRuleSubtreeStream(adaptor,"rule static_section");
        try {
            // Objcm.g:189:2: ( static_section -> ^( STATIC static_section ) )
            // Objcm.g:189:4: static_section
            {
            pushFollow(FOLLOW_static_section_in_static_section_wrapper801);
            static_section50=static_section();

            state._fsp--;

            stream_static_section.add(static_section50.getTree());

            // AST REWRITE
            // elements: static_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 189:19: -> ^( STATIC static_section )
            {
                // Objcm.g:189:22: ^( STATIC static_section )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC, "STATIC")
                , root_1);

                adaptor.addChild(root_1, stream_static_section.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section_wrapper"


    public static class static_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section"
    // Objcm.g:191:1: static_section : STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 ;
    public final ObjcmParser.static_section_return static_section() throws RecognitionException {
        ObjcmParser.static_section_return retval = new ObjcmParser.static_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX51=null;
        Token CONST_PREFIX52=null;
        Token STRUCT_PREFIX53=null;
        Token ENUM_PREFIX54=null;
        ObjcmParser.static_section2_return static_section255 =null;


        Object STATIC_PREFIX51_tree=null;
        Object CONST_PREFIX52_tree=null;
        Object STRUCT_PREFIX53_tree=null;
        Object ENUM_PREFIX54_tree=null;

        try {
            // Objcm.g:193:2: ( STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 )
            // Objcm.g:193:5: STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX51=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_section823); 
            STATIC_PREFIX51_tree = 
            (Object)adaptor.create(STATIC_PREFIX51)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX51_tree);


            // Objcm.g:193:19: ( CONST_PREFIX )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==CONST_PREFIX) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // Objcm.g:193:19: CONST_PREFIX
                    {
                    CONST_PREFIX52=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_section825); 
                    CONST_PREFIX52_tree = 
                    (Object)adaptor.create(CONST_PREFIX52)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX52_tree);


                    }
                    break;

            }


            // Objcm.g:193:33: ( STRUCT_PREFIX )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==STRUCT_PREFIX) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // Objcm.g:193:33: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX53=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_static_section828); 
                    STRUCT_PREFIX53_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX53)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX53_tree);


                    }
                    break;

            }


            // Objcm.g:193:48: ( ENUM_PREFIX )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==ENUM_PREFIX) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // Objcm.g:193:48: ENUM_PREFIX
                    {
                    ENUM_PREFIX54=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_static_section831); 
                    ENUM_PREFIX54_tree = 
                    (Object)adaptor.create(ENUM_PREFIX54)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX54_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_static_section2_in_static_section834);
            static_section255=static_section2();

            state._fsp--;

            adaptor.addChild(root_0, static_section255.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section"


    public static class static_section2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section2"
    // Objcm.g:195:1: static_section2 : ( inline_section | implementation_method_wrapper2 | static_section3 );
    public final ObjcmParser.static_section2_return static_section2() throws RecognitionException {
        ObjcmParser.static_section2_return retval = new ObjcmParser.static_section2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.inline_section_return inline_section56 =null;

        ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper257 =null;

        ObjcmParser.static_section3_return static_section358 =null;



        try {
            // Objcm.g:196:2: ( inline_section | implementation_method_wrapper2 | static_section3 )
            int alt14=3;
            switch ( input.LA(1) ) {
            case 194:
                {
                alt14=1;
                }
                break;
            case L_FBR:
            case SEMICOLON:
                {
                alt14=2;
                }
                break;
            case ID:
            case VOID:
            case 201:
                {
                alt14=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }

            switch (alt14) {
                case 1 :
                    // Objcm.g:196:4: inline_section
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_inline_section_in_static_section2843);
                    inline_section56=inline_section();

                    state._fsp--;

                    adaptor.addChild(root_0, inline_section56.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:197:5: implementation_method_wrapper2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper2_in_static_section2850);
                    implementation_method_wrapper257=implementation_method_wrapper2();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper257.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:198:5: static_section3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section3_in_static_section2857);
                    static_section358=static_section3();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section358.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section2"


    public static class inline_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_section"
    // Objcm.g:201:1: inline_section : 'inline' ( ENUM_PREFIX )? field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) ;
    public final ObjcmParser.inline_section_return inline_section() throws RecognitionException {
        ObjcmParser.inline_section_return retval = new ObjcmParser.inline_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal59=null;
        Token ENUM_PREFIX60=null;
        Token SEMICOLON65=null;
        ObjcmParser.field_type_return field_type61 =null;

        ObjcmParser.name_return name62 =null;

        ObjcmParser.method_params2_return method_params263 =null;

        ObjcmParser.block_wrapper_return block_wrapper64 =null;


        Object string_literal59_tree=null;
        Object ENUM_PREFIX60_tree=null;
        Object SEMICOLON65_tree=null;

        try {
            // Objcm.g:202:2: ( 'inline' ( ENUM_PREFIX )? field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) )
            // Objcm.g:202:4: 'inline' ( ENUM_PREFIX )? field_type name ( method_params2 )? ( block_wrapper | SEMICOLON )
            {
            root_0 = (Object)adaptor.nil();


            string_literal59=(Token)match(input,194,FOLLOW_194_in_inline_section869); 
            string_literal59_tree = 
            (Object)adaptor.create(string_literal59)
            ;
            adaptor.addChild(root_0, string_literal59_tree);


            // Objcm.g:202:13: ( ENUM_PREFIX )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==ENUM_PREFIX) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // Objcm.g:202:13: ENUM_PREFIX
                    {
                    ENUM_PREFIX60=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_inline_section871); 
                    ENUM_PREFIX60_tree = 
                    (Object)adaptor.create(ENUM_PREFIX60)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX60_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_inline_section874);
            field_type61=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type61.getTree());

            pushFollow(FOLLOW_name_in_inline_section876);
            name62=name();

            state._fsp--;

            adaptor.addChild(root_0, name62.getTree());

            // Objcm.g:202:43: ( method_params2 )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==L_BR) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // Objcm.g:202:43: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_inline_section879);
                    method_params263=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params263.getTree());

                    }
                    break;

            }


            // Objcm.g:202:59: ( block_wrapper | SEMICOLON )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==L_FBR) ) {
                alt17=1;
            }
            else if ( (LA17_0==SEMICOLON) ) {
                alt17=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // Objcm.g:202:60: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_inline_section883);
                    block_wrapper64=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper64.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:202:76: SEMICOLON
                    {
                    SEMICOLON65=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inline_section887); 
                    SEMICOLON65_tree = 
                    (Object)adaptor.create(SEMICOLON65)
                    ;
                    adaptor.addChild(root_0, SEMICOLON65_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_section"


    public static class static_section3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section3"
    // Objcm.g:204:1: static_section3 : field_type name ( indexed )* static_end ;
    public final ObjcmParser.static_section3_return static_section3() throws RecognitionException {
        ObjcmParser.static_section3_return retval = new ObjcmParser.static_section3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type66 =null;

        ObjcmParser.name_return name67 =null;

        ObjcmParser.indexed_return indexed68 =null;

        ObjcmParser.static_end_return static_end69 =null;



        try {
            // Objcm.g:205:2: ( field_type name ( indexed )* static_end )
            // Objcm.g:205:4: field_type name ( indexed )* static_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_static_section3898);
            field_type66=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type66.getTree());

            pushFollow(FOLLOW_name_in_static_section3900);
            name67=name();

            state._fsp--;

            adaptor.addChild(root_0, name67.getTree());

            // Objcm.g:205:20: ( indexed )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==L_KBR) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // Objcm.g:205:20: indexed
            	    {
            	    pushFollow(FOLLOW_indexed_in_static_section3902);
            	    indexed68=indexed();

            	    state._fsp--;

            	    adaptor.addChild(root_0, indexed68.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);


            pushFollow(FOLLOW_static_end_in_static_section3906);
            static_end69=static_end();

            state._fsp--;

            adaptor.addChild(root_0, static_end69.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section3"


    public static class static_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_end"
    // Objcm.g:208:1: static_end : ( implementation_method_wrapper3 | field_end );
    public final ObjcmParser.static_end_return static_end() throws RecognitionException {
        ObjcmParser.static_end_return retval = new ObjcmParser.static_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper370 =null;

        ObjcmParser.field_end_return field_end71 =null;



        try {
            // Objcm.g:209:2: ( implementation_method_wrapper3 | field_end )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==L_BR) ) {
                alt19=1;
            }
            else if ( (LA19_0==L_AND_EQ||(LA19_0 >= L_DIV_EQ && LA19_0 <= L_EQ)||LA19_0==L_LEFT_EQ||LA19_0==L_MINUS_EQ||LA19_0==L_MULT_EQ||LA19_0==L_OR_EQ||LA19_0==L_PERC_EQ||LA19_0==L_PLUS_EQ||LA19_0==L_RIGHT_EQ||LA19_0==L_XOR_EQ||LA19_0==SEMICOLON) ) {
                alt19=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }
            switch (alt19) {
                case 1 :
                    // Objcm.g:209:4: implementation_method_wrapper3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper3_in_static_end918);
                    implementation_method_wrapper370=implementation_method_wrapper3();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper370.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:210:5: field_end
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_end_in_static_end924);
                    field_end71=field_end();

                    state._fsp--;

                    adaptor.addChild(root_0, field_end71.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_end"


    public static class field_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end"
    // Objcm.g:212:1: field_end : field_end_internal -> ^( FIELD field_end_internal ) ;
    public final ObjcmParser.field_end_return field_end() throws RecognitionException {
        ObjcmParser.field_end_return retval = new ObjcmParser.field_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_end_internal_return field_end_internal72 =null;


        RewriteRuleSubtreeStream stream_field_end_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_end_internal");
        try {
            // Objcm.g:213:2: ( field_end_internal -> ^( FIELD field_end_internal ) )
            // Objcm.g:213:4: field_end_internal
            {
            pushFollow(FOLLOW_field_end_internal_in_field_end935);
            field_end_internal72=field_end_internal();

            state._fsp--;

            stream_field_end_internal.add(field_end_internal72.getTree());

            // AST REWRITE
            // elements: field_end_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 213:23: -> ^( FIELD field_end_internal )
            {
                // Objcm.g:213:26: ^( FIELD field_end_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_end_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end"


    public static class field_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end_internal"
    // Objcm.g:215:1: field_end_internal : ( expr_assign_wrapper )? SEMICOLON ;
    public final ObjcmParser.field_end_internal_return field_end_internal() throws RecognitionException {
        ObjcmParser.field_end_internal_return retval = new ObjcmParser.field_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON74=null;
        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper73 =null;


        Object SEMICOLON74_tree=null;

        try {
            // Objcm.g:216:2: ( ( expr_assign_wrapper )? SEMICOLON )
            // Objcm.g:216:4: ( expr_assign_wrapper )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:216:4: ( expr_assign_wrapper )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==L_AND_EQ||(LA20_0 >= L_DIV_EQ && LA20_0 <= L_EQ)||LA20_0==L_LEFT_EQ||LA20_0==L_MINUS_EQ||LA20_0==L_MULT_EQ||LA20_0==L_OR_EQ||LA20_0==L_PERC_EQ||LA20_0==L_PLUS_EQ||LA20_0==L_RIGHT_EQ||LA20_0==L_XOR_EQ) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // Objcm.g:216:4: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_field_end_internal953);
                    expr_assign_wrapper73=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper73.getTree());

                    }
                    break;

            }


            SEMICOLON74=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_end_internal956); 
            SEMICOLON74_tree = 
            (Object)adaptor.create(SEMICOLON74)
            ;
            adaptor.addChild(root_0, SEMICOLON74_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end_internal"


    public static class implementation_method_wrapper3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper3"
    // Objcm.g:218:1: implementation_method_wrapper3 : implementation_method3 -> ^( METHOD implementation_method3 ) ;
    public final ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper3() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper3_return retval = new ObjcmParser.implementation_method_wrapper3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method3_return implementation_method375 =null;


        RewriteRuleSubtreeStream stream_implementation_method3=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method3");
        try {
            // Objcm.g:219:2: ( implementation_method3 -> ^( METHOD implementation_method3 ) )
            // Objcm.g:219:4: implementation_method3
            {
            pushFollow(FOLLOW_implementation_method3_in_implementation_method_wrapper3968);
            implementation_method375=implementation_method3();

            state._fsp--;

            stream_implementation_method3.add(implementation_method375.getTree());

            // AST REWRITE
            // elements: implementation_method3
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 219:27: -> ^( METHOD implementation_method3 )
            {
                // Objcm.g:219:30: ^( METHOD implementation_method3 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method3.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper3"


    public static class implementation_method3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method3"
    // Objcm.g:221:1: implementation_method3 : method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? ;
    public final ObjcmParser.implementation_method3_return implementation_method3() throws RecognitionException {
        ObjcmParser.implementation_method3_return retval = new ObjcmParser.implementation_method3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON77=null;
        ObjcmParser.method_header_body3_return method_header_body376 =null;

        ObjcmParser.attribute_return attribute78 =null;

        ObjcmParser.block_wrapper_return block_wrapper79 =null;


        Object SEMICOLON77_tree=null;

        try {
            // Objcm.g:222:2: ( method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? )
            // Objcm.g:222:4: method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body3_in_implementation_method3986);
            method_header_body376=method_header_body3();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body376.getTree());

            // Objcm.g:222:25: ( SEMICOLON )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==SEMICOLON) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // Objcm.g:222:25: SEMICOLON
                    {
                    SEMICOLON77=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method3989); 
                    SEMICOLON77_tree = 
                    (Object)adaptor.create(SEMICOLON77)
                    ;
                    adaptor.addChild(root_0, SEMICOLON77_tree);


                    }
                    break;

            }


            // Objcm.g:223:3: ( attribute )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==180) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // Objcm.g:223:3: attribute
                    {
                    pushFollow(FOLLOW_attribute_in_implementation_method3994);
                    attribute78=attribute();

                    state._fsp--;

                    adaptor.addChild(root_0, attribute78.getTree());

                    }
                    break;

            }


            // Objcm.g:224:3: ( block_wrapper )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==L_FBR) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // Objcm.g:224:3: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_implementation_method3999);
                    block_wrapper79=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper79.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method3"


    public static class attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute"
    // Objcm.g:227:1: attribute : '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON ;
    public final ObjcmParser.attribute_return attribute() throws RecognitionException {
        ObjcmParser.attribute_return retval = new ObjcmParser.attribute_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal80=null;
        Token L_BR81=null;
        Token L_BR82=null;
        Token string_literal83=null;
        Token R_BR84=null;
        Token R_BR85=null;
        Token SEMICOLON86=null;

        Object string_literal80_tree=null;
        Object L_BR81_tree=null;
        Object L_BR82_tree=null;
        Object string_literal83_tree=null;
        Object R_BR84_tree=null;
        Object R_BR85_tree=null;
        Object SEMICOLON86_tree=null;

        try {
            // Objcm.g:228:2: ( '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON )
            // Objcm.g:228:4: '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal80=(Token)match(input,180,FOLLOW_180_in_attribute1012); 
            string_literal80_tree = 
            (Object)adaptor.create(string_literal80)
            ;
            adaptor.addChild(root_0, string_literal80_tree);


            L_BR81=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute1015); 
            L_BR81_tree = 
            (Object)adaptor.create(L_BR81)
            ;
            adaptor.addChild(root_0, L_BR81_tree);


            L_BR82=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute1018); 
            L_BR82_tree = 
            (Object)adaptor.create(L_BR82)
            ;
            adaptor.addChild(root_0, L_BR82_tree);


            string_literal83=(Token)match(input,184,FOLLOW_184_in_attribute1021); 
            string_literal83_tree = 
            (Object)adaptor.create(string_literal83)
            ;
            adaptor.addChild(root_0, string_literal83_tree);


            R_BR84=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute1024); 
            R_BR84_tree = 
            (Object)adaptor.create(R_BR84)
            ;
            adaptor.addChild(root_0, R_BR84_tree);


            R_BR85=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute1027); 
            R_BR85_tree = 
            (Object)adaptor.create(R_BR85)
            ;
            adaptor.addChild(root_0, R_BR85_tree);


            SEMICOLON86=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_attribute1030); 
            SEMICOLON86_tree = 
            (Object)adaptor.create(SEMICOLON86)
            ;
            adaptor.addChild(root_0, SEMICOLON86_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute"


    public static class implementation_method2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method2"
    // Objcm.g:230:1: implementation_method2 : ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method2_return implementation_method2() throws RecognitionException {
        ObjcmParser.implementation_method2_return retval = new ObjcmParser.implementation_method2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON87=null;
        ObjcmParser.block_wrapper_return block_wrapper88 =null;


        Object SEMICOLON87_tree=null;

        try {
            // Objcm.g:231:2: ( ( SEMICOLON )? block_wrapper )
            // Objcm.g:231:5: ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:231:5: ( SEMICOLON )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==SEMICOLON) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // Objcm.g:231:5: SEMICOLON
                    {
                    SEMICOLON87=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method21042); 
                    SEMICOLON87_tree = 
                    (Object)adaptor.create(SEMICOLON87)
                    ;
                    adaptor.addChild(root_0, SEMICOLON87_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method21047);
            block_wrapper88=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper88.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method2"


    public static class field_type_started_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started_wrapper"
    // Objcm.g:235:1: field_type_started_wrapper : field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) ;
    public final ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper() throws RecognitionException {
        ObjcmParser.field_type_started_wrapper_return retval = new ObjcmParser.field_type_started_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_started_return field_type_started89 =null;


        RewriteRuleSubtreeStream stream_field_type_started=new RewriteRuleSubtreeStream(adaptor,"rule field_type_started");
        try {
            // Objcm.g:236:2: ( field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) )
            // Objcm.g:236:4: field_type_started
            {
            pushFollow(FOLLOW_field_type_started_in_field_type_started_wrapper1059);
            field_type_started89=field_type_started();

            state._fsp--;

            stream_field_type_started.add(field_type_started89.getTree());

            // AST REWRITE
            // elements: field_type_started
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 236:23: -> ^( FIELD_TYPE_STARTED field_type_started )
            {
                // Objcm.g:236:26: ^( FIELD_TYPE_STARTED field_type_started )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_TYPE_STARTED, "FIELD_TYPE_STARTED")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_started.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started_wrapper"


    public static class field_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started"
    // Objcm.g:238:1: field_type_started : field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) ;
    public final ObjcmParser.field_type_started_return field_type_started() throws RecognitionException {
        ObjcmParser.field_type_started_return retval = new ObjcmParser.field_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type90 =null;

        ObjcmParser.name_return name91 =null;

        ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper92 =null;

        ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper93 =null;



        try {
            // Objcm.g:239:2: ( field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) )
            // Objcm.g:239:4: field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_field_type_started1078);
            field_type90=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type90.getTree());

            pushFollow(FOLLOW_name_in_field_type_started1080);
            name91=name();

            state._fsp--;

            adaptor.addChild(root_0, name91.getTree());

            // Objcm.g:239:20: ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==L_BR) ) {
                alt25=1;
            }
            else if ( (LA25_0==L_AND_EQ||(LA25_0 >= L_DIV_EQ && LA25_0 <= L_EQ)||LA25_0==L_LEFT_EQ||LA25_0==L_MINUS_EQ||LA25_0==L_MULT_EQ||LA25_0==L_OR_EQ||LA25_0==L_PERC_EQ||LA25_0==L_PLUS_EQ||LA25_0==L_RIGHT_EQ||LA25_0==L_XOR_EQ||LA25_0==SEMICOLON) ) {
                alt25=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;

            }
            switch (alt25) {
                case 1 :
                    // Objcm.g:239:21: classic_method_declaration_wrapper
                    {
                    pushFollow(FOLLOW_classic_method_declaration_wrapper_in_field_type_started1083);
                    classic_method_declaration_wrapper92=classic_method_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, classic_method_declaration_wrapper92.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:239:58: field_declaration_end_wrapper
                    {
                    pushFollow(FOLLOW_field_declaration_end_wrapper_in_field_type_started1087);
                    field_declaration_end_wrapper93=field_declaration_end_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_end_wrapper93.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started"


    public static class field_declaration_end_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end_wrapper"
    // Objcm.g:241:1: field_declaration_end_wrapper : field_declaration_end -> ^( FIELD field_declaration_end ) ;
    public final ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_end_wrapper_return retval = new ObjcmParser.field_declaration_end_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_end_return field_declaration_end94 =null;


        RewriteRuleSubtreeStream stream_field_declaration_end=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_end");
        try {
            // Objcm.g:242:2: ( field_declaration_end -> ^( FIELD field_declaration_end ) )
            // Objcm.g:242:4: field_declaration_end
            {
            pushFollow(FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1098);
            field_declaration_end94=field_declaration_end();

            state._fsp--;

            stream_field_declaration_end.add(field_declaration_end94.getTree());

            // AST REWRITE
            // elements: field_declaration_end
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 242:26: -> ^( FIELD field_declaration_end )
            {
                // Objcm.g:242:29: ^( FIELD field_declaration_end )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_end.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end_wrapper"


    public static class classic_method_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration_wrapper"
    // Objcm.g:244:1: classic_method_declaration_wrapper : classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) ;
    public final ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper() throws RecognitionException {
        ObjcmParser.classic_method_declaration_wrapper_return retval = new ObjcmParser.classic_method_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classic_method_declaration_return classic_method_declaration95 =null;


        RewriteRuleSubtreeStream stream_classic_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classic_method_declaration");
        try {
            // Objcm.g:245:2: ( classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) )
            // Objcm.g:245:4: classic_method_declaration
            {
            pushFollow(FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1116);
            classic_method_declaration95=classic_method_declaration();

            state._fsp--;

            stream_classic_method_declaration.add(classic_method_declaration95.getTree());

            // AST REWRITE
            // elements: classic_method_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 245:31: -> ^( STATIC_METHOD classic_method_declaration )
            {
                // Objcm.g:245:34: ^( STATIC_METHOD classic_method_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_classic_method_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration_wrapper"


    public static class classic_method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration"
    // Objcm.g:247:1: classic_method_declaration : method_params2 block_wrapper ;
    public final ObjcmParser.classic_method_declaration_return classic_method_declaration() throws RecognitionException {
        ObjcmParser.classic_method_declaration_return retval = new ObjcmParser.classic_method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params296 =null;

        ObjcmParser.block_wrapper_return block_wrapper97 =null;



        try {
            // Objcm.g:249:2: ( method_params2 block_wrapper )
            // Objcm.g:249:4: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_classic_method_declaration1136);
            method_params296=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params296.getTree());

            pushFollow(FOLLOW_block_wrapper_in_classic_method_declaration1141);
            block_wrapper97=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper97.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // Objcm.g:253:1: implementation_method_wrapper : implementation_method -> ^( METHOD implementation_method ) ;
    public final ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper_return retval = new ObjcmParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_return implementation_method98 =null;


        RewriteRuleSubtreeStream stream_implementation_method=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method");
        try {
            // Objcm.g:254:2: ( implementation_method -> ^( METHOD implementation_method ) )
            // Objcm.g:254:4: implementation_method
            {
            pushFollow(FOLLOW_implementation_method_in_implementation_method_wrapper1154);
            implementation_method98=implementation_method();

            state._fsp--;

            stream_implementation_method.add(implementation_method98.getTree());

            // AST REWRITE
            // elements: implementation_method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 254:26: -> ^( METHOD implementation_method )
            {
                // Objcm.g:254:29: ^( METHOD implementation_method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class implementation_method_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper2"
    // Objcm.g:256:1: implementation_method_wrapper2 : implementation_method2 -> ^( METHOD implementation_method2 ) ;
    public final ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper2() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper2_return retval = new ObjcmParser.implementation_method_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method2_return implementation_method299 =null;


        RewriteRuleSubtreeStream stream_implementation_method2=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method2");
        try {
            // Objcm.g:257:2: ( implementation_method2 -> ^( METHOD implementation_method2 ) )
            // Objcm.g:257:4: implementation_method2
            {
            pushFollow(FOLLOW_implementation_method2_in_implementation_method_wrapper21171);
            implementation_method299=implementation_method2();

            state._fsp--;

            stream_implementation_method2.add(implementation_method299.getTree());

            // AST REWRITE
            // elements: implementation_method2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 257:27: -> ^( METHOD implementation_method2 )
            {
                // Objcm.g:257:30: ^( METHOD implementation_method2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper2"


    public static class implementation_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method"
    // Objcm.g:259:1: implementation_method : method_header_body ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method_return implementation_method() throws RecognitionException {
        ObjcmParser.implementation_method_return retval = new ObjcmParser.implementation_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON101=null;
        ObjcmParser.method_header_body_return method_header_body100 =null;

        ObjcmParser.block_wrapper_return block_wrapper102 =null;


        Object SEMICOLON101_tree=null;

        try {
            // Objcm.g:260:2: ( method_header_body ( SEMICOLON )? block_wrapper )
            // Objcm.g:260:4: method_header_body ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_implementation_method1188);
            method_header_body100=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body100.getTree());

            // Objcm.g:260:23: ( SEMICOLON )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==SEMICOLON) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // Objcm.g:260:23: SEMICOLON
                    {
                    SEMICOLON101=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method1190); 
                    SEMICOLON101_tree = 
                    (Object)adaptor.create(SEMICOLON101)
                    ;
                    adaptor.addChild(root_0, SEMICOLON101_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method1195);
            block_wrapper102=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper102.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method"


    public static class block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_wrapper"
    // Objcm.g:264:1: block_wrapper : block -> ^( BLOCK block ) ;
    public final ObjcmParser.block_wrapper_return block_wrapper() throws RecognitionException {
        ObjcmParser.block_wrapper_return retval = new ObjcmParser.block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_return block103 =null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // Objcm.g:265:2: ( block -> ^( BLOCK block ) )
            // Objcm.g:265:4: block
            {
            pushFollow(FOLLOW_block_in_block_wrapper1208);
            block103=block();

            state._fsp--;

            stream_block.add(block103.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 265:10: -> ^( BLOCK block )
            {
                // Objcm.g:265:13: ^( BLOCK block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK, "BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_wrapper"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // Objcm.g:267:1: block : L_FBR ( block_internal_full | block )* R_FBR ;
    public final ObjcmParser.block_return block() throws RecognitionException {
        ObjcmParser.block_return retval = new ObjcmParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR104=null;
        Token R_FBR107=null;
        ObjcmParser.block_internal_full_return block_internal_full105 =null;

        ObjcmParser.block_return block106 =null;


        Object L_FBR104_tree=null;
        Object R_FBR107_tree=null;

        try {
            // Objcm.g:267:7: ( L_FBR ( block_internal_full | block )* R_FBR )
            // Objcm.g:268:3: L_FBR ( block_internal_full | block )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR104=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block1230); 
            L_FBR104_tree = 
            (Object)adaptor.create(L_FBR104)
            ;
            adaptor.addChild(root_0, L_FBR104_tree);


            // Objcm.g:269:4: ( block_internal_full | block )*
            loop27:
            do {
                int alt27=3;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==ASTERISK||LA27_0==BREAK_WORD||LA27_0==CONST_PREFIX||LA27_0==ENUM_PREFIX||LA27_0==ID||LA27_0==L_AND||LA27_0==L_BR||LA27_0==L_KBR||LA27_0==L_MINUS||LA27_0==L_MINUS_MINUS||LA27_0==L_NOT||LA27_0==L_PLUS||LA27_0==L_PLUS_PLUS||LA27_0==L_TILDA||LA27_0==NUMBER||LA27_0==SEMICOLON||(LA27_0 >= SINGLE_OP && LA27_0 <= SIZEOF)||LA27_0==STATIC_PREFIX||(LA27_0 >= STRING_LITERAL && LA27_0 <= STRING_LITERAL3)||LA27_0==STRUCT_PREFIX||LA27_0==VOID||LA27_0==166||LA27_0==173||LA27_0==175||(LA27_0 >= 177 && LA27_0 <= 179)||(LA27_0 >= 181 && LA27_0 <= 182)||LA27_0==185||(LA27_0 >= 187 && LA27_0 <= 193)||(LA27_0 >= 195 && LA27_0 <= 198)||(LA27_0 >= 201 && LA27_0 <= 202)) ) {
                    alt27=1;
                }
                else if ( (LA27_0==L_FBR) ) {
                    alt27=2;
                }


                switch (alt27) {
            	case 1 :
            	    // Objcm.g:269:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block1236);
            	    block_internal_full105=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full105.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:269:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block1240);
            	    block106=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block106.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            R_FBR107=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block1248); 
            R_FBR107_tree = 
            (Object)adaptor.create(R_FBR107)
            ;
            adaptor.addChild(root_0, R_FBR107_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_case_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_case"
    // Objcm.g:273:1: block_case : L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR ;
    public final ObjcmParser.block_case_return block_case() throws RecognitionException {
        ObjcmParser.block_case_return retval = new ObjcmParser.block_case_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR108=null;
        Token R_FBR112=null;
        ObjcmParser.block_internal_full_return block_internal_full109 =null;

        ObjcmParser.block_return block110 =null;

        ObjcmParser.default_stmt_return default_stmt111 =null;


        Object L_FBR108_tree=null;
        Object R_FBR112_tree=null;

        try {
            // Objcm.g:274:2: ( L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR )
            // Objcm.g:275:3: L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR108=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block_case1263); 
            L_FBR108_tree = 
            (Object)adaptor.create(L_FBR108)
            ;
            adaptor.addChild(root_0, L_FBR108_tree);


            // Objcm.g:276:4: ( block_internal_full | block )*
            loop28:
            do {
                int alt28=3;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==ASTERISK||LA28_0==BREAK_WORD||LA28_0==CONST_PREFIX||LA28_0==ENUM_PREFIX||LA28_0==ID||LA28_0==L_AND||LA28_0==L_BR||LA28_0==L_KBR||LA28_0==L_MINUS||LA28_0==L_MINUS_MINUS||LA28_0==L_NOT||LA28_0==L_PLUS||LA28_0==L_PLUS_PLUS||LA28_0==L_TILDA||LA28_0==NUMBER||LA28_0==SEMICOLON||(LA28_0 >= SINGLE_OP && LA28_0 <= SIZEOF)||LA28_0==STATIC_PREFIX||(LA28_0 >= STRING_LITERAL && LA28_0 <= STRING_LITERAL3)||LA28_0==STRUCT_PREFIX||LA28_0==VOID||LA28_0==166||LA28_0==173||LA28_0==175||(LA28_0 >= 177 && LA28_0 <= 179)||(LA28_0 >= 181 && LA28_0 <= 182)||LA28_0==185||(LA28_0 >= 187 && LA28_0 <= 193)||(LA28_0 >= 195 && LA28_0 <= 198)||(LA28_0 >= 201 && LA28_0 <= 202)) ) {
                    alt28=1;
                }
                else if ( (LA28_0==L_FBR) ) {
                    alt28=2;
                }


                switch (alt28) {
            	case 1 :
            	    // Objcm.g:276:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block_case1269);
            	    block_internal_full109=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full109.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:276:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block_case1273);
            	    block110=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block110.getTree());

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            // Objcm.g:277:4: ( default_stmt )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==186) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // Objcm.g:277:4: default_stmt
                    {
                    pushFollow(FOLLOW_default_stmt_in_block_case1282);
                    default_stmt111=default_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt111.getTree());

                    }
                    break;

            }


            R_FBR112=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block_case1287); 
            R_FBR112_tree = 
            (Object)adaptor.create(R_FBR112)
            ;
            adaptor.addChild(root_0, R_FBR112_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_case"


    public static class block_internal_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_full"
    // Objcm.g:281:1: block_internal_full : block_internal ;
    public final ObjcmParser.block_internal_full_return block_internal_full() throws RecognitionException {
        ObjcmParser.block_internal_full_return retval = new ObjcmParser.block_internal_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_return block_internal113 =null;



        try {
            // Objcm.g:282:2: ( block_internal )
            // Objcm.g:282:4: block_internal
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_internal_in_block_internal_full1299);
            block_internal113=block_internal();

            state._fsp--;

            adaptor.addChild(root_0, block_internal113.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_full"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // Objcm.g:285:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper | 'extern' );
    public final ObjcmParser.block_internal_return block_internal() throws RecognitionException {
        ObjcmParser.block_internal_return retval = new ObjcmParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON117=null;
        Token SEMICOLON120=null;
        Token SEMICOLON130=null;
        Token SEMICOLON132=null;
        Token SEMICOLON134=null;
        Token SEMICOLON136=null;
        Token SEMICOLON137=null;
        Token string_literal139=null;
        ObjcmParser.try_stmt_return try_stmt114 =null;

        ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper115 =null;

        ObjcmParser.static_start_wrapper_return static_start_wrapper116 =null;

        ObjcmParser.do_stmt_return do_stmt118 =null;

        ObjcmParser.const_expression_return const_expression119 =null;

        ObjcmParser.variable_init_wrapper_return variable_init_wrapper121 =null;

        ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper122 =null;

        ObjcmParser.else_stmt_return else_stmt123 =null;

        ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper124 =null;

        ObjcmParser.return_stmt_return return_stmt125 =null;

        ObjcmParser.for_stmt_wrapper_return for_stmt_wrapper126 =null;

        ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper127 =null;

        ObjcmParser.single_operators_return single_operators128 =null;

        ObjcmParser.struct_variable_return struct_variable129 =null;

        ObjcmParser.enum_variable_return enum_variable131 =null;

        ObjcmParser.typeof_started_return typeof_started133 =null;

        ObjcmParser.known_type_started_return known_type_started135 =null;

        ObjcmParser.goto_wrapper_return goto_wrapper138 =null;


        Object SEMICOLON117_tree=null;
        Object SEMICOLON120_tree=null;
        Object SEMICOLON130_tree=null;
        Object SEMICOLON132_tree=null;
        Object SEMICOLON134_tree=null;
        Object SEMICOLON136_tree=null;
        Object SEMICOLON137_tree=null;
        Object string_literal139_tree=null;

        try {
            // Objcm.g:286:2: ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper | 'extern' )
            int alt30=20;
            alt30 = dfa30.predict(input);
            switch (alt30) {
                case 1 :
                    // Objcm.g:286:4: try_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_in_block_internal1310);
                    try_stmt114=try_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, try_stmt114.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:287:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1315);
                    throw_stmt_wrapper115=throw_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, throw_stmt_wrapper115.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:288:4: static_start_wrapper SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_start_wrapper_in_block_internal1320);
                    static_start_wrapper116=static_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_start_wrapper116.getTree());

                    SEMICOLON117=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1322); 
                    SEMICOLON117_tree = 
                    (Object)adaptor.create(SEMICOLON117)
                    ;
                    adaptor.addChild(root_0, SEMICOLON117_tree);


                    }
                    break;
                case 4 :
                    // Objcm.g:289:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1327);
                    do_stmt118=do_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, do_stmt118.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:290:4: const_expression SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expression_in_block_internal1332);
                    const_expression119=const_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expression119.getTree());

                    SEMICOLON120=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1334); 
                    SEMICOLON120_tree = 
                    (Object)adaptor.create(SEMICOLON120)
                    ;
                    adaptor.addChild(root_0, SEMICOLON120_tree);


                    }
                    break;
                case 6 :
                    // Objcm.g:291:4: variable_init_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_init_wrapper_in_block_internal1339);
                    variable_init_wrapper121=variable_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, variable_init_wrapper121.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:292:4: if_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_wrapper_in_block_internal1344);
                    if_stmt_wrapper122=if_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, if_stmt_wrapper122.getTree());

                    }
                    break;
                case 8 :
                    // Objcm.g:293:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1349);
                    else_stmt123=else_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, else_stmt123.getTree());

                    }
                    break;
                case 9 :
                    // Objcm.g:294:4: switch_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_wrapper_in_block_internal1354);
                    switch_stmt_wrapper124=switch_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, switch_stmt_wrapper124.getTree());

                    }
                    break;
                case 10 :
                    // Objcm.g:295:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1359);
                    return_stmt125=return_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, return_stmt125.getTree());

                    }
                    break;
                case 11 :
                    // Objcm.g:296:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1364);
                    for_stmt_wrapper126=for_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_wrapper126.getTree());

                    }
                    break;
                case 12 :
                    // Objcm.g:297:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1369);
                    while_stmt_wrapper127=while_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, while_stmt_wrapper127.getTree());

                    }
                    break;
                case 13 :
                    // Objcm.g:298:4: single_operators
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_operators_in_block_internal1374);
                    single_operators128=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators128.getTree());

                    }
                    break;
                case 14 :
                    // Objcm.g:299:4: struct_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_variable_in_block_internal1379);
                    struct_variable129=struct_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_variable129.getTree());

                    SEMICOLON130=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1381); 
                    SEMICOLON130_tree = 
                    (Object)adaptor.create(SEMICOLON130)
                    ;
                    adaptor.addChild(root_0, SEMICOLON130_tree);


                    }
                    break;
                case 15 :
                    // Objcm.g:300:4: enum_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_enum_variable_in_block_internal1386);
                    enum_variable131=enum_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, enum_variable131.getTree());

                    SEMICOLON132=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1388); 
                    SEMICOLON132_tree = 
                    (Object)adaptor.create(SEMICOLON132)
                    ;
                    adaptor.addChild(root_0, SEMICOLON132_tree);


                    }
                    break;
                case 16 :
                    // Objcm.g:301:4: typeof_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typeof_started_in_block_internal1393);
                    typeof_started133=typeof_started();

                    state._fsp--;

                    adaptor.addChild(root_0, typeof_started133.getTree());

                    SEMICOLON134=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1395); 
                    SEMICOLON134_tree = 
                    (Object)adaptor.create(SEMICOLON134)
                    ;
                    adaptor.addChild(root_0, SEMICOLON134_tree);


                    }
                    break;
                case 17 :
                    // Objcm.g:302:4: known_type_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_known_type_started_in_block_internal1400);
                    known_type_started135=known_type_started();

                    state._fsp--;

                    adaptor.addChild(root_0, known_type_started135.getTree());

                    SEMICOLON136=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1402); 
                    SEMICOLON136_tree = 
                    (Object)adaptor.create(SEMICOLON136)
                    ;
                    adaptor.addChild(root_0, SEMICOLON136_tree);


                    }
                    break;
                case 18 :
                    // Objcm.g:303:4: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    SEMICOLON137=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1407); 
                    SEMICOLON137_tree = 
                    (Object)adaptor.create(SEMICOLON137)
                    ;
                    adaptor.addChild(root_0, SEMICOLON137_tree);


                    }
                    break;
                case 19 :
                    // Objcm.g:304:4: goto_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_wrapper_in_block_internal1413);
                    goto_wrapper138=goto_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, goto_wrapper138.getTree());

                    }
                    break;
                case 20 :
                    // Objcm.g:305:4: 'extern'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal139=(Token)match(input,189,FOLLOW_189_in_block_internal1418); 
                    string_literal139_tree = 
                    (Object)adaptor.create(string_literal139)
                    ;
                    adaptor.addChild(root_0, string_literal139_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class goto_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_wrapper"
    // Objcm.g:308:1: goto_wrapper : goto_operator -> ^( GOTO goto_operator ) ;
    public final ObjcmParser.goto_wrapper_return goto_wrapper() throws RecognitionException {
        ObjcmParser.goto_wrapper_return retval = new ObjcmParser.goto_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.goto_operator_return goto_operator140 =null;


        RewriteRuleSubtreeStream stream_goto_operator=new RewriteRuleSubtreeStream(adaptor,"rule goto_operator");
        try {
            // Objcm.g:309:2: ( goto_operator -> ^( GOTO goto_operator ) )
            // Objcm.g:309:4: goto_operator
            {
            pushFollow(FOLLOW_goto_operator_in_goto_wrapper1430);
            goto_operator140=goto_operator();

            state._fsp--;

            stream_goto_operator.add(goto_operator140.getTree());

            // AST REWRITE
            // elements: goto_operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 309:18: -> ^( GOTO goto_operator )
            {
                // Objcm.g:309:21: ^( GOTO goto_operator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GOTO, "GOTO")
                , root_1);

                adaptor.addChild(root_1, stream_goto_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_wrapper"


    public static class goto_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_operator"
    // Objcm.g:311:1: goto_operator : 'goto' ID SEMICOLON ;
    public final ObjcmParser.goto_operator_return goto_operator() throws RecognitionException {
        ObjcmParser.goto_operator_return retval = new ObjcmParser.goto_operator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal141=null;
        Token ID142=null;
        Token SEMICOLON143=null;

        Object string_literal141_tree=null;
        Object ID142_tree=null;
        Object SEMICOLON143_tree=null;

        try {
            // Objcm.g:312:2: ( 'goto' ID SEMICOLON )
            // Objcm.g:312:4: 'goto' ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal141=(Token)match(input,191,FOLLOW_191_in_goto_operator1447); 
            string_literal141_tree = 
            (Object)adaptor.create(string_literal141)
            ;
            adaptor.addChild(root_0, string_literal141_tree);


            ID142=(Token)match(input,ID,FOLLOW_ID_in_goto_operator1449); 
            ID142_tree = 
            (Object)adaptor.create(ID142)
            ;
            adaptor.addChild(root_0, ID142_tree);


            SEMICOLON143=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_goto_operator1451); 
            SEMICOLON143_tree = 
            (Object)adaptor.create(SEMICOLON143)
            ;
            adaptor.addChild(root_0, SEMICOLON143_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_operator"


    public static class variable_init_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init_wrapper"
    // Objcm.g:314:1: variable_init_wrapper : variable_init -> ^( VARIABLE_INIT variable_init ) ;
    public final ObjcmParser.variable_init_wrapper_return variable_init_wrapper() throws RecognitionException {
        ObjcmParser.variable_init_wrapper_return retval = new ObjcmParser.variable_init_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.variable_init_return variable_init144 =null;


        RewriteRuleSubtreeStream stream_variable_init=new RewriteRuleSubtreeStream(adaptor,"rule variable_init");
        try {
            // Objcm.g:315:2: ( variable_init -> ^( VARIABLE_INIT variable_init ) )
            // Objcm.g:315:4: variable_init
            {
            pushFollow(FOLLOW_variable_init_in_variable_init_wrapper1462);
            variable_init144=variable_init();

            state._fsp--;

            stream_variable_init.add(variable_init144.getTree());

            // AST REWRITE
            // elements: variable_init
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 315:18: -> ^( VARIABLE_INIT variable_init )
            {
                // Objcm.g:315:21: ^( VARIABLE_INIT variable_init )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_INIT, "VARIABLE_INIT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_init.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init_wrapper"


    public static class variable_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init"
    // Objcm.g:317:1: variable_init : full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) ;
    public final ObjcmParser.variable_init_return variable_init() throws RecognitionException {
        ObjcmParser.variable_init_return retval = new ObjcmParser.variable_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON147=null;
        Token COLON148=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper145 =null;

        ObjcmParser.full_expr2_return full_expr2146 =null;


        Object SEMICOLON147_tree=null;
        Object COLON148_tree=null;

        try {
            // Objcm.g:318:2: ( full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) )
            // Objcm.g:318:4: full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_full_expr_wrapper_in_variable_init1480);
            full_expr_wrapper145=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper145.getTree());

            // Objcm.g:318:22: ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==ID||LA32_0==SEMICOLON||LA32_0==VOID||LA32_0==182||LA32_0==185||LA32_0==193||LA32_0==196||LA32_0==201) ) {
                alt32=1;
            }
            else if ( (LA32_0==COLON) ) {
                alt32=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }
            switch (alt32) {
                case 1 :
                    // Objcm.g:318:23: ( ( full_expr2 )? SEMICOLON )
                    {
                    // Objcm.g:318:23: ( ( full_expr2 )? SEMICOLON )
                    // Objcm.g:318:24: ( full_expr2 )? SEMICOLON
                    {
                    // Objcm.g:318:24: ( full_expr2 )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==ID||LA31_0==VOID||LA31_0==182||LA31_0==185||LA31_0==193||LA31_0==196||LA31_0==201) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // Objcm.g:318:24: full_expr2
                            {
                            pushFollow(FOLLOW_full_expr2_in_variable_init1484);
                            full_expr2146=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2146.getTree());

                            }
                            break;

                    }


                    SEMICOLON147=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_variable_init1487); 
                    SEMICOLON147_tree = 
                    (Object)adaptor.create(SEMICOLON147)
                    ;
                    adaptor.addChild(root_0, SEMICOLON147_tree);


                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:318:49: COLON
                    {
                    COLON148=(Token)match(input,COLON,FOLLOW_COLON_in_variable_init1492); 
                    COLON148_tree = 
                    (Object)adaptor.create(COLON148)
                    ;
                    adaptor.addChild(root_0, COLON148_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init"


    public static class known_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_type_started"
    // Objcm.g:320:1: known_type_started : known_types ( ASTERISK )* full_expr2 ;
    public final ObjcmParser.known_type_started_return known_type_started() throws RecognitionException {
        ObjcmParser.known_type_started_return retval = new ObjcmParser.known_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK150=null;
        ObjcmParser.known_types_return known_types149 =null;

        ObjcmParser.full_expr2_return full_expr2151 =null;


        Object ASTERISK150_tree=null;

        try {
            // Objcm.g:321:2: ( known_types ( ASTERISK )* full_expr2 )
            // Objcm.g:321:4: known_types ( ASTERISK )* full_expr2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_known_types_in_known_type_started1504);
            known_types149=known_types();

            state._fsp--;

            adaptor.addChild(root_0, known_types149.getTree());

            // Objcm.g:321:16: ( ASTERISK )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==ASTERISK) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // Objcm.g:321:16: ASTERISK
            	    {
            	    ASTERISK150=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_known_type_started1506); 
            	    ASTERISK150_tree = 
            	    (Object)adaptor.create(ASTERISK150)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK150_tree);


            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);


            pushFollow(FOLLOW_full_expr2_in_known_type_started1509);
            full_expr2151=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2151.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_type_started"


    public static class typeof_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof_started"
    // Objcm.g:323:1: typeof_started : typeof full_expr_wrapper ;
    public final ObjcmParser.typeof_started_return typeof_started() throws RecognitionException {
        ObjcmParser.typeof_started_return retval = new ObjcmParser.typeof_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typeof_return typeof152 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper153 =null;



        try {
            // Objcm.g:324:2: ( typeof full_expr_wrapper )
            // Objcm.g:324:4: typeof full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typeof_in_typeof_started1521);
            typeof152=typeof();

            state._fsp--;

            adaptor.addChild(root_0, typeof152.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_typeof_started1523);
            full_expr_wrapper153=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper153.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof_started"


    public static class struct_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_variable"
    // Objcm.g:327:1: struct_variable : STRUCT_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )* ;
    public final ObjcmParser.struct_variable_return struct_variable() throws RecognitionException {
        ObjcmParser.struct_variable_return retval = new ObjcmParser.struct_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX154=null;
        Token COMMA157=null;
        ObjcmParser.name_return name155 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper156 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper158 =null;


        Object STRUCT_PREFIX154_tree=null;
        Object COMMA157_tree=null;

        try {
            // Objcm.g:328:2: ( STRUCT_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )* )
            // Objcm.g:328:4: STRUCT_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX154=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_variable1536); 
            STRUCT_PREFIX154_tree = 
            (Object)adaptor.create(STRUCT_PREFIX154)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX154_tree);


            pushFollow(FOLLOW_name_in_struct_variable1538);
            name155=name();

            state._fsp--;

            adaptor.addChild(root_0, name155.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_struct_variable1540);
            full_expr_wrapper156=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper156.getTree());

            // Objcm.g:328:41: ( COMMA full_expr_wrapper )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==COMMA) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // Objcm.g:328:42: COMMA full_expr_wrapper
            	    {
            	    COMMA157=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_variable1543); 
            	    COMMA157_tree = 
            	    (Object)adaptor.create(COMMA157)
            	    ;
            	    adaptor.addChild(root_0, COMMA157_tree);


            	    pushFollow(FOLLOW_full_expr_wrapper_in_struct_variable1545);
            	    full_expr_wrapper158=full_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, full_expr_wrapper158.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_variable"


    public static class enum_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_variable"
    // Objcm.g:330:1: enum_variable : ENUM_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )* ;
    public final ObjcmParser.enum_variable_return enum_variable() throws RecognitionException {
        ObjcmParser.enum_variable_return retval = new ObjcmParser.enum_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX159=null;
        Token COMMA162=null;
        ObjcmParser.name_return name160 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper161 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper163 =null;


        Object ENUM_PREFIX159_tree=null;
        Object COMMA162_tree=null;

        try {
            // Objcm.g:331:2: ( ENUM_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )* )
            // Objcm.g:331:4: ENUM_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX159=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_enum_variable1556); 
            ENUM_PREFIX159_tree = 
            (Object)adaptor.create(ENUM_PREFIX159)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX159_tree);


            pushFollow(FOLLOW_name_in_enum_variable1558);
            name160=name();

            state._fsp--;

            adaptor.addChild(root_0, name160.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_enum_variable1560);
            full_expr_wrapper161=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper161.getTree());

            // Objcm.g:331:39: ( COMMA full_expr_wrapper )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==COMMA) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // Objcm.g:331:40: COMMA full_expr_wrapper
            	    {
            	    COMMA162=(Token)match(input,COMMA,FOLLOW_COMMA_in_enum_variable1563); 
            	    COMMA162_tree = 
            	    (Object)adaptor.create(COMMA162)
            	    ;
            	    adaptor.addChild(root_0, COMMA162_tree);


            	    pushFollow(FOLLOW_full_expr_wrapper_in_enum_variable1565);
            	    full_expr_wrapper163=full_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, full_expr_wrapper163.getTree());

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_variable"


    public static class const_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expression"
    // Objcm.g:333:1: const_expression : CONST_PREFIX type_internal full_expr_wrapper ;
    public final ObjcmParser.const_expression_return const_expression() throws RecognitionException {
        ObjcmParser.const_expression_return retval = new ObjcmParser.const_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX164=null;
        ObjcmParser.type_internal_return type_internal165 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper166 =null;


        Object CONST_PREFIX164_tree=null;

        try {
            // Objcm.g:334:2: ( CONST_PREFIX type_internal full_expr_wrapper )
            // Objcm.g:334:4: CONST_PREFIX type_internal full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            CONST_PREFIX164=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_const_expression1578); 
            CONST_PREFIX164_tree = 
            (Object)adaptor.create(CONST_PREFIX164)
            ;
            adaptor.addChild(root_0, CONST_PREFIX164_tree);


            pushFollow(FOLLOW_type_internal_in_const_expression1580);
            type_internal165=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal165.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_const_expression1582);
            full_expr_wrapper166=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper166.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expression"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // Objcm.g:336:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcmParser.throw_stmt_wrapper_return retval = new ObjcmParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.throw_stmt_return throw_stmt167 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // Objcm.g:337:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // Objcm.g:337:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper1591);
            throw_stmt167=throw_stmt();

            state._fsp--;

            stream_throw_stmt.add(throw_stmt167.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 337:15: -> ^( THROW_STMT throw_stmt )
            {
                // Objcm.g:337:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // Objcm.g:339:1: throw_stmt : '@throw' SEMICOLON ;
    public final ObjcmParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcmParser.throw_stmt_return retval = new ObjcmParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal168=null;
        Token SEMICOLON169=null;

        Object string_literal168_tree=null;
        Object SEMICOLON169_tree=null;

        try {
            // Objcm.g:340:2: ( '@throw' SEMICOLON )
            // Objcm.g:340:4: '@throw' SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal168=(Token)match(input,177,FOLLOW_177_in_throw_stmt1608); 
            string_literal168_tree = 
            (Object)adaptor.create(string_literal168)
            ;
            adaptor.addChild(root_0, string_literal168_tree);


            SEMICOLON169=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_throw_stmt1611); 
            SEMICOLON169_tree = 
            (Object)adaptor.create(SEMICOLON169)
            ;
            adaptor.addChild(root_0, SEMICOLON169_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class try_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt"
    // Objcm.g:343:1: try_stmt : '@try' block ( catch_stmt )* ( '@finally' block )? ;
    public final ObjcmParser.try_stmt_return try_stmt() throws RecognitionException {
        ObjcmParser.try_stmt_return retval = new ObjcmParser.try_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal170=null;
        Token string_literal173=null;
        ObjcmParser.block_return block171 =null;

        ObjcmParser.catch_stmt_return catch_stmt172 =null;

        ObjcmParser.block_return block174 =null;


        Object string_literal170_tree=null;
        Object string_literal173_tree=null;

        try {
            // Objcm.g:343:9: ( '@try' block ( catch_stmt )* ( '@finally' block )? )
            // Objcm.g:343:11: '@try' block ( catch_stmt )* ( '@finally' block )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal170=(Token)match(input,178,FOLLOW_178_in_try_stmt1622); 
            string_literal170_tree = 
            (Object)adaptor.create(string_literal170)
            ;
            adaptor.addChild(root_0, string_literal170_tree);


            pushFollow(FOLLOW_block_in_try_stmt1625);
            block171=block();

            state._fsp--;

            adaptor.addChild(root_0, block171.getTree());

            // Objcm.g:343:26: ( catch_stmt )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==165) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // Objcm.g:343:26: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt1628);
            	    catch_stmt172=catch_stmt();

            	    state._fsp--;

            	    adaptor.addChild(root_0, catch_stmt172.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            // Objcm.g:343:38: ( '@finally' block )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==168) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // Objcm.g:343:39: '@finally' block
                    {
                    string_literal173=(Token)match(input,168,FOLLOW_168_in_try_stmt1632); 
                    string_literal173_tree = 
                    (Object)adaptor.create(string_literal173)
                    ;
                    adaptor.addChild(root_0, string_literal173_tree);


                    pushFollow(FOLLOW_block_in_try_stmt1635);
                    block174=block();

                    state._fsp--;

                    adaptor.addChild(root_0, block174.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // Objcm.g:346:1: catch_stmt : '@catch' L_BR ( ( ID ( ASTERISK )* ID ) | '...' ) R_BR block ;
    public final ObjcmParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcmParser.catch_stmt_return retval = new ObjcmParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal175=null;
        Token L_BR176=null;
        Token ID177=null;
        Token ASTERISK178=null;
        Token ID179=null;
        Token string_literal180=null;
        Token R_BR181=null;
        ObjcmParser.block_return block182 =null;


        Object string_literal175_tree=null;
        Object L_BR176_tree=null;
        Object ID177_tree=null;
        Object ASTERISK178_tree=null;
        Object ID179_tree=null;
        Object string_literal180_tree=null;
        Object R_BR181_tree=null;

        try {
            // Objcm.g:347:2: ( '@catch' L_BR ( ( ID ( ASTERISK )* ID ) | '...' ) R_BR block )
            // Objcm.g:347:4: '@catch' L_BR ( ( ID ( ASTERISK )* ID ) | '...' ) R_BR block
            {
            root_0 = (Object)adaptor.nil();


            string_literal175=(Token)match(input,165,FOLLOW_165_in_catch_stmt1649); 
            string_literal175_tree = 
            (Object)adaptor.create(string_literal175)
            ;
            adaptor.addChild(root_0, string_literal175_tree);


            L_BR176=(Token)match(input,L_BR,FOLLOW_L_BR_in_catch_stmt1652); 
            L_BR176_tree = 
            (Object)adaptor.create(L_BR176)
            ;
            adaptor.addChild(root_0, L_BR176_tree);


            // Objcm.g:347:20: ( ( ID ( ASTERISK )* ID ) | '...' )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==ID) ) {
                alt39=1;
            }
            else if ( (LA39_0==164) ) {
                alt39=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }
            switch (alt39) {
                case 1 :
                    // Objcm.g:347:21: ( ID ( ASTERISK )* ID )
                    {
                    // Objcm.g:347:21: ( ID ( ASTERISK )* ID )
                    // Objcm.g:347:22: ID ( ASTERISK )* ID
                    {
                    ID177=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1657); 
                    ID177_tree = 
                    (Object)adaptor.create(ID177)
                    ;
                    adaptor.addChild(root_0, ID177_tree);


                    // Objcm.g:347:26: ( ASTERISK )*
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( (LA38_0==ASTERISK) ) {
                            alt38=1;
                        }


                        switch (alt38) {
                    	case 1 :
                    	    // Objcm.g:347:26: ASTERISK
                    	    {
                    	    ASTERISK178=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_catch_stmt1660); 
                    	    ASTERISK178_tree = 
                    	    (Object)adaptor.create(ASTERISK178)
                    	    ;
                    	    adaptor.addChild(root_0, ASTERISK178_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);


                    ID179=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1663); 
                    ID179_tree = 
                    (Object)adaptor.create(ID179)
                    ;
                    adaptor.addChild(root_0, ID179_tree);


                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:347:42: '...'
                    {
                    string_literal180=(Token)match(input,164,FOLLOW_164_in_catch_stmt1668); 
                    string_literal180_tree = 
                    (Object)adaptor.create(string_literal180)
                    ;
                    adaptor.addChild(root_0, string_literal180_tree);


                    }
                    break;

            }


            R_BR181=(Token)match(input,R_BR,FOLLOW_R_BR_in_catch_stmt1672); 
            R_BR181_tree = 
            (Object)adaptor.create(R_BR181)
            ;
            adaptor.addChild(root_0, R_BR181_tree);


            pushFollow(FOLLOW_block_in_catch_stmt1675);
            block182=block();

            state._fsp--;

            adaptor.addChild(root_0, block182.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class switch_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt_wrapper"
    // Objcm.g:350:1: switch_stmt_wrapper : switch_stmt -> ^( SWITCH switch_stmt ) ;
    public final ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper() throws RecognitionException {
        ObjcmParser.switch_stmt_wrapper_return retval = new ObjcmParser.switch_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.switch_stmt_return switch_stmt183 =null;


        RewriteRuleSubtreeStream stream_switch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule switch_stmt");
        try {
            // Objcm.g:351:2: ( switch_stmt -> ^( SWITCH switch_stmt ) )
            // Objcm.g:351:4: switch_stmt
            {
            pushFollow(FOLLOW_switch_stmt_in_switch_stmt_wrapper1688);
            switch_stmt183=switch_stmt();

            state._fsp--;

            stream_switch_stmt.add(switch_stmt183.getTree());

            // AST REWRITE
            // elements: switch_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 351:16: -> ^( SWITCH switch_stmt )
            {
                // Objcm.g:351:19: ^( SWITCH switch_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH, "SWITCH")
                , root_1);

                adaptor.addChild(root_1, stream_switch_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt_wrapper"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // Objcm.g:353:1: switch_stmt : 'switch' L_BR switch_expr R_BR switch_body_wrapper ;
    public final ObjcmParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcmParser.switch_stmt_return retval = new ObjcmParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal184=null;
        Token L_BR185=null;
        Token R_BR187=null;
        ObjcmParser.switch_expr_return switch_expr186 =null;

        ObjcmParser.switch_body_wrapper_return switch_body_wrapper188 =null;


        Object string_literal184_tree=null;
        Object L_BR185_tree=null;
        Object R_BR187_tree=null;

        try {
            // Objcm.g:354:2: ( 'switch' L_BR switch_expr R_BR switch_body_wrapper )
            // Objcm.g:354:4: 'switch' L_BR switch_expr R_BR switch_body_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal184=(Token)match(input,198,FOLLOW_198_in_switch_stmt1705); 
            string_literal184_tree = 
            (Object)adaptor.create(string_literal184)
            ;
            adaptor.addChild(root_0, string_literal184_tree);


            L_BR185=(Token)match(input,L_BR,FOLLOW_L_BR_in_switch_stmt1708); 
            L_BR185_tree = 
            (Object)adaptor.create(L_BR185)
            ;
            adaptor.addChild(root_0, L_BR185_tree);


            pushFollow(FOLLOW_switch_expr_in_switch_stmt1711);
            switch_expr186=switch_expr();

            state._fsp--;

            adaptor.addChild(root_0, switch_expr186.getTree());

            R_BR187=(Token)match(input,R_BR,FOLLOW_R_BR_in_switch_stmt1713); 
            R_BR187_tree = 
            (Object)adaptor.create(R_BR187)
            ;
            adaptor.addChild(root_0, R_BR187_tree);


            pushFollow(FOLLOW_switch_body_wrapper_in_switch_stmt1719);
            switch_body_wrapper188=switch_body_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, switch_body_wrapper188.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body_wrapper"
    // Objcm.g:358:1: switch_body_wrapper : L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) ;
    public final ObjcmParser.switch_body_wrapper_return switch_body_wrapper() throws RecognitionException {
        ObjcmParser.switch_body_wrapper_return retval = new ObjcmParser.switch_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR189=null;
        Token R_FBR191=null;
        ObjcmParser.switch_body_return switch_body190 =null;


        Object L_FBR189_tree=null;
        Object R_FBR191_tree=null;
        RewriteRuleTokenStream stream_R_FBR=new RewriteRuleTokenStream(adaptor,"token R_FBR");
        RewriteRuleTokenStream stream_L_FBR=new RewriteRuleTokenStream(adaptor,"token L_FBR");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // Objcm.g:359:2: ( L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) )
            // Objcm.g:359:4: L_FBR switch_body R_FBR
            {
            L_FBR189=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_switch_body_wrapper1732);  
            stream_L_FBR.add(L_FBR189);


            pushFollow(FOLLOW_switch_body_in_switch_body_wrapper1734);
            switch_body190=switch_body();

            state._fsp--;

            stream_switch_body.add(switch_body190.getTree());

            R_FBR191=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_switch_body_wrapper1736);  
            stream_R_FBR.add(R_FBR191);


            // AST REWRITE
            // elements: switch_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 359:28: -> ^( SWITCH_BODY switch_body )
            {
                // Objcm.g:359:31: ^( SWITCH_BODY switch_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_BODY, "SWITCH_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_switch_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body_wrapper"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // Objcm.g:361:1: switch_body : ( block_internal_full )* ( switch_internal )* ;
    public final ObjcmParser.switch_body_return switch_body() throws RecognitionException {
        ObjcmParser.switch_body_return retval = new ObjcmParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_full_return block_internal_full192 =null;

        ObjcmParser.switch_internal_return switch_internal193 =null;



        try {
            // Objcm.g:362:2: ( ( block_internal_full )* ( switch_internal )* )
            // Objcm.g:362:4: ( block_internal_full )* ( switch_internal )*
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:362:4: ( block_internal_full )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==ASTERISK||LA40_0==BREAK_WORD||LA40_0==CONST_PREFIX||LA40_0==ENUM_PREFIX||LA40_0==ID||LA40_0==L_AND||LA40_0==L_BR||LA40_0==L_KBR||LA40_0==L_MINUS||LA40_0==L_MINUS_MINUS||LA40_0==L_NOT||LA40_0==L_PLUS||LA40_0==L_PLUS_PLUS||LA40_0==L_TILDA||LA40_0==NUMBER||LA40_0==SEMICOLON||(LA40_0 >= SINGLE_OP && LA40_0 <= SIZEOF)||LA40_0==STATIC_PREFIX||(LA40_0 >= STRING_LITERAL && LA40_0 <= STRING_LITERAL3)||LA40_0==STRUCT_PREFIX||LA40_0==VOID||LA40_0==166||LA40_0==173||LA40_0==175||(LA40_0 >= 177 && LA40_0 <= 179)||(LA40_0 >= 181 && LA40_0 <= 182)||LA40_0==185||(LA40_0 >= 187 && LA40_0 <= 193)||(LA40_0 >= 195 && LA40_0 <= 198)||(LA40_0 >= 201 && LA40_0 <= 202)) ) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // Objcm.g:362:4: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_switch_body1755);
            	    block_internal_full192=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full192.getTree());

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);


            // Objcm.g:363:3: ( switch_internal )*
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==183||LA41_0==186) ) {
                    alt41=1;
                }


                switch (alt41) {
            	case 1 :
            	    // Objcm.g:363:3: switch_internal
            	    {
            	    pushFollow(FOLLOW_switch_internal_in_switch_body1760);
            	    switch_internal193=switch_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, switch_internal193.getTree());

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class switch_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_expr"
    // Objcm.g:366:1: switch_expr : classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) ;
    public final ObjcmParser.switch_expr_return switch_expr() throws RecognitionException {
        ObjcmParser.switch_expr_return retval = new ObjcmParser.switch_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp194 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:367:2: ( classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) )
            // Objcm.g:367:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_switch_expr1773);
            classical_expr_wrp194=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp194.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:23: -> ^( SWITCH_EXPRESSION classical_expr_wrp )
            {
                // Objcm.g:367:26: ^( SWITCH_EXPRESSION classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_EXPRESSION, "SWITCH_EXPRESSION")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_expr"


    public static class switch_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_internal"
    // Objcm.g:369:1: switch_internal : ( case_stmt_wrapper | default_stmt_wrapper );
    public final ObjcmParser.switch_internal_return switch_internal() throws RecognitionException {
        ObjcmParser.switch_internal_return retval = new ObjcmParser.switch_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper195 =null;

        ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper196 =null;



        try {
            // Objcm.g:370:2: ( case_stmt_wrapper | default_stmt_wrapper )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==183) ) {
                alt42=1;
            }
            else if ( (LA42_0==186) ) {
                alt42=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }
            switch (alt42) {
                case 1 :
                    // Objcm.g:370:4: case_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_wrapper_in_switch_internal1790);
                    case_stmt_wrapper195=case_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_stmt_wrapper195.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:371:5: default_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_wrapper_in_switch_internal1796);
                    default_stmt_wrapper196=default_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt_wrapper196.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_internal"


    public static class case_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt_wrapper"
    // Objcm.g:373:1: case_stmt_wrapper : case_stmt -> ^( CASE_STMT case_stmt ) ;
    public final ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper() throws RecognitionException {
        ObjcmParser.case_stmt_wrapper_return retval = new ObjcmParser.case_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_return case_stmt197 =null;


        RewriteRuleSubtreeStream stream_case_stmt=new RewriteRuleSubtreeStream(adaptor,"rule case_stmt");
        try {
            // Objcm.g:374:2: ( case_stmt -> ^( CASE_STMT case_stmt ) )
            // Objcm.g:374:4: case_stmt
            {
            pushFollow(FOLLOW_case_stmt_in_case_stmt_wrapper1805);
            case_stmt197=case_stmt();

            state._fsp--;

            stream_case_stmt.add(case_stmt197.getTree());

            // AST REWRITE
            // elements: case_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 374:14: -> ^( CASE_STMT case_stmt )
            {
                // Objcm.g:374:17: ^( CASE_STMT case_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_case_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt_wrapper"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // Objcm.g:376:1: case_stmt : 'case' case_expr_wrapper COLON ( case_body_wrapper )? ;
    public final ObjcmParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcmParser.case_stmt_return retval = new ObjcmParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal198=null;
        Token COLON200=null;
        ObjcmParser.case_expr_wrapper_return case_expr_wrapper199 =null;

        ObjcmParser.case_body_wrapper_return case_body_wrapper201 =null;


        Object string_literal198_tree=null;
        Object COLON200_tree=null;

        try {
            // Objcm.g:377:2: ( 'case' case_expr_wrapper COLON ( case_body_wrapper )? )
            // Objcm.g:377:4: 'case' case_expr_wrapper COLON ( case_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal198=(Token)match(input,183,FOLLOW_183_in_case_stmt1822); 
            string_literal198_tree = 
            (Object)adaptor.create(string_literal198)
            ;
            adaptor.addChild(root_0, string_literal198_tree);


            pushFollow(FOLLOW_case_expr_wrapper_in_case_stmt1825);
            case_expr_wrapper199=case_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, case_expr_wrapper199.getTree());

            COLON200=(Token)match(input,COLON,FOLLOW_COLON_in_case_stmt1828); 
            COLON200_tree = 
            (Object)adaptor.create(COLON200)
            ;
            adaptor.addChild(root_0, COLON200_tree);


            // Objcm.g:378:3: ( case_body_wrapper )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==ASTERISK||LA43_0==BREAK_WORD||LA43_0==CONST_PREFIX||LA43_0==ENUM_PREFIX||LA43_0==ID||LA43_0==L_AND||LA43_0==L_BR||(LA43_0 >= L_FBR && LA43_0 <= L_KBR)||LA43_0==L_MINUS||LA43_0==L_MINUS_MINUS||LA43_0==L_NOT||LA43_0==L_PLUS||LA43_0==L_PLUS_PLUS||LA43_0==L_TILDA||LA43_0==NUMBER||LA43_0==SEMICOLON||(LA43_0 >= SINGLE_OP && LA43_0 <= SIZEOF)||LA43_0==STATIC_PREFIX||(LA43_0 >= STRING_LITERAL && LA43_0 <= STRING_LITERAL3)||LA43_0==STRUCT_PREFIX||LA43_0==VOID||LA43_0==166||LA43_0==173||LA43_0==175||(LA43_0 >= 177 && LA43_0 <= 179)||(LA43_0 >= 181 && LA43_0 <= 182)||LA43_0==185||(LA43_0 >= 187 && LA43_0 <= 193)||(LA43_0 >= 195 && LA43_0 <= 198)||(LA43_0 >= 201 && LA43_0 <= 202)) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // Objcm.g:378:3: case_body_wrapper
                    {
                    pushFollow(FOLLOW_case_body_wrapper_in_case_stmt1833);
                    case_body_wrapper201=case_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_body_wrapper201.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class case_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body_wrapper"
    // Objcm.g:381:1: case_body_wrapper : case_body -> ^( CASE_BODY case_body ) ;
    public final ObjcmParser.case_body_wrapper_return case_body_wrapper() throws RecognitionException {
        ObjcmParser.case_body_wrapper_return retval = new ObjcmParser.case_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_body_return case_body202 =null;


        RewriteRuleSubtreeStream stream_case_body=new RewriteRuleSubtreeStream(adaptor,"rule case_body");
        try {
            // Objcm.g:382:2: ( case_body -> ^( CASE_BODY case_body ) )
            // Objcm.g:382:4: case_body
            {
            pushFollow(FOLLOW_case_body_in_case_body_wrapper1847);
            case_body202=case_body();

            state._fsp--;

            stream_case_body.add(case_body202.getTree());

            // AST REWRITE
            // elements: case_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 382:14: -> ^( CASE_BODY case_body )
            {
                // Objcm.g:382:17: ^( CASE_BODY case_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_BODY, "CASE_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_case_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body_wrapper"


    public static class case_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body"
    // Objcm.g:384:1: case_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.case_body_return case_body() throws RecognitionException {
        ObjcmParser.case_body_return retval = new ObjcmParser.case_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break203 =null;

        ObjcmParser.block_internal_full_return block_internal_full204 =null;



        try {
            // Objcm.g:385:2: ( block_break | ( block_internal_full )+ )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==L_FBR) ) {
                alt45=1;
            }
            else if ( (LA45_0==ASTERISK||LA45_0==BREAK_WORD||LA45_0==CONST_PREFIX||LA45_0==ENUM_PREFIX||LA45_0==ID||LA45_0==L_AND||LA45_0==L_BR||LA45_0==L_KBR||LA45_0==L_MINUS||LA45_0==L_MINUS_MINUS||LA45_0==L_NOT||LA45_0==L_PLUS||LA45_0==L_PLUS_PLUS||LA45_0==L_TILDA||LA45_0==NUMBER||LA45_0==SEMICOLON||(LA45_0 >= SINGLE_OP && LA45_0 <= SIZEOF)||LA45_0==STATIC_PREFIX||(LA45_0 >= STRING_LITERAL && LA45_0 <= STRING_LITERAL3)||LA45_0==STRUCT_PREFIX||LA45_0==VOID||LA45_0==166||LA45_0==173||LA45_0==175||(LA45_0 >= 177 && LA45_0 <= 179)||(LA45_0 >= 181 && LA45_0 <= 182)||LA45_0==185||(LA45_0 >= 187 && LA45_0 <= 193)||(LA45_0 >= 195 && LA45_0 <= 198)||(LA45_0 >= 201 && LA45_0 <= 202)) ) {
                alt45=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }
            switch (alt45) {
                case 1 :
                    // Objcm.g:385:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_case_body1866);
                    block_break203=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break203.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:386:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:386:5: ( block_internal_full )+
                    int cnt44=0;
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==ASTERISK||LA44_0==BREAK_WORD||LA44_0==CONST_PREFIX||LA44_0==ENUM_PREFIX||LA44_0==ID||LA44_0==L_AND||LA44_0==L_BR||LA44_0==L_KBR||LA44_0==L_MINUS||LA44_0==L_MINUS_MINUS||LA44_0==L_NOT||LA44_0==L_PLUS||LA44_0==L_PLUS_PLUS||LA44_0==L_TILDA||LA44_0==NUMBER||LA44_0==SEMICOLON||(LA44_0 >= SINGLE_OP && LA44_0 <= SIZEOF)||LA44_0==STATIC_PREFIX||(LA44_0 >= STRING_LITERAL && LA44_0 <= STRING_LITERAL3)||LA44_0==STRUCT_PREFIX||LA44_0==VOID||LA44_0==166||LA44_0==173||LA44_0==175||(LA44_0 >= 177 && LA44_0 <= 179)||(LA44_0 >= 181 && LA44_0 <= 182)||LA44_0==185||(LA44_0 >= 187 && LA44_0 <= 193)||(LA44_0 >= 195 && LA44_0 <= 198)||(LA44_0 >= 201 && LA44_0 <= 202)) ) {
                            alt44=1;
                        }


                        switch (alt44) {
                    	case 1 :
                    	    // Objcm.g:386:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_case_body1873);
                    	    block_internal_full204=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full204.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt44 >= 1 ) break loop44;
                                EarlyExitException eee =
                                    new EarlyExitException(44, input);
                                throw eee;
                        }
                        cnt44++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body"


    public static class case_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr_wrapper"
    // Objcm.g:389:1: case_expr_wrapper : case_expr -> ^( CASE_EXPR case_expr ) ;
    public final ObjcmParser.case_expr_wrapper_return case_expr_wrapper() throws RecognitionException {
        ObjcmParser.case_expr_wrapper_return retval = new ObjcmParser.case_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_expr_return case_expr205 =null;


        RewriteRuleSubtreeStream stream_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule case_expr");
        try {
            // Objcm.g:390:2: ( case_expr -> ^( CASE_EXPR case_expr ) )
            // Objcm.g:390:4: case_expr
            {
            pushFollow(FOLLOW_case_expr_in_case_expr_wrapper1889);
            case_expr205=case_expr();

            state._fsp--;

            stream_case_expr.add(case_expr205.getTree());

            // AST REWRITE
            // elements: case_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 390:14: -> ^( CASE_EXPR case_expr )
            {
                // Objcm.g:390:17: ^( CASE_EXPR case_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_EXPR, "CASE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_case_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr_wrapper"


    public static class case_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr"
    // Objcm.g:392:1: case_expr : ( const_expr | ID );
    public final ObjcmParser.case_expr_return case_expr() throws RecognitionException {
        ObjcmParser.case_expr_return retval = new ObjcmParser.case_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID207=null;
        ObjcmParser.const_expr_return const_expr206 =null;


        Object ID207_tree=null;

        try {
            // Objcm.g:393:2: ( const_expr | ID )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==NUMBER||(LA46_0 >= STRING_LITERAL && LA46_0 <= STRING_LITERAL3)||LA46_0==179||LA46_0==195) ) {
                alt46=1;
            }
            else if ( (LA46_0==ID) ) {
                alt46=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // Objcm.g:393:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_case_expr1911);
                    const_expr206=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr206.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:394:5: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID207=(Token)match(input,ID,FOLLOW_ID_in_case_expr1918); 
                    ID207_tree = 
                    (Object)adaptor.create(ID207)
                    ;
                    adaptor.addChild(root_0, ID207_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr"


    public static class block_break_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_break"
    // Objcm.g:396:1: block_break : block_case ( single_operators )? ;
    public final ObjcmParser.block_break_return block_break() throws RecognitionException {
        ObjcmParser.block_break_return retval = new ObjcmParser.block_break_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_case_return block_case208 =null;

        ObjcmParser.single_operators_return single_operators209 =null;



        try {
            // Objcm.g:397:2: ( block_case ( single_operators )? )
            // Objcm.g:397:4: block_case ( single_operators )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_case_in_block_break1929);
            block_case208=block_case();

            state._fsp--;

            adaptor.addChild(root_0, block_case208.getTree());

            // Objcm.g:397:15: ( single_operators )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==BREAK_WORD||LA47_0==SINGLE_OP) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // Objcm.g:397:15: single_operators
                    {
                    pushFollow(FOLLOW_single_operators_in_block_break1931);
                    single_operators209=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators209.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_break"


    public static class default_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt_wrapper"
    // Objcm.g:400:1: default_stmt_wrapper : default_stmt -> ^( DEFAULT_STMT default_stmt ) ;
    public final ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper() throws RecognitionException {
        ObjcmParser.default_stmt_wrapper_return retval = new ObjcmParser.default_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_stmt_return default_stmt210 =null;


        RewriteRuleSubtreeStream stream_default_stmt=new RewriteRuleSubtreeStream(adaptor,"rule default_stmt");
        try {
            // Objcm.g:401:2: ( default_stmt -> ^( DEFAULT_STMT default_stmt ) )
            // Objcm.g:401:4: default_stmt
            {
            pushFollow(FOLLOW_default_stmt_in_default_stmt_wrapper1943);
            default_stmt210=default_stmt();

            state._fsp--;

            stream_default_stmt.add(default_stmt210.getTree());

            // AST REWRITE
            // elements: default_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 401:17: -> ^( DEFAULT_STMT default_stmt )
            {
                // Objcm.g:401:20: ^( DEFAULT_STMT default_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_default_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt_wrapper"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // Objcm.g:403:1: default_stmt : 'default' COLON ( default_body_wrapper )? ;
    public final ObjcmParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcmParser.default_stmt_return retval = new ObjcmParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal211=null;
        Token COLON212=null;
        ObjcmParser.default_body_wrapper_return default_body_wrapper213 =null;


        Object string_literal211_tree=null;
        Object COLON212_tree=null;

        try {
            // Objcm.g:404:2: ( 'default' COLON ( default_body_wrapper )? )
            // Objcm.g:404:4: 'default' COLON ( default_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal211=(Token)match(input,186,FOLLOW_186_in_default_stmt1960); 
            string_literal211_tree = 
            (Object)adaptor.create(string_literal211)
            ;
            adaptor.addChild(root_0, string_literal211_tree);


            COLON212=(Token)match(input,COLON,FOLLOW_COLON_in_default_stmt1963); 
            COLON212_tree = 
            (Object)adaptor.create(COLON212)
            ;
            adaptor.addChild(root_0, COLON212_tree);


            // Objcm.g:405:3: ( default_body_wrapper )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==ASTERISK||LA48_0==BREAK_WORD||LA48_0==CONST_PREFIX||LA48_0==ENUM_PREFIX||LA48_0==ID||LA48_0==L_AND||LA48_0==L_BR||(LA48_0 >= L_FBR && LA48_0 <= L_KBR)||LA48_0==L_MINUS||LA48_0==L_MINUS_MINUS||LA48_0==L_NOT||LA48_0==L_PLUS||LA48_0==L_PLUS_PLUS||LA48_0==L_TILDA||LA48_0==NUMBER||LA48_0==SEMICOLON||(LA48_0 >= SINGLE_OP && LA48_0 <= SIZEOF)||LA48_0==STATIC_PREFIX||(LA48_0 >= STRING_LITERAL && LA48_0 <= STRING_LITERAL3)||LA48_0==STRUCT_PREFIX||LA48_0==VOID||LA48_0==166||LA48_0==173||LA48_0==175||(LA48_0 >= 177 && LA48_0 <= 179)||(LA48_0 >= 181 && LA48_0 <= 182)||LA48_0==185||(LA48_0 >= 187 && LA48_0 <= 193)||(LA48_0 >= 195 && LA48_0 <= 198)||(LA48_0 >= 201 && LA48_0 <= 202)) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // Objcm.g:405:3: default_body_wrapper
                    {
                    pushFollow(FOLLOW_default_body_wrapper_in_default_stmt1968);
                    default_body_wrapper213=default_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_body_wrapper213.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class default_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body_wrapper"
    // Objcm.g:408:1: default_body_wrapper : default_body -> ^( DEFAULT_BODY default_body ) ;
    public final ObjcmParser.default_body_wrapper_return default_body_wrapper() throws RecognitionException {
        ObjcmParser.default_body_wrapper_return retval = new ObjcmParser.default_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_body_return default_body214 =null;


        RewriteRuleSubtreeStream stream_default_body=new RewriteRuleSubtreeStream(adaptor,"rule default_body");
        try {
            // Objcm.g:409:2: ( default_body -> ^( DEFAULT_BODY default_body ) )
            // Objcm.g:409:4: default_body
            {
            pushFollow(FOLLOW_default_body_in_default_body_wrapper1981);
            default_body214=default_body();

            state._fsp--;

            stream_default_body.add(default_body214.getTree());

            // AST REWRITE
            // elements: default_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 409:17: -> ^( DEFAULT_BODY default_body )
            {
                // Objcm.g:409:20: ^( DEFAULT_BODY default_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_BODY, "DEFAULT_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_default_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body_wrapper"


    public static class default_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body"
    // Objcm.g:412:1: default_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.default_body_return default_body() throws RecognitionException {
        ObjcmParser.default_body_return retval = new ObjcmParser.default_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break215 =null;

        ObjcmParser.block_internal_full_return block_internal_full216 =null;



        try {
            // Objcm.g:413:2: ( block_break | ( block_internal_full )+ )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==L_FBR) ) {
                alt50=1;
            }
            else if ( (LA50_0==ASTERISK||LA50_0==BREAK_WORD||LA50_0==CONST_PREFIX||LA50_0==ENUM_PREFIX||LA50_0==ID||LA50_0==L_AND||LA50_0==L_BR||LA50_0==L_KBR||LA50_0==L_MINUS||LA50_0==L_MINUS_MINUS||LA50_0==L_NOT||LA50_0==L_PLUS||LA50_0==L_PLUS_PLUS||LA50_0==L_TILDA||LA50_0==NUMBER||LA50_0==SEMICOLON||(LA50_0 >= SINGLE_OP && LA50_0 <= SIZEOF)||LA50_0==STATIC_PREFIX||(LA50_0 >= STRING_LITERAL && LA50_0 <= STRING_LITERAL3)||LA50_0==STRUCT_PREFIX||LA50_0==VOID||LA50_0==166||LA50_0==173||LA50_0==175||(LA50_0 >= 177 && LA50_0 <= 179)||(LA50_0 >= 181 && LA50_0 <= 182)||LA50_0==185||(LA50_0 >= 187 && LA50_0 <= 193)||(LA50_0 >= 195 && LA50_0 <= 198)||(LA50_0 >= 201 && LA50_0 <= 202)) ) {
                alt50=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;

            }
            switch (alt50) {
                case 1 :
                    // Objcm.g:413:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_default_body2001);
                    block_break215=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break215.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:414:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:414:5: ( block_internal_full )+
                    int cnt49=0;
                    loop49:
                    do {
                        int alt49=2;
                        int LA49_0 = input.LA(1);

                        if ( (LA49_0==ASTERISK||LA49_0==BREAK_WORD||LA49_0==CONST_PREFIX||LA49_0==ENUM_PREFIX||LA49_0==ID||LA49_0==L_AND||LA49_0==L_BR||LA49_0==L_KBR||LA49_0==L_MINUS||LA49_0==L_MINUS_MINUS||LA49_0==L_NOT||LA49_0==L_PLUS||LA49_0==L_PLUS_PLUS||LA49_0==L_TILDA||LA49_0==NUMBER||LA49_0==SEMICOLON||(LA49_0 >= SINGLE_OP && LA49_0 <= SIZEOF)||LA49_0==STATIC_PREFIX||(LA49_0 >= STRING_LITERAL && LA49_0 <= STRING_LITERAL3)||LA49_0==STRUCT_PREFIX||LA49_0==VOID||LA49_0==166||LA49_0==173||LA49_0==175||(LA49_0 >= 177 && LA49_0 <= 179)||(LA49_0 >= 181 && LA49_0 <= 182)||LA49_0==185||(LA49_0 >= 187 && LA49_0 <= 193)||(LA49_0 >= 195 && LA49_0 <= 198)||(LA49_0 >= 201 && LA49_0 <= 202)) ) {
                            alt49=1;
                        }


                        switch (alt49) {
                    	case 1 :
                    	    // Objcm.g:414:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_default_body2007);
                    	    block_internal_full216=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full216.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt49 >= 1 ) break loop49;
                                EarlyExitException eee =
                                    new EarlyExitException(49, input);
                                throw eee;
                        }
                        cnt49++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body"


    public static class single_operators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_operators"
    // Objcm.g:417:1: single_operators : ( SINGLE_OP | break_wrapper );
    public final ObjcmParser.single_operators_return single_operators() throws RecognitionException {
        ObjcmParser.single_operators_return retval = new ObjcmParser.single_operators_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_OP217=null;
        ObjcmParser.break_wrapper_return break_wrapper218 =null;


        Object SINGLE_OP217_tree=null;

        try {
            // Objcm.g:418:2: ( SINGLE_OP | break_wrapper )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==SINGLE_OP) ) {
                alt51=1;
            }
            else if ( (LA51_0==BREAK_WORD) ) {
                alt51=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;

            }
            switch (alt51) {
                case 1 :
                    // Objcm.g:418:4: SINGLE_OP
                    {
                    root_0 = (Object)adaptor.nil();


                    SINGLE_OP217=(Token)match(input,SINGLE_OP,FOLLOW_SINGLE_OP_in_single_operators2022); 
                    SINGLE_OP217_tree = 
                    (Object)adaptor.create(SINGLE_OP217)
                    ;
                    adaptor.addChild(root_0, SINGLE_OP217_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:419:5: break_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_wrapper_in_single_operators2029);
                    break_wrapper218=break_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, break_wrapper218.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_operators"


    public static class break_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_wrapper"
    // Objcm.g:422:1: break_wrapper : break_stmt -> ^( BREAK break_stmt ) ;
    public final ObjcmParser.break_wrapper_return break_wrapper() throws RecognitionException {
        ObjcmParser.break_wrapper_return retval = new ObjcmParser.break_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.break_stmt_return break_stmt219 =null;


        RewriteRuleSubtreeStream stream_break_stmt=new RewriteRuleSubtreeStream(adaptor,"rule break_stmt");
        try {
            // Objcm.g:423:2: ( break_stmt -> ^( BREAK break_stmt ) )
            // Objcm.g:423:4: break_stmt
            {
            pushFollow(FOLLOW_break_stmt_in_break_wrapper2041);
            break_stmt219=break_stmt();

            state._fsp--;

            stream_break_stmt.add(break_stmt219.getTree());

            // AST REWRITE
            // elements: break_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 423:15: -> ^( BREAK break_stmt )
            {
                // Objcm.g:423:18: ^( BREAK break_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK, "BREAK")
                , root_1);

                adaptor.addChild(root_1, stream_break_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_wrapper"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // Objcm.g:425:1: break_stmt : BREAK_WORD SEMICOLON ;
    public final ObjcmParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcmParser.break_stmt_return retval = new ObjcmParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BREAK_WORD220=null;
        Token SEMICOLON221=null;

        Object BREAK_WORD220_tree=null;
        Object SEMICOLON221_tree=null;

        try {
            // Objcm.g:426:2: ( BREAK_WORD SEMICOLON )
            // Objcm.g:426:4: BREAK_WORD SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            BREAK_WORD220=(Token)match(input,BREAK_WORD,FOLLOW_BREAK_WORD_in_break_stmt2059); 
            BREAK_WORD220_tree = 
            (Object)adaptor.create(BREAK_WORD220)
            ;
            adaptor.addChild(root_0, BREAK_WORD220_tree);


            SEMICOLON221=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_break_stmt2062); 
            SEMICOLON221_tree = 
            (Object)adaptor.create(SEMICOLON221)
            ;
            adaptor.addChild(root_0, SEMICOLON221_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // Objcm.g:428:1: do_stmt : 'do' if_stmt_block 'while' L_BR expression R_BR ;
    public final ObjcmParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcmParser.do_stmt_return retval = new ObjcmParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal222=null;
        Token string_literal224=null;
        Token L_BR225=null;
        Token R_BR227=null;
        ObjcmParser.if_stmt_block_return if_stmt_block223 =null;

        ObjcmParser.expression_return expression226 =null;


        Object string_literal222_tree=null;
        Object string_literal224_tree=null;
        Object L_BR225_tree=null;
        Object R_BR227_tree=null;

        try {
            // Objcm.g:428:9: ( 'do' if_stmt_block 'while' L_BR expression R_BR )
            // Objcm.g:428:11: 'do' if_stmt_block 'while' L_BR expression R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal222=(Token)match(input,187,FOLLOW_187_in_do_stmt2072); 
            string_literal222_tree = 
            (Object)adaptor.create(string_literal222)
            ;
            adaptor.addChild(root_0, string_literal222_tree);


            pushFollow(FOLLOW_if_stmt_block_in_do_stmt2075);
            if_stmt_block223=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block223.getTree());

            string_literal224=(Token)match(input,202,FOLLOW_202_in_do_stmt2078); 
            string_literal224_tree = 
            (Object)adaptor.create(string_literal224)
            ;
            adaptor.addChild(root_0, string_literal224_tree);


            L_BR225=(Token)match(input,L_BR,FOLLOW_L_BR_in_do_stmt2081); 
            L_BR225_tree = 
            (Object)adaptor.create(L_BR225)
            ;
            adaptor.addChild(root_0, L_BR225_tree);


            pushFollow(FOLLOW_expression_in_do_stmt2084);
            expression226=expression();

            state._fsp--;

            adaptor.addChild(root_0, expression226.getTree());

            R_BR227=(Token)match(input,R_BR,FOLLOW_R_BR_in_do_stmt2086); 
            R_BR227_tree = 
            (Object)adaptor.create(R_BR227)
            ;
            adaptor.addChild(root_0, R_BR227_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // Objcm.g:430:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcmParser.while_stmt_wrapper_return retval = new ObjcmParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.while_stmt_return while_stmt228 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // Objcm.g:431:2: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // Objcm.g:431:4: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper2095);
            while_stmt228=while_stmt();

            state._fsp--;

            stream_while_stmt.add(while_stmt228.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 431:15: -> ^( WHILE_STMT while_stmt )
            {
                // Objcm.g:431:18: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // Objcm.g:434:1: while_stmt : 'while' L_BR while_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcmParser.while_stmt_return retval = new ObjcmParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal229=null;
        Token L_BR230=null;
        Token R_BR232=null;
        ObjcmParser.while_expr_return while_expr231 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper233 =null;


        Object string_literal229_tree=null;
        Object L_BR230_tree=null;
        Object R_BR232_tree=null;

        try {
            // Objcm.g:435:2: ( 'while' L_BR while_expr R_BR if_stmt_block_wrapper )
            // Objcm.g:435:4: 'while' L_BR while_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal229=(Token)match(input,202,FOLLOW_202_in_while_stmt2114); 
            string_literal229_tree = 
            (Object)adaptor.create(string_literal229)
            ;
            adaptor.addChild(root_0, string_literal229_tree);


            L_BR230=(Token)match(input,L_BR,FOLLOW_L_BR_in_while_stmt2117); 
            L_BR230_tree = 
            (Object)adaptor.create(L_BR230)
            ;
            adaptor.addChild(root_0, L_BR230_tree);


            pushFollow(FOLLOW_while_expr_in_while_stmt2120);
            while_expr231=while_expr();

            state._fsp--;

            adaptor.addChild(root_0, while_expr231.getTree());

            R_BR232=(Token)match(input,R_BR,FOLLOW_R_BR_in_while_stmt2122); 
            R_BR232_tree = 
            (Object)adaptor.create(R_BR232)
            ;
            adaptor.addChild(root_0, R_BR232_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_while_stmt2125);
            if_stmt_block_wrapper233=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper233.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class while_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_expr"
    // Objcm.g:437:1: while_expr : classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.while_expr_return while_expr() throws RecognitionException {
        ObjcmParser.while_expr_return retval = new ObjcmParser.while_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp234 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:438:2: ( classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) )
            // Objcm.g:438:5: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_while_expr2138);
            classical_expr_wrp234=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp234.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 438:24: -> ^( WHILE_EXPR classical_expr_wrp )
            {
                // Objcm.g:438:27: ^( WHILE_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_EXPR, "WHILE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_expr"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // Objcm.g:440:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcmParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcmParser.for_stmt_wrapper_return retval = new ObjcmParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.for_stmt_return for_stmt235 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // Objcm.g:441:2: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // Objcm.g:441:4: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper2157);
            for_stmt235=for_stmt();

            state._fsp--;

            stream_for_stmt.add(for_stmt235.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 441:13: -> ^( FOR_STMT for_stmt )
            {
                // Objcm.g:441:16: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // Objcm.g:443:1: for_stmt : 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block ;
    public final ObjcmParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcmParser.for_stmt_return retval = new ObjcmParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal236=null;
        Token L_BR237=null;
        Token R_BR239=null;
        ObjcmParser.for_stmt_expr_wrapper_return for_stmt_expr_wrapper238 =null;

        ObjcmParser.if_stmt_block_return if_stmt_block240 =null;


        Object string_literal236_tree=null;
        Object L_BR237_tree=null;
        Object R_BR239_tree=null;

        try {
            // Objcm.g:443:9: ( 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block )
            // Objcm.g:443:11: 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal236=(Token)match(input,190,FOLLOW_190_in_for_stmt2174); 
            string_literal236_tree = 
            (Object)adaptor.create(string_literal236)
            ;
            adaptor.addChild(root_0, string_literal236_tree);


            L_BR237=(Token)match(input,L_BR,FOLLOW_L_BR_in_for_stmt2177); 
            L_BR237_tree = 
            (Object)adaptor.create(L_BR237)
            ;
            adaptor.addChild(root_0, L_BR237_tree);


            pushFollow(FOLLOW_for_stmt_expr_wrapper_in_for_stmt2180);
            for_stmt_expr_wrapper238=for_stmt_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, for_stmt_expr_wrapper238.getTree());

            R_BR239=(Token)match(input,R_BR,FOLLOW_R_BR_in_for_stmt2182); 
            R_BR239_tree = 
            (Object)adaptor.create(R_BR239)
            ;
            adaptor.addChild(root_0, R_BR239_tree);


            pushFollow(FOLLOW_if_stmt_block_in_for_stmt2185);
            if_stmt_block240=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block240.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr_wrapper"
    // Objcm.g:446:1: for_stmt_expr_wrapper : for_stmt_expr -> ^( FOR_STMT_EXPR for_stmt_expr ) ;
    public final ObjcmParser.for_stmt_expr_wrapper_return for_stmt_expr_wrapper() throws RecognitionException {
        ObjcmParser.for_stmt_expr_wrapper_return retval = new ObjcmParser.for_stmt_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.for_stmt_expr_return for_stmt_expr241 =null;


        RewriteRuleSubtreeStream stream_for_stmt_expr=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt_expr");
        try {
            // Objcm.g:447:2: ( for_stmt_expr -> ^( FOR_STMT_EXPR for_stmt_expr ) )
            // Objcm.g:447:4: for_stmt_expr
            {
            pushFollow(FOLLOW_for_stmt_expr_in_for_stmt_expr_wrapper2197);
            for_stmt_expr241=for_stmt_expr();

            state._fsp--;

            stream_for_stmt_expr.add(for_stmt_expr241.getTree());

            // AST REWRITE
            // elements: for_stmt_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 447:18: -> ^( FOR_STMT_EXPR for_stmt_expr )
            {
                // Objcm.g:447:21: ^( FOR_STMT_EXPR for_stmt_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT_EXPR, "FOR_STMT_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr_wrapper"


    public static class for_stmt_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr"
    // Objcm.g:449:1: for_stmt_expr : ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 );
    public final ObjcmParser.for_stmt_expr_return for_stmt_expr() throws RecognitionException {
        ObjcmParser.for_stmt_expr_return retval = new ObjcmParser.for_stmt_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper242 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1243 =null;

        ObjcmParser.full_expr2_return full_expr2244 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1245 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2246 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2247 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2248 =null;



        try {
            // Objcm.g:450:2: ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 )
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==ASTERISK||LA54_0==ID||LA54_0==L_AND||LA54_0==L_BR||LA54_0==L_KBR||LA54_0==L_MINUS||LA54_0==L_MINUS_MINUS||LA54_0==L_NOT||LA54_0==L_PLUS||LA54_0==L_PLUS_PLUS||LA54_0==L_TILDA||LA54_0==NUMBER||LA54_0==SIZEOF||(LA54_0 >= STRING_LITERAL && LA54_0 <= STRING_LITERAL3)||LA54_0==166||LA54_0==173||LA54_0==175||LA54_0==179||LA54_0==182||LA54_0==185||LA54_0==193||(LA54_0 >= 195 && LA54_0 <= 196)||LA54_0==201) ) {
                alt54=1;
            }
            else if ( (LA54_0==SEMICOLON) ) {
                alt54=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }
            switch (alt54) {
                case 1 :
                    // Objcm.g:450:4: full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_full_expr_wrapper_in_for_stmt_expr2216);
                    full_expr_wrapper242=full_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, full_expr_wrapper242.getTree());

                    // Objcm.g:450:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    int alt53=3;
                    alt53 = dfa53.predict(input);
                    switch (alt53) {
                        case 1 :
                            // Objcm.g:450:23: for_stmt_int1
                            {
                            pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2219);
                            for_stmt_int1243=for_stmt_int1();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int1243.getTree());

                            }
                            break;
                        case 2 :
                            // Objcm.g:450:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            {
                            // Objcm.g:450:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            // Objcm.g:450:40: full_expr2 ( for_stmt_int1 | for_stmt_int2 )
                            {
                            pushFollow(FOLLOW_full_expr2_in_for_stmt_expr2224);
                            full_expr2244=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2244.getTree());

                            // Objcm.g:450:51: ( for_stmt_int1 | for_stmt_int2 )
                            int alt52=2;
                            int LA52_0 = input.LA(1);

                            if ( (LA52_0==193) ) {
                                alt52=1;
                            }
                            else if ( (LA52_0==SEMICOLON) ) {
                                alt52=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 52, 0, input);

                                throw nvae;

                            }
                            switch (alt52) {
                                case 1 :
                                    // Objcm.g:450:52: for_stmt_int1
                                    {
                                    pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2227);
                                    for_stmt_int1245=for_stmt_int1();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int1245.getTree());

                                    }
                                    break;
                                case 2 :
                                    // Objcm.g:450:68: for_stmt_int2
                                    {
                                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2231);
                                    for_stmt_int2246=for_stmt_int2();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int2246.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            // Objcm.g:450:86: for_stmt_int2
                            {
                            pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2237);
                            for_stmt_int2247=for_stmt_int2();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int2247.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:451:4: for_stmt_int2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2243);
                    for_stmt_int2248=for_stmt_int2();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_int2248.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr"


    public static class for_stmt_int1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int1"
    // Objcm.g:454:1: for_stmt_int1 : 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) ;
    public final ObjcmParser.for_stmt_int1_return for_stmt_int1() throws RecognitionException {
        ObjcmParser.for_stmt_int1_return retval = new ObjcmParser.for_stmt_int1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal249=null;
        ObjcmParser.object_wrapped2_return object_wrapped2250 =null;


        Object string_literal249_tree=null;
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_object_wrapped2=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapped2");
        try {
            // Objcm.g:455:2: ( 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) )
            // Objcm.g:455:4: 'in' object_wrapped2
            {
            string_literal249=(Token)match(input,193,FOLLOW_193_in_for_stmt_int12258);  
            stream_193.add(string_literal249);


            pushFollow(FOLLOW_object_wrapped2_in_for_stmt_int12260);
            object_wrapped2250=object_wrapped2();

            state._fsp--;

            stream_object_wrapped2.add(object_wrapped2250.getTree());

            // AST REWRITE
            // elements: object_wrapped2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 455:26: -> ^( FOR_IN_STMT object_wrapped2 )
            {
                // Objcm.g:455:29: ^( FOR_IN_STMT object_wrapped2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapped2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int1"


    public static class for_stmt_int2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int2"
    // Objcm.g:457:1: for_stmt_int2 : SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? ;
    public final ObjcmParser.for_stmt_int2_return for_stmt_int2() throws RecognitionException {
        ObjcmParser.for_stmt_int2_return retval = new ObjcmParser.for_stmt_int2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON251=null;
        Token SEMICOLON253=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp252 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp254 =null;


        Object SEMICOLON251_tree=null;
        Object SEMICOLON253_tree=null;

        try {
            // Objcm.g:458:2: ( SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? )
            // Objcm.g:458:4: SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )?
            {
            root_0 = (Object)adaptor.nil();


            SEMICOLON251=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22280); 
            SEMICOLON251_tree = 
            (Object)adaptor.create(SEMICOLON251)
            ;
            adaptor.addChild(root_0, SEMICOLON251_tree);


            // Objcm.g:458:14: ( classical_expr_wrp )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==ASTERISK||LA55_0==ID||LA55_0==L_AND||LA55_0==L_BR||LA55_0==L_KBR||LA55_0==L_MINUS||LA55_0==L_MINUS_MINUS||LA55_0==L_NOT||LA55_0==L_PLUS||LA55_0==L_PLUS_PLUS||LA55_0==L_TILDA||LA55_0==NUMBER||LA55_0==SIZEOF||(LA55_0 >= STRING_LITERAL && LA55_0 <= STRING_LITERAL3)||LA55_0==166||LA55_0==173||LA55_0==175||LA55_0==179||LA55_0==182||LA55_0==185||LA55_0==193||(LA55_0 >= 195 && LA55_0 <= 196)||LA55_0==201) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // Objcm.g:458:14: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22282);
                    classical_expr_wrp252=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp252.getTree());

                    }
                    break;

            }


            SEMICOLON253=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22285); 
            SEMICOLON253_tree = 
            (Object)adaptor.create(SEMICOLON253)
            ;
            adaptor.addChild(root_0, SEMICOLON253_tree);


            // Objcm.g:458:44: ( classical_expr_wrp )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==ASTERISK||LA56_0==ID||LA56_0==L_AND||LA56_0==L_BR||LA56_0==L_KBR||LA56_0==L_MINUS||LA56_0==L_MINUS_MINUS||LA56_0==L_NOT||LA56_0==L_PLUS||LA56_0==L_PLUS_PLUS||LA56_0==L_TILDA||LA56_0==NUMBER||LA56_0==SIZEOF||(LA56_0 >= STRING_LITERAL && LA56_0 <= STRING_LITERAL3)||LA56_0==166||LA56_0==173||LA56_0==175||LA56_0==179||LA56_0==182||LA56_0==185||LA56_0==193||(LA56_0 >= 195 && LA56_0 <= 196)||LA56_0==201) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // Objcm.g:458:44: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22287);
                    classical_expr_wrp254=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp254.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int2"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // Objcm.g:461:1: return_stmt : 'return' ( expression )? SEMICOLON -> ^( RETURN_STMT ( expression )? SEMICOLON ) ;
    public final ObjcmParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcmParser.return_stmt_return retval = new ObjcmParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal255=null;
        Token SEMICOLON257=null;
        ObjcmParser.expression_return expression256 =null;


        Object string_literal255_tree=null;
        Object SEMICOLON257_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // Objcm.g:462:2: ( 'return' ( expression )? SEMICOLON -> ^( RETURN_STMT ( expression )? SEMICOLON ) )
            // Objcm.g:462:4: 'return' ( expression )? SEMICOLON
            {
            string_literal255=(Token)match(input,197,FOLLOW_197_in_return_stmt2300);  
            stream_197.add(string_literal255);


            // Objcm.g:462:13: ( expression )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==ASTERISK||LA57_0==ID||LA57_0==L_AND||LA57_0==L_BR||LA57_0==L_KBR||LA57_0==L_MINUS||LA57_0==L_MINUS_MINUS||LA57_0==L_NOT||LA57_0==L_PLUS||LA57_0==L_PLUS_PLUS||LA57_0==L_TILDA||LA57_0==NUMBER||LA57_0==SIZEOF||(LA57_0 >= STRING_LITERAL && LA57_0 <= STRING_LITERAL3)||LA57_0==166||LA57_0==173||LA57_0==175||LA57_0==179||LA57_0==182||LA57_0==185||LA57_0==193||(LA57_0 >= 195 && LA57_0 <= 196)||LA57_0==201) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // Objcm.g:462:13: expression
                    {
                    pushFollow(FOLLOW_expression_in_return_stmt2302);
                    expression256=expression();

                    state._fsp--;

                    stream_expression.add(expression256.getTree());

                    }
                    break;

            }


            SEMICOLON257=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_return_stmt2305);  
            stream_SEMICOLON.add(SEMICOLON257);


            // AST REWRITE
            // elements: expression, SEMICOLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 462:35: -> ^( RETURN_STMT ( expression )? SEMICOLON )
            {
                // Objcm.g:462:38: ^( RETURN_STMT ( expression )? SEMICOLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                // Objcm.g:462:52: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, 
                stream_SEMICOLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class if_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_wrapper"
    // Objcm.g:464:1: if_stmt_wrapper : if_stmt -> ^( IF_STMT if_stmt ) ;
    public final ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_wrapper_return retval = new ObjcmParser.if_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_return if_stmt258 =null;


        RewriteRuleSubtreeStream stream_if_stmt=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt");
        try {
            // Objcm.g:465:2: ( if_stmt -> ^( IF_STMT if_stmt ) )
            // Objcm.g:465:4: if_stmt
            {
            pushFollow(FOLLOW_if_stmt_in_if_stmt_wrapper2326);
            if_stmt258=if_stmt();

            state._fsp--;

            stream_if_stmt.add(if_stmt258.getTree());

            // AST REWRITE
            // elements: if_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 465:12: -> ^( IF_STMT if_stmt )
            {
                // Objcm.g:465:15: ^( IF_STMT if_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_wrapper"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // Objcm.g:467:1: if_stmt : 'if' L_BR if_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcmParser.if_stmt_return retval = new ObjcmParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal259=null;
        Token L_BR260=null;
        Token R_BR262=null;
        ObjcmParser.if_expr_return if_expr261 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper263 =null;


        Object string_literal259_tree=null;
        Object L_BR260_tree=null;
        Object R_BR262_tree=null;

        try {
            // Objcm.g:467:9: ( 'if' L_BR if_expr R_BR if_stmt_block_wrapper )
            // Objcm.g:467:11: 'if' L_BR if_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal259=(Token)match(input,192,FOLLOW_192_in_if_stmt2342); 
            string_literal259_tree = 
            (Object)adaptor.create(string_literal259)
            ;
            adaptor.addChild(root_0, string_literal259_tree);


            L_BR260=(Token)match(input,L_BR,FOLLOW_L_BR_in_if_stmt2345); 
            L_BR260_tree = 
            (Object)adaptor.create(L_BR260)
            ;
            adaptor.addChild(root_0, L_BR260_tree);


            pushFollow(FOLLOW_if_expr_in_if_stmt2348);
            if_expr261=if_expr();

            state._fsp--;

            adaptor.addChild(root_0, if_expr261.getTree());

            R_BR262=(Token)match(input,R_BR,FOLLOW_R_BR_in_if_stmt2350); 
            R_BR262_tree = 
            (Object)adaptor.create(R_BR262)
            ;
            adaptor.addChild(root_0, R_BR262_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_if_stmt2353);
            if_stmt_block_wrapper263=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper263.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class if_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_expr"
    // Objcm.g:470:1: if_expr : classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.if_expr_return if_expr() throws RecognitionException {
        ObjcmParser.if_expr_return retval = new ObjcmParser.if_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp264 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:470:9: ( classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) )
            // Objcm.g:470:12: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_if_expr2366);
            classical_expr_wrp264=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp264.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 470:31: -> ^( IF_EXPR classical_expr_wrp )
            {
                // Objcm.g:470:34: ^( IF_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_EXPR, "IF_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_expr"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // Objcm.g:472:1: else_stmt : 'else' if_stmt_block ;
    public final ObjcmParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcmParser.else_stmt_return retval = new ObjcmParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal265=null;
        ObjcmParser.if_stmt_block_return if_stmt_block266 =null;


        Object string_literal265_tree=null;

        try {
            // Objcm.g:473:2: ( 'else' if_stmt_block )
            // Objcm.g:473:4: 'else' if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal265=(Token)match(input,188,FOLLOW_188_in_else_stmt2385); 
            string_literal265_tree = 
            (Object)adaptor.create(string_literal265)
            ;
            adaptor.addChild(root_0, string_literal265_tree);


            pushFollow(FOLLOW_if_stmt_block_in_else_stmt2388);
            if_stmt_block266=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block266.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class if_stmt_block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block_wrapper"
    // Objcm.g:475:1: if_stmt_block_wrapper : if_stmt_block -> ^( IF_BLOCK if_stmt_block ) ;
    public final ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_block_wrapper_return retval = new ObjcmParser.if_stmt_block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_block_return if_stmt_block267 =null;


        RewriteRuleSubtreeStream stream_if_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt_block");
        try {
            // Objcm.g:476:2: ( if_stmt_block -> ^( IF_BLOCK if_stmt_block ) )
            // Objcm.g:476:4: if_stmt_block
            {
            pushFollow(FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2397);
            if_stmt_block267=if_stmt_block();

            state._fsp--;

            stream_if_stmt_block.add(if_stmt_block267.getTree());

            // AST REWRITE
            // elements: if_stmt_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 476:18: -> ^( IF_BLOCK if_stmt_block )
            {
                // Objcm.g:476:21: ^( IF_BLOCK if_stmt_block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_BLOCK, "IF_BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block_wrapper"


    public static class if_stmt_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block"
    // Objcm.g:478:1: if_stmt_block : ( block_wrapper | block_internal );
    public final ObjcmParser.if_stmt_block_return if_stmt_block() throws RecognitionException {
        ObjcmParser.if_stmt_block_return retval = new ObjcmParser.if_stmt_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_wrapper_return block_wrapper268 =null;

        ObjcmParser.block_internal_return block_internal269 =null;



        try {
            // Objcm.g:479:2: ( block_wrapper | block_internal )
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==L_FBR) ) {
                alt58=1;
            }
            else if ( (LA58_0==ASTERISK||LA58_0==BREAK_WORD||LA58_0==CONST_PREFIX||LA58_0==ENUM_PREFIX||LA58_0==ID||LA58_0==L_AND||LA58_0==L_BR||LA58_0==L_KBR||LA58_0==L_MINUS||LA58_0==L_MINUS_MINUS||LA58_0==L_NOT||LA58_0==L_PLUS||LA58_0==L_PLUS_PLUS||LA58_0==L_TILDA||LA58_0==NUMBER||LA58_0==SEMICOLON||(LA58_0 >= SINGLE_OP && LA58_0 <= SIZEOF)||LA58_0==STATIC_PREFIX||(LA58_0 >= STRING_LITERAL && LA58_0 <= STRING_LITERAL3)||LA58_0==STRUCT_PREFIX||LA58_0==VOID||LA58_0==166||LA58_0==173||LA58_0==175||(LA58_0 >= 177 && LA58_0 <= 179)||(LA58_0 >= 181 && LA58_0 <= 182)||LA58_0==185||(LA58_0 >= 187 && LA58_0 <= 193)||(LA58_0 >= 195 && LA58_0 <= 198)||(LA58_0 >= 201 && LA58_0 <= 202)) ) {
                alt58=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }
            switch (alt58) {
                case 1 :
                    // Objcm.g:479:4: block_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_wrapper_in_if_stmt_block2414);
                    block_wrapper268=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper268.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:480:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_if_stmt_block2420);
                    block_internal269=block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, block_internal269.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block"


    public static class static_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start_wrapper"
    // Objcm.g:483:1: static_start_wrapper : static_start -> ^( STATIC_START static_start ) ;
    public final ObjcmParser.static_start_wrapper_return static_start_wrapper() throws RecognitionException {
        ObjcmParser.static_start_wrapper_return retval = new ObjcmParser.static_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_start_return static_start270 =null;


        RewriteRuleSubtreeStream stream_static_start=new RewriteRuleSubtreeStream(adaptor,"rule static_start");
        try {
            // Objcm.g:484:2: ( static_start -> ^( STATIC_START static_start ) )
            // Objcm.g:484:4: static_start
            {
            pushFollow(FOLLOW_static_start_in_static_start_wrapper2432);
            static_start270=static_start();

            state._fsp--;

            stream_static_start.add(static_start270.getTree());

            // AST REWRITE
            // elements: static_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 484:17: -> ^( STATIC_START static_start )
            {
                // Objcm.g:484:20: ^( STATIC_START static_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_START, "STATIC_START")
                , root_1);

                adaptor.addChild(root_1, stream_static_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start_wrapper"


    public static class static_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start"
    // Objcm.g:486:1: static_start : STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2 ;
    public final ObjcmParser.static_start_return static_start() throws RecognitionException {
        ObjcmParser.static_start_return retval = new ObjcmParser.static_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX271=null;
        Token CONST_PREFIX272=null;
        ObjcmParser.static_type_wrapper_return static_type_wrapper273 =null;

        ObjcmParser.full_expr2_return full_expr2274 =null;


        Object STATIC_PREFIX271_tree=null;
        Object CONST_PREFIX272_tree=null;

        try {
            // Objcm.g:487:2: ( STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2 )
            // Objcm.g:487:4: STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX271=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_start2450); 
            STATIC_PREFIX271_tree = 
            (Object)adaptor.create(STATIC_PREFIX271)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX271_tree);


            // Objcm.g:487:18: ( CONST_PREFIX )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==CONST_PREFIX) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // Objcm.g:487:18: CONST_PREFIX
                    {
                    CONST_PREFIX272=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_start2452); 
                    CONST_PREFIX272_tree = 
                    (Object)adaptor.create(CONST_PREFIX272)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX272_tree);


                    }
                    break;

            }


            // Objcm.g:487:32: ( static_type_wrapper )?
            int alt60=2;
            alt60 = dfa60.predict(input);
            switch (alt60) {
                case 1 :
                    // Objcm.g:487:32: static_type_wrapper
                    {
                    pushFollow(FOLLOW_static_type_wrapper_in_static_start2455);
                    static_type_wrapper273=static_type_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_type_wrapper273.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_full_expr2_in_static_start2458);
            full_expr2274=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2274.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start"


    public static class static_type_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type_wrapper"
    // Objcm.g:490:1: static_type_wrapper : static_type -> ^( STATIC_TYPE static_type ) ;
    public final ObjcmParser.static_type_wrapper_return static_type_wrapper() throws RecognitionException {
        ObjcmParser.static_type_wrapper_return retval = new ObjcmParser.static_type_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_type_return static_type275 =null;


        RewriteRuleSubtreeStream stream_static_type=new RewriteRuleSubtreeStream(adaptor,"rule static_type");
        try {
            // Objcm.g:491:2: ( static_type -> ^( STATIC_TYPE static_type ) )
            // Objcm.g:491:4: static_type
            {
            pushFollow(FOLLOW_static_type_in_static_type_wrapper2470);
            static_type275=static_type();

            state._fsp--;

            stream_static_type.add(static_type275.getTree());

            // AST REWRITE
            // elements: static_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 491:16: -> ^( STATIC_TYPE static_type )
            {
                // Objcm.g:491:19: ^( STATIC_TYPE static_type )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_TYPE, "STATIC_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_static_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type_wrapper"


    public static class static_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type"
    // Objcm.g:493:1: static_type : object_name ( ASTERISK )* ;
    public final ObjcmParser.static_type_return static_type() throws RecognitionException {
        ObjcmParser.static_type_return retval = new ObjcmParser.static_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK277=null;
        ObjcmParser.object_name_return object_name276 =null;


        Object ASTERISK277_tree=null;

        try {
            // Objcm.g:494:2: ( object_name ( ASTERISK )* )
            // Objcm.g:494:4: object_name ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_name_in_static_type2489);
            object_name276=object_name();

            state._fsp--;

            adaptor.addChild(root_0, object_name276.getTree());

            // Objcm.g:494:16: ( ASTERISK )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==ASTERISK) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // Objcm.g:494:16: ASTERISK
            	    {
            	    ASTERISK277=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_static_type2491); 
            	    ASTERISK277_tree = 
            	    (Object)adaptor.create(ASTERISK277)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK277_tree);


            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type"


    public static class id_part_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end"
    // Objcm.g:496:1: id_part_end : ( id_part_end_internal )+ ;
    public final ObjcmParser.id_part_end_return id_part_end() throws RecognitionException {
        ObjcmParser.id_part_end_return retval = new ObjcmParser.id_part_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_end_internal_return id_part_end_internal278 =null;



        try {
            // Objcm.g:497:2: ( ( id_part_end_internal )+ )
            // Objcm.g:497:4: ( id_part_end_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:497:4: ( id_part_end_internal )+
            int cnt62=0;
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==DOT||LA62_0==163) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // Objcm.g:497:4: id_part_end_internal
            	    {
            	    pushFollow(FOLLOW_id_part_end_internal_in_id_part_end2503);
            	    id_part_end_internal278=id_part_end_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part_end_internal278.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt62 >= 1 ) break loop62;
                        EarlyExitException eee =
                            new EarlyExitException(62, input);
                        throw eee;
                }
                cnt62++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end"


    public static class id_part_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end_internal"
    // Objcm.g:500:1: id_part_end_internal : ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) ;
    public final ObjcmParser.id_part_end_internal_return id_part_end_internal() throws RecognitionException {
        ObjcmParser.id_part_end_internal_return retval = new ObjcmParser.id_part_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT279=null;
        Token string_literal280=null;
        ObjcmParser.id_part_return id_part281 =null;


        Object DOT279_tree=null;
        Object string_literal280_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_id_part=new RewriteRuleSubtreeStream(adaptor,"rule id_part");
        try {
            // Objcm.g:501:2: ( ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) )
            // Objcm.g:501:4: ( DOT | '->' ) id_part
            {
            // Objcm.g:501:4: ( DOT | '->' )
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==DOT) ) {
                alt63=1;
            }
            else if ( (LA63_0==163) ) {
                alt63=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;

            }
            switch (alt63) {
                case 1 :
                    // Objcm.g:501:5: DOT
                    {
                    DOT279=(Token)match(input,DOT,FOLLOW_DOT_in_id_part_end_internal2518);  
                    stream_DOT.add(DOT279);


                    }
                    break;
                case 2 :
                    // Objcm.g:501:11: '->'
                    {
                    string_literal280=(Token)match(input,163,FOLLOW_163_in_id_part_end_internal2522);  
                    stream_163.add(string_literal280);


                    }
                    break;

            }


            pushFollow(FOLLOW_id_part_in_id_part_end_internal2525);
            id_part281=id_part();

            state._fsp--;

            stream_id_part.add(id_part281.getTree());

            // AST REWRITE
            // elements: id_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 501:25: -> ^( FIELD_ACCESS id_part )
            {
                // Objcm.g:501:28: ^( FIELD_ACCESS id_part )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_ACCESS, "FIELD_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_id_part.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end_internal"


    public static class known_types_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_types"
    // Objcm.g:504:1: known_types : ( 'unsigned' | VOID );
    public final ObjcmParser.known_types_return known_types() throws RecognitionException {
        ObjcmParser.known_types_return retval = new ObjcmParser.known_types_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set282=null;

        Object set282_tree=null;

        try {
            // Objcm.g:505:2: ( 'unsigned' | VOID )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set282=(Token)input.LT(1);

            if ( input.LA(1)==VOID||input.LA(1)==201 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set282)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_types"


    public static class id_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part"
    // Objcm.g:509:1: id_part : name_internal ( function_brackets_wrapper )? ( index_wrapper )* ;
    public final ObjcmParser.id_part_return id_part() throws RecognitionException {
        ObjcmParser.id_part_return retval = new ObjcmParser.id_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal283 =null;

        ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper284 =null;

        ObjcmParser.index_wrapper_return index_wrapper285 =null;



        try {
            // Objcm.g:509:9: ( name_internal ( function_brackets_wrapper )? ( index_wrapper )* )
            // Objcm.g:509:12: name_internal ( function_brackets_wrapper )? ( index_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_internal_in_id_part2563);
            name_internal283=name_internal();

            state._fsp--;

            adaptor.addChild(root_0, name_internal283.getTree());

            // Objcm.g:509:26: ( function_brackets_wrapper )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==L_BR) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // Objcm.g:509:26: function_brackets_wrapper
                    {
                    pushFollow(FOLLOW_function_brackets_wrapper_in_id_part2565);
                    function_brackets_wrapper284=function_brackets_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, function_brackets_wrapper284.getTree());

                    }
                    break;

            }


            // Objcm.g:509:53: ( index_wrapper )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==L_KBR) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // Objcm.g:509:53: index_wrapper
            	    {
            	    pushFollow(FOLLOW_index_wrapper_in_id_part2568);
            	    index_wrapper285=index_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, index_wrapper285.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part"


    public static class object_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_name"
    // Objcm.g:512:1: object_name : id_part ( id_part_end )? ;
    public final ObjcmParser.object_name_return object_name() throws RecognitionException {
        ObjcmParser.object_name_return retval = new ObjcmParser.object_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_return id_part286 =null;

        ObjcmParser.id_part_end_return id_part_end287 =null;



        try {
            // Objcm.g:513:2: ( id_part ( id_part_end )? )
            // Objcm.g:513:4: id_part ( id_part_end )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_id_part_in_object_name2581);
            id_part286=id_part();

            state._fsp--;

            adaptor.addChild(root_0, id_part286.getTree());

            // Objcm.g:513:12: ( id_part_end )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==DOT||LA66_0==163) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // Objcm.g:513:12: id_part_end
                    {
                    pushFollow(FOLLOW_id_part_end_in_object_name2583);
                    id_part_end287=id_part_end();

                    state._fsp--;

                    adaptor.addChild(root_0, id_part_end287.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_name"


    public static class method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper"
    // Objcm.g:516:1: method_call_wrapper : L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper_return method_call_wrapper() throws RecognitionException {
        ObjcmParser.method_call_wrapper_return retval = new ObjcmParser.method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR288=null;
        Token R_KBR290=null;
        ObjcmParser.method_call2_return method_call2289 =null;


        Object L_KBR288_tree=null;
        Object R_KBR290_tree=null;
        RewriteRuleTokenStream stream_R_KBR=new RewriteRuleTokenStream(adaptor,"token R_KBR");
        RewriteRuleTokenStream stream_L_KBR=new RewriteRuleTokenStream(adaptor,"token L_KBR");
        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // Objcm.g:517:2: ( L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) )
            // Objcm.g:517:4: L_KBR method_call2 R_KBR
            {
            L_KBR288=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_method_call_wrapper2597);  
            stream_L_KBR.add(L_KBR288);


            pushFollow(FOLLOW_method_call2_in_method_call_wrapper2599);
            method_call2289=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2289.getTree());

            R_KBR290=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_method_call_wrapper2601);  
            stream_R_KBR.add(R_KBR290);


            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 517:29: -> ^( METHOD_CALL method_call2 )
            {
                // Objcm.g:517:32: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper"


    public static class method_call_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper2"
    // Objcm.g:520:1: method_call_wrapper2 : method_call2 -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper2_return method_call_wrapper2() throws RecognitionException {
        ObjcmParser.method_call_wrapper2_return retval = new ObjcmParser.method_call_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call2_return method_call2291 =null;


        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // Objcm.g:521:2: ( method_call2 -> ^( METHOD_CALL method_call2 ) )
            // Objcm.g:521:4: method_call2
            {
            pushFollow(FOLLOW_method_call2_in_method_call_wrapper22624);
            method_call2291=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2291.getTree());

            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 521:17: -> ^( METHOD_CALL method_call2 )
            {
                // Objcm.g:521:20: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper2"


    public static class method_call2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call2"
    // Objcm.g:523:1: method_call2 : object_wrapper method_name ( method_call_message_list_wrapper )? ;
    public final ObjcmParser.method_call2_return method_call2() throws RecognitionException {
        ObjcmParser.method_call2_return retval = new ObjcmParser.method_call2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_return object_wrapper292 =null;

        ObjcmParser.method_name_return method_name293 =null;

        ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper294 =null;



        try {
            // Objcm.g:524:2: ( object_wrapper method_name ( method_call_message_list_wrapper )? )
            // Objcm.g:524:4: object_wrapper method_name ( method_call_message_list_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapper_in_method_call22643);
            object_wrapper292=object_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapper292.getTree());

            pushFollow(FOLLOW_method_name_in_method_call22645);
            method_name293=method_name();

            state._fsp--;

            adaptor.addChild(root_0, method_name293.getTree());

            // Objcm.g:524:31: ( method_call_message_list_wrapper )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==COLON) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // Objcm.g:524:33: method_call_message_list_wrapper
                    {
                    pushFollow(FOLLOW_method_call_message_list_wrapper_in_method_call22649);
                    method_call_message_list_wrapper294=method_call_message_list_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_message_list_wrapper294.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call2"


    public static class object_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper"
    // Objcm.g:526:1: object_wrapper : object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) ;
    public final ObjcmParser.object_wrapper_return object_wrapper() throws RecognitionException {
        ObjcmParser.object_wrapper_return retval = new ObjcmParser.object_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_internal_return object_wrapper_internal295 =null;


        RewriteRuleSubtreeStream stream_object_wrapper_internal=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapper_internal");
        try {
            // Objcm.g:527:2: ( object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) )
            // Objcm.g:527:4: object_wrapper_internal
            {
            pushFollow(FOLLOW_object_wrapper_internal_in_object_wrapper2660);
            object_wrapper_internal295=object_wrapper_internal();

            state._fsp--;

            stream_object_wrapper_internal.add(object_wrapper_internal295.getTree());

            // AST REWRITE
            // elements: object_wrapper_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 527:28: -> ^( OBJECT object_wrapper_internal )
            {
                // Objcm.g:527:31: ^( OBJECT object_wrapper_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT, "OBJECT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapper_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper"


    public static class object_wrapper_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper_internal"
    // Objcm.g:529:1: object_wrapper_internal : ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL );
    public final ObjcmParser.object_wrapper_internal_return object_wrapper_internal() throws RecognitionException {
        ObjcmParser.object_wrapper_internal_return retval = new ObjcmParser.object_wrapper_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL301=null;
        ObjcmParser.type_convertion_return type_convertion296 =null;

        ObjcmParser.object_name_return object_name297 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper298 =null;

        ObjcmParser.object_name_return object_name299 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper300 =null;


        Object STRING_LITERAL301_tree=null;

        try {
            // Objcm.g:531:2: ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL )
            int alt69=4;
            switch ( input.LA(1) ) {
            case L_BR:
                {
                alt69=1;
                }
                break;
            case ID:
            case 182:
            case 185:
            case 193:
            case 196:
                {
                alt69=2;
                }
                break;
            case L_KBR:
                {
                alt69=3;
                }
                break;
            case STRING_LITERAL:
                {
                alt69=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;

            }

            switch (alt69) {
                case 1 :
                    // Objcm.g:531:4: type_convertion ( object_name | method_call_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_convertion_in_object_wrapper_internal2679);
                    type_convertion296=type_convertion();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion296.getTree());

                    // Objcm.g:531:20: ( object_name | method_call_wrapper )
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==ID||LA68_0==182||LA68_0==185||LA68_0==193||LA68_0==196) ) {
                        alt68=1;
                    }
                    else if ( (LA68_0==L_KBR) ) {
                        alt68=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 0, input);

                        throw nvae;

                    }
                    switch (alt68) {
                        case 1 :
                            // Objcm.g:531:21: object_name
                            {
                            pushFollow(FOLLOW_object_name_in_object_wrapper_internal2682);
                            object_name297=object_name();

                            state._fsp--;

                            adaptor.addChild(root_0, object_name297.getTree());

                            }
                            break;
                        case 2 :
                            // Objcm.g:531:35: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2686);
                            method_call_wrapper298=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper298.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:532:4: object_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_name_in_object_wrapper_internal2692);
                    object_name299=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name299.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:533:4: method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2697);
                    method_call_wrapper300=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper300.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:534:4: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL301=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_object_wrapper_internal2702); 
                    STRING_LITERAL301_tree = 
                    (Object)adaptor.create(STRING_LITERAL301)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL301_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper_internal"


    public static class method_message3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_message3"
    // Objcm.g:537:1: method_message3 : classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) ;
    public final ObjcmParser.method_message3_return method_message3() throws RecognitionException {
        ObjcmParser.method_message3_return retval = new ObjcmParser.method_message3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp302 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:538:2: ( classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) )
            // Objcm.g:538:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_method_message32714);
            classical_expr_wrp302=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp302.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 538:23: -> ^( MESSAGE classical_expr_wrp )
            {
                // Objcm.g:538:26: ^( MESSAGE classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_message3"


    public static class type_convertion_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion"
    // Objcm.g:540:1: type_convertion : L_BR type_convertion_internal_wrapper R_BR ;
    public final ObjcmParser.type_convertion_return type_convertion() throws RecognitionException {
        ObjcmParser.type_convertion_return retval = new ObjcmParser.type_convertion_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR303=null;
        Token R_BR305=null;
        ObjcmParser.type_convertion_internal_wrapper_return type_convertion_internal_wrapper304 =null;


        Object L_BR303_tree=null;
        Object R_BR305_tree=null;

        try {
            // Objcm.g:541:2: ( L_BR type_convertion_internal_wrapper R_BR )
            // Objcm.g:541:4: L_BR type_convertion_internal_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR303=(Token)match(input,L_BR,FOLLOW_L_BR_in_type_convertion2733); 
            L_BR303_tree = 
            (Object)adaptor.create(L_BR303)
            ;
            adaptor.addChild(root_0, L_BR303_tree);


            pushFollow(FOLLOW_type_convertion_internal_wrapper_in_type_convertion2735);
            type_convertion_internal_wrapper304=type_convertion_internal_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, type_convertion_internal_wrapper304.getTree());

            R_BR305=(Token)match(input,R_BR,FOLLOW_R_BR_in_type_convertion2737); 
            R_BR305_tree = 
            (Object)adaptor.create(R_BR305)
            ;
            adaptor.addChild(root_0, R_BR305_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion"


    public static class type_convertion_internal_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion_internal_wrapper"
    // Objcm.g:543:1: type_convertion_internal_wrapper : type_convertion_internal -> ^( TYPE_CONVERTION type_convertion_internal ) ;
    public final ObjcmParser.type_convertion_internal_wrapper_return type_convertion_internal_wrapper() throws RecognitionException {
        ObjcmParser.type_convertion_internal_wrapper_return retval = new ObjcmParser.type_convertion_internal_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_convertion_internal_return type_convertion_internal306 =null;


        RewriteRuleSubtreeStream stream_type_convertion_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_convertion_internal");
        try {
            // Objcm.g:544:2: ( type_convertion_internal -> ^( TYPE_CONVERTION type_convertion_internal ) )
            // Objcm.g:544:4: type_convertion_internal
            {
            pushFollow(FOLLOW_type_convertion_internal_in_type_convertion_internal_wrapper2746);
            type_convertion_internal306=type_convertion_internal();

            state._fsp--;

            stream_type_convertion_internal.add(type_convertion_internal306.getTree());

            // AST REWRITE
            // elements: type_convertion_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 544:29: -> ^( TYPE_CONVERTION type_convertion_internal )
            {
                // Objcm.g:544:32: ^( TYPE_CONVERTION type_convertion_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CONVERTION, "TYPE_CONVERTION")
                , root_1);

                adaptor.addChild(root_1, stream_type_convertion_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion_internal_wrapper"


    public static class type_convertion_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion_internal"
    // Objcm.g:546:1: type_convertion_internal : ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* ;
    public final ObjcmParser.type_convertion_internal_return type_convertion_internal() throws RecognitionException {
        ObjcmParser.type_convertion_internal_return retval = new ObjcmParser.type_convertion_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal307=null;
        Token string_literal308=null;
        Token ASTERISK311=null;
        ObjcmParser.type_internal_return type_internal309 =null;

        ObjcmParser.generic_return generic310 =null;


        Object string_literal307_tree=null;
        Object string_literal308_tree=null;
        Object ASTERISK311_tree=null;

        try {
            // Objcm.g:547:2: ( ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* )
            // Objcm.g:547:4: ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:547:4: ( 'const' )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==CONST_PREFIX) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // Objcm.g:547:4: 'const'
                    {
                    string_literal307=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_convertion_internal2764); 
                    string_literal307_tree = 
                    (Object)adaptor.create(string_literal307)
                    ;
                    adaptor.addChild(root_0, string_literal307_tree);


                    }
                    break;

            }


            // Objcm.g:547:13: ( 'unsigned' )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==201) ) {
                int LA71_1 = input.LA(2);

                if ( (LA71_1==ID||LA71_1==VOID||LA71_1==201) ) {
                    alt71=1;
                }
            }
            switch (alt71) {
                case 1 :
                    // Objcm.g:547:13: 'unsigned'
                    {
                    string_literal308=(Token)match(input,201,FOLLOW_201_in_type_convertion_internal2767); 
                    string_literal308_tree = 
                    (Object)adaptor.create(string_literal308)
                    ;
                    adaptor.addChild(root_0, string_literal308_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_type_convertion_internal2770);
            type_internal309=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal309.getTree());

            // Objcm.g:547:39: ( generic )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==L_LESS) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // Objcm.g:547:39: generic
                    {
                    pushFollow(FOLLOW_generic_in_type_convertion_internal2772);
                    generic310=generic();

                    state._fsp--;

                    adaptor.addChild(root_0, generic310.getTree());

                    }
                    break;

            }


            // Objcm.g:547:48: ( ASTERISK )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==ASTERISK) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // Objcm.g:547:48: ASTERISK
            	    {
            	    ASTERISK311=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_type_convertion_internal2775); 
            	    ASTERISK311_tree = 
            	    (Object)adaptor.create(ASTERISK311)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK311_tree);


            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion_internal"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // Objcm.g:549:1: method_name : ( ID -> ^( METHOD_NAME ID ) | property -> ^( METHOD_NAME property ) );
    public final ObjcmParser.method_name_return method_name() throws RecognitionException {
        ObjcmParser.method_name_return retval = new ObjcmParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID312=null;
        ObjcmParser.property_return property313 =null;


        Object ID312_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_property=new RewriteRuleSubtreeStream(adaptor,"rule property");
        try {
            // Objcm.g:550:2: ( ID -> ^( METHOD_NAME ID ) | property -> ^( METHOD_NAME property ) )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==ID) ) {
                alt74=1;
            }
            else if ( (LA74_0==182||LA74_0==185||LA74_0==196) ) {
                alt74=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;

            }
            switch (alt74) {
                case 1 :
                    // Objcm.g:550:4: ID
                    {
                    ID312=(Token)match(input,ID,FOLLOW_ID_in_method_name2786);  
                    stream_ID.add(ID312);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 550:7: -> ^( METHOD_NAME ID )
                    {
                        // Objcm.g:550:10: ^( METHOD_NAME ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_ID.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:551:4: property
                    {
                    pushFollow(FOLLOW_property_in_method_name2799);
                    property313=property();

                    state._fsp--;

                    stream_property.add(property313.getTree());

                    // AST REWRITE
                    // elements: property
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 551:13: -> ^( METHOD_NAME property )
                    {
                        // Objcm.g:551:16: ^( METHOD_NAME property )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                        , root_1);

                        adaptor.addChild(root_1, stream_property.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_call_message_list_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list_wrapper"
    // Objcm.g:553:1: method_call_message_list_wrapper : method_call_message_list -> ^( MSG_LIST method_call_message_list ) ;
    public final ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_list_wrapper_return retval = new ObjcmParser.method_call_message_list_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_list_return method_call_message_list314 =null;


        RewriteRuleSubtreeStream stream_method_call_message_list=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_list");
        try {
            // Objcm.g:554:2: ( method_call_message_list -> ^( MSG_LIST method_call_message_list ) )
            // Objcm.g:554:4: method_call_message_list
            {
            pushFollow(FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2816);
            method_call_message_list314=method_call_message_list();

            state._fsp--;

            stream_method_call_message_list.add(method_call_message_list314.getTree());

            // AST REWRITE
            // elements: method_call_message_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 554:29: -> ^( MSG_LIST method_call_message_list )
            {
                // Objcm.g:554:32: ^( MSG_LIST method_call_message_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MSG_LIST, "MSG_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list_wrapper"


    public static class method_call_message_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list"
    // Objcm.g:556:1: method_call_message_list : method_call_message_first_wrapper ( method_call_message_wrapper )* ;
    public final ObjcmParser.method_call_message_list_return method_call_message_list() throws RecognitionException {
        ObjcmParser.method_call_message_list_return retval = new ObjcmParser.method_call_message_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper315 =null;

        ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper316 =null;



        try {
            // Objcm.g:557:2: ( method_call_message_first_wrapper ( method_call_message_wrapper )* )
            // Objcm.g:557:4: method_call_message_first_wrapper ( method_call_message_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2833);
            method_call_message_first_wrapper315=method_call_message_first_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_call_message_first_wrapper315.getTree());

            // Objcm.g:557:38: ( method_call_message_wrapper )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==COLON||LA75_0==ID) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // Objcm.g:557:38: method_call_message_wrapper
            	    {
            	    pushFollow(FOLLOW_method_call_message_wrapper_in_method_call_message_list2835);
            	    method_call_message_wrapper316=method_call_message_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_call_message_wrapper316.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list"


    public static class method_call_message_first_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first_wrapper"
    // Objcm.g:559:1: method_call_message_first_wrapper : method_call_message_first -> ^( METHOD_MSG method_call_message_first ) ;
    public final ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_first_wrapper_return retval = new ObjcmParser.method_call_message_first_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_return method_call_message_first317 =null;


        RewriteRuleSubtreeStream stream_method_call_message_first=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_first");
        try {
            // Objcm.g:560:2: ( method_call_message_first -> ^( METHOD_MSG method_call_message_first ) )
            // Objcm.g:560:4: method_call_message_first
            {
            pushFollow(FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2846);
            method_call_message_first317=method_call_message_first();

            state._fsp--;

            stream_method_call_message_first.add(method_call_message_first317.getTree());

            // AST REWRITE
            // elements: method_call_message_first
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 560:30: -> ^( METHOD_MSG method_call_message_first )
            {
                // Objcm.g:560:33: ^( METHOD_MSG method_call_message_first )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_first.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first_wrapper"


    public static class method_call_message_first_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first"
    // Objcm.g:562:1: method_call_message_first : COLON message_wrapper ;
    public final ObjcmParser.method_call_message_first_return method_call_message_first() throws RecognitionException {
        ObjcmParser.method_call_message_first_return retval = new ObjcmParser.method_call_message_first_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON318=null;
        ObjcmParser.message_wrapper_return message_wrapper319 =null;


        Object COLON318_tree=null;

        try {
            // Objcm.g:563:2: ( COLON message_wrapper )
            // Objcm.g:563:4: COLON message_wrapper
            {
            root_0 = (Object)adaptor.nil();


            COLON318=(Token)match(input,COLON,FOLLOW_COLON_in_method_call_message_first2863); 
            COLON318_tree = 
            (Object)adaptor.create(COLON318)
            ;
            adaptor.addChild(root_0, COLON318_tree);


            pushFollow(FOLLOW_message_wrapper_in_method_call_message_first2866);
            message_wrapper319=message_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, message_wrapper319.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first"


    public static class method_call_message_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_wrapper"
    // Objcm.g:565:1: method_call_message_wrapper : method_call_message -> ^( METHOD_MSG method_call_message ) ;
    public final ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_wrapper_return retval = new ObjcmParser.method_call_message_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_return method_call_message320 =null;


        RewriteRuleSubtreeStream stream_method_call_message=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message");
        try {
            // Objcm.g:566:2: ( method_call_message -> ^( METHOD_MSG method_call_message ) )
            // Objcm.g:566:4: method_call_message
            {
            pushFollow(FOLLOW_method_call_message_in_method_call_message_wrapper2876);
            method_call_message320=method_call_message();

            state._fsp--;

            stream_method_call_message.add(method_call_message320.getTree());

            // AST REWRITE
            // elements: method_call_message
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 566:24: -> ^( METHOD_MSG method_call_message )
            {
                // Objcm.g:566:27: ^( METHOD_MSG method_call_message )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_wrapper"


    public static class method_call_message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message"
    // Objcm.g:568:1: method_call_message : ( prefix | incomplete_prefix ) message_wrapper ;
    public final ObjcmParser.method_call_message_return method_call_message() throws RecognitionException {
        ObjcmParser.method_call_message_return retval = new ObjcmParser.method_call_message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.prefix_return prefix321 =null;

        ObjcmParser.incomplete_prefix_return incomplete_prefix322 =null;

        ObjcmParser.message_wrapper_return message_wrapper323 =null;



        try {
            // Objcm.g:569:2: ( ( prefix | incomplete_prefix ) message_wrapper )
            // Objcm.g:569:4: ( prefix | incomplete_prefix ) message_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:569:4: ( prefix | incomplete_prefix )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==ID) ) {
                alt76=1;
            }
            else if ( (LA76_0==COLON) ) {
                alt76=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;

            }
            switch (alt76) {
                case 1 :
                    // Objcm.g:569:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_call_message2895);
                    prefix321=prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, prefix321.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:569:14: incomplete_prefix
                    {
                    pushFollow(FOLLOW_incomplete_prefix_in_method_call_message2899);
                    incomplete_prefix322=incomplete_prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, incomplete_prefix322.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_message_wrapper_in_method_call_message2902);
            message_wrapper323=message_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, message_wrapper323.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message"


    public static class message_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "message_wrapper"
    // Objcm.g:571:1: message_wrapper : message -> ^( MESSAGE message ) ;
    public final ObjcmParser.message_wrapper_return message_wrapper() throws RecognitionException {
        ObjcmParser.message_wrapper_return retval = new ObjcmParser.message_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.message_return message324 =null;


        RewriteRuleSubtreeStream stream_message=new RewriteRuleSubtreeStream(adaptor,"rule message");
        try {
            // Objcm.g:572:2: ( message -> ^( MESSAGE message ) )
            // Objcm.g:572:4: message
            {
            pushFollow(FOLLOW_message_in_message_wrapper2912);
            message324=message();

            state._fsp--;

            stream_message.add(message324.getTree());

            // AST REWRITE
            // elements: message
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 572:12: -> ^( MESSAGE message )
            {
                // Objcm.g:572:15: ^( MESSAGE message )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_message.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "message_wrapper"


    public static class message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "message"
    // Objcm.g:574:1: message : expression ( COMMA expression )* ;
    public final ObjcmParser.message_return message() throws RecognitionException {
        ObjcmParser.message_return retval = new ObjcmParser.message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA326=null;
        ObjcmParser.expression_return expression325 =null;

        ObjcmParser.expression_return expression327 =null;


        Object COMMA326_tree=null;

        try {
            // Objcm.g:574:9: ( expression ( COMMA expression )* )
            // Objcm.g:574:11: expression ( COMMA expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expression_in_message2930);
            expression325=expression();

            state._fsp--;

            adaptor.addChild(root_0, expression325.getTree());

            // Objcm.g:574:22: ( COMMA expression )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==COMMA) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // Objcm.g:574:23: COMMA expression
            	    {
            	    COMMA326=(Token)match(input,COMMA,FOLLOW_COMMA_in_message2933); 
            	    COMMA326_tree = 
            	    (Object)adaptor.create(COMMA326)
            	    ;
            	    adaptor.addChild(root_0, COMMA326_tree);


            	    pushFollow(FOLLOW_expression_in_message2935);
            	    expression327=expression();

            	    state._fsp--;

            	    adaptor.addChild(root_0, expression327.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "message"


    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // Objcm.g:580:1: expression : ( classical_expr_wrp | struct_init );
    public final ObjcmParser.expression_return expression() throws RecognitionException {
        ObjcmParser.expression_return retval = new ObjcmParser.expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp328 =null;

        ObjcmParser.struct_init_return struct_init329 =null;



        try {
            // Objcm.g:581:2: ( classical_expr_wrp | struct_init )
            int alt78=2;
            alt78 = dfa78.predict(input);
            switch (alt78) {
                case 1 :
                    // Objcm.g:581:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_expression2951);
                    classical_expr_wrp328=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp328.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:582:4: struct_init
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_in_expression2956);
                    struct_init329=struct_init();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init329.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class full_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr_wrapper"
    // Objcm.g:585:1: full_expr_wrapper : full_expr -> ^( EXPR_FULL full_expr ) ;
    public final ObjcmParser.full_expr_wrapper_return full_expr_wrapper() throws RecognitionException {
        ObjcmParser.full_expr_wrapper_return retval = new ObjcmParser.full_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_return full_expr330 =null;


        RewriteRuleSubtreeStream stream_full_expr=new RewriteRuleSubtreeStream(adaptor,"rule full_expr");
        try {
            // Objcm.g:586:2: ( full_expr -> ^( EXPR_FULL full_expr ) )
            // Objcm.g:586:4: full_expr
            {
            pushFollow(FOLLOW_full_expr_in_full_expr_wrapper2967);
            full_expr330=full_expr();

            state._fsp--;

            stream_full_expr.add(full_expr330.getTree());

            // AST REWRITE
            // elements: full_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 586:14: -> ^( EXPR_FULL full_expr )
            {
                // Objcm.g:586:17: ^( EXPR_FULL full_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_FULL, "EXPR_FULL")
                , root_1);

                adaptor.addChild(root_1, stream_full_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr_wrapper"


    public static class full_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr"
    // Objcm.g:588:1: full_expr : classical_expr_wrp ( COMMA classical_expr_wrp )* ;
    public final ObjcmParser.full_expr_return full_expr() throws RecognitionException {
        ObjcmParser.full_expr_return retval = new ObjcmParser.full_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA332=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp331 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp333 =null;


        Object COMMA332_tree=null;

        try {
            // Objcm.g:589:2: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )
            // Objcm.g:589:4: classical_expr_wrp ( COMMA classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_full_expr2984);
            classical_expr_wrp331=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp331.getTree());

            // Objcm.g:589:23: ( COMMA classical_expr_wrp )*
            loop79:
            do {
                int alt79=2;
                alt79 = dfa79.predict(input);
                switch (alt79) {
            	case 1 :
            	    // Objcm.g:589:24: COMMA classical_expr_wrp
            	    {
            	    COMMA332=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr2987); 
            	    COMMA332_tree = 
            	    (Object)adaptor.create(COMMA332)
            	    ;
            	    adaptor.addChild(root_0, COMMA332_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_full_expr2989);
            	    classical_expr_wrp333=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp333.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr"


    public static class full_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr2"
    // Objcm.g:591:1: full_expr2 : classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* ;
    public final ObjcmParser.full_expr2_return full_expr2() throws RecognitionException {
        ObjcmParser.full_expr2_return retval = new ObjcmParser.full_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA335=null;
        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2334 =null;

        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2336 =null;


        Object COMMA335_tree=null;

        try {
            // Objcm.g:592:2: ( classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* )
            // Objcm.g:592:4: classical_expr_wrp2 ( COMMA classical_expr_wrp2 )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr23000);
            classical_expr_wrp2334=classical_expr_wrp2();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp2334.getTree());

            // Objcm.g:592:24: ( COMMA classical_expr_wrp2 )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==COMMA) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // Objcm.g:592:25: COMMA classical_expr_wrp2
            	    {
            	    COMMA335=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr23003); 
            	    COMMA335_tree = 
            	    (Object)adaptor.create(COMMA335)
            	    ;
            	    adaptor.addChild(root_0, COMMA335_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr23005);
            	    classical_expr_wrp2336=classical_expr_wrp2();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp2336.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr2"


    public static class expr_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign_wrapper"
    // Objcm.g:594:1: expr_assign_wrapper : expr_assign -> ^( EXPR_ASSIGN expr_assign ) ;
    public final ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper() throws RecognitionException {
        ObjcmParser.expr_assign_wrapper_return retval = new ObjcmParser.expr_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_assign_return expr_assign337 =null;


        RewriteRuleSubtreeStream stream_expr_assign=new RewriteRuleSubtreeStream(adaptor,"rule expr_assign");
        try {
            // Objcm.g:595:2: ( expr_assign -> ^( EXPR_ASSIGN expr_assign ) )
            // Objcm.g:595:4: expr_assign
            {
            pushFollow(FOLLOW_expr_assign_in_expr_assign_wrapper3016);
            expr_assign337=expr_assign();

            state._fsp--;

            stream_expr_assign.add(expr_assign337.getTree());

            // AST REWRITE
            // elements: expr_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 595:16: -> ^( EXPR_ASSIGN expr_assign )
            {
                // Objcm.g:595:19: ^( EXPR_ASSIGN expr_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ASSIGN, "EXPR_ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_expr_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign_wrapper"


    public static class expr_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign"
    // Objcm.g:597:1: expr_assign : assign_wrapper ( struct_init | classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) ) ;
    public final ObjcmParser.expr_assign_return expr_assign() throws RecognitionException {
        ObjcmParser.expr_assign_return retval = new ObjcmParser.expr_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_wrapper_return assign_wrapper338 =null;

        ObjcmParser.struct_init_return struct_init339 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp340 =null;

        ObjcmParser.array_init_wrapper_return array_init_wrapper341 =null;

        ObjcmParser.func_pointer2_return func_pointer2342 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper343 =null;



        try {
            // Objcm.g:598:2: ( assign_wrapper ( struct_init | classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) ) )
            // Objcm.g:598:4: assign_wrapper ( struct_init | classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_assign_wrapper_in_expr_assign3035);
            assign_wrapper338=assign_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, assign_wrapper338.getTree());

            // Objcm.g:598:19: ( struct_init | classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )
            int alt82=4;
            alt82 = dfa82.predict(input);
            switch (alt82) {
                case 1 :
                    // Objcm.g:598:20: struct_init
                    {
                    pushFollow(FOLLOW_struct_init_in_expr_assign3038);
                    struct_init339=struct_init();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init339.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:598:34: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_expr_assign3042);
                    classical_expr_wrp340=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp340.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:598:55: array_init_wrapper
                    {
                    pushFollow(FOLLOW_array_init_wrapper_in_expr_assign3046);
                    array_init_wrapper341=array_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init_wrapper341.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:598:76: ( func_pointer2 ( method_call_wrapper )? )
                    {
                    // Objcm.g:598:76: ( func_pointer2 ( method_call_wrapper )? )
                    // Objcm.g:598:77: func_pointer2 ( method_call_wrapper )?
                    {
                    pushFollow(FOLLOW_func_pointer2_in_expr_assign3051);
                    func_pointer2342=func_pointer2();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer2342.getTree());

                    // Objcm.g:598:91: ( method_call_wrapper )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==L_KBR) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // Objcm.g:598:91: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_expr_assign3053);
                            method_call_wrapper343=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper343.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign"


    public static class array_init_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init_wrapper"
    // Objcm.g:600:1: array_init_wrapper : array_init -> ^( ARRAY_INIT array_init ) ;
    public final ObjcmParser.array_init_wrapper_return array_init_wrapper() throws RecognitionException {
        ObjcmParser.array_init_wrapper_return retval = new ObjcmParser.array_init_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.array_init_return array_init344 =null;


        RewriteRuleSubtreeStream stream_array_init=new RewriteRuleSubtreeStream(adaptor,"rule array_init");
        try {
            // Objcm.g:601:2: ( array_init -> ^( ARRAY_INIT array_init ) )
            // Objcm.g:601:4: array_init
            {
            pushFollow(FOLLOW_array_init_in_array_init_wrapper3065);
            array_init344=array_init();

            state._fsp--;

            stream_array_init.add(array_init344.getTree());

            // AST REWRITE
            // elements: array_init
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 601:15: -> ^( ARRAY_INIT array_init )
            {
                // Objcm.g:601:18: ^( ARRAY_INIT array_init )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ARRAY_INIT, "ARRAY_INIT")
                , root_1);

                adaptor.addChild(root_1, stream_array_init.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init_wrapper"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // Objcm.g:603:1: array_init : L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR ;
    public final ObjcmParser.array_init_return array_init() throws RecognitionException {
        ObjcmParser.array_init_return retval = new ObjcmParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR345=null;
        Token COMMA347=null;
        Token R_FBR349=null;
        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3346 =null;

        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3348 =null;


        Object L_FBR345_tree=null;
        Object COMMA347_tree=null;
        Object R_FBR349_tree=null;

        try {
            // Objcm.g:604:2: ( L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR )
            // Objcm.g:604:4: L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR345=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array_init3084); 
            L_FBR345_tree = 
            (Object)adaptor.create(L_FBR345)
            ;
            adaptor.addChild(root_0, L_FBR345_tree);


            // Objcm.g:604:10: ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==ASTERISK||LA84_0==ID||LA84_0==L_AND||LA84_0==L_BR||(LA84_0 >= L_FBR && LA84_0 <= L_KBR)||LA84_0==L_MINUS||LA84_0==L_MINUS_MINUS||LA84_0==L_NOT||LA84_0==L_PLUS||LA84_0==L_PLUS_PLUS||LA84_0==L_TILDA||LA84_0==NUMBER||LA84_0==SIZEOF||(LA84_0 >= STRING_LITERAL && LA84_0 <= STRING_LITERAL3)||LA84_0==166||LA84_0==173||LA84_0==175||LA84_0==179||LA84_0==182||LA84_0==185||LA84_0==193||(LA84_0 >= 195 && LA84_0 <= 196)||LA84_0==201) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // Objcm.g:604:11: classical_expr_wrp3 ( COMMA classical_expr_wrp3 )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init3087);
                    classical_expr_wrp3346=classical_expr_wrp3();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp3346.getTree());

                    // Objcm.g:604:31: ( COMMA classical_expr_wrp3 )*
                    loop83:
                    do {
                        int alt83=2;
                        int LA83_0 = input.LA(1);

                        if ( (LA83_0==COMMA) ) {
                            alt83=1;
                        }


                        switch (alt83) {
                    	case 1 :
                    	    // Objcm.g:604:32: COMMA classical_expr_wrp3
                    	    {
                    	    COMMA347=(Token)match(input,COMMA,FOLLOW_COMMA_in_array_init3090); 
                    	    COMMA347_tree = 
                    	    (Object)adaptor.create(COMMA347)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA347_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init3092);
                    	    classical_expr_wrp3348=classical_expr_wrp3();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp3348.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop83;
                        }
                    } while (true);


                    }
                    break;

            }


            R_FBR349=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array_init3098); 
            R_FBR349_tree = 
            (Object)adaptor.create(R_FBR349)
            ;
            adaptor.addChild(root_0, R_FBR349_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class classical_expr_wrp3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp3"
    // Objcm.g:607:1: classical_expr_wrp3 : ( array_init_wrapper | classical_expr_wrp );
    public final ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3() throws RecognitionException {
        ObjcmParser.classical_expr_wrp3_return retval = new ObjcmParser.classical_expr_wrp3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.array_init_wrapper_return array_init_wrapper350 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp351 =null;



        try {
            // Objcm.g:608:2: ( array_init_wrapper | classical_expr_wrp )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==L_FBR) ) {
                alt85=1;
            }
            else if ( (LA85_0==ASTERISK||LA85_0==ID||LA85_0==L_AND||LA85_0==L_BR||LA85_0==L_KBR||LA85_0==L_MINUS||LA85_0==L_MINUS_MINUS||LA85_0==L_NOT||LA85_0==L_PLUS||LA85_0==L_PLUS_PLUS||LA85_0==L_TILDA||LA85_0==NUMBER||LA85_0==SIZEOF||(LA85_0 >= STRING_LITERAL && LA85_0 <= STRING_LITERAL3)||LA85_0==166||LA85_0==173||LA85_0==175||LA85_0==179||LA85_0==182||LA85_0==185||LA85_0==193||(LA85_0 >= 195 && LA85_0 <= 196)||LA85_0==201) ) {
                alt85=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;

            }
            switch (alt85) {
                case 1 :
                    // Objcm.g:608:4: array_init_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_init_wrapper_in_classical_expr_wrp33110);
                    array_init_wrapper350=array_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init_wrapper350.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:609:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_classical_expr_wrp33116);
                    classical_expr_wrp351=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp351.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp3"


    public static class classical_expr_wrp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp"
    // Objcm.g:612:1: classical_expr_wrp : classical_expr -> ^( CLASSICAL_EXPR classical_expr ) ;
    public final ObjcmParser.classical_expr_wrp_return classical_expr_wrp() throws RecognitionException {
        ObjcmParser.classical_expr_wrp_return retval = new ObjcmParser.classical_expr_wrp_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_return classical_expr352 =null;


        RewriteRuleSubtreeStream stream_classical_expr=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr");
        try {
            // Objcm.g:613:2: ( classical_expr -> ^( CLASSICAL_EXPR classical_expr ) )
            // Objcm.g:613:4: classical_expr
            {
            pushFollow(FOLLOW_classical_expr_in_classical_expr_wrp3129);
            classical_expr352=classical_expr();

            state._fsp--;

            stream_classical_expr.add(classical_expr352.getTree());

            // AST REWRITE
            // elements: classical_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 613:19: -> ^( CLASSICAL_EXPR classical_expr )
            {
                // Objcm.g:613:22: ^( CLASSICAL_EXPR classical_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR, "CLASSICAL_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp"


    public static class classical_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr"
    // Objcm.g:615:1: classical_expr : simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr_return classical_expr() throws RecognitionException {
        ObjcmParser.classical_expr_return retval = new ObjcmParser.classical_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper353 =null;

        ObjcmParser.expr_question_wrapper_return expr_question_wrapper354 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper355 =null;



        try {
            // Objcm.g:616:2: ( simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? )
            // Objcm.g:616:4: simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_simple_expr_wrapper_in_classical_expr3146);
            simple_expr_wrapper353=simple_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, simple_expr_wrapper353.getTree());

            // Objcm.g:616:24: ( expr_question_wrapper | expr_assign_wrapper )?
            int alt86=3;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==L_QUESTION) ) {
                alt86=1;
            }
            else if ( (LA86_0==L_AND_EQ||(LA86_0 >= L_DIV_EQ && LA86_0 <= L_EQ)||LA86_0==L_LEFT_EQ||LA86_0==L_MINUS_EQ||LA86_0==L_MULT_EQ||LA86_0==L_OR_EQ||LA86_0==L_PERC_EQ||LA86_0==L_PLUS_EQ||LA86_0==L_RIGHT_EQ||LA86_0==L_XOR_EQ) ) {
                alt86=2;
            }
            switch (alt86) {
                case 1 :
                    // Objcm.g:616:25: expr_question_wrapper
                    {
                    pushFollow(FOLLOW_expr_question_wrapper_in_classical_expr3149);
                    expr_question_wrapper354=expr_question_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_question_wrapper354.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:616:49: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr3153);
                    expr_assign_wrapper355=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper355.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr"


    public static class classical_expr_wrp2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp2"
    // Objcm.g:618:1: classical_expr_wrp2 : classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) ;
    public final ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2() throws RecognitionException {
        ObjcmParser.classical_expr_wrp2_return retval = new ObjcmParser.classical_expr_wrp2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr2_return classical_expr2356 =null;


        RewriteRuleSubtreeStream stream_classical_expr2=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr2");
        try {
            // Objcm.g:619:2: ( classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) )
            // Objcm.g:619:4: classical_expr2
            {
            pushFollow(FOLLOW_classical_expr2_in_classical_expr_wrp23165);
            classical_expr2356=classical_expr2();

            state._fsp--;

            stream_classical_expr2.add(classical_expr2356.getTree());

            // AST REWRITE
            // elements: classical_expr2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 619:20: -> ^( CLASSICAL_EXPR_2 classical_expr2 )
            {
                // Objcm.g:619:23: ^( CLASSICAL_EXPR_2 classical_expr2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR_2, "CLASSICAL_EXPR_2")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp2"


    public static class classical_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr2"
    // Objcm.g:621:1: classical_expr2 : ( object_name | func_pointer1 ) ( expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr2_return classical_expr2() throws RecognitionException {
        ObjcmParser.classical_expr2_return retval = new ObjcmParser.classical_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_name_return object_name357 =null;

        ObjcmParser.func_pointer1_return func_pointer1358 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper359 =null;



        try {
            // Objcm.g:622:2: ( ( object_name | func_pointer1 ) ( expr_assign_wrapper )? )
            // Objcm.g:622:4: ( object_name | func_pointer1 ) ( expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:622:4: ( object_name | func_pointer1 )
            int alt87=2;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // Objcm.g:622:5: object_name
                    {
                    pushFollow(FOLLOW_object_name_in_classical_expr23183);
                    object_name357=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name357.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:622:19: func_pointer1
                    {
                    pushFollow(FOLLOW_func_pointer1_in_classical_expr23187);
                    func_pointer1358=func_pointer1();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer1358.getTree());

                    }
                    break;

            }


            // Objcm.g:622:34: ( expr_assign_wrapper )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==L_AND_EQ||(LA88_0 >= L_DIV_EQ && LA88_0 <= L_EQ)||LA88_0==L_LEFT_EQ||LA88_0==L_MINUS_EQ||LA88_0==L_MULT_EQ||LA88_0==L_OR_EQ||LA88_0==L_PERC_EQ||LA88_0==L_PLUS_EQ||LA88_0==L_RIGHT_EQ||LA88_0==L_XOR_EQ) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // Objcm.g:622:34: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr23190);
                    expr_assign_wrapper359=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper359.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr2"


    public static class expr_question_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question_wrapper"
    // Objcm.g:624:1: expr_question_wrapper : expr_question -> ^( EXPR_QUESTION expr_question ) ;
    public final ObjcmParser.expr_question_wrapper_return expr_question_wrapper() throws RecognitionException {
        ObjcmParser.expr_question_wrapper_return retval = new ObjcmParser.expr_question_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_question_return expr_question360 =null;


        RewriteRuleSubtreeStream stream_expr_question=new RewriteRuleSubtreeStream(adaptor,"rule expr_question");
        try {
            // Objcm.g:625:2: ( expr_question -> ^( EXPR_QUESTION expr_question ) )
            // Objcm.g:625:4: expr_question
            {
            pushFollow(FOLLOW_expr_question_in_expr_question_wrapper3200);
            expr_question360=expr_question();

            state._fsp--;

            stream_expr_question.add(expr_question360.getTree());

            // AST REWRITE
            // elements: expr_question
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 625:18: -> ^( EXPR_QUESTION expr_question )
            {
                // Objcm.g:625:21: ^( EXPR_QUESTION expr_question )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_QUESTION, "EXPR_QUESTION")
                , root_1);

                adaptor.addChild(root_1, stream_expr_question.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question_wrapper"


    public static class expr_question_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question"
    // Objcm.g:627:1: expr_question : L_QUESTION classical_expr_wrp COLON classical_expr_wrp ;
    public final ObjcmParser.expr_question_return expr_question() throws RecognitionException {
        ObjcmParser.expr_question_return retval = new ObjcmParser.expr_question_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_QUESTION361=null;
        Token COLON363=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp362 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp364 =null;


        Object L_QUESTION361_tree=null;
        Object COLON363_tree=null;

        try {
            // Objcm.g:628:2: ( L_QUESTION classical_expr_wrp COLON classical_expr_wrp )
            // Objcm.g:628:4: L_QUESTION classical_expr_wrp COLON classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            L_QUESTION361=(Token)match(input,L_QUESTION,FOLLOW_L_QUESTION_in_expr_question3217); 
            L_QUESTION361_tree = 
            (Object)adaptor.create(L_QUESTION361)
            ;
            adaptor.addChild(root_0, L_QUESTION361_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question3219);
            classical_expr_wrp362=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp362.getTree());

            COLON363=(Token)match(input,COLON,FOLLOW_COLON_in_expr_question3221); 
            COLON363_tree = 
            (Object)adaptor.create(COLON363)
            ;
            adaptor.addChild(root_0, COLON363_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question3223);
            classical_expr_wrp364=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp364.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question"


    public static class assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign_wrapper"
    // Objcm.g:630:1: assign_wrapper : assign -> ^( ASSIGN assign ) ;
    public final ObjcmParser.assign_wrapper_return assign_wrapper() throws RecognitionException {
        ObjcmParser.assign_wrapper_return retval = new ObjcmParser.assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_return assign365 =null;


        RewriteRuleSubtreeStream stream_assign=new RewriteRuleSubtreeStream(adaptor,"rule assign");
        try {
            // Objcm.g:631:2: ( assign -> ^( ASSIGN assign ) )
            // Objcm.g:631:4: assign
            {
            pushFollow(FOLLOW_assign_in_assign_wrapper3232);
            assign365=assign();

            state._fsp--;

            stream_assign.add(assign365.getTree());

            // AST REWRITE
            // elements: assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 631:11: -> ^( ASSIGN assign )
            {
                // Objcm.g:631:14: ^( ASSIGN assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ASSIGN, "ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign_wrapper"


    public static class assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign"
    // Objcm.g:633:1: assign : ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ );
    public final ObjcmParser.assign_return assign() throws RecognitionException {
        ObjcmParser.assign_return retval = new ObjcmParser.assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set366=null;

        Object set366_tree=null;

        try {
            // Objcm.g:634:2: ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set366=(Token)input.LT(1);

            if ( input.LA(1)==L_AND_EQ||(input.LA(1) >= L_DIV_EQ && input.LA(1) <= L_EQ)||input.LA(1)==L_LEFT_EQ||input.LA(1)==L_MINUS_EQ||input.LA(1)==L_MULT_EQ||input.LA(1)==L_OR_EQ||input.LA(1)==L_PERC_EQ||input.LA(1)==L_PLUS_EQ||input.LA(1)==L_RIGHT_EQ||input.LA(1)==L_XOR_EQ ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set366)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign"


    public static class simple_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr_wrapper"
    // Objcm.g:638:1: simple_expr_wrapper : simple_expr -> ^( SIMPLE_EXPR simple_expr ) ;
    public final ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper() throws RecognitionException {
        ObjcmParser.simple_expr_wrapper_return retval = new ObjcmParser.simple_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_return simple_expr367 =null;


        RewriteRuleSubtreeStream stream_simple_expr=new RewriteRuleSubtreeStream(adaptor,"rule simple_expr");
        try {
            // Objcm.g:639:2: ( simple_expr -> ^( SIMPLE_EXPR simple_expr ) )
            // Objcm.g:639:4: simple_expr
            {
            pushFollow(FOLLOW_simple_expr_in_simple_expr_wrapper3306);
            simple_expr367=simple_expr();

            state._fsp--;

            stream_simple_expr.add(simple_expr367.getTree());

            // AST REWRITE
            // elements: simple_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 639:16: -> ^( SIMPLE_EXPR simple_expr )
            {
                // Objcm.g:639:19: ^( SIMPLE_EXPR simple_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SIMPLE_EXPR, "SIMPLE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr_wrapper"


    public static class simple_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr"
    // Objcm.g:641:1: simple_expr : expr_or_or -> ^( EXPR_OR_OR expr_or_or ) ;
    public final ObjcmParser.simple_expr_return simple_expr() throws RecognitionException {
        ObjcmParser.simple_expr_return retval = new ObjcmParser.simple_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_or_return expr_or_or368 =null;


        RewriteRuleSubtreeStream stream_expr_or_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or_or");
        try {
            // Objcm.g:642:2: ( expr_or_or -> ^( EXPR_OR_OR expr_or_or ) )
            // Objcm.g:642:4: expr_or_or
            {
            pushFollow(FOLLOW_expr_or_or_in_simple_expr3324);
            expr_or_or368=expr_or_or();

            state._fsp--;

            stream_expr_or_or.add(expr_or_or368.getTree());

            // AST REWRITE
            // elements: expr_or_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 642:15: -> ^( EXPR_OR_OR expr_or_or )
            {
                // Objcm.g:642:18: ^( EXPR_OR_OR expr_or_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR_OR, "EXPR_OR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr"


    public static class expr_or_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_or"
    // Objcm.g:644:1: expr_or_or : expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_or_or_return expr_or_or() throws RecognitionException {
        ObjcmParser.expr_or_or_return retval = new ObjcmParser.expr_or_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR_OR370=null;
        ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper369 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper371 =null;


        Object L_OR_OR370_tree=null;

        try {
            // Objcm.g:645:2: ( expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )* )
            // Objcm.g:645:4: expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_and_wrapper_in_expr_or_or3341);
            expr_and_and_wrapper369=expr_and_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_and_wrapper369.getTree());

            // Objcm.g:645:25: ( L_OR_OR simple_expr_wrapper )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==L_OR_OR) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // Objcm.g:645:26: L_OR_OR simple_expr_wrapper
            	    {
            	    L_OR_OR370=(Token)match(input,L_OR_OR,FOLLOW_L_OR_OR_in_expr_or_or3344); 
            	    L_OR_OR370_tree = 
            	    (Object)adaptor.create(L_OR_OR370)
            	    ;
            	    adaptor.addChild(root_0, L_OR_OR370_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_or_or3346);
            	    simple_expr_wrapper371=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper371.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_or"


    public static class expr_and_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and_wrapper"
    // Objcm.g:647:1: expr_and_and_wrapper : expr_and_and -> ^( EXPR_AND_AND expr_and_and ) ;
    public final ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_and_wrapper_return retval = new ObjcmParser.expr_and_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_and_return expr_and_and372 =null;


        RewriteRuleSubtreeStream stream_expr_and_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and_and");
        try {
            // Objcm.g:648:2: ( expr_and_and -> ^( EXPR_AND_AND expr_and_and ) )
            // Objcm.g:648:4: expr_and_and
            {
            pushFollow(FOLLOW_expr_and_and_in_expr_and_and_wrapper3357);
            expr_and_and372=expr_and_and();

            state._fsp--;

            stream_expr_and_and.add(expr_and_and372.getTree());

            // AST REWRITE
            // elements: expr_and_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 648:17: -> ^( EXPR_AND_AND expr_and_and )
            {
                // Objcm.g:648:20: ^( EXPR_AND_AND expr_and_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND_AND, "EXPR_AND_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and_wrapper"


    public static class expr_and_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and"
    // Objcm.g:650:1: expr_and_and : expr_or_wrapper ( L_AND_AND simple_expr_wrapper )* ;
    public final ObjcmParser.expr_and_and_return expr_and_and() throws RecognitionException {
        ObjcmParser.expr_and_and_return retval = new ObjcmParser.expr_and_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND_AND374=null;
        ObjcmParser.expr_or_wrapper_return expr_or_wrapper373 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper375 =null;


        Object L_AND_AND374_tree=null;

        try {
            // Objcm.g:651:2: ( expr_or_wrapper ( L_AND_AND simple_expr_wrapper )* )
            // Objcm.g:651:4: expr_or_wrapper ( L_AND_AND simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_or_wrapper_in_expr_and_and3374);
            expr_or_wrapper373=expr_or_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_or_wrapper373.getTree());

            // Objcm.g:651:20: ( L_AND_AND simple_expr_wrapper )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==L_AND_AND) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // Objcm.g:651:21: L_AND_AND simple_expr_wrapper
            	    {
            	    L_AND_AND374=(Token)match(input,L_AND_AND,FOLLOW_L_AND_AND_in_expr_and_and3377); 
            	    L_AND_AND374_tree = 
            	    (Object)adaptor.create(L_AND_AND374)
            	    ;
            	    adaptor.addChild(root_0, L_AND_AND374_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_and_and3379);
            	    simple_expr_wrapper375=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper375.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and"


    public static class expr_or_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_wrapper"
    // Objcm.g:653:1: expr_or_wrapper : expr_or -> ^( EXPR_OR expr_or ) ;
    public final ObjcmParser.expr_or_wrapper_return expr_or_wrapper() throws RecognitionException {
        ObjcmParser.expr_or_wrapper_return retval = new ObjcmParser.expr_or_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_return expr_or376 =null;


        RewriteRuleSubtreeStream stream_expr_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or");
        try {
            // Objcm.g:654:2: ( expr_or -> ^( EXPR_OR expr_or ) )
            // Objcm.g:654:4: expr_or
            {
            pushFollow(FOLLOW_expr_or_in_expr_or_wrapper3390);
            expr_or376=expr_or();

            state._fsp--;

            stream_expr_or.add(expr_or376.getTree());

            // AST REWRITE
            // elements: expr_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 654:12: -> ^( EXPR_OR expr_or )
            {
                // Objcm.g:654:15: ^( EXPR_OR expr_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR, "EXPR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_wrapper"


    public static class expr_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or"
    // Objcm.g:656:1: expr_or : expr_xor_wrapper ( L_OR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_or_return expr_or() throws RecognitionException {
        ObjcmParser.expr_or_return retval = new ObjcmParser.expr_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR378=null;
        ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper377 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper379 =null;


        Object L_OR378_tree=null;

        try {
            // Objcm.g:657:2: ( expr_xor_wrapper ( L_OR simple_expr_wrapper )* )
            // Objcm.g:657:4: expr_xor_wrapper ( L_OR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_xor_wrapper_in_expr_or3408);
            expr_xor_wrapper377=expr_xor_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_xor_wrapper377.getTree());

            // Objcm.g:657:21: ( L_OR simple_expr_wrapper )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==L_OR) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // Objcm.g:657:22: L_OR simple_expr_wrapper
            	    {
            	    L_OR378=(Token)match(input,L_OR,FOLLOW_L_OR_in_expr_or3411); 
            	    L_OR378_tree = 
            	    (Object)adaptor.create(L_OR378)
            	    ;
            	    adaptor.addChild(root_0, L_OR378_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_or3413);
            	    simple_expr_wrapper379=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper379.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or"


    public static class expr_xor_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor_wrapper"
    // Objcm.g:659:1: expr_xor_wrapper : expr_xor -> ^( EXPR_XOR expr_xor ) ;
    public final ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper() throws RecognitionException {
        ObjcmParser.expr_xor_wrapper_return retval = new ObjcmParser.expr_xor_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_xor_return expr_xor380 =null;


        RewriteRuleSubtreeStream stream_expr_xor=new RewriteRuleSubtreeStream(adaptor,"rule expr_xor");
        try {
            // Objcm.g:660:2: ( expr_xor -> ^( EXPR_XOR expr_xor ) )
            // Objcm.g:660:4: expr_xor
            {
            pushFollow(FOLLOW_expr_xor_in_expr_xor_wrapper3424);
            expr_xor380=expr_xor();

            state._fsp--;

            stream_expr_xor.add(expr_xor380.getTree());

            // AST REWRITE
            // elements: expr_xor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 660:13: -> ^( EXPR_XOR expr_xor )
            {
                // Objcm.g:660:16: ^( EXPR_XOR expr_xor )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_XOR, "EXPR_XOR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_xor.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor_wrapper"


    public static class expr_xor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor"
    // Objcm.g:662:1: expr_xor : expr_and_wrapper ( L_XOR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_xor_return expr_xor() throws RecognitionException {
        ObjcmParser.expr_xor_return retval = new ObjcmParser.expr_xor_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_XOR382=null;
        ObjcmParser.expr_and_wrapper_return expr_and_wrapper381 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper383 =null;


        Object L_XOR382_tree=null;

        try {
            // Objcm.g:663:2: ( expr_and_wrapper ( L_XOR simple_expr_wrapper )* )
            // Objcm.g:663:4: expr_and_wrapper ( L_XOR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_wrapper_in_expr_xor3441);
            expr_and_wrapper381=expr_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_wrapper381.getTree());

            // Objcm.g:663:21: ( L_XOR simple_expr_wrapper )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==L_XOR) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // Objcm.g:663:22: L_XOR simple_expr_wrapper
            	    {
            	    L_XOR382=(Token)match(input,L_XOR,FOLLOW_L_XOR_in_expr_xor3444); 
            	    L_XOR382_tree = 
            	    (Object)adaptor.create(L_XOR382)
            	    ;
            	    adaptor.addChild(root_0, L_XOR382_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_xor3446);
            	    simple_expr_wrapper383=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper383.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor"


    public static class expr_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_wrapper"
    // Objcm.g:665:1: expr_and_wrapper : expr_and -> ^( EXPR_AND expr_and ) ;
    public final ObjcmParser.expr_and_wrapper_return expr_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_wrapper_return retval = new ObjcmParser.expr_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_return expr_and384 =null;


        RewriteRuleSubtreeStream stream_expr_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and");
        try {
            // Objcm.g:666:2: ( expr_and -> ^( EXPR_AND expr_and ) )
            // Objcm.g:666:4: expr_and
            {
            pushFollow(FOLLOW_expr_and_in_expr_and_wrapper3458);
            expr_and384=expr_and();

            state._fsp--;

            stream_expr_and.add(expr_and384.getTree());

            // AST REWRITE
            // elements: expr_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 666:13: -> ^( EXPR_AND expr_and )
            {
                // Objcm.g:666:16: ^( EXPR_AND expr_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND, "EXPR_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_wrapper"


    public static class expr_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and"
    // Objcm.g:668:1: expr_and : expr_eq_wrapper ( L_AND simple_expr_wrapper )* ;
    public final ObjcmParser.expr_and_return expr_and() throws RecognitionException {
        ObjcmParser.expr_and_return retval = new ObjcmParser.expr_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND386=null;
        ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper385 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper387 =null;


        Object L_AND386_tree=null;

        try {
            // Objcm.g:669:2: ( expr_eq_wrapper ( L_AND simple_expr_wrapper )* )
            // Objcm.g:669:4: expr_eq_wrapper ( L_AND simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_eq_wrapper_in_expr_and3476);
            expr_eq_wrapper385=expr_eq_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_eq_wrapper385.getTree());

            // Objcm.g:669:20: ( L_AND simple_expr_wrapper )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==L_AND) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // Objcm.g:669:21: L_AND simple_expr_wrapper
            	    {
            	    L_AND386=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_and3479); 
            	    L_AND386_tree = 
            	    (Object)adaptor.create(L_AND386)
            	    ;
            	    adaptor.addChild(root_0, L_AND386_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_and3481);
            	    simple_expr_wrapper387=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper387.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and"


    public static class expr_eq_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq_wrapper"
    // Objcm.g:671:1: expr_eq_wrapper : expr_eq -> ^( EXPR_EQ expr_eq ) ;
    public final ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper() throws RecognitionException {
        ObjcmParser.expr_eq_wrapper_return retval = new ObjcmParser.expr_eq_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_eq_return expr_eq388 =null;


        RewriteRuleSubtreeStream stream_expr_eq=new RewriteRuleSubtreeStream(adaptor,"rule expr_eq");
        try {
            // Objcm.g:672:2: ( expr_eq -> ^( EXPR_EQ expr_eq ) )
            // Objcm.g:672:4: expr_eq
            {
            pushFollow(FOLLOW_expr_eq_in_expr_eq_wrapper3493);
            expr_eq388=expr_eq();

            state._fsp--;

            stream_expr_eq.add(expr_eq388.getTree());

            // AST REWRITE
            // elements: expr_eq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 672:12: -> ^( EXPR_EQ expr_eq )
            {
                // Objcm.g:672:15: ^( EXPR_EQ expr_eq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_EQ, "EXPR_EQ")
                , root_1);

                adaptor.addChild(root_1, stream_expr_eq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq_wrapper"


    public static class expr_eq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq"
    // Objcm.g:674:1: expr_eq : expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_eq_return expr_eq() throws RecognitionException {
        ObjcmParser.expr_eq_return retval = new ObjcmParser.expr_eq_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set390=null;
        ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper389 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper391 =null;


        Object set390_tree=null;

        try {
            // Objcm.g:675:2: ( expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )* )
            // Objcm.g:675:4: expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_cond_wrapper_in_expr_eq3511);
            expr_cond_wrapper389=expr_cond_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_cond_wrapper389.getTree());

            // Objcm.g:675:22: ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==L_EQ_EQ||LA94_0==L_NEQ) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // Objcm.g:675:23: ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper
            	    {
            	    set390=(Token)input.LT(1);

            	    if ( input.LA(1)==L_EQ_EQ||input.LA(1)==L_NEQ ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set390)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_eq3522);
            	    simple_expr_wrapper391=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper391.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq"


    public static class expr_cond_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond_wrapper"
    // Objcm.g:677:1: expr_cond_wrapper : expr_cond -> ^( EXPR_COND expr_cond ) ;
    public final ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper() throws RecognitionException {
        ObjcmParser.expr_cond_wrapper_return retval = new ObjcmParser.expr_cond_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_cond_return expr_cond392 =null;


        RewriteRuleSubtreeStream stream_expr_cond=new RewriteRuleSubtreeStream(adaptor,"rule expr_cond");
        try {
            // Objcm.g:678:2: ( expr_cond -> ^( EXPR_COND expr_cond ) )
            // Objcm.g:678:4: expr_cond
            {
            pushFollow(FOLLOW_expr_cond_in_expr_cond_wrapper3533);
            expr_cond392=expr_cond();

            state._fsp--;

            stream_expr_cond.add(expr_cond392.getTree());

            // AST REWRITE
            // elements: expr_cond
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 678:14: -> ^( EXPR_COND expr_cond )
            {
                // Objcm.g:678:17: ^( EXPR_COND expr_cond )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_COND, "EXPR_COND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_cond.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond_wrapper"


    public static class expr_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond"
    // Objcm.g:680:1: expr_cond : expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_cond_return expr_cond() throws RecognitionException {
        ObjcmParser.expr_cond_return retval = new ObjcmParser.expr_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set394=null;
        ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper393 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper395 =null;


        Object set394_tree=null;

        try {
            // Objcm.g:681:2: ( expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )* )
            // Objcm.g:681:4: expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mov_wrapper_in_expr_cond3550);
            expr_mov_wrapper393=expr_mov_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mov_wrapper393.getTree());

            // Objcm.g:681:21: ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( ((LA95_0 >= L_LESS && LA95_0 <= L_LESS_EQ)||(LA95_0 >= L_MORE && LA95_0 <= L_MORE_EQ)) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // Objcm.g:681:22: ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper
            	    {
            	    set394=(Token)input.LT(1);

            	    if ( (input.LA(1) >= L_LESS && input.LA(1) <= L_LESS_EQ)||(input.LA(1) >= L_MORE && input.LA(1) <= L_MORE_EQ) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set394)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_cond3569);
            	    simple_expr_wrapper395=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper395.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond"


    public static class expr_mov_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov_wrapper"
    // Objcm.g:683:1: expr_mov_wrapper : expr_mov -> ^( EXPR_MOV expr_mov ) ;
    public final ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper() throws RecognitionException {
        ObjcmParser.expr_mov_wrapper_return retval = new ObjcmParser.expr_mov_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mov_return expr_mov396 =null;


        RewriteRuleSubtreeStream stream_expr_mov=new RewriteRuleSubtreeStream(adaptor,"rule expr_mov");
        try {
            // Objcm.g:684:2: ( expr_mov -> ^( EXPR_MOV expr_mov ) )
            // Objcm.g:684:4: expr_mov
            {
            pushFollow(FOLLOW_expr_mov_in_expr_mov_wrapper3580);
            expr_mov396=expr_mov();

            state._fsp--;

            stream_expr_mov.add(expr_mov396.getTree());

            // AST REWRITE
            // elements: expr_mov
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 684:13: -> ^( EXPR_MOV expr_mov )
            {
                // Objcm.g:684:16: ^( EXPR_MOV expr_mov )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MOV, "EXPR_MOV")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mov.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov_wrapper"


    public static class expr_mov_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov"
    // Objcm.g:686:1: expr_mov : expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_mov_return expr_mov() throws RecognitionException {
        ObjcmParser.expr_mov_return retval = new ObjcmParser.expr_mov_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set398=null;
        ObjcmParser.expr_add_wrapper_return expr_add_wrapper397 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper399 =null;


        Object set398_tree=null;

        try {
            // Objcm.g:687:2: ( expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )* )
            // Objcm.g:687:4: expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_add_wrapper_in_expr_mov3598);
            expr_add_wrapper397=expr_add_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_add_wrapper397.getTree());

            // Objcm.g:687:21: ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==L_LEFT||LA96_0==L_RIGHT) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // Objcm.g:687:22: ( L_LEFT | L_RIGHT ) simple_expr_wrapper
            	    {
            	    set398=(Token)input.LT(1);

            	    if ( input.LA(1)==L_LEFT||input.LA(1)==L_RIGHT ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set398)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_mov3609);
            	    simple_expr_wrapper399=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper399.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov"


    public static class expr_add_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add_wrapper"
    // Objcm.g:689:1: expr_add_wrapper : expr_add -> ^( EXPR_ADD expr_add ) ;
    public final ObjcmParser.expr_add_wrapper_return expr_add_wrapper() throws RecognitionException {
        ObjcmParser.expr_add_wrapper_return retval = new ObjcmParser.expr_add_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_add_return expr_add400 =null;


        RewriteRuleSubtreeStream stream_expr_add=new RewriteRuleSubtreeStream(adaptor,"rule expr_add");
        try {
            // Objcm.g:690:2: ( expr_add -> ^( EXPR_ADD expr_add ) )
            // Objcm.g:690:4: expr_add
            {
            pushFollow(FOLLOW_expr_add_in_expr_add_wrapper3621);
            expr_add400=expr_add();

            state._fsp--;

            stream_expr_add.add(expr_add400.getTree());

            // AST REWRITE
            // elements: expr_add
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 690:13: -> ^( EXPR_ADD expr_add )
            {
                // Objcm.g:690:16: ^( EXPR_ADD expr_add )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ADD, "EXPR_ADD")
                , root_1);

                adaptor.addChild(root_1, stream_expr_add.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add_wrapper"


    public static class expr_add_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add"
    // Objcm.g:692:1: expr_add : expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_add_return expr_add() throws RecognitionException {
        ObjcmParser.expr_add_return retval = new ObjcmParser.expr_add_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set402=null;
        ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper401 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper403 =null;


        Object set402_tree=null;

        try {
            // Objcm.g:693:2: ( expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )* )
            // Objcm.g:693:4: expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mult_wrapper_in_expr_add3638);
            expr_mult_wrapper401=expr_mult_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mult_wrapper401.getTree());

            // Objcm.g:693:22: ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==L_MINUS||LA97_0==L_PLUS) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // Objcm.g:693:23: ( L_PLUS | L_MINUS ) simple_expr_wrapper
            	    {
            	    set402=(Token)input.LT(1);

            	    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set402)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_add3649);
            	    simple_expr_wrapper403=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper403.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add"


    public static class expr_mult_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult_wrapper"
    // Objcm.g:695:1: expr_mult_wrapper : expr_mult -> ^( EXPR_MULT expr_mult ) ;
    public final ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper() throws RecognitionException {
        ObjcmParser.expr_mult_wrapper_return retval = new ObjcmParser.expr_mult_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mult_return expr_mult404 =null;


        RewriteRuleSubtreeStream stream_expr_mult=new RewriteRuleSubtreeStream(adaptor,"rule expr_mult");
        try {
            // Objcm.g:696:2: ( expr_mult -> ^( EXPR_MULT expr_mult ) )
            // Objcm.g:696:4: expr_mult
            {
            pushFollow(FOLLOW_expr_mult_in_expr_mult_wrapper3660);
            expr_mult404=expr_mult();

            state._fsp--;

            stream_expr_mult.add(expr_mult404.getTree());

            // AST REWRITE
            // elements: expr_mult
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 696:14: -> ^( EXPR_MULT expr_mult )
            {
                // Objcm.g:696:17: ^( EXPR_MULT expr_mult )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MULT, "EXPR_MULT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mult.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult_wrapper"


    public static class expr_mult_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult"
    // Objcm.g:698:1: expr_mult : expr_unname_wrapper ( ( ASTERISK | L_DIV | L_PERC ) expr_unname_wrapper )* ;
    public final ObjcmParser.expr_mult_return expr_mult() throws RecognitionException {
        ObjcmParser.expr_mult_return retval = new ObjcmParser.expr_mult_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set406=null;
        ObjcmParser.expr_unname_wrapper_return expr_unname_wrapper405 =null;

        ObjcmParser.expr_unname_wrapper_return expr_unname_wrapper407 =null;


        Object set406_tree=null;

        try {
            // Objcm.g:699:2: ( expr_unname_wrapper ( ( ASTERISK | L_DIV | L_PERC ) expr_unname_wrapper )* )
            // Objcm.g:699:4: expr_unname_wrapper ( ( ASTERISK | L_DIV | L_PERC ) expr_unname_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_unname_wrapper_in_expr_mult3677);
            expr_unname_wrapper405=expr_unname_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_unname_wrapper405.getTree());

            // Objcm.g:699:24: ( ( ASTERISK | L_DIV | L_PERC ) expr_unname_wrapper )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==ASTERISK||LA98_0==L_DIV||LA98_0==L_PERC) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // Objcm.g:699:25: ( ASTERISK | L_DIV | L_PERC ) expr_unname_wrapper
            	    {
            	    set406=(Token)input.LT(1);

            	    if ( input.LA(1)==ASTERISK||input.LA(1)==L_DIV||input.LA(1)==L_PERC ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set406)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_expr_unname_wrapper_in_expr_mult3692);
            	    expr_unname_wrapper407=expr_unname_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, expr_unname_wrapper407.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult"


    public static class expr_unname_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_unname_wrapper"
    // Objcm.g:701:1: expr_unname_wrapper : expr_unname -> ^( EXPR_UNNAME expr_unname ) ;
    public final ObjcmParser.expr_unname_wrapper_return expr_unname_wrapper() throws RecognitionException {
        ObjcmParser.expr_unname_wrapper_return retval = new ObjcmParser.expr_unname_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_unname_return expr_unname408 =null;


        RewriteRuleSubtreeStream stream_expr_unname=new RewriteRuleSubtreeStream(adaptor,"rule expr_unname");
        try {
            // Objcm.g:702:2: ( expr_unname -> ^( EXPR_UNNAME expr_unname ) )
            // Objcm.g:702:4: expr_unname
            {
            pushFollow(FOLLOW_expr_unname_in_expr_unname_wrapper3704);
            expr_unname408=expr_unname();

            state._fsp--;

            stream_expr_unname.add(expr_unname408.getTree());

            // AST REWRITE
            // elements: expr_unname
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 702:16: -> ^( EXPR_UNNAME expr_unname )
            {
                // Objcm.g:702:19: ^( EXPR_UNNAME expr_unname )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_UNNAME, "EXPR_UNNAME")
                , root_1);

                adaptor.addChild(root_1, stream_expr_unname.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_unname_wrapper"


    public static class expr_unname_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_unname"
    // Objcm.g:704:1: expr_unname : ( ASTERISK ( type_convertion )? )? expr_addr ;
    public final ObjcmParser.expr_unname_return expr_unname() throws RecognitionException {
        ObjcmParser.expr_unname_return retval = new ObjcmParser.expr_unname_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK409=null;
        ObjcmParser.type_convertion_return type_convertion410 =null;

        ObjcmParser.expr_addr_return expr_addr411 =null;


        Object ASTERISK409_tree=null;

        try {
            // Objcm.g:705:2: ( ( ASTERISK ( type_convertion )? )? expr_addr )
            // Objcm.g:705:4: ( ASTERISK ( type_convertion )? )? expr_addr
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:705:4: ( ASTERISK ( type_convertion )? )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==ASTERISK) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // Objcm.g:705:5: ASTERISK ( type_convertion )?
                    {
                    ASTERISK409=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_expr_unname3725); 
                    ASTERISK409_tree = 
                    (Object)adaptor.create(ASTERISK409)
                    ;
                    adaptor.addChild(root_0, ASTERISK409_tree);


                    // Objcm.g:705:14: ( type_convertion )?
                    int alt99=2;
                    alt99 = dfa99.predict(input);
                    switch (alt99) {
                        case 1 :
                            // Objcm.g:705:14: type_convertion
                            {
                            pushFollow(FOLLOW_type_convertion_in_expr_unname3727);
                            type_convertion410=type_convertion();

                            state._fsp--;

                            adaptor.addChild(root_0, type_convertion410.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_addr_in_expr_unname3732);
            expr_addr411=expr_addr();

            state._fsp--;

            adaptor.addChild(root_0, expr_addr411.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_unname"


    public static class expr_addr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_addr"
    // Objcm.g:707:1: expr_addr : ( L_AND )? expr_sign ;
    public final ObjcmParser.expr_addr_return expr_addr() throws RecognitionException {
        ObjcmParser.expr_addr_return retval = new ObjcmParser.expr_addr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND412=null;
        ObjcmParser.expr_sign_return expr_sign413 =null;


        Object L_AND412_tree=null;

        try {
            // Objcm.g:708:2: ( ( L_AND )? expr_sign )
            // Objcm.g:708:4: ( L_AND )? expr_sign
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:708:4: ( L_AND )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==L_AND) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // Objcm.g:708:4: L_AND
                    {
                    L_AND412=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_addr3742); 
                    L_AND412_tree = 
                    (Object)adaptor.create(L_AND412)
                    ;
                    adaptor.addChild(root_0, L_AND412_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_sign_in_expr_addr3745);
            expr_sign413=expr_sign();

            state._fsp--;

            adaptor.addChild(root_0, expr_sign413.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_addr"


    public static class expr_sign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_sign"
    // Objcm.g:710:1: expr_sign : ( L_MINUS | L_PLUS )? expr_not_wrapper ;
    public final ObjcmParser.expr_sign_return expr_sign() throws RecognitionException {
        ObjcmParser.expr_sign_return retval = new ObjcmParser.expr_sign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set414=null;
        ObjcmParser.expr_not_wrapper_return expr_not_wrapper415 =null;


        Object set414_tree=null;

        try {
            // Objcm.g:711:2: ( ( L_MINUS | L_PLUS )? expr_not_wrapper )
            // Objcm.g:711:4: ( L_MINUS | L_PLUS )? expr_not_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:711:4: ( L_MINUS | L_PLUS )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==L_MINUS||LA102_0==L_PLUS) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // Objcm.g:
                    {
                    set414=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set414)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not_wrapper_in_expr_sign3764);
            expr_not_wrapper415=expr_not_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_not_wrapper415.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_sign"


    public static class expr_not_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not_wrapper"
    // Objcm.g:713:1: expr_not_wrapper : expr_not -> ^( EXPR_NOT expr_not ) ;
    public final ObjcmParser.expr_not_wrapper_return expr_not_wrapper() throws RecognitionException {
        ObjcmParser.expr_not_wrapper_return retval = new ObjcmParser.expr_not_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_not_return expr_not416 =null;


        RewriteRuleSubtreeStream stream_expr_not=new RewriteRuleSubtreeStream(adaptor,"rule expr_not");
        try {
            // Objcm.g:714:2: ( expr_not -> ^( EXPR_NOT expr_not ) )
            // Objcm.g:714:4: expr_not
            {
            pushFollow(FOLLOW_expr_not_in_expr_not_wrapper3774);
            expr_not416=expr_not();

            state._fsp--;

            stream_expr_not.add(expr_not416.getTree());

            // AST REWRITE
            // elements: expr_not
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 714:13: -> ^( EXPR_NOT expr_not )
            {
                // Objcm.g:714:16: ^( EXPR_NOT expr_not )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_not.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not_wrapper"


    public static class expr_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not"
    // Objcm.g:716:1: expr_not : ( L_NOT )? expr_not2 ;
    public final ObjcmParser.expr_not_return expr_not() throws RecognitionException {
        ObjcmParser.expr_not_return retval = new ObjcmParser.expr_not_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_NOT417=null;
        ObjcmParser.expr_not2_return expr_not2418 =null;


        Object L_NOT417_tree=null;

        try {
            // Objcm.g:717:2: ( ( L_NOT )? expr_not2 )
            // Objcm.g:717:4: ( L_NOT )? expr_not2
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:717:4: ( L_NOT )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==L_NOT) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // Objcm.g:717:4: L_NOT
                    {
                    L_NOT417=(Token)match(input,L_NOT,FOLLOW_L_NOT_in_expr_not3793); 
                    L_NOT417_tree = 
                    (Object)adaptor.create(L_NOT417)
                    ;
                    adaptor.addChild(root_0, L_NOT417_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not2_in_expr_not3796);
            expr_not2418=expr_not2();

            state._fsp--;

            adaptor.addChild(root_0, expr_not2418.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not"


    public static class expr_not2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not2"
    // Objcm.g:719:1: expr_not2 : ( L_TILDA )? expr_size_of ;
    public final ObjcmParser.expr_not2_return expr_not2() throws RecognitionException {
        ObjcmParser.expr_not2_return retval = new ObjcmParser.expr_not2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_TILDA419=null;
        ObjcmParser.expr_size_of_return expr_size_of420 =null;


        Object L_TILDA419_tree=null;

        try {
            // Objcm.g:720:2: ( ( L_TILDA )? expr_size_of )
            // Objcm.g:720:4: ( L_TILDA )? expr_size_of
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:720:4: ( L_TILDA )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==L_TILDA) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // Objcm.g:720:4: L_TILDA
                    {
                    L_TILDA419=(Token)match(input,L_TILDA,FOLLOW_L_TILDA_in_expr_not23806); 
                    L_TILDA419_tree = 
                    (Object)adaptor.create(L_TILDA419)
                    ;
                    adaptor.addChild(root_0, L_TILDA419_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_size_of_in_expr_not23809);
            expr_size_of420=expr_size_of();

            state._fsp--;

            adaptor.addChild(root_0, expr_size_of420.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not2"


    public static class expr_size_of_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_size_of"
    // Objcm.g:722:1: expr_size_of : ( SIZEOF )? expr_xcrement ;
    public final ObjcmParser.expr_size_of_return expr_size_of() throws RecognitionException {
        ObjcmParser.expr_size_of_return retval = new ObjcmParser.expr_size_of_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SIZEOF421=null;
        ObjcmParser.expr_xcrement_return expr_xcrement422 =null;


        Object SIZEOF421_tree=null;

        try {
            // Objcm.g:723:2: ( ( SIZEOF )? expr_xcrement )
            // Objcm.g:723:4: ( SIZEOF )? expr_xcrement
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:723:4: ( SIZEOF )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==SIZEOF) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // Objcm.g:723:4: SIZEOF
                    {
                    SIZEOF421=(Token)match(input,SIZEOF,FOLLOW_SIZEOF_in_expr_size_of3819); 
                    SIZEOF421_tree = 
                    (Object)adaptor.create(SIZEOF421)
                    ;
                    adaptor.addChild(root_0, SIZEOF421_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_xcrement_in_expr_size_of3822);
            expr_xcrement422=expr_xcrement();

            state._fsp--;

            adaptor.addChild(root_0, expr_xcrement422.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_size_of"


    public static class expr_xcrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xcrement"
    // Objcm.g:725:1: expr_xcrement : ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 ;
    public final ObjcmParser.expr_xcrement_return expr_xcrement() throws RecognitionException {
        ObjcmParser.expr_xcrement_return retval = new ObjcmParser.expr_xcrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set423=null;
        ObjcmParser.object_wrapped1_return object_wrapped1424 =null;


        Object set423_tree=null;

        try {
            // Objcm.g:726:2: ( ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 )
            // Objcm.g:726:4: ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:726:4: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==L_MINUS_MINUS||LA106_0==L_PLUS_PLUS) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // Objcm.g:
                    {
                    set423=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set423)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_object_wrapped1_in_expr_xcrement3841);
            object_wrapped1424=object_wrapped1();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped1424.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xcrement"


    public static class object_wrapped1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped1"
    // Objcm.g:728:1: object_wrapped1 : object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? ;
    public final ObjcmParser.object_wrapped1_return object_wrapped1() throws RecognitionException {
        ObjcmParser.object_wrapped1_return retval = new ObjcmParser.object_wrapped1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set426=null;
        ObjcmParser.object_wrapped2_return object_wrapped2425 =null;


        Object set426_tree=null;

        try {
            // Objcm.g:729:2: ( object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? )
            // Objcm.g:729:4: object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapped2_in_object_wrapped13851);
            object_wrapped2425=object_wrapped2();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped2425.getTree());

            // Objcm.g:729:20: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==L_MINUS_MINUS||LA107_0==L_PLUS_PLUS) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // Objcm.g:
                    {
                    set426=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set426)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped1"


    public static class object_wrapped2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped2"
    // Objcm.g:732:1: object_wrapped2 : ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR l_br_end | const_expr_wrapper | a_started );
    public final ObjcmParser.object_wrapped2_return object_wrapped2() throws RecognitionException {
        ObjcmParser.object_wrapped2_return retval = new ObjcmParser.object_wrapped2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal427=null;
        Token L_BR432=null;
        ObjcmParser.object_name_return object_name428 =null;

        ObjcmParser.generic_return generic429 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper430 =null;

        ObjcmParser.id_part_end_return id_part_end431 =null;

        ObjcmParser.l_br_end_return l_br_end433 =null;

        ObjcmParser.const_expr_wrapper_return const_expr_wrapper434 =null;

        ObjcmParser.a_started_return a_started435 =null;


        Object string_literal427_tree=null;
        Object L_BR432_tree=null;

        try {
            // Objcm.g:733:2: ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR l_br_end | const_expr_wrapper | a_started )
            int alt111=5;
            switch ( input.LA(1) ) {
            case ID:
            case 182:
            case 185:
            case 193:
            case 196:
            case 201:
                {
                alt111=1;
                }
                break;
            case L_KBR:
                {
                alt111=2;
                }
                break;
            case L_BR:
                {
                alt111=3;
                }
                break;
            case NUMBER:
            case STRING_LITERAL:
            case STRING_LITERAL2:
            case STRING_LITERAL3:
            case 179:
            case 195:
                {
                alt111=4;
                }
                break;
            case 166:
            case 173:
            case 175:
                {
                alt111=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }

            switch (alt111) {
                case 1 :
                    // Objcm.g:733:5: ( 'unsigned' )? object_name ( generic )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:733:5: ( 'unsigned' )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==201) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // Objcm.g:733:5: 'unsigned'
                            {
                            string_literal427=(Token)match(input,201,FOLLOW_201_in_object_wrapped23872); 
                            string_literal427_tree = 
                            (Object)adaptor.create(string_literal427)
                            ;
                            adaptor.addChild(root_0, string_literal427_tree);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_object_name_in_object_wrapped23875);
                    object_name428=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name428.getTree());

                    // Objcm.g:733:29: ( generic )?
                    int alt109=2;
                    alt109 = dfa109.predict(input);
                    switch (alt109) {
                        case 1 :
                            // Objcm.g:733:29: generic
                            {
                            pushFollow(FOLLOW_generic_in_object_wrapped23877);
                            generic429=generic();

                            state._fsp--;

                            adaptor.addChild(root_0, generic429.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:734:4: method_call_wrapper ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapped23883);
                    method_call_wrapper430=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper430.getTree());

                    // Objcm.g:734:24: ( id_part_end )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==DOT||LA110_0==163) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // Objcm.g:734:24: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23885);
                            id_part_end431=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end431.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // Objcm.g:735:4: L_BR l_br_end
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR432=(Token)match(input,L_BR,FOLLOW_L_BR_in_object_wrapped23891); 
                    L_BR432_tree = 
                    (Object)adaptor.create(L_BR432)
                    ;
                    adaptor.addChild(root_0, L_BR432_tree);


                    pushFollow(FOLLOW_l_br_end_in_object_wrapped23893);
                    l_br_end433=l_br_end();

                    state._fsp--;

                    adaptor.addChild(root_0, l_br_end433.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:736:4: const_expr_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_wrapper_in_object_wrapped23899);
                    const_expr_wrapper434=const_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr_wrapper434.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:737:4: a_started
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_started_in_object_wrapped23904);
                    a_started435=a_started();

                    state._fsp--;

                    adaptor.addChild(root_0, a_started435.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped2"


    public static class l_br_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "l_br_end"
    // Objcm.g:740:1: l_br_end : ( type_convertion_internal_wrapper R_BR classical_expr_wrp | classical_expr_wrp R_BR ( id_part_end )? );
    public final ObjcmParser.l_br_end_return l_br_end() throws RecognitionException {
        ObjcmParser.l_br_end_return retval = new ObjcmParser.l_br_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token R_BR437=null;
        Token R_BR440=null;
        ObjcmParser.type_convertion_internal_wrapper_return type_convertion_internal_wrapper436 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp438 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp439 =null;

        ObjcmParser.id_part_end_return id_part_end441 =null;


        Object R_BR437_tree=null;
        Object R_BR440_tree=null;

        try {
            // Objcm.g:740:9: ( type_convertion_internal_wrapper R_BR classical_expr_wrp | classical_expr_wrp R_BR ( id_part_end )? )
            int alt113=2;
            alt113 = dfa113.predict(input);
            switch (alt113) {
                case 1 :
                    // Objcm.g:740:11: type_convertion_internal_wrapper R_BR classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_convertion_internal_wrapper_in_l_br_end3913);
                    type_convertion_internal_wrapper436=type_convertion_internal_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion_internal_wrapper436.getTree());

                    R_BR437=(Token)match(input,R_BR,FOLLOW_R_BR_in_l_br_end3915); 
                    R_BR437_tree = 
                    (Object)adaptor.create(R_BR437)
                    ;
                    adaptor.addChild(root_0, R_BR437_tree);


                    pushFollow(FOLLOW_classical_expr_wrp_in_l_br_end3917);
                    classical_expr_wrp438=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp438.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:741:4: classical_expr_wrp R_BR ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_l_br_end3922);
                    classical_expr_wrp439=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp439.getTree());

                    R_BR440=(Token)match(input,R_BR,FOLLOW_R_BR_in_l_br_end3924); 
                    R_BR440_tree = 
                    (Object)adaptor.create(R_BR440)
                    ;
                    adaptor.addChild(root_0, R_BR440_tree);


                    // Objcm.g:741:28: ( id_part_end )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==DOT||LA112_0==163) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // Objcm.g:741:28: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_l_br_end3926);
                            id_part_end441=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end441.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "l_br_end"


    public static class function_brackets_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets_wrapper"
    // Objcm.g:744:1: function_brackets_wrapper : function_brackets -> ^( FUNCTION function_brackets ) ;
    public final ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper() throws RecognitionException {
        ObjcmParser.function_brackets_wrapper_return retval = new ObjcmParser.function_brackets_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.function_brackets_return function_brackets442 =null;


        RewriteRuleSubtreeStream stream_function_brackets=new RewriteRuleSubtreeStream(adaptor,"rule function_brackets");
        try {
            // Objcm.g:745:2: ( function_brackets -> ^( FUNCTION function_brackets ) )
            // Objcm.g:745:4: function_brackets
            {
            pushFollow(FOLLOW_function_brackets_in_function_brackets_wrapper3940);
            function_brackets442=function_brackets();

            state._fsp--;

            stream_function_brackets.add(function_brackets442.getTree());

            // AST REWRITE
            // elements: function_brackets
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 745:22: -> ^( FUNCTION function_brackets )
            {
                // Objcm.g:745:25: ^( FUNCTION function_brackets )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNCTION, "FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_function_brackets.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets_wrapper"


    public static class function_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets"
    // Objcm.g:747:1: function_brackets : L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.function_brackets_return function_brackets() throws RecognitionException {
        ObjcmParser.function_brackets_return retval = new ObjcmParser.function_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR443=null;
        Token COMMA445=null;
        Token R_BR447=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp444 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp446 =null;


        Object L_BR443_tree=null;
        Object COMMA445_tree=null;
        Object R_BR447_tree=null;

        try {
            // Objcm.g:748:2: ( L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR )
            // Objcm.g:748:4: L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR443=(Token)match(input,L_BR,FOLLOW_L_BR_in_function_brackets3959); 
            L_BR443_tree = 
            (Object)adaptor.create(L_BR443)
            ;
            adaptor.addChild(root_0, L_BR443_tree);


            // Objcm.g:748:9: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==ASTERISK||LA115_0==ID||LA115_0==L_AND||LA115_0==L_BR||LA115_0==L_KBR||LA115_0==L_MINUS||LA115_0==L_MINUS_MINUS||LA115_0==L_NOT||LA115_0==L_PLUS||LA115_0==L_PLUS_PLUS||LA115_0==L_TILDA||LA115_0==NUMBER||LA115_0==SIZEOF||(LA115_0 >= STRING_LITERAL && LA115_0 <= STRING_LITERAL3)||LA115_0==166||LA115_0==173||LA115_0==175||LA115_0==179||LA115_0==182||LA115_0==185||LA115_0==193||(LA115_0 >= 195 && LA115_0 <= 196)||LA115_0==201) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // Objcm.g:748:10: classical_expr_wrp ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets3962);
                    classical_expr_wrp444=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp444.getTree());

                    // Objcm.g:748:29: ( COMMA classical_expr_wrp )*
                    loop114:
                    do {
                        int alt114=2;
                        int LA114_0 = input.LA(1);

                        if ( (LA114_0==COMMA) ) {
                            alt114=1;
                        }


                        switch (alt114) {
                    	case 1 :
                    	    // Objcm.g:748:30: COMMA classical_expr_wrp
                    	    {
                    	    COMMA445=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_brackets3965); 
                    	    COMMA445_tree = 
                    	    (Object)adaptor.create(COMMA445)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA445_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets3967);
                    	    classical_expr_wrp446=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp446.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop114;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR447=(Token)match(input,R_BR,FOLLOW_R_BR_in_function_brackets3973); 
            R_BR447_tree = 
            (Object)adaptor.create(R_BR447)
            ;
            adaptor.addChild(root_0, R_BR447_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets"


    public static class index_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_wrapper"
    // Objcm.g:750:1: index_wrapper : index -> ^( INDEX index ) ;
    public final ObjcmParser.index_wrapper_return index_wrapper() throws RecognitionException {
        ObjcmParser.index_wrapper_return retval = new ObjcmParser.index_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.index_return index448 =null;


        RewriteRuleSubtreeStream stream_index=new RewriteRuleSubtreeStream(adaptor,"rule index");
        try {
            // Objcm.g:751:2: ( index -> ^( INDEX index ) )
            // Objcm.g:751:4: index
            {
            pushFollow(FOLLOW_index_in_index_wrapper3983);
            index448=index();

            state._fsp--;

            stream_index.add(index448.getTree());

            // AST REWRITE
            // elements: index
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 751:10: -> ^( INDEX index )
            {
                // Objcm.g:751:13: ^( INDEX index )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INDEX, "INDEX")
                , root_1);

                adaptor.addChild(root_1, stream_index.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_wrapper"


    public static class index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index"
    // Objcm.g:753:1: index : L_KBR ( index_number_wrapper )? R_KBR ;
    public final ObjcmParser.index_return index() throws RecognitionException {
        ObjcmParser.index_return retval = new ObjcmParser.index_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR449=null;
        Token R_KBR451=null;
        ObjcmParser.index_number_wrapper_return index_number_wrapper450 =null;


        Object L_KBR449_tree=null;
        Object R_KBR451_tree=null;

        try {
            // Objcm.g:753:7: ( L_KBR ( index_number_wrapper )? R_KBR )
            // Objcm.g:753:9: L_KBR ( index_number_wrapper )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR449=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index4000); 
            L_KBR449_tree = 
            (Object)adaptor.create(L_KBR449)
            ;
            adaptor.addChild(root_0, L_KBR449_tree);


            // Objcm.g:753:15: ( index_number_wrapper )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==ASTERISK||LA116_0==ID||LA116_0==L_AND||LA116_0==L_BR||LA116_0==L_KBR||LA116_0==L_MINUS||LA116_0==L_MINUS_MINUS||LA116_0==L_NOT||LA116_0==L_PLUS||LA116_0==L_PLUS_PLUS||LA116_0==L_TILDA||LA116_0==NUMBER||LA116_0==SIZEOF||(LA116_0 >= STRING_LITERAL && LA116_0 <= STRING_LITERAL3)||LA116_0==166||LA116_0==173||LA116_0==175||LA116_0==179||LA116_0==182||LA116_0==185||LA116_0==193||(LA116_0 >= 195 && LA116_0 <= 196)||LA116_0==201) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // Objcm.g:753:15: index_number_wrapper
                    {
                    pushFollow(FOLLOW_index_number_wrapper_in_index4002);
                    index_number_wrapper450=index_number_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, index_number_wrapper450.getTree());

                    }
                    break;

            }


            R_KBR451=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index4005); 
            R_KBR451_tree = 
            (Object)adaptor.create(R_KBR451)
            ;
            adaptor.addChild(root_0, R_KBR451_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index"


    public static class index_number_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_number_wrapper"
    // Objcm.g:755:1: index_number_wrapper : classical_expr_wrp -> ^( INDEX_NUMBER classical_expr_wrp ) ;
    public final ObjcmParser.index_number_wrapper_return index_number_wrapper() throws RecognitionException {
        ObjcmParser.index_number_wrapper_return retval = new ObjcmParser.index_number_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp452 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:756:2: ( classical_expr_wrp -> ^( INDEX_NUMBER classical_expr_wrp ) )
            // Objcm.g:756:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_index_number_wrapper4014);
            classical_expr_wrp452=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp452.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 756:23: -> ^( INDEX_NUMBER classical_expr_wrp )
            {
                // Objcm.g:756:26: ^( INDEX_NUMBER classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INDEX_NUMBER, "INDEX_NUMBER")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_number_wrapper"


    public static class struct_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init"
    // Objcm.g:758:1: struct_init : L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init_return struct_init() throws RecognitionException {
        ObjcmParser.struct_init_return retval = new ObjcmParser.struct_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR453=null;
        Token STRUCT_PREFIX454=null;
        Token ID455=null;
        Token R_BR456=null;
        Token L_FBR457=null;
        Token COMMA459=null;
        Token R_FBR461=null;
        ObjcmParser.struct_init_line_return struct_init_line458 =null;

        ObjcmParser.struct_init_line_return struct_init_line460 =null;


        Object L_BR453_tree=null;
        Object STRUCT_PREFIX454_tree=null;
        Object ID455_tree=null;
        Object R_BR456_tree=null;
        Object L_FBR457_tree=null;
        Object COMMA459_tree=null;
        Object R_FBR461_tree=null;

        try {
            // Objcm.g:759:2: ( L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // Objcm.g:759:4: L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_BR453=(Token)match(input,L_BR,FOLLOW_L_BR_in_struct_init4031); 
            L_BR453_tree = 
            (Object)adaptor.create(L_BR453)
            ;
            adaptor.addChild(root_0, L_BR453_tree);


            // Objcm.g:759:10: ( STRUCT_PREFIX )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==STRUCT_PREFIX) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // Objcm.g:759:10: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX454=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_init4034); 
                    STRUCT_PREFIX454_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX454)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX454_tree);


                    }
                    break;

            }


            ID455=(Token)match(input,ID,FOLLOW_ID_in_struct_init4037); 
            ID455_tree = 
            (Object)adaptor.create(ID455)
            ;
            adaptor.addChild(root_0, ID455_tree);


            R_BR456=(Token)match(input,R_BR,FOLLOW_R_BR_in_struct_init4040); 
            R_BR456_tree = 
            (Object)adaptor.create(R_BR456)
            ;
            adaptor.addChild(root_0, R_BR456_tree);


            L_FBR457=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init4043); 
            L_FBR457_tree = 
            (Object)adaptor.create(L_FBR457)
            ;
            adaptor.addChild(root_0, L_FBR457_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init4049);
            struct_init_line458=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line458.getTree());

            // Objcm.g:760:21: ( COMMA struct_init_line )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==COMMA) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // Objcm.g:760:22: COMMA struct_init_line
            	    {
            	    COMMA459=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init4052); 
            	    COMMA459_tree = 
            	    (Object)adaptor.create(COMMA459)
            	    ;
            	    adaptor.addChild(root_0, COMMA459_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init4055);
            	    struct_init_line460=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line460.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            R_FBR461=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init4061); 
            R_FBR461_tree = 
            (Object)adaptor.create(R_FBR461)
            ;
            adaptor.addChild(root_0, R_FBR461_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init"


    public static class struct_init2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init2"
    // Objcm.g:764:1: struct_init2 : L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init2_return struct_init2() throws RecognitionException {
        ObjcmParser.struct_init2_return retval = new ObjcmParser.struct_init2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR462=null;
        Token COMMA464=null;
        Token R_FBR466=null;
        ObjcmParser.struct_init_line_return struct_init_line463 =null;

        ObjcmParser.struct_init_line_return struct_init_line465 =null;


        Object L_FBR462_tree=null;
        Object COMMA464_tree=null;
        Object R_FBR466_tree=null;

        try {
            // Objcm.g:765:2: ( L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // Objcm.g:765:4: L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR462=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init24075); 
            L_FBR462_tree = 
            (Object)adaptor.create(L_FBR462)
            ;
            adaptor.addChild(root_0, L_FBR462_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init24081);
            struct_init_line463=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line463.getTree());

            // Objcm.g:766:21: ( COMMA struct_init_line )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==COMMA) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // Objcm.g:766:22: COMMA struct_init_line
            	    {
            	    COMMA464=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init24084); 
            	    COMMA464_tree = 
            	    (Object)adaptor.create(COMMA464)
            	    ;
            	    adaptor.addChild(root_0, COMMA464_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init24087);
            	    struct_init_line465=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line465.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            R_FBR466=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init24093); 
            R_FBR466_tree = 
            (Object)adaptor.create(R_FBR466)
            ;
            adaptor.addChild(root_0, R_FBR466_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init2"


    public static class struct_init_line_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_line"
    // Objcm.g:770:1: struct_init_line : ( struct_init_var | struct_init_expression );
    public final ObjcmParser.struct_init_line_return struct_init_line() throws RecognitionException {
        ObjcmParser.struct_init_line_return retval = new ObjcmParser.struct_init_line_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_init_var_return struct_init_var467 =null;

        ObjcmParser.struct_init_expression_return struct_init_expression468 =null;



        try {
            // Objcm.g:771:2: ( struct_init_var | struct_init_expression )
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==DOT) ) {
                alt120=1;
            }
            else if ( (LA120_0==ASTERISK||LA120_0==ID||LA120_0==L_AND||LA120_0==L_BR||LA120_0==L_KBR||LA120_0==L_MINUS||LA120_0==L_MINUS_MINUS||LA120_0==L_NOT||LA120_0==L_PLUS||LA120_0==L_PLUS_PLUS||LA120_0==L_TILDA||LA120_0==NUMBER||LA120_0==SIZEOF||(LA120_0 >= STRING_LITERAL && LA120_0 <= STRING_LITERAL3)||LA120_0==166||LA120_0==173||LA120_0==175||LA120_0==179||LA120_0==182||LA120_0==185||LA120_0==193||(LA120_0 >= 195 && LA120_0 <= 196)||LA120_0==201) ) {
                alt120=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;

            }
            switch (alt120) {
                case 1 :
                    // Objcm.g:771:4: struct_init_var
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_var_in_struct_init_line4106);
                    struct_init_var467=struct_init_var();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_var467.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:772:4: struct_init_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_expression_in_struct_init_line4111);
                    struct_init_expression468=struct_init_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_expression468.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_line"


    public static class struct_init_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_expression"
    // Objcm.g:775:1: struct_init_expression : classical_expr_wrp ;
    public final ObjcmParser.struct_init_expression_return struct_init_expression() throws RecognitionException {
        ObjcmParser.struct_init_expression_return retval = new ObjcmParser.struct_init_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp469 =null;



        try {
            // Objcm.g:776:2: ( classical_expr_wrp )
            // Objcm.g:776:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_expression4124);
            classical_expr_wrp469=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp469.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_expression"


    public static class struct_init_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_method"
    // Objcm.g:778:1: struct_init_method : classical_expr_wrp ;
    public final ObjcmParser.struct_init_method_return struct_init_method() throws RecognitionException {
        ObjcmParser.struct_init_method_return retval = new ObjcmParser.struct_init_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp470 =null;



        try {
            // Objcm.g:779:2: ( classical_expr_wrp )
            // Objcm.g:779:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_method4135);
            classical_expr_wrp470=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp470.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_method"


    public static class struct_init_var_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_var"
    // Objcm.g:781:1: struct_init_var : ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) ;
    public final ObjcmParser.struct_init_var_return struct_init_var() throws RecognitionException {
        ObjcmParser.struct_init_var_return retval = new ObjcmParser.struct_init_var_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT471=null;
        Token L_EQ473=null;
        ObjcmParser.id_part_return id_part472 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets474 =null;

        ObjcmParser.expression_return expression475 =null;


        Object DOT471_tree=null;
        Object L_EQ473_tree=null;

        try {
            // Objcm.g:782:2: ( ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) )
            // Objcm.g:782:4: ( DOT id_part )+ L_EQ ( in_q_brackets | expression )
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:782:4: ( DOT id_part )+
            int cnt121=0;
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==DOT) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // Objcm.g:782:5: DOT id_part
            	    {
            	    DOT471=(Token)match(input,DOT,FOLLOW_DOT_in_struct_init_var4147); 
            	    DOT471_tree = 
            	    (Object)adaptor.create(DOT471)
            	    ;
            	    adaptor.addChild(root_0, DOT471_tree);


            	    pushFollow(FOLLOW_id_part_in_struct_init_var4149);
            	    id_part472=id_part();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part472.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt121 >= 1 ) break loop121;
                        EarlyExitException eee =
                            new EarlyExitException(121, input);
                        throw eee;
                }
                cnt121++;
            } while (true);


            L_EQ473=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_struct_init_var4154); 
            L_EQ473_tree = 
            (Object)adaptor.create(L_EQ473)
            ;
            adaptor.addChild(root_0, L_EQ473_tree);


            // Objcm.g:782:26: ( in_q_brackets | expression )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==L_FBR) ) {
                alt122=1;
            }
            else if ( (LA122_0==ASTERISK||LA122_0==ID||LA122_0==L_AND||LA122_0==L_BR||LA122_0==L_KBR||LA122_0==L_MINUS||LA122_0==L_MINUS_MINUS||LA122_0==L_NOT||LA122_0==L_PLUS||LA122_0==L_PLUS_PLUS||LA122_0==L_TILDA||LA122_0==NUMBER||LA122_0==SIZEOF||(LA122_0 >= STRING_LITERAL && LA122_0 <= STRING_LITERAL3)||LA122_0==166||LA122_0==173||LA122_0==175||LA122_0==179||LA122_0==182||LA122_0==185||LA122_0==193||(LA122_0 >= 195 && LA122_0 <= 196)||LA122_0==201) ) {
                alt122=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;

            }
            switch (alt122) {
                case 1 :
                    // Objcm.g:782:27: in_q_brackets
                    {
                    pushFollow(FOLLOW_in_q_brackets_in_struct_init_var4158);
                    in_q_brackets474=in_q_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, in_q_brackets474.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:782:43: expression
                    {
                    pushFollow(FOLLOW_expression_in_struct_init_var4162);
                    expression475=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression475.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_var"


    public static class a_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_started"
    // Objcm.g:784:1: a_started : ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper );
    public final ObjcmParser.a_started_return a_started() throws RecognitionException {
        ObjcmParser.a_started_return retval = new ObjcmParser.a_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_wrapper_return a_selector_wrapper476 =null;

        ObjcmParser.a_encode_wrapper_return a_encode_wrapper477 =null;

        ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper478 =null;



        try {
            // Objcm.g:785:2: ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper )
            int alt123=3;
            switch ( input.LA(1) ) {
            case 175:
                {
                alt123=1;
                }
                break;
            case 166:
                {
                alt123=2;
                }
                break;
            case 173:
                {
                alt123=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;

            }

            switch (alt123) {
                case 1 :
                    // Objcm.g:785:4: a_selector_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_selector_wrapper_in_a_started4174);
                    a_selector_wrapper476=a_selector_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_selector_wrapper476.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:786:4: a_encode_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_encode_wrapper_in_a_started4179);
                    a_encode_wrapper477=a_encode_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_encode_wrapper477.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:787:4: a_protocol_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_protocol_wrapper_in_a_started4184);
                    a_protocol_wrapper478=a_protocol_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_protocol_wrapper478.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_started"


    public static class typeof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof"
    // Objcm.g:790:1: typeof : '__typeof__' L_BR ID R_BR ;
    public final ObjcmParser.typeof_return typeof() throws RecognitionException {
        ObjcmParser.typeof_return retval = new ObjcmParser.typeof_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal479=null;
        Token L_BR480=null;
        Token ID481=null;
        Token R_BR482=null;

        Object string_literal479_tree=null;
        Object L_BR480_tree=null;
        Object ID481_tree=null;
        Object R_BR482_tree=null;

        try {
            // Objcm.g:790:8: ( '__typeof__' L_BR ID R_BR )
            // Objcm.g:790:10: '__typeof__' L_BR ID R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal479=(Token)match(input,181,FOLLOW_181_in_typeof4194); 
            string_literal479_tree = 
            (Object)adaptor.create(string_literal479)
            ;
            adaptor.addChild(root_0, string_literal479_tree);


            L_BR480=(Token)match(input,L_BR,FOLLOW_L_BR_in_typeof4197); 
            L_BR480_tree = 
            (Object)adaptor.create(L_BR480)
            ;
            adaptor.addChild(root_0, L_BR480_tree);


            ID481=(Token)match(input,ID,FOLLOW_ID_in_typeof4200); 
            ID481_tree = 
            (Object)adaptor.create(ID481)
            ;
            adaptor.addChild(root_0, ID481_tree);


            R_BR482=(Token)match(input,R_BR,FOLLOW_R_BR_in_typeof4203); 
            R_BR482_tree = 
            (Object)adaptor.create(R_BR482)
            ;
            adaptor.addChild(root_0, R_BR482_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof"


    public static class a_selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_wrapper"
    // Objcm.g:792:1: a_selector_wrapper : a_selector -> ^( SELECTOR a_selector ) ;
    public final ObjcmParser.a_selector_wrapper_return a_selector_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_wrapper_return retval = new ObjcmParser.a_selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_return a_selector483 =null;


        RewriteRuleSubtreeStream stream_a_selector=new RewriteRuleSubtreeStream(adaptor,"rule a_selector");
        try {
            // Objcm.g:793:2: ( a_selector -> ^( SELECTOR a_selector ) )
            // Objcm.g:793:4: a_selector
            {
            pushFollow(FOLLOW_a_selector_in_a_selector_wrapper4214);
            a_selector483=a_selector();

            state._fsp--;

            stream_a_selector.add(a_selector483.getTree());

            // AST REWRITE
            // elements: a_selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 793:15: -> ^( SELECTOR a_selector )
            {
                // Objcm.g:793:18: ^( SELECTOR a_selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR, "SELECTOR")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_wrapper"


    public static class a_selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector"
    // Objcm.g:795:1: a_selector : '@selector' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_selector_return a_selector() throws RecognitionException {
        ObjcmParser.a_selector_return retval = new ObjcmParser.a_selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal484=null;
        Token L_BR485=null;
        Token R_BR487=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper486 =null;


        Object string_literal484_tree=null;
        Object L_BR485_tree=null;
        Object R_BR487_tree=null;

        try {
            // Objcm.g:795:11: ( '@selector' L_BR a_selector_value_wrapper R_BR )
            // Objcm.g:795:13: '@selector' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal484=(Token)match(input,175,FOLLOW_175_in_a_selector4231); 
            string_literal484_tree = 
            (Object)adaptor.create(string_literal484)
            ;
            adaptor.addChild(root_0, string_literal484_tree);


            L_BR485=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_selector4233); 
            L_BR485_tree = 
            (Object)adaptor.create(L_BR485)
            ;
            adaptor.addChild(root_0, L_BR485_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_selector4235);
            a_selector_value_wrapper486=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper486.getTree());

            R_BR487=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_selector4237); 
            R_BR487_tree = 
            (Object)adaptor.create(R_BR487)
            ;
            adaptor.addChild(root_0, R_BR487_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector"


    public static class a_protocol_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol_wrapper"
    // Objcm.g:797:1: a_protocol_wrapper : a_protocol -> ^( PROTOCOL a_protocol ) ;
    public final ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper() throws RecognitionException {
        ObjcmParser.a_protocol_wrapper_return retval = new ObjcmParser.a_protocol_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_protocol_return a_protocol488 =null;


        RewriteRuleSubtreeStream stream_a_protocol=new RewriteRuleSubtreeStream(adaptor,"rule a_protocol");
        try {
            // Objcm.g:798:2: ( a_protocol -> ^( PROTOCOL a_protocol ) )
            // Objcm.g:798:4: a_protocol
            {
            pushFollow(FOLLOW_a_protocol_in_a_protocol_wrapper4247);
            a_protocol488=a_protocol();

            state._fsp--;

            stream_a_protocol.add(a_protocol488.getTree());

            // AST REWRITE
            // elements: a_protocol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 798:15: -> ^( PROTOCOL a_protocol )
            {
                // Objcm.g:798:18: ^( PROTOCOL a_protocol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_a_protocol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol_wrapper"


    public static class a_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol"
    // Objcm.g:800:1: a_protocol : '@protocol' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_protocol_return a_protocol() throws RecognitionException {
        ObjcmParser.a_protocol_return retval = new ObjcmParser.a_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal489=null;
        Token L_BR490=null;
        Token R_BR492=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper491 =null;


        Object string_literal489_tree=null;
        Object L_BR490_tree=null;
        Object R_BR492_tree=null;

        try {
            // Objcm.g:801:2: ( '@protocol' L_BR a_selector_value_wrapper R_BR )
            // Objcm.g:801:4: '@protocol' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal489=(Token)match(input,173,FOLLOW_173_in_a_protocol4265); 
            string_literal489_tree = 
            (Object)adaptor.create(string_literal489)
            ;
            adaptor.addChild(root_0, string_literal489_tree);


            L_BR490=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_protocol4267); 
            L_BR490_tree = 
            (Object)adaptor.create(L_BR490)
            ;
            adaptor.addChild(root_0, L_BR490_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_protocol4269);
            a_selector_value_wrapper491=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper491.getTree());

            R_BR492=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_protocol4271); 
            R_BR492_tree = 
            (Object)adaptor.create(R_BR492)
            ;
            adaptor.addChild(root_0, R_BR492_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol"


    public static class a_encode_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode_wrapper"
    // Objcm.g:803:1: a_encode_wrapper : a_encode -> ^( ENCODE a_encode ) ;
    public final ObjcmParser.a_encode_wrapper_return a_encode_wrapper() throws RecognitionException {
        ObjcmParser.a_encode_wrapper_return retval = new ObjcmParser.a_encode_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_encode_return a_encode493 =null;


        RewriteRuleSubtreeStream stream_a_encode=new RewriteRuleSubtreeStream(adaptor,"rule a_encode");
        try {
            // Objcm.g:804:2: ( a_encode -> ^( ENCODE a_encode ) )
            // Objcm.g:804:4: a_encode
            {
            pushFollow(FOLLOW_a_encode_in_a_encode_wrapper4281);
            a_encode493=a_encode();

            state._fsp--;

            stream_a_encode.add(a_encode493.getTree());

            // AST REWRITE
            // elements: a_encode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 804:13: -> ^( ENCODE a_encode )
            {
                // Objcm.g:804:16: ^( ENCODE a_encode )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENCODE, "ENCODE")
                , root_1);

                adaptor.addChild(root_1, stream_a_encode.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode_wrapper"


    public static class a_encode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode"
    // Objcm.g:806:1: a_encode : '@encode' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_encode_return a_encode() throws RecognitionException {
        ObjcmParser.a_encode_return retval = new ObjcmParser.a_encode_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal494=null;
        Token L_BR495=null;
        Token R_BR497=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper496 =null;


        Object string_literal494_tree=null;
        Object L_BR495_tree=null;
        Object R_BR497_tree=null;

        try {
            // Objcm.g:806:9: ( '@encode' L_BR a_selector_value_wrapper R_BR )
            // Objcm.g:806:11: '@encode' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal494=(Token)match(input,166,FOLLOW_166_in_a_encode4297); 
            string_literal494_tree = 
            (Object)adaptor.create(string_literal494)
            ;
            adaptor.addChild(root_0, string_literal494_tree);


            L_BR495=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_encode4299); 
            L_BR495_tree = 
            (Object)adaptor.create(L_BR495)
            ;
            adaptor.addChild(root_0, L_BR495_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_encode4301);
            a_selector_value_wrapper496=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper496.getTree());

            R_BR497=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_encode4303); 
            R_BR497_tree = 
            (Object)adaptor.create(R_BR497)
            ;
            adaptor.addChild(root_0, R_BR497_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode"


    public static class a_selector_value_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value_wrapper"
    // Objcm.g:809:1: a_selector_value_wrapper : a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) ;
    public final ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_value_wrapper_return retval = new ObjcmParser.a_selector_value_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_value_return a_selector_value498 =null;


        RewriteRuleSubtreeStream stream_a_selector_value=new RewriteRuleSubtreeStream(adaptor,"rule a_selector_value");
        try {
            // Objcm.g:810:2: ( a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) )
            // Objcm.g:810:4: a_selector_value
            {
            pushFollow(FOLLOW_a_selector_value_in_a_selector_value_wrapper4314);
            a_selector_value498=a_selector_value();

            state._fsp--;

            stream_a_selector_value.add(a_selector_value498.getTree());

            // AST REWRITE
            // elements: a_selector_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 810:21: -> ^( SELECTOR_VALUE a_selector_value )
            {
                // Objcm.g:810:24: ^( SELECTOR_VALUE a_selector_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR_VALUE, "SELECTOR_VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value_wrapper"


    public static class a_selector_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value"
    // Objcm.g:812:1: a_selector_value : sel_id ( COLON ( sel_id COLON )* )? ;
    public final ObjcmParser.a_selector_value_return a_selector_value() throws RecognitionException {
        ObjcmParser.a_selector_value_return retval = new ObjcmParser.a_selector_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON500=null;
        Token COLON502=null;
        ObjcmParser.sel_id_return sel_id499 =null;

        ObjcmParser.sel_id_return sel_id501 =null;


        Object COLON500_tree=null;
        Object COLON502_tree=null;

        try {
            // Objcm.g:813:2: ( sel_id ( COLON ( sel_id COLON )* )? )
            // Objcm.g:813:5: sel_id ( COLON ( sel_id COLON )* )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sel_id_in_a_selector_value4333);
            sel_id499=sel_id();

            state._fsp--;

            adaptor.addChild(root_0, sel_id499.getTree());

            // Objcm.g:813:13: ( COLON ( sel_id COLON )* )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==COLON) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // Objcm.g:813:14: COLON ( sel_id COLON )*
                    {
                    COLON500=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4337); 
                    COLON500_tree = 
                    (Object)adaptor.create(COLON500)
                    ;
                    adaptor.addChild(root_0, COLON500_tree);


                    // Objcm.g:813:21: ( sel_id COLON )*
                    loop124:
                    do {
                        int alt124=2;
                        int LA124_0 = input.LA(1);

                        if ( (LA124_0==ID||LA124_0==182||LA124_0==185||LA124_0==196) ) {
                            alt124=1;
                        }


                        switch (alt124) {
                    	case 1 :
                    	    // Objcm.g:813:22: sel_id COLON
                    	    {
                    	    pushFollow(FOLLOW_sel_id_in_a_selector_value4341);
                    	    sel_id501=sel_id();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, sel_id501.getTree());

                    	    COLON502=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4344); 
                    	    COLON502_tree = 
                    	    (Object)adaptor.create(COLON502)
                    	    ;
                    	    adaptor.addChild(root_0, COLON502_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop124;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value"


    public static class sel_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sel_id"
    // Objcm.g:815:1: sel_id : ( ID | property );
    public final ObjcmParser.sel_id_return sel_id() throws RecognitionException {
        ObjcmParser.sel_id_return retval = new ObjcmParser.sel_id_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID503=null;
        ObjcmParser.property_return property504 =null;


        Object ID503_tree=null;

        try {
            // Objcm.g:815:8: ( ID | property )
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==ID) ) {
                alt126=1;
            }
            else if ( (LA126_0==182||LA126_0==185||LA126_0==196) ) {
                alt126=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;

            }
            switch (alt126) {
                case 1 :
                    // Objcm.g:815:10: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID503=(Token)match(input,ID,FOLLOW_ID_in_sel_id4357); 
                    ID503_tree = 
                    (Object)adaptor.create(ID503)
                    ;
                    adaptor.addChild(root_0, ID503_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:816:4: property
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_property_in_sel_id4362);
                    property504=property();

                    state._fsp--;

                    adaptor.addChild(root_0, property504.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sel_id"


    public static class const_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr_wrapper"
    // Objcm.g:819:1: const_expr_wrapper : const_expr -> ^( CONST_EXPR const_expr ) ;
    public final ObjcmParser.const_expr_wrapper_return const_expr_wrapper() throws RecognitionException {
        ObjcmParser.const_expr_wrapper_return retval = new ObjcmParser.const_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.const_expr_return const_expr505 =null;


        RewriteRuleSubtreeStream stream_const_expr=new RewriteRuleSubtreeStream(adaptor,"rule const_expr");
        try {
            // Objcm.g:820:2: ( const_expr -> ^( CONST_EXPR const_expr ) )
            // Objcm.g:820:4: const_expr
            {
            pushFollow(FOLLOW_const_expr_in_const_expr_wrapper4374);
            const_expr505=const_expr();

            state._fsp--;

            stream_const_expr.add(const_expr505.getTree());

            // AST REWRITE
            // elements: const_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 820:15: -> ^( CONST_EXPR const_expr )
            {
                // Objcm.g:820:18: ^( CONST_EXPR const_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONST_EXPR, "CONST_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_const_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr_wrapper"


    public static class const_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // Objcm.g:822:1: const_expr : ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt );
    public final ObjcmParser.const_expr_return const_expr() throws RecognitionException {
        ObjcmParser.const_expr_return retval = new ObjcmParser.const_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NUMBER506=null;
        Token STRING_LITERAL507=null;
        Token STRING_LITERAL2508=null;
        Token STRING_LITERAL3509=null;
        ObjcmParser.null_stmt_return null_stmt510 =null;


        Object NUMBER506_tree=null;
        Object STRING_LITERAL507_tree=null;
        Object STRING_LITERAL2508_tree=null;
        Object STRING_LITERAL3509_tree=null;

        try {
            // Objcm.g:823:2: ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt )
            int alt127=5;
            switch ( input.LA(1) ) {
            case NUMBER:
                {
                alt127=1;
                }
                break;
            case STRING_LITERAL:
                {
                alt127=2;
                }
                break;
            case STRING_LITERAL2:
                {
                alt127=3;
                }
                break;
            case STRING_LITERAL3:
                {
                alt127=4;
                }
                break;
            case 179:
            case 195:
                {
                alt127=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;

            }

            switch (alt127) {
                case 1 :
                    // Objcm.g:823:5: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER506=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_const_expr4393); 
                    NUMBER506_tree = 
                    (Object)adaptor.create(NUMBER506)
                    ;
                    adaptor.addChild(root_0, NUMBER506_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:823:14: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL507=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_const_expr4397); 
                    STRING_LITERAL507_tree = 
                    (Object)adaptor.create(STRING_LITERAL507)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL507_tree);


                    }
                    break;
                case 3 :
                    // Objcm.g:823:31: STRING_LITERAL2
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL2508=(Token)match(input,STRING_LITERAL2,FOLLOW_STRING_LITERAL2_in_const_expr4401); 
                    STRING_LITERAL2508_tree = 
                    (Object)adaptor.create(STRING_LITERAL2508)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL2508_tree);


                    }
                    break;
                case 4 :
                    // Objcm.g:823:49: STRING_LITERAL3
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL3509=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_const_expr4405); 
                    STRING_LITERAL3509_tree = 
                    (Object)adaptor.create(STRING_LITERAL3509)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL3509_tree);


                    }
                    break;
                case 5 :
                    // Objcm.g:823:67: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_const_expr4409);
                    null_stmt510=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt510.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class string_literal3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_literal3"
    // Objcm.g:825:1: string_literal3 : STRING_LITERAL3 ;
    public final ObjcmParser.string_literal3_return string_literal3() throws RecognitionException {
        ObjcmParser.string_literal3_return retval = new ObjcmParser.string_literal3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL3511=null;

        Object STRING_LITERAL3511_tree=null;

        try {
            // Objcm.g:826:2: ( STRING_LITERAL3 )
            // Objcm.g:826:4: STRING_LITERAL3
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL3511=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_string_literal34419); 
            STRING_LITERAL3511_tree = 
            (Object)adaptor.create(STRING_LITERAL3511)
            ;
            adaptor.addChild(root_0, STRING_LITERAL3511_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_literal3"


    public static class method_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_brackets"
    // Objcm.g:828:1: method_brackets : L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.method_brackets_return method_brackets() throws RecognitionException {
        ObjcmParser.method_brackets_return retval = new ObjcmParser.method_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR512=null;
        Token COMMA514=null;
        Token R_BR516=null;
        ObjcmParser.expression_return expression513 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp515 =null;


        Object L_BR512_tree=null;
        Object COMMA514_tree=null;
        Object R_BR516_tree=null;

        try {
            // Objcm.g:829:2: ( L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR )
            // Objcm.g:829:4: L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR512=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_brackets4429); 
            L_BR512_tree = 
            (Object)adaptor.create(L_BR512)
            ;
            adaptor.addChild(root_0, L_BR512_tree);


            // Objcm.g:829:10: ( expression ( COMMA classical_expr_wrp )* )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==ASTERISK||LA129_0==ID||LA129_0==L_AND||LA129_0==L_BR||LA129_0==L_KBR||LA129_0==L_MINUS||LA129_0==L_MINUS_MINUS||LA129_0==L_NOT||LA129_0==L_PLUS||LA129_0==L_PLUS_PLUS||LA129_0==L_TILDA||LA129_0==NUMBER||LA129_0==SIZEOF||(LA129_0 >= STRING_LITERAL && LA129_0 <= STRING_LITERAL3)||LA129_0==166||LA129_0==173||LA129_0==175||LA129_0==179||LA129_0==182||LA129_0==185||LA129_0==193||(LA129_0 >= 195 && LA129_0 <= 196)||LA129_0==201) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // Objcm.g:829:11: expression ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_expression_in_method_brackets4433);
                    expression513=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression513.getTree());

                    // Objcm.g:829:23: ( COMMA classical_expr_wrp )*
                    loop128:
                    do {
                        int alt128=2;
                        int LA128_0 = input.LA(1);

                        if ( (LA128_0==COMMA) ) {
                            alt128=1;
                        }


                        switch (alt128) {
                    	case 1 :
                    	    // Objcm.g:829:24: COMMA classical_expr_wrp
                    	    {
                    	    COMMA514=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_brackets4437); 
                    	    COMMA514_tree = 
                    	    (Object)adaptor.create(COMMA514)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA514_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_method_brackets4440);
                    	    classical_expr_wrp515=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp515.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop128;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR516=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_brackets4446); 
            R_BR516_tree = 
            (Object)adaptor.create(R_BR516)
            ;
            adaptor.addChild(root_0, R_BR516_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_brackets"


    public static class func_pointer1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer1"
    // Objcm.g:831:1: func_pointer1 : type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? ;
    public final ObjcmParser.func_pointer1_return func_pointer1() throws RecognitionException {
        ObjcmParser.func_pointer1_return retval = new ObjcmParser.func_pointer1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK518=null;
        Token L_BR519=null;
        Token ASTERISK520=null;
        Token R_BR522=null;
        ObjcmParser.type_internal_return type_internal517 =null;

        ObjcmParser.type_internal_return type_internal521 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params523 =null;


        Object ASTERISK518_tree=null;
        Object L_BR519_tree=null;
        Object ASTERISK520_tree=null;
        Object R_BR522_tree=null;

        try {
            // Objcm.g:832:2: ( type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? )
            // Objcm.g:832:4: type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_func_pointer14456);
            type_internal517=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal517.getTree());

            // Objcm.g:832:19: ( ASTERISK )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==ASTERISK) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // Objcm.g:832:19: ASTERISK
                    {
                    ASTERISK518=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14459); 
                    ASTERISK518_tree = 
                    (Object)adaptor.create(ASTERISK518)
                    ;
                    adaptor.addChild(root_0, ASTERISK518_tree);


                    }
                    break;

            }


            L_BR519=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer14462); 
            L_BR519_tree = 
            (Object)adaptor.create(L_BR519)
            ;
            adaptor.addChild(root_0, L_BR519_tree);


            // Objcm.g:832:34: ( ASTERISK )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==ASTERISK) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // Objcm.g:832:34: ASTERISK
                    {
                    ASTERISK520=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14464); 
                    ASTERISK520_tree = 
                    (Object)adaptor.create(ASTERISK520)
                    ;
                    adaptor.addChild(root_0, ASTERISK520_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_func_pointer14467);
            type_internal521=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal521.getTree());

            R_BR522=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer14470); 
            R_BR522_tree = 
            (Object)adaptor.create(R_BR522)
            ;
            adaptor.addChild(root_0, R_BR522_tree);


            // Objcm.g:832:65: ( func_pointer_params )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==L_BR) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // Objcm.g:832:65: func_pointer_params
                    {
                    pushFollow(FOLLOW_func_pointer_params_in_func_pointer14473);
                    func_pointer_params523=func_pointer_params();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer_params523.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer1"


    public static class func_pointer2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer2"
    // Objcm.g:835:1: func_pointer2 : L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR ;
    public final ObjcmParser.func_pointer2_return func_pointer2() throws RecognitionException {
        ObjcmParser.func_pointer2_return retval = new ObjcmParser.func_pointer2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR524=null;
        Token L_BR526=null;
        Token ASTERISK527=null;
        Token R_BR528=null;
        Token R_BR530=null;
        ObjcmParser.type_internal_return type_internal525 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params529 =null;


        Object L_BR524_tree=null;
        Object L_BR526_tree=null;
        Object ASTERISK527_tree=null;
        Object R_BR528_tree=null;
        Object R_BR530_tree=null;

        try {
            // Objcm.g:836:2: ( L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR )
            // Objcm.g:836:4: L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR524=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24486); 
            L_BR524_tree = 
            (Object)adaptor.create(L_BR524)
            ;
            adaptor.addChild(root_0, L_BR524_tree);


            pushFollow(FOLLOW_type_internal_in_func_pointer24489);
            type_internal525=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal525.getTree());

            L_BR526=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24491); 
            L_BR526_tree = 
            (Object)adaptor.create(L_BR526)
            ;
            adaptor.addChild(root_0, L_BR526_tree);


            ASTERISK527=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer24494); 
            ASTERISK527_tree = 
            (Object)adaptor.create(ASTERISK527)
            ;
            adaptor.addChild(root_0, ASTERISK527_tree);


            R_BR528=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24497); 
            R_BR528_tree = 
            (Object)adaptor.create(R_BR528)
            ;
            adaptor.addChild(root_0, R_BR528_tree);


            pushFollow(FOLLOW_func_pointer_params_in_func_pointer24500);
            func_pointer_params529=func_pointer_params();

            state._fsp--;

            adaptor.addChild(root_0, func_pointer_params529.getTree());

            R_BR530=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24503); 
            R_BR530_tree = 
            (Object)adaptor.create(R_BR530)
            ;
            adaptor.addChild(root_0, R_BR530_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer2"


    public static class func_pointer_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_params"
    // Objcm.g:839:1: func_pointer_params : L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR ;
    public final ObjcmParser.func_pointer_params_return func_pointer_params() throws RecognitionException {
        ObjcmParser.func_pointer_params_return retval = new ObjcmParser.func_pointer_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR531=null;
        Token ID532=null;
        Token ASTERISK533=null;
        Token COMMA534=null;
        Token ID535=null;
        Token ASTERISK536=null;
        Token R_BR537=null;

        Object L_BR531_tree=null;
        Object ID532_tree=null;
        Object ASTERISK533_tree=null;
        Object COMMA534_tree=null;
        Object ID535_tree=null;
        Object ASTERISK536_tree=null;
        Object R_BR537_tree=null;

        try {
            // Objcm.g:840:2: ( L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR )
            // Objcm.g:840:4: L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR531=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer_params4516); 
            L_BR531_tree = 
            (Object)adaptor.create(L_BR531)
            ;
            adaptor.addChild(root_0, L_BR531_tree);


            ID532=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4519); 
            ID532_tree = 
            (Object)adaptor.create(ID532)
            ;
            adaptor.addChild(root_0, ID532_tree);


            // Objcm.g:840:14: ( ASTERISK )*
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==ASTERISK) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // Objcm.g:840:14: ASTERISK
            	    {
            	    ASTERISK533=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4522); 
            	    ASTERISK533_tree = 
            	    (Object)adaptor.create(ASTERISK533)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK533_tree);


            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);


            // Objcm.g:840:24: ( COMMA ID ( ASTERISK )* )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==COMMA) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // Objcm.g:840:25: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA534=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_pointer_params4526); 
            	    COMMA534_tree = 
            	    (Object)adaptor.create(COMMA534)
            	    ;
            	    adaptor.addChild(root_0, COMMA534_tree);


            	    ID535=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4529); 
            	    ID535_tree = 
            	    (Object)adaptor.create(ID535)
            	    ;
            	    adaptor.addChild(root_0, ID535_tree);


            	    // Objcm.g:840:36: ( ASTERISK )*
            	    loop134:
            	    do {
            	        int alt134=2;
            	        int LA134_0 = input.LA(1);

            	        if ( (LA134_0==ASTERISK) ) {
            	            alt134=1;
            	        }


            	        switch (alt134) {
            	    	case 1 :
            	    	    // Objcm.g:840:36: ASTERISK
            	    	    {
            	    	    ASTERISK536=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4532); 
            	    	    ASTERISK536_tree = 
            	    	    (Object)adaptor.create(ASTERISK536)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK536_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop134;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            R_BR537=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer_params4537); 
            R_BR537_tree = 
            (Object)adaptor.create(R_BR537)
            ;
            adaptor.addChild(root_0, R_BR537_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_params"


    public static class method_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_start"
    // Objcm.g:842:1: method_start : ID ( method_brackets )? ;
    public final ObjcmParser.method_start_return method_start() throws RecognitionException {
        ObjcmParser.method_start_return retval = new ObjcmParser.method_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID538=null;
        ObjcmParser.method_brackets_return method_brackets539 =null;


        Object ID538_tree=null;

        try {
            // Objcm.g:843:2: ( ID ( method_brackets )? )
            // Objcm.g:843:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID538=(Token)match(input,ID,FOLLOW_ID_in_method_start4548); 
            ID538_tree = 
            (Object)adaptor.create(ID538)
            ;
            adaptor.addChild(root_0, ID538_tree);


            // Objcm.g:843:7: ( method_brackets )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==L_BR) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // Objcm.g:843:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_method_start4550);
                    method_brackets539=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets539.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_start"


    public static class in_q_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_q_brackets"
    // Objcm.g:845:1: in_q_brackets : L_FBR q_brackets_source R_FBR ;
    public final ObjcmParser.in_q_brackets_return in_q_brackets() throws RecognitionException {
        ObjcmParser.in_q_brackets_return retval = new ObjcmParser.in_q_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR540=null;
        Token R_FBR542=null;
        ObjcmParser.q_brackets_source_return q_brackets_source541 =null;


        Object L_FBR540_tree=null;
        Object R_FBR542_tree=null;

        try {
            // Objcm.g:846:2: ( L_FBR q_brackets_source R_FBR )
            // Objcm.g:846:4: L_FBR q_brackets_source R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR540=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_in_q_brackets4561); 
            L_FBR540_tree = 
            (Object)adaptor.create(L_FBR540)
            ;
            adaptor.addChild(root_0, L_FBR540_tree);


            pushFollow(FOLLOW_q_brackets_source_in_in_q_brackets4564);
            q_brackets_source541=q_brackets_source();

            state._fsp--;

            adaptor.addChild(root_0, q_brackets_source541.getTree());

            R_FBR542=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_in_q_brackets4566); 
            R_FBR542_tree = 
            (Object)adaptor.create(R_FBR542)
            ;
            adaptor.addChild(root_0, R_FBR542_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_q_brackets"


    public static class q_brackets_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_brackets_source"
    // Objcm.g:849:1: q_brackets_source : ( q_source | q_br_source );
    public final ObjcmParser.q_brackets_source_return q_brackets_source() throws RecognitionException {
        ObjcmParser.q_brackets_source_return retval = new ObjcmParser.q_brackets_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.q_source_return q_source543 =null;

        ObjcmParser.q_br_source_return q_br_source544 =null;



        try {
            // Objcm.g:850:2: ( q_source | q_br_source )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==ASTERISK||LA137_0==ID||LA137_0==L_AND||LA137_0==L_BR||LA137_0==L_KBR||LA137_0==L_MINUS||LA137_0==L_MINUS_MINUS||LA137_0==L_NOT||LA137_0==L_PLUS||LA137_0==L_PLUS_PLUS||LA137_0==L_TILDA||LA137_0==NUMBER||LA137_0==R_FBR||LA137_0==SIZEOF||(LA137_0 >= STRING_LITERAL && LA137_0 <= STRING_LITERAL3)||LA137_0==166||LA137_0==173||LA137_0==175||LA137_0==179||LA137_0==182||LA137_0==185||LA137_0==193||(LA137_0 >= 195 && LA137_0 <= 196)||LA137_0==201) ) {
                alt137=1;
            }
            else if ( (LA137_0==L_FBR) ) {
                alt137=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;

            }
            switch (alt137) {
                case 1 :
                    // Objcm.g:850:4: q_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_source_in_q_brackets_source4578);
                    q_source543=q_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_source543.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:851:4: q_br_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_br_source_in_q_brackets_source4583);
                    q_br_source544=q_br_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_br_source544.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_brackets_source"


    public static class q_br_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_br_source"
    // Objcm.g:854:1: q_br_source : in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? ;
    public final ObjcmParser.q_br_source_return q_br_source() throws RecognitionException {
        ObjcmParser.q_br_source_return retval = new ObjcmParser.q_br_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA546=null;
        Token COMMA548=null;
        ObjcmParser.in_q_brackets_return in_q_brackets545 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets547 =null;


        Object COMMA546_tree=null;
        Object COMMA548_tree=null;

        try {
            // Objcm.g:855:2: ( in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? )
            // Objcm.g:855:4: in_q_brackets ( COMMA in_q_brackets )* ( COMMA )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_in_q_brackets_in_q_br_source4596);
            in_q_brackets545=in_q_brackets();

            state._fsp--;

            adaptor.addChild(root_0, in_q_brackets545.getTree());

            // Objcm.g:855:19: ( COMMA in_q_brackets )*
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0==COMMA) ) {
                    int LA138_1 = input.LA(2);

                    if ( (LA138_1==L_FBR) ) {
                        alt138=1;
                    }


                }


                switch (alt138) {
            	case 1 :
            	    // Objcm.g:855:20: COMMA in_q_brackets
            	    {
            	    COMMA546=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4600); 
            	    COMMA546_tree = 
            	    (Object)adaptor.create(COMMA546)
            	    ;
            	    adaptor.addChild(root_0, COMMA546_tree);


            	    pushFollow(FOLLOW_in_q_brackets_in_q_br_source4603);
            	    in_q_brackets547=in_q_brackets();

            	    state._fsp--;

            	    adaptor.addChild(root_0, in_q_brackets547.getTree());

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);


            // Objcm.g:855:43: ( COMMA )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==COMMA) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // Objcm.g:855:43: COMMA
                    {
                    COMMA548=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4607); 
                    COMMA548_tree = 
                    (Object)adaptor.create(COMMA548)
                    ;
                    adaptor.addChild(root_0, COMMA548_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_br_source"


    public static class q_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_source"
    // Objcm.g:858:1: q_source : ( expression ( COMMA expression )* )? ;
    public final ObjcmParser.q_source_return q_source() throws RecognitionException {
        ObjcmParser.q_source_return retval = new ObjcmParser.q_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA550=null;
        ObjcmParser.expression_return expression549 =null;

        ObjcmParser.expression_return expression551 =null;


        Object COMMA550_tree=null;

        try {
            // Objcm.g:858:9: ( ( expression ( COMMA expression )* )? )
            // Objcm.g:858:11: ( expression ( COMMA expression )* )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:858:11: ( expression ( COMMA expression )* )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==ASTERISK||LA141_0==ID||LA141_0==L_AND||LA141_0==L_BR||LA141_0==L_KBR||LA141_0==L_MINUS||LA141_0==L_MINUS_MINUS||LA141_0==L_NOT||LA141_0==L_PLUS||LA141_0==L_PLUS_PLUS||LA141_0==L_TILDA||LA141_0==NUMBER||LA141_0==SIZEOF||(LA141_0 >= STRING_LITERAL && LA141_0 <= STRING_LITERAL3)||LA141_0==166||LA141_0==173||LA141_0==175||LA141_0==179||LA141_0==182||LA141_0==185||LA141_0==193||(LA141_0 >= 195 && LA141_0 <= 196)||LA141_0==201) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // Objcm.g:858:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_q_source4619);
                    expression549=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression549.getTree());

                    // Objcm.g:858:24: ( COMMA expression )*
                    loop140:
                    do {
                        int alt140=2;
                        int LA140_0 = input.LA(1);

                        if ( (LA140_0==COMMA) ) {
                            alt140=1;
                        }


                        switch (alt140) {
                    	case 1 :
                    	    // Objcm.g:858:25: COMMA expression
                    	    {
                    	    COMMA550=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_source4623); 
                    	    COMMA550_tree = 
                    	    (Object)adaptor.create(COMMA550)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA550_tree);


                    	    pushFollow(FOLLOW_expression_in_q_source4626);
                    	    expression551=expression();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, expression551.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop140;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_source"


    public static class simple_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_method_call"
    // Objcm.g:861:1: simple_method_call : ID ( method_brackets )? ;
    public final ObjcmParser.simple_method_call_return simple_method_call() throws RecognitionException {
        ObjcmParser.simple_method_call_return retval = new ObjcmParser.simple_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID552=null;
        ObjcmParser.method_brackets_return method_brackets553 =null;


        Object ID552_tree=null;

        try {
            // Objcm.g:862:2: ( ID ( method_brackets )? )
            // Objcm.g:862:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID552=(Token)match(input,ID,FOLLOW_ID_in_simple_method_call4643); 
            ID552_tree = 
            (Object)adaptor.create(ID552)
            ;
            adaptor.addChild(root_0, ID552_tree);


            // Objcm.g:862:7: ( method_brackets )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==L_BR) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // Objcm.g:862:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_simple_method_call4645);
                    method_brackets553=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets553.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_method_call"


    public static class index_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_brackets"
    // Objcm.g:864:1: index_brackets : L_KBR classical_expr_wrp R_KBR ;
    public final ObjcmParser.index_brackets_return index_brackets() throws RecognitionException {
        ObjcmParser.index_brackets_return retval = new ObjcmParser.index_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR554=null;
        Token R_KBR556=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp555 =null;


        Object L_KBR554_tree=null;
        Object R_KBR556_tree=null;

        try {
            // Objcm.g:865:2: ( L_KBR classical_expr_wrp R_KBR )
            // Objcm.g:865:4: L_KBR classical_expr_wrp R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR554=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index_brackets4661); 
            L_KBR554_tree = 
            (Object)adaptor.create(L_KBR554)
            ;
            adaptor.addChild(root_0, L_KBR554_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_index_brackets4664);
            classical_expr_wrp555=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp555.getTree());

            R_KBR556=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index_brackets4666); 
            R_KBR556_tree = 
            (Object)adaptor.create(R_KBR556)
            ;
            adaptor.addChild(root_0, R_KBR556_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_brackets"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // Objcm.g:872:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcmParser.interface_declaration_wrapper_return retval = new ObjcmParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_declaration_return interface_declaration557 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // Objcm.g:873:2: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // Objcm.g:873:4: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper4680);
            interface_declaration557=interface_declaration();

            state._fsp--;

            stream_interface_declaration.add(interface_declaration557.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 873:26: -> ^( INTERFACE interface_declaration )
            {
                // Objcm.g:873:29: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // Objcm.g:875:1: interface_declaration : '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods | interface_fields )* '@end' ;
    public final ObjcmParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcmParser.interface_declaration_return retval = new ObjcmParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal558=null;
        Token string_literal565=null;
        ObjcmParser.name_return name559 =null;

        ObjcmParser.interface_category_return interface_category560 =null;

        ObjcmParser.super_class_return super_class561 =null;

        ObjcmParser.annotated_block_return annotated_block562 =null;

        ObjcmParser.interface_methods_return interface_methods563 =null;

        ObjcmParser.interface_fields_return interface_fields564 =null;


        Object string_literal558_tree=null;
        Object string_literal565_tree=null;

        try {
            // Objcm.g:876:2: ( '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods | interface_fields )* '@end' )
            // Objcm.g:876:4: '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods | interface_fields )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal558=(Token)match(input,170,FOLLOW_170_in_interface_declaration4698); 
            string_literal558_tree = 
            (Object)adaptor.create(string_literal558)
            ;
            adaptor.addChild(root_0, string_literal558_tree);


            pushFollow(FOLLOW_name_in_interface_declaration4701);
            name559=name();

            state._fsp--;

            adaptor.addChild(root_0, name559.getTree());

            // Objcm.g:876:24: ( interface_category )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==L_BR) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // Objcm.g:876:24: interface_category
                    {
                    pushFollow(FOLLOW_interface_category_in_interface_declaration4704);
                    interface_category560=interface_category();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_category560.getTree());

                    }
                    break;

            }


            // Objcm.g:876:44: ( super_class )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==COLON) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // Objcm.g:876:45: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_interface_declaration4708);
                    super_class561=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class561.getTree());

                    }
                    break;

            }


            // Objcm.g:877:3: ( annotated_block | interface_methods | interface_fields )*
            loop145:
            do {
                int alt145=4;
                switch ( input.LA(1) ) {
                case L_FBR:
                    {
                    alt145=1;
                    }
                    break;
                case ENUM_PREFIX:
                case L_MINUS:
                case L_PLUS:
                    {
                    alt145=2;
                    }
                    break;
                case ID:
                case VOID:
                case 172:
                case 201:
                    {
                    alt145=3;
                    }
                    break;

                }

                switch (alt145) {
            	case 1 :
            	    // Objcm.g:877:4: annotated_block
            	    {
            	    pushFollow(FOLLOW_annotated_block_in_interface_declaration4715);
            	    annotated_block562=annotated_block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block562.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:877:22: interface_methods
            	    {
            	    pushFollow(FOLLOW_interface_methods_in_interface_declaration4719);
            	    interface_methods563=interface_methods();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_methods563.getTree());

            	    }
            	    break;
            	case 3 :
            	    // Objcm.g:877:42: interface_fields
            	    {
            	    pushFollow(FOLLOW_interface_fields_in_interface_declaration4723);
            	    interface_fields564=interface_fields();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_fields564.getTree());

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);


            string_literal565=(Token)match(input,167,FOLLOW_167_in_interface_declaration4732); 
            string_literal565_tree = 
            (Object)adaptor.create(string_literal565)
            ;
            adaptor.addChild(root_0, string_literal565_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class annotated_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block"
    // Objcm.g:881:1: annotated_block : L_FBR ( annotated_block_internal )* R_FBR ;
    public final ObjcmParser.annotated_block_return annotated_block() throws RecognitionException {
        ObjcmParser.annotated_block_return retval = new ObjcmParser.annotated_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR566=null;
        Token R_FBR568=null;
        ObjcmParser.annotated_block_internal_return annotated_block_internal567 =null;


        Object L_FBR566_tree=null;
        Object R_FBR568_tree=null;

        try {
            // Objcm.g:882:2: ( L_FBR ( annotated_block_internal )* R_FBR )
            // Objcm.g:882:4: L_FBR ( annotated_block_internal )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR566=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_annotated_block4743); 
            L_FBR566_tree = 
            (Object)adaptor.create(L_FBR566)
            ;
            adaptor.addChild(root_0, L_FBR566_tree);


            // Objcm.g:883:3: ( annotated_block_internal )*
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==ID||LA146_0==VOID||LA146_0==171||LA146_0==174||(LA146_0 >= 200 && LA146_0 <= 201)) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    // Objcm.g:883:3: annotated_block_internal
            	    {
            	    pushFollow(FOLLOW_annotated_block_internal_in_annotated_block4748);
            	    annotated_block_internal567=annotated_block_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block_internal567.getTree());

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);


            R_FBR568=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_annotated_block4753); 
            R_FBR568_tree = 
            (Object)adaptor.create(R_FBR568)
            ;
            adaptor.addChild(root_0, R_FBR568_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block"


    public static class annotated_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block_internal"
    // Objcm.g:887:1: annotated_block_internal : ( block_annotation | public_block_internal );
    public final ObjcmParser.annotated_block_internal_return annotated_block_internal() throws RecognitionException {
        ObjcmParser.annotated_block_internal_return retval = new ObjcmParser.annotated_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_annotation_return block_annotation569 =null;

        ObjcmParser.public_block_internal_return public_block_internal570 =null;



        try {
            // Objcm.g:888:2: ( block_annotation | public_block_internal )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==171||LA147_0==174) ) {
                alt147=1;
            }
            else if ( (LA147_0==ID||LA147_0==VOID||(LA147_0 >= 200 && LA147_0 <= 201)) ) {
                alt147=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;

            }
            switch (alt147) {
                case 1 :
                    // Objcm.g:888:4: block_annotation
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_annotation_in_annotated_block_internal4766);
                    block_annotation569=block_annotation();

                    state._fsp--;

                    adaptor.addChild(root_0, block_annotation569.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:889:5: public_block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_public_block_internal_in_annotated_block_internal4773);
                    public_block_internal570=public_block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, public_block_internal570.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block_internal"


    public static class block_annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_annotation"
    // Objcm.g:892:1: block_annotation : ( '@public' | '@private' );
    public final ObjcmParser.block_annotation_return block_annotation() throws RecognitionException {
        ObjcmParser.block_annotation_return retval = new ObjcmParser.block_annotation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set571=null;

        Object set571_tree=null;

        try {
            // Objcm.g:893:2: ( '@public' | '@private' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set571=(Token)input.LT(1);

            if ( input.LA(1)==171||input.LA(1)==174 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set571)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_annotation"


    public static class public_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "public_block_internal"
    // Objcm.g:897:1: public_block_internal : ( simple_field_declaration | union_declaration );
    public final ObjcmParser.public_block_internal_return public_block_internal() throws RecognitionException {
        ObjcmParser.public_block_internal_return retval = new ObjcmParser.public_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_field_declaration_return simple_field_declaration572 =null;

        ObjcmParser.union_declaration_return union_declaration573 =null;



        try {
            // Objcm.g:898:2: ( simple_field_declaration | union_declaration )
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==ID||LA148_0==VOID||LA148_0==201) ) {
                alt148=1;
            }
            else if ( (LA148_0==200) ) {
                alt148=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;

            }
            switch (alt148) {
                case 1 :
                    // Objcm.g:898:4: simple_field_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_field_declaration_in_public_block_internal4808);
                    simple_field_declaration572=simple_field_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, simple_field_declaration572.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:899:4: union_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_union_declaration_in_public_block_internal4813);
                    union_declaration573=union_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, union_declaration573.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "public_block_internal"


    public static class simple_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_field_declaration"
    // Objcm.g:902:1: simple_field_declaration : field_type name SEMICOLON ;
    public final ObjcmParser.simple_field_declaration_return simple_field_declaration() throws RecognitionException {
        ObjcmParser.simple_field_declaration_return retval = new ObjcmParser.simple_field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON576=null;
        ObjcmParser.field_type_return field_type574 =null;

        ObjcmParser.name_return name575 =null;


        Object SEMICOLON576_tree=null;

        try {
            // Objcm.g:903:2: ( field_type name SEMICOLON )
            // Objcm.g:903:4: field_type name SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_simple_field_declaration4825);
            field_type574=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type574.getTree());

            pushFollow(FOLLOW_name_in_simple_field_declaration4827);
            name575=name();

            state._fsp--;

            adaptor.addChild(root_0, name575.getTree());

            SEMICOLON576=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_field_declaration4830); 
            SEMICOLON576_tree = 
            (Object)adaptor.create(SEMICOLON576)
            ;
            adaptor.addChild(root_0, SEMICOLON576_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_field_declaration"


    public static class union_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_declaration"
    // Objcm.g:906:1: union_declaration : 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON ;
    public final ObjcmParser.union_declaration_return union_declaration() throws RecognitionException {
        ObjcmParser.union_declaration_return retval = new ObjcmParser.union_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal577=null;
        Token L_FBR578=null;
        Token R_FBR580=null;
        Token ID581=null;
        Token SEMICOLON582=null;
        ObjcmParser.simple_field_declaration_return simple_field_declaration579 =null;


        Object string_literal577_tree=null;
        Object L_FBR578_tree=null;
        Object R_FBR580_tree=null;
        Object ID581_tree=null;
        Object SEMICOLON582_tree=null;

        try {
            // Objcm.g:907:2: ( 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON )
            // Objcm.g:907:4: 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal577=(Token)match(input,200,FOLLOW_200_in_union_declaration4843); 
            string_literal577_tree = 
            (Object)adaptor.create(string_literal577)
            ;
            adaptor.addChild(root_0, string_literal577_tree);


            L_FBR578=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_union_declaration4846); 
            L_FBR578_tree = 
            (Object)adaptor.create(L_FBR578)
            ;
            adaptor.addChild(root_0, L_FBR578_tree);


            // Objcm.g:908:4: ( simple_field_declaration )+
            int cnt149=0;
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==ID||LA149_0==VOID||LA149_0==201) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // Objcm.g:908:4: simple_field_declaration
            	    {
            	    pushFollow(FOLLOW_simple_field_declaration_in_union_declaration4852);
            	    simple_field_declaration579=simple_field_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_field_declaration579.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt149 >= 1 ) break loop149;
                        EarlyExitException eee =
                            new EarlyExitException(149, input);
                        throw eee;
                }
                cnt149++;
            } while (true);


            R_FBR580=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_union_declaration4857); 
            R_FBR580_tree = 
            (Object)adaptor.create(R_FBR580)
            ;
            adaptor.addChild(root_0, R_FBR580_tree);


            ID581=(Token)match(input,ID,FOLLOW_ID_in_union_declaration4860); 
            ID581_tree = 
            (Object)adaptor.create(ID581)
            ;
            adaptor.addChild(root_0, ID581_tree);


            SEMICOLON582=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_union_declaration4863); 
            SEMICOLON582_tree = 
            (Object)adaptor.create(SEMICOLON582)
            ;
            adaptor.addChild(root_0, SEMICOLON582_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_declaration"


    public static class super_class_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "super_class"
    // Objcm.g:912:1: super_class : COLON ID -> ^( SUPER_CLASS ID ) ;
    public final ObjcmParser.super_class_return super_class() throws RecognitionException {
        ObjcmParser.super_class_return retval = new ObjcmParser.super_class_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON583=null;
        Token ID584=null;

        Object COLON583_tree=null;
        Object ID584_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:913:2: ( COLON ID -> ^( SUPER_CLASS ID ) )
            // Objcm.g:913:4: COLON ID
            {
            COLON583=(Token)match(input,COLON,FOLLOW_COLON_in_super_class4877);  
            stream_COLON.add(COLON583);


            ID584=(Token)match(input,ID,FOLLOW_ID_in_super_class4880);  
            stream_ID.add(ID584);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 913:15: -> ^( SUPER_CLASS ID )
            {
                // Objcm.g:913:18: ^( SUPER_CLASS ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPER_CLASS, "SUPER_CLASS")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "super_class"


    public static class interface_category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_category"
    // Objcm.g:915:1: interface_category : L_BR ( ID )? R_BR -> ^( CATEGORY L_BR ( ID )? R_BR ) ;
    public final ObjcmParser.interface_category_return interface_category() throws RecognitionException {
        ObjcmParser.interface_category_return retval = new ObjcmParser.interface_category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR585=null;
        Token ID586=null;
        Token R_BR587=null;

        Object L_BR585_tree=null;
        Object ID586_tree=null;
        Object R_BR587_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");

        try {
            // Objcm.g:916:2: ( L_BR ( ID )? R_BR -> ^( CATEGORY L_BR ( ID )? R_BR ) )
            // Objcm.g:916:4: L_BR ( ID )? R_BR
            {
            L_BR585=(Token)match(input,L_BR,FOLLOW_L_BR_in_interface_category4900);  
            stream_L_BR.add(L_BR585);


            // Objcm.g:916:10: ( ID )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==ID) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // Objcm.g:916:10: ID
                    {
                    ID586=(Token)match(input,ID,FOLLOW_ID_in_interface_category4903);  
                    stream_ID.add(ID586);


                    }
                    break;

            }


            R_BR587=(Token)match(input,R_BR,FOLLOW_R_BR_in_interface_category4907);  
            stream_R_BR.add(R_BR587);


            // AST REWRITE
            // elements: ID, L_BR, R_BR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 916:20: -> ^( CATEGORY L_BR ( ID )? R_BR )
            {
                // Objcm.g:916:23: ^( CATEGORY L_BR ( ID )? R_BR )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_L_BR.nextNode()
                );

                // Objcm.g:916:40: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                adaptor.addChild(root_1, 
                stream_R_BR.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_category"


    public static class interface_fields_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_fields"
    // Objcm.g:918:1: interface_fields : ( interface_field_wrapper )+ ;
    public final ObjcmParser.interface_fields_return interface_fields() throws RecognitionException {
        ObjcmParser.interface_fields_return retval = new ObjcmParser.interface_fields_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_field_wrapper_return interface_field_wrapper588 =null;



        try {
            // Objcm.g:919:2: ( ( interface_field_wrapper )+ )
            // Objcm.g:919:4: ( interface_field_wrapper )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:919:4: ( interface_field_wrapper )+
            int cnt151=0;
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);

                if ( (LA151_0==172) ) {
                    alt151=1;
                }
                else if ( (LA151_0==ID||LA151_0==VOID||LA151_0==201) ) {
                    alt151=1;
                }


                switch (alt151) {
            	case 1 :
            	    // Objcm.g:919:4: interface_field_wrapper
            	    {
            	    pushFollow(FOLLOW_interface_field_wrapper_in_interface_fields4936);
            	    interface_field_wrapper588=interface_field_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_field_wrapper588.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt151 >= 1 ) break loop151;
                        EarlyExitException eee =
                            new EarlyExitException(151, input);
                        throw eee;
                }
                cnt151++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_fields"


    public static class interface_field_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_field_wrapper"
    // Objcm.g:921:1: interface_field_wrapper : interface_field -> ^( FIELD interface_field ) ;
    public final ObjcmParser.interface_field_wrapper_return interface_field_wrapper() throws RecognitionException {
        ObjcmParser.interface_field_wrapper_return retval = new ObjcmParser.interface_field_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_field_return interface_field589 =null;


        RewriteRuleSubtreeStream stream_interface_field=new RewriteRuleSubtreeStream(adaptor,"rule interface_field");
        try {
            // Objcm.g:922:2: ( interface_field -> ^( FIELD interface_field ) )
            // Objcm.g:922:4: interface_field
            {
            pushFollow(FOLLOW_interface_field_in_interface_field_wrapper4947);
            interface_field589=interface_field();

            state._fsp--;

            stream_interface_field.add(interface_field589.getTree());

            // AST REWRITE
            // elements: interface_field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 922:20: -> ^( FIELD interface_field )
            {
                // Objcm.g:922:23: ^( FIELD interface_field )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_interface_field.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_field_wrapper"


    public static class interface_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_field"
    // Objcm.g:924:1: interface_field : ( property_prefix )? interface_field_declaration ;
    public final ObjcmParser.interface_field_return interface_field() throws RecognitionException {
        ObjcmParser.interface_field_return retval = new ObjcmParser.interface_field_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.property_prefix_return property_prefix590 =null;

        ObjcmParser.interface_field_declaration_return interface_field_declaration591 =null;



        try {
            // Objcm.g:925:2: ( ( property_prefix )? interface_field_declaration )
            // Objcm.g:925:4: ( property_prefix )? interface_field_declaration
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:925:4: ( property_prefix )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==172) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // Objcm.g:925:4: property_prefix
                    {
                    pushFollow(FOLLOW_property_prefix_in_interface_field4966);
                    property_prefix590=property_prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, property_prefix590.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_interface_field_declaration_in_interface_field4969);
            interface_field_declaration591=interface_field_declaration();

            state._fsp--;

            adaptor.addChild(root_0, interface_field_declaration591.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_field"


    public static class interface_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_field_declaration"
    // Objcm.g:927:1: interface_field_declaration : field_type name SEMICOLON ;
    public final ObjcmParser.interface_field_declaration_return interface_field_declaration() throws RecognitionException {
        ObjcmParser.interface_field_declaration_return retval = new ObjcmParser.interface_field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON594=null;
        ObjcmParser.field_type_return field_type592 =null;

        ObjcmParser.name_return name593 =null;


        Object SEMICOLON594_tree=null;

        try {
            // Objcm.g:928:2: ( field_type name SEMICOLON )
            // Objcm.g:928:4: field_type name SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_interface_field_declaration4980);
            field_type592=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type592.getTree());

            pushFollow(FOLLOW_name_in_interface_field_declaration4982);
            name593=name();

            state._fsp--;

            adaptor.addChild(root_0, name593.getTree());

            SEMICOLON594=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_field_declaration4984); 
            SEMICOLON594_tree = 
            (Object)adaptor.create(SEMICOLON594)
            ;
            adaptor.addChild(root_0, SEMICOLON594_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_field_declaration"


    public static class property_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_prefix"
    // Objcm.g:930:1: property_prefix : '@property' L_BR property ( COMMA property )* R_BR ;
    public final ObjcmParser.property_prefix_return property_prefix() throws RecognitionException {
        ObjcmParser.property_prefix_return retval = new ObjcmParser.property_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal595=null;
        Token L_BR596=null;
        Token COMMA598=null;
        Token R_BR600=null;
        ObjcmParser.property_return property597 =null;

        ObjcmParser.property_return property599 =null;


        Object string_literal595_tree=null;
        Object L_BR596_tree=null;
        Object COMMA598_tree=null;
        Object R_BR600_tree=null;

        try {
            // Objcm.g:931:2: ( '@property' L_BR property ( COMMA property )* R_BR )
            // Objcm.g:931:4: '@property' L_BR property ( COMMA property )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal595=(Token)match(input,172,FOLLOW_172_in_property_prefix4995); 
            string_literal595_tree = 
            (Object)adaptor.create(string_literal595)
            ;
            adaptor.addChild(root_0, string_literal595_tree);


            L_BR596=(Token)match(input,L_BR,FOLLOW_L_BR_in_property_prefix4997); 
            L_BR596_tree = 
            (Object)adaptor.create(L_BR596)
            ;
            adaptor.addChild(root_0, L_BR596_tree);


            pushFollow(FOLLOW_property_in_property_prefix4999);
            property597=property();

            state._fsp--;

            adaptor.addChild(root_0, property597.getTree());

            // Objcm.g:931:30: ( COMMA property )*
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==COMMA) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    // Objcm.g:931:31: COMMA property
            	    {
            	    COMMA598=(Token)match(input,COMMA,FOLLOW_COMMA_in_property_prefix5002); 
            	    COMMA598_tree = 
            	    (Object)adaptor.create(COMMA598)
            	    ;
            	    adaptor.addChild(root_0, COMMA598_tree);


            	    pushFollow(FOLLOW_property_in_property_prefix5004);
            	    property599=property();

            	    state._fsp--;

            	    adaptor.addChild(root_0, property599.getTree());

            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);


            R_BR600=(Token)match(input,R_BR,FOLLOW_R_BR_in_property_prefix5008); 
            R_BR600_tree = 
            (Object)adaptor.create(R_BR600)
            ;
            adaptor.addChild(root_0, R_BR600_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_prefix"


    public static class property_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property"
    // Objcm.g:933:1: property : ( 'readwrite' | 'assign' | 'copy' );
    public final ObjcmParser.property_return property() throws RecognitionException {
        ObjcmParser.property_return retval = new ObjcmParser.property_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set601=null;

        Object set601_tree=null;

        try {
            // Objcm.g:933:9: ( 'readwrite' | 'assign' | 'copy' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set601=(Token)input.LT(1);

            if ( input.LA(1)==182||input.LA(1)==185||input.LA(1)==196 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set601)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property"


    public static class interface_methods_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_methods"
    // Objcm.g:938:1: interface_methods : ( enum_declaration | interface_method )+ ;
    public final ObjcmParser.interface_methods_return interface_methods() throws RecognitionException {
        ObjcmParser.interface_methods_return retval = new ObjcmParser.interface_methods_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.enum_declaration_return enum_declaration602 =null;

        ObjcmParser.interface_method_return interface_method603 =null;



        try {
            // Objcm.g:939:2: ( ( enum_declaration | interface_method )+ )
            // Objcm.g:939:4: ( enum_declaration | interface_method )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:939:4: ( enum_declaration | interface_method )+
            int cnt154=0;
            loop154:
            do {
                int alt154=3;
                int LA154_0 = input.LA(1);

                if ( (LA154_0==ENUM_PREFIX) ) {
                    alt154=1;
                }
                else if ( (LA154_0==L_MINUS||LA154_0==L_PLUS) ) {
                    alt154=2;
                }


                switch (alt154) {
            	case 1 :
            	    // Objcm.g:939:5: enum_declaration
            	    {
            	    pushFollow(FOLLOW_enum_declaration_in_interface_methods5041);
            	    enum_declaration602=enum_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, enum_declaration602.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:939:24: interface_method
            	    {
            	    pushFollow(FOLLOW_interface_method_in_interface_methods5045);
            	    interface_method603=interface_method();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_method603.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt154 >= 1 ) break loop154;
                        EarlyExitException eee =
                            new EarlyExitException(154, input);
                        throw eee;
                }
                cnt154++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_methods"


    public static class interface_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_method"
    // Objcm.g:941:1: interface_method : method_header -> ^( METHOD method_header ) ;
    public final ObjcmParser.interface_method_return interface_method() throws RecognitionException {
        ObjcmParser.interface_method_return retval = new ObjcmParser.interface_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_header_return method_header604 =null;


        RewriteRuleSubtreeStream stream_method_header=new RewriteRuleSubtreeStream(adaptor,"rule method_header");
        try {
            // Objcm.g:942:2: ( method_header -> ^( METHOD method_header ) )
            // Objcm.g:942:4: method_header
            {
            pushFollow(FOLLOW_method_header_in_interface_method5059);
            method_header604=method_header();

            state._fsp--;

            stream_method_header.add(method_header604.getTree());

            // AST REWRITE
            // elements: method_header
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 942:18: -> ^( METHOD method_header )
            {
                // Objcm.g:942:21: ^( METHOD method_header )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_method_header.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_method"


    public static class method_header_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header"
    // Objcm.g:944:1: method_header : method_header_body ( SEMICOLON )? ;
    public final ObjcmParser.method_header_return method_header() throws RecognitionException {
        ObjcmParser.method_header_return retval = new ObjcmParser.method_header_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON606=null;
        ObjcmParser.method_header_body_return method_header_body605 =null;


        Object SEMICOLON606_tree=null;

        try {
            // Objcm.g:945:2: ( method_header_body ( SEMICOLON )? )
            // Objcm.g:945:4: method_header_body ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_method_header5078);
            method_header_body605=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body605.getTree());

            // Objcm.g:945:23: ( SEMICOLON )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==SEMICOLON) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // Objcm.g:945:23: SEMICOLON
                    {
                    SEMICOLON606=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_method_header5080); 
                    SEMICOLON606_tree = 
                    (Object)adaptor.create(SEMICOLON606)
                    ;
                    adaptor.addChild(root_0, SEMICOLON606_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header"


    public static class method_header_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body"
    // Objcm.g:947:1: method_header_body : method_modifier_wrapper ( method_type )? name ( method_params )? ( va_args_wrapper )? ;
    public final ObjcmParser.method_header_body_return method_header_body() throws RecognitionException {
        ObjcmParser.method_header_body_return retval = new ObjcmParser.method_header_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper607 =null;

        ObjcmParser.method_type_return method_type608 =null;

        ObjcmParser.name_return name609 =null;

        ObjcmParser.method_params_return method_params610 =null;

        ObjcmParser.va_args_wrapper_return va_args_wrapper611 =null;



        try {
            // Objcm.g:948:2: ( method_modifier_wrapper ( method_type )? name ( method_params )? ( va_args_wrapper )? )
            // Objcm.g:948:4: method_modifier_wrapper ( method_type )? name ( method_params )? ( va_args_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_header_body5090);
            method_modifier_wrapper607=method_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_modifier_wrapper607.getTree());

            // Objcm.g:948:29: ( method_type )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==L_BR) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // Objcm.g:948:29: method_type
                    {
                    pushFollow(FOLLOW_method_type_in_method_header_body5093);
                    method_type608=method_type();

                    state._fsp--;

                    adaptor.addChild(root_0, method_type608.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_name_in_method_header_body5097);
            name609=name();

            state._fsp--;

            adaptor.addChild(root_0, name609.getTree());

            // Objcm.g:948:49: ( method_params )?
            int alt157=2;
            alt157 = dfa157.predict(input);
            switch (alt157) {
                case 1 :
                    // Objcm.g:948:49: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_header_body5100);
                    method_params610=method_params();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params610.getTree());

                    }
                    break;

            }


            // Objcm.g:948:64: ( va_args_wrapper )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==COMMA) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // Objcm.g:948:64: va_args_wrapper
                    {
                    pushFollow(FOLLOW_va_args_wrapper_in_method_header_body5103);
                    va_args_wrapper611=va_args_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, va_args_wrapper611.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body"


    public static class va_args_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args_wrapper"
    // Objcm.g:950:1: va_args_wrapper : va_args -> ^( VA_ARGS va_args ) ;
    public final ObjcmParser.va_args_wrapper_return va_args_wrapper() throws RecognitionException {
        ObjcmParser.va_args_wrapper_return retval = new ObjcmParser.va_args_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.va_args_return va_args612 =null;


        RewriteRuleSubtreeStream stream_va_args=new RewriteRuleSubtreeStream(adaptor,"rule va_args");
        try {
            // Objcm.g:951:2: ( va_args -> ^( VA_ARGS va_args ) )
            // Objcm.g:951:4: va_args
            {
            pushFollow(FOLLOW_va_args_in_va_args_wrapper5113);
            va_args612=va_args();

            state._fsp--;

            stream_va_args.add(va_args612.getTree());

            // AST REWRITE
            // elements: va_args
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 951:12: -> ^( VA_ARGS va_args )
            {
                // Objcm.g:951:15: ^( VA_ARGS va_args )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VA_ARGS, "VA_ARGS")
                , root_1);

                adaptor.addChild(root_1, stream_va_args.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args_wrapper"


    public static class va_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args"
    // Objcm.g:953:1: va_args : COMMA '...' ( SEMICOLON )? ;
    public final ObjcmParser.va_args_return va_args() throws RecognitionException {
        ObjcmParser.va_args_return retval = new ObjcmParser.va_args_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA613=null;
        Token string_literal614=null;
        Token SEMICOLON615=null;

        Object COMMA613_tree=null;
        Object string_literal614_tree=null;
        Object SEMICOLON615_tree=null;

        try {
            // Objcm.g:953:9: ( COMMA '...' ( SEMICOLON )? )
            // Objcm.g:953:11: COMMA '...' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            COMMA613=(Token)match(input,COMMA,FOLLOW_COMMA_in_va_args5130); 
            COMMA613_tree = 
            (Object)adaptor.create(COMMA613)
            ;
            adaptor.addChild(root_0, COMMA613_tree);


            string_literal614=(Token)match(input,164,FOLLOW_164_in_va_args5133); 
            string_literal614_tree = 
            (Object)adaptor.create(string_literal614)
            ;
            adaptor.addChild(root_0, string_literal614_tree);


            // Objcm.g:953:25: ( SEMICOLON )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==SEMICOLON) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // Objcm.g:953:25: SEMICOLON
                    {
                    SEMICOLON615=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_va_args5136); 
                    SEMICOLON615_tree = 
                    (Object)adaptor.create(SEMICOLON615)
                    ;
                    adaptor.addChild(root_0, SEMICOLON615_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args"


    public static class method_header_body2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body2"
    // Objcm.g:955:1: method_header_body2 : method_type name ( method_params2 )? ;
    public final ObjcmParser.method_header_body2_return method_header_body2() throws RecognitionException {
        ObjcmParser.method_header_body2_return retval = new ObjcmParser.method_header_body2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_type_return method_type616 =null;

        ObjcmParser.name_return name617 =null;

        ObjcmParser.method_params2_return method_params2618 =null;



        try {
            // Objcm.g:956:2: ( method_type name ( method_params2 )? )
            // Objcm.g:956:4: method_type name ( method_params2 )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_type_in_method_header_body25147);
            method_type616=method_type();

            state._fsp--;

            adaptor.addChild(root_0, method_type616.getTree());

            pushFollow(FOLLOW_name_in_method_header_body25149);
            name617=name();

            state._fsp--;

            adaptor.addChild(root_0, name617.getTree());

            // Objcm.g:956:22: ( method_params2 )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==L_BR) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // Objcm.g:956:22: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_method_header_body25152);
                    method_params2618=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params2618.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body2"


    public static class method_header_body3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body3"
    // Objcm.g:958:1: method_header_body3 : method_params2 ;
    public final ObjcmParser.method_header_body3_return method_header_body3() throws RecognitionException {
        ObjcmParser.method_header_body3_return retval = new ObjcmParser.method_header_body3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2619 =null;



        try {
            // Objcm.g:959:2: ( method_params2 )
            // Objcm.g:959:4: method_params2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_header_body35162);
            method_params2619=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2619.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body3"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // Objcm.g:961:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcmParser.method_modifier_wrapper_return retval = new ObjcmParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_return method_modifier620 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // Objcm.g:962:2: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // Objcm.g:962:4: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper5171);
            method_modifier620=method_modifier();

            state._fsp--;

            stream_method_modifier.add(method_modifier620.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 962:20: -> ^( MODIFIER method_modifier )
            {
                // Objcm.g:962:23: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // Objcm.g:964:1: method_modifier : ( '+' | '-' );
    public final ObjcmParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcmParser.method_modifier_return retval = new ObjcmParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set621=null;

        Object set621_tree=null;

        try {
            // Objcm.g:965:2: ( '+' | '-' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set621=(Token)input.LT(1);

            if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set621)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_type"
    // Objcm.g:967:1: method_type : ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE type_internal ) | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? ( ASTERISK )* R_BR -> ^( TYPE ( ID )+ ) );
    public final ObjcmParser.method_type_return method_type() throws RecognitionException {
        ObjcmParser.method_type_return retval = new ObjcmParser.method_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR622=null;
        Token STRUCT_PREFIX623=null;
        Token ASTERISK626=null;
        Token R_BR627=null;
        Token L_BR628=null;
        Token CONST_PREFIX629=null;
        Token ID631=null;
        Token L_KBR632=null;
        Token R_KBR633=null;
        Token ASTERISK635=null;
        Token R_BR636=null;
        ObjcmParser.type_internal_return type_internal624 =null;

        ObjcmParser.generic_return generic625 =null;

        ObjcmParser.known_types_return known_types630 =null;

        ObjcmParser.generic_return generic634 =null;


        Object L_BR622_tree=null;
        Object STRUCT_PREFIX623_tree=null;
        Object ASTERISK626_tree=null;
        Object R_BR627_tree=null;
        Object L_BR628_tree=null;
        Object CONST_PREFIX629_tree=null;
        Object ID631_tree=null;
        Object L_KBR632_tree=null;
        Object R_KBR633_tree=null;
        Object ASTERISK635_tree=null;
        Object R_BR636_tree=null;
        RewriteRuleTokenStream stream_R_KBR=new RewriteRuleTokenStream(adaptor,"token R_KBR");
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_STRUCT_PREFIX=new RewriteRuleTokenStream(adaptor,"token STRUCT_PREFIX");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_L_KBR=new RewriteRuleTokenStream(adaptor,"token L_KBR");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        RewriteRuleSubtreeStream stream_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_internal");
        RewriteRuleSubtreeStream stream_known_types=new RewriteRuleSubtreeStream(adaptor,"rule known_types");
        try {
            // Objcm.g:968:2: ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE type_internal ) | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? ( ASTERISK )* R_BR -> ^( TYPE ( ID )+ ) )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==L_BR) ) {
                switch ( input.LA(2) ) {
                case STRUCT_PREFIX:
                    {
                    alt170=1;
                    }
                    break;
                case VOID:
                case 201:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        int LA170_10 = input.LA(4);

                        if ( (LA170_10==R_KBR) ) {
                            alt170=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 170, 10, input);

                            throw nvae;

                        }
                        }
                        break;
                    case L_LESS:
                        {
                        int LA170_11 = input.LA(4);

                        if ( (LA170_11==ID) ) {
                            alt170=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 170, 11, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA170_12 = input.LA(4);

                        if ( (LA170_12==R_BR) ) {
                            alt170=1;
                        }
                        else if ( (LA170_12==ASTERISK) ) {
                            alt170=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 170, 12, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt170=1;
                        }
                        break;
                    case ID:
                        {
                        alt170=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 170, 3, input);

                        throw nvae;

                    }

                    }
                    break;
                case ASTERISK:
                case CONST_PREFIX:
                case L_KBR:
                case L_LESS:
                case R_BR:
                    {
                    alt170=2;
                    }
                    break;
                case ID:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        int LA170_15 = input.LA(4);

                        if ( (LA170_15==R_KBR) ) {
                            alt170=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 170, 15, input);

                            throw nvae;

                        }
                        }
                        break;
                    case L_LESS:
                        {
                        int LA170_16 = input.LA(4);

                        if ( (LA170_16==ID) ) {
                            alt170=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 170, 16, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA170_17 = input.LA(4);

                        if ( (LA170_17==R_BR) ) {
                            alt170=1;
                        }
                        else if ( (LA170_17==ASTERISK) ) {
                            alt170=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 170, 17, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt170=1;
                        }
                        break;
                    case ID:
                        {
                        alt170=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 170, 5, input);

                        throw nvae;

                    }

                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 170, 1, input);

                    throw nvae;

                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;

            }
            switch (alt170) {
                case 1 :
                    // Objcm.g:968:4: L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR622=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type5203);  
                    stream_L_BR.add(L_BR622);


                    // Objcm.g:968:10: ( STRUCT_PREFIX )?
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==STRUCT_PREFIX) ) {
                        alt161=1;
                    }
                    switch (alt161) {
                        case 1 :
                            // Objcm.g:968:10: STRUCT_PREFIX
                            {
                            STRUCT_PREFIX623=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_type5206);  
                            stream_STRUCT_PREFIX.add(STRUCT_PREFIX623);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_internal_in_method_type5209);
                    type_internal624=type_internal();

                    state._fsp--;

                    stream_type_internal.add(type_internal624.getTree());

                    // Objcm.g:968:40: ( generic )?
                    int alt162=2;
                    int LA162_0 = input.LA(1);

                    if ( (LA162_0==L_LESS) ) {
                        alt162=1;
                    }
                    switch (alt162) {
                        case 1 :
                            // Objcm.g:968:40: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type5212);
                            generic625=generic();

                            state._fsp--;

                            stream_generic.add(generic625.getTree());

                            }
                            break;

                    }


                    // Objcm.g:968:49: ( ASTERISK )*
                    loop163:
                    do {
                        int alt163=2;
                        int LA163_0 = input.LA(1);

                        if ( (LA163_0==ASTERISK) ) {
                            alt163=1;
                        }


                        switch (alt163) {
                    	case 1 :
                    	    // Objcm.g:968:49: ASTERISK
                    	    {
                    	    ASTERISK626=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type5215);  
                    	    stream_ASTERISK.add(ASTERISK626);


                    	    }
                    	    break;

                    	default :
                    	    break loop163;
                        }
                    } while (true);


                    R_BR627=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type5218);  
                    stream_R_BR.add(R_BR627);


                    // AST REWRITE
                    // elements: type_internal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 968:64: -> ^( TYPE type_internal )
                    {
                        // Objcm.g:968:67: ^( TYPE type_internal )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE, "TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_internal.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:969:5: L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR628=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type5232);  
                    stream_L_BR.add(L_BR628);


                    // Objcm.g:969:11: ( CONST_PREFIX )?
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==CONST_PREFIX) ) {
                        alt164=1;
                    }
                    switch (alt164) {
                        case 1 :
                            // Objcm.g:969:11: CONST_PREFIX
                            {
                            CONST_PREFIX629=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_type5235);  
                            stream_CONST_PREFIX.add(CONST_PREFIX629);


                            }
                            break;

                    }


                    // Objcm.g:969:25: ( known_types )?
                    int alt165=2;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==VOID||LA165_0==201) ) {
                        alt165=1;
                    }
                    switch (alt165) {
                        case 1 :
                            // Objcm.g:969:25: known_types
                            {
                            pushFollow(FOLLOW_known_types_in_method_type5238);
                            known_types630=known_types();

                            state._fsp--;

                            stream_known_types.add(known_types630.getTree());

                            }
                            break;

                    }


                    // Objcm.g:969:38: ( ID )*
                    loop166:
                    do {
                        int alt166=2;
                        int LA166_0 = input.LA(1);

                        if ( (LA166_0==ID) ) {
                            alt166=1;
                        }


                        switch (alt166) {
                    	case 1 :
                    	    // Objcm.g:969:38: ID
                    	    {
                    	    ID631=(Token)match(input,ID,FOLLOW_ID_in_method_type5241);  
                    	    stream_ID.add(ID631);


                    	    }
                    	    break;

                    	default :
                    	    break loop166;
                        }
                    } while (true);


                    // Objcm.g:969:42: ( L_KBR R_KBR )*
                    loop167:
                    do {
                        int alt167=2;
                        int LA167_0 = input.LA(1);

                        if ( (LA167_0==L_KBR) ) {
                            alt167=1;
                        }


                        switch (alt167) {
                    	case 1 :
                    	    // Objcm.g:969:43: L_KBR R_KBR
                    	    {
                    	    L_KBR632=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_method_type5245);  
                    	    stream_L_KBR.add(L_KBR632);


                    	    R_KBR633=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_method_type5247);  
                    	    stream_R_KBR.add(R_KBR633);


                    	    }
                    	    break;

                    	default :
                    	    break loop167;
                        }
                    } while (true);


                    // Objcm.g:969:57: ( generic )?
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==L_LESS) ) {
                        alt168=1;
                    }
                    switch (alt168) {
                        case 1 :
                            // Objcm.g:969:57: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type5251);
                            generic634=generic();

                            state._fsp--;

                            stream_generic.add(generic634.getTree());

                            }
                            break;

                    }


                    // Objcm.g:969:66: ( ASTERISK )*
                    loop169:
                    do {
                        int alt169=2;
                        int LA169_0 = input.LA(1);

                        if ( (LA169_0==ASTERISK) ) {
                            alt169=1;
                        }


                        switch (alt169) {
                    	case 1 :
                    	    // Objcm.g:969:66: ASTERISK
                    	    {
                    	    ASTERISK635=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type5254);  
                    	    stream_ASTERISK.add(ASTERISK635);


                    	    }
                    	    break;

                    	default :
                    	    break loop169;
                        }
                    } while (true);


                    R_BR636=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type5257);  
                    stream_R_BR.add(R_BR636);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 969:81: -> ^( TYPE ( ID )+ )
                    {
                        // Objcm.g:969:84: ^( TYPE ( ID )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE, "TYPE")
                        , root_1);

                        if ( !(stream_ID.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_ID.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_ID.nextNode()
                            );

                        }
                        stream_ID.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_type"


    public static class type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal"
    // Objcm.g:972:1: type_internal : type_internal1 ( L_KBR R_KBR )? ;
    public final ObjcmParser.type_internal_return type_internal() throws RecognitionException {
        ObjcmParser.type_internal_return retval = new ObjcmParser.type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR638=null;
        Token R_KBR639=null;
        ObjcmParser.type_internal1_return type_internal1637 =null;


        Object L_KBR638_tree=null;
        Object R_KBR639_tree=null;

        try {
            // Objcm.g:973:2: ( type_internal1 ( L_KBR R_KBR )? )
            // Objcm.g:973:4: type_internal1 ( L_KBR R_KBR )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal1_in_type_internal5282);
            type_internal1637=type_internal1();

            state._fsp--;

            adaptor.addChild(root_0, type_internal1637.getTree());

            // Objcm.g:973:19: ( L_KBR R_KBR )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==L_KBR) ) {
                int LA171_1 = input.LA(2);

                if ( (LA171_1==R_KBR) ) {
                    alt171=1;
                }
            }
            switch (alt171) {
                case 1 :
                    // Objcm.g:973:20: L_KBR R_KBR
                    {
                    L_KBR638=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_type_internal5285); 
                    L_KBR638_tree = 
                    (Object)adaptor.create(L_KBR638)
                    ;
                    adaptor.addChild(root_0, L_KBR638_tree);


                    R_KBR639=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_type_internal5288); 
                    R_KBR639_tree = 
                    (Object)adaptor.create(R_KBR639)
                    ;
                    adaptor.addChild(root_0, R_KBR639_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal"


    public static class type_internal1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal1"
    // Objcm.g:976:1: type_internal1 : ( VOID | ID | 'unsigned' );
    public final ObjcmParser.type_internal1_return type_internal1() throws RecognitionException {
        ObjcmParser.type_internal1_return retval = new ObjcmParser.type_internal1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set640=null;

        Object set640_tree=null;

        try {
            // Objcm.g:977:2: ( VOID | ID | 'unsigned' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set640=(Token)input.LT(1);

            if ( input.LA(1)==ID||input.LA(1)==VOID||input.LA(1)==201 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set640)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal1"


    public static class generic_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic"
    // Objcm.g:982:1: generic : L_LESS generic_internal_wrapper L_MORE ;
    public final ObjcmParser.generic_return generic() throws RecognitionException {
        ObjcmParser.generic_return retval = new ObjcmParser.generic_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_LESS641=null;
        Token L_MORE643=null;
        ObjcmParser.generic_internal_wrapper_return generic_internal_wrapper642 =null;


        Object L_LESS641_tree=null;
        Object L_MORE643_tree=null;

        try {
            // Objcm.g:982:8: ( L_LESS generic_internal_wrapper L_MORE )
            // Objcm.g:982:11: L_LESS generic_internal_wrapper L_MORE
            {
            root_0 = (Object)adaptor.nil();


            L_LESS641=(Token)match(input,L_LESS,FOLLOW_L_LESS_in_generic5327); 
            L_LESS641_tree = 
            (Object)adaptor.create(L_LESS641)
            ;
            adaptor.addChild(root_0, L_LESS641_tree);


            pushFollow(FOLLOW_generic_internal_wrapper_in_generic5329);
            generic_internal_wrapper642=generic_internal_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, generic_internal_wrapper642.getTree());

            L_MORE643=(Token)match(input,L_MORE,FOLLOW_L_MORE_in_generic5331); 
            L_MORE643_tree = 
            (Object)adaptor.create(L_MORE643)
            ;
            adaptor.addChild(root_0, L_MORE643_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic"


    public static class generic_internal_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic_internal_wrapper"
    // Objcm.g:984:1: generic_internal_wrapper : generic_internal -> ^( GENERIC generic_internal ) ;
    public final ObjcmParser.generic_internal_wrapper_return generic_internal_wrapper() throws RecognitionException {
        ObjcmParser.generic_internal_wrapper_return retval = new ObjcmParser.generic_internal_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.generic_internal_return generic_internal644 =null;


        RewriteRuleSubtreeStream stream_generic_internal=new RewriteRuleSubtreeStream(adaptor,"rule generic_internal");
        try {
            // Objcm.g:985:2: ( generic_internal -> ^( GENERIC generic_internal ) )
            // Objcm.g:985:4: generic_internal
            {
            pushFollow(FOLLOW_generic_internal_in_generic_internal_wrapper5341);
            generic_internal644=generic_internal();

            state._fsp--;

            stream_generic_internal.add(generic_internal644.getTree());

            // AST REWRITE
            // elements: generic_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 985:21: -> ^( GENERIC generic_internal )
            {
                // Objcm.g:985:24: ^( GENERIC generic_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GENERIC, "GENERIC")
                , root_1);

                adaptor.addChild(root_1, stream_generic_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic_internal_wrapper"


    public static class generic_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic_internal"
    // Objcm.g:987:1: generic_internal : ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* ;
    public final ObjcmParser.generic_internal_return generic_internal() throws RecognitionException {
        ObjcmParser.generic_internal_return retval = new ObjcmParser.generic_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID645=null;
        Token ASTERISK646=null;
        Token COMMA647=null;
        Token ID648=null;
        Token ASTERISK649=null;

        Object ID645_tree=null;
        Object ASTERISK646_tree=null;
        Object COMMA647_tree=null;
        Object ID648_tree=null;
        Object ASTERISK649_tree=null;

        try {
            // Objcm.g:988:2: ( ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* )
            // Objcm.g:988:5: ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )*
            {
            root_0 = (Object)adaptor.nil();


            ID645=(Token)match(input,ID,FOLLOW_ID_in_generic_internal5359); 
            ID645_tree = 
            (Object)adaptor.create(ID645)
            ;
            adaptor.addChild(root_0, ID645_tree);


            // Objcm.g:988:8: ( ASTERISK )*
            loop172:
            do {
                int alt172=2;
                int LA172_0 = input.LA(1);

                if ( (LA172_0==ASTERISK) ) {
                    alt172=1;
                }


                switch (alt172) {
            	case 1 :
            	    // Objcm.g:988:8: ASTERISK
            	    {
            	    ASTERISK646=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal5361); 
            	    ASTERISK646_tree = 
            	    (Object)adaptor.create(ASTERISK646)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK646_tree);


            	    }
            	    break;

            	default :
            	    break loop172;
                }
            } while (true);


            // Objcm.g:988:18: ( COMMA ID ( ASTERISK )* )*
            loop174:
            do {
                int alt174=2;
                int LA174_0 = input.LA(1);

                if ( (LA174_0==COMMA) ) {
                    alt174=1;
                }


                switch (alt174) {
            	case 1 :
            	    // Objcm.g:988:19: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA647=(Token)match(input,COMMA,FOLLOW_COMMA_in_generic_internal5365); 
            	    COMMA647_tree = 
            	    (Object)adaptor.create(COMMA647)
            	    ;
            	    adaptor.addChild(root_0, COMMA647_tree);


            	    ID648=(Token)match(input,ID,FOLLOW_ID_in_generic_internal5368); 
            	    ID648_tree = 
            	    (Object)adaptor.create(ID648)
            	    ;
            	    adaptor.addChild(root_0, ID648_tree);


            	    // Objcm.g:988:30: ( ASTERISK )*
            	    loop173:
            	    do {
            	        int alt173=2;
            	        int LA173_0 = input.LA(1);

            	        if ( (LA173_0==ASTERISK) ) {
            	            alt173=1;
            	        }


            	        switch (alt173) {
            	    	case 1 :
            	    	    // Objcm.g:988:30: ASTERISK
            	    	    {
            	    	    ASTERISK649=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal5371); 
            	    	    ASTERISK649_tree = 
            	    	    (Object)adaptor.create(ASTERISK649)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK649_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop173;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop174;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic_internal"


    public static class method_params2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params2"
    // Objcm.g:990:1: method_params2 : L_BR ( method_param_wrapper2 ( COMMA method_param_wrapper2 )* )? R_BR ;
    public final ObjcmParser.method_params2_return method_params2() throws RecognitionException {
        ObjcmParser.method_params2_return retval = new ObjcmParser.method_params2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR650=null;
        Token COMMA652=null;
        Token R_BR654=null;
        ObjcmParser.method_param_wrapper2_return method_param_wrapper2651 =null;

        ObjcmParser.method_param_wrapper2_return method_param_wrapper2653 =null;


        Object L_BR650_tree=null;
        Object COMMA652_tree=null;
        Object R_BR654_tree=null;

        try {
            // Objcm.g:991:2: ( L_BR ( method_param_wrapper2 ( COMMA method_param_wrapper2 )* )? R_BR )
            // Objcm.g:991:4: L_BR ( method_param_wrapper2 ( COMMA method_param_wrapper2 )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR650=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_params25383); 
            L_BR650_tree = 
            (Object)adaptor.create(L_BR650)
            ;
            adaptor.addChild(root_0, L_BR650_tree);


            // Objcm.g:991:10: ( method_param_wrapper2 ( COMMA method_param_wrapper2 )* )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==CONST_PREFIX||LA176_0==ENUM_PREFIX||LA176_0==ID||LA176_0==STRUCT_PREFIX||LA176_0==VOID||LA176_0==201) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // Objcm.g:991:11: method_param_wrapper2 ( COMMA method_param_wrapper2 )*
                    {
                    pushFollow(FOLLOW_method_param_wrapper2_in_method_params25387);
                    method_param_wrapper2651=method_param_wrapper2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_param_wrapper2651.getTree());

                    // Objcm.g:991:33: ( COMMA method_param_wrapper2 )*
                    loop175:
                    do {
                        int alt175=2;
                        int LA175_0 = input.LA(1);

                        if ( (LA175_0==COMMA) ) {
                            alt175=1;
                        }


                        switch (alt175) {
                    	case 1 :
                    	    // Objcm.g:991:34: COMMA method_param_wrapper2
                    	    {
                    	    COMMA652=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_params25390); 
                    	    COMMA652_tree = 
                    	    (Object)adaptor.create(COMMA652)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA652_tree);


                    	    pushFollow(FOLLOW_method_param_wrapper2_in_method_params25392);
                    	    method_param_wrapper2653=method_param_wrapper2();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, method_param_wrapper2653.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop175;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR654=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_params25398); 
            R_BR654_tree = 
            (Object)adaptor.create(R_BR654)
            ;
            adaptor.addChild(root_0, R_BR654_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params2"


    public static class method_param_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_wrapper2"
    // Objcm.g:994:1: method_param_wrapper2 : method_param2 -> ^( PARAM method_param2 ) ;
    public final ObjcmParser.method_param_wrapper2_return method_param_wrapper2() throws RecognitionException {
        ObjcmParser.method_param_wrapper2_return retval = new ObjcmParser.method_param_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param2_return method_param2655 =null;


        RewriteRuleSubtreeStream stream_method_param2=new RewriteRuleSubtreeStream(adaptor,"rule method_param2");
        try {
            // Objcm.g:995:2: ( method_param2 -> ^( PARAM method_param2 ) )
            // Objcm.g:995:4: method_param2
            {
            pushFollow(FOLLOW_method_param2_in_method_param_wrapper25409);
            method_param2655=method_param2();

            state._fsp--;

            stream_method_param2.add(method_param2655.getTree());

            // AST REWRITE
            // elements: method_param2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 995:18: -> ^( PARAM method_param2 )
            {
                // Objcm.g:995:21: ^( PARAM method_param2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM, "PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_method_param2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_wrapper2"


    public static class method_param2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param2"
    // Objcm.g:997:1: method_param2 : ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( index_wrapper )? ;
    public final ObjcmParser.method_param2_return method_param2() throws RecognitionException {
        ObjcmParser.method_param2_return retval = new ObjcmParser.method_param2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX656=null;
        Token ENUM_PREFIX657=null;
        Token STRUCT_PREFIX658=null;
        Token string_literal659=null;
        ObjcmParser.field_type_return field_type660 =null;

        ObjcmParser.name_return name661 =null;

        ObjcmParser.index_wrapper_return index_wrapper662 =null;


        Object CONST_PREFIX656_tree=null;
        Object ENUM_PREFIX657_tree=null;
        Object STRUCT_PREFIX658_tree=null;
        Object string_literal659_tree=null;

        try {
            // Objcm.g:998:2: ( ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( index_wrapper )? )
            // Objcm.g:998:4: ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( index_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:998:4: ( CONST_PREFIX )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==CONST_PREFIX) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // Objcm.g:998:4: CONST_PREFIX
                    {
                    CONST_PREFIX656=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_param25427); 
                    CONST_PREFIX656_tree = 
                    (Object)adaptor.create(CONST_PREFIX656)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX656_tree);


                    }
                    break;

            }


            // Objcm.g:998:18: ( ENUM_PREFIX )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==ENUM_PREFIX) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // Objcm.g:998:18: ENUM_PREFIX
                    {
                    ENUM_PREFIX657=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_method_param25430); 
                    ENUM_PREFIX657_tree = 
                    (Object)adaptor.create(ENUM_PREFIX657)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX657_tree);


                    }
                    break;

            }


            // Objcm.g:998:31: ( STRUCT_PREFIX )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==STRUCT_PREFIX) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // Objcm.g:998:31: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX658=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_param25433); 
                    STRUCT_PREFIX658_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX658)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX658_tree);


                    }
                    break;

            }


            // Objcm.g:998:46: ( 'unsigned' )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==201) ) {
                int LA180_1 = input.LA(2);

                if ( (LA180_1==ID||LA180_1==VOID||LA180_1==201) ) {
                    alt180=1;
                }
            }
            switch (alt180) {
                case 1 :
                    // Objcm.g:998:46: 'unsigned'
                    {
                    string_literal659=(Token)match(input,201,FOLLOW_201_in_method_param25436); 
                    string_literal659_tree = 
                    (Object)adaptor.create(string_literal659)
                    ;
                    adaptor.addChild(root_0, string_literal659_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_method_param25439);
            field_type660=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type660.getTree());

            // Objcm.g:998:69: ( name )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==ID||LA181_0==182||LA181_0==185||LA181_0==193||LA181_0==196) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // Objcm.g:998:69: name
                    {
                    pushFollow(FOLLOW_name_in_method_param25441);
                    name661=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name661.getTree());

                    }
                    break;

            }


            // Objcm.g:998:75: ( index_wrapper )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==L_KBR) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // Objcm.g:998:75: index_wrapper
                    {
                    pushFollow(FOLLOW_index_wrapper_in_method_param25444);
                    index_wrapper662=index_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, index_wrapper662.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param2"


    public static class indexed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexed"
    // Objcm.g:1000:1: indexed : L_KBR ( NUMBER )? R_KBR ;
    public final ObjcmParser.indexed_return indexed() throws RecognitionException {
        ObjcmParser.indexed_return retval = new ObjcmParser.indexed_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR663=null;
        Token NUMBER664=null;
        Token R_KBR665=null;

        Object L_KBR663_tree=null;
        Object NUMBER664_tree=null;
        Object R_KBR665_tree=null;

        try {
            // Objcm.g:1000:9: ( L_KBR ( NUMBER )? R_KBR )
            // Objcm.g:1000:11: L_KBR ( NUMBER )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR663=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_indexed5454); 
            L_KBR663_tree = 
            (Object)adaptor.create(L_KBR663)
            ;
            adaptor.addChild(root_0, L_KBR663_tree);


            // Objcm.g:1000:17: ( NUMBER )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==NUMBER) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // Objcm.g:1000:17: NUMBER
                    {
                    NUMBER664=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_indexed5456); 
                    NUMBER664_tree = 
                    (Object)adaptor.create(NUMBER664)
                    ;
                    adaptor.addChild(root_0, NUMBER664_tree);


                    }
                    break;

            }


            R_KBR665=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_indexed5459); 
            R_KBR665_tree = 
            (Object)adaptor.create(R_KBR665)
            ;
            adaptor.addChild(root_0, R_KBR665_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexed"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // Objcm.g:1002:1: method_params : ( method_param )+ -> ( ^( PARAM method_param ) )+ ;
    public final ObjcmParser.method_params_return method_params() throws RecognitionException {
        ObjcmParser.method_params_return retval = new ObjcmParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param_return method_param666 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // Objcm.g:1003:2: ( ( method_param )+ -> ( ^( PARAM method_param ) )+ )
            // Objcm.g:1003:4: ( method_param )+
            {
            // Objcm.g:1003:4: ( method_param )+
            int cnt184=0;
            loop184:
            do {
                int alt184=2;
                alt184 = dfa184.predict(input);
                switch (alt184) {
            	case 1 :
            	    // Objcm.g:1003:4: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params5469);
            	    method_param666=method_param();

            	    state._fsp--;

            	    stream_method_param.add(method_param666.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt184 >= 1 ) break loop184;
                        EarlyExitException eee =
                            new EarlyExitException(184, input);
                        throw eee;
                }
                cnt184++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1003:18: -> ( ^( PARAM method_param ) )+
            {
                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    // Objcm.g:1003:21: ^( PARAM method_param )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(PARAM, "PARAM")
                    , root_1);

                    adaptor.addChild(root_1, stream_method_param.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_method_param.reset();

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // Objcm.g:1005:1: method_param : ( ( prefix )? | COLON ) ( method_type )? name ;
    public final ObjcmParser.method_param_return method_param() throws RecognitionException {
        ObjcmParser.method_param_return retval = new ObjcmParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON668=null;
        ObjcmParser.prefix_return prefix667 =null;

        ObjcmParser.method_type_return method_type669 =null;

        ObjcmParser.name_return name670 =null;


        Object COLON668_tree=null;

        try {
            // Objcm.g:1006:2: ( ( ( prefix )? | COLON ) ( method_type )? name )
            // Objcm.g:1006:4: ( ( prefix )? | COLON ) ( method_type )? name
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1006:4: ( ( prefix )? | COLON )
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==ID||LA186_0==L_BR||LA186_0==182||LA186_0==185||LA186_0==193||LA186_0==196) ) {
                alt186=1;
            }
            else if ( (LA186_0==COLON) ) {
                alt186=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;

            }
            switch (alt186) {
                case 1 :
                    // Objcm.g:1006:5: ( prefix )?
                    {
                    // Objcm.g:1006:5: ( prefix )?
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==ID) ) {
                        int LA185_1 = input.LA(2);

                        if ( (LA185_1==COLON) ) {
                            alt185=1;
                        }
                    }
                    switch (alt185) {
                        case 1 :
                            // Objcm.g:1006:5: prefix
                            {
                            pushFollow(FOLLOW_prefix_in_method_param5491);
                            prefix667=prefix();

                            state._fsp--;

                            adaptor.addChild(root_0, prefix667.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:1006:15: COLON
                    {
                    COLON668=(Token)match(input,COLON,FOLLOW_COLON_in_method_param5496); 
                    COLON668_tree = 
                    (Object)adaptor.create(COLON668)
                    ;
                    adaptor.addChild(root_0, COLON668_tree);


                    }
                    break;

            }


            // Objcm.g:1006:22: ( method_type )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==L_BR) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // Objcm.g:1006:22: method_type
                    {
                    pushFollow(FOLLOW_method_type_in_method_param5499);
                    method_type669=method_type();

                    state._fsp--;

                    adaptor.addChild(root_0, method_type669.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_name_in_method_param5502);
            name670=name();

            state._fsp--;

            adaptor.addChild(root_0, name670.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // Objcm.g:1009:1: prefix : ID COLON -> ^( PREFIX ID COLON ) ;
    public final ObjcmParser.prefix_return prefix() throws RecognitionException {
        ObjcmParser.prefix_return retval = new ObjcmParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID671=null;
        Token COLON672=null;

        Object ID671_tree=null;
        Object COLON672_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:1009:8: ( ID COLON -> ^( PREFIX ID COLON ) )
            // Objcm.g:1009:10: ID COLON
            {
            ID671=(Token)match(input,ID,FOLLOW_ID_in_prefix5514);  
            stream_ID.add(ID671);


            COLON672=(Token)match(input,COLON,FOLLOW_COLON_in_prefix5516);  
            stream_COLON.add(COLON672);


            // AST REWRITE
            // elements: ID, COLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1009:19: -> ^( PREFIX ID COLON )
            {
                // Objcm.g:1009:22: ^( PREFIX ID COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PREFIX, "PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class incomplete_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "incomplete_prefix"
    // Objcm.g:1011:1: incomplete_prefix : COLON -> ^( INCOMPLETE_PREFIX COLON ) ;
    public final ObjcmParser.incomplete_prefix_return incomplete_prefix() throws RecognitionException {
        ObjcmParser.incomplete_prefix_return retval = new ObjcmParser.incomplete_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON673=null;

        Object COLON673_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");

        try {
            // Objcm.g:1012:2: ( COLON -> ^( INCOMPLETE_PREFIX COLON ) )
            // Objcm.g:1012:4: COLON
            {
            COLON673=(Token)match(input,COLON,FOLLOW_COLON_in_incomplete_prefix5535);  
            stream_COLON.add(COLON673);


            // AST REWRITE
            // elements: COLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1012:10: -> ^( INCOMPLETE_PREFIX COLON )
            {
                // Objcm.g:1012:13: ^( INCOMPLETE_PREFIX COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INCOMPLETE_PREFIX, "INCOMPLETE_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "incomplete_prefix"


    public static class typedef_struct_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_wrapper"
    // Objcm.g:1019:1: typedef_struct_declaration_wrapper : typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) ;
    public final ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration674 =null;


        RewriteRuleSubtreeStream stream_typedef_struct_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_struct_declaration");
        try {
            // Objcm.g:1020:2: ( typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) )
            // Objcm.g:1020:4: typedef_struct_declaration
            {
            pushFollow(FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5557);
            typedef_struct_declaration674=typedef_struct_declaration();

            state._fsp--;

            stream_typedef_struct_declaration.add(typedef_struct_declaration674.getTree());

            // AST REWRITE
            // elements: typedef_struct_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1020:31: -> ^( TYPEDEF_STRUCT typedef_struct_declaration )
            {
                // Objcm.g:1020:34: ^( TYPEDEF_STRUCT typedef_struct_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_STRUCT, "TYPEDEF_STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_struct_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_wrapper"


    public static class typedef_struct_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration"
    // Objcm.g:1024:1: typedef_struct_declaration : STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? ;
    public final ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_return retval = new ObjcmParser.typedef_struct_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX675=null;
        Token L_FBR677=null;
        Token R_FBR679=null;
        Token SEMICOLON681=null;
        ObjcmParser.name_return name676 =null;

        ObjcmParser.typedef_struct_body_return typedef_struct_body678 =null;

        ObjcmParser.name_return name680 =null;


        Object STRUCT_PREFIX675_tree=null;
        Object L_FBR677_tree=null;
        Object R_FBR679_tree=null;
        Object SEMICOLON681_tree=null;

        try {
            // Objcm.g:1025:2: ( STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? )
            // Objcm.g:1025:4: STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX675=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5578); 
            STRUCT_PREFIX675_tree = 
            (Object)adaptor.create(STRUCT_PREFIX675)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX675_tree);


            // Objcm.g:1025:18: ( name )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==ID||LA188_0==182||LA188_0==185||LA188_0==193||LA188_0==196) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // Objcm.g:1025:18: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5580);
                    name676=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name676.getTree());

                    }
                    break;

            }


            L_FBR677=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_struct_declaration5584); 
            L_FBR677_tree = 
            (Object)adaptor.create(L_FBR677)
            ;
            adaptor.addChild(root_0, L_FBR677_tree);


            // Objcm.g:1027:3: ( typedef_struct_body )+
            int cnt189=0;
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==ID||LA189_0==VOID||LA189_0==201) ) {
                    alt189=1;
                }


                switch (alt189) {
            	case 1 :
            	    // Objcm.g:1027:3: typedef_struct_body
            	    {
            	    pushFollow(FOLLOW_typedef_struct_body_in_typedef_struct_declaration5589);
            	    typedef_struct_body678=typedef_struct_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_struct_body678.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt189 >= 1 ) break loop189;
                        EarlyExitException eee =
                            new EarlyExitException(189, input);
                        throw eee;
                }
                cnt189++;
            } while (true);


            R_FBR679=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_struct_declaration5593); 
            R_FBR679_tree = 
            (Object)adaptor.create(R_FBR679)
            ;
            adaptor.addChild(root_0, R_FBR679_tree);


            // Objcm.g:1028:9: ( name )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==ID) ) {
                int LA190_1 = input.LA(2);

                if ( (LA190_1==EOF||LA190_1==CONST_PREFIX||LA190_1==ENUM_PREFIX||LA190_1==L_MINUS||LA190_1==L_PLUS||LA190_1==SEMICOLON||LA190_1==STATIC_PREFIX||LA190_1==STRUCT_PREFIX||LA190_1==VOID||LA190_1==167||(LA190_1 >= 169 && LA190_1 <= 170)||LA190_1==176||LA190_1==189||LA190_1==199||LA190_1==201) ) {
                    alt190=1;
                }
                else if ( (LA190_1==ID) ) {
                    int LA190_23 = input.LA(3);

                    if ( (LA190_23==L_KBR) ) {
                        int LA190_38 = input.LA(4);

                        if ( (LA190_38==R_KBR) ) {
                            alt190=1;
                        }
                    }
                    else if ( (LA190_23==ASTERISK||LA190_23==ID||LA190_23==L_LESS||LA190_23==182||LA190_23==185||LA190_23==193||LA190_23==196) ) {
                        alt190=1;
                    }
                }
            }
            else if ( (LA190_0==182||LA190_0==185||LA190_0==193||LA190_0==196) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // Objcm.g:1028:9: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5596);
                    name680=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name680.getTree());

                    }
                    break;

            }


            // Objcm.g:1028:15: ( SEMICOLON )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==SEMICOLON) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // Objcm.g:1028:15: SEMICOLON
                    {
                    SEMICOLON681=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_struct_declaration5599); 
                    SEMICOLON681_tree = 
                    (Object)adaptor.create(SEMICOLON681)
                    ;
                    adaptor.addChild(root_0, SEMICOLON681_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration"


    public static class typedef_struct_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_body"
    // Objcm.g:1031:1: typedef_struct_body : typedef_struct_declaration_element_wrapper ;
    public final ObjcmParser.typedef_struct_body_return typedef_struct_body() throws RecognitionException {
        ObjcmParser.typedef_struct_body_return retval = new ObjcmParser.typedef_struct_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper682 =null;



        try {
            // Objcm.g:1032:2: ( typedef_struct_declaration_element_wrapper )
            // Objcm.g:1032:4: typedef_struct_declaration_element_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5612);
            typedef_struct_declaration_element_wrapper682=typedef_struct_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_struct_declaration_element_wrapper682.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_body"


    public static class typedef_struct_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_element_wrapper"
    // Objcm.g:1035:1: typedef_struct_declaration_element_wrapper : struct_field -> ^( STRUCT_FIELD struct_field ) ;
    public final ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_element_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_field_return struct_field683 =null;


        RewriteRuleSubtreeStream stream_struct_field=new RewriteRuleSubtreeStream(adaptor,"rule struct_field");
        try {
            // Objcm.g:1036:2: ( struct_field -> ^( STRUCT_FIELD struct_field ) )
            // Objcm.g:1036:4: struct_field
            {
            pushFollow(FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5624);
            struct_field683=struct_field();

            state._fsp--;

            stream_struct_field.add(struct_field683.getTree());

            // AST REWRITE
            // elements: struct_field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1036:17: -> ^( STRUCT_FIELD struct_field )
            {
                // Objcm.g:1036:20: ^( STRUCT_FIELD struct_field )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT_FIELD, "STRUCT_FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_struct_field.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_element_wrapper"


    public static class struct_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_field"
    // Objcm.g:1038:1: struct_field : field_type name ( COMMA name )* SEMICOLON ;
    public final ObjcmParser.struct_field_return struct_field() throws RecognitionException {
        ObjcmParser.struct_field_return retval = new ObjcmParser.struct_field_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA686=null;
        Token SEMICOLON688=null;
        ObjcmParser.field_type_return field_type684 =null;

        ObjcmParser.name_return name685 =null;

        ObjcmParser.name_return name687 =null;


        Object COMMA686_tree=null;
        Object SEMICOLON688_tree=null;

        try {
            // Objcm.g:1039:2: ( field_type name ( COMMA name )* SEMICOLON )
            // Objcm.g:1039:4: field_type name ( COMMA name )* SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_struct_field5642);
            field_type684=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type684.getTree());

            pushFollow(FOLLOW_name_in_struct_field5644);
            name685=name();

            state._fsp--;

            adaptor.addChild(root_0, name685.getTree());

            // Objcm.g:1039:21: ( COMMA name )*
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==COMMA) ) {
                    alt192=1;
                }


                switch (alt192) {
            	case 1 :
            	    // Objcm.g:1039:22: COMMA name
            	    {
            	    COMMA686=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_field5648); 
            	    COMMA686_tree = 
            	    (Object)adaptor.create(COMMA686)
            	    ;
            	    adaptor.addChild(root_0, COMMA686_tree);


            	    pushFollow(FOLLOW_name_in_struct_field5651);
            	    name687=name();

            	    state._fsp--;

            	    adaptor.addChild(root_0, name687.getTree());

            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);


            SEMICOLON688=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_field5655); 
            SEMICOLON688_tree = 
            (Object)adaptor.create(SEMICOLON688)
            ;
            adaptor.addChild(root_0, SEMICOLON688_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_field"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // Objcm.g:1046:1: typedef_declaration_wrapper : typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_wrapper_return retval = new ObjcmParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration689 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // Objcm.g:1047:2: ( typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // Objcm.g:1047:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5671);
            typedef_declaration689=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration689.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1047:24: -> ^( TYPEDEF typedef_declaration )
            {
                // Objcm.g:1047:27: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class enum_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_declaration"
    // Objcm.g:1050:1: enum_declaration : typedef_declaration -> ^( ENUM typedef_declaration ) ;
    public final ObjcmParser.enum_declaration_return enum_declaration() throws RecognitionException {
        ObjcmParser.enum_declaration_return retval = new ObjcmParser.enum_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration690 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // Objcm.g:1051:2: ( typedef_declaration -> ^( ENUM typedef_declaration ) )
            // Objcm.g:1051:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_enum_declaration5691);
            typedef_declaration690=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration690.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1051:24: -> ^( ENUM typedef_declaration )
            {
                // Objcm.g:1051:27: ^( ENUM typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_declaration"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // Objcm.g:1053:1: typedef_declaration : ENUM_PREFIX ( name )? L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON ;
    public final ObjcmParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcmParser.typedef_declaration_return retval = new ObjcmParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX691=null;
        Token L_FBR693=null;
        Token COMMA695=null;
        Token R_FBR697=null;
        Token SEMICOLON699=null;
        ObjcmParser.name_return name692 =null;

        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper694 =null;

        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper696 =null;

        ObjcmParser.name_return name698 =null;


        Object ENUM_PREFIX691_tree=null;
        Object L_FBR693_tree=null;
        Object COMMA695_tree=null;
        Object R_FBR697_tree=null;
        Object SEMICOLON699_tree=null;

        try {
            // Objcm.g:1054:2: ( ENUM_PREFIX ( name )? L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON )
            // Objcm.g:1054:5: ENUM_PREFIX ( name )? L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX691=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_typedef_declaration5711); 
            ENUM_PREFIX691_tree = 
            (Object)adaptor.create(ENUM_PREFIX691)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX691_tree);


            // Objcm.g:1054:17: ( name )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==ID||LA193_0==182||LA193_0==185||LA193_0==193||LA193_0==196) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // Objcm.g:1054:17: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_declaration5713);
                    name692=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name692.getTree());

                    }
                    break;

            }


            L_FBR693=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_declaration5716); 
            L_FBR693_tree = 
            (Object)adaptor.create(L_FBR693)
            ;
            adaptor.addChild(root_0, L_FBR693_tree);


            pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5719);
            typedef_declaration_element_wrapper694=typedef_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_declaration_element_wrapper694.getTree());

            // Objcm.g:1054:67: ( COMMA typedef_declaration_element_wrapper )*
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);

                if ( (LA194_0==COMMA) ) {
                    alt194=1;
                }


                switch (alt194) {
            	case 1 :
            	    // Objcm.g:1054:68: COMMA typedef_declaration_element_wrapper
            	    {
            	    COMMA695=(Token)match(input,COMMA,FOLLOW_COMMA_in_typedef_declaration5723); 
            	    COMMA695_tree = 
            	    (Object)adaptor.create(COMMA695)
            	    ;
            	    adaptor.addChild(root_0, COMMA695_tree);


            	    pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5726);
            	    typedef_declaration_element_wrapper696=typedef_declaration_element_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_declaration_element_wrapper696.getTree());

            	    }
            	    break;

            	default :
            	    break loop194;
                }
            } while (true);


            R_FBR697=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_declaration5730); 
            R_FBR697_tree = 
            (Object)adaptor.create(R_FBR697)
            ;
            adaptor.addChild(root_0, R_FBR697_tree);


            // Objcm.g:1054:120: ( name )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==ID||LA195_0==182||LA195_0==185||LA195_0==193||LA195_0==196) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // Objcm.g:1054:120: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_declaration5733);
                    name698=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name698.getTree());

                    }
                    break;

            }


            SEMICOLON699=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_declaration5736); 
            SEMICOLON699_tree = 
            (Object)adaptor.create(SEMICOLON699)
            ;
            adaptor.addChild(root_0, SEMICOLON699_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class typedef_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element_wrapper"
    // Objcm.g:1056:1: typedef_declaration_element_wrapper : typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) ;
    public final ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_wrapper_return retval = new ObjcmParser.typedef_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_element_return typedef_declaration_element700 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration_element=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration_element");
        try {
            // Objcm.g:1057:2: ( typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) )
            // Objcm.g:1057:4: typedef_declaration_element
            {
            pushFollow(FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5746);
            typedef_declaration_element700=typedef_declaration_element();

            state._fsp--;

            stream_typedef_declaration_element.add(typedef_declaration_element700.getTree());

            // AST REWRITE
            // elements: typedef_declaration_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1057:32: -> ^( TYPEDEF_ELEMENT typedef_declaration_element )
            {
                // Objcm.g:1057:35: ^( TYPEDEF_ELEMENT typedef_declaration_element )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_ELEMENT, "TYPEDEF_ELEMENT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration_element.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element_wrapper"


    public static class typedef_declaration_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element"
    // Objcm.g:1060:1: typedef_declaration_element : ( ID ( L_EQ ( ID | NUMBER ) )? | NUMBER L_EQ NUMBER );
    public final ObjcmParser.typedef_declaration_element_return typedef_declaration_element() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_return retval = new ObjcmParser.typedef_declaration_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID701=null;
        Token L_EQ702=null;
        Token set703=null;
        Token NUMBER704=null;
        Token L_EQ705=null;
        Token NUMBER706=null;

        Object ID701_tree=null;
        Object L_EQ702_tree=null;
        Object set703_tree=null;
        Object NUMBER704_tree=null;
        Object L_EQ705_tree=null;
        Object NUMBER706_tree=null;

        try {
            // Objcm.g:1061:2: ( ID ( L_EQ ( ID | NUMBER ) )? | NUMBER L_EQ NUMBER )
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==ID) ) {
                alt197=1;
            }
            else if ( (LA197_0==NUMBER) ) {
                alt197=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;

            }
            switch (alt197) {
                case 1 :
                    // Objcm.g:1061:4: ID ( L_EQ ( ID | NUMBER ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    ID701=(Token)match(input,ID,FOLLOW_ID_in_typedef_declaration_element5765); 
                    ID701_tree = 
                    (Object)adaptor.create(ID701)
                    ;
                    adaptor.addChild(root_0, ID701_tree);


                    // Objcm.g:1061:8: ( L_EQ ( ID | NUMBER ) )?
                    int alt196=2;
                    int LA196_0 = input.LA(1);

                    if ( (LA196_0==L_EQ) ) {
                        alt196=1;
                    }
                    switch (alt196) {
                        case 1 :
                            // Objcm.g:1061:9: L_EQ ( ID | NUMBER )
                            {
                            L_EQ702=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_typedef_declaration_element5769); 
                            L_EQ702_tree = 
                            (Object)adaptor.create(L_EQ702)
                            ;
                            adaptor.addChild(root_0, L_EQ702_tree);


                            set703=(Token)input.LT(1);

                            if ( input.LA(1)==ID||input.LA(1)==NUMBER ) {
                                input.consume();
                                adaptor.addChild(root_0, 
                                (Object)adaptor.create(set703)
                                );
                                state.errorRecovery=false;
                            }
                            else {
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:1062:4: NUMBER L_EQ NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER704=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_typedef_declaration_element5784); 
                    NUMBER704_tree = 
                    (Object)adaptor.create(NUMBER704)
                    ;
                    adaptor.addChild(root_0, NUMBER704_tree);


                    L_EQ705=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_typedef_declaration_element5786); 
                    L_EQ705_tree = 
                    (Object)adaptor.create(L_EQ705)
                    ;
                    adaptor.addChild(root_0, L_EQ705_tree);


                    NUMBER706=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_typedef_declaration_element5788); 
                    NUMBER706_tree = 
                    (Object)adaptor.create(NUMBER706)
                    ;
                    adaptor.addChild(root_0, NUMBER706_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // Objcm.g:1069:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_wrapper_return retval = new ObjcmParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_return field_declaration707 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // Objcm.g:1070:2: ( field_declaration -> ^( FIELD field_declaration ) )
            // Objcm.g:1070:4: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper5802);
            field_declaration707=field_declaration();

            state._fsp--;

            stream_field_declaration.add(field_declaration707.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1070:22: -> ^( FIELD field_declaration )
            {
                // Objcm.g:1070:25: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // Objcm.g:1072:1: field_declaration : field_modifier_wrapper field_type name field_declaration_end ;
    public final ObjcmParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcmParser.field_declaration_return retval = new ObjcmParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper708 =null;

        ObjcmParser.field_type_return field_type709 =null;

        ObjcmParser.name_return name710 =null;

        ObjcmParser.field_declaration_end_return field_declaration_end711 =null;



        try {
            // Objcm.g:1073:2: ( field_modifier_wrapper field_type name field_declaration_end )
            // Objcm.g:1073:4: field_modifier_wrapper field_type name field_declaration_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_modifier_wrapper_in_field_declaration5819);
            field_modifier_wrapper708=field_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, field_modifier_wrapper708.getTree());

            pushFollow(FOLLOW_field_type_in_field_declaration5822);
            field_type709=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type709.getTree());

            pushFollow(FOLLOW_name_in_field_declaration5824);
            name710=name();

            state._fsp--;

            adaptor.addChild(root_0, name710.getTree());

            pushFollow(FOLLOW_field_declaration_end_in_field_declaration5826);
            field_declaration_end711=field_declaration_end();

            state._fsp--;

            adaptor.addChild(root_0, field_declaration_end711.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end"
    // Objcm.g:1075:1: field_declaration_end : ( expr_assign_wrapper )? SEMICOLON ;
    public final ObjcmParser.field_declaration_end_return field_declaration_end() throws RecognitionException {
        ObjcmParser.field_declaration_end_return retval = new ObjcmParser.field_declaration_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON713=null;
        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper712 =null;


        Object SEMICOLON713_tree=null;

        try {
            // Objcm.g:1076:2: ( ( expr_assign_wrapper )? SEMICOLON )
            // Objcm.g:1076:5: ( expr_assign_wrapper )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1076:5: ( expr_assign_wrapper )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==L_AND_EQ||(LA198_0 >= L_DIV_EQ && LA198_0 <= L_EQ)||LA198_0==L_LEFT_EQ||LA198_0==L_MINUS_EQ||LA198_0==L_MULT_EQ||LA198_0==L_OR_EQ||LA198_0==L_PERC_EQ||LA198_0==L_PLUS_EQ||LA198_0==L_RIGHT_EQ||LA198_0==L_XOR_EQ) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // Objcm.g:1076:5: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_field_declaration_end5837);
                    expr_assign_wrapper712=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper712.getTree());

                    }
                    break;

            }


            SEMICOLON713=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration_end5840); 
            SEMICOLON713_tree = 
            (Object)adaptor.create(SEMICOLON713)
            ;
            adaptor.addChild(root_0, SEMICOLON713_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end"


    public static class type_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start_wrapper"
    // Objcm.g:1078:1: type_start_wrapper : type_start -> ^( M_TYPE_START type_start ) ;
    public final ObjcmParser.type_start_wrapper_return type_start_wrapper() throws RecognitionException {
        ObjcmParser.type_start_wrapper_return retval = new ObjcmParser.type_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_start_return type_start714 =null;


        RewriteRuleSubtreeStream stream_type_start=new RewriteRuleSubtreeStream(adaptor,"rule type_start");
        try {
            // Objcm.g:1079:2: ( type_start -> ^( M_TYPE_START type_start ) )
            // Objcm.g:1079:4: type_start
            {
            pushFollow(FOLLOW_type_start_in_type_start_wrapper5850);
            type_start714=type_start();

            state._fsp--;

            stream_type_start.add(type_start714.getTree());

            // AST REWRITE
            // elements: type_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1079:15: -> ^( M_TYPE_START type_start )
            {
                // Objcm.g:1079:18: ^( M_TYPE_START type_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(M_TYPE_START, "M_TYPE_START")
                , root_1);

                adaptor.addChild(root_1, stream_type_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start_wrapper"


    public static class type_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start"
    // Objcm.g:1081:1: type_start : ( CONST_PREFIX )? field_type name ( L_KBR R_KBR )? type_end ;
    public final ObjcmParser.type_start_return type_start() throws RecognitionException {
        ObjcmParser.type_start_return retval = new ObjcmParser.type_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX715=null;
        Token L_KBR718=null;
        Token R_KBR719=null;
        ObjcmParser.field_type_return field_type716 =null;

        ObjcmParser.name_return name717 =null;

        ObjcmParser.type_end_return type_end720 =null;


        Object CONST_PREFIX715_tree=null;
        Object L_KBR718_tree=null;
        Object R_KBR719_tree=null;

        try {
            // Objcm.g:1082:2: ( ( CONST_PREFIX )? field_type name ( L_KBR R_KBR )? type_end )
            // Objcm.g:1082:4: ( CONST_PREFIX )? field_type name ( L_KBR R_KBR )? type_end
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1082:4: ( CONST_PREFIX )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==CONST_PREFIX) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // Objcm.g:1082:4: CONST_PREFIX
                    {
                    CONST_PREFIX715=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_start5867); 
                    CONST_PREFIX715_tree = 
                    (Object)adaptor.create(CONST_PREFIX715)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX715_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_type_start5870);
            field_type716=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type716.getTree());

            pushFollow(FOLLOW_name_in_type_start5872);
            name717=name();

            state._fsp--;

            adaptor.addChild(root_0, name717.getTree());

            // Objcm.g:1082:34: ( L_KBR R_KBR )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==L_KBR) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // Objcm.g:1082:35: L_KBR R_KBR
                    {
                    L_KBR718=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_type_start5875); 
                    L_KBR718_tree = 
                    (Object)adaptor.create(L_KBR718)
                    ;
                    adaptor.addChild(root_0, L_KBR718_tree);


                    R_KBR719=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_type_start5877); 
                    R_KBR719_tree = 
                    (Object)adaptor.create(R_KBR719)
                    ;
                    adaptor.addChild(root_0, R_KBR719_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_end_in_type_start5881);
            type_end720=type_end();

            state._fsp--;

            adaptor.addChild(root_0, type_end720.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start"


    public static class type_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_end"
    // Objcm.g:1084:1: type_end : ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) );
    public final ObjcmParser.type_end_return type_end() throws RecognitionException {
        ObjcmParser.type_end_return retval = new ObjcmParser.type_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration4_return field_declaration4721 =null;

        ObjcmParser.method_declaration4_return method_declaration4722 =null;


        RewriteRuleSubtreeStream stream_field_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration4");
        RewriteRuleSubtreeStream stream_method_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration4");
        try {
            // Objcm.g:1084:9: ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) )
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==L_AND_EQ||(LA201_0 >= L_DIV_EQ && LA201_0 <= L_EQ)||LA201_0==L_LEFT_EQ||LA201_0==L_MINUS_EQ||LA201_0==L_MULT_EQ||LA201_0==L_OR_EQ||LA201_0==L_PERC_EQ||LA201_0==L_PLUS_EQ||LA201_0==L_RIGHT_EQ||LA201_0==L_XOR_EQ||LA201_0==SEMICOLON) ) {
                alt201=1;
            }
            else if ( (LA201_0==L_BR) ) {
                alt201=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;

            }
            switch (alt201) {
                case 1 :
                    // Objcm.g:1084:11: field_declaration4
                    {
                    pushFollow(FOLLOW_field_declaration4_in_type_end5889);
                    field_declaration4721=field_declaration4();

                    state._fsp--;

                    stream_field_declaration4.add(field_declaration4721.getTree());

                    // AST REWRITE
                    // elements: field_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1084:30: -> ^( FIELD field_declaration4 )
                    {
                        // Objcm.g:1084:33: ^( FIELD field_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD, "FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_field_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:1085:4: method_declaration4
                    {
                    pushFollow(FOLLOW_method_declaration4_in_type_end5902);
                    method_declaration4722=method_declaration4();

                    state._fsp--;

                    stream_method_declaration4.add(method_declaration4722.getTree());

                    // AST REWRITE
                    // elements: method_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1085:24: -> ^( STATIC_METHOD method_declaration4 )
                    {
                        // Objcm.g:1085:27: ^( STATIC_METHOD method_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_end"


    public static class field_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration4"
    // Objcm.g:1088:1: field_declaration4 : ( expr_assign_wrapper )? SEMICOLON ;
    public final ObjcmParser.field_declaration4_return field_declaration4() throws RecognitionException {
        ObjcmParser.field_declaration4_return retval = new ObjcmParser.field_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON724=null;
        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper723 =null;


        Object SEMICOLON724_tree=null;

        try {
            // Objcm.g:1089:2: ( ( expr_assign_wrapper )? SEMICOLON )
            // Objcm.g:1089:5: ( expr_assign_wrapper )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1089:5: ( expr_assign_wrapper )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==L_AND_EQ||(LA202_0 >= L_DIV_EQ && LA202_0 <= L_EQ)||LA202_0==L_LEFT_EQ||LA202_0==L_MINUS_EQ||LA202_0==L_MULT_EQ||LA202_0==L_OR_EQ||LA202_0==L_PERC_EQ||LA202_0==L_PLUS_EQ||LA202_0==L_RIGHT_EQ||LA202_0==L_XOR_EQ) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // Objcm.g:1089:5: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_field_declaration45924);
                    expr_assign_wrapper723=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper723.getTree());

                    }
                    break;

            }


            SEMICOLON724=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration45927); 
            SEMICOLON724_tree = 
            (Object)adaptor.create(SEMICOLON724)
            ;
            adaptor.addChild(root_0, SEMICOLON724_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration4"


    public static class method_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration4"
    // Objcm.g:1092:1: method_declaration4 : method_params2 block_wrapper ;
    public final ObjcmParser.method_declaration4_return method_declaration4() throws RecognitionException {
        ObjcmParser.method_declaration4_return retval = new ObjcmParser.method_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2725 =null;

        ObjcmParser.block_wrapper_return block_wrapper726 =null;



        try {
            // Objcm.g:1093:2: ( method_params2 block_wrapper )
            // Objcm.g:1093:5: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_declaration45940);
            method_params2725=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2725.getTree());

            pushFollow(FOLLOW_block_wrapper_in_method_declaration45945);
            block_wrapper726=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper726.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration4"


    public static class field_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier_wrapper"
    // Objcm.g:1097:1: field_modifier_wrapper : field_modifier -> ^( MODIFIER field_modifier ) ;
    public final ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper() throws RecognitionException {
        ObjcmParser.field_modifier_wrapper_return retval = new ObjcmParser.field_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_return field_modifier727 =null;


        RewriteRuleSubtreeStream stream_field_modifier=new RewriteRuleSubtreeStream(adaptor,"rule field_modifier");
        try {
            // Objcm.g:1098:2: ( field_modifier -> ^( MODIFIER field_modifier ) )
            // Objcm.g:1098:4: field_modifier
            {
            pushFollow(FOLLOW_field_modifier_in_field_modifier_wrapper5957);
            field_modifier727=field_modifier();

            state._fsp--;

            stream_field_modifier.add(field_modifier727.getTree());

            // AST REWRITE
            // elements: field_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1098:19: -> ^( MODIFIER field_modifier )
            {
                // Objcm.g:1098:22: ^( MODIFIER field_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_field_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier_wrapper"


    public static class field_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier"
    // Objcm.g:1100:1: field_modifier : 'extern' ;
    public final ObjcmParser.field_modifier_return field_modifier() throws RecognitionException {
        ObjcmParser.field_modifier_return retval = new ObjcmParser.field_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal728=null;

        Object string_literal728_tree=null;

        try {
            // Objcm.g:1101:2: ( 'extern' )
            // Objcm.g:1101:4: 'extern'
            {
            root_0 = (Object)adaptor.nil();


            string_literal728=(Token)match(input,189,FOLLOW_189_in_field_modifier5975); 
            string_literal728_tree = 
            (Object)adaptor.create(string_literal728)
            ;
            adaptor.addChild(root_0, string_literal728_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier"


    public static class field_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type"
    // Objcm.g:1104:1: field_type : field_type_internal -> ^( TYPE field_type_internal ) ;
    public final ObjcmParser.field_type_return field_type() throws RecognitionException {
        ObjcmParser.field_type_return retval = new ObjcmParser.field_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_internal_return field_type_internal729 =null;


        RewriteRuleSubtreeStream stream_field_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_type_internal");
        try {
            // Objcm.g:1105:2: ( field_type_internal -> ^( TYPE field_type_internal ) )
            // Objcm.g:1105:5: field_type_internal
            {
            pushFollow(FOLLOW_field_type_internal_in_field_type5987);
            field_type_internal729=field_type_internal();

            state._fsp--;

            stream_field_type_internal.add(field_type_internal729.getTree());

            // AST REWRITE
            // elements: field_type_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1105:25: -> ^( TYPE field_type_internal )
            {
                // Objcm.g:1105:28: ^( TYPE field_type_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE, "TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type"


    public static class field_type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_internal"
    // Objcm.g:1107:1: field_type_internal : type_internal ( generic )? ( ASTERISK )* ;
    public final ObjcmParser.field_type_internal_return field_type_internal() throws RecognitionException {
        ObjcmParser.field_type_internal_return retval = new ObjcmParser.field_type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK732=null;
        ObjcmParser.type_internal_return type_internal730 =null;

        ObjcmParser.generic_return generic731 =null;


        Object ASTERISK732_tree=null;

        try {
            // Objcm.g:1108:2: ( type_internal ( generic )? ( ASTERISK )* )
            // Objcm.g:1108:4: type_internal ( generic )? ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_field_type_internal6006);
            type_internal730=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal730.getTree());

            // Objcm.g:1108:18: ( generic )?
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==L_LESS) ) {
                alt203=1;
            }
            switch (alt203) {
                case 1 :
                    // Objcm.g:1108:18: generic
                    {
                    pushFollow(FOLLOW_generic_in_field_type_internal6008);
                    generic731=generic();

                    state._fsp--;

                    adaptor.addChild(root_0, generic731.getTree());

                    }
                    break;

            }


            // Objcm.g:1108:27: ( ASTERISK )*
            loop204:
            do {
                int alt204=2;
                int LA204_0 = input.LA(1);

                if ( (LA204_0==ASTERISK) ) {
                    alt204=1;
                }


                switch (alt204) {
            	case 1 :
            	    // Objcm.g:1108:27: ASTERISK
            	    {
            	    ASTERISK732=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_field_type_internal6011); 
            	    ASTERISK732_tree = 
            	    (Object)adaptor.create(ASTERISK732)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK732_tree);


            	    }
            	    break;

            	default :
            	    break loop204;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_internal"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // Objcm.g:1114:1: name : name_internal -> ^( NAME name_internal ) ;
    public final ObjcmParser.name_return name() throws RecognitionException {
        ObjcmParser.name_return retval = new ObjcmParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal733 =null;


        RewriteRuleSubtreeStream stream_name_internal=new RewriteRuleSubtreeStream(adaptor,"rule name_internal");
        try {
            // Objcm.g:1114:6: ( name_internal -> ^( NAME name_internal ) )
            // Objcm.g:1114:8: name_internal
            {
            pushFollow(FOLLOW_name_internal_in_name6024);
            name_internal733=name_internal();

            state._fsp--;

            stream_name_internal.add(name_internal733.getTree());

            // AST REWRITE
            // elements: name_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1114:22: -> ^( NAME name_internal )
            {
                // Objcm.g:1114:25: ^( NAME name_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, stream_name_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_internal"
    // Objcm.g:1117:1: name_internal : ( ID | 'in' | property );
    public final ObjcmParser.name_internal_return name_internal() throws RecognitionException {
        ObjcmParser.name_internal_return retval = new ObjcmParser.name_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID734=null;
        Token string_literal735=null;
        ObjcmParser.property_return property736 =null;


        Object ID734_tree=null;
        Object string_literal735_tree=null;

        try {
            // Objcm.g:1118:2: ( ID | 'in' | property )
            int alt205=3;
            switch ( input.LA(1) ) {
            case ID:
                {
                alt205=1;
                }
                break;
            case 193:
                {
                alt205=2;
                }
                break;
            case 182:
            case 185:
            case 196:
                {
                alt205=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 205, 0, input);

                throw nvae;

            }

            switch (alt205) {
                case 1 :
                    // Objcm.g:1118:4: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID734=(Token)match(input,ID,FOLLOW_ID_in_name_internal6045); 
                    ID734_tree = 
                    (Object)adaptor.create(ID734)
                    ;
                    adaptor.addChild(root_0, ID734_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:1119:5: 'in'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal735=(Token)match(input,193,FOLLOW_193_in_name_internal6052); 
                    string_literal735_tree = 
                    (Object)adaptor.create(string_literal735)
                    ;
                    adaptor.addChild(root_0, string_literal735_tree);


                    }
                    break;
                case 3 :
                    // Objcm.g:1120:5: property
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_property_in_name_internal6059);
                    property736=property();

                    state._fsp--;

                    adaptor.addChild(root_0, property736.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_internal"


    public static class string_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_value"
    // Objcm.g:1123:1: string_value : STRING_LITERAL ;
    public final ObjcmParser.string_value_return string_value() throws RecognitionException {
        ObjcmParser.string_value_return retval = new ObjcmParser.string_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL737=null;

        Object STRING_LITERAL737_tree=null;

        try {
            // Objcm.g:1124:2: ( STRING_LITERAL )
            // Objcm.g:1124:4: STRING_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL737=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string_value6070); 
            STRING_LITERAL737_tree = 
            (Object)adaptor.create(STRING_LITERAL737)
            ;
            adaptor.addChild(root_0, STRING_LITERAL737_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_value"


    public static class null_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_stmt"
    // Objcm.g:1126:1: null_stmt : ( 'nil' | 'Nil' );
    public final ObjcmParser.null_stmt_return null_stmt() throws RecognitionException {
        ObjcmParser.null_stmt_return retval = new ObjcmParser.null_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set738=null;

        Object set738_tree=null;

        try {
            // Objcm.g:1126:11: ( 'nil' | 'Nil' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set738=(Token)input.LT(1);

            if ( input.LA(1)==179||input.LA(1)==195 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set738)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_stmt"

    // Delegated rules


    protected DFA30 dfa30 = new DFA30(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA78 dfa78 = new DFA78(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA184 dfa184 = new DFA184(this);
    static final String DFA30_eotS =
        "\u01ab\uffff";
    static final String DFA30_eofS =
        "\u01ab\uffff";
    static final String DFA30_minS =
        "\1\6\14\uffff\1\6\34\uffff\3\6\2\uffff\2\6\2\66\2\uffff\1\6\12\uffff"+
        "\2\6\7\uffff\2\6\2\66\15\uffff\2\6\6\uffff\2\6\2\66\15\uffff\2\6"+
        "\u0136\uffff";
    static final String DFA30_maxS =
        "\1\u00ca\14\uffff\1\u00c9\34\uffff\3\u00c9\2\uffff\2\u00c9\2\u00c4"+
        "\2\uffff\1\u00c9\12\uffff\2\u00c9\7\uffff\2\u00c9\2\u00c4\15\uffff"+
        "\2\u00c9\6\uffff\2\u00c9\2\u00c4\15\uffff\2\u00c9\u0136\uffff";
    static final String DFA30_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\24\uffff\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\uffff\1\16\1\17\1\20\1\21\1\22\1\23\1\24\34\uffff\1"+
        "\6\31\uffff\1\6\30\uffff\1\6\1\uffff\26\6\1\uffff\34\6\14\uffff"+
        "\1\6\10\uffff\26\6\7\uffff\4\6\13\uffff\110\6\7\uffff\4\6\13\uffff"+
        "\110\6\7\uffff\4\6\13\uffff";
    static final String DFA30_specialS =
        "\u01ab\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\6\2\uffff\1\41\11\uffff\1\5\6\uffff\1\44\33\uffff\1\6\11"+
            "\uffff\1\6\2\uffff\1\6\5\uffff\1\6\4\uffff\1\6\1\uffff\1\6\4"+
            "\uffff\1\6\5\uffff\1\6\1\uffff\1\6\3\uffff\1\6\16\uffff\1\6"+
            "\16\uffff\1\47\2\uffff\1\41\1\6\2\uffff\1\3\3\uffff\3\6\1\uffff"+
            "\1\43\17\uffff\1\46\7\uffff\1\6\6\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\1\2\1\1\1\6\1\uffff\1\45\1\6\2\uffff\1\6\1\uffff\1\4\1\34\1"+
            "\51\1\37\1\50\1\33\1\6\1\uffff\2\6\1\36\1\35\2\uffff\1\15\1"+
            "\40",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\46\57\uffff\1\52\147\uffff\1\46\27\uffff\1\54\2\uffff\1"+
            "\54\7\uffff\1\53\2\uffff\1\54\4\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\65\11\uffff\1\106\1\101\5\uffff\1\61\36\uffff\1\6\11\uffff"+
            "\2\6\1\100\1\57\1\106\2\100\1\6\1\uffff\1\60\1\6\1\100\3\6\1"+
            "\100\3\6\1\100\1\6\1\uffff\1\6\1\100\1\6\1\106\1\100\1\6\1\100"+
            "\3\6\1\100\1\uffff\1\6\1\100\33\uffff\1\106\36\uffff\1\6\4\uffff"+
            "\1\62\22\uffff\1\6\2\uffff\1\6\7\uffff\1\6\2\uffff\1\6\4\uffff"+
            "\1\6",
            "\1\106\11\uffff\1\140\1\133\5\uffff\1\113\36\uffff\1\106\11"+
            "\uffff\2\106\1\132\1\111\1\106\2\132\1\106\1\uffff\1\112\1\106"+
            "\1\132\3\106\1\132\3\106\1\132\1\106\1\uffff\1\106\1\132\2\106"+
            "\1\132\1\106\1\132\3\106\1\132\1\uffff\1\106\1\132\33\uffff"+
            "\1\140\36\uffff\1\106\4\uffff\1\114\22\uffff\1\106\2\uffff\1"+
            "\106\7\uffff\1\106\2\uffff\1\106\4\uffff\1\106",
            "\1\140\11\uffff\1\171\1\164\5\uffff\1\144\36\uffff\1\140\11"+
            "\uffff\2\140\1\163\1\142\1\140\2\163\1\140\1\uffff\1\143\1\140"+
            "\1\163\3\140\1\163\3\140\1\163\1\140\1\uffff\1\140\1\163\2\140"+
            "\1\163\1\140\1\163\3\140\1\163\1\uffff\1\140\1\163\33\uffff"+
            "\1\171\36\uffff\1\140\4\uffff\1\145\22\uffff\1\140\2\uffff\1"+
            "\140\7\uffff\1\140\2\uffff\1\140\4\uffff\1\140",
            "",
            "",
            "\1\173\57\uffff\1\u0083\11\uffff\1\174\2\uffff\1\u0087\5\uffff"+
            "\1\u0086\4\uffff\1\175\1\uffff\1\u0081\4\uffff\1\176\5\uffff"+
            "\1\175\1\uffff\1\u0081\3\uffff\1\177\16\uffff\1\u0088\11\uffff"+
            "\1\u0090\10\uffff\1\u0080\6\uffff\1\u0089\1\u008a\1\u008b\21"+
            "\uffff\1\46\7\uffff\1\u008e\6\uffff\1\u008f\1\uffff\1\u008d"+
            "\3\uffff\1\u008c\2\uffff\1\u0085\2\uffff\1\u0085\7\uffff\1\u0084"+
            "\1\uffff\1\u008c\1\u0085\4\uffff\1\u0082",
            "\1\u0093\57\uffff\1\u009b\11\uffff\1\u0094\2\uffff\1\u009f"+
            "\5\uffff\1\u009e\4\uffff\1\u0095\1\uffff\1\u0099\4\uffff\1\u0096"+
            "\5\uffff\1\u0095\1\uffff\1\u0099\3\uffff\1\u0097\16\uffff\1"+
            "\u00a0\13\uffff\1\u0092\6\uffff\1\u0098\6\uffff\1\u00a1\1\u00a2"+
            "\1\u00a3\31\uffff\1\u00a6\6\uffff\1\u00a7\1\uffff\1\u00a5\3"+
            "\uffff\1\u00a4\2\uffff\1\u009d\2\uffff\1\u009d\7\uffff\1\u009c"+
            "\1\uffff\1\u00a4\1\u009d\4\uffff\1\u009a",
            "\1\u00a8\177\uffff\1\u00aa\2\uffff\1\u00aa\7\uffff\1\u00a9"+
            "\2\uffff\1\u00aa",
            "\1\u00ab\177\uffff\1\u00ad\2\uffff\1\u00ad\7\uffff\1\u00ac"+
            "\2\uffff\1\u00ad",
            "",
            "",
            "\1\171\57\uffff\1\171\11\uffff\1\171\2\uffff\1\u00ba\5\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\31\uffff\1\171\6\uffff\1\171\1\uffff\1\171\3\uffff"+
            "\1\171\2\uffff\1\171\2\uffff\1\171\7\uffff\1\171\1\uffff\2\171"+
            "\4\uffff\1\171",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c4\57\uffff\1\u00cc\11\uffff\1\u00c5\2\uffff\1\u00c3"+
            "\4\uffff\1\u00d8\1\u00cf\4\uffff\1\u00c6\1\uffff\1\u00ca\4\uffff"+
            "\1\u00c7\5\uffff\1\u00c6\1\uffff\1\u00ca\3\uffff\1\u00c8\16"+
            "\uffff\1\u00d0\22\uffff\1\u00c9\6\uffff\1\u00d1\1\u00d2\1\u00d3"+
            "\31\uffff\1\u00d6\6\uffff\1\u00d7\1\uffff\1\u00d5\3\uffff\1"+
            "\u00d4\2\uffff\1\u00ce\2\uffff\1\u00ce\7\uffff\1\u00cd\1\uffff"+
            "\1\u00d4\1\u00ce\4\uffff\1\u00cb",
            "\1\171\57\uffff\1\u00e1\11\uffff\1\171\2\uffff\1\171\5\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\21\uffff\1\46\7\uffff\1\171\6\uffff\1\171\1\uffff"+
            "\1\171\3\uffff\1\171\2\uffff\1\u00e3\2\uffff\1\u00e3\7\uffff"+
            "\1\u00e2\1\uffff\1\171\1\u00e3\4\uffff\1\u00e0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ef\57\uffff\1\u00f7\11\uffff\1\u00f0\2\uffff\1\u00fb"+
            "\5\uffff\1\u00fa\4\uffff\1\u00f1\1\uffff\1\u00f5\4\uffff\1\u00f2"+
            "\5\uffff\1\u00f1\1\uffff\1\u00f5\3\uffff\1\u00f3\16\uffff\1"+
            "\u00fc\11\uffff\1\u0104\10\uffff\1\u00f4\6\uffff\1\u00fd\1\u00fe"+
            "\1\u00ff\31\uffff\1\u0102\6\uffff\1\u0103\1\uffff\1\u0101\3"+
            "\uffff\1\u0100\2\uffff\1\u00f9\2\uffff\1\u00f9\7\uffff\1\u00f8"+
            "\1\uffff\1\u0100\1\u00f9\4\uffff\1\u00f6",
            "\1\u0105\57\uffff\1\u010d\11\uffff\1\u0106\2\uffff\1\u0111"+
            "\5\uffff\1\u0110\4\uffff\1\u0107\1\uffff\1\u010b\4\uffff\1\u0108"+
            "\5\uffff\1\u0107\1\uffff\1\u010b\3\uffff\1\u0109\16\uffff\1"+
            "\u0112\13\uffff\1\u011a\6\uffff\1\u010a\6\uffff\1\u0113\1\u0114"+
            "\1\u0115\31\uffff\1\u0118\6\uffff\1\u0119\1\uffff\1\u0117\3"+
            "\uffff\1\u0116\2\uffff\1\u010f\2\uffff\1\u010f\7\uffff\1\u010e"+
            "\1\uffff\1\u0116\1\u010f\4\uffff\1\u010c",
            "\1\u011b\177\uffff\1\u011d\2\uffff\1\u011d\7\uffff\1\u011c"+
            "\2\uffff\1\u011d",
            "\1\u011e\177\uffff\1\u0120\2\uffff\1\u0120\7\uffff\1\u011f"+
            "\2\uffff\1\u0120",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0122\57\uffff\1\u012a\11\uffff\1\u0123\2\uffff\1\u0121"+
            "\4\uffff\1\u0136\1\u012d\4\uffff\1\u0124\1\uffff\1\u0128\4\uffff"+
            "\1\u0125\5\uffff\1\u0124\1\uffff\1\u0128\3\uffff\1\u0126\16"+
            "\uffff\1\u012e\22\uffff\1\u0127\6\uffff\1\u012f\1\u0130\1\u0131"+
            "\31\uffff\1\u0134\6\uffff\1\u0135\1\uffff\1\u0133\3\uffff\1"+
            "\u0132\2\uffff\1\u012c\2\uffff\1\u012c\7\uffff\1\u012b\1\uffff"+
            "\1\u0132\1\u012c\4\uffff\1\u0129",
            "\1\171\57\uffff\1\u013f\11\uffff\1\171\2\uffff\1\171\5\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\21\uffff\1\46\7\uffff\1\171\6\uffff\1\171\1\uffff"+
            "\1\171\3\uffff\1\171\2\uffff\1\u0141\2\uffff\1\u0141\7\uffff"+
            "\1\u0140\1\uffff\1\171\1\u0141\4\uffff\1\u013e",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u014d\57\uffff\1\u0155\11\uffff\1\u014e\2\uffff\1\u0159"+
            "\5\uffff\1\u0158\4\uffff\1\u014f\1\uffff\1\u0153\4\uffff\1\u0150"+
            "\5\uffff\1\u014f\1\uffff\1\u0153\3\uffff\1\u0151\16\uffff\1"+
            "\u015a\11\uffff\1\u0162\10\uffff\1\u0152\6\uffff\1\u015b\1\u015c"+
            "\1\u015d\31\uffff\1\u0160\6\uffff\1\u0161\1\uffff\1\u015f\3"+
            "\uffff\1\u015e\2\uffff\1\u0157\2\uffff\1\u0157\7\uffff\1\u0156"+
            "\1\uffff\1\u015e\1\u0157\4\uffff\1\u0154",
            "\1\u0163\57\uffff\1\u016b\11\uffff\1\u0164\2\uffff\1\u016f"+
            "\5\uffff\1\u016e\4\uffff\1\u0165\1\uffff\1\u0169\4\uffff\1\u0166"+
            "\5\uffff\1\u0165\1\uffff\1\u0169\3\uffff\1\u0167\16\uffff\1"+
            "\u0170\13\uffff\1\u0178\6\uffff\1\u0168\6\uffff\1\u0171\1\u0172"+
            "\1\u0173\31\uffff\1\u0176\6\uffff\1\u0177\1\uffff\1\u0175\3"+
            "\uffff\1\u0174\2\uffff\1\u016d\2\uffff\1\u016d\7\uffff\1\u016c"+
            "\1\uffff\1\u0174\1\u016d\4\uffff\1\u016a",
            "\1\u0179\177\uffff\1\u017b\2\uffff\1\u017b\7\uffff\1\u017a"+
            "\2\uffff\1\u017b",
            "\1\u017c\177\uffff\1\u017e\2\uffff\1\u017e\7\uffff\1\u017d"+
            "\2\uffff\1\u017e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0180\57\uffff\1\u0188\11\uffff\1\u0181\2\uffff\1\u017f"+
            "\4\uffff\1\u0194\1\u018b\4\uffff\1\u0182\1\uffff\1\u0186\4\uffff"+
            "\1\u0183\5\uffff\1\u0182\1\uffff\1\u0186\3\uffff\1\u0184\16"+
            "\uffff\1\u018c\22\uffff\1\u0185\6\uffff\1\u018d\1\u018e\1\u018f"+
            "\31\uffff\1\u0192\6\uffff\1\u0193\1\uffff\1\u0191\3\uffff\1"+
            "\u0190\2\uffff\1\u018a\2\uffff\1\u018a\7\uffff\1\u0189\1\uffff"+
            "\1\u0190\1\u018a\4\uffff\1\u0187",
            "\1\171\57\uffff\1\u019d\11\uffff\1\171\2\uffff\1\171\5\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\21\uffff\1\46\7\uffff\1\171\6\uffff\1\171\1\uffff"+
            "\1\171\3\uffff\1\171\2\uffff\1\u019f\2\uffff\1\u019f\7\uffff"+
            "\1\u019e\1\uffff\1\171\1\u019f\4\uffff\1\u019c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "285:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper | 'extern' );";
        }
    }
    static final String DFA53_eotS =
        "\u021a\uffff";
    static final String DFA53_eofS =
        "\u021a\uffff";
    static final String DFA53_minS =
        "\1\66\1\21\6\uffff\1\27\1\uffff\2\6\15\uffff\2\6\20\uffff\4\6\1"+
        "\66\1\6\21\uffff\2\6\7\66\1\uffff\2\6\1\66\6\6\3\103\u01c2\uffff";
    static final String DFA53_maxS =
        "\2\u00c9\6\uffff\1\u00c9\1\uffff\2\u00c9\15\uffff\2\u00c9\20\uffff"+
        "\1\u00c9\5\u00c4\21\uffff\1\u00c9\1\u00a3\7\u00c9\1\uffff\2\u00a3"+
        "\1\u00c4\1\u00c9\5\172\3\103\u01c2\uffff";
    static final String DFA53_acceptS =
        "\2\uffff\1\2\2\uffff\1\3\1\1\122\uffff\25\1\13\uffff\5\1\1\uffff"+
        "\1\1\7\uffff\3\1\7\uffff\1\1\14\uffff\4\1\21\uffff\4\1\21\uffff"+
        "\4\1\21\uffff\6\1\20\uffff\1\1\5\uffff\26\1\1\uffff\u008a\1\1\uffff"+
        "\23\1\1\uffff\53\1\1\uffff\16\1\1\uffff\16\1\1\uffff\16\1\1\uffff"+
        "\16\1\1\uffff\3\1";
    static final String DFA53_specialS =
        "\u021a\uffff}>";
    static final String[] DFA53_transitionS = {
            "\1\2\110\uffff\1\5\36\uffff\1\2\27\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\1\2\uffff\1\2\4\uffff\1\2",
            "\1\2\5\uffff\1\2\36\uffff\1\6\13\uffff\1\2\1\13\1\uffff\2\2"+
            "\2\uffff\1\12\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\14\uffff"+
            "\1\6\16\uffff\1\2\12\uffff\3\6\26\uffff\1\2\2\uffff\1\6\6\uffff"+
            "\1\6\1\uffff\1\6\3\uffff\1\6\2\uffff\1\6\2\uffff\1\6\7\uffff"+
            "\1\10\1\uffff\2\6\4\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\6\36\uffff\1\2\14\uffff\1\31\5\uffff\1\32\2\uffff\1\6\43"+
            "\uffff\1\2\11\uffff\1\6\17\uffff\3\2\26\uffff\1\6\2\uffff\1"+
            "\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1"+
            "\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "\1\2\57\uffff\1\54\11\uffff\1\2\2\uffff\1\53\5\uffff\1\57\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\13\uffff\1\2\6\uffff\1\2\6\uffff\1\60"+
            "\2\2\31\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\56\2\uffff\1\56\7\uffff\1\55\1\uffff\1\2\1\56\4\uffff\1\2",
            "\1\104\14\uffff\1\6\42\uffff\1\103\11\uffff\1\105\2\uffff\1"+
            "\117\5\uffff\1\116\4\uffff\1\106\1\uffff\1\112\4\uffff\1\107"+
            "\5\uffff\1\106\1\uffff\1\112\3\uffff\1\110\16\uffff\1\120\11"+
            "\uffff\1\2\10\uffff\1\111\6\uffff\1\121\1\122\1\123\21\uffff"+
            "\1\6\7\uffff\1\126\6\uffff\1\127\1\uffff\1\125\3\uffff\1\124"+
            "\2\uffff\1\115\2\uffff\1\115\7\uffff\1\114\1\uffff\1\124\1\115"+
            "\4\uffff\1\102",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\131\14\uffff\1\2\42\uffff\1\141\11\uffff\1\132\2\uffff\1"+
            "\145\5\uffff\1\144\4\uffff\1\133\1\uffff\1\137\4\uffff\1\134"+
            "\5\uffff\1\133\1\uffff\1\137\3\uffff\1\135\16\uffff\1\146\11"+
            "\uffff\1\6\10\uffff\1\136\6\uffff\1\147\1\150\1\151\21\uffff"+
            "\1\2\7\uffff\1\154\6\uffff\1\155\1\uffff\1\153\3\uffff\1\152"+
            "\2\uffff\1\143\2\uffff\1\143\7\uffff\1\142\1\uffff\1\152\1\143"+
            "\4\uffff\1\140",
            "\1\6\57\uffff\1\171\11\uffff\1\6\2\uffff\1\175\5\uffff\1\174"+
            "\4\uffff\1\6\1\uffff\1\6\4\uffff\1\6\5\uffff\1\6\1\uffff\1\6"+
            "\3\uffff\1\6\16\uffff\1\6\13\uffff\1\6\6\uffff\1\6\6\uffff\1"+
            "\177\2\6\31\uffff\1\6\6\uffff\1\6\1\uffff\1\6\3\uffff\1\6\2"+
            "\uffff\1\173\2\uffff\1\173\7\uffff\1\172\1\uffff\1\6\1\173\4"+
            "\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\14\uffff\1\u0087\42\uffff\1\u0089\11\uffff\1\2\2\uffff"+
            "\1\2\5\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff"+
            "\3\2\21\uffff\1\u0091\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4"+
            "\uffff\1\u0088",
            "\1\2\20\uffff\1\u00a0\36\uffff\1\6\11\uffff\3\2\1\u009e\4\2"+
            "\1\uffff\1\u009f\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff\1\2"+
            "\46\uffff\1\u00a1\22\uffff\1\6\2\uffff\1\6\12\uffff\1\6",
            "\1\2\20\uffff\1\u00b5\36\uffff\1\6\11\uffff\3\2\1\u00b3\4\2"+
            "\1\uffff\1\u00b4\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff\1\2"+
            "\46\uffff\1\u00b6\22\uffff\1\6\2\uffff\1\6\12\uffff\1\6",
            "\1\2\20\uffff\1\u00ca\36\uffff\1\6\11\uffff\3\2\1\u00c8\4\2"+
            "\1\uffff\1\u00c9\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff\1\2"+
            "\46\uffff\1\u00cb\22\uffff\1\6\2\uffff\1\6\12\uffff\1\6",
            "\1\u00de\14\uffff\1\u00dd\5\uffff\1\u00e1\100\uffff\1\u00e2"+
            "\53\uffff\1\u00e0\2\uffff\1\u00e0\7\uffff\1\u00df\2\uffff\1"+
            "\u00e0",
            "\1\2\57\uffff\1\6\11\uffff\3\2\1\uffff\4\2\2\uffff\13\2\1\uffff"+
            "\13\2\1\uffff\2\2\30\uffff\1\2\71\uffff\1\6\2\uffff\1\6\12\uffff"+
            "\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\6\57\uffff\1\u00f3\22\uffff\1\6\2\uffff\1\6\55\uffff\1\6"+
            "\43\uffff\1\6\27\uffff\1\u00fa\2\uffff\1\u00fa\7\uffff\1\u00f9"+
            "\2\uffff\1\u00fa\4\uffff\1\6",
            "\1\u00fd\12\uffff\1\2\5\uffff\1\u0100\50\uffff\1\u0108\1\u010b"+
            "\1\u010e\1\u00ff\1\u0103\2\u010e\1\u0107\1\uffff\1\u00fb\1\u0105"+
            "\1\u010e\1\u00fc\1\u0106\1\u0104\1\u010e\1\u0102\2\u0106\1\u010e"+
            "\1\u0107\1\uffff\1\u010a\1\u010e\1\u010c\1\u0103\1\u010e\1\u0104"+
            "\1\u010e\1\u0102\1\u010d\1\u0105\1\u010e\1\uffff\1\u0109\1\u010e"+
            "\26\uffff\1\u00fe\50\uffff\1\u0101",
            "\1\u0118\11\uffff\1\u0111\2\uffff\1\u0110\5\uffff\1\u011b\4"+
            "\uffff\1\u0112\1\uffff\1\u0116\4\uffff\1\u0113\5\uffff\1\u0112"+
            "\1\uffff\1\u0116\3\uffff\1\u0114\16\uffff\1\u011c\22\uffff\1"+
            "\u0115\6\uffff\1\u011d\1\u011e\1\u011f\31\uffff\1\u0122\6\uffff"+
            "\1\u0123\1\uffff\1\u0121\3\uffff\1\u0120\2\uffff\1\u011a\2\uffff"+
            "\1\u011a\7\uffff\1\u0119\1\uffff\1\u0120\1\u011a\4\uffff\1\u0117",
            "\1\u012a\14\uffff\1\u012e\5\uffff\1\u012d\4\uffff\1\u0124\1"+
            "\uffff\1\u0128\4\uffff\1\u0125\5\uffff\1\u0124\1\uffff\1\u0128"+
            "\3\uffff\1\u0126\16\uffff\1\u012f\22\uffff\1\u0127\6\uffff\1"+
            "\u0130\1\u0131\1\u0132\31\uffff\1\u0135\6\uffff\1\u0136\1\uffff"+
            "\1\u0134\3\uffff\1\u0133\2\uffff\1\u012c\2\uffff\1\u012c\7\uffff"+
            "\1\u012b\1\uffff\1\u0133\1\u012c\4\uffff\1\u0129",
            "\1\u013c\14\uffff\1\u0140\5\uffff\1\u013f\6\uffff\1\u013a\4"+
            "\uffff\1\u0137\7\uffff\1\u013a\3\uffff\1\u0138\16\uffff\1\u0141"+
            "\22\uffff\1\u0139\6\uffff\1\u0142\1\u0143\1\u0144\31\uffff\1"+
            "\u0147\6\uffff\1\u0148\1\uffff\1\u0146\3\uffff\1\u0145\2\uffff"+
            "\1\u013e\2\uffff\1\u013e\7\uffff\1\u013d\1\uffff\1\u0145\1\u013e"+
            "\4\uffff\1\u013b",
            "\1\u014d\14\uffff\1\u0151\5\uffff\1\u0150\6\uffff\1\u014b\14"+
            "\uffff\1\u014b\3\uffff\1\u0149\16\uffff\1\u0152\22\uffff\1\u014a"+
            "\6\uffff\1\u0153\1\u0154\1\u0155\31\uffff\1\u0158\6\uffff\1"+
            "\u0159\1\uffff\1\u0157\3\uffff\1\u0156\2\uffff\1\u014f\2\uffff"+
            "\1\u014f\7\uffff\1\u014e\1\uffff\1\u0156\1\u014f\4\uffff\1\u014c",
            "\1\u015d\14\uffff\1\u0161\5\uffff\1\u0160\6\uffff\1\u015b\14"+
            "\uffff\1\u015b\22\uffff\1\u0162\22\uffff\1\u015a\6\uffff\1\u0163"+
            "\1\u0164\1\u0165\31\uffff\1\u0168\6\uffff\1\u0169\1\uffff\1"+
            "\u0167\3\uffff\1\u0166\2\uffff\1\u015f\2\uffff\1\u015f\7\uffff"+
            "\1\u015e\1\uffff\1\u0166\1\u015f\4\uffff\1\u015c",
            "\1\u016c\14\uffff\1\u0170\5\uffff\1\u016f\6\uffff\1\u016a\14"+
            "\uffff\1\u016a\22\uffff\1\u0171\31\uffff\1\u0172\1\u0173\1\u0174"+
            "\31\uffff\1\u0177\6\uffff\1\u0178\1\uffff\1\u0176\3\uffff\1"+
            "\u0175\2\uffff\1\u016e\2\uffff\1\u016e\7\uffff\1\u016d\1\uffff"+
            "\1\u0175\1\u016e\4\uffff\1\u016b",
            "\1\u017a\14\uffff\1\u017e\5\uffff\1\u017d\46\uffff\1\u017f"+
            "\31\uffff\1\u0180\1\u0181\1\u0182\31\uffff\1\u0185\6\uffff\1"+
            "\u0186\1\uffff\1\u0184\3\uffff\1\u0183\2\uffff\1\u017c\2\uffff"+
            "\1\u017c\7\uffff\1\u017b\1\uffff\1\u0183\1\u017c\4\uffff\1\u0179",
            "",
            "\1\u018d\12\uffff\1\2\5\uffff\1\u0189\50\uffff\1\u0192\1\u0195"+
            "\1\u0198\1\u0187\1\u018d\2\u0198\1\u0191\1\uffff\1\u0188\1\u018f"+
            "\1\u0198\1\u018b\1\u0190\1\u018e\1\u0198\1\u018c\2\u0190\1\u0198"+
            "\1\u0191\1\uffff\1\u0194\1\u0198\1\u0196\1\u018d\1\u0198\1\u018e"+
            "\1\u0198\1\u018c\1\u0197\1\u018f\1\u0198\1\uffff\1\u0193\1\u0198"+
            "\26\uffff\1\u0199\50\uffff\1\u018a",
            "\1\u01a1\12\uffff\1\2\5\uffff\1\u019d\50\uffff\1\u01a6\1\u01a9"+
            "\1\u01ac\1\u019b\1\u01a1\2\u01ac\1\u01a5\1\uffff\1\u019c\1\u01a3"+
            "\1\u01ac\1\u019f\1\u01a4\1\u01a2\1\u01ac\1\u01a0\2\u01a4\1\u01ac"+
            "\1\u01a5\1\uffff\1\u01a8\1\u01ac\1\u01aa\1\u01a1\1\u01ac\1\u01a2"+
            "\1\u01ac\1\u01a0\1\u01ab\1\u01a3\1\u01ac\1\uffff\1\u01a7\1\u01ac"+
            "\26\uffff\1\u01ad\50\uffff\1\u019e",
            "\1\u01b0\14\uffff\1\u01af\5\uffff\1\u01b3\100\uffff\1\u01b4"+
            "\53\uffff\1\u01b2\2\uffff\1\u01b2\7\uffff\1\u01b1\2\uffff\1"+
            "\u01b2",
            "\1\u01b8\14\uffff\1\u01b5\42\uffff\1\u01b7\11\uffff\1\u01b9"+
            "\2\uffff\1\u01c3\5\uffff\1\u01c2\4\uffff\1\u01ba\1\uffff\1\u01be"+
            "\4\uffff\1\u01bb\5\uffff\1\u01ba\1\uffff\1\u01be\3\uffff\1\u01bc"+
            "\16\uffff\1\u01c4\22\uffff\1\u01bd\6\uffff\1\u01c5\1\u01c6\1"+
            "\u01c7\21\uffff\1\u01bf\7\uffff\1\u01ca\6\uffff\1\u01cb\1\uffff"+
            "\1\u01c9\3\uffff\1\u01c8\2\uffff\1\u01c1\2\uffff\1\u01c1\7\uffff"+
            "\1\u01c0\1\uffff\1\u01c8\1\u01c1\4\uffff\1\u01b6",
            "\1\u01cd\12\uffff\1\2\56\uffff\1\u01d2\1\u01d5\1\u01d8\1\uffff"+
            "\1\u01cd\2\u01d8\1\u01d1\2\uffff\1\u01cf\1\u01d8\2\u01d0\1\u01ce"+
            "\1\u01d8\1\u01cc\2\u01d0\1\u01d8\1\u01d1\1\uffff\1\u01d4\1\u01d8"+
            "\1\u01d6\1\u01cd\1\u01d8\1\u01ce\1\u01d8\1\u01cc\1\u01d7\1\u01cf"+
            "\1\u01d8\1\uffff\1\u01d3\1\u01d8\26\uffff\1\u01d9",
            "\1\u01dc\12\uffff\1\2\56\uffff\1\u01e1\1\u01e4\1\u01e7\1\uffff"+
            "\1\u01dc\2\u01e7\1\u01e0\2\uffff\1\u01de\1\u01e7\2\u01df\1\u01dd"+
            "\1\u01e7\1\u01db\2\u01df\1\u01e7\1\u01e0\1\uffff\1\u01e3\1\u01e7"+
            "\1\u01e5\1\u01dc\1\u01e7\1\u01dd\1\u01e7\1\u01db\1\u01e6\1\u01de"+
            "\1\u01e7\1\uffff\1\u01e2\1\u01e7\26\uffff\1\u01e8",
            "\1\u01eb\12\uffff\1\2\56\uffff\1\u01f0\1\u01f3\1\u01f6\1\uffff"+
            "\1\u01eb\2\u01f6\1\u01ef\2\uffff\1\u01ed\1\u01f6\2\u01ee\1\u01ec"+
            "\1\u01f6\1\u01ea\2\u01ee\1\u01f6\1\u01ef\1\uffff\1\u01f2\1\u01f6"+
            "\1\u01f4\1\u01eb\1\u01f6\1\u01ec\1\u01f6\1\u01ea\1\u01f5\1\u01ed"+
            "\1\u01f6\1\uffff\1\u01f1\1\u01f6\26\uffff\1\u01f7",
            "\1\u01fa\12\uffff\1\2\56\uffff\1\u01ff\1\u0202\1\u0205\1\uffff"+
            "\1\u01fa\2\u0205\1\u01fe\2\uffff\1\u01fc\1\u0205\2\u01fd\1\u01fb"+
            "\1\u0205\1\u01f9\2\u01fd\1\u0205\1\u01fe\1\uffff\1\u0201\1\u0205"+
            "\1\u0203\1\u01fa\1\u0205\1\u01fb\1\u0205\1\u01f9\1\u0204\1\u01fc"+
            "\1\u0205\1\uffff\1\u0200\1\u0205\26\uffff\1\u0206",
            "\1\u0209\12\uffff\1\2\56\uffff\1\u020e\1\u0211\1\u0214\1\uffff"+
            "\1\u0209\2\u0214\1\u020d\2\uffff\1\u020b\1\u0214\2\u020c\1\u020a"+
            "\1\u0214\1\u0208\2\u020c\1\u0214\1\u020d\1\uffff\1\u0210\1\u0214"+
            "\1\u0212\1\u0209\1\u0214\1\u020a\1\u0214\1\u0208\1\u0213\1\u020b"+
            "\1\u0214\1\uffff\1\u020f\1\u0214\26\uffff\1\u0215",
            "\1\u0217",
            "\1\u0218",
            "\1\u0219",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_eotS);
    static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_eofS);
    static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_minS);
    static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_maxS);
    static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_acceptS);
    static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_specialS);
    static final short[][] DFA53_transition;

    static {
        int numStates = DFA53_transitionS.length;
        DFA53_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA53_transition[i] = DFA.unpackEncodedString(DFA53_transitionS[i]);
        }
    }

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;
        }
        public String getDescription() {
            return "450:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )";
        }
    }
    static final String DFA60_eotS =
        "\u0892\uffff";
    static final String DFA60_eofS =
        "\u0892\uffff";
    static final String DFA60_minS =
        "\1\66\3\6\1\uffff\2\6\2\66\1\6\7\uffff\2\6\2\66\10\uffff\2\6\2\66"+
        "\10\uffff\10\66\3\6\1\66\6\6\3\103\1\6\1\uffff\1\6\10\66\3\6\1\66"+
        "\6\6\3\103\6\6\6\uffff\10\66\3\6\1\66\6\6\3\103\1\6\10\66\3\6\1"+
        "\66\6\6\3\103\7\6\10\66\3\6\1\66\6\6\3\103\1\6\10\66\3\6\1\66\6"+
        "\6\3\103\7\6\u07cc\uffff";
    static final String DFA60_maxS =
        "\4\u00c9\1\uffff\2\u00c9\2\u00c4\1\u00c9\7\uffff\2\u00c9\2\u00c4"+
        "\10\uffff\2\u00c9\2\u00c4\10\uffff\7\u00c9\1\u00c4\3\u00a3\1\u00c4"+
        "\1\u00c9\5\172\3\103\1\u00c9\1\uffff\10\u00c9\1\u00c4\3\u00a3\1"+
        "\u00c4\1\u00c9\5\174\3\103\6\u00c9\6\uffff\7\u00c9\1\u00c4\3\u00a3"+
        "\1\u00c4\1\u00c9\5\172\3\103\10\u00c9\1\u00c4\3\u00a3\1\u00c4\1"+
        "\u00c9\5\174\3\103\16\u00c9\1\u00c4\3\u00a3\1\u00c4\1\u00c9\5\172"+
        "\3\103\10\u00c9\1\u00c4\3\u00a3\1\u00c4\1\u00c9\5\174\3\103\7\u00c9"+
        "\u07cc\uffff";
    static final String DFA60_acceptS =
        "\4\uffff\1\2\5\uffff\1\1\u00bb\uffff\24\1\1\uffff\146\1\2\uffff"+
        "\u00aa\1\10\uffff\1\1\1\uffff\2\1\4\uffff\1\1\3\uffff\u011b\1\5"+
        "\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff"+
        "\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1"+
        "\3\uffff\u0124\1\10\uffff\u011b\1\5\uffff\1\1\3\uffff\2\1\5\uffff"+
        "\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1"+
        "\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff"+
        "\u0124\1\10\uffff\u011b\1\5\uffff\1\1\3\uffff\2\1\5\uffff\2\1\3"+
        "\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff"+
        "\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff";
    static final String DFA60_specialS =
        "\u0892\uffff}>";
    static final String[] DFA60_transitionS = {
            "\1\1\147\uffff\1\4\27\uffff\1\3\2\uffff\1\3\7\uffff\1\2\2\uffff"+
            "\1\3\4\uffff\1\4",
            "\1\11\12\uffff\1\4\5\uffff\1\7\36\uffff\1\12\13\uffff\1\4\1"+
            "\5\1\uffff\2\4\2\uffff\1\6\1\uffff\1\4\3\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1"+
            "\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\10\22\uffff\1\12\2\uffff"+
            "\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\23\36\uffff\1\12\13\uffff\1\4"+
            "\1\21\1\uffff\2\4\2\uffff\1\22\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\24\22\uffff\1\12\2"+
            "\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\37\36\uffff\1\12\13\uffff\1\4"+
            "\1\35\1\uffff\2\4\2\uffff\1\36\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\40\22\uffff\1\12\2"+
            "\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "",
            "\1\51\57\uffff\1\61\11\uffff\1\52\2\uffff\1\65\5\uffff\1\64"+
            "\4\uffff\1\53\1\uffff\1\57\4\uffff\1\54\5\uffff\1\53\1\uffff"+
            "\1\57\3\uffff\1\55\16\uffff\1\66\11\uffff\1\76\10\uffff\1\56"+
            "\6\uffff\1\67\1\70\1\71\21\uffff\1\4\7\uffff\1\74\6\uffff\1"+
            "\75\1\uffff\1\73\3\uffff\1\72\2\uffff\1\63\2\uffff\1\63\7\uffff"+
            "\1\62\1\uffff\1\72\1\63\4\uffff\1\60",
            "\1\101\57\uffff\1\111\11\uffff\1\102\2\uffff\1\115\5\uffff"+
            "\1\114\4\uffff\1\103\1\uffff\1\107\4\uffff\1\104\5\uffff\1\103"+
            "\1\uffff\1\107\3\uffff\1\105\16\uffff\1\116\13\uffff\1\100\6"+
            "\uffff\1\106\6\uffff\1\117\1\120\1\121\31\uffff\1\124\6\uffff"+
            "\1\125\1\uffff\1\123\3\uffff\1\122\2\uffff\1\113\2\uffff\1\113"+
            "\7\uffff\1\112\1\uffff\1\122\1\113\4\uffff\1\110",
            "\1\126\177\uffff\1\130\2\uffff\1\130\7\uffff\1\127\2\uffff"+
            "\1\130",
            "\1\131\177\uffff\1\133\2\uffff\1\133\7\uffff\1\132\2\uffff"+
            "\1\133",
            "\1\12\57\uffff\1\12\14\uffff\1\4\132\uffff\1\12\27\uffff\1"+
            "\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\142\57\uffff\1\152\11\uffff\1\143\2\uffff\1\156\5\uffff"+
            "\1\155\4\uffff\1\144\1\uffff\1\150\4\uffff\1\145\5\uffff\1\144"+
            "\1\uffff\1\150\3\uffff\1\146\16\uffff\1\157\11\uffff\1\167\10"+
            "\uffff\1\147\6\uffff\1\160\1\161\1\162\31\uffff\1\165\6\uffff"+
            "\1\166\1\uffff\1\164\3\uffff\1\163\2\uffff\1\154\2\uffff\1\154"+
            "\7\uffff\1\153\1\uffff\1\163\1\154\4\uffff\1\151",
            "\1\170\57\uffff\1\u0080\11\uffff\1\171\2\uffff\1\u0084\5\uffff"+
            "\1\u0083\4\uffff\1\172\1\uffff\1\176\4\uffff\1\173\5\uffff\1"+
            "\172\1\uffff\1\176\3\uffff\1\174\16\uffff\1\u0085\13\uffff\1"+
            "\u008d\6\uffff\1\175\6\uffff\1\u0086\1\u0087\1\u0088\31\uffff"+
            "\1\u008b\6\uffff\1\u008c\1\uffff\1\u008a\3\uffff\1\u0089\2\uffff"+
            "\1\u0082\2\uffff\1\u0082\7\uffff\1\u0081\1\uffff\1\u0089\1\u0082"+
            "\4\uffff\1\177",
            "\1\u008e\177\uffff\1\u0090\2\uffff\1\u0090\7\uffff\1\u008f"+
            "\2\uffff\1\u0090",
            "\1\u0091\177\uffff\1\u0093\2\uffff\1\u0093\7\uffff\1\u0092"+
            "\2\uffff\1\u0093",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0094\57\uffff\1\u009c\11\uffff\1\u0095\2\uffff\1\u00a0"+
            "\5\uffff\1\u009f\4\uffff\1\u0096\1\uffff\1\u009a\4\uffff\1\u0097"+
            "\5\uffff\1\u0096\1\uffff\1\u009a\3\uffff\1\u0098\16\uffff\1"+
            "\u00a1\11\uffff\1\u00a9\10\uffff\1\u0099\6\uffff\1\u00a2\1\u00a3"+
            "\1\u00a4\31\uffff\1\u00a7\6\uffff\1\u00a8\1\uffff\1\u00a6\3"+
            "\uffff\1\u00a5\2\uffff\1\u009e\2\uffff\1\u009e\7\uffff\1\u009d"+
            "\1\uffff\1\u00a5\1\u009e\4\uffff\1\u009b",
            "\1\u00aa\57\uffff\1\u00b2\11\uffff\1\u00ab\2\uffff\1\u00b6"+
            "\5\uffff\1\u00b5\4\uffff\1\u00ac\1\uffff\1\u00b0\4\uffff\1\u00ad"+
            "\5\uffff\1\u00ac\1\uffff\1\u00b0\3\uffff\1\u00ae\16\uffff\1"+
            "\u00b7\13\uffff\1\u00bf\6\uffff\1\u00af\6\uffff\1\u00b8\1\u00b9"+
            "\1\u00ba\31\uffff\1\u00bd\6\uffff\1\u00be\1\uffff\1\u00bc\3"+
            "\uffff\1\u00bb\2\uffff\1\u00b4\2\uffff\1\u00b4\7\uffff\1\u00b3"+
            "\1\uffff\1\u00bb\1\u00b4\4\uffff\1\u00b1",
            "\1\u00c0\177\uffff\1\u00c2\2\uffff\1\u00c2\7\uffff\1\u00c1"+
            "\2\uffff\1\u00c2",
            "\1\u00c3\177\uffff\1\u00c5\2\uffff\1\u00c5\7\uffff\1\u00c4"+
            "\2\uffff\1\u00c5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ce\11\uffff\1\u00c7\2\uffff\1\u00c6\5\uffff\1\u00d1\4"+
            "\uffff\1\u00c8\1\uffff\1\u00cc\4\uffff\1\u00c9\5\uffff\1\u00c8"+
            "\1\uffff\1\u00cc\3\uffff\1\u00ca\16\uffff\1\u00d2\22\uffff\1"+
            "\u00cb\6\uffff\1\u00d3\1\u00d4\1\u00d5\21\uffff\1\4\7\uffff"+
            "\1\u00d8\6\uffff\1\u00d9\1\uffff\1\u00d7\3\uffff\1\u00d6\2\uffff"+
            "\1\u00d0\2\uffff\1\u00d0\7\uffff\1\u00cf\1\uffff\1\u00d6\1\u00d0"+
            "\4\uffff\1\u00cd",
            "\1\u00e1\14\uffff\1\u00e5\5\uffff\1\u00e4\4\uffff\1\u00db\1"+
            "\uffff\1\u00df\4\uffff\1\u00dc\5\uffff\1\u00db\1\uffff\1\u00df"+
            "\3\uffff\1\u00dd\16\uffff\1\u00e6\22\uffff\1\u00de\6\uffff\1"+
            "\u00e7\1\u00e8\1\u00e9\31\uffff\1\u00ec\6\uffff\1\u00ed\1\uffff"+
            "\1\u00eb\3\uffff\1\u00ea\2\uffff\1\u00e3\2\uffff\1\u00e3\7\uffff"+
            "\1\u00e2\1\uffff\1\u00ea\1\u00e3\4\uffff\1\u00e0",
            "\1\u00f3\14\uffff\1\u00f7\5\uffff\1\u00f6\6\uffff\1\u00f1\4"+
            "\uffff\1\u00ee\7\uffff\1\u00f1\3\uffff\1\u00ef\16\uffff\1\u00f8"+
            "\22\uffff\1\u00f0\6\uffff\1\u00f9\1\u00fa\1\u00fb\31\uffff\1"+
            "\u00fe\6\uffff\1\u00ff\1\uffff\1\u00fd\3\uffff\1\u00fc\2\uffff"+
            "\1\u00f5\2\uffff\1\u00f5\7\uffff\1\u00f4\1\uffff\1\u00fc\1\u00f5"+
            "\4\uffff\1\u00f2",
            "\1\u0104\14\uffff\1\u0108\5\uffff\1\u0107\6\uffff\1\u0102\14"+
            "\uffff\1\u0102\3\uffff\1\u0100\16\uffff\1\u0109\22\uffff\1\u0101"+
            "\6\uffff\1\u010a\1\u010b\1\u010c\31\uffff\1\u010f\6\uffff\1"+
            "\u0110\1\uffff\1\u010e\3\uffff\1\u010d\2\uffff\1\u0106\2\uffff"+
            "\1\u0106\7\uffff\1\u0105\1\uffff\1\u010d\1\u0106\4\uffff\1\u0103",
            "\1\u0114\14\uffff\1\u0118\5\uffff\1\u0117\6\uffff\1\u0112\14"+
            "\uffff\1\u0112\22\uffff\1\u0119\22\uffff\1\u0111\6\uffff\1\u011a"+
            "\1\u011b\1\u011c\31\uffff\1\u011f\6\uffff\1\u0120\1\uffff\1"+
            "\u011e\3\uffff\1\u011d\2\uffff\1\u0116\2\uffff\1\u0116\7\uffff"+
            "\1\u0115\1\uffff\1\u011d\1\u0116\4\uffff\1\u0113",
            "\1\u0123\14\uffff\1\u0127\5\uffff\1\u0126\6\uffff\1\u0121\14"+
            "\uffff\1\u0121\22\uffff\1\u0128\31\uffff\1\u0129\1\u012a\1\u012b"+
            "\31\uffff\1\u012e\6\uffff\1\u012f\1\uffff\1\u012d\3\uffff\1"+
            "\u012c\2\uffff\1\u0125\2\uffff\1\u0125\7\uffff\1\u0124\1\uffff"+
            "\1\u012c\1\u0125\4\uffff\1\u0122",
            "\1\u0131\14\uffff\1\u0135\5\uffff\1\u0134\46\uffff\1\u0136"+
            "\31\uffff\1\u0137\1\u0138\1\u0139\31\uffff\1\u013c\6\uffff\1"+
            "\u013d\1\uffff\1\u013b\3\uffff\1\u013a\2\uffff\1\u0133\2\uffff"+
            "\1\u0133\7\uffff\1\u0132\1\uffff\1\u013a\1\u0133\4\uffff\1\u0130",
            "\1\u013e\22\uffff\1\4\60\uffff\1\4\73\uffff\1\u0140\2\uffff"+
            "\1\u0140\7\uffff\1\u013f\2\uffff\1\u0140",
            "\1\u0149\12\uffff\1\u0155\5\uffff\1\u0145\50\uffff\1\u014e"+
            "\1\u0151\1\u0154\1\u0143\1\u0149\2\u0154\1\u014d\1\uffff\1\u0144"+
            "\1\u014b\1\u0154\1\u0147\1\u014c\1\u014a\1\u0154\1\u0148\2\u014c"+
            "\1\u0154\1\u014d\1\uffff\1\u0150\1\u0154\1\u0152\1\u0149\1\u0154"+
            "\1\u014a\1\u0154\1\u0148\1\u0153\1\u014b\1\u0154\1\uffff\1\u014f"+
            "\1\u0154\26\uffff\1\u0156\50\uffff\1\u0146",
            "\1\u015d\12\uffff\1\u0169\5\uffff\1\u0159\50\uffff\1\u0162"+
            "\1\u0165\1\u0168\1\u0157\1\u015d\2\u0168\1\u0161\1\uffff\1\u0158"+
            "\1\u015f\1\u0168\1\u015b\1\u0160\1\u015e\1\u0168\1\u015c\2\u0160"+
            "\1\u0168\1\u0161\1\uffff\1\u0164\1\u0168\1\u0166\1\u015d\1\u0168"+
            "\1\u015e\1\u0168\1\u015c\1\u0167\1\u015f\1\u0168\1\uffff\1\u0163"+
            "\1\u0168\26\uffff\1\u016a\50\uffff\1\u015a",
            "\1\u0171\12\uffff\1\u017d\5\uffff\1\u016d\50\uffff\1\u0176"+
            "\1\u0179\1\u017c\1\u016b\1\u0171\2\u017c\1\u0175\1\uffff\1\u016c"+
            "\1\u0173\1\u017c\1\u016f\1\u0174\1\u0172\1\u017c\1\u0170\2\u0174"+
            "\1\u017c\1\u0175\1\uffff\1\u0178\1\u017c\1\u017a\1\u0171\1\u017c"+
            "\1\u0172\1\u017c\1\u0170\1\u017b\1\u0173\1\u017c\1\uffff\1\u0177"+
            "\1\u017c\26\uffff\1\u017e\50\uffff\1\u016e",
            "\1\u0180\14\uffff\1\u017f\5\uffff\1\u0183\100\uffff\1\u0184"+
            "\53\uffff\1\u0182\2\uffff\1\u0182\7\uffff\1\u0181\2\uffff\1"+
            "\u0182",
            "\1\u0188\14\uffff\1\u0185\42\uffff\1\u0187\11\uffff\1\u0189"+
            "\2\uffff\1\u0193\5\uffff\1\u0192\4\uffff\1\u018a\1\uffff\1\u018e"+
            "\4\uffff\1\u018b\5\uffff\1\u018a\1\uffff\1\u018e\3\uffff\1\u018c"+
            "\16\uffff\1\u0194\22\uffff\1\u018d\6\uffff\1\u0195\1\u0196\1"+
            "\u0197\21\uffff\1\u018f\7\uffff\1\u019a\6\uffff\1\u019b\1\uffff"+
            "\1\u0199\3\uffff\1\u0198\2\uffff\1\u0191\2\uffff\1\u0191\7\uffff"+
            "\1\u0190\1\uffff\1\u0198\1\u0191\4\uffff\1\u0186",
            "\1\u019d\12\uffff\1\u01a9\56\uffff\1\u01a2\1\u01a5\1\u01a8"+
            "\1\uffff\1\u019d\2\u01a8\1\u01a1\2\uffff\1\u019f\1\u01a8\2\u01a0"+
            "\1\u019e\1\u01a8\1\u019c\2\u01a0\1\u01a8\1\u01a1\1\uffff\1\u01a4"+
            "\1\u01a8\1\u01a6\1\u019d\1\u01a8\1\u019e\1\u01a8\1\u019c\1\u01a7"+
            "\1\u019f\1\u01a8\1\uffff\1\u01a3\1\u01a8\26\uffff\1\u01aa",
            "\1\u01ac\12\uffff\1\u01b8\56\uffff\1\u01b1\1\u01b4\1\u01b7"+
            "\1\uffff\1\u01ac\2\u01b7\1\u01b0\2\uffff\1\u01ae\1\u01b7\2\u01af"+
            "\1\u01ad\1\u01b7\1\u01ab\2\u01af\1\u01b7\1\u01b0\1\uffff\1\u01b3"+
            "\1\u01b7\1\u01b5\1\u01ac\1\u01b7\1\u01ad\1\u01b7\1\u01ab\1\u01b6"+
            "\1\u01ae\1\u01b7\1\uffff\1\u01b2\1\u01b7\26\uffff\1\u01b9",
            "\1\u01bb\12\uffff\1\u01c7\56\uffff\1\u01c0\1\u01c3\1\u01c6"+
            "\1\uffff\1\u01bb\2\u01c6\1\u01bf\2\uffff\1\u01bd\1\u01c6\2\u01be"+
            "\1\u01bc\1\u01c6\1\u01ba\2\u01be\1\u01c6\1\u01bf\1\uffff\1\u01c2"+
            "\1\u01c6\1\u01c4\1\u01bb\1\u01c6\1\u01bc\1\u01c6\1\u01ba\1\u01c5"+
            "\1\u01bd\1\u01c6\1\uffff\1\u01c1\1\u01c6\26\uffff\1\u01c8",
            "\1\u01ca\12\uffff\1\u01d6\56\uffff\1\u01cf\1\u01d2\1\u01d5"+
            "\1\uffff\1\u01ca\2\u01d5\1\u01ce\2\uffff\1\u01cc\1\u01d5\2\u01cd"+
            "\1\u01cb\1\u01d5\1\u01c9\2\u01cd\1\u01d5\1\u01ce\1\uffff\1\u01d1"+
            "\1\u01d5\1\u01d3\1\u01ca\1\u01d5\1\u01cb\1\u01d5\1\u01c9\1\u01d4"+
            "\1\u01cc\1\u01d5\1\uffff\1\u01d0\1\u01d5\26\uffff\1\u01d7",
            "\1\u01d9\12\uffff\1\u01e5\56\uffff\1\u01de\1\u01e1\1\u01e4"+
            "\1\uffff\1\u01d9\2\u01e4\1\u01dd\2\uffff\1\u01db\1\u01e4\2\u01dc"+
            "\1\u01da\1\u01e4\1\u01d8\2\u01dc\1\u01e4\1\u01dd\1\uffff\1\u01e0"+
            "\1\u01e4\1\u01e2\1\u01d9\1\u01e4\1\u01da\1\u01e4\1\u01d8\1\u01e3"+
            "\1\u01db\1\u01e4\1\uffff\1\u01df\1\u01e4\26\uffff\1\u01e6",
            "\1\u01e7",
            "\1\u01e8",
            "\1\u01e9",
            "\1\12\12\uffff\1\4\5\uffff\1\u01eb\36\uffff\1\12\13\uffff\1"+
            "\4\2\uffff\2\4\2\uffff\1\u01ea\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u01ec\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "",
            "\1\u01f5\12\uffff\1\4\5\uffff\1\u01f7\36\uffff\1\12\13\uffff"+
            "\2\4\1\uffff\2\4\2\uffff\1\u01fd\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u01f8\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\u0209\11\uffff\1\u0202\2\uffff\1\u0201\5\uffff\1\u020c\4"+
            "\uffff\1\u0203\1\uffff\1\u0207\4\uffff\1\u0204\5\uffff\1\u0203"+
            "\1\uffff\1\u0207\3\uffff\1\u0205\16\uffff\1\u020d\22\uffff\1"+
            "\u0206\6\uffff\1\u020e\1\u020f\1\u0210\31\uffff\1\u0213\6\uffff"+
            "\1\u0214\1\uffff\1\u0212\3\uffff\1\u0211\2\uffff\1\u020b\2\uffff"+
            "\1\u020b\7\uffff\1\u020a\1\uffff\1\u0211\1\u020b\4\uffff\1\u0208",
            "\1\u021b\14\uffff\1\u021f\5\uffff\1\u021e\4\uffff\1\u0215\1"+
            "\uffff\1\u0219\4\uffff\1\u0216\5\uffff\1\u0215\1\uffff\1\u0219"+
            "\3\uffff\1\u0217\16\uffff\1\u0220\22\uffff\1\u0218\6\uffff\1"+
            "\u0221\1\u0222\1\u0223\31\uffff\1\u0226\6\uffff\1\u0227\1\uffff"+
            "\1\u0225\3\uffff\1\u0224\2\uffff\1\u021d\2\uffff\1\u021d\7\uffff"+
            "\1\u021c\1\uffff\1\u0224\1\u021d\4\uffff\1\u021a",
            "\1\u022d\14\uffff\1\u0231\5\uffff\1\u0230\6\uffff\1\u022b\4"+
            "\uffff\1\u0228\7\uffff\1\u022b\3\uffff\1\u0229\16\uffff\1\u0232"+
            "\22\uffff\1\u022a\6\uffff\1\u0233\1\u0234\1\u0235\31\uffff\1"+
            "\u0238\6\uffff\1\u0239\1\uffff\1\u0237\3\uffff\1\u0236\2\uffff"+
            "\1\u022f\2\uffff\1\u022f\7\uffff\1\u022e\1\uffff\1\u0236\1\u022f"+
            "\4\uffff\1\u022c",
            "\1\u023e\14\uffff\1\u0242\5\uffff\1\u0241\6\uffff\1\u023c\14"+
            "\uffff\1\u023c\3\uffff\1\u023a\16\uffff\1\u0243\22\uffff\1\u023b"+
            "\6\uffff\1\u0244\1\u0245\1\u0246\31\uffff\1\u0249\6\uffff\1"+
            "\u024a\1\uffff\1\u0248\3\uffff\1\u0247\2\uffff\1\u0240\2\uffff"+
            "\1\u0240\7\uffff\1\u023f\1\uffff\1\u0247\1\u0240\4\uffff\1\u023d",
            "\1\u024e\14\uffff\1\u0252\5\uffff\1\u0251\6\uffff\1\u024c\14"+
            "\uffff\1\u024c\22\uffff\1\u0253\22\uffff\1\u024b\6\uffff\1\u0254"+
            "\1\u0255\1\u0256\31\uffff\1\u0259\6\uffff\1\u025a\1\uffff\1"+
            "\u0258\3\uffff\1\u0257\2\uffff\1\u0250\2\uffff\1\u0250\7\uffff"+
            "\1\u024f\1\uffff\1\u0257\1\u0250\4\uffff\1\u024d",
            "\1\u025d\14\uffff\1\u0261\5\uffff\1\u0260\6\uffff\1\u025b\14"+
            "\uffff\1\u025b\22\uffff\1\u0262\31\uffff\1\u0263\1\u0264\1\u0265"+
            "\31\uffff\1\u0268\6\uffff\1\u0269\1\uffff\1\u0267\3\uffff\1"+
            "\u0266\2\uffff\1\u025f\2\uffff\1\u025f\7\uffff\1\u025e\1\uffff"+
            "\1\u0266\1\u025f\4\uffff\1\u025c",
            "\1\u026b\14\uffff\1\u026f\5\uffff\1\u026e\46\uffff\1\u0270"+
            "\31\uffff\1\u0271\1\u0272\1\u0273\31\uffff\1\u0276\6\uffff\1"+
            "\u0277\1\uffff\1\u0275\3\uffff\1\u0274\2\uffff\1\u026d\2\uffff"+
            "\1\u026d\7\uffff\1\u026c\1\uffff\1\u0274\1\u026d\4\uffff\1\u026a",
            "\1\u0278\177\uffff\1\u027a\2\uffff\1\u027a\7\uffff\1\u0279"+
            "\2\uffff\1\u027a",
            "\1\u0281\20\uffff\1\u027d\50\uffff\1\u0286\1\u0289\1\u028c"+
            "\1\u027b\1\u0281\2\u028c\1\u0285\1\uffff\1\u027c\1\u0283\1\u028c"+
            "\1\u027f\1\u0284\1\u0282\1\u028c\1\u0280\2\u0284\1\u028c\1\u0285"+
            "\1\uffff\1\u0288\1\u028c\1\u028a\1\u0281\1\u028c\1\u0282\1\u028c"+
            "\1\u0280\1\u028b\1\u0283\1\u028c\1\uffff\1\u0287\1\u028c\30"+
            "\uffff\1\u028d\46\uffff\1\u027e",
            "\1\u0294\20\uffff\1\u0290\50\uffff\1\u0299\1\u029c\1\u029f"+
            "\1\u028e\1\u0294\2\u029f\1\u0298\1\uffff\1\u028f\1\u0296\1\u029f"+
            "\1\u0292\1\u0297\1\u0295\1\u029f\1\u0293\2\u0297\1\u029f\1\u0298"+
            "\1\uffff\1\u029b\1\u029f\1\u029d\1\u0294\1\u029f\1\u0295\1\u029f"+
            "\1\u0293\1\u029e\1\u0296\1\u029f\1\uffff\1\u029a\1\u029f\30"+
            "\uffff\1\u02a0\46\uffff\1\u0291",
            "\1\u02a7\20\uffff\1\u02a3\50\uffff\1\u02ac\1\u02af\1\u02b2"+
            "\1\u02a1\1\u02a7\2\u02b2\1\u02ab\1\uffff\1\u02a2\1\u02a9\1\u02b2"+
            "\1\u02a5\1\u02aa\1\u02a8\1\u02b2\1\u02a6\2\u02aa\1\u02b2\1\u02ab"+
            "\1\uffff\1\u02ae\1\u02b2\1\u02b0\1\u02a7\1\u02b2\1\u02a8\1\u02b2"+
            "\1\u02a6\1\u02b1\1\u02a9\1\u02b2\1\uffff\1\u02ad\1\u02b2\30"+
            "\uffff\1\u02b3\46\uffff\1\u02a4",
            "\1\u02b5\14\uffff\1\u02b4\5\uffff\1\u02b8\100\uffff\1\u02b9"+
            "\53\uffff\1\u02b7\2\uffff\1\u02b7\7\uffff\1\u02b6\2\uffff\1"+
            "\u02b7",
            "\1\u02bd\14\uffff\1\u02ba\42\uffff\1\u02bc\11\uffff\1\u02be"+
            "\2\uffff\1\u02c8\5\uffff\1\u02c7\4\uffff\1\u02bf\1\uffff\1\u02c3"+
            "\4\uffff\1\u02c0\5\uffff\1\u02bf\1\uffff\1\u02c3\3\uffff\1\u02c1"+
            "\16\uffff\1\u02c9\22\uffff\1\u02c2\6\uffff\1\u02ca\1\u02cb\1"+
            "\u02cc\21\uffff\1\u02c4\7\uffff\1\u02cf\6\uffff\1\u02d0\1\uffff"+
            "\1\u02ce\3\uffff\1\u02cd\2\uffff\1\u02c6\2\uffff\1\u02c6\7\uffff"+
            "\1\u02c5\1\uffff\1\u02cd\1\u02c6\4\uffff\1\u02bb",
            "\1\u02d2\71\uffff\1\u02d7\1\u02da\1\u02dd\1\uffff\1\u02d2\2"+
            "\u02dd\1\u02d6\2\uffff\1\u02d4\1\u02dd\2\u02d5\1\u02d3\1\u02dd"+
            "\1\u02d1\2\u02d5\1\u02dd\1\u02d6\1\uffff\1\u02d9\1\u02dd\1\u02db"+
            "\1\u02d2\1\u02dd\1\u02d3\1\u02dd\1\u02d1\1\u02dc\1\u02d4\1\u02dd"+
            "\1\uffff\1\u02d8\1\u02dd\30\uffff\1\u02de",
            "\1\u02e0\71\uffff\1\u02e5\1\u02e8\1\u02eb\1\uffff\1\u02e0\2"+
            "\u02eb\1\u02e4\2\uffff\1\u02e2\1\u02eb\2\u02e3\1\u02e1\1\u02eb"+
            "\1\u02df\2\u02e3\1\u02eb\1\u02e4\1\uffff\1\u02e7\1\u02eb\1\u02e9"+
            "\1\u02e0\1\u02eb\1\u02e1\1\u02eb\1\u02df\1\u02ea\1\u02e2\1\u02eb"+
            "\1\uffff\1\u02e6\1\u02eb\30\uffff\1\u02ec",
            "\1\u02ee\71\uffff\1\u02f3\1\u02f6\1\u02f9\1\uffff\1\u02ee\2"+
            "\u02f9\1\u02f2\2\uffff\1\u02f0\1\u02f9\2\u02f1\1\u02ef\1\u02f9"+
            "\1\u02ed\2\u02f1\1\u02f9\1\u02f2\1\uffff\1\u02f5\1\u02f9\1\u02f7"+
            "\1\u02ee\1\u02f9\1\u02ef\1\u02f9\1\u02ed\1\u02f8\1\u02f0\1\u02f9"+
            "\1\uffff\1\u02f4\1\u02f9\30\uffff\1\u02fa",
            "\1\u02fc\71\uffff\1\u0301\1\u0304\1\u0307\1\uffff\1\u02fc\2"+
            "\u0307\1\u0300\2\uffff\1\u02fe\1\u0307\2\u02ff\1\u02fd\1\u0307"+
            "\1\u02fb\2\u02ff\1\u0307\1\u0300\1\uffff\1\u0303\1\u0307\1\u0305"+
            "\1\u02fc\1\u0307\1\u02fd\1\u0307\1\u02fb\1\u0306\1\u02fe\1\u0307"+
            "\1\uffff\1\u0302\1\u0307\30\uffff\1\u0308",
            "\1\u030a\71\uffff\1\u030f\1\u0312\1\u0315\1\uffff\1\u030a\2"+
            "\u0315\1\u030e\2\uffff\1\u030c\1\u0315\2\u030d\1\u030b\1\u0315"+
            "\1\u0309\2\u030d\1\u0315\1\u030e\1\uffff\1\u0311\1\u0315\1\u0313"+
            "\1\u030a\1\u0315\1\u030b\1\u0315\1\u0309\1\u0314\1\u030c\1\u0315"+
            "\1\uffff\1\u0310\1\u0315\30\uffff\1\u0316",
            "\1\u0317",
            "\1\u0318",
            "\1\u0319",
            "\1\12\12\uffff\1\4\5\uffff\1\u0321\36\uffff\1\12\13\uffff\1"+
            "\4\1\u031a\1\uffff\2\4\2\uffff\1\u031b\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0322\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u032d\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0326\1\uffff\2\4\2\uffff\1\u0327\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u032e\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0339\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0332\1\uffff\2\4\2\uffff\1\u0333\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u033a\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0345\36\uffff\1\12\13\uffff\1"+
            "\4\1\u033e\1\uffff\2\4\2\uffff\1\u033f\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0346\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0351\36\uffff\1\12\13\uffff\1"+
            "\4\1\u034a\1\uffff\2\4\2\uffff\1\u034b\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0352\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u035d\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0356\1\uffff\2\4\2\uffff\1\u0357\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u035e\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u036a\11\uffff\1\u0363\2\uffff\1\u0362\5\uffff\1\u036d\4"+
            "\uffff\1\u0364\1\uffff\1\u0368\4\uffff\1\u0365\5\uffff\1\u0364"+
            "\1\uffff\1\u0368\3\uffff\1\u0366\16\uffff\1\u036e\22\uffff\1"+
            "\u0367\6\uffff\1\u036f\1\u0370\1\u0371\31\uffff\1\u0374\6\uffff"+
            "\1\u0375\1\uffff\1\u0373\3\uffff\1\u0372\2\uffff\1\u036c\2\uffff"+
            "\1\u036c\7\uffff\1\u036b\1\uffff\1\u0372\1\u036c\4\uffff\1\u0369",
            "\1\u037c\14\uffff\1\u0380\5\uffff\1\u037f\4\uffff\1\u0376\1"+
            "\uffff\1\u037a\4\uffff\1\u0377\5\uffff\1\u0376\1\uffff\1\u037a"+
            "\3\uffff\1\u0378\16\uffff\1\u0381\22\uffff\1\u0379\6\uffff\1"+
            "\u0382\1\u0383\1\u0384\31\uffff\1\u0387\6\uffff\1\u0388\1\uffff"+
            "\1\u0386\3\uffff\1\u0385\2\uffff\1\u037e\2\uffff\1\u037e\7\uffff"+
            "\1\u037d\1\uffff\1\u0385\1\u037e\4\uffff\1\u037b",
            "\1\u038e\14\uffff\1\u0392\5\uffff\1\u0391\6\uffff\1\u038c\4"+
            "\uffff\1\u0389\7\uffff\1\u038c\3\uffff\1\u038a\16\uffff\1\u0393"+
            "\22\uffff\1\u038b\6\uffff\1\u0394\1\u0395\1\u0396\31\uffff\1"+
            "\u0399\6\uffff\1\u039a\1\uffff\1\u0398\3\uffff\1\u0397\2\uffff"+
            "\1\u0390\2\uffff\1\u0390\7\uffff\1\u038f\1\uffff\1\u0397\1\u0390"+
            "\4\uffff\1\u038d",
            "\1\u039f\14\uffff\1\u03a3\5\uffff\1\u03a2\6\uffff\1\u039d\14"+
            "\uffff\1\u039d\3\uffff\1\u039b\16\uffff\1\u03a4\22\uffff\1\u039c"+
            "\6\uffff\1\u03a5\1\u03a6\1\u03a7\31\uffff\1\u03aa\6\uffff\1"+
            "\u03ab\1\uffff\1\u03a9\3\uffff\1\u03a8\2\uffff\1\u03a1\2\uffff"+
            "\1\u03a1\7\uffff\1\u03a0\1\uffff\1\u03a8\1\u03a1\4\uffff\1\u039e",
            "\1\u03af\14\uffff\1\u03b3\5\uffff\1\u03b2\6\uffff\1\u03ad\14"+
            "\uffff\1\u03ad\22\uffff\1\u03b4\22\uffff\1\u03ac\6\uffff\1\u03b5"+
            "\1\u03b6\1\u03b7\31\uffff\1\u03ba\6\uffff\1\u03bb\1\uffff\1"+
            "\u03b9\3\uffff\1\u03b8\2\uffff\1\u03b1\2\uffff\1\u03b1\7\uffff"+
            "\1\u03b0\1\uffff\1\u03b8\1\u03b1\4\uffff\1\u03ae",
            "\1\u03be\14\uffff\1\u03c2\5\uffff\1\u03c1\6\uffff\1\u03bc\14"+
            "\uffff\1\u03bc\22\uffff\1\u03c3\31\uffff\1\u03c4\1\u03c5\1\u03c6"+
            "\31\uffff\1\u03c9\6\uffff\1\u03ca\1\uffff\1\u03c8\3\uffff\1"+
            "\u03c7\2\uffff\1\u03c0\2\uffff\1\u03c0\7\uffff\1\u03bf\1\uffff"+
            "\1\u03c7\1\u03c0\4\uffff\1\u03bd",
            "\1\u03cc\14\uffff\1\u03d0\5\uffff\1\u03cf\46\uffff\1\u03d1"+
            "\31\uffff\1\u03d2\1\u03d3\1\u03d4\31\uffff\1\u03d7\6\uffff\1"+
            "\u03d8\1\uffff\1\u03d6\3\uffff\1\u03d5\2\uffff\1\u03ce\2\uffff"+
            "\1\u03ce\7\uffff\1\u03cd\1\uffff\1\u03d5\1\u03ce\4\uffff\1\u03cb",
            "\1\u03d9\177\uffff\1\u03db\2\uffff\1\u03db\7\uffff\1\u03da"+
            "\2\uffff\1\u03db",
            "\1\u03e2\12\uffff\1\u03ee\5\uffff\1\u03de\50\uffff\1\u03e7"+
            "\1\u03ea\1\u03ed\1\u03dc\1\u03e2\2\u03ed\1\u03e6\1\uffff\1\u03dd"+
            "\1\u03e4\1\u03ed\1\u03e0\1\u03e5\1\u03e3\1\u03ed\1\u03e1\2\u03e5"+
            "\1\u03ed\1\u03e6\1\uffff\1\u03e9\1\u03ed\1\u03eb\1\u03e2\1\u03ed"+
            "\1\u03e3\1\u03ed\1\u03e1\1\u03ec\1\u03e4\1\u03ed\1\uffff\1\u03e8"+
            "\1\u03ed\26\uffff\1\u03ef\50\uffff\1\u03df",
            "\1\u03f6\12\uffff\1\u0402\5\uffff\1\u03f2\50\uffff\1\u03fb"+
            "\1\u03fe\1\u0401\1\u03f0\1\u03f6\2\u0401\1\u03fa\1\uffff\1\u03f1"+
            "\1\u03f8\1\u0401\1\u03f4\1\u03f9\1\u03f7\1\u0401\1\u03f5\2\u03f9"+
            "\1\u0401\1\u03fa\1\uffff\1\u03fd\1\u0401\1\u03ff\1\u03f6\1\u0401"+
            "\1\u03f7\1\u0401\1\u03f5\1\u0400\1\u03f8\1\u0401\1\uffff\1\u03fc"+
            "\1\u0401\26\uffff\1\u0403\50\uffff\1\u03f3",
            "\1\u040a\12\uffff\1\u0416\5\uffff\1\u0406\50\uffff\1\u040f"+
            "\1\u0412\1\u0415\1\u0404\1\u040a\2\u0415\1\u040e\1\uffff\1\u0405"+
            "\1\u040c\1\u0415\1\u0408\1\u040d\1\u040b\1\u0415\1\u0409\2\u040d"+
            "\1\u0415\1\u040e\1\uffff\1\u0411\1\u0415\1\u0413\1\u040a\1\u0415"+
            "\1\u040b\1\u0415\1\u0409\1\u0414\1\u040c\1\u0415\1\uffff\1\u0410"+
            "\1\u0415\26\uffff\1\u0417\50\uffff\1\u0407",
            "\1\u0419\14\uffff\1\u0418\5\uffff\1\u041c\100\uffff\1\u041d"+
            "\53\uffff\1\u041b\2\uffff\1\u041b\7\uffff\1\u041a\2\uffff\1"+
            "\u041b",
            "\1\u0421\14\uffff\1\u041e\42\uffff\1\u0420\11\uffff\1\u0422"+
            "\2\uffff\1\u042c\5\uffff\1\u042b\4\uffff\1\u0423\1\uffff\1\u0427"+
            "\4\uffff\1\u0424\5\uffff\1\u0423\1\uffff\1\u0427\3\uffff\1\u0425"+
            "\16\uffff\1\u042d\22\uffff\1\u0426\6\uffff\1\u042e\1\u042f\1"+
            "\u0430\21\uffff\1\u0428\7\uffff\1\u0433\6\uffff\1\u0434\1\uffff"+
            "\1\u0432\3\uffff\1\u0431\2\uffff\1\u042a\2\uffff\1\u042a\7\uffff"+
            "\1\u0429\1\uffff\1\u0431\1\u042a\4\uffff\1\u041f",
            "\1\u0436\12\uffff\1\u0442\56\uffff\1\u043b\1\u043e\1\u0441"+
            "\1\uffff\1\u0436\2\u0441\1\u043a\2\uffff\1\u0438\1\u0441\2\u0439"+
            "\1\u0437\1\u0441\1\u0435\2\u0439\1\u0441\1\u043a\1\uffff\1\u043d"+
            "\1\u0441\1\u043f\1\u0436\1\u0441\1\u0437\1\u0441\1\u0435\1\u0440"+
            "\1\u0438\1\u0441\1\uffff\1\u043c\1\u0441\26\uffff\1\u0443",
            "\1\u0445\12\uffff\1\u0451\56\uffff\1\u044a\1\u044d\1\u0450"+
            "\1\uffff\1\u0445\2\u0450\1\u0449\2\uffff\1\u0447\1\u0450\2\u0448"+
            "\1\u0446\1\u0450\1\u0444\2\u0448\1\u0450\1\u0449\1\uffff\1\u044c"+
            "\1\u0450\1\u044e\1\u0445\1\u0450\1\u0446\1\u0450\1\u0444\1\u044f"+
            "\1\u0447\1\u0450\1\uffff\1\u044b\1\u0450\26\uffff\1\u0452",
            "\1\u0454\12\uffff\1\u0460\56\uffff\1\u0459\1\u045c\1\u045f"+
            "\1\uffff\1\u0454\2\u045f\1\u0458\2\uffff\1\u0456\1\u045f\2\u0457"+
            "\1\u0455\1\u045f\1\u0453\2\u0457\1\u045f\1\u0458\1\uffff\1\u045b"+
            "\1\u045f\1\u045d\1\u0454\1\u045f\1\u0455\1\u045f\1\u0453\1\u045e"+
            "\1\u0456\1\u045f\1\uffff\1\u045a\1\u045f\26\uffff\1\u0461",
            "\1\u0463\12\uffff\1\u046f\56\uffff\1\u0468\1\u046b\1\u046e"+
            "\1\uffff\1\u0463\2\u046e\1\u0467\2\uffff\1\u0465\1\u046e\2\u0466"+
            "\1\u0464\1\u046e\1\u0462\2\u0466\1\u046e\1\u0467\1\uffff\1\u046a"+
            "\1\u046e\1\u046c\1\u0463\1\u046e\1\u0464\1\u046e\1\u0462\1\u046d"+
            "\1\u0465\1\u046e\1\uffff\1\u0469\1\u046e\26\uffff\1\u0470",
            "\1\u0472\12\uffff\1\u047e\56\uffff\1\u0477\1\u047a\1\u047d"+
            "\1\uffff\1\u0472\2\u047d\1\u0476\2\uffff\1\u0474\1\u047d\2\u0475"+
            "\1\u0473\1\u047d\1\u0471\2\u0475\1\u047d\1\u0476\1\uffff\1\u0479"+
            "\1\u047d\1\u047b\1\u0472\1\u047d\1\u0473\1\u047d\1\u0471\1\u047c"+
            "\1\u0474\1\u047d\1\uffff\1\u0478\1\u047d\26\uffff\1\u047f",
            "\1\u0480",
            "\1\u0481",
            "\1\u0482",
            "\1\12\12\uffff\1\4\5\uffff\1\u0484\36\uffff\1\12\13\uffff\1"+
            "\4\2\uffff\2\4\2\uffff\1\u0483\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0485\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\u0496\11\uffff\1\u048f\2\uffff\1\u048e\5\uffff\1\u0499\4"+
            "\uffff\1\u0490\1\uffff\1\u0494\4\uffff\1\u0491\5\uffff\1\u0490"+
            "\1\uffff\1\u0494\3\uffff\1\u0492\16\uffff\1\u049a\22\uffff\1"+
            "\u0493\6\uffff\1\u049b\1\u049c\1\u049d\31\uffff\1\u04a0\6\uffff"+
            "\1\u04a1\1\uffff\1\u049f\3\uffff\1\u049e\2\uffff\1\u0498\2\uffff"+
            "\1\u0498\7\uffff\1\u0497\1\uffff\1\u049e\1\u0498\4\uffff\1\u0495",
            "\1\u04a8\14\uffff\1\u04ac\5\uffff\1\u04ab\4\uffff\1\u04a2\1"+
            "\uffff\1\u04a6\4\uffff\1\u04a3\5\uffff\1\u04a2\1\uffff\1\u04a6"+
            "\3\uffff\1\u04a4\16\uffff\1\u04ad\22\uffff\1\u04a5\6\uffff\1"+
            "\u04ae\1\u04af\1\u04b0\31\uffff\1\u04b3\6\uffff\1\u04b4\1\uffff"+
            "\1\u04b2\3\uffff\1\u04b1\2\uffff\1\u04aa\2\uffff\1\u04aa\7\uffff"+
            "\1\u04a9\1\uffff\1\u04b1\1\u04aa\4\uffff\1\u04a7",
            "\1\u04ba\14\uffff\1\u04be\5\uffff\1\u04bd\6\uffff\1\u04b8\4"+
            "\uffff\1\u04b5\7\uffff\1\u04b8\3\uffff\1\u04b6\16\uffff\1\u04bf"+
            "\22\uffff\1\u04b7\6\uffff\1\u04c0\1\u04c1\1\u04c2\31\uffff\1"+
            "\u04c5\6\uffff\1\u04c6\1\uffff\1\u04c4\3\uffff\1\u04c3\2\uffff"+
            "\1\u04bc\2\uffff\1\u04bc\7\uffff\1\u04bb\1\uffff\1\u04c3\1\u04bc"+
            "\4\uffff\1\u04b9",
            "\1\u04cb\14\uffff\1\u04cf\5\uffff\1\u04ce\6\uffff\1\u04c9\14"+
            "\uffff\1\u04c9\3\uffff\1\u04c7\16\uffff\1\u04d0\22\uffff\1\u04c8"+
            "\6\uffff\1\u04d1\1\u04d2\1\u04d3\31\uffff\1\u04d6\6\uffff\1"+
            "\u04d7\1\uffff\1\u04d5\3\uffff\1\u04d4\2\uffff\1\u04cd\2\uffff"+
            "\1\u04cd\7\uffff\1\u04cc\1\uffff\1\u04d4\1\u04cd\4\uffff\1\u04ca",
            "\1\u04db\14\uffff\1\u04df\5\uffff\1\u04de\6\uffff\1\u04d9\14"+
            "\uffff\1\u04d9\22\uffff\1\u04e0\22\uffff\1\u04d8\6\uffff\1\u04e1"+
            "\1\u04e2\1\u04e3\31\uffff\1\u04e6\6\uffff\1\u04e7\1\uffff\1"+
            "\u04e5\3\uffff\1\u04e4\2\uffff\1\u04dd\2\uffff\1\u04dd\7\uffff"+
            "\1\u04dc\1\uffff\1\u04e4\1\u04dd\4\uffff\1\u04da",
            "\1\u04ea\14\uffff\1\u04ee\5\uffff\1\u04ed\6\uffff\1\u04e8\14"+
            "\uffff\1\u04e8\22\uffff\1\u04ef\31\uffff\1\u04f0\1\u04f1\1\u04f2"+
            "\31\uffff\1\u04f5\6\uffff\1\u04f6\1\uffff\1\u04f4\3\uffff\1"+
            "\u04f3\2\uffff\1\u04ec\2\uffff\1\u04ec\7\uffff\1\u04eb\1\uffff"+
            "\1\u04f3\1\u04ec\4\uffff\1\u04e9",
            "\1\u04f8\14\uffff\1\u04fc\5\uffff\1\u04fb\46\uffff\1\u04fd"+
            "\31\uffff\1\u04fe\1\u04ff\1\u0500\31\uffff\1\u0503\6\uffff\1"+
            "\u0504\1\uffff\1\u0502\3\uffff\1\u0501\2\uffff\1\u04fa\2\uffff"+
            "\1\u04fa\7\uffff\1\u04f9\1\uffff\1\u0501\1\u04fa\4\uffff\1\u04f7",
            "\1\u0505\177\uffff\1\u0507\2\uffff\1\u0507\7\uffff\1\u0506"+
            "\2\uffff\1\u0507",
            "\1\u050e\20\uffff\1\u050a\50\uffff\1\u0513\1\u0516\1\u0519"+
            "\1\u0508\1\u050e\2\u0519\1\u0512\1\uffff\1\u0509\1\u0510\1\u0519"+
            "\1\u050c\1\u0511\1\u050f\1\u0519\1\u050d\2\u0511\1\u0519\1\u0512"+
            "\1\uffff\1\u0515\1\u0519\1\u0517\1\u050e\1\u0519\1\u050f\1\u0519"+
            "\1\u050d\1\u0518\1\u0510\1\u0519\1\uffff\1\u0514\1\u0519\30"+
            "\uffff\1\u051a\46\uffff\1\u050b",
            "\1\u0521\20\uffff\1\u051d\50\uffff\1\u0526\1\u0529\1\u052c"+
            "\1\u051b\1\u0521\2\u052c\1\u0525\1\uffff\1\u051c\1\u0523\1\u052c"+
            "\1\u051f\1\u0524\1\u0522\1\u052c\1\u0520\2\u0524\1\u052c\1\u0525"+
            "\1\uffff\1\u0528\1\u052c\1\u052a\1\u0521\1\u052c\1\u0522\1\u052c"+
            "\1\u0520\1\u052b\1\u0523\1\u052c\1\uffff\1\u0527\1\u052c\30"+
            "\uffff\1\u052d\46\uffff\1\u051e",
            "\1\u0534\20\uffff\1\u0530\50\uffff\1\u0539\1\u053c\1\u053f"+
            "\1\u052e\1\u0534\2\u053f\1\u0538\1\uffff\1\u052f\1\u0536\1\u053f"+
            "\1\u0532\1\u0537\1\u0535\1\u053f\1\u0533\2\u0537\1\u053f\1\u0538"+
            "\1\uffff\1\u053b\1\u053f\1\u053d\1\u0534\1\u053f\1\u0535\1\u053f"+
            "\1\u0533\1\u053e\1\u0536\1\u053f\1\uffff\1\u053a\1\u053f\30"+
            "\uffff\1\u0540\46\uffff\1\u0531",
            "\1\u0542\14\uffff\1\u0541\5\uffff\1\u0545\100\uffff\1\u0546"+
            "\53\uffff\1\u0544\2\uffff\1\u0544\7\uffff\1\u0543\2\uffff\1"+
            "\u0544",
            "\1\u054a\14\uffff\1\u0547\42\uffff\1\u0549\11\uffff\1\u054b"+
            "\2\uffff\1\u0555\5\uffff\1\u0554\4\uffff\1\u054c\1\uffff\1\u0550"+
            "\4\uffff\1\u054d\5\uffff\1\u054c\1\uffff\1\u0550\3\uffff\1\u054e"+
            "\16\uffff\1\u0556\22\uffff\1\u054f\6\uffff\1\u0557\1\u0558\1"+
            "\u0559\21\uffff\1\u0551\7\uffff\1\u055c\6\uffff\1\u055d\1\uffff"+
            "\1\u055b\3\uffff\1\u055a\2\uffff\1\u0553\2\uffff\1\u0553\7\uffff"+
            "\1\u0552\1\uffff\1\u055a\1\u0553\4\uffff\1\u0548",
            "\1\u055f\71\uffff\1\u0564\1\u0567\1\u056a\1\uffff\1\u055f\2"+
            "\u056a\1\u0563\2\uffff\1\u0561\1\u056a\2\u0562\1\u0560\1\u056a"+
            "\1\u055e\2\u0562\1\u056a\1\u0563\1\uffff\1\u0566\1\u056a\1\u0568"+
            "\1\u055f\1\u056a\1\u0560\1\u056a\1\u055e\1\u0569\1\u0561\1\u056a"+
            "\1\uffff\1\u0565\1\u056a\30\uffff\1\u056b",
            "\1\u056d\71\uffff\1\u0572\1\u0575\1\u0578\1\uffff\1\u056d\2"+
            "\u0578\1\u0571\2\uffff\1\u056f\1\u0578\2\u0570\1\u056e\1\u0578"+
            "\1\u056c\2\u0570\1\u0578\1\u0571\1\uffff\1\u0574\1\u0578\1\u0576"+
            "\1\u056d\1\u0578\1\u056e\1\u0578\1\u056c\1\u0577\1\u056f\1\u0578"+
            "\1\uffff\1\u0573\1\u0578\30\uffff\1\u0579",
            "\1\u057b\71\uffff\1\u0580\1\u0583\1\u0586\1\uffff\1\u057b\2"+
            "\u0586\1\u057f\2\uffff\1\u057d\1\u0586\2\u057e\1\u057c\1\u0586"+
            "\1\u057a\2\u057e\1\u0586\1\u057f\1\uffff\1\u0582\1\u0586\1\u0584"+
            "\1\u057b\1\u0586\1\u057c\1\u0586\1\u057a\1\u0585\1\u057d\1\u0586"+
            "\1\uffff\1\u0581\1\u0586\30\uffff\1\u0587",
            "\1\u0589\71\uffff\1\u058e\1\u0591\1\u0594\1\uffff\1\u0589\2"+
            "\u0594\1\u058d\2\uffff\1\u058b\1\u0594\2\u058c\1\u058a\1\u0594"+
            "\1\u0588\2\u058c\1\u0594\1\u058d\1\uffff\1\u0590\1\u0594\1\u0592"+
            "\1\u0589\1\u0594\1\u058a\1\u0594\1\u0588\1\u0593\1\u058b\1\u0594"+
            "\1\uffff\1\u058f\1\u0594\30\uffff\1\u0595",
            "\1\u0597\71\uffff\1\u059c\1\u059f\1\u05a2\1\uffff\1\u0597\2"+
            "\u05a2\1\u059b\2\uffff\1\u0599\1\u05a2\2\u059a\1\u0598\1\u05a2"+
            "\1\u0596\2\u059a\1\u05a2\1\u059b\1\uffff\1\u059e\1\u05a2\1\u05a0"+
            "\1\u0597\1\u05a2\1\u0598\1\u05a2\1\u0596\1\u05a1\1\u0599\1\u05a2"+
            "\1\uffff\1\u059d\1\u05a2\30\uffff\1\u05a3",
            "\1\u05a4",
            "\1\u05a5",
            "\1\u05a6",
            "\1\12\12\uffff\1\4\5\uffff\1\u05a7\36\uffff\1\12\13\uffff\1"+
            "\4\2\uffff\2\4\2\uffff\1\u05ae\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05a8\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05b9\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05b2\1\uffff\2\4\2\uffff\1\u05b3\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05ba\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05c5\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05be\1\uffff\2\4\2\uffff\1\u05bf\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05c6\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05d1\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05ca\1\uffff\2\4\2\uffff\1\u05cb\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05d2\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05dd\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05d6\1\uffff\2\4\2\uffff\1\u05d7\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05de\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05e9\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05e2\1\uffff\2\4\2\uffff\1\u05e3\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05ea\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u05f5\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05ee\1\uffff\2\4\2\uffff\1\u05ef\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u05f6\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\u0602\11\uffff\1\u05fb\2\uffff\1\u05fa\5\uffff\1\u0605\4"+
            "\uffff\1\u05fc\1\uffff\1\u0600\4\uffff\1\u05fd\5\uffff\1\u05fc"+
            "\1\uffff\1\u0600\3\uffff\1\u05fe\16\uffff\1\u0606\22\uffff\1"+
            "\u05ff\6\uffff\1\u0607\1\u0608\1\u0609\31\uffff\1\u060c\6\uffff"+
            "\1\u060d\1\uffff\1\u060b\3\uffff\1\u060a\2\uffff\1\u0604\2\uffff"+
            "\1\u0604\7\uffff\1\u0603\1\uffff\1\u060a\1\u0604\4\uffff\1\u0601",
            "\1\u0614\14\uffff\1\u0618\5\uffff\1\u0617\4\uffff\1\u060e\1"+
            "\uffff\1\u0612\4\uffff\1\u060f\5\uffff\1\u060e\1\uffff\1\u0612"+
            "\3\uffff\1\u0610\16\uffff\1\u0619\22\uffff\1\u0611\6\uffff\1"+
            "\u061a\1\u061b\1\u061c\31\uffff\1\u061f\6\uffff\1\u0620\1\uffff"+
            "\1\u061e\3\uffff\1\u061d\2\uffff\1\u0616\2\uffff\1\u0616\7\uffff"+
            "\1\u0615\1\uffff\1\u061d\1\u0616\4\uffff\1\u0613",
            "\1\u0626\14\uffff\1\u062a\5\uffff\1\u0629\6\uffff\1\u0624\4"+
            "\uffff\1\u0621\7\uffff\1\u0624\3\uffff\1\u0622\16\uffff\1\u062b"+
            "\22\uffff\1\u0623\6\uffff\1\u062c\1\u062d\1\u062e\31\uffff\1"+
            "\u0631\6\uffff\1\u0632\1\uffff\1\u0630\3\uffff\1\u062f\2\uffff"+
            "\1\u0628\2\uffff\1\u0628\7\uffff\1\u0627\1\uffff\1\u062f\1\u0628"+
            "\4\uffff\1\u0625",
            "\1\u0637\14\uffff\1\u063b\5\uffff\1\u063a\6\uffff\1\u0635\14"+
            "\uffff\1\u0635\3\uffff\1\u0633\16\uffff\1\u063c\22\uffff\1\u0634"+
            "\6\uffff\1\u063d\1\u063e\1\u063f\31\uffff\1\u0642\6\uffff\1"+
            "\u0643\1\uffff\1\u0641\3\uffff\1\u0640\2\uffff\1\u0639\2\uffff"+
            "\1\u0639\7\uffff\1\u0638\1\uffff\1\u0640\1\u0639\4\uffff\1\u0636",
            "\1\u0647\14\uffff\1\u064b\5\uffff\1\u064a\6\uffff\1\u0645\14"+
            "\uffff\1\u0645\22\uffff\1\u064c\22\uffff\1\u0644\6\uffff\1\u064d"+
            "\1\u064e\1\u064f\31\uffff\1\u0652\6\uffff\1\u0653\1\uffff\1"+
            "\u0651\3\uffff\1\u0650\2\uffff\1\u0649\2\uffff\1\u0649\7\uffff"+
            "\1\u0648\1\uffff\1\u0650\1\u0649\4\uffff\1\u0646",
            "\1\u0656\14\uffff\1\u065a\5\uffff\1\u0659\6\uffff\1\u0654\14"+
            "\uffff\1\u0654\22\uffff\1\u065b\31\uffff\1\u065c\1\u065d\1\u065e"+
            "\31\uffff\1\u0661\6\uffff\1\u0662\1\uffff\1\u0660\3\uffff\1"+
            "\u065f\2\uffff\1\u0658\2\uffff\1\u0658\7\uffff\1\u0657\1\uffff"+
            "\1\u065f\1\u0658\4\uffff\1\u0655",
            "\1\u0664\14\uffff\1\u0668\5\uffff\1\u0667\46\uffff\1\u0669"+
            "\31\uffff\1\u066a\1\u066b\1\u066c\31\uffff\1\u066f\6\uffff\1"+
            "\u0670\1\uffff\1\u066e\3\uffff\1\u066d\2\uffff\1\u0666\2\uffff"+
            "\1\u0666\7\uffff\1\u0665\1\uffff\1\u066d\1\u0666\4\uffff\1\u0663",
            "\1\u0671\177\uffff\1\u0673\2\uffff\1\u0673\7\uffff\1\u0672"+
            "\2\uffff\1\u0673",
            "\1\u067a\12\uffff\1\u0686\5\uffff\1\u0676\50\uffff\1\u067f"+
            "\1\u0682\1\u0685\1\u0674\1\u067a\2\u0685\1\u067e\1\uffff\1\u0675"+
            "\1\u067c\1\u0685\1\u0678\1\u067d\1\u067b\1\u0685\1\u0679\2\u067d"+
            "\1\u0685\1\u067e\1\uffff\1\u0681\1\u0685\1\u0683\1\u067a\1\u0685"+
            "\1\u067b\1\u0685\1\u0679\1\u0684\1\u067c\1\u0685\1\uffff\1\u0680"+
            "\1\u0685\26\uffff\1\u0687\50\uffff\1\u0677",
            "\1\u068e\12\uffff\1\u069a\5\uffff\1\u068a\50\uffff\1\u0693"+
            "\1\u0696\1\u0699\1\u0688\1\u068e\2\u0699\1\u0692\1\uffff\1\u0689"+
            "\1\u0690\1\u0699\1\u068c\1\u0691\1\u068f\1\u0699\1\u068d\2\u0691"+
            "\1\u0699\1\u0692\1\uffff\1\u0695\1\u0699\1\u0697\1\u068e\1\u0699"+
            "\1\u068f\1\u0699\1\u068d\1\u0698\1\u0690\1\u0699\1\uffff\1\u0694"+
            "\1\u0699\26\uffff\1\u069b\50\uffff\1\u068b",
            "\1\u06a2\12\uffff\1\u06ae\5\uffff\1\u069e\50\uffff\1\u06a7"+
            "\1\u06aa\1\u06ad\1\u069c\1\u06a2\2\u06ad\1\u06a6\1\uffff\1\u069d"+
            "\1\u06a4\1\u06ad\1\u06a0\1\u06a5\1\u06a3\1\u06ad\1\u06a1\2\u06a5"+
            "\1\u06ad\1\u06a6\1\uffff\1\u06a9\1\u06ad\1\u06ab\1\u06a2\1\u06ad"+
            "\1\u06a3\1\u06ad\1\u06a1\1\u06ac\1\u06a4\1\u06ad\1\uffff\1\u06a8"+
            "\1\u06ad\26\uffff\1\u06af\50\uffff\1\u069f",
            "\1\u06b1\14\uffff\1\u06b0\5\uffff\1\u06b4\100\uffff\1\u06b5"+
            "\53\uffff\1\u06b3\2\uffff\1\u06b3\7\uffff\1\u06b2\2\uffff\1"+
            "\u06b3",
            "\1\u06b9\14\uffff\1\u06b6\42\uffff\1\u06b8\11\uffff\1\u06ba"+
            "\2\uffff\1\u06c4\5\uffff\1\u06c3\4\uffff\1\u06bb\1\uffff\1\u06bf"+
            "\4\uffff\1\u06bc\5\uffff\1\u06bb\1\uffff\1\u06bf\3\uffff\1\u06bd"+
            "\16\uffff\1\u06c5\22\uffff\1\u06be\6\uffff\1\u06c6\1\u06c7\1"+
            "\u06c8\21\uffff\1\u06c0\7\uffff\1\u06cb\6\uffff\1\u06cc\1\uffff"+
            "\1\u06ca\3\uffff\1\u06c9\2\uffff\1\u06c2\2\uffff\1\u06c2\7\uffff"+
            "\1\u06c1\1\uffff\1\u06c9\1\u06c2\4\uffff\1\u06b7",
            "\1\u06ce\12\uffff\1\u06da\56\uffff\1\u06d3\1\u06d6\1\u06d9"+
            "\1\uffff\1\u06ce\2\u06d9\1\u06d2\2\uffff\1\u06d0\1\u06d9\2\u06d1"+
            "\1\u06cf\1\u06d9\1\u06cd\2\u06d1\1\u06d9\1\u06d2\1\uffff\1\u06d5"+
            "\1\u06d9\1\u06d7\1\u06ce\1\u06d9\1\u06cf\1\u06d9\1\u06cd\1\u06d8"+
            "\1\u06d0\1\u06d9\1\uffff\1\u06d4\1\u06d9\26\uffff\1\u06db",
            "\1\u06dd\12\uffff\1\u06e9\56\uffff\1\u06e2\1\u06e5\1\u06e8"+
            "\1\uffff\1\u06dd\2\u06e8\1\u06e1\2\uffff\1\u06df\1\u06e8\2\u06e0"+
            "\1\u06de\1\u06e8\1\u06dc\2\u06e0\1\u06e8\1\u06e1\1\uffff\1\u06e4"+
            "\1\u06e8\1\u06e6\1\u06dd\1\u06e8\1\u06de\1\u06e8\1\u06dc\1\u06e7"+
            "\1\u06df\1\u06e8\1\uffff\1\u06e3\1\u06e8\26\uffff\1\u06ea",
            "\1\u06ec\12\uffff\1\u06f8\56\uffff\1\u06f1\1\u06f4\1\u06f7"+
            "\1\uffff\1\u06ec\2\u06f7\1\u06f0\2\uffff\1\u06ee\1\u06f7\2\u06ef"+
            "\1\u06ed\1\u06f7\1\u06eb\2\u06ef\1\u06f7\1\u06f0\1\uffff\1\u06f3"+
            "\1\u06f7\1\u06f5\1\u06ec\1\u06f7\1\u06ed\1\u06f7\1\u06eb\1\u06f6"+
            "\1\u06ee\1\u06f7\1\uffff\1\u06f2\1\u06f7\26\uffff\1\u06f9",
            "\1\u06fb\12\uffff\1\u0707\56\uffff\1\u0700\1\u0703\1\u0706"+
            "\1\uffff\1\u06fb\2\u0706\1\u06ff\2\uffff\1\u06fd\1\u0706\2\u06fe"+
            "\1\u06fc\1\u0706\1\u06fa\2\u06fe\1\u0706\1\u06ff\1\uffff\1\u0702"+
            "\1\u0706\1\u0704\1\u06fb\1\u0706\1\u06fc\1\u0706\1\u06fa\1\u0705"+
            "\1\u06fd\1\u0706\1\uffff\1\u0701\1\u0706\26\uffff\1\u0708",
            "\1\u070a\12\uffff\1\u0716\56\uffff\1\u070f\1\u0712\1\u0715"+
            "\1\uffff\1\u070a\2\u0715\1\u070e\2\uffff\1\u070c\1\u0715\2\u070d"+
            "\1\u070b\1\u0715\1\u0709\2\u070d\1\u0715\1\u070e\1\uffff\1\u0711"+
            "\1\u0715\1\u0713\1\u070a\1\u0715\1\u070b\1\u0715\1\u0709\1\u0714"+
            "\1\u070c\1\u0715\1\uffff\1\u0710\1\u0715\26\uffff\1\u0717",
            "\1\u0718",
            "\1\u0719",
            "\1\u071a",
            "\1\12\12\uffff\1\4\5\uffff\1\u071c\36\uffff\1\12\13\uffff\1"+
            "\4\2\uffff\2\4\2\uffff\1\u071b\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u071d\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\u072e\11\uffff\1\u0727\2\uffff\1\u0726\5\uffff\1\u0731\4"+
            "\uffff\1\u0728\1\uffff\1\u072c\4\uffff\1\u0729\5\uffff\1\u0728"+
            "\1\uffff\1\u072c\3\uffff\1\u072a\16\uffff\1\u0732\22\uffff\1"+
            "\u072b\6\uffff\1\u0733\1\u0734\1\u0735\31\uffff\1\u0738\6\uffff"+
            "\1\u0739\1\uffff\1\u0737\3\uffff\1\u0736\2\uffff\1\u0730\2\uffff"+
            "\1\u0730\7\uffff\1\u072f\1\uffff\1\u0736\1\u0730\4\uffff\1\u072d",
            "\1\u0740\14\uffff\1\u0744\5\uffff\1\u0743\4\uffff\1\u073a\1"+
            "\uffff\1\u073e\4\uffff\1\u073b\5\uffff\1\u073a\1\uffff\1\u073e"+
            "\3\uffff\1\u073c\16\uffff\1\u0745\22\uffff\1\u073d\6\uffff\1"+
            "\u0746\1\u0747\1\u0748\31\uffff\1\u074b\6\uffff\1\u074c\1\uffff"+
            "\1\u074a\3\uffff\1\u0749\2\uffff\1\u0742\2\uffff\1\u0742\7\uffff"+
            "\1\u0741\1\uffff\1\u0749\1\u0742\4\uffff\1\u073f",
            "\1\u0752\14\uffff\1\u0756\5\uffff\1\u0755\6\uffff\1\u0750\4"+
            "\uffff\1\u074d\7\uffff\1\u0750\3\uffff\1\u074e\16\uffff\1\u0757"+
            "\22\uffff\1\u074f\6\uffff\1\u0758\1\u0759\1\u075a\31\uffff\1"+
            "\u075d\6\uffff\1\u075e\1\uffff\1\u075c\3\uffff\1\u075b\2\uffff"+
            "\1\u0754\2\uffff\1\u0754\7\uffff\1\u0753\1\uffff\1\u075b\1\u0754"+
            "\4\uffff\1\u0751",
            "\1\u0763\14\uffff\1\u0767\5\uffff\1\u0766\6\uffff\1\u0761\14"+
            "\uffff\1\u0761\3\uffff\1\u075f\16\uffff\1\u0768\22\uffff\1\u0760"+
            "\6\uffff\1\u0769\1\u076a\1\u076b\31\uffff\1\u076e\6\uffff\1"+
            "\u076f\1\uffff\1\u076d\3\uffff\1\u076c\2\uffff\1\u0765\2\uffff"+
            "\1\u0765\7\uffff\1\u0764\1\uffff\1\u076c\1\u0765\4\uffff\1\u0762",
            "\1\u0773\14\uffff\1\u0777\5\uffff\1\u0776\6\uffff\1\u0771\14"+
            "\uffff\1\u0771\22\uffff\1\u0778\22\uffff\1\u0770\6\uffff\1\u0779"+
            "\1\u077a\1\u077b\31\uffff\1\u077e\6\uffff\1\u077f\1\uffff\1"+
            "\u077d\3\uffff\1\u077c\2\uffff\1\u0775\2\uffff\1\u0775\7\uffff"+
            "\1\u0774\1\uffff\1\u077c\1\u0775\4\uffff\1\u0772",
            "\1\u0782\14\uffff\1\u0786\5\uffff\1\u0785\6\uffff\1\u0780\14"+
            "\uffff\1\u0780\22\uffff\1\u0787\31\uffff\1\u0788\1\u0789\1\u078a"+
            "\31\uffff\1\u078d\6\uffff\1\u078e\1\uffff\1\u078c\3\uffff\1"+
            "\u078b\2\uffff\1\u0784\2\uffff\1\u0784\7\uffff\1\u0783\1\uffff"+
            "\1\u078b\1\u0784\4\uffff\1\u0781",
            "\1\u0790\14\uffff\1\u0794\5\uffff\1\u0793\46\uffff\1\u0795"+
            "\31\uffff\1\u0796\1\u0797\1\u0798\31\uffff\1\u079b\6\uffff\1"+
            "\u079c\1\uffff\1\u079a\3\uffff\1\u0799\2\uffff\1\u0792\2\uffff"+
            "\1\u0792\7\uffff\1\u0791\1\uffff\1\u0799\1\u0792\4\uffff\1\u078f",
            "\1\u079d\177\uffff\1\u079f\2\uffff\1\u079f\7\uffff\1\u079e"+
            "\2\uffff\1\u079f",
            "\1\u07a6\20\uffff\1\u07a2\50\uffff\1\u07ab\1\u07ae\1\u07b1"+
            "\1\u07a0\1\u07a6\2\u07b1\1\u07aa\1\uffff\1\u07a1\1\u07a8\1\u07b1"+
            "\1\u07a4\1\u07a9\1\u07a7\1\u07b1\1\u07a5\2\u07a9\1\u07b1\1\u07aa"+
            "\1\uffff\1\u07ad\1\u07b1\1\u07af\1\u07a6\1\u07b1\1\u07a7\1\u07b1"+
            "\1\u07a5\1\u07b0\1\u07a8\1\u07b1\1\uffff\1\u07ac\1\u07b1\30"+
            "\uffff\1\u07b2\46\uffff\1\u07a3",
            "\1\u07b9\20\uffff\1\u07b5\50\uffff\1\u07be\1\u07c1\1\u07c4"+
            "\1\u07b3\1\u07b9\2\u07c4\1\u07bd\1\uffff\1\u07b4\1\u07bb\1\u07c4"+
            "\1\u07b7\1\u07bc\1\u07ba\1\u07c4\1\u07b8\2\u07bc\1\u07c4\1\u07bd"+
            "\1\uffff\1\u07c0\1\u07c4\1\u07c2\1\u07b9\1\u07c4\1\u07ba\1\u07c4"+
            "\1\u07b8\1\u07c3\1\u07bb\1\u07c4\1\uffff\1\u07bf\1\u07c4\30"+
            "\uffff\1\u07c5\46\uffff\1\u07b6",
            "\1\u07cc\20\uffff\1\u07c8\50\uffff\1\u07d1\1\u07d4\1\u07d7"+
            "\1\u07c6\1\u07cc\2\u07d7\1\u07d0\1\uffff\1\u07c7\1\u07ce\1\u07d7"+
            "\1\u07ca\1\u07cf\1\u07cd\1\u07d7\1\u07cb\2\u07cf\1\u07d7\1\u07d0"+
            "\1\uffff\1\u07d3\1\u07d7\1\u07d5\1\u07cc\1\u07d7\1\u07cd\1\u07d7"+
            "\1\u07cb\1\u07d6\1\u07ce\1\u07d7\1\uffff\1\u07d2\1\u07d7\30"+
            "\uffff\1\u07d8\46\uffff\1\u07c9",
            "\1\u07da\14\uffff\1\u07d9\5\uffff\1\u07dd\100\uffff\1\u07de"+
            "\53\uffff\1\u07dc\2\uffff\1\u07dc\7\uffff\1\u07db\2\uffff\1"+
            "\u07dc",
            "\1\u07e2\14\uffff\1\u07df\42\uffff\1\u07e1\11\uffff\1\u07e3"+
            "\2\uffff\1\u07ed\5\uffff\1\u07ec\4\uffff\1\u07e4\1\uffff\1\u07e8"+
            "\4\uffff\1\u07e5\5\uffff\1\u07e4\1\uffff\1\u07e8\3\uffff\1\u07e6"+
            "\16\uffff\1\u07ee\22\uffff\1\u07e7\6\uffff\1\u07ef\1\u07f0\1"+
            "\u07f1\21\uffff\1\u07e9\7\uffff\1\u07f4\6\uffff\1\u07f5\1\uffff"+
            "\1\u07f3\3\uffff\1\u07f2\2\uffff\1\u07eb\2\uffff\1\u07eb\7\uffff"+
            "\1\u07ea\1\uffff\1\u07f2\1\u07eb\4\uffff\1\u07e0",
            "\1\u07f7\71\uffff\1\u07fc\1\u07ff\1\u0802\1\uffff\1\u07f7\2"+
            "\u0802\1\u07fb\2\uffff\1\u07f9\1\u0802\2\u07fa\1\u07f8\1\u0802"+
            "\1\u07f6\2\u07fa\1\u0802\1\u07fb\1\uffff\1\u07fe\1\u0802\1\u0800"+
            "\1\u07f7\1\u0802\1\u07f8\1\u0802\1\u07f6\1\u0801\1\u07f9\1\u0802"+
            "\1\uffff\1\u07fd\1\u0802\30\uffff\1\u0803",
            "\1\u0805\71\uffff\1\u080a\1\u080d\1\u0810\1\uffff\1\u0805\2"+
            "\u0810\1\u0809\2\uffff\1\u0807\1\u0810\2\u0808\1\u0806\1\u0810"+
            "\1\u0804\2\u0808\1\u0810\1\u0809\1\uffff\1\u080c\1\u0810\1\u080e"+
            "\1\u0805\1\u0810\1\u0806\1\u0810\1\u0804\1\u080f\1\u0807\1\u0810"+
            "\1\uffff\1\u080b\1\u0810\30\uffff\1\u0811",
            "\1\u0813\71\uffff\1\u0818\1\u081b\1\u081e\1\uffff\1\u0813\2"+
            "\u081e\1\u0817\2\uffff\1\u0815\1\u081e\2\u0816\1\u0814\1\u081e"+
            "\1\u0812\2\u0816\1\u081e\1\u0817\1\uffff\1\u081a\1\u081e\1\u081c"+
            "\1\u0813\1\u081e\1\u0814\1\u081e\1\u0812\1\u081d\1\u0815\1\u081e"+
            "\1\uffff\1\u0819\1\u081e\30\uffff\1\u081f",
            "\1\u0821\71\uffff\1\u0826\1\u0829\1\u082c\1\uffff\1\u0821\2"+
            "\u082c\1\u0825\2\uffff\1\u0823\1\u082c\2\u0824\1\u0822\1\u082c"+
            "\1\u0820\2\u0824\1\u082c\1\u0825\1\uffff\1\u0828\1\u082c\1\u082a"+
            "\1\u0821\1\u082c\1\u0822\1\u082c\1\u0820\1\u082b\1\u0823\1\u082c"+
            "\1\uffff\1\u0827\1\u082c\30\uffff\1\u082d",
            "\1\u082f\71\uffff\1\u0834\1\u0837\1\u083a\1\uffff\1\u082f\2"+
            "\u083a\1\u0833\2\uffff\1\u0831\1\u083a\2\u0832\1\u0830\1\u083a"+
            "\1\u082e\2\u0832\1\u083a\1\u0833\1\uffff\1\u0836\1\u083a\1\u0838"+
            "\1\u082f\1\u083a\1\u0830\1\u083a\1\u082e\1\u0839\1\u0831\1\u083a"+
            "\1\uffff\1\u0835\1\u083a\30\uffff\1\u083b",
            "\1\u083c",
            "\1\u083d",
            "\1\u083e",
            "\1\12\12\uffff\1\4\5\uffff\1\u083f\36\uffff\1\12\13\uffff\1"+
            "\4\2\uffff\2\4\2\uffff\1\u0846\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0840\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0851\36\uffff\1\12\13\uffff\1"+
            "\4\1\u084a\1\uffff\2\4\2\uffff\1\u084b\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0852\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u085d\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0856\1\uffff\2\4\2\uffff\1\u0857\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u085e\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0869\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0862\1\uffff\2\4\2\uffff\1\u0863\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u086a\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0875\36\uffff\1\12\13\uffff\1"+
            "\4\1\u086e\1\uffff\2\4\2\uffff\1\u086f\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0876\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u0881\36\uffff\1\12\13\uffff\1"+
            "\4\1\u087a\1\uffff\2\4\2\uffff\1\u087b\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u0882\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\5\uffff\1\u088d\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0886\1\uffff\2\4\2\uffff\1\u0887\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\36\uffff\1\12\4\uffff\1\u088e\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "487:32: ( static_type_wrapper )?";
        }
    }
    static final String DFA78_eotS =
        "\153\uffff";
    static final String DFA78_eofS =
        "\56\uffff\1\1\74\uffff";
    static final String DFA78_minS =
        "\1\6\14\uffff\1\6\12\uffff\1\6\25\uffff\1\6\74\uffff";
    static final String DFA78_maxS =
        "\1\u00c9\14\uffff\1\u00c9\12\uffff\1\u00a3\25\uffff\1\u00c9\74\uffff";
    static final String DFA78_acceptS =
        "\1\uffff\1\1\53\uffff\1\2\75\uffff";
    static final String DFA78_specialS =
        "\153\uffff}>";
    static final String[] DFA78_transitionS = {
            "\1\1\57\uffff\1\1\11\uffff\1\1\2\uffff\1\15\5\uffff\1\1\4\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\16\uffff\1\1\22\uffff\1\1\6\uffff\3\1\31\uffff\1\1\6\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\7\uffff"+
            "\1\1\1\uffff\2\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\14\uffff\1\1\42\uffff\1\30\11\uffff\1\1\2\uffff\1\1\5"+
            "\uffff\1\1\4\uffff\1\1\1\uffff\1\1\4\uffff\1\1\5\uffff\1\1\1"+
            "\uffff\1\1\3\uffff\1\1\16\uffff\1\1\22\uffff\1\1\6\uffff\3\1"+
            "\1\uffff\1\55\17\uffff\1\1\7\uffff\1\1\6\uffff\1\1\1\uffff\1"+
            "\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\7\uffff\1\1\1\uffff\2"+
            "\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\20\uffff\1\1\50\uffff\10\1\1\uffff\14\1\1\uffff\13\1\1"+
            "\uffff\2\1\26\uffff\1\56\50\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\11\uffff\2\1\5\uffff\1\1\36\uffff\1\1\11\uffff\10\1\1"+
            "\55\33\1\14\uffff\1\1\11\uffff\3\1\2\uffff\1\1\3\uffff\1\1\6"+
            "\uffff\3\1\26\uffff\1\1\2\uffff\1\1\6\uffff\1\1\1\uffff\1\1"+
            "\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\7\uffff\1\1\1\uffff\2\1"+
            "\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA78_eot = DFA.unpackEncodedString(DFA78_eotS);
    static final short[] DFA78_eof = DFA.unpackEncodedString(DFA78_eofS);
    static final char[] DFA78_min = DFA.unpackEncodedStringToUnsignedChars(DFA78_minS);
    static final char[] DFA78_max = DFA.unpackEncodedStringToUnsignedChars(DFA78_maxS);
    static final short[] DFA78_accept = DFA.unpackEncodedString(DFA78_acceptS);
    static final short[] DFA78_special = DFA.unpackEncodedString(DFA78_specialS);
    static final short[][] DFA78_transition;

    static {
        int numStates = DFA78_transitionS.length;
        DFA78_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA78_transition[i] = DFA.unpackEncodedString(DFA78_transitionS[i]);
        }
    }

    class DFA78 extends DFA {

        public DFA78(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 78;
            this.eot = DFA78_eot;
            this.eof = DFA78_eof;
            this.min = DFA78_min;
            this.max = DFA78_max;
            this.accept = DFA78_accept;
            this.special = DFA78_special;
            this.transition = DFA78_transition;
        }
        public String getDescription() {
            return "580:1: expression : ( classical_expr_wrp | struct_init );";
        }
    }
    static final String DFA79_eotS =
        "\u043d\uffff";
    static final String DFA79_eofS =
        "\u043d\uffff";
    static final String DFA79_minS =
        "\1\20\6\uffff\1\6\10\66\3\uffff\1\66\1\6\5\uffff\3\103\1\6\7\66"+
        "\3\uffff\1\66\5\uffff\3\103\6\66\3\uffff\1\66\1\6\5\uffff\3\103"+
        "\5\66\3\uffff\1\66\1\6\5\uffff\3\103\4\66\3\uffff\1\66\1\6\5\uffff"+
        "\3\103\3\66\3\uffff\1\66\1\6\5\uffff\3\103\2\66\3\uffff\1\66\1\6"+
        "\5\uffff\3\103\1\66\3\uffff\1\66\1\6\5\uffff\3\103\3\uffff\1\23"+
        "\3\27\3\66\2\6\7\66\3\6\1\66\6\6\3\103\3\66\u0386\uffff";
    static final String DFA79_maxS =
        "\1\u00c9\6\uffff\10\u00c9\1\u00c4\3\uffff\1\u00c4\1\u00c9\5\uffff"+
        "\3\103\7\u00c9\1\u00c4\3\uffff\1\u00c4\5\uffff\3\103\5\u00c9\1\u00c4"+
        "\3\uffff\1\u00c4\1\u00c9\5\uffff\3\103\4\u00c9\1\u00c4\3\uffff\1"+
        "\u00c4\1\u00c9\5\uffff\3\103\3\u00c9\1\u00c4\3\uffff\1\u00c4\1\u00c9"+
        "\5\uffff\3\103\2\u00c9\1\u00c4\3\uffff\1\u00c4\1\u00c9\5\uffff\3"+
        "\103\1\u00c9\1\u00c4\3\uffff\1\u00c4\1\u00c9\5\uffff\3\103\1\u00c4"+
        "\3\uffff\1\u00c4\1\u00c9\5\uffff\3\103\3\uffff\1\u00c9\5\u00c4\2"+
        "\u00c9\1\u00a3\7\u00c9\1\172\2\u00a3\1\u00c4\1\u00c9\5\172\3\103"+
        "\3\u00c4\u0386\uffff";
    static final String DFA79_acceptS =
        "\1\uffff\1\2\16\uffff\3\1\2\uffff\5\1\13\uffff\3\1\1\uffff\5\1\11"+
        "\uffff\3\1\2\uffff\5\1\10\uffff\3\1\2\uffff\5\1\7\uffff\3\1\2\uffff"+
        "\5\1\6\uffff\3\1\2\uffff\5\1\5\uffff\3\1\2\uffff\5\1\4\uffff\3\1"+
        "\2\uffff\5\1\3\uffff\3\1\40\uffff\u0386\1";
    static final String DFA79_specialS =
        "\u043d\uffff}>";
    static final String[] DFA79_transitionS = {
            "\1\1\1\7\44\uffff\1\1\110\uffff\1\1\36\uffff\1\1\27\uffff\1"+
            "\1\2\uffff\1\1\7\uffff\1\1\2\uffff\1\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\57\uffff\1\20\11\uffff\1\11\2\uffff\1\24\5\uffff\1\23"+
            "\4\uffff\1\12\1\uffff\1\16\4\uffff\1\13\5\uffff\1\12\1\uffff"+
            "\1\16\3\uffff\1\14\16\uffff\1\25\22\uffff\1\15\6\uffff\1\26"+
            "\1\27\1\30\31\uffff\1\33\6\uffff\1\34\1\uffff\1\32\3\uffff\1"+
            "\31\2\uffff\1\22\2\uffff\1\22\7\uffff\1\21\1\uffff\1\31\1\22"+
            "\4\uffff\1\17",
            "\1\45\11\uffff\1\36\2\uffff\1\35\5\uffff\1\50\4\uffff\1\37"+
            "\1\uffff\1\43\4\uffff\1\40\5\uffff\1\37\1\uffff\1\43\3\uffff"+
            "\1\41\16\uffff\1\51\22\uffff\1\42\6\uffff\1\52\1\53\1\54\31"+
            "\uffff\1\57\6\uffff\1\60\1\uffff\1\56\3\uffff\1\55\2\uffff\1"+
            "\47\2\uffff\1\47\7\uffff\1\46\1\uffff\1\55\1\47\4\uffff\1\44",
            "\1\67\14\uffff\1\73\5\uffff\1\72\4\uffff\1\61\1\uffff\1\65"+
            "\4\uffff\1\62\5\uffff\1\61\1\uffff\1\65\3\uffff\1\63\16\uffff"+
            "\1\74\22\uffff\1\64\6\uffff\1\75\1\76\1\77\31\uffff\1\102\6"+
            "\uffff\1\103\1\uffff\1\101\3\uffff\1\100\2\uffff\1\71\2\uffff"+
            "\1\71\7\uffff\1\70\1\uffff\1\100\1\71\4\uffff\1\66",
            "\1\111\14\uffff\1\115\5\uffff\1\114\6\uffff\1\107\4\uffff\1"+
            "\104\7\uffff\1\107\3\uffff\1\105\16\uffff\1\116\22\uffff\1\106"+
            "\6\uffff\1\117\1\120\1\121\31\uffff\1\124\6\uffff\1\125\1\uffff"+
            "\1\123\3\uffff\1\122\2\uffff\1\113\2\uffff\1\113\7\uffff\1\112"+
            "\1\uffff\1\122\1\113\4\uffff\1\110",
            "\1\132\14\uffff\1\136\5\uffff\1\135\6\uffff\1\130\14\uffff"+
            "\1\130\3\uffff\1\126\16\uffff\1\137\22\uffff\1\127\6\uffff\1"+
            "\140\1\141\1\142\31\uffff\1\145\6\uffff\1\146\1\uffff\1\144"+
            "\3\uffff\1\143\2\uffff\1\134\2\uffff\1\134\7\uffff\1\133\1\uffff"+
            "\1\143\1\134\4\uffff\1\131",
            "\1\152\14\uffff\1\156\5\uffff\1\155\6\uffff\1\150\14\uffff"+
            "\1\150\22\uffff\1\157\22\uffff\1\147\6\uffff\1\160\1\161\1\162"+
            "\31\uffff\1\165\6\uffff\1\166\1\uffff\1\164\3\uffff\1\163\2"+
            "\uffff\1\154\2\uffff\1\154\7\uffff\1\153\1\uffff\1\163\1\154"+
            "\4\uffff\1\151",
            "\1\171\14\uffff\1\175\5\uffff\1\174\6\uffff\1\167\14\uffff"+
            "\1\167\22\uffff\1\176\31\uffff\1\177\1\u0080\1\u0081\31\uffff"+
            "\1\u0084\6\uffff\1\u0085\1\uffff\1\u0083\3\uffff\1\u0082\2\uffff"+
            "\1\173\2\uffff\1\173\7\uffff\1\172\1\uffff\1\u0082\1\173\4\uffff"+
            "\1\170",
            "\1\u0087\14\uffff\1\u008b\5\uffff\1\u008a\46\uffff\1\u008c"+
            "\31\uffff\1\u008d\1\u008e\1\u008f\31\uffff\1\u0092\6\uffff\1"+
            "\u0093\1\uffff\1\u0091\3\uffff\1\u0090\2\uffff\1\u0089\2\uffff"+
            "\1\u0089\7\uffff\1\u0088\1\uffff\1\u0090\1\u0089\4\uffff\1\u0086",
            "\1\u0094\177\uffff\1\u0096\2\uffff\1\u0096\7\uffff\1\u0095"+
            "\2\uffff\1\u0096",
            "",
            "",
            "",
            "\1\u0098\14\uffff\1\u0097\5\uffff\1\u009b\100\uffff\1\u009c"+
            "\53\uffff\1\u009a\2\uffff\1\u009a\7\uffff\1\u0099\2\uffff\1"+
            "\u009a",
            "\1\u00a0\14\uffff\1\u009d\42\uffff\1\u009f\11\uffff\1\u00a1"+
            "\2\uffff\1\u00ab\5\uffff\1\u00aa\4\uffff\1\u00a2\1\uffff\1\u00a6"+
            "\4\uffff\1\u00a3\5\uffff\1\u00a2\1\uffff\1\u00a6\3\uffff\1\u00a4"+
            "\16\uffff\1\u00ac\22\uffff\1\u00a5\6\uffff\1\u00ad\1\u00ae\1"+
            "\u00af\21\uffff\1\u00a7\7\uffff\1\u00b2\6\uffff\1\u00b3\1\uffff"+
            "\1\u00b1\3\uffff\1\u00b0\2\uffff\1\u00a9\2\uffff\1\u00a9\7\uffff"+
            "\1\u00a8\1\uffff\1\u00b0\1\u00a9\4\uffff\1\u009e",
            "",
            "",
            "",
            "",
            "",
            "\1\u00b4",
            "\1\u00b5",
            "\1\u00b6",
            "\1\u00ba\14\uffff\1\u00b7\42\uffff\1\u00b9\11\uffff\1\u00bb"+
            "\2\uffff\1\u00c5\5\uffff\1\u00c4\4\uffff\1\u00bc\1\uffff\1\u00c0"+
            "\4\uffff\1\u00bd\5\uffff\1\u00bc\1\uffff\1\u00c0\3\uffff\1\u00be"+
            "\16\uffff\1\u00c6\22\uffff\1\u00bf\6\uffff\1\u00c7\1\u00c8\1"+
            "\u00c9\21\uffff\1\u00c1\7\uffff\1\u00cc\6\uffff\1\u00cd\1\uffff"+
            "\1\u00cb\3\uffff\1\u00ca\2\uffff\1\u00c3\2\uffff\1\u00c3\7\uffff"+
            "\1\u00c2\1\uffff\1\u00ca\1\u00c3\4\uffff\1\u00b8",
            "\1\u00d4\14\uffff\1\u00d8\5\uffff\1\u00d7\4\uffff\1\u00ce\1"+
            "\uffff\1\u00d2\4\uffff\1\u00cf\5\uffff\1\u00ce\1\uffff\1\u00d2"+
            "\3\uffff\1\u00d0\16\uffff\1\u00d9\22\uffff\1\u00d1\6\uffff\1"+
            "\u00da\1\u00db\1\u00dc\31\uffff\1\u00df\6\uffff\1\u00e0\1\uffff"+
            "\1\u00de\3\uffff\1\u00dd\2\uffff\1\u00d6\2\uffff\1\u00d6\7\uffff"+
            "\1\u00d5\1\uffff\1\u00dd\1\u00d6\4\uffff\1\u00d3",
            "\1\u00e6\14\uffff\1\u00ea\5\uffff\1\u00e9\6\uffff\1\u00e4\4"+
            "\uffff\1\u00e1\7\uffff\1\u00e4\3\uffff\1\u00e2\16\uffff\1\u00eb"+
            "\22\uffff\1\u00e3\6\uffff\1\u00ec\1\u00ed\1\u00ee\31\uffff\1"+
            "\u00f1\6\uffff\1\u00f2\1\uffff\1\u00f0\3\uffff\1\u00ef\2\uffff"+
            "\1\u00e8\2\uffff\1\u00e8\7\uffff\1\u00e7\1\uffff\1\u00ef\1\u00e8"+
            "\4\uffff\1\u00e5",
            "\1\u00f7\14\uffff\1\u00fb\5\uffff\1\u00fa\6\uffff\1\u00f5\14"+
            "\uffff\1\u00f5\3\uffff\1\u00f3\16\uffff\1\u00fc\22\uffff\1\u00f4"+
            "\6\uffff\1\u00fd\1\u00fe\1\u00ff\31\uffff\1\u0102\6\uffff\1"+
            "\u0103\1\uffff\1\u0101\3\uffff\1\u0100\2\uffff\1\u00f9\2\uffff"+
            "\1\u00f9\7\uffff\1\u00f8\1\uffff\1\u0100\1\u00f9\4\uffff\1\u00f6",
            "\1\u0107\14\uffff\1\u010b\5\uffff\1\u010a\6\uffff\1\u0105\14"+
            "\uffff\1\u0105\22\uffff\1\u010c\22\uffff\1\u0104\6\uffff\1\u010d"+
            "\1\u010e\1\u010f\31\uffff\1\u0112\6\uffff\1\u0113\1\uffff\1"+
            "\u0111\3\uffff\1\u0110\2\uffff\1\u0109\2\uffff\1\u0109\7\uffff"+
            "\1\u0108\1\uffff\1\u0110\1\u0109\4\uffff\1\u0106",
            "\1\u0116\14\uffff\1\u011a\5\uffff\1\u0119\6\uffff\1\u0114\14"+
            "\uffff\1\u0114\22\uffff\1\u011b\31\uffff\1\u011c\1\u011d\1\u011e"+
            "\31\uffff\1\u0121\6\uffff\1\u0122\1\uffff\1\u0120\3\uffff\1"+
            "\u011f\2\uffff\1\u0118\2\uffff\1\u0118\7\uffff\1\u0117\1\uffff"+
            "\1\u011f\1\u0118\4\uffff\1\u0115",
            "\1\u0124\14\uffff\1\u0128\5\uffff\1\u0127\46\uffff\1\u0129"+
            "\31\uffff\1\u012a\1\u012b\1\u012c\31\uffff\1\u012f\6\uffff\1"+
            "\u0130\1\uffff\1\u012e\3\uffff\1\u012d\2\uffff\1\u0126\2\uffff"+
            "\1\u0126\7\uffff\1\u0125\1\uffff\1\u012d\1\u0126\4\uffff\1\u0123",
            "\1\u0131\177\uffff\1\u0133\2\uffff\1\u0133\7\uffff\1\u0132"+
            "\2\uffff\1\u0133",
            "",
            "",
            "",
            "\1\u0135\14\uffff\1\u0134\5\uffff\1\u0138\100\uffff\1\u0139"+
            "\53\uffff\1\u0137\2\uffff\1\u0137\7\uffff\1\u0136\2\uffff\1"+
            "\u0137",
            "",
            "",
            "",
            "",
            "",
            "\1\u013a",
            "\1\u013b",
            "\1\u013c",
            "\1\u0142\14\uffff\1\u0146\5\uffff\1\u0145\6\uffff\1\u0140\4"+
            "\uffff\1\u013d\7\uffff\1\u0140\3\uffff\1\u013e\16\uffff\1\u0147"+
            "\22\uffff\1\u013f\6\uffff\1\u0148\1\u0149\1\u014a\31\uffff\1"+
            "\u014d\6\uffff\1\u014e\1\uffff\1\u014c\3\uffff\1\u014b\2\uffff"+
            "\1\u0144\2\uffff\1\u0144\7\uffff\1\u0143\1\uffff\1\u014b\1\u0144"+
            "\4\uffff\1\u0141",
            "\1\u0153\14\uffff\1\u0157\5\uffff\1\u0156\6\uffff\1\u0151\14"+
            "\uffff\1\u0151\3\uffff\1\u014f\16\uffff\1\u0158\22\uffff\1\u0150"+
            "\6\uffff\1\u0159\1\u015a\1\u015b\31\uffff\1\u015e\6\uffff\1"+
            "\u015f\1\uffff\1\u015d\3\uffff\1\u015c\2\uffff\1\u0155\2\uffff"+
            "\1\u0155\7\uffff\1\u0154\1\uffff\1\u015c\1\u0155\4\uffff\1\u0152",
            "\1\u0163\14\uffff\1\u0167\5\uffff\1\u0166\6\uffff\1\u0161\14"+
            "\uffff\1\u0161\22\uffff\1\u0168\22\uffff\1\u0160\6\uffff\1\u0169"+
            "\1\u016a\1\u016b\31\uffff\1\u016e\6\uffff\1\u016f\1\uffff\1"+
            "\u016d\3\uffff\1\u016c\2\uffff\1\u0165\2\uffff\1\u0165\7\uffff"+
            "\1\u0164\1\uffff\1\u016c\1\u0165\4\uffff\1\u0162",
            "\1\u0172\14\uffff\1\u0176\5\uffff\1\u0175\6\uffff\1\u0170\14"+
            "\uffff\1\u0170\22\uffff\1\u0177\31\uffff\1\u0178\1\u0179\1\u017a"+
            "\31\uffff\1\u017d\6\uffff\1\u017e\1\uffff\1\u017c\3\uffff\1"+
            "\u017b\2\uffff\1\u0174\2\uffff\1\u0174\7\uffff\1\u0173\1\uffff"+
            "\1\u017b\1\u0174\4\uffff\1\u0171",
            "\1\u0180\14\uffff\1\u0184\5\uffff\1\u0183\46\uffff\1\u0185"+
            "\31\uffff\1\u0186\1\u0187\1\u0188\31\uffff\1\u018b\6\uffff\1"+
            "\u018c\1\uffff\1\u018a\3\uffff\1\u0189\2\uffff\1\u0182\2\uffff"+
            "\1\u0182\7\uffff\1\u0181\1\uffff\1\u0189\1\u0182\4\uffff\1\u017f",
            "\1\u018d\177\uffff\1\u018f\2\uffff\1\u018f\7\uffff\1\u018e"+
            "\2\uffff\1\u018f",
            "",
            "",
            "",
            "\1\u0191\14\uffff\1\u0190\5\uffff\1\u0194\100\uffff\1\u0195"+
            "\53\uffff\1\u0193\2\uffff\1\u0193\7\uffff\1\u0192\2\uffff\1"+
            "\u0193",
            "\1\u0199\14\uffff\1\u0196\42\uffff\1\u0198\11\uffff\1\u019a"+
            "\2\uffff\1\u01a4\5\uffff\1\u01a3\4\uffff\1\u019b\1\uffff\1\u019f"+
            "\4\uffff\1\u019c\5\uffff\1\u019b\1\uffff\1\u019f\3\uffff\1\u019d"+
            "\16\uffff\1\u01a5\22\uffff\1\u019e\6\uffff\1\u01a6\1\u01a7\1"+
            "\u01a8\21\uffff\1\u01a0\7\uffff\1\u01ab\6\uffff\1\u01ac\1\uffff"+
            "\1\u01aa\3\uffff\1\u01a9\2\uffff\1\u01a2\2\uffff\1\u01a2\7\uffff"+
            "\1\u01a1\1\uffff\1\u01a9\1\u01a2\4\uffff\1\u0197",
            "",
            "",
            "",
            "",
            "",
            "\1\u01ad",
            "\1\u01ae",
            "\1\u01af",
            "\1\u01b4\14\uffff\1\u01b8\5\uffff\1\u01b7\6\uffff\1\u01b2\14"+
            "\uffff\1\u01b2\3\uffff\1\u01b0\16\uffff\1\u01b9\22\uffff\1\u01b1"+
            "\6\uffff\1\u01ba\1\u01bb\1\u01bc\31\uffff\1\u01bf\6\uffff\1"+
            "\u01c0\1\uffff\1\u01be\3\uffff\1\u01bd\2\uffff\1\u01b6\2\uffff"+
            "\1\u01b6\7\uffff\1\u01b5\1\uffff\1\u01bd\1\u01b6\4\uffff\1\u01b3",
            "\1\u01c4\14\uffff\1\u01c8\5\uffff\1\u01c7\6\uffff\1\u01c2\14"+
            "\uffff\1\u01c2\22\uffff\1\u01c9\22\uffff\1\u01c1\6\uffff\1\u01ca"+
            "\1\u01cb\1\u01cc\31\uffff\1\u01cf\6\uffff\1\u01d0\1\uffff\1"+
            "\u01ce\3\uffff\1\u01cd\2\uffff\1\u01c6\2\uffff\1\u01c6\7\uffff"+
            "\1\u01c5\1\uffff\1\u01cd\1\u01c6\4\uffff\1\u01c3",
            "\1\u01d3\14\uffff\1\u01d7\5\uffff\1\u01d6\6\uffff\1\u01d1\14"+
            "\uffff\1\u01d1\22\uffff\1\u01d8\31\uffff\1\u01d9\1\u01da\1\u01db"+
            "\31\uffff\1\u01de\6\uffff\1\u01df\1\uffff\1\u01dd\3\uffff\1"+
            "\u01dc\2\uffff\1\u01d5\2\uffff\1\u01d5\7\uffff\1\u01d4\1\uffff"+
            "\1\u01dc\1\u01d5\4\uffff\1\u01d2",
            "\1\u01e1\14\uffff\1\u01e5\5\uffff\1\u01e4\46\uffff\1\u01e6"+
            "\31\uffff\1\u01e7\1\u01e8\1\u01e9\31\uffff\1\u01ec\6\uffff\1"+
            "\u01ed\1\uffff\1\u01eb\3\uffff\1\u01ea\2\uffff\1\u01e3\2\uffff"+
            "\1\u01e3\7\uffff\1\u01e2\1\uffff\1\u01ea\1\u01e3\4\uffff\1\u01e0",
            "\1\u01ee\177\uffff\1\u01f0\2\uffff\1\u01f0\7\uffff\1\u01ef"+
            "\2\uffff\1\u01f0",
            "",
            "",
            "",
            "\1\u01f2\14\uffff\1\u01f1\5\uffff\1\u01f5\100\uffff\1\u01f6"+
            "\53\uffff\1\u01f4\2\uffff\1\u01f4\7\uffff\1\u01f3\2\uffff\1"+
            "\u01f4",
            "\1\u01fa\14\uffff\1\u01f7\42\uffff\1\u01f9\11\uffff\1\u01fb"+
            "\2\uffff\1\u0205\5\uffff\1\u0204\4\uffff\1\u01fc\1\uffff\1\u0200"+
            "\4\uffff\1\u01fd\5\uffff\1\u01fc\1\uffff\1\u0200\3\uffff\1\u01fe"+
            "\16\uffff\1\u0206\22\uffff\1\u01ff\6\uffff\1\u0207\1\u0208\1"+
            "\u0209\21\uffff\1\u0201\7\uffff\1\u020c\6\uffff\1\u020d\1\uffff"+
            "\1\u020b\3\uffff\1\u020a\2\uffff\1\u0203\2\uffff\1\u0203\7\uffff"+
            "\1\u0202\1\uffff\1\u020a\1\u0203\4\uffff\1\u01f8",
            "",
            "",
            "",
            "",
            "",
            "\1\u020e",
            "\1\u020f",
            "\1\u0210",
            "\1\u0214\14\uffff\1\u0218\5\uffff\1\u0217\6\uffff\1\u0212\14"+
            "\uffff\1\u0212\22\uffff\1\u0219\22\uffff\1\u0211\6\uffff\1\u021a"+
            "\1\u021b\1\u021c\31\uffff\1\u021f\6\uffff\1\u0220\1\uffff\1"+
            "\u021e\3\uffff\1\u021d\2\uffff\1\u0216\2\uffff\1\u0216\7\uffff"+
            "\1\u0215\1\uffff\1\u021d\1\u0216\4\uffff\1\u0213",
            "\1\u0223\14\uffff\1\u0227\5\uffff\1\u0226\6\uffff\1\u0221\14"+
            "\uffff\1\u0221\22\uffff\1\u0228\31\uffff\1\u0229\1\u022a\1\u022b"+
            "\31\uffff\1\u022e\6\uffff\1\u022f\1\uffff\1\u022d\3\uffff\1"+
            "\u022c\2\uffff\1\u0225\2\uffff\1\u0225\7\uffff\1\u0224\1\uffff"+
            "\1\u022c\1\u0225\4\uffff\1\u0222",
            "\1\u0231\14\uffff\1\u0235\5\uffff\1\u0234\46\uffff\1\u0236"+
            "\31\uffff\1\u0237\1\u0238\1\u0239\31\uffff\1\u023c\6\uffff\1"+
            "\u023d\1\uffff\1\u023b\3\uffff\1\u023a\2\uffff\1\u0233\2\uffff"+
            "\1\u0233\7\uffff\1\u0232\1\uffff\1\u023a\1\u0233\4\uffff\1\u0230",
            "\1\u023e\177\uffff\1\u0240\2\uffff\1\u0240\7\uffff\1\u023f"+
            "\2\uffff\1\u0240",
            "",
            "",
            "",
            "\1\u0242\14\uffff\1\u0241\5\uffff\1\u0245\100\uffff\1\u0246"+
            "\53\uffff\1\u0244\2\uffff\1\u0244\7\uffff\1\u0243\2\uffff\1"+
            "\u0244",
            "\1\u024a\14\uffff\1\u0247\42\uffff\1\u0249\11\uffff\1\u024b"+
            "\2\uffff\1\u0255\5\uffff\1\u0254\4\uffff\1\u024c\1\uffff\1\u0250"+
            "\4\uffff\1\u024d\5\uffff\1\u024c\1\uffff\1\u0250\3\uffff\1\u024e"+
            "\16\uffff\1\u0256\22\uffff\1\u024f\6\uffff\1\u0257\1\u0258\1"+
            "\u0259\21\uffff\1\u0251\7\uffff\1\u025c\6\uffff\1\u025d\1\uffff"+
            "\1\u025b\3\uffff\1\u025a\2\uffff\1\u0253\2\uffff\1\u0253\7\uffff"+
            "\1\u0252\1\uffff\1\u025a\1\u0253\4\uffff\1\u0248",
            "",
            "",
            "",
            "",
            "",
            "\1\u025e",
            "\1\u025f",
            "\1\u0260",
            "\1\u0263\14\uffff\1\u0267\5\uffff\1\u0266\6\uffff\1\u0261\14"+
            "\uffff\1\u0261\22\uffff\1\u0268\31\uffff\1\u0269\1\u026a\1\u026b"+
            "\31\uffff\1\u026e\6\uffff\1\u026f\1\uffff\1\u026d\3\uffff\1"+
            "\u026c\2\uffff\1\u0265\2\uffff\1\u0265\7\uffff\1\u0264\1\uffff"+
            "\1\u026c\1\u0265\4\uffff\1\u0262",
            "\1\u0271\14\uffff\1\u0275\5\uffff\1\u0274\46\uffff\1\u0276"+
            "\31\uffff\1\u0277\1\u0278\1\u0279\31\uffff\1\u027c\6\uffff\1"+
            "\u027d\1\uffff\1\u027b\3\uffff\1\u027a\2\uffff\1\u0273\2\uffff"+
            "\1\u0273\7\uffff\1\u0272\1\uffff\1\u027a\1\u0273\4\uffff\1\u0270",
            "\1\u027e\177\uffff\1\u0280\2\uffff\1\u0280\7\uffff\1\u027f"+
            "\2\uffff\1\u0280",
            "",
            "",
            "",
            "\1\u0282\14\uffff\1\u0281\5\uffff\1\u0285\100\uffff\1\u0286"+
            "\53\uffff\1\u0284\2\uffff\1\u0284\7\uffff\1\u0283\2\uffff\1"+
            "\u0284",
            "\1\u028a\14\uffff\1\u0287\42\uffff\1\u0289\11\uffff\1\u028b"+
            "\2\uffff\1\u0295\5\uffff\1\u0294\4\uffff\1\u028c\1\uffff\1\u0290"+
            "\4\uffff\1\u028d\5\uffff\1\u028c\1\uffff\1\u0290\3\uffff\1\u028e"+
            "\16\uffff\1\u0296\22\uffff\1\u028f\6\uffff\1\u0297\1\u0298\1"+
            "\u0299\21\uffff\1\u0291\7\uffff\1\u029c\6\uffff\1\u029d\1\uffff"+
            "\1\u029b\3\uffff\1\u029a\2\uffff\1\u0293\2\uffff\1\u0293\7\uffff"+
            "\1\u0292\1\uffff\1\u029a\1\u0293\4\uffff\1\u0288",
            "",
            "",
            "",
            "",
            "",
            "\1\u029e",
            "\1\u029f",
            "\1\u02a0",
            "\1\u02a2\14\uffff\1\u02a6\5\uffff\1\u02a5\46\uffff\1\u02a7"+
            "\31\uffff\1\u02a8\1\u02a9\1\u02aa\31\uffff\1\u02ad\6\uffff\1"+
            "\u02ae\1\uffff\1\u02ac\3\uffff\1\u02ab\2\uffff\1\u02a4\2\uffff"+
            "\1\u02a4\7\uffff\1\u02a3\1\uffff\1\u02ab\1\u02a4\4\uffff\1\u02a1",
            "\1\u02af\177\uffff\1\u02b1\2\uffff\1\u02b1\7\uffff\1\u02b0"+
            "\2\uffff\1\u02b1",
            "",
            "",
            "",
            "\1\u02b3\14\uffff\1\u02b2\5\uffff\1\u02b6\100\uffff\1\u02b7"+
            "\53\uffff\1\u02b5\2\uffff\1\u02b5\7\uffff\1\u02b4\2\uffff\1"+
            "\u02b5",
            "\1\u02bb\14\uffff\1\u02b8\42\uffff\1\u02ba\11\uffff\1\u02bc"+
            "\2\uffff\1\u02c6\5\uffff\1\u02c5\4\uffff\1\u02bd\1\uffff\1\u02c1"+
            "\4\uffff\1\u02be\5\uffff\1\u02bd\1\uffff\1\u02c1\3\uffff\1\u02bf"+
            "\16\uffff\1\u02c7\22\uffff\1\u02c0\6\uffff\1\u02c8\1\u02c9\1"+
            "\u02ca\21\uffff\1\u02c2\7\uffff\1\u02cd\6\uffff\1\u02ce\1\uffff"+
            "\1\u02cc\3\uffff\1\u02cb\2\uffff\1\u02c4\2\uffff\1\u02c4\7\uffff"+
            "\1\u02c3\1\uffff\1\u02cb\1\u02c4\4\uffff\1\u02b9",
            "",
            "",
            "",
            "",
            "",
            "\1\u02cf",
            "\1\u02d0",
            "\1\u02d1",
            "\1\u02d2\177\uffff\1\u02d4\2\uffff\1\u02d4\7\uffff\1\u02d3"+
            "\2\uffff\1\u02d4",
            "",
            "",
            "",
            "\1\u02d6\14\uffff\1\u02d5\5\uffff\1\u02d9\100\uffff\1\u02da"+
            "\53\uffff\1\u02d8\2\uffff\1\u02d8\7\uffff\1\u02d7\2\uffff\1"+
            "\u02d8",
            "\1\u02de\14\uffff\1\u02db\42\uffff\1\u02dd\11\uffff\1\u02df"+
            "\2\uffff\1\u02e9\5\uffff\1\u02e8\4\uffff\1\u02e0\1\uffff\1\u02e4"+
            "\4\uffff\1\u02e1\5\uffff\1\u02e0\1\uffff\1\u02e4\3\uffff\1\u02e2"+
            "\16\uffff\1\u02ea\22\uffff\1\u02e3\6\uffff\1\u02eb\1\u02ec\1"+
            "\u02ed\21\uffff\1\u02e5\7\uffff\1\u02f0\6\uffff\1\u02f1\1\uffff"+
            "\1\u02ef\3\uffff\1\u02ee\2\uffff\1\u02e7\2\uffff\1\u02e7\7\uffff"+
            "\1\u02e6\1\uffff\1\u02ee\1\u02e7\4\uffff\1\u02dc",
            "",
            "",
            "",
            "",
            "",
            "\1\u02f2",
            "\1\u02f3",
            "\1\u02f4",
            "",
            "",
            "",
            "\1\u02f5\42\uffff\1\u02f7\147\uffff\1\u02f7\52\uffff\1\u02f6",
            "\1\u02fa\36\uffff\1\u02fc\14\uffff\1\u02f8\5\uffff\1\u02f9"+
            "\131\uffff\1\u02fb\22\uffff\1\u02fd\2\uffff\1\u02fd\12\uffff"+
            "\1\u02fd",
            "\1\u0300\36\uffff\1\u0302\14\uffff\1\u02fe\5\uffff\1\u02ff"+
            "\131\uffff\1\u0301\22\uffff\1\u0303\2\uffff\1\u0303\12\uffff"+
            "\1\u0303",
            "\1\u0306\36\uffff\1\u0308\14\uffff\1\u0304\5\uffff\1\u0305"+
            "\131\uffff\1\u0307\22\uffff\1\u0309\2\uffff\1\u0309\12\uffff"+
            "\1\u0309",
            "\1\u030b\14\uffff\1\u030a\5\uffff\1\u030e\100\uffff\1\u030f"+
            "\53\uffff\1\u030d\2\uffff\1\u030d\7\uffff\1\u030c\2\uffff\1"+
            "\u030d",
            "\1\u0310\177\uffff\1\u0311\2\uffff\1\u0311\12\uffff\1\u0311",
            "\1\u0313\147\uffff\1\u0313\52\uffff\1\u0312",
            "\1\u0317\57\uffff\1\u0314\22\uffff\1\u0315\2\uffff\1\u0316"+
            "\55\uffff\1\u0318\43\uffff\1\u0319\27\uffff\1\u031b\2\uffff"+
            "\1\u031b\7\uffff\1\u031a\2\uffff\1\u031b\4\uffff\1\u0319",
            "\1\u031e\20\uffff\1\u0321\50\uffff\1\u0329\1\u032c\1\u032f"+
            "\1\u0320\1\u0324\2\u032f\1\u0328\1\uffff\1\u031c\1\u0326\1\u032f"+
            "\1\u031d\1\u0327\1\u0325\1\u032f\1\u0323\2\u0327\1\u032f\1\u0328"+
            "\1\uffff\1\u032b\1\u032f\1\u032d\1\u0324\1\u032f\1\u0325\1\u032f"+
            "\1\u0323\1\u032e\1\u0326\1\u032f\1\uffff\1\u032a\1\u032f\26"+
            "\uffff\1\u031f\50\uffff\1\u0322",
            "\1\u0338\11\uffff\1\u0331\2\uffff\1\u0330\5\uffff\1\u033b\4"+
            "\uffff\1\u0332\1\uffff\1\u0336\4\uffff\1\u0333\5\uffff\1\u0332"+
            "\1\uffff\1\u0336\3\uffff\1\u0334\16\uffff\1\u033c\22\uffff\1"+
            "\u0335\6\uffff\1\u033d\1\u033e\1\u033f\31\uffff\1\u0342\6\uffff"+
            "\1\u0343\1\uffff\1\u0341\3\uffff\1\u0340\2\uffff\1\u033a\2\uffff"+
            "\1\u033a\7\uffff\1\u0339\1\uffff\1\u0340\1\u033a\4\uffff\1\u0337",
            "\1\u034a\14\uffff\1\u034e\5\uffff\1\u034d\4\uffff\1\u0344\1"+
            "\uffff\1\u0348\4\uffff\1\u0345\5\uffff\1\u0344\1\uffff\1\u0348"+
            "\3\uffff\1\u0346\16\uffff\1\u034f\22\uffff\1\u0347\6\uffff\1"+
            "\u0350\1\u0351\1\u0352\31\uffff\1\u0355\6\uffff\1\u0356\1\uffff"+
            "\1\u0354\3\uffff\1\u0353\2\uffff\1\u034c\2\uffff\1\u034c\7\uffff"+
            "\1\u034b\1\uffff\1\u0353\1\u034c\4\uffff\1\u0349",
            "\1\u035c\14\uffff\1\u0360\5\uffff\1\u035f\6\uffff\1\u035a\4"+
            "\uffff\1\u0357\7\uffff\1\u035a\3\uffff\1\u0358\16\uffff\1\u0361"+
            "\22\uffff\1\u0359\6\uffff\1\u0362\1\u0363\1\u0364\31\uffff\1"+
            "\u0367\6\uffff\1\u0368\1\uffff\1\u0366\3\uffff\1\u0365\2\uffff"+
            "\1\u035e\2\uffff\1\u035e\7\uffff\1\u035d\1\uffff\1\u0365\1\u035e"+
            "\4\uffff\1\u035b",
            "\1\u036d\14\uffff\1\u0371\5\uffff\1\u0370\6\uffff\1\u036b\14"+
            "\uffff\1\u036b\3\uffff\1\u0369\16\uffff\1\u0372\22\uffff\1\u036a"+
            "\6\uffff\1\u0373\1\u0374\1\u0375\31\uffff\1\u0378\6\uffff\1"+
            "\u0379\1\uffff\1\u0377\3\uffff\1\u0376\2\uffff\1\u036f\2\uffff"+
            "\1\u036f\7\uffff\1\u036e\1\uffff\1\u0376\1\u036f\4\uffff\1\u036c",
            "\1\u037d\14\uffff\1\u0381\5\uffff\1\u0380\6\uffff\1\u037b\14"+
            "\uffff\1\u037b\22\uffff\1\u0382\22\uffff\1\u037a\6\uffff\1\u0383"+
            "\1\u0384\1\u0385\31\uffff\1\u0388\6\uffff\1\u0389\1\uffff\1"+
            "\u0387\3\uffff\1\u0386\2\uffff\1\u037f\2\uffff\1\u037f\7\uffff"+
            "\1\u037e\1\uffff\1\u0386\1\u037f\4\uffff\1\u037c",
            "\1\u038c\14\uffff\1\u0390\5\uffff\1\u038f\6\uffff\1\u038a\14"+
            "\uffff\1\u038a\22\uffff\1\u0391\31\uffff\1\u0392\1\u0393\1\u0394"+
            "\31\uffff\1\u0397\6\uffff\1\u0398\1\uffff\1\u0396\3\uffff\1"+
            "\u0395\2\uffff\1\u038e\2\uffff\1\u038e\7\uffff\1\u038d\1\uffff"+
            "\1\u0395\1\u038e\4\uffff\1\u038b",
            "\1\u039a\14\uffff\1\u039e\5\uffff\1\u039d\46\uffff\1\u039f"+
            "\31\uffff\1\u03a0\1\u03a1\1\u03a2\31\uffff\1\u03a5\6\uffff\1"+
            "\u03a6\1\uffff\1\u03a4\3\uffff\1\u03a3\2\uffff\1\u039c\2\uffff"+
            "\1\u039c\7\uffff\1\u039b\1\uffff\1\u03a3\1\u039c\4\uffff\1\u0399",
            "\1\u03a9\102\uffff\1\u03a7\2\uffff\1\u03a8\55\uffff\1\u03aa",
            "\1\u03b1\20\uffff\1\u03ad\50\uffff\1\u03b6\1\u03b9\1\u03bc"+
            "\1\u03ab\1\u03b1\2\u03bc\1\u03b5\1\uffff\1\u03ac\1\u03b3\1\u03bc"+
            "\1\u03af\1\u03b4\1\u03b2\1\u03bc\1\u03b0\2\u03b4\1\u03bc\1\u03b5"+
            "\1\uffff\1\u03b8\1\u03bc\1\u03ba\1\u03b1\1\u03bc\1\u03b2\1\u03bc"+
            "\1\u03b0\1\u03bb\1\u03b3\1\u03bc\1\uffff\1\u03b7\1\u03bc\26"+
            "\uffff\1\u03bd\50\uffff\1\u03ae",
            "\1\u03c4\20\uffff\1\u03c0\50\uffff\1\u03c9\1\u03cc\1\u03cf"+
            "\1\u03be\1\u03c4\2\u03cf\1\u03c8\1\uffff\1\u03bf\1\u03c6\1\u03cf"+
            "\1\u03c2\1\u03c7\1\u03c5\1\u03cf\1\u03c3\2\u03c7\1\u03cf\1\u03c8"+
            "\1\uffff\1\u03cb\1\u03cf\1\u03cd\1\u03c4\1\u03cf\1\u03c5\1\u03cf"+
            "\1\u03c3\1\u03ce\1\u03c6\1\u03cf\1\uffff\1\u03ca\1\u03cf\26"+
            "\uffff\1\u03d0\50\uffff\1\u03c1",
            "\1\u03d2\14\uffff\1\u03d1\5\uffff\1\u03d5\100\uffff\1\u03d6"+
            "\53\uffff\1\u03d4\2\uffff\1\u03d4\7\uffff\1\u03d3\2\uffff\1"+
            "\u03d4",
            "\1\u03da\14\uffff\1\u03d7\42\uffff\1\u03d9\11\uffff\1\u03db"+
            "\2\uffff\1\u03e5\5\uffff\1\u03e4\4\uffff\1\u03dc\1\uffff\1\u03e0"+
            "\4\uffff\1\u03dd\5\uffff\1\u03dc\1\uffff\1\u03e0\3\uffff\1\u03de"+
            "\16\uffff\1\u03e6\22\uffff\1\u03df\6\uffff\1\u03e7\1\u03e8\1"+
            "\u03e9\21\uffff\1\u03e1\7\uffff\1\u03ec\6\uffff\1\u03ed\1\uffff"+
            "\1\u03eb\3\uffff\1\u03ea\2\uffff\1\u03e3\2\uffff\1\u03e3\7\uffff"+
            "\1\u03e2\1\uffff\1\u03ea\1\u03e3\4\uffff\1\u03d8",
            "\1\u03ef\71\uffff\1\u03f4\1\u03f7\1\u03fa\1\uffff\1\u03ef\2"+
            "\u03fa\1\u03f3\2\uffff\1\u03f1\1\u03fa\2\u03f2\1\u03f0\1\u03fa"+
            "\1\u03ee\2\u03f2\1\u03fa\1\u03f3\1\uffff\1\u03f6\1\u03fa\1\u03f8"+
            "\1\u03ef\1\u03fa\1\u03f0\1\u03fa\1\u03ee\1\u03f9\1\u03f1\1\u03fa"+
            "\1\uffff\1\u03f5\1\u03fa\26\uffff\1\u03fb",
            "\1\u03fd\71\uffff\1\u0402\1\u0405\1\u0408\1\uffff\1\u03fd\2"+
            "\u0408\1\u0401\2\uffff\1\u03ff\1\u0408\2\u0400\1\u03fe\1\u0408"+
            "\1\u03fc\2\u0400\1\u0408\1\u0401\1\uffff\1\u0404\1\u0408\1\u0406"+
            "\1\u03fd\1\u0408\1\u03fe\1\u0408\1\u03fc\1\u0407\1\u03ff\1\u0408"+
            "\1\uffff\1\u0403\1\u0408\26\uffff\1\u0409",
            "\1\u040b\71\uffff\1\u0410\1\u0413\1\u0416\1\uffff\1\u040b\2"+
            "\u0416\1\u040f\2\uffff\1\u040d\1\u0416\2\u040e\1\u040c\1\u0416"+
            "\1\u040a\2\u040e\1\u0416\1\u040f\1\uffff\1\u0412\1\u0416\1\u0414"+
            "\1\u040b\1\u0416\1\u040c\1\u0416\1\u040a\1\u0415\1\u040d\1\u0416"+
            "\1\uffff\1\u0411\1\u0416\26\uffff\1\u0417",
            "\1\u0419\71\uffff\1\u041e\1\u0421\1\u0424\1\uffff\1\u0419\2"+
            "\u0424\1\u041d\2\uffff\1\u041b\1\u0424\2\u041c\1\u041a\1\u0424"+
            "\1\u0418\2\u041c\1\u0424\1\u041d\1\uffff\1\u0420\1\u0424\1\u0422"+
            "\1\u0419\1\u0424\1\u041a\1\u0424\1\u0418\1\u0423\1\u041b\1\u0424"+
            "\1\uffff\1\u041f\1\u0424\26\uffff\1\u0425",
            "\1\u0427\71\uffff\1\u042c\1\u042f\1\u0432\1\uffff\1\u0427\2"+
            "\u0432\1\u042b\2\uffff\1\u0429\1\u0432\2\u042a\1\u0428\1\u0432"+
            "\1\u0426\2\u042a\1\u0432\1\u042b\1\uffff\1\u042e\1\u0432\1\u0430"+
            "\1\u0427\1\u0432\1\u0428\1\u0432\1\u0426\1\u0431\1\u0429\1\u0432"+
            "\1\uffff\1\u042d\1\u0432\26\uffff\1\u0433",
            "\1\u0434",
            "\1\u0435",
            "\1\u0436",
            "\1\u0437\177\uffff\1\u0438\2\uffff\1\u0438\12\uffff\1\u0438",
            "\1\u0439\177\uffff\1\u043a\2\uffff\1\u043a\12\uffff\1\u043a",
            "\1\u043b\177\uffff\1\u043c\2\uffff\1\u043c\12\uffff\1\u043c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "()* loopback of 589:23: ( COMMA classical_expr_wrp )*";
        }
    }
    static final String DFA82_eotS =
        "\u00a9\uffff";
    static final String DFA82_eofS =
        "\57\uffff\1\2\171\uffff";
    static final String DFA82_minS =
        "\2\6\26\uffff\1\6\1\uffff\2\6\23\uffff\2\6\2\uffff\1\6\20\uffff"+
        "\1\174\7\uffff\1\174\134\uffff";
    static final String DFA82_maxS =
        "\2\u00c9\26\uffff\1\u00a3\1\uffff\1\u00c9\1\172\23\uffff\2\u00c9"+
        "\2\uffff\1\u00c9\20\uffff\1\174\7\uffff\1\174\134\uffff";
    static final String DFA82_acceptS =
        "\2\uffff\1\2\23\uffff\1\3\1\1\63\uffff\1\4\57\uffff\1\2\25\uffff"+
        "\1\2\25\uffff\2\2";
    static final String DFA82_specialS =
        "\u00a9\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\1\4\uffff\1\26\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\14\uffff\1\2\42\uffff\1\30\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\1\uffff\1\27\17\uffff\1\33\7\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff"+
            "\2\2\4\uffff\1\32",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\20\uffff\1\2\50\uffff\3\2\1\63\4\2\1\uffff\1\60\13\2\1"+
            "\uffff\13\2\1\uffff\2\2\26\uffff\1\57\50\uffff\1\2",
            "",
            "\1\2\57\uffff\1\2\14\uffff\1\113\5\uffff\1\104\2\uffff\1\2"+
            "\55\uffff\1\2\43\uffff\1\2\27\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\2\uffff\1\2\4\uffff\1\2",
            "\1\2\74\uffff\1\113\5\uffff\1\114\2\uffff\1\2\55\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\11\uffff\2\2\5\uffff\1\2\36\uffff\1\2\11\uffff\10\2\1"+
            "\27\33\2\14\uffff\1\2\11\uffff\3\2\2\uffff\1\2\3\uffff\1\2\6"+
            "\uffff\3\2\21\uffff\1\2\4\uffff\1\2\2\uffff\1\2\6\uffff\1\2"+
            "\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2"+
            "\1\uffff\2\2\4\uffff\1\2",
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\173\6\uffff\1\2\6\uffff\3\2\31"+
            "\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2"+
            "\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "\1\u0091\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\6\uffff"+
            "\3\2\31\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00a7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00a8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "598:19: ( struct_init | classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )";
        }
    }
    static final String DFA87_eotS =
        "\162\uffff";
    static final String DFA87_eofS =
        "\162\uffff";
    static final String DFA87_minS =
        "\1\66\1\6\3\uffff\2\6\7\uffff\1\66\6\uffff\1\66\1\6\16\uffff\1\6"+
        "\114\uffff";
    static final String DFA87_maxS =
        "\1\u00c9\1\u00c1\3\uffff\2\u00c9\7\uffff\1\u00c9\6\uffff\1\u00c4"+
        "\1\u00a3\16\uffff\1\u00c1\114\uffff";
    static final String DFA87_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\75\uffff\2\1\22\uffff\1\1\21\uffff\1\1"+
        "\11\uffff";
    static final String DFA87_specialS =
        "\162\uffff}>";
    static final String[] DFA87_transitionS = {
            "\1\1\147\uffff\1\4\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\4",
            "\1\4\12\uffff\1\2\5\uffff\1\2\52\uffff\1\2\1\5\1\uffff\2\2"+
            "\2\uffff\1\6\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\33\uffff\1"+
            "\2\43\uffff\1\2\35\uffff\1\2",
            "",
            "",
            "",
            "\1\16\57\uffff\1\26\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\6\uffff\3"+
            "\2\21\uffff\1\4\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff"+
            "\1\25",
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\45\6\uffff\1\2\6\uffff\3\2\31\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\6\uffff\3\2\21\uffff\1\4\7\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\2\2\4\uffff\1\102",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\22\uffff\1\4\60\uffff\1\4\73\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\2\uffff\1\2",
            "\1\2\12\uffff\1\2\5\uffff\1\2\50\uffff\10\2\1\uffff\1\126\13"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\150\50\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\4\12\uffff\1\150\5\uffff\1\150\52\uffff\1\150\1\4\1\uffff"+
            "\2\150\2\uffff\1\150\1\uffff\1\150\3\uffff\1\150\3\uffff\1\150"+
            "\3\uffff\1\150\2\uffff\1\150\1\uffff\1\150\3\uffff\1\150\2\uffff"+
            "\1\150\33\uffff\1\150\43\uffff\1\150\35\uffff\1\150",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "622:4: ( object_name | func_pointer1 )";
        }
    }
    static final String DFA99_eotS =
        "\u00b8\uffff";
    static final String DFA99_eofS =
        "\u00b8\uffff";
    static final String DFA99_minS =
        "\1\66\1\6\23\uffff\1\66\2\6\7\uffff\1\6\14\uffff\3\6\1\174\1\66"+
        "\1\6\1\uffff\1\6\2\uffff\3\6\21\uffff\1\174\1\66\1\6\153\uffff";
    static final String DFA99_maxS =
        "\2\u00c9\23\uffff\2\u00c9\1\u00a3\7\uffff\1\172\14\uffff\1\u00c9"+
        "\1\172\1\u00a3\1\174\1\66\1\172\1\uffff\1\172\2\uffff\3\u00c9\21"+
        "\uffff\1\174\1\66\1\172\153\uffff";
    static final String DFA99_acceptS =
        "\2\uffff\1\2\57\uffff\1\1\6\uffff\1\1\23\uffff\16\1\20\uffff\11"+
        "\1\25\uffff\1\1\24\uffff\2\1\24\uffff\4\1";
    static final String DFA99_specialS =
        "\u00b8\uffff}>";
    static final String[] DFA99_transitionS = {
            "\1\2\11\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff"+
            "\2\2\4\uffff\1\2",
            "\1\2\14\uffff\1\25\42\uffff\1\27\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\21\uffff\1\37\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1"+
            "\26",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\55\147\uffff\1\55\52\uffff\1\54",
            "\1\61\57\uffff\1\56\22\uffff\1\57\2\uffff\1\60\55\uffff\1\62"+
            "\43\uffff\1\63\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\63",
            "\1\70\20\uffff\1\2\50\uffff\10\2\1\uffff\1\66\2\2\1\67\10\2"+
            "\1\uffff\13\2\1\uffff\2\2\26\uffff\1\71\50\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\114\102\uffff\1\112\2\uffff\1\113\55\uffff\1\115",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\121\57\uffff\1\116\22\uffff\1\117\2\uffff\1\120\55\uffff"+
            "\1\122\43\uffff\1\116\52\uffff\1\116",
            "\1\125\102\uffff\1\123\2\uffff\1\124\55\uffff\1\126",
            "\1\131\20\uffff\1\2\50\uffff\10\2\1\uffff\1\127\2\2\1\130\10"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\132\50\uffff\1\2",
            "\1\153",
            "\1\154",
            "\1\156\163\uffff\1\155",
            "",
            "\1\161\102\uffff\1\157\2\uffff\1\160\55\uffff\1\162",
            "",
            "",
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\163\6\uffff\1\2\6\uffff\3\2\31"+
            "\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2"+
            "\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\57\uffff\1\u0089\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\u009f\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\11\uffff\1\u009e\10\uffff\1\2\6\uffff"+
            "\3\2\31\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00b4",
            "\1\u00b5",
            "\1\u00b7\163\uffff\1\u00b6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "705:14: ( type_convertion )?";
        }
    }
    static final String DFA109_eotS =
        "\u00a4\uffff";
    static final String DFA109_eofS =
        "\1\2\31\uffff\1\2\26\uffff\1\116\162\uffff";
    static final String DFA109_minS =
        "\2\6\30\uffff\1\6\24\uffff\3\6\162\uffff";
    static final String DFA109_maxS =
        "\2\u00c9\30\uffff\1\u00c9\24\uffff\3\u00c9\162\uffff";
    static final String DFA109_acceptS =
        "\2\uffff\1\2\113\uffff\1\1\1\uffff\1\1\24\uffff\1\1\30\uffff\3\1"+
        "\3\uffff\1\1\11\uffff\1\1\3\uffff\3\1\17\uffff";
    static final String DFA109_specialS =
        "\u00a4\uffff}>";
    static final String[] DFA109_transitionS = {
            "\1\2\11\uffff\2\2\44\uffff\1\2\11\uffff\3\2\1\uffff\4\2\2\uffff"+
            "\2\2\1\1\10\2\1\uffff\13\2\1\uffff\2\2\26\uffff\3\2\2\uffff"+
            "\1\2\36\uffff\1\2\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\2\57\uffff\1\32\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\31\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\57\11\uffff\1\2\1\60\5\uffff\1\2\36\uffff\1\2\11\uffff\10"+
            "\2\1\uffff\10\2\1\61\3\2\1\uffff\13\2\1\uffff\2\2\26\uffff\3"+
            "\2\2\uffff\1\2\36\uffff\1\2\4\uffff\1\2\22\uffff\1\2\2\uffff"+
            "\1\2\7\uffff\1\2\2\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\120\12\uffff\1\116\44\uffff\1\2\11\uffff\1\2\2\uffff\1\2"+
            "\5\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\116\3\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff"+
            "\3\2\31\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\20\uffff\1\2\36\uffff\1\145\11\uffff\1\2\2\uffff\1\2\4"+
            "\uffff\2\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\21\uffff\1\2\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1"+
            "\2",
            "\1\177\11\uffff\1\u008e\1\116\44\uffff\1\u008e\11\uffff\1\u0084"+
            "\2\116\1\2\1\u0093\3\116\1\uffff\1\2\4\116\1\u0080\1\116\1\176"+
            "\4\116\1\2\3\116\1\u0093\1\116\1\u0080\1\116\1\176\3\116\1\2"+
            "\2\116\14\uffff\1\2\11\uffff\1\116\2\u008e\2\uffff\1\116\3\uffff"+
            "\1\2\6\uffff\3\2\21\uffff\1\u0093\7\uffff\1\2\6\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\2\uffff\1\u0093\2\uffff\1\u0093\7\uffff"+
            "\1\u0092\1\uffff\1\2\1\u0093\4\uffff\1\u0094",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA109_eot = DFA.unpackEncodedString(DFA109_eotS);
    static final short[] DFA109_eof = DFA.unpackEncodedString(DFA109_eofS);
    static final char[] DFA109_min = DFA.unpackEncodedStringToUnsignedChars(DFA109_minS);
    static final char[] DFA109_max = DFA.unpackEncodedStringToUnsignedChars(DFA109_maxS);
    static final short[] DFA109_accept = DFA.unpackEncodedString(DFA109_acceptS);
    static final short[] DFA109_special = DFA.unpackEncodedString(DFA109_specialS);
    static final short[][] DFA109_transition;

    static {
        int numStates = DFA109_transitionS.length;
        DFA109_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA109_transition[i] = DFA.unpackEncodedString(DFA109_transitionS[i]);
        }
    }

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = DFA109_eot;
            this.eof = DFA109_eof;
            this.min = DFA109_min;
            this.max = DFA109_max;
            this.accept = DFA109_accept;
            this.special = DFA109_special;
            this.transition = DFA109_transition;
        }
        public String getDescription() {
            return "733:29: ( generic )?";
        }
    }
    static final String DFA113_eotS =
        "\u01c3\uffff";
    static final String DFA113_eofS =
        "\43\uffff\1\4\23\uffff\1\4\127\uffff\1\4\u0133\uffff";
    static final String DFA113_minS =
        "\1\6\1\uffff\2\6\24\uffff\1\6\7\uffff\4\6\20\uffff\4\6\20\uffff"+
        "\1\6\25\uffff\1\6\25\uffff\1\6\24\uffff\3\6\3\uffff\2\6\u0132\uffff";
    static final String DFA113_maxS =
        "\1\u00c9\1\uffff\1\u00c9\1\u00a3\24\uffff\1\u00a3\7\uffff\4\u00c9"+
        "\20\uffff\4\u00c9\20\uffff\1\u00a3\25\uffff\1\u00a3\25\uffff\1\u00c9"+
        "\24\uffff\3\u00c9\3\uffff\1\u00c9\1\u00c4\u0132\uffff";
    static final String DFA113_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\u008c\uffff\3\1\36\uffff\1\1\25\uffff\1"+
        "\1\25\uffff\1\1\24\uffff\3\1\3\uffff\5\1\36\uffff\3\1\20\uffff\3"+
        "\1\51\uffff\24\1\1\uffff\23\1\2\uffff\22\1\3\uffff\4\1\45\uffff";
    static final String DFA113_specialS =
        "\u01c3\uffff}>";
    static final String[] DFA113_transitionS = {
            "\1\4\14\uffff\1\1\42\uffff\1\3\11\uffff\1\4\2\uffff\1\4\5\uffff"+
            "\1\4\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff"+
            "\1\4\3\uffff\1\4\16\uffff\1\4\22\uffff\1\4\6\uffff\3\4\21\uffff"+
            "\1\1\7\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\2",
            "",
            "\1\1\57\uffff\1\30\22\uffff\1\1\2\uffff\1\1\55\uffff\1\1\43"+
            "\uffff\1\1\27\uffff\1\4\2\uffff\1\4\7\uffff\1\4\2\uffff\1\4"+
            "\4\uffff\1\1",
            "\1\42\20\uffff\1\4\50\uffff\10\4\1\uffff\1\40\2\4\1\41\10\4"+
            "\1\uffff\13\4\1\uffff\2\4\26\uffff\1\43\50\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\66\20\uffff\1\4\50\uffff\10\4\1\uffff\1\64\2\4\1\65\10\4"+
            "\1\uffff\13\4\1\uffff\2\4\26\uffff\1\67\50\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\4\57\uffff\1\4\11\uffff\1\4\2\uffff\1\4\5\uffff\1\4\4\uffff"+
            "\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4\3\uffff"+
            "\1\4\16\uffff\1\4\13\uffff\1\110\6\uffff\1\4\6\uffff\3\4\31"+
            "\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2"+
            "\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\4\57\uffff\1\136\11\uffff\1\4\2\uffff\1\4\5\uffff\1\4\4"+
            "\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4\3"+
            "\uffff\1\4\16\uffff\1\4\22\uffff\1\4\6\uffff\3\4\31\uffff\1"+
            "\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1"+
            "\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\164\57\uffff\1\4\11\uffff\1\4\2\uffff\1\4\5\uffff\1\4\4"+
            "\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4\3"+
            "\uffff\1\4\16\uffff\1\4\11\uffff\1\1\10\uffff\1\4\6\uffff\3"+
            "\4\31\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\u0089\11\uffff\2\4\5\uffff\1\4\36\uffff\1\u0091\11\uffff"+
            "\1\u008a\2\4\1\u0093\4\4\1\uffff\1\u0093\4\4\1\u008b\1\4\1\u008f"+
            "\4\4\1\1\5\4\1\u008b\1\4\1\u008f\3\4\1\1\2\4\14\uffff\1\u0093"+
            "\11\uffff\3\4\2\uffff\1\4\3\uffff\1\1\6\uffff\3\u0093\21\uffff"+
            "\1\4\4\uffff\1\4\2\uffff\1\u0093\6\uffff\1\u0093\1\uffff\1\u0093"+
            "\3\uffff\1\u0093\2\uffff\1\u0093\2\uffff\1\u0093\7\uffff\1\u0092"+
            "\1\uffff\2\u0093\4\uffff\1\u0090",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\4\57\uffff\1\4\11\uffff\1\4\2\uffff\1\4\5\uffff\1\4\4\uffff"+
            "\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4\3\uffff"+
            "\1\4\16\uffff\1\4\13\uffff\1\u00b2\6\uffff\1\4\6\uffff\3\4\31"+
            "\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2"+
            "\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\4\57\uffff\1\u00c8\11\uffff\1\4\2\uffff\1\4\5\uffff\1\4"+
            "\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4"+
            "\3\uffff\1\4\16\uffff\1\4\22\uffff\1\4\6\uffff\3\4\31\uffff"+
            "\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff"+
            "\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\u00de\57\uffff\1\4\11\uffff\1\4\2\uffff\1\4\5\uffff\1\4"+
            "\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4"+
            "\3\uffff\1\4\16\uffff\1\4\11\uffff\1\u0093\10\uffff\1\4\6\uffff"+
            "\3\4\31\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\u00f3\11\uffff\2\4\5\uffff\1\4\36\uffff\1\u00fb\11\uffff"+
            "\1\u00f4\2\4\1\u00fd\4\4\1\uffff\1\u00fd\4\4\1\u00f5\1\4\1\u00f9"+
            "\4\4\1\u0093\5\4\1\u00f5\1\4\1\u00f9\3\4\1\u0093\2\4\14\uffff"+
            "\1\u00fd\11\uffff\3\4\2\uffff\1\4\3\uffff\1\u0093\6\uffff\3"+
            "\u00fd\21\uffff\1\4\4\uffff\1\4\2\uffff\1\u00fd\6\uffff\1\u00fd"+
            "\1\uffff\1\u00fd\3\uffff\1\u00fd\2\uffff\1\u00fd\2\uffff\1\u00fd"+
            "\7\uffff\1\u00fc\1\uffff\2\u00fd\4\uffff\1\u00fa",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u011d\20\uffff\1\4\50\uffff\3\4\1\uffff\4\4\1\uffff\3\4"+
            "\1\u011c\10\4\1\uffff\13\4\1\uffff\2\4\26\uffff\1\u011e\50\uffff"+
            "\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u012f\12\uffff\1\u0130\5\uffff\1\4\50\uffff\10\4\1\uffff"+
            "\10\4\1\u0131\3\4\1\uffff\13\4\1\uffff\2\4\26\uffff\1\4\50\uffff"+
            "\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00fd\57\uffff\1\4\11\uffff\1\4\2\uffff\1\4\5\uffff\1\4"+
            "\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4"+
            "\3\uffff\1\4\16\uffff\1\4\11\uffff\1\u00fd\10\uffff\1\4\6\uffff"+
            "\3\4\31\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\4\57\uffff\1\u0163\11\uffff\1\u015c\2\uffff\1\u015b\5\uffff"+
            "\1\u0166\4\uffff\1\u015d\1\uffff\1\u0161\4\uffff\1\u015e\5\uffff"+
            "\1\u015d\1\uffff\1\u0161\3\uffff\1\u015f\16\uffff\1\u0167\22"+
            "\uffff\1\u0160\6\uffff\1\u0168\1\u0169\1\u016a\31\uffff\1\u016d"+
            "\6\uffff\1\u016e\1\uffff\1\u016c\3\uffff\1\u016b\2\uffff\1\u0165"+
            "\2\uffff\1\u0165\7\uffff\1\u0164\1\uffff\1\u016b\1\u0165\4\uffff"+
            "\1\u0162",
            "\1\4\57\uffff\1\u0176\11\uffff\1\4\2\uffff\1\u017a\5\uffff"+
            "\1\u0179\4\uffff\1\u0170\1\uffff\1\u0174\4\uffff\1\u0171\5\uffff"+
            "\1\u0170\1\uffff\1\u0174\3\uffff\1\u0172\16\uffff\1\u017b\22"+
            "\uffff\1\u0173\6\uffff\1\u017c\1\u017d\1\u017e\31\uffff\1\u0181"+
            "\6\uffff\1\u0182\1\uffff\1\u0180\3\uffff\1\u017f\2\uffff\1\u0178"+
            "\2\uffff\1\u0178\7\uffff\1\u0177\1\uffff\1\u017f\1\u0178\4\uffff"+
            "\1\u0175",
            "\1\4\57\uffff\1\u018a\11\uffff\1\4\2\uffff\1\u018e\5\uffff"+
            "\1\u018d\4\uffff\1\4\1\uffff\1\u0188\4\uffff\1\u0185\5\uffff"+
            "\1\4\1\uffff\1\u0188\3\uffff\1\u0186\16\uffff\1\u018f\22\uffff"+
            "\1\u0187\6\uffff\1\u0190\1\u0191\1\u0192\31\uffff\1\u0195\6"+
            "\uffff\1\u0196\1\uffff\1\u0194\3\uffff\1\u0193\2\uffff\1\u018c"+
            "\2\uffff\1\u018c\7\uffff\1\u018b\1\uffff\1\u0193\1\u018c\4\uffff"+
            "\1\u0189",
            "",
            "",
            "",
            "\1\4\11\uffff\2\4\44\uffff\1\u019b\11\uffff\3\4\1\u019d\4\4"+
            "\1\uffff\1\u019d\13\4\1\uffff\13\4\1\uffff\2\4\14\uffff\1\u019d"+
            "\11\uffff\3\4\2\uffff\1\4\12\uffff\3\u019d\21\uffff\1\4\7\uffff"+
            "\1\u019d\6\uffff\1\u019d\1\uffff\1\u019d\3\uffff\1\u019d\2\uffff"+
            "\1\u019d\2\uffff\1\u019d\7\uffff\1\u019c\1\uffff\2\u019d\4\uffff"+
            "\1\u019a",
            "\1\4\57\uffff\1\u019d\14\uffff\1\4\5\uffff\1\4\154\uffff\1"+
            "\u019d\2\uffff\1\u019d\7\uffff\1\u019d\2\uffff\1\u019d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "740:1: l_br_end : ( type_convertion_internal_wrapper R_BR classical_expr_wrp | classical_expr_wrp R_BR ( id_part_end )? );";
        }
    }
    static final String DFA157_eotS =
        "\110\uffff";
    static final String DFA157_eofS =
        "\110\uffff";
    static final String DFA157_minS =
        "\1\20\1\6\24\uffff\1\6\2\uffff\2\20\55\uffff";
    static final String DFA157_maxS =
        "\2\u00c9\24\uffff\1\u00c9\2\uffff\2\u00c9\55\uffff";
    static final String DFA157_acceptS =
        "\2\uffff\1\1\3\uffff\1\2\37\uffff\1\1\10\uffff\1\1\14\uffff\1\1"+
        "\13\uffff";
    static final String DFA157_specialS =
        "\110\uffff}>";
    static final String[] DFA157_transitionS = {
            "\1\2\1\6\10\uffff\1\6\33\uffff\1\1\14\uffff\1\2\4\uffff\1\6"+
            "\5\uffff\1\6\14\uffff\1\6\43\uffff\1\6\36\uffff\1\6\10\uffff"+
            "\1\6\4\uffff\1\6\11\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\6",
            "\1\6\11\uffff\2\2\10\uffff\1\2\33\uffff\1\26\14\uffff\1\2\4"+
            "\uffff\1\2\1\6\2\uffff\1\6\1\uffff\1\2\14\uffff\1\2\43\uffff"+
            "\1\2\36\uffff\1\2\10\uffff\1\2\4\uffff\1\2\11\uffff\1\32\2\uffff"+
            "\1\32\7\uffff\1\31\2\uffff\1\32\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\11\uffff\2\2\10\uffff\1\46\33\uffff\1\2\14\uffff\1\46"+
            "\4\uffff\1\46\1\2\2\uffff\1\2\1\uffff\1\46\14\uffff\1\46\43"+
            "\uffff\1\46\36\uffff\1\46\10\uffff\1\46\4\uffff\1\46\11\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff\1\2\4\uffff\1\46",
            "",
            "",
            "\1\57\1\46\10\uffff\1\57\33\uffff\1\57\14\uffff\1\57\4\uffff"+
            "\1\57\5\uffff\1\57\14\uffff\1\57\43\uffff\1\57\36\uffff\1\57"+
            "\10\uffff\1\57\4\uffff\1\57\11\uffff\1\57\2\uffff\1\57\7\uffff"+
            "\1\57\2\uffff\1\57\4\uffff\1\57",
            "\1\74\1\57\10\uffff\1\74\33\uffff\1\74\14\uffff\1\74\4\uffff"+
            "\1\74\5\uffff\1\74\14\uffff\1\74\43\uffff\1\74\36\uffff\1\74"+
            "\10\uffff\1\74\4\uffff\1\74\11\uffff\1\74\2\uffff\1\74\7\uffff"+
            "\1\74\2\uffff\1\74\4\uffff\1\74",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "948:49: ( method_params )?";
        }
    }
    static final String DFA184_eotS =
        "\110\uffff";
    static final String DFA184_eofS =
        "\110\uffff";
    static final String DFA184_minS =
        "\1\20\7\uffff\1\6\11\uffff\1\6\2\20\63\uffff";
    static final String DFA184_maxS =
        "\1\u00c9\7\uffff\1\u00c9\11\uffff\3\u00c9\63\uffff";
    static final String DFA184_acceptS =
        "\1\uffff\1\2\10\uffff\1\1\24\uffff\1\1\16\uffff\1\1\14\uffff\1\1"+
        "\14\uffff";
    static final String DFA184_specialS =
        "\110\uffff}>";
    static final String[] DFA184_transitionS = {
            "\1\12\1\1\10\uffff\1\1\33\uffff\1\10\14\uffff\1\12\4\uffff\1"+
            "\1\5\uffff\1\1\14\uffff\1\1\43\uffff\1\1\36\uffff\1\1\10\uffff"+
            "\1\1\4\uffff\1\1\11\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff"+
            "\1\12\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\11\uffff\2\12\10\uffff\1\12\33\uffff\1\22\14\uffff\1\12"+
            "\4\uffff\1\12\1\1\2\uffff\1\1\1\uffff\1\12\14\uffff\1\12\43"+
            "\uffff\1\12\36\uffff\1\12\10\uffff\1\12\4\uffff\1\12\11\uffff"+
            "\1\24\2\uffff\1\24\7\uffff\1\23\2\uffff\1\24\4\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\37\11\uffff\1\12\1\37\10\uffff\1\37\33\uffff\1\37\14\uffff"+
            "\1\37\4\uffff\2\37\2\uffff\1\37\1\uffff\1\37\14\uffff\1\37\43"+
            "\uffff\1\37\36\uffff\1\37\10\uffff\1\37\4\uffff\1\37\11\uffff"+
            "\1\37\2\uffff\1\37\7\uffff\1\37\2\uffff\1\37\4\uffff\1\37",
            "\2\56\10\uffff\1\56\33\uffff\1\56\14\uffff\1\56\4\uffff\1\56"+
            "\5\uffff\1\56\14\uffff\1\56\43\uffff\1\56\36\uffff\1\56\10\uffff"+
            "\1\56\4\uffff\1\56\11\uffff\1\56\2\uffff\1\56\7\uffff\1\56\2"+
            "\uffff\1\56\4\uffff\1\56",
            "\2\73\10\uffff\1\73\33\uffff\1\73\14\uffff\1\73\4\uffff\1\73"+
            "\5\uffff\1\73\14\uffff\1\73\43\uffff\1\73\36\uffff\1\73\10\uffff"+
            "\1\73\4\uffff\1\73\11\uffff\1\73\2\uffff\1\73\7\uffff\1\73\2"+
            "\uffff\1\73\4\uffff\1\73",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_eotS);
    static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_eofS);
    static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_minS);
    static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_maxS);
    static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_acceptS);
    static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_specialS);
    static final short[][] DFA184_transition;

    static {
        int numStates = DFA184_transitionS.length;
        DFA184_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA184_transition[i] = DFA.unpackEncodedString(DFA184_transitionS[i]);
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1003:4: ( method_param )+";
        }
    }
 

    public static final BitSet FOLLOW_code_internal_in_code435 = new BitSet(new long[]{0x0040000004080002L,0x0000000000000000L,0x2000060040004040L,0x0000000000000280L});
    public static final BitSet FOLLOW_operator_wrapper_in_code_internal449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_in_operator_wrapper466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_wrapper_in_operator484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_operator490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_wrapper_in_operator495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_operator502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_operator508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_operator513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_in_operator518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_extern555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_extern558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_extern561 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xF7FFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_set_in_extern563 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_extern568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_implementation599 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_implementation602 = new BitSet(new long[]{0x0040000000010000L,0x0000000008004008L,0x2001008040004040L,0x0000000000000280L});
    public static final BitSet FOLLOW_category_in_implementation605 = new BitSet(new long[]{0x0040000000010000L,0x0000000008004000L,0x2001008040004040L,0x0000000000000280L});
    public static final BitSet FOLLOW_super_class_in_implementation608 = new BitSet(new long[]{0x0040000000000000L,0x0000000008004000L,0x2001008040004040L,0x0000000000000280L});
    public static final BitSet FOLLOW_implementation_body_in_implementation613 = new BitSet(new long[]{0x0040000000000000L,0x0000000008004000L,0x2001008040004040L,0x0000000000000280L});
    public static final BitSet FOLLOW_167_in_implementation618 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_category633 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_category636 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_category639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_in_implementation_body663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_implementation_body669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_wrapper_in_implementation_body681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_implementation_body687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_synthesize716 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize719 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000040L});
    public static final BitSet FOLLOW_L_EQ_in_synthesize722 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize724 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synthesize728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_typedef740 = new BitSet(new long[]{0x0040000004000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_typedef744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_typedef748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_rename_wrapper_in_typedef752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_rename_in_type_rename_wrapper766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_rename785 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_type_rename787 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_type_rename789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_in_static_section_wrapper801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_section823 = new BitSet(new long[]{0x0040000004080000L,0x8000000000000100L,0x0000000040004000L,0x0000000000000204L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_section825 = new BitSet(new long[]{0x0040000004000000L,0x8000000000000100L,0x0000000040004000L,0x0000000000000204L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_static_section828 = new BitSet(new long[]{0x0040000004000000L,0x8000000000000100L,0x0000000040000000L,0x0000000000000204L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_static_section831 = new BitSet(new long[]{0x0040000000000000L,0x8000000000000100L,0x0000000040000000L,0x0000000000000204L});
    public static final BitSet FOLLOW_static_section2_in_static_section834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_section_in_static_section2843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper2_in_static_section2850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section3_in_static_section2857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_inline_section869 = new BitSet(new long[]{0x0040000004000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_inline_section871 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_field_type_in_inline_section874 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_inline_section876 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000108L});
    public static final BitSet FOLLOW_method_params2_in_inline_section879 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_inline_section883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_inline_section887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_static_section3898 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_static_section3900 = new BitSet(new long[]{0x0000000000000000L,0x8000000914888A6CL});
    public static final BitSet FOLLOW_indexed_in_static_section3902 = new BitSet(new long[]{0x0000000000000000L,0x8000000914888A6CL});
    public static final BitSet FOLLOW_static_end_in_static_section3906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper3_in_static_end918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_in_static_end924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_internal_in_field_end935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_field_end_internal953 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_end_internal956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method3_in_implementation_method_wrapper3968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body3_in_implementation_method3986 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000100L,0x0010000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method3989 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L,0x0010000000000000L});
    public static final BitSet FOLLOW_attribute_in_implementation_method3994 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method3999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_attribute1012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_attribute1015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_attribute1018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_attribute1021 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute1024 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute1027 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_attribute1030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method21042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method21047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_in_field_type_started_wrapper1059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_field_type_started1078 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_field_type_started1080 = new BitSet(new long[]{0x0000000000000000L,0x800000091488886CL});
    public static final BitSet FOLLOW_classic_method_declaration_wrapper_in_field_type_started1083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_wrapper_in_field_type_started1087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_classic_method_declaration1136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_classic_method_declaration1141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_in_implementation_method_wrapper1154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method2_in_implementation_method_wrapper21171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_implementation_method1188 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method1190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method1195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_block_wrapper1208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block1230 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_block_internal_full_in_block1236 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_block_in_block1240 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_R_FBR_in_block1248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block_case1263 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFE6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_block_internal_full_in_block_case1269 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFE6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_block_in_block_case1273 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xFE6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_default_stmt_in_block_case1282 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_block_case1287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_full1299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_in_block_internal1310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_wrapper_in_block_internal1320 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expression_in_block_internal1332 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_wrapper_in_block_internal1339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_wrapper_in_block_internal1344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_wrapper_in_block_internal1354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_operators_in_block_internal1374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_variable_in_block_internal1379 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_variable_in_block_internal1386 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_started_in_block_internal1393 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_type_started_in_block_internal1400 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_wrapper_in_block_internal1413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_block_internal1418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_operator_in_goto_wrapper1430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_goto_operator1447 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_goto_operator1449 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_goto_operator1451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_in_variable_init_wrapper1462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_variable_init1480 = new BitSet(new long[]{0x0040000000010000L,0x8000000000000000L,0x0240000040000000L,0x0000000000000212L});
    public static final BitSet FOLLOW_full_expr2_in_variable_init1484 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_variable_init1487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_variable_init1492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_types_in_known_type_started1504 = new BitSet(new long[]{0x0040000000000040L,0x0000000000000000L,0x0240000040000000L,0x0000000000000212L});
    public static final BitSet FOLLOW_ASTERISK_in_known_type_started1506 = new BitSet(new long[]{0x0040000000000040L,0x0000000000000000L,0x0240000040000000L,0x0000000000000212L});
    public static final BitSet FOLLOW_full_expr2_in_known_type_started1509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_in_typeof_started1521 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_full_expr_wrapper_in_typeof_started1523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_variable1536 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_struct_variable1538 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_full_expr_wrapper_in_struct_variable1540 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_struct_variable1543 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_full_expr_wrapper_in_struct_variable1545 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_enum_variable1556 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_enum_variable1558 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_full_expr_wrapper_in_enum_variable1560 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_enum_variable1563 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_full_expr_wrapper_in_enum_variable1565 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_const_expression1578 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_internal_in_const_expression1580 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_full_expr_wrapper_in_const_expression1582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper1591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_throw_stmt1608 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_throw_stmt1611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_try_stmt1622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_in_try_stmt1625 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000012000000000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt1628 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000012000000000L});
    public static final BitSet FOLLOW_168_in_try_stmt1632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_in_try_stmt1635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_catch_stmt1649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_catch_stmt1652 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1657 = new BitSet(new long[]{0x0040000000000040L});
    public static final BitSet FOLLOW_ASTERISK_in_catch_stmt1660 = new BitSet(new long[]{0x0040000000000040L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1663 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_164_in_catch_stmt1668 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_catch_stmt1672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_in_catch_stmt1675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_switch_stmt_wrapper1688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_switch_stmt1705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_switch_stmt1708 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_switch_expr_in_switch_stmt1711 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_switch_stmt1713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_switch_body_wrapper_in_switch_stmt1719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_switch_body_wrapper1732 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214209L,0xFEEEA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_switch_body_in_switch_body_wrapper1734 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_switch_body_wrapper1736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_switch_body1755 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214209L,0xFEEEA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_switch_internal_in_switch_body1760 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0480000000000000L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_switch_expr1773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_wrapper_in_switch_internal1790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_wrapper_in_switch_internal1796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_case_stmt_wrapper1805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_case_stmt1822 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000000L,0x0008000000001C00L,0x0000000000000008L});
    public static final BitSet FOLLOW_case_expr_wrapper_in_case_stmt1825 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_case_stmt1828 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_case_body_wrapper_in_case_stmt1833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_body_in_case_body_wrapper1847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_case_body1866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_case_body1873 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214209L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_case_expr_in_case_expr_wrapper1889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_case_expr1911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_case_expr1918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_case_in_block_break1929 = new BitSet(new long[]{0x0000000000000202L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_single_operators_in_block_break1931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_default_stmt_wrapper1943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_default_stmt1960 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_default_stmt1963 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_default_body_wrapper_in_default_stmt1968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_body_in_default_body_wrapper1981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_default_body2001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_default_body2007 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214209L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_SINGLE_OP_in_single_operators2022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_wrapper_in_single_operators2029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_break_wrapper2041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_WORD_in_break_stmt2059 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_break_stmt2062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_do_stmt2072 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_if_stmt_block_in_do_stmt2075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_do_stmt2078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_do_stmt2081 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expression_in_do_stmt2084 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_do_stmt2086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper2095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_while_stmt2114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_while_stmt2117 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_while_expr_in_while_stmt2120 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_while_stmt2122 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_while_stmt2125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_while_expr2138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper2157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_for_stmt2174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_for_stmt2177 = new BitSet(new long[]{0x0040000000000040L,0x8001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_for_stmt_expr_wrapper_in_for_stmt2180 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_for_stmt2182 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_if_stmt_block_in_for_stmt2185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_expr_in_for_stmt_expr_wrapper2197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_for_stmt_expr2216 = new BitSet(new long[]{0x0040000000000000L,0x8000000000000000L,0x0240000040000000L,0x0000000000000212L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr2_in_for_stmt_expr2224 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_for_stmt_int12258 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000208L,0x0248A04000001C00L,0x000000000000021AL});
    public static final BitSet FOLLOW_object_wrapped2_in_for_stmt_int12260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22280 = new BitSet(new long[]{0x0040000000000040L,0x8001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22282 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22285 = new BitSet(new long[]{0x0040000000000042L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_return_stmt2300 = new BitSet(new long[]{0x0040000000000040L,0x8001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expression_in_return_stmt2302 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_return_stmt2305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_if_stmt_wrapper2326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_if_stmt2342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_if_stmt2345 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_if_expr_in_if_stmt2348 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_if_stmt2350 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_if_stmt2353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_if_expr2366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_else_stmt2385 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xFA6EA04040005C4CL,0x000000000000067BL});
    public static final BitSet FOLLOW_if_stmt_block_in_else_stmt2388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_if_stmt_block2414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_if_stmt_block2420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_in_static_start_wrapper2432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_start2450 = new BitSet(new long[]{0x0040000000080000L,0x0000000000000000L,0x0240000040000000L,0x0000000000000212L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_start2452 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000040000000L,0x0000000000000212L});
    public static final BitSet FOLLOW_static_type_wrapper_in_static_start2455 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000040000000L,0x0000000000000212L});
    public static final BitSet FOLLOW_full_expr2_in_static_start2458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_type_in_static_type_wrapper2470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_static_type2489 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASTERISK_in_static_type2491 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_id_part_end_internal_in_id_part_end2503 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_DOT_in_id_part_end_internal2518 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_163_in_id_part_end_internal2522 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_id_part_in_id_part_end_internal2525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_internal_in_id_part2563 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000208L});
    public static final BitSet FOLLOW_function_brackets_wrapper_in_id_part2565 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_index_wrapper_in_id_part2568 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_id_part_in_object_name2581 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_name2583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_method_call_wrapper2597 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000208L,0x0240000000000400L,0x0000000000000012L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper2599 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_method_call_wrapper2601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper22624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_in_method_call22643 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_method_name_in_method_call22645 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_method_call_message_list_wrapper_in_method_call22649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_internal_in_object_wrapper2660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_in_object_wrapper_internal2679 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000200L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_object_wrapper_internal2702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_message32714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_type_convertion2733 = new BitSet(new long[]{0x0040000000080000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_convertion_internal_wrapper_in_type_convertion2735 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_type_convertion2737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_internal_in_type_convertion_internal_wrapper2746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_convertion_internal2764 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_type_convertion_internal2767 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_internal_in_type_convertion_internal2770 = new BitSet(new long[]{0x0000000000000042L,0x0000000000001000L});
    public static final BitSet FOLLOW_generic_in_type_convertion_internal2772 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASTERISK_in_type_convertion_internal2775 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ID_in_method_name2786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_method_name2799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2833 = new BitSet(new long[]{0x0040000000010002L});
    public static final BitSet FOLLOW_method_call_message_wrapper_in_method_call_message_list2835 = new BitSet(new long[]{0x0040000000010002L});
    public static final BitSet FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_method_call_message_first2863 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_message_wrapper_in_method_call_message_first2866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_in_method_call_message_wrapper2876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_in_method_call_message2895 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_incomplete_prefix_in_method_call_message2899 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_message_wrapper_in_method_call_message2902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_message_in_message_wrapper2912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_message2930 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_message2933 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expression_in_message2935 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expression2951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_in_expression2956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_in_full_expr_wrapper2967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr2984 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr2987 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr2989 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr23000 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr23003 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000040000000L,0x0000000000000212L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr23005 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_expr_assign_in_expr_assign_wrapper3016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_wrapper_in_expr_assign3035 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214309L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_struct_init_in_expr_assign3038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_assign3042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_wrapper_in_expr_assign3046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer2_in_expr_assign3051 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_method_call_wrapper_in_expr_assign3053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_in_array_init_wrapper3065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array_init3084 = new BitSet(new long[]{0x0040000000000040L,0x0801000228214309L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init3087 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array_init3090 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214309L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init3092 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array_init3098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_wrapper_in_classical_expr_wrp33110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_classical_expr_wrp33116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_in_classical_expr_wrp3129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_classical_expr3146 = new BitSet(new long[]{0x0000000000000002L,0x0000000954888864L});
    public static final BitSet FOLLOW_expr_question_wrapper_in_classical_expr3149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr3153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr2_in_classical_expr_wrp23165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_classical_expr23183 = new BitSet(new long[]{0x0000000000000002L,0x0000000914888864L});
    public static final BitSet FOLLOW_func_pointer1_in_classical_expr23187 = new BitSet(new long[]{0x0000000000000002L,0x0000000914888864L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr23190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_question_in_expr_question_wrapper3200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_QUESTION_in_expr_question3217 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question3219 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_expr_question3221 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question3223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_in_assign_wrapper3232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_in_simple_expr_wrapper3306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_or_in_simple_expr3324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_and_wrapper_in_expr_or_or3341 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_L_OR_OR_in_expr_or_or3344 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_or_or3346 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_expr_and_and_in_expr_and_and_wrapper3357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_wrapper_in_expr_and_and3374 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_L_AND_AND_in_expr_and_and3377 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_and_and3379 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_in_expr_or_wrapper3390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_xor_wrapper_in_expr_or3408 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_L_OR_in_expr_or3411 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_or3413 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_expr_xor_in_expr_xor_wrapper3424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_wrapper_in_expr_xor3441 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_L_XOR_in_expr_xor3444 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_xor3446 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_expr_and_in_expr_and_wrapper3458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eq_wrapper_in_expr_and3476 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_AND_in_expr_and3479 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_and3481 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_eq_in_expr_eq_wrapper3493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_cond_wrapper_in_expr_eq3511 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100080L});
    public static final BitSet FOLLOW_set_in_expr_eq3514 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_eq3522 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100080L});
    public static final BitSet FOLLOW_expr_cond_in_expr_cond_wrapper3533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mov_wrapper_in_expr_cond3550 = new BitSet(new long[]{0x0000000000000002L,0x0000000000063000L});
    public static final BitSet FOLLOW_set_in_expr_cond3553 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_cond3569 = new BitSet(new long[]{0x0000000000000002L,0x0000000000063000L});
    public static final BitSet FOLLOW_expr_mov_in_expr_mov_wrapper3580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_add_wrapper_in_expr_mov3598 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000400L});
    public static final BitSet FOLLOW_set_in_expr_mov3601 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_mov3609 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000400L});
    public static final BitSet FOLLOW_expr_add_in_expr_add_wrapper3621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mult_wrapper_in_expr_add3638 = new BitSet(new long[]{0x0000000000000002L,0x0000000008004000L});
    public static final BitSet FOLLOW_set_in_expr_add3641 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_add3649 = new BitSet(new long[]{0x0000000000000002L,0x0000000008004000L});
    public static final BitSet FOLLOW_expr_mult_in_expr_mult_wrapper3660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_unname_wrapper_in_expr_mult3677 = new BitSet(new long[]{0x0000000000000042L,0x0000000002000010L});
    public static final BitSet FOLLOW_set_in_expr_mult3680 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_unname_wrapper_in_expr_mult3692 = new BitSet(new long[]{0x0000000000000042L,0x0000000002000010L});
    public static final BitSet FOLLOW_expr_unname_in_expr_unname_wrapper3704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_expr_unname3725 = new BitSet(new long[]{0x0040000000000000L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_type_convertion_in_expr_unname3727 = new BitSet(new long[]{0x0040000000000000L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_addr_in_expr_unname3732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_AND_in_expr_addr3742 = new BitSet(new long[]{0x0040000000000000L,0x0001000228214208L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_sign_in_expr_addr3745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_wrapper_in_expr_sign3764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_in_expr_not_wrapper3774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_NOT_in_expr_not3793 = new BitSet(new long[]{0x0040000000000000L,0x0001000220010208L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_not2_in_expr_not3796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_TILDA_in_expr_not23806 = new BitSet(new long[]{0x0040000000000000L,0x0001000020010208L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_size_of_in_expr_not23809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_expr_size_of3819 = new BitSet(new long[]{0x0040000000000000L,0x0001000020010208L,0x0248A04000001C00L,0x000000000000021AL});
    public static final BitSet FOLLOW_expr_xcrement_in_expr_size_of3822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped1_in_expr_xcrement3841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped2_in_object_wrapped13851 = new BitSet(new long[]{0x0000000000000002L,0x0000000020010000L});
    public static final BitSet FOLLOW_201_in_object_wrapped23872 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_object_name_in_object_wrapped23875 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_generic_in_object_wrapped23877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapped23883 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_object_wrapped23891 = new BitSet(new long[]{0x0040000000080040L,0x0001000228214209L,0x0248A04040001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_l_br_end_in_object_wrapped23893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_wrapper_in_object_wrapped23899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_started_in_object_wrapped23904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_internal_wrapper_in_l_br_end3913 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_l_br_end3915 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_l_br_end3917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_l_br_end3922 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_l_br_end3924 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_id_part_end_in_l_br_end3926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_brackets_in_function_brackets_wrapper3940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_function_brackets3959 = new BitSet(new long[]{0x0040000000000040L,0x0401000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets3962 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_function_brackets3965 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets3967 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_function_brackets3973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_in_index_wrapper3983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index4000 = new BitSet(new long[]{0x0040000000000040L,0x1001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_index_number_wrapper_in_index4002 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index4005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_number_wrapper4014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_struct_init4031 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_init4034 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_struct_init4037 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_struct_init4040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init4043 = new BitSet(new long[]{0x0040000000800040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init4049 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init4052 = new BitSet(new long[]{0x0040000000800040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init4055 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init4061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init24075 = new BitSet(new long[]{0x0040000000800040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init24081 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init24084 = new BitSet(new long[]{0x0040000000800040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init24087 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init24093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_var_in_struct_init_line4106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_expression_in_struct_init_line4111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_expression4124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_method4135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_struct_init_var4147 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_id_part_in_struct_init_var4149 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000040L});
    public static final BitSet FOLLOW_L_EQ_in_struct_init_var4154 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214309L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_in_q_brackets_in_struct_init_var4158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_struct_init_var4162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_wrapper_in_a_started4174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_wrapper_in_a_started4179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_wrapper_in_a_started4184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_typeof4194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_typeof4197 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_typeof4200 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_typeof4203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_in_a_selector_wrapper4214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_a_selector4231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_a_selector4233 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_selector4235 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_selector4237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_in_a_protocol_wrapper4247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_a_protocol4265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_a_protocol4267 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_protocol4269 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_protocol4271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_in_a_encode_wrapper4281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_a_encode4297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_a_encode4299 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_encode4301 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_encode4303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_value_in_a_selector_value_wrapper4314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sel_id_in_a_selector_value4333 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4337 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_sel_id_in_a_selector_value4341 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4344 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_ID_in_sel_id4357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_sel_id4362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_const_expr_wrapper4374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_const_expr4393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_const_expr4397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL2_in_const_expr4401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_const_expr4405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_const_expr4409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_string_literal34419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_brackets4429 = new BitSet(new long[]{0x0040000000000040L,0x0401000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expression_in_method_brackets4433 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_brackets4437 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_brackets4440 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_brackets4446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14456 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000008L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer14462 = new BitSet(new long[]{0x0040000000000040L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14464 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14467 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer14470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer14473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24486 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer24489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24491 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer24494 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer24500 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer_params4516 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4519 = new BitSet(new long[]{0x0000000000020040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4522 = new BitSet(new long[]{0x0000000000020040L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_func_pointer_params4526 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4529 = new BitSet(new long[]{0x0000000000020040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4532 = new BitSet(new long[]{0x0000000000020040L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer_params4537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_start4548 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_brackets_in_method_start4550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_in_q_brackets4561 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214309L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_q_brackets_source_in_in_q_brackets4564 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_in_q_brackets4566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_source_in_q_brackets_source4578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_br_source_in_q_brackets_source4583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4596 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4603 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_q_source4619 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_source4623 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_expression_in_q_source4626 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_ID_in_simple_method_call4643 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_brackets_in_simple_method_call4645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index_brackets4661 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0x0248A04000001C08L,0x000000000000021AL});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_brackets4664 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index_brackets4666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper4680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_interface_declaration4698 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_interface_declaration4701 = new BitSet(new long[]{0x0040000004010000L,0x0000000008004108L,0x0000108040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_interface_category_in_interface_declaration4704 = new BitSet(new long[]{0x0040000004010000L,0x0000000008004100L,0x0000108040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_super_class_in_interface_declaration4708 = new BitSet(new long[]{0x0040000004000000L,0x0000000008004100L,0x0000108040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_annotated_block_in_interface_declaration4715 = new BitSet(new long[]{0x0040000004000000L,0x0000000008004100L,0x0000108040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_interface_methods_in_interface_declaration4719 = new BitSet(new long[]{0x0040000004000000L,0x0000000008004100L,0x0000108040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_interface_fields_in_interface_declaration4723 = new BitSet(new long[]{0x0040000004000000L,0x0000000008004100L,0x0000108040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_167_in_interface_declaration4732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_annotated_block4743 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L,0x0000480040000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_annotated_block_internal_in_annotated_block4748 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L,0x0000480040000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_R_FBR_in_annotated_block4753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_annotation_in_annotated_block_internal4766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_public_block_internal_in_annotated_block_internal4773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_field_declaration_in_public_block_internal4808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_declaration_in_public_block_internal4813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_simple_field_declaration4825 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_simple_field_declaration4827 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_field_declaration4830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_union_declaration4843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_union_declaration4846 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_simple_field_declaration_in_union_declaration4852 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_R_FBR_in_union_declaration4857 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_union_declaration4860 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_union_declaration4863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_super_class4877 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_super_class4880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_interface_category4900 = new BitSet(new long[]{0x0040000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_ID_in_interface_category4903 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_interface_category4907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_field_wrapper_in_interface_fields4936 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000000L,0x0000100040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_interface_field_in_interface_field_wrapper4947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_prefix_in_interface_field4966 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_interface_field_declaration_in_interface_field4969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_interface_field_declaration4980 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_interface_field_declaration4982 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_field_declaration4984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_property_prefix4995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_property_prefix4997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_property_in_property_prefix4999 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_property_prefix5002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_property_in_property_prefix5004 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_property_prefix5008 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_declaration_in_interface_methods5041 = new BitSet(new long[]{0x0000000004000002L,0x0000000008004000L});
    public static final BitSet FOLLOW_interface_method_in_interface_methods5045 = new BitSet(new long[]{0x0000000004000002L,0x0000000008004000L});
    public static final BitSet FOLLOW_method_header_in_interface_method5059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_method_header5078 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_method_header5080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_header_body5090 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000008L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_method_type_in_method_header_body5093 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_method_header_body5097 = new BitSet(new long[]{0x0040000000030002L,0x0000000000000008L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_method_params_in_method_header_body5100 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_va_args_wrapper_in_method_header_body5103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_va_args_in_va_args_wrapper5113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_va_args5130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_va_args5133 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_va_args5136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_type_in_method_header_body25147 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_method_header_body25149 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body25152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body35162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper5171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type5203 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040004000L,0x0000000000000200L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_type5206 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_type_internal_in_method_type5209 = new BitSet(new long[]{0x0000000000000040L,0x0400000000001000L});
    public static final BitSet FOLLOW_generic_in_method_type5212 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type5215 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type5218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type5232 = new BitSet(new long[]{0x0040000000080040L,0x0400000000001200L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_type5235 = new BitSet(new long[]{0x0040000000000040L,0x0400000000001200L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_known_types_in_method_type5238 = new BitSet(new long[]{0x0040000000000040L,0x0400000000001200L});
    public static final BitSet FOLLOW_ID_in_method_type5241 = new BitSet(new long[]{0x0040000000000040L,0x0400000000001200L});
    public static final BitSet FOLLOW_L_KBR_in_method_type5245 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_method_type5247 = new BitSet(new long[]{0x0000000000000040L,0x0400000000001200L});
    public static final BitSet FOLLOW_generic_in_method_type5251 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type5254 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type5257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal1_in_type_internal5282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_L_KBR_in_type_internal5285 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_type_internal5288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_LESS_in_generic5327 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_generic_internal_wrapper_in_generic5329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_MORE_in_generic5331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generic_internal_in_generic_internal_wrapper5341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_generic_internal5359 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal5361 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_COMMA_in_generic_internal5365 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_generic_internal5368 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal5371 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_L_BR_in_method_params25383 = new BitSet(new long[]{0x0040000004080000L,0x0400000000000000L,0x0000000040004000L,0x0000000000000200L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25387 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_params25390 = new BitSet(new long[]{0x0040000004080000L,0x0000000000000000L,0x0000000040004000L,0x0000000000000200L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25392 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_params25398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param2_in_method_param_wrapper25409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_param25427 = new BitSet(new long[]{0x0040000004000000L,0x0000000000000000L,0x0000000040004000L,0x0000000000000200L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_method_param25430 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040004000L,0x0000000000000200L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_param25433 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_method_param25436 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_field_type_in_method_param25439 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000200L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_method_param25441 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_index_wrapper_in_method_param25444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_indexed5454 = new BitSet(new long[]{0x0000000000000000L,0x1001000000000000L});
    public static final BitSet FOLLOW_NUMBER_in_indexed5456 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_indexed5459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params5469 = new BitSet(new long[]{0x0040000000010002L,0x0000000000000008L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_prefix_in_method_param5491 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000008L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_COLON_in_method_param5496 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000008L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_method_type_in_method_param5499 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_method_param5502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5514 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_prefix5516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_incomplete_prefix5535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5578 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000100L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_struct_declaration5584 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_typedef_struct_body_in_typedef_struct_declaration5589 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_struct_declaration5593 = new BitSet(new long[]{0x0040000000000002L,0x8000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5596 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_struct_declaration5599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_struct_field5642 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_struct_field5644 = new BitSet(new long[]{0x0000000000020000L,0x8000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_field5648 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_struct_field5651 = new BitSet(new long[]{0x0000000000020000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_field5655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_enum_declaration5691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_typedef_declaration5711 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000100L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_typedef_declaration5713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_declaration5716 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5719 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_typedef_declaration5723 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5726 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_declaration5730 = new BitSet(new long[]{0x0040000000000000L,0x8000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_typedef_declaration5733 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_declaration5736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_declaration_element5765 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_L_EQ_in_typedef_declaration_element5769 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_set_in_typedef_declaration_element5772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_typedef_declaration_element5784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_L_EQ_in_typedef_declaration_element5786 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_NUMBER_in_typedef_declaration_element5788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper5802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_wrapper_in_field_declaration5819 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_field_type_in_field_declaration5822 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_field_declaration5824 = new BitSet(new long[]{0x0000000000000000L,0x8000000914888864L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration5826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_field_declaration_end5837 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration_end5840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_in_type_start_wrapper5850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_start5867 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000040000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_field_type_in_type_start5870 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0240000000000000L,0x0000000000000012L});
    public static final BitSet FOLLOW_name_in_type_start5872 = new BitSet(new long[]{0x0000000000000000L,0x8000000914888A6CL});
    public static final BitSet FOLLOW_L_KBR_in_type_start5875 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_type_start5877 = new BitSet(new long[]{0x0000000000000000L,0x800000091488886CL});
    public static final BitSet FOLLOW_type_end_in_type_start5881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration4_in_type_end5889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration4_in_type_end5902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_field_declaration45924 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration45927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_declaration45940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_method_declaration45945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_in_field_modifier_wrapper5957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_field_modifier5975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_internal_in_field_type5987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_field_type_internal6006 = new BitSet(new long[]{0x0000000000000042L,0x0000000000001000L});
    public static final BitSet FOLLOW_generic_in_field_type_internal6008 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASTERISK_in_field_type_internal6011 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_name_internal_in_name6024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name_internal6045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_name_internal6052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_name_internal6059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string_value6070 = new BitSet(new long[]{0x0000000000000002L});

}