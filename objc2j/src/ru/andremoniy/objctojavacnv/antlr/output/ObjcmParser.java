// $ANTLR 3.4 Objcm.g 2012-10-23 20:25:20

package ru.andremoniy.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcmParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARRAY_INIT", "ASSIGN", "ASTERISK", "BLOCK", "BREAK", "BREAK_WORD", "CASE_BODY", "CASE_EXPR", "CASE_STMT", "CATEGORY", "CLASSICAL_EXPR", "CLASSICAL_EXPR_2", "COLON", "COMMA", "CONST_EXPR", "CONST_PREFIX", "DEFAULT_BODY", "DEFAULT_STMT", "DIGIT", "DOT", "ENCODE", "ENUM", "ENUM_PREFIX", "ESC", "EXPR", "EXPR_ADD", "EXPR_AND", "EXPR_AND_AND", "EXPR_ASSIGN", "EXPR_COND", "EXPR_EQ", "EXPR_FULL", "EXPR_MOV", "EXPR_MULT", "EXPR_NOT", "EXPR_OR", "EXPR_OR_OR", "EXPR_QUESTION", "EXPR_TYPE", "EXPR_XOR", "EXTERN", "FIELD", "FIELD_ACCESS", "FIELD_TYPE_STARTED", "FOR_IN_STMT", "FOR_STMT", "FOR_STMT_EXPR", "FUNCTION", "GENERIC", "GOTO", "ID", "IF_BLOCK", "IF_EXPR", "IF_STMT", "IMPLEMENTATION", "INCOMPLETE_PREFIX", "INDEX", "INDEX_NUMBER", "INTERFACE", "LETTER", "L_AND", "L_AND_AND", "L_AND_EQ", "L_BR", "L_DIV", "L_DIV_EQ", "L_EQ", "L_EQ_EQ", "L_FBR", "L_KBR", "L_LEFT", "L_LEFT_EQ", "L_LESS", "L_LESS_EQ", "L_MINUS", "L_MINUS_EQ", "L_MINUS_MINUS", "L_MORE", "L_MORE_EQ", "L_MULT_EQ", "L_NEQ", "L_NOT", "L_OR", "L_OR_EQ", "L_OR_OR", "L_PERC", "L_PERC_EQ", "L_PLUS", "L_PLUS_EQ", "L_PLUS_PLUS", "L_QUESTION", "L_RIGHT", "L_RIGHT_EQ", "L_TILDA", "L_XOR", "L_XOR_EQ", "MESSAGE", "METHOD", "METHOD_CALL", "METHOD_MSG", "METHOD_NAME", "MODIFIER", "MSG_LIST", "MULTI_COMMENT", "M_IMPORT", "M_TYPE_START", "NAME", "NOT", "NUMBER", "OBJECT", "OP", "OPER", "OPERATOR", "PARAM", "PREFIX", "PREPROCESSOR_DECLARATION", "PROTOCOL", "RETURN_STMT", "R_BR", "R_FBR", "R_KBR", "SELECTOR", "SELECTOR_VALUE", "SEMICOLON", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_OP", "SIZEOF", "STATIC", "STATIC_METHOD", "STATIC_PREFIX", "STATIC_START", "STATIC_TYPE", "STRING", "STRING_LITERAL", "STRING_LITERAL2", "STRING_LITERAL3", "STRUCT_FIELD", "STRUCT_PREFIX", "SUPER_CLASS", "SWITCH", "SWITCH_BODY", "SWITCH_EXPRESSION", "THROW_EXCEPTION", "THROW_STMT", "TYPE", "TYPEDEF", "TYPEDEF_ELEMENT", "TYPEDEF_STRUCT", "TYPE_CONVERTION", "VALUE", "VARIABLE_INIT", "VA_ARGS", "VOID", "WHILE_EXPR", "WHILE_STMT", "WS", "'\"C\"'", "'->'", "'...'", "'@catch'", "'@encode'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@private'", "'@protocol'", "'@public'", "'@selector'", "'@synthesize'", "'@throw'", "'@try'", "'Nil'", "'__attribute__'", "'__typeof__'", "'case'", "'constructor'", "'default'", "'do'", "'else'", "'extern'", "'for'", "'goto'", "'if'", "'in'", "'inline'", "'nil'", "'return'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'while'"
    };

    public static final int EOF=-1;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int ARRAY_INIT=4;
    public static final int ASSIGN=5;
    public static final int ASTERISK=6;
    public static final int BLOCK=7;
    public static final int BREAK=8;
    public static final int BREAK_WORD=9;
    public static final int CASE_BODY=10;
    public static final int CASE_EXPR=11;
    public static final int CASE_STMT=12;
    public static final int CATEGORY=13;
    public static final int CLASSICAL_EXPR=14;
    public static final int CLASSICAL_EXPR_2=15;
    public static final int COLON=16;
    public static final int COMMA=17;
    public static final int CONST_EXPR=18;
    public static final int CONST_PREFIX=19;
    public static final int DEFAULT_BODY=20;
    public static final int DEFAULT_STMT=21;
    public static final int DIGIT=22;
    public static final int DOT=23;
    public static final int ENCODE=24;
    public static final int ENUM=25;
    public static final int ENUM_PREFIX=26;
    public static final int ESC=27;
    public static final int EXPR=28;
    public static final int EXPR_ADD=29;
    public static final int EXPR_AND=30;
    public static final int EXPR_AND_AND=31;
    public static final int EXPR_ASSIGN=32;
    public static final int EXPR_COND=33;
    public static final int EXPR_EQ=34;
    public static final int EXPR_FULL=35;
    public static final int EXPR_MOV=36;
    public static final int EXPR_MULT=37;
    public static final int EXPR_NOT=38;
    public static final int EXPR_OR=39;
    public static final int EXPR_OR_OR=40;
    public static final int EXPR_QUESTION=41;
    public static final int EXPR_TYPE=42;
    public static final int EXPR_XOR=43;
    public static final int EXTERN=44;
    public static final int FIELD=45;
    public static final int FIELD_ACCESS=46;
    public static final int FIELD_TYPE_STARTED=47;
    public static final int FOR_IN_STMT=48;
    public static final int FOR_STMT=49;
    public static final int FOR_STMT_EXPR=50;
    public static final int FUNCTION=51;
    public static final int GENERIC=52;
    public static final int GOTO=53;
    public static final int ID=54;
    public static final int IF_BLOCK=55;
    public static final int IF_EXPR=56;
    public static final int IF_STMT=57;
    public static final int IMPLEMENTATION=58;
    public static final int INCOMPLETE_PREFIX=59;
    public static final int INDEX=60;
    public static final int INDEX_NUMBER=61;
    public static final int INTERFACE=62;
    public static final int LETTER=63;
    public static final int L_AND=64;
    public static final int L_AND_AND=65;
    public static final int L_AND_EQ=66;
    public static final int L_BR=67;
    public static final int L_DIV=68;
    public static final int L_DIV_EQ=69;
    public static final int L_EQ=70;
    public static final int L_EQ_EQ=71;
    public static final int L_FBR=72;
    public static final int L_KBR=73;
    public static final int L_LEFT=74;
    public static final int L_LEFT_EQ=75;
    public static final int L_LESS=76;
    public static final int L_LESS_EQ=77;
    public static final int L_MINUS=78;
    public static final int L_MINUS_EQ=79;
    public static final int L_MINUS_MINUS=80;
    public static final int L_MORE=81;
    public static final int L_MORE_EQ=82;
    public static final int L_MULT_EQ=83;
    public static final int L_NEQ=84;
    public static final int L_NOT=85;
    public static final int L_OR=86;
    public static final int L_OR_EQ=87;
    public static final int L_OR_OR=88;
    public static final int L_PERC=89;
    public static final int L_PERC_EQ=90;
    public static final int L_PLUS=91;
    public static final int L_PLUS_EQ=92;
    public static final int L_PLUS_PLUS=93;
    public static final int L_QUESTION=94;
    public static final int L_RIGHT=95;
    public static final int L_RIGHT_EQ=96;
    public static final int L_TILDA=97;
    public static final int L_XOR=98;
    public static final int L_XOR_EQ=99;
    public static final int MESSAGE=100;
    public static final int METHOD=101;
    public static final int METHOD_CALL=102;
    public static final int METHOD_MSG=103;
    public static final int METHOD_NAME=104;
    public static final int MODIFIER=105;
    public static final int MSG_LIST=106;
    public static final int MULTI_COMMENT=107;
    public static final int M_IMPORT=108;
    public static final int M_TYPE_START=109;
    public static final int NAME=110;
    public static final int NOT=111;
    public static final int NUMBER=112;
    public static final int OBJECT=113;
    public static final int OP=114;
    public static final int OPER=115;
    public static final int OPERATOR=116;
    public static final int PARAM=117;
    public static final int PREFIX=118;
    public static final int PREPROCESSOR_DECLARATION=119;
    public static final int PROTOCOL=120;
    public static final int RETURN_STMT=121;
    public static final int R_BR=122;
    public static final int R_FBR=123;
    public static final int R_KBR=124;
    public static final int SELECTOR=125;
    public static final int SELECTOR_VALUE=126;
    public static final int SEMICOLON=127;
    public static final int SIMPLE_EXPR=128;
    public static final int SINGLE_COMMENT=129;
    public static final int SINGLE_OP=130;
    public static final int SIZEOF=131;
    public static final int STATIC=132;
    public static final int STATIC_METHOD=133;
    public static final int STATIC_PREFIX=134;
    public static final int STATIC_START=135;
    public static final int STATIC_TYPE=136;
    public static final int STRING=137;
    public static final int STRING_LITERAL=138;
    public static final int STRING_LITERAL2=139;
    public static final int STRING_LITERAL3=140;
    public static final int STRUCT_FIELD=141;
    public static final int STRUCT_PREFIX=142;
    public static final int SUPER_CLASS=143;
    public static final int SWITCH=144;
    public static final int SWITCH_BODY=145;
    public static final int SWITCH_EXPRESSION=146;
    public static final int THROW_EXCEPTION=147;
    public static final int THROW_STMT=148;
    public static final int TYPE=149;
    public static final int TYPEDEF=150;
    public static final int TYPEDEF_ELEMENT=151;
    public static final int TYPEDEF_STRUCT=152;
    public static final int TYPE_CONVERTION=153;
    public static final int VALUE=154;
    public static final int VARIABLE_INIT=155;
    public static final int VA_ARGS=156;
    public static final int VOID=157;
    public static final int WHILE_EXPR=158;
    public static final int WHILE_STMT=159;
    public static final int WS=160;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcmParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcmParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcmParser.tokenNames; }
    public String getGrammarFileName() { return "Objcm.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // Objcm.g:115:1: code : ( code_internal )+ ;
    public final ObjcmParser.code_return code() throws RecognitionException {
        ObjcmParser.code_return retval = new ObjcmParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.code_internal_return code_internal1 =null;



        try {
            // Objcm.g:115:6: ( ( code_internal )+ )
            // Objcm.g:116:3: ( code_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:116:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CONST_PREFIX||LA1_0==ID||LA1_0==STATIC_PREFIX||LA1_0==STRUCT_PREFIX||LA1_0==VOID||(LA1_0 >= 168 && LA1_0 <= 169)||LA1_0==185) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // Objcm.g:116:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code431);
            	    code_internal1=code_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // Objcm.g:120:1: code_internal : ( operator_wrapper | implementation_wrapper );
    public final ObjcmParser.code_internal_return code_internal() throws RecognitionException {
        ObjcmParser.code_internal_return retval = new ObjcmParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_wrapper_return operator_wrapper2 =null;

        ObjcmParser.implementation_wrapper_return implementation_wrapper3 =null;



        try {
            // Objcm.g:121:2: ( operator_wrapper | implementation_wrapper )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==CONST_PREFIX||LA2_0==ID||LA2_0==STATIC_PREFIX||LA2_0==STRUCT_PREFIX||LA2_0==VOID||LA2_0==169||LA2_0==185) ) {
                alt2=1;
            }
            else if ( (LA2_0==168) ) {
                alt2=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }
            switch (alt2) {
                case 1 :
                    // Objcm.g:121:4: operator_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_operator_wrapper_in_code_internal445);
                    operator_wrapper2=operator_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, operator_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:122:5: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal451);
                    implementation_wrapper3=implementation_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_wrapper3.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class operator_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator_wrapper"
    // Objcm.g:125:1: operator_wrapper : operator -> ^( OPERATOR operator ) ;
    public final ObjcmParser.operator_wrapper_return operator_wrapper() throws RecognitionException {
        ObjcmParser.operator_wrapper_return retval = new ObjcmParser.operator_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_return operator4 =null;


        RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
        try {
            // Objcm.g:126:2: ( operator -> ^( OPERATOR operator ) )
            // Objcm.g:126:4: operator
            {
            pushFollow(FOLLOW_operator_in_operator_wrapper462);
            operator4=operator();

            state._fsp--;

            stream_operator.add(operator4.getTree());

            // AST REWRITE
            // elements: operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 126:13: -> ^( OPERATOR operator )
            {
                // Objcm.g:126:16: ^( OPERATOR operator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OPERATOR, "OPERATOR")
                , root_1);

                adaptor.addChild(root_1, stream_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_wrapper"


    public static class operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator"
    // Objcm.g:128:1: operator : ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration );
    public final ObjcmParser.operator_return operator() throws RecognitionException {
        ObjcmParser.operator_return retval = new ObjcmParser.operator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_wrapper_return extern_wrapper5 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper6 =null;

        ObjcmParser.type_start_wrapper_return type_start_wrapper7 =null;

        ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper8 =null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration9 =null;



        try {
            // Objcm.g:129:2: ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration )
            int alt3=5;
            switch ( input.LA(1) ) {
            case 185:
                {
                alt3=1;
                }
                break;
            case STATIC_PREFIX:
                {
                alt3=2;
                }
                break;
            case CONST_PREFIX:
            case ID:
            case VOID:
                {
                alt3=3;
                }
                break;
            case 169:
                {
                alt3=4;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt3=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }

            switch (alt3) {
                case 1 :
                    // Objcm.g:129:4: extern_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_wrapper_in_operator480);
                    extern_wrapper5=extern_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, extern_wrapper5.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:130:4: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_operator486);
                    static_section_wrapper6=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper6.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:131:4: type_start_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_start_wrapper_in_operator491);
                    type_start_wrapper7=type_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, type_start_wrapper7.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:132:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_operator498);
                    interface_declaration_wrapper8=interface_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_declaration_wrapper8.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:133:4: typedef_struct_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_in_operator504);
                    typedef_struct_declaration9=typedef_struct_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration9.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // Objcm.g:140:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcmParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcmParser.extern_wrapper_return retval = new ObjcmParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_return extern10 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // Objcm.g:141:3: ( extern -> ^( EXTERN ) )
            // Objcm.g:141:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper523);
            extern10=extern();

            state._fsp--;

            stream_extern.add(extern10.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 141:12: -> ^( EXTERN )
            {
                // Objcm.g:141:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // Objcm.g:144:2: extern : 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR ;
    public final ObjcmParser.extern_return extern() throws RecognitionException {
        ObjcmParser.extern_return retval = new ObjcmParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal11=null;
        Token string_literal12=null;
        Token L_FBR13=null;
        Token set14=null;
        Token R_FBR15=null;

        Object string_literal11_tree=null;
        Object string_literal12_tree=null;
        Object L_FBR13_tree=null;
        Object set14_tree=null;
        Object R_FBR15_tree=null;

        try {
            // Objcm.g:144:9: ( 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR )
            // Objcm.g:144:11: 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR
            {
            root_0 = (Object)adaptor.nil();


            string_literal11=(Token)match(input,185,FOLLOW_185_in_extern542); 
            string_literal11_tree = 
            (Object)adaptor.create(string_literal11)
            ;
            adaptor.addChild(root_0, string_literal11_tree);


            string_literal12=(Token)match(input,161,FOLLOW_161_in_extern545); 
            string_literal12_tree = 
            (Object)adaptor.create(string_literal12)
            ;
            adaptor.addChild(root_0, string_literal12_tree);


            L_FBR13=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_extern548); 
            L_FBR13_tree = 
            (Object)adaptor.create(L_FBR13)
            ;
            adaptor.addChild(root_0, L_FBR13_tree);


            set14=(Token)input.LT(1);

            if ( (input.LA(1) >= ARRAY_INIT && input.LA(1) <= R_BR)||(input.LA(1) >= R_KBR && input.LA(1) <= 197) ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set14)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            R_FBR15=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_extern555); 
            R_FBR15_tree = 
            (Object)adaptor.create(R_FBR15)
            ;
            adaptor.addChild(root_0, R_FBR15_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // Objcm.g:146:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcmParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcmParser.implementation_wrapper_return retval = new ObjcmParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_return implementation16 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // Objcm.g:147:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // Objcm.g:147:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper567);
            implementation16=implementation();

            state._fsp--;

            stream_implementation.add(implementation16.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 147:20: -> ^( IMPLEMENTATION implementation )
            {
                // Objcm.g:147:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // Objcm.g:149:1: implementation : '@implementation' name ( category )? ( super_class )? ( implementation_body )+ '@end' ( SEMICOLON )? ;
    public final ObjcmParser.implementation_return implementation() throws RecognitionException {
        ObjcmParser.implementation_return retval = new ObjcmParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal17=null;
        Token string_literal22=null;
        Token SEMICOLON23=null;
        ObjcmParser.name_return name18 =null;

        ObjcmParser.category_return category19 =null;

        ObjcmParser.super_class_return super_class20 =null;

        ObjcmParser.implementation_body_return implementation_body21 =null;


        Object string_literal17_tree=null;
        Object string_literal22_tree=null;
        Object SEMICOLON23_tree=null;

        try {
            // Objcm.g:150:2: ( '@implementation' name ( category )? ( super_class )? ( implementation_body )+ '@end' ( SEMICOLON )? )
            // Objcm.g:150:4: '@implementation' name ( category )? ( super_class )? ( implementation_body )+ '@end' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal17=(Token)match(input,168,FOLLOW_168_in_implementation586); 
            string_literal17_tree = 
            (Object)adaptor.create(string_literal17)
            ;
            adaptor.addChild(root_0, string_literal17_tree);


            pushFollow(FOLLOW_name_in_implementation589);
            name18=name();

            state._fsp--;

            adaptor.addChild(root_0, name18.getTree());

            // Objcm.g:150:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==L_BR) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // Objcm.g:150:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation592);
                    category19=category();

                    state._fsp--;

                    adaptor.addChild(root_0, category19.getTree());

                    }
                    break;

            }


            // Objcm.g:150:39: ( super_class )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==COLON) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // Objcm.g:150:39: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_implementation595);
                    super_class20=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class20.getTree());

                    }
                    break;

            }


            // Objcm.g:151:3: ( implementation_body )+
            int cnt6=0;
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==ID||LA6_0==L_MINUS||LA6_0==L_PLUS||LA6_0==STATIC_PREFIX||LA6_0==STRUCT_PREFIX||LA6_0==VOID||LA6_0==174||LA6_0==185||LA6_0==194) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // Objcm.g:151:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation600);
            	    implementation_body21=implementation_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, implementation_body21.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt6 >= 1 ) break loop6;
                        EarlyExitException eee =
                            new EarlyExitException(6, input);
                        throw eee;
                }
                cnt6++;
            } while (true);


            string_literal22=(Token)match(input,166,FOLLOW_166_in_implementation605); 
            string_literal22_tree = 
            (Object)adaptor.create(string_literal22)
            ;
            adaptor.addChild(root_0, string_literal22_tree);


            // Objcm.g:152:11: ( SEMICOLON )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==SEMICOLON) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // Objcm.g:152:11: SEMICOLON
                    {
                    SEMICOLON23=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation608); 
                    SEMICOLON23_tree = 
                    (Object)adaptor.create(SEMICOLON23)
                    ;
                    adaptor.addChild(root_0, SEMICOLON23_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // Objcm.g:155:1: category : L_BR name R_BR -> ^( CATEGORY name ) ;
    public final ObjcmParser.category_return category() throws RecognitionException {
        ObjcmParser.category_return retval = new ObjcmParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR24=null;
        Token R_BR26=null;
        ObjcmParser.name_return name25 =null;


        Object L_BR24_tree=null;
        Object R_BR26_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // Objcm.g:155:9: ( L_BR name R_BR -> ^( CATEGORY name ) )
            // Objcm.g:155:11: L_BR name R_BR
            {
            L_BR24=(Token)match(input,L_BR,FOLLOW_L_BR_in_category620);  
            stream_L_BR.add(L_BR24);


            pushFollow(FOLLOW_name_in_category623);
            name25=name();

            state._fsp--;

            stream_name.add(name25.getTree());

            R_BR26=(Token)match(input,R_BR,FOLLOW_R_BR_in_category626);  
            stream_R_BR.add(R_BR26);


            // AST REWRITE
            // elements: name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 155:28: -> ^( CATEGORY name )
            {
                // Objcm.g:155:31: ^( CATEGORY name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // Objcm.g:157:1: implementation_body : ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper );
    public final ObjcmParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcmParser.implementation_body_return retval = new ObjcmParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.directives_return directives27 =null;

        ObjcmParser.typedef_return typedef28 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper29 =null;

        ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper30 =null;

        ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper31 =null;

        ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper32 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper33 =null;



        try {
            // Objcm.g:158:2: ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper )
            int alt8=7;
            switch ( input.LA(1) ) {
            case 174:
                {
                alt8=1;
                }
                break;
            case 194:
                {
                alt8=2;
                }
                break;
            case STATIC_PREFIX:
                {
                alt8=3;
                }
                break;
            case L_MINUS:
            case L_PLUS:
                {
                alt8=4;
                }
                break;
            case ID:
            case VOID:
                {
                alt8=5;
                }
                break;
            case 185:
                {
                alt8=6;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt8=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }

            switch (alt8) {
                case 1 :
                    // Objcm.g:158:4: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body644);
                    directives27=directives();

                    state._fsp--;

                    adaptor.addChild(root_0, directives27.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:159:5: typedef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_in_implementation_body650);
                    typedef28=typedef();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef28.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:160:5: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_implementation_body656);
                    static_section_wrapper29=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper29.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:161:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body662);
                    implementation_method_wrapper30=implementation_method_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper30.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:163:4: field_type_started_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_type_started_wrapper_in_implementation_body668);
                    field_type_started_wrapper31=field_type_started_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_type_started_wrapper31.getTree());

                    }
                    break;
                case 6 :
                    // Objcm.g:164:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_implementation_body674);
                    field_declaration_wrapper32=field_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_wrapper32.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:165:4: typedef_struct_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body679);
                    typedef_struct_declaration_wrapper33=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // Objcm.g:168:1: directives : synthesize ;
    public final ObjcmParser.directives_return directives() throws RecognitionException {
        ObjcmParser.directives_return retval = new ObjcmParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.synthesize_return synthesize34 =null;



        try {
            // Objcm.g:169:2: ( synthesize )
            // Objcm.g:169:4: synthesize
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_synthesize_in_directives690);
            synthesize34=synthesize();

            state._fsp--;

            adaptor.addChild(root_0, synthesize34.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // Objcm.g:172:1: synthesize : '@synthesize' ID SEMICOLON ;
    public final ObjcmParser.synthesize_return synthesize() throws RecognitionException {
        ObjcmParser.synthesize_return retval = new ObjcmParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal35=null;
        Token ID36=null;
        Token SEMICOLON37=null;

        Object string_literal35_tree=null;
        Object ID36_tree=null;
        Object SEMICOLON37_tree=null;

        try {
            // Objcm.g:173:2: ( '@synthesize' ID SEMICOLON )
            // Objcm.g:173:4: '@synthesize' ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal35=(Token)match(input,174,FOLLOW_174_in_synthesize703); 
            string_literal35_tree = 
            (Object)adaptor.create(string_literal35)
            ;
            adaptor.addChild(root_0, string_literal35_tree);


            ID36=(Token)match(input,ID,FOLLOW_ID_in_synthesize706); 
            ID36_tree = 
            (Object)adaptor.create(ID36)
            ;
            adaptor.addChild(root_0, ID36_tree);


            SEMICOLON37=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synthesize709); 
            SEMICOLON37_tree = 
            (Object)adaptor.create(SEMICOLON37)
            ;
            adaptor.addChild(root_0, SEMICOLON37_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class typedef_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef"
    // Objcm.g:176:1: typedef : 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper ) ;
    public final ObjcmParser.typedef_return typedef() throws RecognitionException {
        ObjcmParser.typedef_return retval = new ObjcmParser.typedef_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal38=null;
        ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper39 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper40 =null;


        Object string_literal38_tree=null;

        try {
            // Objcm.g:176:9: ( 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper ) )
            // Objcm.g:176:11: 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            string_literal38=(Token)match(input,194,FOLLOW_194_in_typedef721); 
            string_literal38_tree = 
            (Object)adaptor.create(string_literal38)
            ;
            adaptor.addChild(root_0, string_literal38_tree);


            // Objcm.g:176:22: ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==ENUM_PREFIX) ) {
                alt9=1;
            }
            else if ( (LA9_0==STRUCT_PREFIX) ) {
                alt9=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // Objcm.g:176:23: typedef_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_typedef725);
                    typedef_declaration_wrapper39=typedef_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_declaration_wrapper39.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:176:53: typedef_struct_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_typedef729);
                    typedef_struct_declaration_wrapper40=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper40.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef"


    public static class static_section_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section_wrapper"
    // Objcm.g:179:1: static_section_wrapper : static_section -> ^( STATIC static_section ) ;
    public final ObjcmParser.static_section_wrapper_return static_section_wrapper() throws RecognitionException {
        ObjcmParser.static_section_wrapper_return retval = new ObjcmParser.static_section_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_section_return static_section41 =null;


        RewriteRuleSubtreeStream stream_static_section=new RewriteRuleSubtreeStream(adaptor,"rule static_section");
        try {
            // Objcm.g:180:2: ( static_section -> ^( STATIC static_section ) )
            // Objcm.g:180:4: static_section
            {
            pushFollow(FOLLOW_static_section_in_static_section_wrapper744);
            static_section41=static_section();

            state._fsp--;

            stream_static_section.add(static_section41.getTree());

            // AST REWRITE
            // elements: static_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 180:19: -> ^( STATIC static_section )
            {
                // Objcm.g:180:22: ^( STATIC static_section )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC, "STATIC")
                , root_1);

                adaptor.addChild(root_1, stream_static_section.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section_wrapper"


    public static class static_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section"
    // Objcm.g:182:1: static_section : STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 ;
    public final ObjcmParser.static_section_return static_section() throws RecognitionException {
        ObjcmParser.static_section_return retval = new ObjcmParser.static_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX42=null;
        Token CONST_PREFIX43=null;
        Token STRUCT_PREFIX44=null;
        Token ENUM_PREFIX45=null;
        ObjcmParser.static_section2_return static_section246 =null;


        Object STATIC_PREFIX42_tree=null;
        Object CONST_PREFIX43_tree=null;
        Object STRUCT_PREFIX44_tree=null;
        Object ENUM_PREFIX45_tree=null;

        try {
            // Objcm.g:183:2: ( STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 )
            // Objcm.g:183:4: STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX42=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_section764); 
            STATIC_PREFIX42_tree = 
            (Object)adaptor.create(STATIC_PREFIX42)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX42_tree);


            // Objcm.g:183:18: ( CONST_PREFIX )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==CONST_PREFIX) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // Objcm.g:183:18: CONST_PREFIX
                    {
                    CONST_PREFIX43=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_section766); 
                    CONST_PREFIX43_tree = 
                    (Object)adaptor.create(CONST_PREFIX43)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX43_tree);


                    }
                    break;

            }


            // Objcm.g:183:32: ( STRUCT_PREFIX )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==STRUCT_PREFIX) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // Objcm.g:183:32: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX44=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_static_section769); 
                    STRUCT_PREFIX44_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX44)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX44_tree);


                    }
                    break;

            }


            // Objcm.g:183:47: ( ENUM_PREFIX )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ENUM_PREFIX) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // Objcm.g:183:47: ENUM_PREFIX
                    {
                    ENUM_PREFIX45=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_static_section772); 
                    ENUM_PREFIX45_tree = 
                    (Object)adaptor.create(ENUM_PREFIX45)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX45_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_static_section2_in_static_section775);
            static_section246=static_section2();

            state._fsp--;

            adaptor.addChild(root_0, static_section246.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section"


    public static class static_section2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section2"
    // Objcm.g:185:1: static_section2 : ( inline_section | implementation_method_wrapper2 | static_section3 );
    public final ObjcmParser.static_section2_return static_section2() throws RecognitionException {
        ObjcmParser.static_section2_return retval = new ObjcmParser.static_section2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.inline_section_return inline_section47 =null;

        ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper248 =null;

        ObjcmParser.static_section3_return static_section349 =null;



        try {
            // Objcm.g:186:2: ( inline_section | implementation_method_wrapper2 | static_section3 )
            int alt13=3;
            switch ( input.LA(1) ) {
            case 190:
                {
                alt13=1;
                }
                break;
            case L_FBR:
            case SEMICOLON:
                {
                alt13=2;
                }
                break;
            case ID:
            case VOID:
                {
                alt13=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }

            switch (alt13) {
                case 1 :
                    // Objcm.g:186:4: inline_section
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_inline_section_in_static_section2784);
                    inline_section47=inline_section();

                    state._fsp--;

                    adaptor.addChild(root_0, inline_section47.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:187:5: implementation_method_wrapper2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper2_in_static_section2791);
                    implementation_method_wrapper248=implementation_method_wrapper2();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper248.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:188:5: static_section3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section3_in_static_section2798);
                    static_section349=static_section3();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section349.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section2"


    public static class inline_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_section"
    // Objcm.g:191:1: inline_section : 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) ;
    public final ObjcmParser.inline_section_return inline_section() throws RecognitionException {
        ObjcmParser.inline_section_return retval = new ObjcmParser.inline_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal50=null;
        Token SEMICOLON55=null;
        ObjcmParser.field_type_return field_type51 =null;

        ObjcmParser.name_return name52 =null;

        ObjcmParser.method_params2_return method_params253 =null;

        ObjcmParser.block_wrapper_return block_wrapper54 =null;


        Object string_literal50_tree=null;
        Object SEMICOLON55_tree=null;

        try {
            // Objcm.g:192:2: ( 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) )
            // Objcm.g:192:4: 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON )
            {
            root_0 = (Object)adaptor.nil();


            string_literal50=(Token)match(input,190,FOLLOW_190_in_inline_section810); 
            string_literal50_tree = 
            (Object)adaptor.create(string_literal50)
            ;
            adaptor.addChild(root_0, string_literal50_tree);


            pushFollow(FOLLOW_field_type_in_inline_section813);
            field_type51=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type51.getTree());

            pushFollow(FOLLOW_name_in_inline_section815);
            name52=name();

            state._fsp--;

            adaptor.addChild(root_0, name52.getTree());

            // Objcm.g:192:31: ( method_params2 )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==L_BR) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // Objcm.g:192:31: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_inline_section818);
                    method_params253=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params253.getTree());

                    }
                    break;

            }


            // Objcm.g:192:47: ( block_wrapper | SEMICOLON )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==L_FBR) ) {
                alt15=1;
            }
            else if ( (LA15_0==SEMICOLON) ) {
                alt15=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;

            }
            switch (alt15) {
                case 1 :
                    // Objcm.g:192:48: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_inline_section822);
                    block_wrapper54=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper54.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:192:64: SEMICOLON
                    {
                    SEMICOLON55=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inline_section826); 
                    SEMICOLON55_tree = 
                    (Object)adaptor.create(SEMICOLON55)
                    ;
                    adaptor.addChild(root_0, SEMICOLON55_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_section"


    public static class static_section3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section3"
    // Objcm.g:194:1: static_section3 : field_type name ( indexed )* static_end ;
    public final ObjcmParser.static_section3_return static_section3() throws RecognitionException {
        ObjcmParser.static_section3_return retval = new ObjcmParser.static_section3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type56 =null;

        ObjcmParser.name_return name57 =null;

        ObjcmParser.indexed_return indexed58 =null;

        ObjcmParser.static_end_return static_end59 =null;



        try {
            // Objcm.g:195:2: ( field_type name ( indexed )* static_end )
            // Objcm.g:195:4: field_type name ( indexed )* static_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_static_section3837);
            field_type56=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type56.getTree());

            pushFollow(FOLLOW_name_in_static_section3839);
            name57=name();

            state._fsp--;

            adaptor.addChild(root_0, name57.getTree());

            // Objcm.g:195:20: ( indexed )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==L_KBR) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // Objcm.g:195:20: indexed
            	    {
            	    pushFollow(FOLLOW_indexed_in_static_section3841);
            	    indexed58=indexed();

            	    state._fsp--;

            	    adaptor.addChild(root_0, indexed58.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            pushFollow(FOLLOW_static_end_in_static_section3845);
            static_end59=static_end();

            state._fsp--;

            adaptor.addChild(root_0, static_end59.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section3"


    public static class static_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_end"
    // Objcm.g:198:1: static_end : ( implementation_method_wrapper3 | field_end );
    public final ObjcmParser.static_end_return static_end() throws RecognitionException {
        ObjcmParser.static_end_return retval = new ObjcmParser.static_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper360 =null;

        ObjcmParser.field_end_return field_end61 =null;



        try {
            // Objcm.g:199:2: ( implementation_method_wrapper3 | field_end )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==L_BR) ) {
                alt17=1;
            }
            else if ( (LA17_0==L_EQ||LA17_0==SEMICOLON) ) {
                alt17=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // Objcm.g:199:4: implementation_method_wrapper3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper3_in_static_end857);
                    implementation_method_wrapper360=implementation_method_wrapper3();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper360.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:200:5: field_end
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_end_in_static_end863);
                    field_end61=field_end();

                    state._fsp--;

                    adaptor.addChild(root_0, field_end61.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_end"


    public static class field_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end"
    // Objcm.g:202:1: field_end : field_end_internal -> ^( FIELD field_end_internal ) ;
    public final ObjcmParser.field_end_return field_end() throws RecognitionException {
        ObjcmParser.field_end_return retval = new ObjcmParser.field_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_end_internal_return field_end_internal62 =null;


        RewriteRuleSubtreeStream stream_field_end_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_end_internal");
        try {
            // Objcm.g:203:2: ( field_end_internal -> ^( FIELD field_end_internal ) )
            // Objcm.g:203:4: field_end_internal
            {
            pushFollow(FOLLOW_field_end_internal_in_field_end874);
            field_end_internal62=field_end_internal();

            state._fsp--;

            stream_field_end_internal.add(field_end_internal62.getTree());

            // AST REWRITE
            // elements: field_end_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 203:23: -> ^( FIELD field_end_internal )
            {
                // Objcm.g:203:26: ^( FIELD field_end_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_end_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end"


    public static class field_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end_internal"
    // Objcm.g:205:1: field_end_internal : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_end_internal_return field_end_internal() throws RecognitionException {
        ObjcmParser.field_end_internal_return retval = new ObjcmParser.field_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON64=null;
        ObjcmParser.value_set_return value_set63 =null;


        Object SEMICOLON64_tree=null;

        try {
            // Objcm.g:206:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:206:4: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:206:4: ( value_set )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==L_EQ) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // Objcm.g:206:4: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_end_internal892);
                    value_set63=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set63.getTree());

                    }
                    break;

            }


            SEMICOLON64=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_end_internal895); 
            SEMICOLON64_tree = 
            (Object)adaptor.create(SEMICOLON64)
            ;
            adaptor.addChild(root_0, SEMICOLON64_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end_internal"


    public static class implementation_method_wrapper3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper3"
    // Objcm.g:208:1: implementation_method_wrapper3 : implementation_method3 -> ^( METHOD implementation_method3 ) ;
    public final ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper3() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper3_return retval = new ObjcmParser.implementation_method_wrapper3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method3_return implementation_method365 =null;


        RewriteRuleSubtreeStream stream_implementation_method3=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method3");
        try {
            // Objcm.g:209:2: ( implementation_method3 -> ^( METHOD implementation_method3 ) )
            // Objcm.g:209:4: implementation_method3
            {
            pushFollow(FOLLOW_implementation_method3_in_implementation_method_wrapper3907);
            implementation_method365=implementation_method3();

            state._fsp--;

            stream_implementation_method3.add(implementation_method365.getTree());

            // AST REWRITE
            // elements: implementation_method3
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 209:27: -> ^( METHOD implementation_method3 )
            {
                // Objcm.g:209:30: ^( METHOD implementation_method3 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method3.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper3"


    public static class implementation_method3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method3"
    // Objcm.g:211:1: implementation_method3 : method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? ;
    public final ObjcmParser.implementation_method3_return implementation_method3() throws RecognitionException {
        ObjcmParser.implementation_method3_return retval = new ObjcmParser.implementation_method3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON67=null;
        ObjcmParser.method_header_body3_return method_header_body366 =null;

        ObjcmParser.attribute_return attribute68 =null;

        ObjcmParser.block_wrapper_return block_wrapper69 =null;


        Object SEMICOLON67_tree=null;

        try {
            // Objcm.g:212:2: ( method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? )
            // Objcm.g:212:4: method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body3_in_implementation_method3925);
            method_header_body366=method_header_body3();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body366.getTree());

            // Objcm.g:212:25: ( SEMICOLON )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==SEMICOLON) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // Objcm.g:212:25: SEMICOLON
                    {
                    SEMICOLON67=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method3928); 
                    SEMICOLON67_tree = 
                    (Object)adaptor.create(SEMICOLON67)
                    ;
                    adaptor.addChild(root_0, SEMICOLON67_tree);


                    }
                    break;

            }


            // Objcm.g:213:3: ( attribute )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==178) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // Objcm.g:213:3: attribute
                    {
                    pushFollow(FOLLOW_attribute_in_implementation_method3933);
                    attribute68=attribute();

                    state._fsp--;

                    adaptor.addChild(root_0, attribute68.getTree());

                    }
                    break;

            }


            // Objcm.g:214:3: ( block_wrapper )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==L_FBR) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // Objcm.g:214:3: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_implementation_method3938);
                    block_wrapper69=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper69.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method3"


    public static class attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute"
    // Objcm.g:217:1: attribute : '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON ;
    public final ObjcmParser.attribute_return attribute() throws RecognitionException {
        ObjcmParser.attribute_return retval = new ObjcmParser.attribute_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal70=null;
        Token L_BR71=null;
        Token L_BR72=null;
        Token string_literal73=null;
        Token R_BR74=null;
        Token R_BR75=null;
        Token SEMICOLON76=null;

        Object string_literal70_tree=null;
        Object L_BR71_tree=null;
        Object L_BR72_tree=null;
        Object string_literal73_tree=null;
        Object R_BR74_tree=null;
        Object R_BR75_tree=null;
        Object SEMICOLON76_tree=null;

        try {
            // Objcm.g:218:2: ( '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON )
            // Objcm.g:218:4: '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal70=(Token)match(input,178,FOLLOW_178_in_attribute951); 
            string_literal70_tree = 
            (Object)adaptor.create(string_literal70)
            ;
            adaptor.addChild(root_0, string_literal70_tree);


            L_BR71=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute954); 
            L_BR71_tree = 
            (Object)adaptor.create(L_BR71)
            ;
            adaptor.addChild(root_0, L_BR71_tree);


            L_BR72=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute957); 
            L_BR72_tree = 
            (Object)adaptor.create(L_BR72)
            ;
            adaptor.addChild(root_0, L_BR72_tree);


            string_literal73=(Token)match(input,181,FOLLOW_181_in_attribute960); 
            string_literal73_tree = 
            (Object)adaptor.create(string_literal73)
            ;
            adaptor.addChild(root_0, string_literal73_tree);


            R_BR74=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute963); 
            R_BR74_tree = 
            (Object)adaptor.create(R_BR74)
            ;
            adaptor.addChild(root_0, R_BR74_tree);


            R_BR75=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute966); 
            R_BR75_tree = 
            (Object)adaptor.create(R_BR75)
            ;
            adaptor.addChild(root_0, R_BR75_tree);


            SEMICOLON76=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_attribute969); 
            SEMICOLON76_tree = 
            (Object)adaptor.create(SEMICOLON76)
            ;
            adaptor.addChild(root_0, SEMICOLON76_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute"


    public static class implementation_method2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method2"
    // Objcm.g:220:1: implementation_method2 : ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method2_return implementation_method2() throws RecognitionException {
        ObjcmParser.implementation_method2_return retval = new ObjcmParser.implementation_method2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON77=null;
        ObjcmParser.block_wrapper_return block_wrapper78 =null;


        Object SEMICOLON77_tree=null;

        try {
            // Objcm.g:221:2: ( ( SEMICOLON )? block_wrapper )
            // Objcm.g:221:5: ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:221:5: ( SEMICOLON )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==SEMICOLON) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // Objcm.g:221:5: SEMICOLON
                    {
                    SEMICOLON77=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method2981); 
                    SEMICOLON77_tree = 
                    (Object)adaptor.create(SEMICOLON77)
                    ;
                    adaptor.addChild(root_0, SEMICOLON77_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method2986);
            block_wrapper78=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper78.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method2"


    public static class field_type_started_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started_wrapper"
    // Objcm.g:225:1: field_type_started_wrapper : field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) ;
    public final ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper() throws RecognitionException {
        ObjcmParser.field_type_started_wrapper_return retval = new ObjcmParser.field_type_started_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_started_return field_type_started79 =null;


        RewriteRuleSubtreeStream stream_field_type_started=new RewriteRuleSubtreeStream(adaptor,"rule field_type_started");
        try {
            // Objcm.g:226:2: ( field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) )
            // Objcm.g:226:4: field_type_started
            {
            pushFollow(FOLLOW_field_type_started_in_field_type_started_wrapper998);
            field_type_started79=field_type_started();

            state._fsp--;

            stream_field_type_started.add(field_type_started79.getTree());

            // AST REWRITE
            // elements: field_type_started
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 226:23: -> ^( FIELD_TYPE_STARTED field_type_started )
            {
                // Objcm.g:226:26: ^( FIELD_TYPE_STARTED field_type_started )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_TYPE_STARTED, "FIELD_TYPE_STARTED")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_started.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started_wrapper"


    public static class field_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started"
    // Objcm.g:228:1: field_type_started : field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) ;
    public final ObjcmParser.field_type_started_return field_type_started() throws RecognitionException {
        ObjcmParser.field_type_started_return retval = new ObjcmParser.field_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type80 =null;

        ObjcmParser.name_return name81 =null;

        ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper82 =null;

        ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper83 =null;



        try {
            // Objcm.g:229:2: ( field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) )
            // Objcm.g:229:4: field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_field_type_started1017);
            field_type80=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type80.getTree());

            pushFollow(FOLLOW_name_in_field_type_started1019);
            name81=name();

            state._fsp--;

            adaptor.addChild(root_0, name81.getTree());

            // Objcm.g:229:20: ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==L_BR) ) {
                alt23=1;
            }
            else if ( (LA23_0==L_EQ||LA23_0==SEMICOLON) ) {
                alt23=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }
            switch (alt23) {
                case 1 :
                    // Objcm.g:229:21: classic_method_declaration_wrapper
                    {
                    pushFollow(FOLLOW_classic_method_declaration_wrapper_in_field_type_started1022);
                    classic_method_declaration_wrapper82=classic_method_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, classic_method_declaration_wrapper82.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:229:58: field_declaration_end_wrapper
                    {
                    pushFollow(FOLLOW_field_declaration_end_wrapper_in_field_type_started1026);
                    field_declaration_end_wrapper83=field_declaration_end_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_end_wrapper83.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started"


    public static class field_declaration_end_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end_wrapper"
    // Objcm.g:231:1: field_declaration_end_wrapper : field_declaration_end -> ^( FIELD field_declaration_end ) ;
    public final ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_end_wrapper_return retval = new ObjcmParser.field_declaration_end_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_end_return field_declaration_end84 =null;


        RewriteRuleSubtreeStream stream_field_declaration_end=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_end");
        try {
            // Objcm.g:232:2: ( field_declaration_end -> ^( FIELD field_declaration_end ) )
            // Objcm.g:232:4: field_declaration_end
            {
            pushFollow(FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1037);
            field_declaration_end84=field_declaration_end();

            state._fsp--;

            stream_field_declaration_end.add(field_declaration_end84.getTree());

            // AST REWRITE
            // elements: field_declaration_end
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 232:26: -> ^( FIELD field_declaration_end )
            {
                // Objcm.g:232:29: ^( FIELD field_declaration_end )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_end.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end_wrapper"


    public static class classic_method_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration_wrapper"
    // Objcm.g:234:1: classic_method_declaration_wrapper : classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) ;
    public final ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper() throws RecognitionException {
        ObjcmParser.classic_method_declaration_wrapper_return retval = new ObjcmParser.classic_method_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classic_method_declaration_return classic_method_declaration85 =null;


        RewriteRuleSubtreeStream stream_classic_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classic_method_declaration");
        try {
            // Objcm.g:235:2: ( classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) )
            // Objcm.g:235:4: classic_method_declaration
            {
            pushFollow(FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1055);
            classic_method_declaration85=classic_method_declaration();

            state._fsp--;

            stream_classic_method_declaration.add(classic_method_declaration85.getTree());

            // AST REWRITE
            // elements: classic_method_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 235:31: -> ^( STATIC_METHOD classic_method_declaration )
            {
                // Objcm.g:235:34: ^( STATIC_METHOD classic_method_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_classic_method_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration_wrapper"


    public static class classic_method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration"
    // Objcm.g:237:1: classic_method_declaration : method_params2 block_wrapper ;
    public final ObjcmParser.classic_method_declaration_return classic_method_declaration() throws RecognitionException {
        ObjcmParser.classic_method_declaration_return retval = new ObjcmParser.classic_method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params286 =null;

        ObjcmParser.block_wrapper_return block_wrapper87 =null;



        try {
            // Objcm.g:239:2: ( method_params2 block_wrapper )
            // Objcm.g:239:4: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_classic_method_declaration1075);
            method_params286=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params286.getTree());

            pushFollow(FOLLOW_block_wrapper_in_classic_method_declaration1080);
            block_wrapper87=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper87.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // Objcm.g:243:1: implementation_method_wrapper : implementation_method -> ^( METHOD implementation_method ) ;
    public final ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper_return retval = new ObjcmParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_return implementation_method88 =null;


        RewriteRuleSubtreeStream stream_implementation_method=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method");
        try {
            // Objcm.g:244:2: ( implementation_method -> ^( METHOD implementation_method ) )
            // Objcm.g:244:4: implementation_method
            {
            pushFollow(FOLLOW_implementation_method_in_implementation_method_wrapper1093);
            implementation_method88=implementation_method();

            state._fsp--;

            stream_implementation_method.add(implementation_method88.getTree());

            // AST REWRITE
            // elements: implementation_method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 244:26: -> ^( METHOD implementation_method )
            {
                // Objcm.g:244:29: ^( METHOD implementation_method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class implementation_method_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper2"
    // Objcm.g:246:1: implementation_method_wrapper2 : implementation_method2 -> ^( METHOD implementation_method2 ) ;
    public final ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper2() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper2_return retval = new ObjcmParser.implementation_method_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method2_return implementation_method289 =null;


        RewriteRuleSubtreeStream stream_implementation_method2=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method2");
        try {
            // Objcm.g:247:2: ( implementation_method2 -> ^( METHOD implementation_method2 ) )
            // Objcm.g:247:4: implementation_method2
            {
            pushFollow(FOLLOW_implementation_method2_in_implementation_method_wrapper21110);
            implementation_method289=implementation_method2();

            state._fsp--;

            stream_implementation_method2.add(implementation_method289.getTree());

            // AST REWRITE
            // elements: implementation_method2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 247:27: -> ^( METHOD implementation_method2 )
            {
                // Objcm.g:247:30: ^( METHOD implementation_method2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper2"


    public static class implementation_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method"
    // Objcm.g:249:1: implementation_method : method_header_body ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method_return implementation_method() throws RecognitionException {
        ObjcmParser.implementation_method_return retval = new ObjcmParser.implementation_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON91=null;
        ObjcmParser.method_header_body_return method_header_body90 =null;

        ObjcmParser.block_wrapper_return block_wrapper92 =null;


        Object SEMICOLON91_tree=null;

        try {
            // Objcm.g:250:2: ( method_header_body ( SEMICOLON )? block_wrapper )
            // Objcm.g:250:4: method_header_body ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_implementation_method1127);
            method_header_body90=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body90.getTree());

            // Objcm.g:250:23: ( SEMICOLON )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==SEMICOLON) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // Objcm.g:250:23: SEMICOLON
                    {
                    SEMICOLON91=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method1129); 
                    SEMICOLON91_tree = 
                    (Object)adaptor.create(SEMICOLON91)
                    ;
                    adaptor.addChild(root_0, SEMICOLON91_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method1134);
            block_wrapper92=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper92.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method"


    public static class block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_wrapper"
    // Objcm.g:254:1: block_wrapper : block -> ^( BLOCK block ) ;
    public final ObjcmParser.block_wrapper_return block_wrapper() throws RecognitionException {
        ObjcmParser.block_wrapper_return retval = new ObjcmParser.block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_return block93 =null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // Objcm.g:255:2: ( block -> ^( BLOCK block ) )
            // Objcm.g:255:4: block
            {
            pushFollow(FOLLOW_block_in_block_wrapper1147);
            block93=block();

            state._fsp--;

            stream_block.add(block93.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 255:10: -> ^( BLOCK block )
            {
                // Objcm.g:255:13: ^( BLOCK block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK, "BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_wrapper"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // Objcm.g:257:1: block : L_FBR ( block_internal_full | block )* R_FBR ;
    public final ObjcmParser.block_return block() throws RecognitionException {
        ObjcmParser.block_return retval = new ObjcmParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR94=null;
        Token R_FBR97=null;
        ObjcmParser.block_internal_full_return block_internal_full95 =null;

        ObjcmParser.block_return block96 =null;


        Object L_FBR94_tree=null;
        Object R_FBR97_tree=null;

        try {
            // Objcm.g:257:7: ( L_FBR ( block_internal_full | block )* R_FBR )
            // Objcm.g:258:3: L_FBR ( block_internal_full | block )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR94=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block1169); 
            L_FBR94_tree = 
            (Object)adaptor.create(L_FBR94)
            ;
            adaptor.addChild(root_0, L_FBR94_tree);


            // Objcm.g:259:4: ( block_internal_full | block )*
            loop25:
            do {
                int alt25=3;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==ASTERISK||LA25_0==BREAK_WORD||LA25_0==CONST_PREFIX||LA25_0==ENUM_PREFIX||LA25_0==ID||LA25_0==L_AND||LA25_0==L_BR||LA25_0==L_KBR||LA25_0==L_MINUS||LA25_0==L_MINUS_MINUS||LA25_0==L_NOT||LA25_0==L_PLUS||LA25_0==L_PLUS_PLUS||LA25_0==L_TILDA||LA25_0==NUMBER||LA25_0==SEMICOLON||(LA25_0 >= SINGLE_OP && LA25_0 <= SIZEOF)||LA25_0==STATIC_PREFIX||(LA25_0 >= STRING_LITERAL && LA25_0 <= STRING_LITERAL3)||LA25_0==STRUCT_PREFIX||LA25_0==VOID||LA25_0==165||LA25_0==171||LA25_0==173||(LA25_0 >= 175 && LA25_0 <= 177)||LA25_0==179||(LA25_0 >= 183 && LA25_0 <= 184)||(LA25_0 >= 186 && LA25_0 <= 189)||(LA25_0 >= 191 && LA25_0 <= 193)||(LA25_0 >= 196 && LA25_0 <= 197)) ) {
                    alt25=1;
                }
                else if ( (LA25_0==L_FBR) ) {
                    alt25=2;
                }


                switch (alt25) {
            	case 1 :
            	    // Objcm.g:259:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block1175);
            	    block_internal_full95=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full95.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:259:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block1179);
            	    block96=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block96.getTree());

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);


            R_FBR97=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block1187); 
            R_FBR97_tree = 
            (Object)adaptor.create(R_FBR97)
            ;
            adaptor.addChild(root_0, R_FBR97_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_case_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_case"
    // Objcm.g:263:1: block_case : L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR ;
    public final ObjcmParser.block_case_return block_case() throws RecognitionException {
        ObjcmParser.block_case_return retval = new ObjcmParser.block_case_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR98=null;
        Token R_FBR102=null;
        ObjcmParser.block_internal_full_return block_internal_full99 =null;

        ObjcmParser.block_return block100 =null;

        ObjcmParser.default_stmt_return default_stmt101 =null;


        Object L_FBR98_tree=null;
        Object R_FBR102_tree=null;

        try {
            // Objcm.g:264:2: ( L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR )
            // Objcm.g:265:3: L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR98=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block_case1202); 
            L_FBR98_tree = 
            (Object)adaptor.create(L_FBR98)
            ;
            adaptor.addChild(root_0, L_FBR98_tree);


            // Objcm.g:266:4: ( block_internal_full | block )*
            loop26:
            do {
                int alt26=3;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==ASTERISK||LA26_0==BREAK_WORD||LA26_0==CONST_PREFIX||LA26_0==ENUM_PREFIX||LA26_0==ID||LA26_0==L_AND||LA26_0==L_BR||LA26_0==L_KBR||LA26_0==L_MINUS||LA26_0==L_MINUS_MINUS||LA26_0==L_NOT||LA26_0==L_PLUS||LA26_0==L_PLUS_PLUS||LA26_0==L_TILDA||LA26_0==NUMBER||LA26_0==SEMICOLON||(LA26_0 >= SINGLE_OP && LA26_0 <= SIZEOF)||LA26_0==STATIC_PREFIX||(LA26_0 >= STRING_LITERAL && LA26_0 <= STRING_LITERAL3)||LA26_0==STRUCT_PREFIX||LA26_0==VOID||LA26_0==165||LA26_0==171||LA26_0==173||(LA26_0 >= 175 && LA26_0 <= 177)||LA26_0==179||(LA26_0 >= 183 && LA26_0 <= 184)||(LA26_0 >= 186 && LA26_0 <= 189)||(LA26_0 >= 191 && LA26_0 <= 193)||(LA26_0 >= 196 && LA26_0 <= 197)) ) {
                    alt26=1;
                }
                else if ( (LA26_0==L_FBR) ) {
                    alt26=2;
                }


                switch (alt26) {
            	case 1 :
            	    // Objcm.g:266:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block_case1208);
            	    block_internal_full99=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full99.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:266:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block_case1212);
            	    block100=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block100.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            // Objcm.g:267:4: ( default_stmt )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==182) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // Objcm.g:267:4: default_stmt
                    {
                    pushFollow(FOLLOW_default_stmt_in_block_case1221);
                    default_stmt101=default_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt101.getTree());

                    }
                    break;

            }


            R_FBR102=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block_case1226); 
            R_FBR102_tree = 
            (Object)adaptor.create(R_FBR102)
            ;
            adaptor.addChild(root_0, R_FBR102_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_case"


    public static class block_internal_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_full"
    // Objcm.g:271:1: block_internal_full : block_internal ;
    public final ObjcmParser.block_internal_full_return block_internal_full() throws RecognitionException {
        ObjcmParser.block_internal_full_return retval = new ObjcmParser.block_internal_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_return block_internal103 =null;



        try {
            // Objcm.g:272:2: ( block_internal )
            // Objcm.g:272:4: block_internal
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_internal_in_block_internal_full1238);
            block_internal103=block_internal();

            state._fsp--;

            adaptor.addChild(root_0, block_internal103.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_full"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // Objcm.g:275:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper );
    public final ObjcmParser.block_internal_return block_internal() throws RecognitionException {
        ObjcmParser.block_internal_return retval = new ObjcmParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON107=null;
        Token SEMICOLON110=null;
        Token SEMICOLON120=null;
        Token SEMICOLON122=null;
        Token SEMICOLON124=null;
        Token SEMICOLON126=null;
        Token SEMICOLON127=null;
        ObjcmParser.try_stmt_return try_stmt104 =null;

        ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper105 =null;

        ObjcmParser.static_start_wrapper_return static_start_wrapper106 =null;

        ObjcmParser.do_stmt_return do_stmt108 =null;

        ObjcmParser.const_expression_return const_expression109 =null;

        ObjcmParser.variable_init_wrapper_return variable_init_wrapper111 =null;

        ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper112 =null;

        ObjcmParser.else_stmt_return else_stmt113 =null;

        ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper114 =null;

        ObjcmParser.return_stmt_return return_stmt115 =null;

        ObjcmParser.for_stmt_wrapper_return for_stmt_wrapper116 =null;

        ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper117 =null;

        ObjcmParser.single_operators_return single_operators118 =null;

        ObjcmParser.struct_variable_return struct_variable119 =null;

        ObjcmParser.enum_variable_return enum_variable121 =null;

        ObjcmParser.typeof_started_return typeof_started123 =null;

        ObjcmParser.known_type_started_return known_type_started125 =null;

        ObjcmParser.goto_wrapper_return goto_wrapper128 =null;


        Object SEMICOLON107_tree=null;
        Object SEMICOLON110_tree=null;
        Object SEMICOLON120_tree=null;
        Object SEMICOLON122_tree=null;
        Object SEMICOLON124_tree=null;
        Object SEMICOLON126_tree=null;
        Object SEMICOLON127_tree=null;

        try {
            // Objcm.g:276:2: ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper )
            int alt28=19;
            alt28 = dfa28.predict(input);
            switch (alt28) {
                case 1 :
                    // Objcm.g:276:4: try_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_in_block_internal1249);
                    try_stmt104=try_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, try_stmt104.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:277:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1254);
                    throw_stmt_wrapper105=throw_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, throw_stmt_wrapper105.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:278:4: static_start_wrapper SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_start_wrapper_in_block_internal1259);
                    static_start_wrapper106=static_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_start_wrapper106.getTree());

                    SEMICOLON107=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1261); 
                    SEMICOLON107_tree = 
                    (Object)adaptor.create(SEMICOLON107)
                    ;
                    adaptor.addChild(root_0, SEMICOLON107_tree);


                    }
                    break;
                case 4 :
                    // Objcm.g:279:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1266);
                    do_stmt108=do_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, do_stmt108.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:280:4: const_expression SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expression_in_block_internal1271);
                    const_expression109=const_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expression109.getTree());

                    SEMICOLON110=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1273); 
                    SEMICOLON110_tree = 
                    (Object)adaptor.create(SEMICOLON110)
                    ;
                    adaptor.addChild(root_0, SEMICOLON110_tree);


                    }
                    break;
                case 6 :
                    // Objcm.g:281:4: variable_init_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_init_wrapper_in_block_internal1278);
                    variable_init_wrapper111=variable_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, variable_init_wrapper111.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:282:4: if_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_wrapper_in_block_internal1283);
                    if_stmt_wrapper112=if_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, if_stmt_wrapper112.getTree());

                    }
                    break;
                case 8 :
                    // Objcm.g:283:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1288);
                    else_stmt113=else_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, else_stmt113.getTree());

                    }
                    break;
                case 9 :
                    // Objcm.g:284:4: switch_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_wrapper_in_block_internal1293);
                    switch_stmt_wrapper114=switch_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, switch_stmt_wrapper114.getTree());

                    }
                    break;
                case 10 :
                    // Objcm.g:285:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1298);
                    return_stmt115=return_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, return_stmt115.getTree());

                    }
                    break;
                case 11 :
                    // Objcm.g:286:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1303);
                    for_stmt_wrapper116=for_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_wrapper116.getTree());

                    }
                    break;
                case 12 :
                    // Objcm.g:287:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1308);
                    while_stmt_wrapper117=while_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, while_stmt_wrapper117.getTree());

                    }
                    break;
                case 13 :
                    // Objcm.g:288:4: single_operators
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_operators_in_block_internal1313);
                    single_operators118=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators118.getTree());

                    }
                    break;
                case 14 :
                    // Objcm.g:289:4: struct_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_variable_in_block_internal1318);
                    struct_variable119=struct_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_variable119.getTree());

                    SEMICOLON120=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1320); 
                    SEMICOLON120_tree = 
                    (Object)adaptor.create(SEMICOLON120)
                    ;
                    adaptor.addChild(root_0, SEMICOLON120_tree);


                    }
                    break;
                case 15 :
                    // Objcm.g:290:4: enum_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_enum_variable_in_block_internal1325);
                    enum_variable121=enum_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, enum_variable121.getTree());

                    SEMICOLON122=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1327); 
                    SEMICOLON122_tree = 
                    (Object)adaptor.create(SEMICOLON122)
                    ;
                    adaptor.addChild(root_0, SEMICOLON122_tree);


                    }
                    break;
                case 16 :
                    // Objcm.g:291:4: typeof_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typeof_started_in_block_internal1332);
                    typeof_started123=typeof_started();

                    state._fsp--;

                    adaptor.addChild(root_0, typeof_started123.getTree());

                    SEMICOLON124=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1334); 
                    SEMICOLON124_tree = 
                    (Object)adaptor.create(SEMICOLON124)
                    ;
                    adaptor.addChild(root_0, SEMICOLON124_tree);


                    }
                    break;
                case 17 :
                    // Objcm.g:292:4: known_type_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_known_type_started_in_block_internal1339);
                    known_type_started125=known_type_started();

                    state._fsp--;

                    adaptor.addChild(root_0, known_type_started125.getTree());

                    SEMICOLON126=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1341); 
                    SEMICOLON126_tree = 
                    (Object)adaptor.create(SEMICOLON126)
                    ;
                    adaptor.addChild(root_0, SEMICOLON126_tree);


                    }
                    break;
                case 18 :
                    // Objcm.g:293:4: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    SEMICOLON127=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1346); 
                    SEMICOLON127_tree = 
                    (Object)adaptor.create(SEMICOLON127)
                    ;
                    adaptor.addChild(root_0, SEMICOLON127_tree);


                    }
                    break;
                case 19 :
                    // Objcm.g:294:4: goto_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_wrapper_in_block_internal1352);
                    goto_wrapper128=goto_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, goto_wrapper128.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class goto_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_wrapper"
    // Objcm.g:297:1: goto_wrapper : goto_operator -> ^( GOTO goto_operator ) ;
    public final ObjcmParser.goto_wrapper_return goto_wrapper() throws RecognitionException {
        ObjcmParser.goto_wrapper_return retval = new ObjcmParser.goto_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.goto_operator_return goto_operator129 =null;


        RewriteRuleSubtreeStream stream_goto_operator=new RewriteRuleSubtreeStream(adaptor,"rule goto_operator");
        try {
            // Objcm.g:298:2: ( goto_operator -> ^( GOTO goto_operator ) )
            // Objcm.g:298:4: goto_operator
            {
            pushFollow(FOLLOW_goto_operator_in_goto_wrapper1364);
            goto_operator129=goto_operator();

            state._fsp--;

            stream_goto_operator.add(goto_operator129.getTree());

            // AST REWRITE
            // elements: goto_operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 298:18: -> ^( GOTO goto_operator )
            {
                // Objcm.g:298:21: ^( GOTO goto_operator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GOTO, "GOTO")
                , root_1);

                adaptor.addChild(root_1, stream_goto_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_wrapper"


    public static class goto_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_operator"
    // Objcm.g:300:1: goto_operator : 'goto' ID SEMICOLON ;
    public final ObjcmParser.goto_operator_return goto_operator() throws RecognitionException {
        ObjcmParser.goto_operator_return retval = new ObjcmParser.goto_operator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal130=null;
        Token ID131=null;
        Token SEMICOLON132=null;

        Object string_literal130_tree=null;
        Object ID131_tree=null;
        Object SEMICOLON132_tree=null;

        try {
            // Objcm.g:301:2: ( 'goto' ID SEMICOLON )
            // Objcm.g:301:4: 'goto' ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal130=(Token)match(input,187,FOLLOW_187_in_goto_operator1381); 
            string_literal130_tree = 
            (Object)adaptor.create(string_literal130)
            ;
            adaptor.addChild(root_0, string_literal130_tree);


            ID131=(Token)match(input,ID,FOLLOW_ID_in_goto_operator1383); 
            ID131_tree = 
            (Object)adaptor.create(ID131)
            ;
            adaptor.addChild(root_0, ID131_tree);


            SEMICOLON132=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_goto_operator1385); 
            SEMICOLON132_tree = 
            (Object)adaptor.create(SEMICOLON132)
            ;
            adaptor.addChild(root_0, SEMICOLON132_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_operator"


    public static class variable_init_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init_wrapper"
    // Objcm.g:303:1: variable_init_wrapper : variable_init -> ^( VARIABLE_INIT variable_init ) ;
    public final ObjcmParser.variable_init_wrapper_return variable_init_wrapper() throws RecognitionException {
        ObjcmParser.variable_init_wrapper_return retval = new ObjcmParser.variable_init_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.variable_init_return variable_init133 =null;


        RewriteRuleSubtreeStream stream_variable_init=new RewriteRuleSubtreeStream(adaptor,"rule variable_init");
        try {
            // Objcm.g:304:2: ( variable_init -> ^( VARIABLE_INIT variable_init ) )
            // Objcm.g:304:4: variable_init
            {
            pushFollow(FOLLOW_variable_init_in_variable_init_wrapper1396);
            variable_init133=variable_init();

            state._fsp--;

            stream_variable_init.add(variable_init133.getTree());

            // AST REWRITE
            // elements: variable_init
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 304:18: -> ^( VARIABLE_INIT variable_init )
            {
                // Objcm.g:304:21: ^( VARIABLE_INIT variable_init )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_INIT, "VARIABLE_INIT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_init.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init_wrapper"


    public static class variable_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init"
    // Objcm.g:306:1: variable_init : full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) ;
    public final ObjcmParser.variable_init_return variable_init() throws RecognitionException {
        ObjcmParser.variable_init_return retval = new ObjcmParser.variable_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON136=null;
        Token COLON137=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper134 =null;

        ObjcmParser.full_expr2_return full_expr2135 =null;


        Object SEMICOLON136_tree=null;
        Object COLON137_tree=null;

        try {
            // Objcm.g:307:2: ( full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) )
            // Objcm.g:307:4: full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_full_expr_wrapper_in_variable_init1414);
            full_expr_wrapper134=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper134.getTree());

            // Objcm.g:307:22: ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==ID||LA30_0==SEMICOLON||LA30_0==VOID||LA30_0==189) ) {
                alt30=1;
            }
            else if ( (LA30_0==COLON) ) {
                alt30=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;

            }
            switch (alt30) {
                case 1 :
                    // Objcm.g:307:23: ( ( full_expr2 )? SEMICOLON )
                    {
                    // Objcm.g:307:23: ( ( full_expr2 )? SEMICOLON )
                    // Objcm.g:307:24: ( full_expr2 )? SEMICOLON
                    {
                    // Objcm.g:307:24: ( full_expr2 )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==ID||LA29_0==VOID||LA29_0==189) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // Objcm.g:307:24: full_expr2
                            {
                            pushFollow(FOLLOW_full_expr2_in_variable_init1418);
                            full_expr2135=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2135.getTree());

                            }
                            break;

                    }


                    SEMICOLON136=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_variable_init1421); 
                    SEMICOLON136_tree = 
                    (Object)adaptor.create(SEMICOLON136)
                    ;
                    adaptor.addChild(root_0, SEMICOLON136_tree);


                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:307:49: COLON
                    {
                    COLON137=(Token)match(input,COLON,FOLLOW_COLON_in_variable_init1426); 
                    COLON137_tree = 
                    (Object)adaptor.create(COLON137)
                    ;
                    adaptor.addChild(root_0, COLON137_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init"


    public static class known_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_type_started"
    // Objcm.g:309:1: known_type_started : known_types ( ASTERISK )* full_expr2 ;
    public final ObjcmParser.known_type_started_return known_type_started() throws RecognitionException {
        ObjcmParser.known_type_started_return retval = new ObjcmParser.known_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK139=null;
        ObjcmParser.known_types_return known_types138 =null;

        ObjcmParser.full_expr2_return full_expr2140 =null;


        Object ASTERISK139_tree=null;

        try {
            // Objcm.g:310:2: ( known_types ( ASTERISK )* full_expr2 )
            // Objcm.g:310:4: known_types ( ASTERISK )* full_expr2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_known_types_in_known_type_started1438);
            known_types138=known_types();

            state._fsp--;

            adaptor.addChild(root_0, known_types138.getTree());

            // Objcm.g:310:16: ( ASTERISK )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==ASTERISK) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // Objcm.g:310:16: ASTERISK
            	    {
            	    ASTERISK139=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_known_type_started1440); 
            	    ASTERISK139_tree = 
            	    (Object)adaptor.create(ASTERISK139)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK139_tree);


            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            pushFollow(FOLLOW_full_expr2_in_known_type_started1443);
            full_expr2140=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2140.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_type_started"


    public static class typeof_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof_started"
    // Objcm.g:312:1: typeof_started : typeof full_expr_wrapper ;
    public final ObjcmParser.typeof_started_return typeof_started() throws RecognitionException {
        ObjcmParser.typeof_started_return retval = new ObjcmParser.typeof_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typeof_return typeof141 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper142 =null;



        try {
            // Objcm.g:313:2: ( typeof full_expr_wrapper )
            // Objcm.g:313:4: typeof full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typeof_in_typeof_started1455);
            typeof141=typeof();

            state._fsp--;

            adaptor.addChild(root_0, typeof141.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_typeof_started1457);
            full_expr_wrapper142=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper142.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof_started"


    public static class struct_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_variable"
    // Objcm.g:316:1: struct_variable : STRUCT_PREFIX full_expr_wrapper ;
    public final ObjcmParser.struct_variable_return struct_variable() throws RecognitionException {
        ObjcmParser.struct_variable_return retval = new ObjcmParser.struct_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX143=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper144 =null;


        Object STRUCT_PREFIX143_tree=null;

        try {
            // Objcm.g:317:2: ( STRUCT_PREFIX full_expr_wrapper )
            // Objcm.g:317:4: STRUCT_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX143=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_variable1470); 
            STRUCT_PREFIX143_tree = 
            (Object)adaptor.create(STRUCT_PREFIX143)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX143_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_struct_variable1472);
            full_expr_wrapper144=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper144.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_variable"


    public static class enum_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_variable"
    // Objcm.g:319:1: enum_variable : ENUM_PREFIX full_expr_wrapper ;
    public final ObjcmParser.enum_variable_return enum_variable() throws RecognitionException {
        ObjcmParser.enum_variable_return retval = new ObjcmParser.enum_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX145=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper146 =null;


        Object ENUM_PREFIX145_tree=null;

        try {
            // Objcm.g:320:2: ( ENUM_PREFIX full_expr_wrapper )
            // Objcm.g:320:4: ENUM_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX145=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_enum_variable1481); 
            ENUM_PREFIX145_tree = 
            (Object)adaptor.create(ENUM_PREFIX145)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX145_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_enum_variable1483);
            full_expr_wrapper146=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper146.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_variable"


    public static class const_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expression"
    // Objcm.g:322:1: const_expression : CONST_PREFIX full_expr_wrapper ;
    public final ObjcmParser.const_expression_return const_expression() throws RecognitionException {
        ObjcmParser.const_expression_return retval = new ObjcmParser.const_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX147=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper148 =null;


        Object CONST_PREFIX147_tree=null;

        try {
            // Objcm.g:323:2: ( CONST_PREFIX full_expr_wrapper )
            // Objcm.g:323:4: CONST_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            CONST_PREFIX147=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_const_expression1494); 
            CONST_PREFIX147_tree = 
            (Object)adaptor.create(CONST_PREFIX147)
            ;
            adaptor.addChild(root_0, CONST_PREFIX147_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_const_expression1496);
            full_expr_wrapper148=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper148.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expression"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // Objcm.g:325:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcmParser.throw_stmt_wrapper_return retval = new ObjcmParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.throw_stmt_return throw_stmt149 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // Objcm.g:326:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // Objcm.g:326:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper1505);
            throw_stmt149=throw_stmt();

            state._fsp--;

            stream_throw_stmt.add(throw_stmt149.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 326:15: -> ^( THROW_STMT throw_stmt )
            {
                // Objcm.g:326:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // Objcm.g:328:1: throw_stmt : '@throw' SEMICOLON ;
    public final ObjcmParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcmParser.throw_stmt_return retval = new ObjcmParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal150=null;
        Token SEMICOLON151=null;

        Object string_literal150_tree=null;
        Object SEMICOLON151_tree=null;

        try {
            // Objcm.g:329:2: ( '@throw' SEMICOLON )
            // Objcm.g:329:4: '@throw' SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal150=(Token)match(input,175,FOLLOW_175_in_throw_stmt1522); 
            string_literal150_tree = 
            (Object)adaptor.create(string_literal150)
            ;
            adaptor.addChild(root_0, string_literal150_tree);


            SEMICOLON151=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_throw_stmt1525); 
            SEMICOLON151_tree = 
            (Object)adaptor.create(SEMICOLON151)
            ;
            adaptor.addChild(root_0, SEMICOLON151_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class try_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt"
    // Objcm.g:332:1: try_stmt : '@try' block ( catch_stmt )* ( '@finally' block )? ;
    public final ObjcmParser.try_stmt_return try_stmt() throws RecognitionException {
        ObjcmParser.try_stmt_return retval = new ObjcmParser.try_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal152=null;
        Token string_literal155=null;
        ObjcmParser.block_return block153 =null;

        ObjcmParser.catch_stmt_return catch_stmt154 =null;

        ObjcmParser.block_return block156 =null;


        Object string_literal152_tree=null;
        Object string_literal155_tree=null;

        try {
            // Objcm.g:332:9: ( '@try' block ( catch_stmt )* ( '@finally' block )? )
            // Objcm.g:332:11: '@try' block ( catch_stmt )* ( '@finally' block )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal152=(Token)match(input,176,FOLLOW_176_in_try_stmt1536); 
            string_literal152_tree = 
            (Object)adaptor.create(string_literal152)
            ;
            adaptor.addChild(root_0, string_literal152_tree);


            pushFollow(FOLLOW_block_in_try_stmt1539);
            block153=block();

            state._fsp--;

            adaptor.addChild(root_0, block153.getTree());

            // Objcm.g:332:26: ( catch_stmt )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==164) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // Objcm.g:332:26: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt1542);
            	    catch_stmt154=catch_stmt();

            	    state._fsp--;

            	    adaptor.addChild(root_0, catch_stmt154.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            // Objcm.g:332:38: ( '@finally' block )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==167) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // Objcm.g:332:39: '@finally' block
                    {
                    string_literal155=(Token)match(input,167,FOLLOW_167_in_try_stmt1546); 
                    string_literal155_tree = 
                    (Object)adaptor.create(string_literal155)
                    ;
                    adaptor.addChild(root_0, string_literal155_tree);


                    pushFollow(FOLLOW_block_in_try_stmt1549);
                    block156=block();

                    state._fsp--;

                    adaptor.addChild(root_0, block156.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // Objcm.g:335:1: catch_stmt : '@catch' L_BR ID ( ASTERISK )* ID R_BR block ;
    public final ObjcmParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcmParser.catch_stmt_return retval = new ObjcmParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal157=null;
        Token L_BR158=null;
        Token ID159=null;
        Token ASTERISK160=null;
        Token ID161=null;
        Token R_BR162=null;
        ObjcmParser.block_return block163 =null;


        Object string_literal157_tree=null;
        Object L_BR158_tree=null;
        Object ID159_tree=null;
        Object ASTERISK160_tree=null;
        Object ID161_tree=null;
        Object R_BR162_tree=null;

        try {
            // Objcm.g:336:2: ( '@catch' L_BR ID ( ASTERISK )* ID R_BR block )
            // Objcm.g:336:4: '@catch' L_BR ID ( ASTERISK )* ID R_BR block
            {
            root_0 = (Object)adaptor.nil();


            string_literal157=(Token)match(input,164,FOLLOW_164_in_catch_stmt1563); 
            string_literal157_tree = 
            (Object)adaptor.create(string_literal157)
            ;
            adaptor.addChild(root_0, string_literal157_tree);


            L_BR158=(Token)match(input,L_BR,FOLLOW_L_BR_in_catch_stmt1566); 
            L_BR158_tree = 
            (Object)adaptor.create(L_BR158)
            ;
            adaptor.addChild(root_0, L_BR158_tree);


            ID159=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1569); 
            ID159_tree = 
            (Object)adaptor.create(ID159)
            ;
            adaptor.addChild(root_0, ID159_tree);


            // Objcm.g:336:24: ( ASTERISK )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==ASTERISK) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // Objcm.g:336:24: ASTERISK
            	    {
            	    ASTERISK160=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_catch_stmt1572); 
            	    ASTERISK160_tree = 
            	    (Object)adaptor.create(ASTERISK160)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK160_tree);


            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            ID161=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1575); 
            ID161_tree = 
            (Object)adaptor.create(ID161)
            ;
            adaptor.addChild(root_0, ID161_tree);


            R_BR162=(Token)match(input,R_BR,FOLLOW_R_BR_in_catch_stmt1578); 
            R_BR162_tree = 
            (Object)adaptor.create(R_BR162)
            ;
            adaptor.addChild(root_0, R_BR162_tree);


            pushFollow(FOLLOW_block_in_catch_stmt1581);
            block163=block();

            state._fsp--;

            adaptor.addChild(root_0, block163.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class switch_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt_wrapper"
    // Objcm.g:339:1: switch_stmt_wrapper : switch_stmt -> ^( SWITCH switch_stmt ) ;
    public final ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper() throws RecognitionException {
        ObjcmParser.switch_stmt_wrapper_return retval = new ObjcmParser.switch_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.switch_stmt_return switch_stmt164 =null;


        RewriteRuleSubtreeStream stream_switch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule switch_stmt");
        try {
            // Objcm.g:340:2: ( switch_stmt -> ^( SWITCH switch_stmt ) )
            // Objcm.g:340:4: switch_stmt
            {
            pushFollow(FOLLOW_switch_stmt_in_switch_stmt_wrapper1594);
            switch_stmt164=switch_stmt();

            state._fsp--;

            stream_switch_stmt.add(switch_stmt164.getTree());

            // AST REWRITE
            // elements: switch_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 340:16: -> ^( SWITCH switch_stmt )
            {
                // Objcm.g:340:19: ^( SWITCH switch_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH, "SWITCH")
                , root_1);

                adaptor.addChild(root_1, stream_switch_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt_wrapper"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // Objcm.g:342:1: switch_stmt : 'switch' L_BR switch_expr R_BR switch_body_wrapper ;
    public final ObjcmParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcmParser.switch_stmt_return retval = new ObjcmParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal165=null;
        Token L_BR166=null;
        Token R_BR168=null;
        ObjcmParser.switch_expr_return switch_expr167 =null;

        ObjcmParser.switch_body_wrapper_return switch_body_wrapper169 =null;


        Object string_literal165_tree=null;
        Object L_BR166_tree=null;
        Object R_BR168_tree=null;

        try {
            // Objcm.g:343:2: ( 'switch' L_BR switch_expr R_BR switch_body_wrapper )
            // Objcm.g:343:4: 'switch' L_BR switch_expr R_BR switch_body_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal165=(Token)match(input,193,FOLLOW_193_in_switch_stmt1611); 
            string_literal165_tree = 
            (Object)adaptor.create(string_literal165)
            ;
            adaptor.addChild(root_0, string_literal165_tree);


            L_BR166=(Token)match(input,L_BR,FOLLOW_L_BR_in_switch_stmt1614); 
            L_BR166_tree = 
            (Object)adaptor.create(L_BR166)
            ;
            adaptor.addChild(root_0, L_BR166_tree);


            pushFollow(FOLLOW_switch_expr_in_switch_stmt1617);
            switch_expr167=switch_expr();

            state._fsp--;

            adaptor.addChild(root_0, switch_expr167.getTree());

            R_BR168=(Token)match(input,R_BR,FOLLOW_R_BR_in_switch_stmt1619); 
            R_BR168_tree = 
            (Object)adaptor.create(R_BR168)
            ;
            adaptor.addChild(root_0, R_BR168_tree);


            pushFollow(FOLLOW_switch_body_wrapper_in_switch_stmt1625);
            switch_body_wrapper169=switch_body_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, switch_body_wrapper169.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body_wrapper"
    // Objcm.g:347:1: switch_body_wrapper : L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) ;
    public final ObjcmParser.switch_body_wrapper_return switch_body_wrapper() throws RecognitionException {
        ObjcmParser.switch_body_wrapper_return retval = new ObjcmParser.switch_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR170=null;
        Token R_FBR172=null;
        ObjcmParser.switch_body_return switch_body171 =null;


        Object L_FBR170_tree=null;
        Object R_FBR172_tree=null;
        RewriteRuleTokenStream stream_R_FBR=new RewriteRuleTokenStream(adaptor,"token R_FBR");
        RewriteRuleTokenStream stream_L_FBR=new RewriteRuleTokenStream(adaptor,"token L_FBR");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // Objcm.g:348:2: ( L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) )
            // Objcm.g:348:4: L_FBR switch_body R_FBR
            {
            L_FBR170=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_switch_body_wrapper1638);  
            stream_L_FBR.add(L_FBR170);


            pushFollow(FOLLOW_switch_body_in_switch_body_wrapper1640);
            switch_body171=switch_body();

            state._fsp--;

            stream_switch_body.add(switch_body171.getTree());

            R_FBR172=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_switch_body_wrapper1642);  
            stream_R_FBR.add(R_FBR172);


            // AST REWRITE
            // elements: switch_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 348:28: -> ^( SWITCH_BODY switch_body )
            {
                // Objcm.g:348:31: ^( SWITCH_BODY switch_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_BODY, "SWITCH_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_switch_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body_wrapper"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // Objcm.g:350:1: switch_body : ( block_internal_full )* ( switch_internal )* ;
    public final ObjcmParser.switch_body_return switch_body() throws RecognitionException {
        ObjcmParser.switch_body_return retval = new ObjcmParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_full_return block_internal_full173 =null;

        ObjcmParser.switch_internal_return switch_internal174 =null;



        try {
            // Objcm.g:351:2: ( ( block_internal_full )* ( switch_internal )* )
            // Objcm.g:351:4: ( block_internal_full )* ( switch_internal )*
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:351:4: ( block_internal_full )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==ASTERISK||LA35_0==BREAK_WORD||LA35_0==CONST_PREFIX||LA35_0==ENUM_PREFIX||LA35_0==ID||LA35_0==L_AND||LA35_0==L_BR||LA35_0==L_KBR||LA35_0==L_MINUS||LA35_0==L_MINUS_MINUS||LA35_0==L_NOT||LA35_0==L_PLUS||LA35_0==L_PLUS_PLUS||LA35_0==L_TILDA||LA35_0==NUMBER||LA35_0==SEMICOLON||(LA35_0 >= SINGLE_OP && LA35_0 <= SIZEOF)||LA35_0==STATIC_PREFIX||(LA35_0 >= STRING_LITERAL && LA35_0 <= STRING_LITERAL3)||LA35_0==STRUCT_PREFIX||LA35_0==VOID||LA35_0==165||LA35_0==171||LA35_0==173||(LA35_0 >= 175 && LA35_0 <= 177)||LA35_0==179||(LA35_0 >= 183 && LA35_0 <= 184)||(LA35_0 >= 186 && LA35_0 <= 189)||(LA35_0 >= 191 && LA35_0 <= 193)||(LA35_0 >= 196 && LA35_0 <= 197)) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // Objcm.g:351:4: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_switch_body1661);
            	    block_internal_full173=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full173.getTree());

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            // Objcm.g:352:3: ( switch_internal )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==180||LA36_0==182) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // Objcm.g:352:3: switch_internal
            	    {
            	    pushFollow(FOLLOW_switch_internal_in_switch_body1666);
            	    switch_internal174=switch_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, switch_internal174.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class switch_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_expr"
    // Objcm.g:355:1: switch_expr : classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) ;
    public final ObjcmParser.switch_expr_return switch_expr() throws RecognitionException {
        ObjcmParser.switch_expr_return retval = new ObjcmParser.switch_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp175 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:356:2: ( classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) )
            // Objcm.g:356:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_switch_expr1679);
            classical_expr_wrp175=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp175.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 356:23: -> ^( SWITCH_EXPRESSION classical_expr_wrp )
            {
                // Objcm.g:356:26: ^( SWITCH_EXPRESSION classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_EXPRESSION, "SWITCH_EXPRESSION")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_expr"


    public static class switch_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_internal"
    // Objcm.g:358:1: switch_internal : ( case_stmt_wrapper | default_stmt_wrapper );
    public final ObjcmParser.switch_internal_return switch_internal() throws RecognitionException {
        ObjcmParser.switch_internal_return retval = new ObjcmParser.switch_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper176 =null;

        ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper177 =null;



        try {
            // Objcm.g:359:2: ( case_stmt_wrapper | default_stmt_wrapper )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==180) ) {
                alt37=1;
            }
            else if ( (LA37_0==182) ) {
                alt37=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // Objcm.g:359:4: case_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_wrapper_in_switch_internal1696);
                    case_stmt_wrapper176=case_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_stmt_wrapper176.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:360:5: default_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_wrapper_in_switch_internal1702);
                    default_stmt_wrapper177=default_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt_wrapper177.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_internal"


    public static class case_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt_wrapper"
    // Objcm.g:362:1: case_stmt_wrapper : case_stmt -> ^( CASE_STMT case_stmt ) ;
    public final ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper() throws RecognitionException {
        ObjcmParser.case_stmt_wrapper_return retval = new ObjcmParser.case_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_return case_stmt178 =null;


        RewriteRuleSubtreeStream stream_case_stmt=new RewriteRuleSubtreeStream(adaptor,"rule case_stmt");
        try {
            // Objcm.g:363:2: ( case_stmt -> ^( CASE_STMT case_stmt ) )
            // Objcm.g:363:4: case_stmt
            {
            pushFollow(FOLLOW_case_stmt_in_case_stmt_wrapper1711);
            case_stmt178=case_stmt();

            state._fsp--;

            stream_case_stmt.add(case_stmt178.getTree());

            // AST REWRITE
            // elements: case_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 363:14: -> ^( CASE_STMT case_stmt )
            {
                // Objcm.g:363:17: ^( CASE_STMT case_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_case_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt_wrapper"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // Objcm.g:365:1: case_stmt : 'case' case_expr_wrapper COLON ( case_body_wrapper )? ;
    public final ObjcmParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcmParser.case_stmt_return retval = new ObjcmParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal179=null;
        Token COLON181=null;
        ObjcmParser.case_expr_wrapper_return case_expr_wrapper180 =null;

        ObjcmParser.case_body_wrapper_return case_body_wrapper182 =null;


        Object string_literal179_tree=null;
        Object COLON181_tree=null;

        try {
            // Objcm.g:366:2: ( 'case' case_expr_wrapper COLON ( case_body_wrapper )? )
            // Objcm.g:366:4: 'case' case_expr_wrapper COLON ( case_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal179=(Token)match(input,180,FOLLOW_180_in_case_stmt1728); 
            string_literal179_tree = 
            (Object)adaptor.create(string_literal179)
            ;
            adaptor.addChild(root_0, string_literal179_tree);


            pushFollow(FOLLOW_case_expr_wrapper_in_case_stmt1731);
            case_expr_wrapper180=case_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, case_expr_wrapper180.getTree());

            COLON181=(Token)match(input,COLON,FOLLOW_COLON_in_case_stmt1734); 
            COLON181_tree = 
            (Object)adaptor.create(COLON181)
            ;
            adaptor.addChild(root_0, COLON181_tree);


            // Objcm.g:367:3: ( case_body_wrapper )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==ASTERISK||LA38_0==BREAK_WORD||LA38_0==CONST_PREFIX||LA38_0==ENUM_PREFIX||LA38_0==ID||LA38_0==L_AND||LA38_0==L_BR||(LA38_0 >= L_FBR && LA38_0 <= L_KBR)||LA38_0==L_MINUS||LA38_0==L_MINUS_MINUS||LA38_0==L_NOT||LA38_0==L_PLUS||LA38_0==L_PLUS_PLUS||LA38_0==L_TILDA||LA38_0==NUMBER||LA38_0==SEMICOLON||(LA38_0 >= SINGLE_OP && LA38_0 <= SIZEOF)||LA38_0==STATIC_PREFIX||(LA38_0 >= STRING_LITERAL && LA38_0 <= STRING_LITERAL3)||LA38_0==STRUCT_PREFIX||LA38_0==VOID||LA38_0==165||LA38_0==171||LA38_0==173||(LA38_0 >= 175 && LA38_0 <= 177)||LA38_0==179||(LA38_0 >= 183 && LA38_0 <= 184)||(LA38_0 >= 186 && LA38_0 <= 189)||(LA38_0 >= 191 && LA38_0 <= 193)||(LA38_0 >= 196 && LA38_0 <= 197)) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // Objcm.g:367:3: case_body_wrapper
                    {
                    pushFollow(FOLLOW_case_body_wrapper_in_case_stmt1739);
                    case_body_wrapper182=case_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_body_wrapper182.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class case_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body_wrapper"
    // Objcm.g:370:1: case_body_wrapper : case_body -> ^( CASE_BODY case_body ) ;
    public final ObjcmParser.case_body_wrapper_return case_body_wrapper() throws RecognitionException {
        ObjcmParser.case_body_wrapper_return retval = new ObjcmParser.case_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_body_return case_body183 =null;


        RewriteRuleSubtreeStream stream_case_body=new RewriteRuleSubtreeStream(adaptor,"rule case_body");
        try {
            // Objcm.g:371:2: ( case_body -> ^( CASE_BODY case_body ) )
            // Objcm.g:371:4: case_body
            {
            pushFollow(FOLLOW_case_body_in_case_body_wrapper1753);
            case_body183=case_body();

            state._fsp--;

            stream_case_body.add(case_body183.getTree());

            // AST REWRITE
            // elements: case_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 371:14: -> ^( CASE_BODY case_body )
            {
                // Objcm.g:371:17: ^( CASE_BODY case_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_BODY, "CASE_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_case_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body_wrapper"


    public static class case_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body"
    // Objcm.g:373:1: case_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.case_body_return case_body() throws RecognitionException {
        ObjcmParser.case_body_return retval = new ObjcmParser.case_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break184 =null;

        ObjcmParser.block_internal_full_return block_internal_full185 =null;



        try {
            // Objcm.g:374:2: ( block_break | ( block_internal_full )+ )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==L_FBR) ) {
                alt40=1;
            }
            else if ( (LA40_0==ASTERISK||LA40_0==BREAK_WORD||LA40_0==CONST_PREFIX||LA40_0==ENUM_PREFIX||LA40_0==ID||LA40_0==L_AND||LA40_0==L_BR||LA40_0==L_KBR||LA40_0==L_MINUS||LA40_0==L_MINUS_MINUS||LA40_0==L_NOT||LA40_0==L_PLUS||LA40_0==L_PLUS_PLUS||LA40_0==L_TILDA||LA40_0==NUMBER||LA40_0==SEMICOLON||(LA40_0 >= SINGLE_OP && LA40_0 <= SIZEOF)||LA40_0==STATIC_PREFIX||(LA40_0 >= STRING_LITERAL && LA40_0 <= STRING_LITERAL3)||LA40_0==STRUCT_PREFIX||LA40_0==VOID||LA40_0==165||LA40_0==171||LA40_0==173||(LA40_0 >= 175 && LA40_0 <= 177)||LA40_0==179||(LA40_0 >= 183 && LA40_0 <= 184)||(LA40_0 >= 186 && LA40_0 <= 189)||(LA40_0 >= 191 && LA40_0 <= 193)||(LA40_0 >= 196 && LA40_0 <= 197)) ) {
                alt40=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // Objcm.g:374:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_case_body1772);
                    block_break184=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break184.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:375:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:375:5: ( block_internal_full )+
                    int cnt39=0;
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==ASTERISK||LA39_0==BREAK_WORD||LA39_0==CONST_PREFIX||LA39_0==ENUM_PREFIX||LA39_0==ID||LA39_0==L_AND||LA39_0==L_BR||LA39_0==L_KBR||LA39_0==L_MINUS||LA39_0==L_MINUS_MINUS||LA39_0==L_NOT||LA39_0==L_PLUS||LA39_0==L_PLUS_PLUS||LA39_0==L_TILDA||LA39_0==NUMBER||LA39_0==SEMICOLON||(LA39_0 >= SINGLE_OP && LA39_0 <= SIZEOF)||LA39_0==STATIC_PREFIX||(LA39_0 >= STRING_LITERAL && LA39_0 <= STRING_LITERAL3)||LA39_0==STRUCT_PREFIX||LA39_0==VOID||LA39_0==165||LA39_0==171||LA39_0==173||(LA39_0 >= 175 && LA39_0 <= 177)||LA39_0==179||(LA39_0 >= 183 && LA39_0 <= 184)||(LA39_0 >= 186 && LA39_0 <= 189)||(LA39_0 >= 191 && LA39_0 <= 193)||(LA39_0 >= 196 && LA39_0 <= 197)) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    // Objcm.g:375:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_case_body1779);
                    	    block_internal_full185=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full185.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt39 >= 1 ) break loop39;
                                EarlyExitException eee =
                                    new EarlyExitException(39, input);
                                throw eee;
                        }
                        cnt39++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body"


    public static class case_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr_wrapper"
    // Objcm.g:378:1: case_expr_wrapper : case_expr -> ^( CASE_EXPR case_expr ) ;
    public final ObjcmParser.case_expr_wrapper_return case_expr_wrapper() throws RecognitionException {
        ObjcmParser.case_expr_wrapper_return retval = new ObjcmParser.case_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_expr_return case_expr186 =null;


        RewriteRuleSubtreeStream stream_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule case_expr");
        try {
            // Objcm.g:379:2: ( case_expr -> ^( CASE_EXPR case_expr ) )
            // Objcm.g:379:4: case_expr
            {
            pushFollow(FOLLOW_case_expr_in_case_expr_wrapper1795);
            case_expr186=case_expr();

            state._fsp--;

            stream_case_expr.add(case_expr186.getTree());

            // AST REWRITE
            // elements: case_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 379:14: -> ^( CASE_EXPR case_expr )
            {
                // Objcm.g:379:17: ^( CASE_EXPR case_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_EXPR, "CASE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_case_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr_wrapper"


    public static class case_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr"
    // Objcm.g:381:1: case_expr : ( const_expr | ID );
    public final ObjcmParser.case_expr_return case_expr() throws RecognitionException {
        ObjcmParser.case_expr_return retval = new ObjcmParser.case_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID188=null;
        ObjcmParser.const_expr_return const_expr187 =null;


        Object ID188_tree=null;

        try {
            // Objcm.g:382:2: ( const_expr | ID )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==NUMBER||(LA41_0 >= STRING_LITERAL && LA41_0 <= STRING_LITERAL3)||LA41_0==177||LA41_0==191) ) {
                alt41=1;
            }
            else if ( (LA41_0==ID) ) {
                alt41=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }
            switch (alt41) {
                case 1 :
                    // Objcm.g:382:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_case_expr1817);
                    const_expr187=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr187.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:383:5: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID188=(Token)match(input,ID,FOLLOW_ID_in_case_expr1824); 
                    ID188_tree = 
                    (Object)adaptor.create(ID188)
                    ;
                    adaptor.addChild(root_0, ID188_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr"


    public static class block_break_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_break"
    // Objcm.g:385:1: block_break : block_case ( single_operators )? ;
    public final ObjcmParser.block_break_return block_break() throws RecognitionException {
        ObjcmParser.block_break_return retval = new ObjcmParser.block_break_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_case_return block_case189 =null;

        ObjcmParser.single_operators_return single_operators190 =null;



        try {
            // Objcm.g:386:2: ( block_case ( single_operators )? )
            // Objcm.g:386:4: block_case ( single_operators )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_case_in_block_break1835);
            block_case189=block_case();

            state._fsp--;

            adaptor.addChild(root_0, block_case189.getTree());

            // Objcm.g:386:15: ( single_operators )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==BREAK_WORD||LA42_0==SINGLE_OP) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // Objcm.g:386:15: single_operators
                    {
                    pushFollow(FOLLOW_single_operators_in_block_break1837);
                    single_operators190=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators190.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_break"


    public static class default_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt_wrapper"
    // Objcm.g:389:1: default_stmt_wrapper : default_stmt -> ^( DEFAULT_STMT default_stmt ) ;
    public final ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper() throws RecognitionException {
        ObjcmParser.default_stmt_wrapper_return retval = new ObjcmParser.default_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_stmt_return default_stmt191 =null;


        RewriteRuleSubtreeStream stream_default_stmt=new RewriteRuleSubtreeStream(adaptor,"rule default_stmt");
        try {
            // Objcm.g:390:2: ( default_stmt -> ^( DEFAULT_STMT default_stmt ) )
            // Objcm.g:390:4: default_stmt
            {
            pushFollow(FOLLOW_default_stmt_in_default_stmt_wrapper1849);
            default_stmt191=default_stmt();

            state._fsp--;

            stream_default_stmt.add(default_stmt191.getTree());

            // AST REWRITE
            // elements: default_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 390:17: -> ^( DEFAULT_STMT default_stmt )
            {
                // Objcm.g:390:20: ^( DEFAULT_STMT default_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_default_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt_wrapper"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // Objcm.g:392:1: default_stmt : 'default' COLON ( default_body_wrapper )? ;
    public final ObjcmParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcmParser.default_stmt_return retval = new ObjcmParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal192=null;
        Token COLON193=null;
        ObjcmParser.default_body_wrapper_return default_body_wrapper194 =null;


        Object string_literal192_tree=null;
        Object COLON193_tree=null;

        try {
            // Objcm.g:393:2: ( 'default' COLON ( default_body_wrapper )? )
            // Objcm.g:393:4: 'default' COLON ( default_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal192=(Token)match(input,182,FOLLOW_182_in_default_stmt1866); 
            string_literal192_tree = 
            (Object)adaptor.create(string_literal192)
            ;
            adaptor.addChild(root_0, string_literal192_tree);


            COLON193=(Token)match(input,COLON,FOLLOW_COLON_in_default_stmt1869); 
            COLON193_tree = 
            (Object)adaptor.create(COLON193)
            ;
            adaptor.addChild(root_0, COLON193_tree);


            // Objcm.g:394:3: ( default_body_wrapper )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==ASTERISK||LA43_0==BREAK_WORD||LA43_0==CONST_PREFIX||LA43_0==ENUM_PREFIX||LA43_0==ID||LA43_0==L_AND||LA43_0==L_BR||(LA43_0 >= L_FBR && LA43_0 <= L_KBR)||LA43_0==L_MINUS||LA43_0==L_MINUS_MINUS||LA43_0==L_NOT||LA43_0==L_PLUS||LA43_0==L_PLUS_PLUS||LA43_0==L_TILDA||LA43_0==NUMBER||LA43_0==SEMICOLON||(LA43_0 >= SINGLE_OP && LA43_0 <= SIZEOF)||LA43_0==STATIC_PREFIX||(LA43_0 >= STRING_LITERAL && LA43_0 <= STRING_LITERAL3)||LA43_0==STRUCT_PREFIX||LA43_0==VOID||LA43_0==165||LA43_0==171||LA43_0==173||(LA43_0 >= 175 && LA43_0 <= 177)||LA43_0==179||(LA43_0 >= 183 && LA43_0 <= 184)||(LA43_0 >= 186 && LA43_0 <= 189)||(LA43_0 >= 191 && LA43_0 <= 193)||(LA43_0 >= 196 && LA43_0 <= 197)) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // Objcm.g:394:3: default_body_wrapper
                    {
                    pushFollow(FOLLOW_default_body_wrapper_in_default_stmt1874);
                    default_body_wrapper194=default_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_body_wrapper194.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class default_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body_wrapper"
    // Objcm.g:397:1: default_body_wrapper : default_body -> ^( DEFAULT_BODY default_body ) ;
    public final ObjcmParser.default_body_wrapper_return default_body_wrapper() throws RecognitionException {
        ObjcmParser.default_body_wrapper_return retval = new ObjcmParser.default_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_body_return default_body195 =null;


        RewriteRuleSubtreeStream stream_default_body=new RewriteRuleSubtreeStream(adaptor,"rule default_body");
        try {
            // Objcm.g:398:2: ( default_body -> ^( DEFAULT_BODY default_body ) )
            // Objcm.g:398:4: default_body
            {
            pushFollow(FOLLOW_default_body_in_default_body_wrapper1887);
            default_body195=default_body();

            state._fsp--;

            stream_default_body.add(default_body195.getTree());

            // AST REWRITE
            // elements: default_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 398:17: -> ^( DEFAULT_BODY default_body )
            {
                // Objcm.g:398:20: ^( DEFAULT_BODY default_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_BODY, "DEFAULT_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_default_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body_wrapper"


    public static class default_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body"
    // Objcm.g:401:1: default_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.default_body_return default_body() throws RecognitionException {
        ObjcmParser.default_body_return retval = new ObjcmParser.default_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break196 =null;

        ObjcmParser.block_internal_full_return block_internal_full197 =null;



        try {
            // Objcm.g:402:2: ( block_break | ( block_internal_full )+ )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==L_FBR) ) {
                alt45=1;
            }
            else if ( (LA45_0==ASTERISK||LA45_0==BREAK_WORD||LA45_0==CONST_PREFIX||LA45_0==ENUM_PREFIX||LA45_0==ID||LA45_0==L_AND||LA45_0==L_BR||LA45_0==L_KBR||LA45_0==L_MINUS||LA45_0==L_MINUS_MINUS||LA45_0==L_NOT||LA45_0==L_PLUS||LA45_0==L_PLUS_PLUS||LA45_0==L_TILDA||LA45_0==NUMBER||LA45_0==SEMICOLON||(LA45_0 >= SINGLE_OP && LA45_0 <= SIZEOF)||LA45_0==STATIC_PREFIX||(LA45_0 >= STRING_LITERAL && LA45_0 <= STRING_LITERAL3)||LA45_0==STRUCT_PREFIX||LA45_0==VOID||LA45_0==165||LA45_0==171||LA45_0==173||(LA45_0 >= 175 && LA45_0 <= 177)||LA45_0==179||(LA45_0 >= 183 && LA45_0 <= 184)||(LA45_0 >= 186 && LA45_0 <= 189)||(LA45_0 >= 191 && LA45_0 <= 193)||(LA45_0 >= 196 && LA45_0 <= 197)) ) {
                alt45=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }
            switch (alt45) {
                case 1 :
                    // Objcm.g:402:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_default_body1907);
                    block_break196=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break196.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:403:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:403:5: ( block_internal_full )+
                    int cnt44=0;
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==ASTERISK||LA44_0==BREAK_WORD||LA44_0==CONST_PREFIX||LA44_0==ENUM_PREFIX||LA44_0==ID||LA44_0==L_AND||LA44_0==L_BR||LA44_0==L_KBR||LA44_0==L_MINUS||LA44_0==L_MINUS_MINUS||LA44_0==L_NOT||LA44_0==L_PLUS||LA44_0==L_PLUS_PLUS||LA44_0==L_TILDA||LA44_0==NUMBER||LA44_0==SEMICOLON||(LA44_0 >= SINGLE_OP && LA44_0 <= SIZEOF)||LA44_0==STATIC_PREFIX||(LA44_0 >= STRING_LITERAL && LA44_0 <= STRING_LITERAL3)||LA44_0==STRUCT_PREFIX||LA44_0==VOID||LA44_0==165||LA44_0==171||LA44_0==173||(LA44_0 >= 175 && LA44_0 <= 177)||LA44_0==179||(LA44_0 >= 183 && LA44_0 <= 184)||(LA44_0 >= 186 && LA44_0 <= 189)||(LA44_0 >= 191 && LA44_0 <= 193)||(LA44_0 >= 196 && LA44_0 <= 197)) ) {
                            alt44=1;
                        }


                        switch (alt44) {
                    	case 1 :
                    	    // Objcm.g:403:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_default_body1913);
                    	    block_internal_full197=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full197.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt44 >= 1 ) break loop44;
                                EarlyExitException eee =
                                    new EarlyExitException(44, input);
                                throw eee;
                        }
                        cnt44++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body"


    public static class single_operators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_operators"
    // Objcm.g:406:1: single_operators : ( SINGLE_OP | break_wrapper );
    public final ObjcmParser.single_operators_return single_operators() throws RecognitionException {
        ObjcmParser.single_operators_return retval = new ObjcmParser.single_operators_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_OP198=null;
        ObjcmParser.break_wrapper_return break_wrapper199 =null;


        Object SINGLE_OP198_tree=null;

        try {
            // Objcm.g:407:2: ( SINGLE_OP | break_wrapper )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==SINGLE_OP) ) {
                alt46=1;
            }
            else if ( (LA46_0==BREAK_WORD) ) {
                alt46=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // Objcm.g:407:4: SINGLE_OP
                    {
                    root_0 = (Object)adaptor.nil();


                    SINGLE_OP198=(Token)match(input,SINGLE_OP,FOLLOW_SINGLE_OP_in_single_operators1928); 
                    SINGLE_OP198_tree = 
                    (Object)adaptor.create(SINGLE_OP198)
                    ;
                    adaptor.addChild(root_0, SINGLE_OP198_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:408:5: break_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_wrapper_in_single_operators1935);
                    break_wrapper199=break_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, break_wrapper199.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_operators"


    public static class break_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_wrapper"
    // Objcm.g:411:1: break_wrapper : break_stmt -> ^( BREAK break_stmt ) ;
    public final ObjcmParser.break_wrapper_return break_wrapper() throws RecognitionException {
        ObjcmParser.break_wrapper_return retval = new ObjcmParser.break_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.break_stmt_return break_stmt200 =null;


        RewriteRuleSubtreeStream stream_break_stmt=new RewriteRuleSubtreeStream(adaptor,"rule break_stmt");
        try {
            // Objcm.g:412:2: ( break_stmt -> ^( BREAK break_stmt ) )
            // Objcm.g:412:4: break_stmt
            {
            pushFollow(FOLLOW_break_stmt_in_break_wrapper1947);
            break_stmt200=break_stmt();

            state._fsp--;

            stream_break_stmt.add(break_stmt200.getTree());

            // AST REWRITE
            // elements: break_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 412:15: -> ^( BREAK break_stmt )
            {
                // Objcm.g:412:18: ^( BREAK break_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK, "BREAK")
                , root_1);

                adaptor.addChild(root_1, stream_break_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_wrapper"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // Objcm.g:414:1: break_stmt : BREAK_WORD SEMICOLON ;
    public final ObjcmParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcmParser.break_stmt_return retval = new ObjcmParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BREAK_WORD201=null;
        Token SEMICOLON202=null;

        Object BREAK_WORD201_tree=null;
        Object SEMICOLON202_tree=null;

        try {
            // Objcm.g:415:2: ( BREAK_WORD SEMICOLON )
            // Objcm.g:415:4: BREAK_WORD SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            BREAK_WORD201=(Token)match(input,BREAK_WORD,FOLLOW_BREAK_WORD_in_break_stmt1965); 
            BREAK_WORD201_tree = 
            (Object)adaptor.create(BREAK_WORD201)
            ;
            adaptor.addChild(root_0, BREAK_WORD201_tree);


            SEMICOLON202=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_break_stmt1968); 
            SEMICOLON202_tree = 
            (Object)adaptor.create(SEMICOLON202)
            ;
            adaptor.addChild(root_0, SEMICOLON202_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // Objcm.g:417:1: do_stmt : 'do' if_stmt_block 'while' L_BR expression R_BR ;
    public final ObjcmParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcmParser.do_stmt_return retval = new ObjcmParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal203=null;
        Token string_literal205=null;
        Token L_BR206=null;
        Token R_BR208=null;
        ObjcmParser.if_stmt_block_return if_stmt_block204 =null;

        ObjcmParser.expression_return expression207 =null;


        Object string_literal203_tree=null;
        Object string_literal205_tree=null;
        Object L_BR206_tree=null;
        Object R_BR208_tree=null;

        try {
            // Objcm.g:417:9: ( 'do' if_stmt_block 'while' L_BR expression R_BR )
            // Objcm.g:417:11: 'do' if_stmt_block 'while' L_BR expression R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal203=(Token)match(input,183,FOLLOW_183_in_do_stmt1978); 
            string_literal203_tree = 
            (Object)adaptor.create(string_literal203)
            ;
            adaptor.addChild(root_0, string_literal203_tree);


            pushFollow(FOLLOW_if_stmt_block_in_do_stmt1981);
            if_stmt_block204=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block204.getTree());

            string_literal205=(Token)match(input,197,FOLLOW_197_in_do_stmt1984); 
            string_literal205_tree = 
            (Object)adaptor.create(string_literal205)
            ;
            adaptor.addChild(root_0, string_literal205_tree);


            L_BR206=(Token)match(input,L_BR,FOLLOW_L_BR_in_do_stmt1987); 
            L_BR206_tree = 
            (Object)adaptor.create(L_BR206)
            ;
            adaptor.addChild(root_0, L_BR206_tree);


            pushFollow(FOLLOW_expression_in_do_stmt1990);
            expression207=expression();

            state._fsp--;

            adaptor.addChild(root_0, expression207.getTree());

            R_BR208=(Token)match(input,R_BR,FOLLOW_R_BR_in_do_stmt1992); 
            R_BR208_tree = 
            (Object)adaptor.create(R_BR208)
            ;
            adaptor.addChild(root_0, R_BR208_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // Objcm.g:419:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcmParser.while_stmt_wrapper_return retval = new ObjcmParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.while_stmt_return while_stmt209 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // Objcm.g:420:2: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // Objcm.g:420:4: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper2001);
            while_stmt209=while_stmt();

            state._fsp--;

            stream_while_stmt.add(while_stmt209.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 420:15: -> ^( WHILE_STMT while_stmt )
            {
                // Objcm.g:420:18: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // Objcm.g:423:1: while_stmt : 'while' L_BR while_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcmParser.while_stmt_return retval = new ObjcmParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal210=null;
        Token L_BR211=null;
        Token R_BR213=null;
        ObjcmParser.while_expr_return while_expr212 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper214 =null;


        Object string_literal210_tree=null;
        Object L_BR211_tree=null;
        Object R_BR213_tree=null;

        try {
            // Objcm.g:424:2: ( 'while' L_BR while_expr R_BR if_stmt_block_wrapper )
            // Objcm.g:424:4: 'while' L_BR while_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal210=(Token)match(input,197,FOLLOW_197_in_while_stmt2020); 
            string_literal210_tree = 
            (Object)adaptor.create(string_literal210)
            ;
            adaptor.addChild(root_0, string_literal210_tree);


            L_BR211=(Token)match(input,L_BR,FOLLOW_L_BR_in_while_stmt2023); 
            L_BR211_tree = 
            (Object)adaptor.create(L_BR211)
            ;
            adaptor.addChild(root_0, L_BR211_tree);


            pushFollow(FOLLOW_while_expr_in_while_stmt2026);
            while_expr212=while_expr();

            state._fsp--;

            adaptor.addChild(root_0, while_expr212.getTree());

            R_BR213=(Token)match(input,R_BR,FOLLOW_R_BR_in_while_stmt2028); 
            R_BR213_tree = 
            (Object)adaptor.create(R_BR213)
            ;
            adaptor.addChild(root_0, R_BR213_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_while_stmt2031);
            if_stmt_block_wrapper214=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper214.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class while_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_expr"
    // Objcm.g:426:1: while_expr : classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.while_expr_return while_expr() throws RecognitionException {
        ObjcmParser.while_expr_return retval = new ObjcmParser.while_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp215 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:427:2: ( classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) )
            // Objcm.g:427:5: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_while_expr2044);
            classical_expr_wrp215=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp215.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 427:24: -> ^( WHILE_EXPR classical_expr_wrp )
            {
                // Objcm.g:427:27: ^( WHILE_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_EXPR, "WHILE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_expr"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // Objcm.g:429:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcmParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcmParser.for_stmt_wrapper_return retval = new ObjcmParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.for_stmt_return for_stmt216 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // Objcm.g:430:2: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // Objcm.g:430:4: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper2063);
            for_stmt216=for_stmt();

            state._fsp--;

            stream_for_stmt.add(for_stmt216.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 430:13: -> ^( FOR_STMT for_stmt )
            {
                // Objcm.g:430:16: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // Objcm.g:432:1: for_stmt : 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block ;
    public final ObjcmParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcmParser.for_stmt_return retval = new ObjcmParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal217=null;
        Token L_BR218=null;
        Token R_BR220=null;
        ObjcmParser.for_stmt_expr_wrapper_return for_stmt_expr_wrapper219 =null;

        ObjcmParser.if_stmt_block_return if_stmt_block221 =null;


        Object string_literal217_tree=null;
        Object L_BR218_tree=null;
        Object R_BR220_tree=null;

        try {
            // Objcm.g:432:9: ( 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block )
            // Objcm.g:432:11: 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal217=(Token)match(input,186,FOLLOW_186_in_for_stmt2080); 
            string_literal217_tree = 
            (Object)adaptor.create(string_literal217)
            ;
            adaptor.addChild(root_0, string_literal217_tree);


            L_BR218=(Token)match(input,L_BR,FOLLOW_L_BR_in_for_stmt2083); 
            L_BR218_tree = 
            (Object)adaptor.create(L_BR218)
            ;
            adaptor.addChild(root_0, L_BR218_tree);


            pushFollow(FOLLOW_for_stmt_expr_wrapper_in_for_stmt2086);
            for_stmt_expr_wrapper219=for_stmt_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, for_stmt_expr_wrapper219.getTree());

            R_BR220=(Token)match(input,R_BR,FOLLOW_R_BR_in_for_stmt2088); 
            R_BR220_tree = 
            (Object)adaptor.create(R_BR220)
            ;
            adaptor.addChild(root_0, R_BR220_tree);


            pushFollow(FOLLOW_if_stmt_block_in_for_stmt2091);
            if_stmt_block221=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block221.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr_wrapper"
    // Objcm.g:435:1: for_stmt_expr_wrapper : for_stmt_expr -> ^( FOR_STMT_EXPR for_stmt_expr ) ;
    public final ObjcmParser.for_stmt_expr_wrapper_return for_stmt_expr_wrapper() throws RecognitionException {
        ObjcmParser.for_stmt_expr_wrapper_return retval = new ObjcmParser.for_stmt_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.for_stmt_expr_return for_stmt_expr222 =null;


        RewriteRuleSubtreeStream stream_for_stmt_expr=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt_expr");
        try {
            // Objcm.g:436:2: ( for_stmt_expr -> ^( FOR_STMT_EXPR for_stmt_expr ) )
            // Objcm.g:436:4: for_stmt_expr
            {
            pushFollow(FOLLOW_for_stmt_expr_in_for_stmt_expr_wrapper2103);
            for_stmt_expr222=for_stmt_expr();

            state._fsp--;

            stream_for_stmt_expr.add(for_stmt_expr222.getTree());

            // AST REWRITE
            // elements: for_stmt_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 436:18: -> ^( FOR_STMT_EXPR for_stmt_expr )
            {
                // Objcm.g:436:21: ^( FOR_STMT_EXPR for_stmt_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT_EXPR, "FOR_STMT_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr_wrapper"


    public static class for_stmt_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr"
    // Objcm.g:438:1: for_stmt_expr : ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 );
    public final ObjcmParser.for_stmt_expr_return for_stmt_expr() throws RecognitionException {
        ObjcmParser.for_stmt_expr_return retval = new ObjcmParser.for_stmt_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper223 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1224 =null;

        ObjcmParser.full_expr2_return full_expr2225 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1226 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2227 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2228 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2229 =null;



        try {
            // Objcm.g:439:2: ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==ASTERISK||LA49_0==ID||LA49_0==L_AND||LA49_0==L_BR||LA49_0==L_KBR||LA49_0==L_MINUS||LA49_0==L_MINUS_MINUS||LA49_0==L_NOT||LA49_0==L_PLUS||LA49_0==L_PLUS_PLUS||LA49_0==L_TILDA||LA49_0==NUMBER||LA49_0==SIZEOF||(LA49_0 >= STRING_LITERAL && LA49_0 <= STRING_LITERAL3)||LA49_0==165||LA49_0==171||LA49_0==173||LA49_0==177||LA49_0==189||LA49_0==191||LA49_0==196) ) {
                alt49=1;
            }
            else if ( (LA49_0==SEMICOLON) ) {
                alt49=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;

            }
            switch (alt49) {
                case 1 :
                    // Objcm.g:439:4: full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_full_expr_wrapper_in_for_stmt_expr2122);
                    full_expr_wrapper223=full_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, full_expr_wrapper223.getTree());

                    // Objcm.g:439:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    int alt48=3;
                    alt48 = dfa48.predict(input);
                    switch (alt48) {
                        case 1 :
                            // Objcm.g:439:23: for_stmt_int1
                            {
                            pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2125);
                            for_stmt_int1224=for_stmt_int1();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int1224.getTree());

                            }
                            break;
                        case 2 :
                            // Objcm.g:439:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            {
                            // Objcm.g:439:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            // Objcm.g:439:40: full_expr2 ( for_stmt_int1 | for_stmt_int2 )
                            {
                            pushFollow(FOLLOW_full_expr2_in_for_stmt_expr2130);
                            full_expr2225=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2225.getTree());

                            // Objcm.g:439:51: ( for_stmt_int1 | for_stmt_int2 )
                            int alt47=2;
                            int LA47_0 = input.LA(1);

                            if ( (LA47_0==189) ) {
                                alt47=1;
                            }
                            else if ( (LA47_0==SEMICOLON) ) {
                                alt47=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 47, 0, input);

                                throw nvae;

                            }
                            switch (alt47) {
                                case 1 :
                                    // Objcm.g:439:52: for_stmt_int1
                                    {
                                    pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2133);
                                    for_stmt_int1226=for_stmt_int1();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int1226.getTree());

                                    }
                                    break;
                                case 2 :
                                    // Objcm.g:439:68: for_stmt_int2
                                    {
                                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2137);
                                    for_stmt_int2227=for_stmt_int2();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int2227.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            // Objcm.g:439:86: for_stmt_int2
                            {
                            pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2143);
                            for_stmt_int2228=for_stmt_int2();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int2228.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:440:4: for_stmt_int2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2149);
                    for_stmt_int2229=for_stmt_int2();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_int2229.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr"


    public static class for_stmt_int1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int1"
    // Objcm.g:443:1: for_stmt_int1 : 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) ;
    public final ObjcmParser.for_stmt_int1_return for_stmt_int1() throws RecognitionException {
        ObjcmParser.for_stmt_int1_return retval = new ObjcmParser.for_stmt_int1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal230=null;
        ObjcmParser.object_wrapped2_return object_wrapped2231 =null;


        Object string_literal230_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_object_wrapped2=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapped2");
        try {
            // Objcm.g:444:2: ( 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) )
            // Objcm.g:444:4: 'in' object_wrapped2
            {
            string_literal230=(Token)match(input,189,FOLLOW_189_in_for_stmt_int12164);  
            stream_189.add(string_literal230);


            pushFollow(FOLLOW_object_wrapped2_in_for_stmt_int12166);
            object_wrapped2231=object_wrapped2();

            state._fsp--;

            stream_object_wrapped2.add(object_wrapped2231.getTree());

            // AST REWRITE
            // elements: object_wrapped2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 444:26: -> ^( FOR_IN_STMT object_wrapped2 )
            {
                // Objcm.g:444:29: ^( FOR_IN_STMT object_wrapped2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapped2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int1"


    public static class for_stmt_int2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int2"
    // Objcm.g:446:1: for_stmt_int2 : SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? ;
    public final ObjcmParser.for_stmt_int2_return for_stmt_int2() throws RecognitionException {
        ObjcmParser.for_stmt_int2_return retval = new ObjcmParser.for_stmt_int2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON232=null;
        Token SEMICOLON234=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp233 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp235 =null;


        Object SEMICOLON232_tree=null;
        Object SEMICOLON234_tree=null;

        try {
            // Objcm.g:447:2: ( SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? )
            // Objcm.g:447:4: SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )?
            {
            root_0 = (Object)adaptor.nil();


            SEMICOLON232=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22186); 
            SEMICOLON232_tree = 
            (Object)adaptor.create(SEMICOLON232)
            ;
            adaptor.addChild(root_0, SEMICOLON232_tree);


            // Objcm.g:447:14: ( classical_expr_wrp )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==ASTERISK||LA50_0==ID||LA50_0==L_AND||LA50_0==L_BR||LA50_0==L_KBR||LA50_0==L_MINUS||LA50_0==L_MINUS_MINUS||LA50_0==L_NOT||LA50_0==L_PLUS||LA50_0==L_PLUS_PLUS||LA50_0==L_TILDA||LA50_0==NUMBER||LA50_0==SIZEOF||(LA50_0 >= STRING_LITERAL && LA50_0 <= STRING_LITERAL3)||LA50_0==165||LA50_0==171||LA50_0==173||LA50_0==177||LA50_0==189||LA50_0==191||LA50_0==196) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // Objcm.g:447:14: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22188);
                    classical_expr_wrp233=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp233.getTree());

                    }
                    break;

            }


            SEMICOLON234=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22191); 
            SEMICOLON234_tree = 
            (Object)adaptor.create(SEMICOLON234)
            ;
            adaptor.addChild(root_0, SEMICOLON234_tree);


            // Objcm.g:447:44: ( classical_expr_wrp )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==ASTERISK||LA51_0==ID||LA51_0==L_AND||LA51_0==L_BR||LA51_0==L_KBR||LA51_0==L_MINUS||LA51_0==L_MINUS_MINUS||LA51_0==L_NOT||LA51_0==L_PLUS||LA51_0==L_PLUS_PLUS||LA51_0==L_TILDA||LA51_0==NUMBER||LA51_0==SIZEOF||(LA51_0 >= STRING_LITERAL && LA51_0 <= STRING_LITERAL3)||LA51_0==165||LA51_0==171||LA51_0==173||LA51_0==177||LA51_0==189||LA51_0==191||LA51_0==196) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // Objcm.g:447:44: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22193);
                    classical_expr_wrp235=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp235.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int2"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // Objcm.g:454:1: return_stmt : 'return' ( classical_expr_wrp )? SEMICOLON -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON ) ;
    public final ObjcmParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcmParser.return_stmt_return retval = new ObjcmParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal236=null;
        Token SEMICOLON238=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp237 =null;


        Object string_literal236_tree=null;
        Object SEMICOLON238_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:455:2: ( 'return' ( classical_expr_wrp )? SEMICOLON -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON ) )
            // Objcm.g:455:4: 'return' ( classical_expr_wrp )? SEMICOLON
            {
            string_literal236=(Token)match(input,192,FOLLOW_192_in_return_stmt2210);  
            stream_192.add(string_literal236);


            // Objcm.g:455:13: ( classical_expr_wrp )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==ASTERISK||LA52_0==ID||LA52_0==L_AND||LA52_0==L_BR||LA52_0==L_KBR||LA52_0==L_MINUS||LA52_0==L_MINUS_MINUS||LA52_0==L_NOT||LA52_0==L_PLUS||LA52_0==L_PLUS_PLUS||LA52_0==L_TILDA||LA52_0==NUMBER||LA52_0==SIZEOF||(LA52_0 >= STRING_LITERAL && LA52_0 <= STRING_LITERAL3)||LA52_0==165||LA52_0==171||LA52_0==173||LA52_0==177||LA52_0==189||LA52_0==191||LA52_0==196) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // Objcm.g:455:13: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_return_stmt2212);
                    classical_expr_wrp237=classical_expr_wrp();

                    state._fsp--;

                    stream_classical_expr_wrp.add(classical_expr_wrp237.getTree());

                    }
                    break;

            }


            SEMICOLON238=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_return_stmt2215);  
            stream_SEMICOLON.add(SEMICOLON238);


            // AST REWRITE
            // elements: SEMICOLON, classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 455:43: -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON )
            {
                // Objcm.g:455:46: ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                // Objcm.g:455:60: ( classical_expr_wrp )?
                if ( stream_classical_expr_wrp.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                }
                stream_classical_expr_wrp.reset();

                adaptor.addChild(root_1, 
                stream_SEMICOLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class if_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_wrapper"
    // Objcm.g:457:1: if_stmt_wrapper : if_stmt -> ^( IF_STMT if_stmt ) ;
    public final ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_wrapper_return retval = new ObjcmParser.if_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_return if_stmt239 =null;


        RewriteRuleSubtreeStream stream_if_stmt=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt");
        try {
            // Objcm.g:458:2: ( if_stmt -> ^( IF_STMT if_stmt ) )
            // Objcm.g:458:4: if_stmt
            {
            pushFollow(FOLLOW_if_stmt_in_if_stmt_wrapper2236);
            if_stmt239=if_stmt();

            state._fsp--;

            stream_if_stmt.add(if_stmt239.getTree());

            // AST REWRITE
            // elements: if_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 458:12: -> ^( IF_STMT if_stmt )
            {
                // Objcm.g:458:15: ^( IF_STMT if_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_wrapper"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // Objcm.g:460:1: if_stmt : 'if' L_BR if_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcmParser.if_stmt_return retval = new ObjcmParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal240=null;
        Token L_BR241=null;
        Token R_BR243=null;
        ObjcmParser.if_expr_return if_expr242 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper244 =null;


        Object string_literal240_tree=null;
        Object L_BR241_tree=null;
        Object R_BR243_tree=null;

        try {
            // Objcm.g:460:9: ( 'if' L_BR if_expr R_BR if_stmt_block_wrapper )
            // Objcm.g:460:11: 'if' L_BR if_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal240=(Token)match(input,188,FOLLOW_188_in_if_stmt2252); 
            string_literal240_tree = 
            (Object)adaptor.create(string_literal240)
            ;
            adaptor.addChild(root_0, string_literal240_tree);


            L_BR241=(Token)match(input,L_BR,FOLLOW_L_BR_in_if_stmt2255); 
            L_BR241_tree = 
            (Object)adaptor.create(L_BR241)
            ;
            adaptor.addChild(root_0, L_BR241_tree);


            pushFollow(FOLLOW_if_expr_in_if_stmt2258);
            if_expr242=if_expr();

            state._fsp--;

            adaptor.addChild(root_0, if_expr242.getTree());

            R_BR243=(Token)match(input,R_BR,FOLLOW_R_BR_in_if_stmt2260); 
            R_BR243_tree = 
            (Object)adaptor.create(R_BR243)
            ;
            adaptor.addChild(root_0, R_BR243_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_if_stmt2263);
            if_stmt_block_wrapper244=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper244.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class if_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_expr"
    // Objcm.g:463:1: if_expr : classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.if_expr_return if_expr() throws RecognitionException {
        ObjcmParser.if_expr_return retval = new ObjcmParser.if_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp245 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:463:9: ( classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) )
            // Objcm.g:463:12: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_if_expr2276);
            classical_expr_wrp245=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp245.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 463:31: -> ^( IF_EXPR classical_expr_wrp )
            {
                // Objcm.g:463:34: ^( IF_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_EXPR, "IF_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_expr"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // Objcm.g:465:1: else_stmt : 'else' if_stmt_block ;
    public final ObjcmParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcmParser.else_stmt_return retval = new ObjcmParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal246=null;
        ObjcmParser.if_stmt_block_return if_stmt_block247 =null;


        Object string_literal246_tree=null;

        try {
            // Objcm.g:466:2: ( 'else' if_stmt_block )
            // Objcm.g:466:4: 'else' if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal246=(Token)match(input,184,FOLLOW_184_in_else_stmt2295); 
            string_literal246_tree = 
            (Object)adaptor.create(string_literal246)
            ;
            adaptor.addChild(root_0, string_literal246_tree);


            pushFollow(FOLLOW_if_stmt_block_in_else_stmt2298);
            if_stmt_block247=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block247.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class if_stmt_block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block_wrapper"
    // Objcm.g:468:1: if_stmt_block_wrapper : if_stmt_block -> ^( IF_BLOCK if_stmt_block ) ;
    public final ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_block_wrapper_return retval = new ObjcmParser.if_stmt_block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_block_return if_stmt_block248 =null;


        RewriteRuleSubtreeStream stream_if_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt_block");
        try {
            // Objcm.g:469:2: ( if_stmt_block -> ^( IF_BLOCK if_stmt_block ) )
            // Objcm.g:469:4: if_stmt_block
            {
            pushFollow(FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2307);
            if_stmt_block248=if_stmt_block();

            state._fsp--;

            stream_if_stmt_block.add(if_stmt_block248.getTree());

            // AST REWRITE
            // elements: if_stmt_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 469:18: -> ^( IF_BLOCK if_stmt_block )
            {
                // Objcm.g:469:21: ^( IF_BLOCK if_stmt_block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_BLOCK, "IF_BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block_wrapper"


    public static class if_stmt_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block"
    // Objcm.g:471:1: if_stmt_block : ( block_wrapper | block_internal );
    public final ObjcmParser.if_stmt_block_return if_stmt_block() throws RecognitionException {
        ObjcmParser.if_stmt_block_return retval = new ObjcmParser.if_stmt_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_wrapper_return block_wrapper249 =null;

        ObjcmParser.block_internal_return block_internal250 =null;



        try {
            // Objcm.g:472:2: ( block_wrapper | block_internal )
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==L_FBR) ) {
                alt53=1;
            }
            else if ( (LA53_0==ASTERISK||LA53_0==BREAK_WORD||LA53_0==CONST_PREFIX||LA53_0==ENUM_PREFIX||LA53_0==ID||LA53_0==L_AND||LA53_0==L_BR||LA53_0==L_KBR||LA53_0==L_MINUS||LA53_0==L_MINUS_MINUS||LA53_0==L_NOT||LA53_0==L_PLUS||LA53_0==L_PLUS_PLUS||LA53_0==L_TILDA||LA53_0==NUMBER||LA53_0==SEMICOLON||(LA53_0 >= SINGLE_OP && LA53_0 <= SIZEOF)||LA53_0==STATIC_PREFIX||(LA53_0 >= STRING_LITERAL && LA53_0 <= STRING_LITERAL3)||LA53_0==STRUCT_PREFIX||LA53_0==VOID||LA53_0==165||LA53_0==171||LA53_0==173||(LA53_0 >= 175 && LA53_0 <= 177)||LA53_0==179||(LA53_0 >= 183 && LA53_0 <= 184)||(LA53_0 >= 186 && LA53_0 <= 189)||(LA53_0 >= 191 && LA53_0 <= 193)||(LA53_0 >= 196 && LA53_0 <= 197)) ) {
                alt53=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;

            }
            switch (alt53) {
                case 1 :
                    // Objcm.g:472:4: block_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_wrapper_in_if_stmt_block2324);
                    block_wrapper249=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper249.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:473:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_if_stmt_block2330);
                    block_internal250=block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, block_internal250.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block"


    public static class static_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start_wrapper"
    // Objcm.g:476:1: static_start_wrapper : static_start -> ^( STATIC_START static_start ) ;
    public final ObjcmParser.static_start_wrapper_return static_start_wrapper() throws RecognitionException {
        ObjcmParser.static_start_wrapper_return retval = new ObjcmParser.static_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_start_return static_start251 =null;


        RewriteRuleSubtreeStream stream_static_start=new RewriteRuleSubtreeStream(adaptor,"rule static_start");
        try {
            // Objcm.g:477:2: ( static_start -> ^( STATIC_START static_start ) )
            // Objcm.g:477:4: static_start
            {
            pushFollow(FOLLOW_static_start_in_static_start_wrapper2342);
            static_start251=static_start();

            state._fsp--;

            stream_static_start.add(static_start251.getTree());

            // AST REWRITE
            // elements: static_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 477:17: -> ^( STATIC_START static_start )
            {
                // Objcm.g:477:20: ^( STATIC_START static_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_START, "STATIC_START")
                , root_1);

                adaptor.addChild(root_1, stream_static_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start_wrapper"


    public static class static_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start"
    // Objcm.g:479:1: static_start : STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2 ;
    public final ObjcmParser.static_start_return static_start() throws RecognitionException {
        ObjcmParser.static_start_return retval = new ObjcmParser.static_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX252=null;
        Token CONST_PREFIX253=null;
        ObjcmParser.static_type_wrapper_return static_type_wrapper254 =null;

        ObjcmParser.full_expr2_return full_expr2255 =null;


        Object STATIC_PREFIX252_tree=null;
        Object CONST_PREFIX253_tree=null;

        try {
            // Objcm.g:480:2: ( STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2 )
            // Objcm.g:480:4: STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX252=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_start2360); 
            STATIC_PREFIX252_tree = 
            (Object)adaptor.create(STATIC_PREFIX252)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX252_tree);


            // Objcm.g:480:18: ( CONST_PREFIX )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==CONST_PREFIX) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // Objcm.g:480:18: CONST_PREFIX
                    {
                    CONST_PREFIX253=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_start2362); 
                    CONST_PREFIX253_tree = 
                    (Object)adaptor.create(CONST_PREFIX253)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX253_tree);


                    }
                    break;

            }


            // Objcm.g:480:32: ( static_type_wrapper )?
            int alt55=2;
            alt55 = dfa55.predict(input);
            switch (alt55) {
                case 1 :
                    // Objcm.g:480:32: static_type_wrapper
                    {
                    pushFollow(FOLLOW_static_type_wrapper_in_static_start2365);
                    static_type_wrapper254=static_type_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_type_wrapper254.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_full_expr2_in_static_start2368);
            full_expr2255=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2255.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start"


    public static class static_type_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type_wrapper"
    // Objcm.g:483:1: static_type_wrapper : static_type -> ^( STATIC_TYPE static_type ) ;
    public final ObjcmParser.static_type_wrapper_return static_type_wrapper() throws RecognitionException {
        ObjcmParser.static_type_wrapper_return retval = new ObjcmParser.static_type_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_type_return static_type256 =null;


        RewriteRuleSubtreeStream stream_static_type=new RewriteRuleSubtreeStream(adaptor,"rule static_type");
        try {
            // Objcm.g:484:2: ( static_type -> ^( STATIC_TYPE static_type ) )
            // Objcm.g:484:4: static_type
            {
            pushFollow(FOLLOW_static_type_in_static_type_wrapper2380);
            static_type256=static_type();

            state._fsp--;

            stream_static_type.add(static_type256.getTree());

            // AST REWRITE
            // elements: static_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 484:16: -> ^( STATIC_TYPE static_type )
            {
                // Objcm.g:484:19: ^( STATIC_TYPE static_type )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_TYPE, "STATIC_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_static_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type_wrapper"


    public static class static_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type"
    // Objcm.g:486:1: static_type : object_name ( ASTERISK )* ;
    public final ObjcmParser.static_type_return static_type() throws RecognitionException {
        ObjcmParser.static_type_return retval = new ObjcmParser.static_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK258=null;
        ObjcmParser.object_name_return object_name257 =null;


        Object ASTERISK258_tree=null;

        try {
            // Objcm.g:487:2: ( object_name ( ASTERISK )* )
            // Objcm.g:487:4: object_name ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_name_in_static_type2399);
            object_name257=object_name();

            state._fsp--;

            adaptor.addChild(root_0, object_name257.getTree());

            // Objcm.g:487:16: ( ASTERISK )*
            loop56:
            do {
                int alt56=2;
                int LA56_0 = input.LA(1);

                if ( (LA56_0==ASTERISK) ) {
                    alt56=1;
                }


                switch (alt56) {
            	case 1 :
            	    // Objcm.g:487:16: ASTERISK
            	    {
            	    ASTERISK258=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_static_type2401); 
            	    ASTERISK258_tree = 
            	    (Object)adaptor.create(ASTERISK258)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK258_tree);


            	    }
            	    break;

            	default :
            	    break loop56;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type"


    public static class id_part_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end"
    // Objcm.g:489:1: id_part_end : ( id_part_end_internal )+ ;
    public final ObjcmParser.id_part_end_return id_part_end() throws RecognitionException {
        ObjcmParser.id_part_end_return retval = new ObjcmParser.id_part_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_end_internal_return id_part_end_internal259 =null;



        try {
            // Objcm.g:490:2: ( ( id_part_end_internal )+ )
            // Objcm.g:490:4: ( id_part_end_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:490:4: ( id_part_end_internal )+
            int cnt57=0;
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==DOT||LA57_0==162) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // Objcm.g:490:4: id_part_end_internal
            	    {
            	    pushFollow(FOLLOW_id_part_end_internal_in_id_part_end2413);
            	    id_part_end_internal259=id_part_end_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part_end_internal259.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt57 >= 1 ) break loop57;
                        EarlyExitException eee =
                            new EarlyExitException(57, input);
                        throw eee;
                }
                cnt57++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end"


    public static class id_part_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end_internal"
    // Objcm.g:493:1: id_part_end_internal : ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) ;
    public final ObjcmParser.id_part_end_internal_return id_part_end_internal() throws RecognitionException {
        ObjcmParser.id_part_end_internal_return retval = new ObjcmParser.id_part_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT260=null;
        Token string_literal261=null;
        ObjcmParser.id_part_return id_part262 =null;


        Object DOT260_tree=null;
        Object string_literal261_tree=null;
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_id_part=new RewriteRuleSubtreeStream(adaptor,"rule id_part");
        try {
            // Objcm.g:494:2: ( ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) )
            // Objcm.g:494:4: ( DOT | '->' ) id_part
            {
            // Objcm.g:494:4: ( DOT | '->' )
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==DOT) ) {
                alt58=1;
            }
            else if ( (LA58_0==162) ) {
                alt58=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }
            switch (alt58) {
                case 1 :
                    // Objcm.g:494:5: DOT
                    {
                    DOT260=(Token)match(input,DOT,FOLLOW_DOT_in_id_part_end_internal2428);  
                    stream_DOT.add(DOT260);


                    }
                    break;
                case 2 :
                    // Objcm.g:494:11: '->'
                    {
                    string_literal261=(Token)match(input,162,FOLLOW_162_in_id_part_end_internal2432);  
                    stream_162.add(string_literal261);


                    }
                    break;

            }


            pushFollow(FOLLOW_id_part_in_id_part_end_internal2435);
            id_part262=id_part();

            state._fsp--;

            stream_id_part.add(id_part262.getTree());

            // AST REWRITE
            // elements: id_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 494:25: -> ^( FIELD_ACCESS id_part )
            {
                // Objcm.g:494:28: ^( FIELD_ACCESS id_part )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_ACCESS, "FIELD_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_id_part.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end_internal"


    public static class known_types_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_types"
    // Objcm.g:497:1: known_types : ( 'unsigned' | VOID );
    public final ObjcmParser.known_types_return known_types() throws RecognitionException {
        ObjcmParser.known_types_return retval = new ObjcmParser.known_types_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set263=null;

        Object set263_tree=null;

        try {
            // Objcm.g:498:2: ( 'unsigned' | VOID )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set263=(Token)input.LT(1);

            if ( input.LA(1)==VOID||input.LA(1)==196 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set263)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_types"


    public static class id_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part"
    // Objcm.g:502:1: id_part : name_internal ( function_brackets_wrapper )? ( index_wrapper )* ;
    public final ObjcmParser.id_part_return id_part() throws RecognitionException {
        ObjcmParser.id_part_return retval = new ObjcmParser.id_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal264 =null;

        ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper265 =null;

        ObjcmParser.index_wrapper_return index_wrapper266 =null;



        try {
            // Objcm.g:502:9: ( name_internal ( function_brackets_wrapper )? ( index_wrapper )* )
            // Objcm.g:502:12: name_internal ( function_brackets_wrapper )? ( index_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_internal_in_id_part2473);
            name_internal264=name_internal();

            state._fsp--;

            adaptor.addChild(root_0, name_internal264.getTree());

            // Objcm.g:502:26: ( function_brackets_wrapper )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==L_BR) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // Objcm.g:502:26: function_brackets_wrapper
                    {
                    pushFollow(FOLLOW_function_brackets_wrapper_in_id_part2475);
                    function_brackets_wrapper265=function_brackets_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, function_brackets_wrapper265.getTree());

                    }
                    break;

            }


            // Objcm.g:502:53: ( index_wrapper )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==L_KBR) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // Objcm.g:502:53: index_wrapper
            	    {
            	    pushFollow(FOLLOW_index_wrapper_in_id_part2478);
            	    index_wrapper266=index_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, index_wrapper266.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part"


    public static class object_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_name"
    // Objcm.g:505:1: object_name : id_part ( id_part_end )? ;
    public final ObjcmParser.object_name_return object_name() throws RecognitionException {
        ObjcmParser.object_name_return retval = new ObjcmParser.object_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_return id_part267 =null;

        ObjcmParser.id_part_end_return id_part_end268 =null;



        try {
            // Objcm.g:506:2: ( id_part ( id_part_end )? )
            // Objcm.g:506:4: id_part ( id_part_end )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_id_part_in_object_name2491);
            id_part267=id_part();

            state._fsp--;

            adaptor.addChild(root_0, id_part267.getTree());

            // Objcm.g:506:12: ( id_part_end )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==DOT||LA61_0==162) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // Objcm.g:506:12: id_part_end
                    {
                    pushFollow(FOLLOW_id_part_end_in_object_name2493);
                    id_part_end268=id_part_end();

                    state._fsp--;

                    adaptor.addChild(root_0, id_part_end268.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_name"


    public static class method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper"
    // Objcm.g:509:1: method_call_wrapper : L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper_return method_call_wrapper() throws RecognitionException {
        ObjcmParser.method_call_wrapper_return retval = new ObjcmParser.method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR269=null;
        Token R_KBR271=null;
        ObjcmParser.method_call2_return method_call2270 =null;


        Object L_KBR269_tree=null;
        Object R_KBR271_tree=null;
        RewriteRuleTokenStream stream_R_KBR=new RewriteRuleTokenStream(adaptor,"token R_KBR");
        RewriteRuleTokenStream stream_L_KBR=new RewriteRuleTokenStream(adaptor,"token L_KBR");
        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // Objcm.g:510:2: ( L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) )
            // Objcm.g:510:4: L_KBR method_call2 R_KBR
            {
            L_KBR269=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_method_call_wrapper2507);  
            stream_L_KBR.add(L_KBR269);


            pushFollow(FOLLOW_method_call2_in_method_call_wrapper2509);
            method_call2270=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2270.getTree());

            R_KBR271=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_method_call_wrapper2511);  
            stream_R_KBR.add(R_KBR271);


            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 510:29: -> ^( METHOD_CALL method_call2 )
            {
                // Objcm.g:510:32: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper"


    public static class method_call_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper2"
    // Objcm.g:513:1: method_call_wrapper2 : method_call2 -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper2_return method_call_wrapper2() throws RecognitionException {
        ObjcmParser.method_call_wrapper2_return retval = new ObjcmParser.method_call_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call2_return method_call2272 =null;


        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // Objcm.g:514:2: ( method_call2 -> ^( METHOD_CALL method_call2 ) )
            // Objcm.g:514:4: method_call2
            {
            pushFollow(FOLLOW_method_call2_in_method_call_wrapper22534);
            method_call2272=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2272.getTree());

            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 514:17: -> ^( METHOD_CALL method_call2 )
            {
                // Objcm.g:514:20: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper2"


    public static class method_call2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call2"
    // Objcm.g:516:1: method_call2 : object_wrapper method_name ( method_call_message_list_wrapper )? ;
    public final ObjcmParser.method_call2_return method_call2() throws RecognitionException {
        ObjcmParser.method_call2_return retval = new ObjcmParser.method_call2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_return object_wrapper273 =null;

        ObjcmParser.method_name_return method_name274 =null;

        ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper275 =null;



        try {
            // Objcm.g:517:2: ( object_wrapper method_name ( method_call_message_list_wrapper )? )
            // Objcm.g:517:4: object_wrapper method_name ( method_call_message_list_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapper_in_method_call22553);
            object_wrapper273=object_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapper273.getTree());

            pushFollow(FOLLOW_method_name_in_method_call22555);
            method_name274=method_name();

            state._fsp--;

            adaptor.addChild(root_0, method_name274.getTree());

            // Objcm.g:517:31: ( method_call_message_list_wrapper )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==COLON) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // Objcm.g:517:33: method_call_message_list_wrapper
                    {
                    pushFollow(FOLLOW_method_call_message_list_wrapper_in_method_call22559);
                    method_call_message_list_wrapper275=method_call_message_list_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_message_list_wrapper275.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call2"


    public static class object_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper"
    // Objcm.g:519:1: object_wrapper : object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) ;
    public final ObjcmParser.object_wrapper_return object_wrapper() throws RecognitionException {
        ObjcmParser.object_wrapper_return retval = new ObjcmParser.object_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_internal_return object_wrapper_internal276 =null;


        RewriteRuleSubtreeStream stream_object_wrapper_internal=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapper_internal");
        try {
            // Objcm.g:520:2: ( object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) )
            // Objcm.g:520:4: object_wrapper_internal
            {
            pushFollow(FOLLOW_object_wrapper_internal_in_object_wrapper2570);
            object_wrapper_internal276=object_wrapper_internal();

            state._fsp--;

            stream_object_wrapper_internal.add(object_wrapper_internal276.getTree());

            // AST REWRITE
            // elements: object_wrapper_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:28: -> ^( OBJECT object_wrapper_internal )
            {
                // Objcm.g:520:31: ^( OBJECT object_wrapper_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT, "OBJECT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapper_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper"


    public static class object_wrapper_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper_internal"
    // Objcm.g:522:1: object_wrapper_internal : ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL );
    public final ObjcmParser.object_wrapper_internal_return object_wrapper_internal() throws RecognitionException {
        ObjcmParser.object_wrapper_internal_return retval = new ObjcmParser.object_wrapper_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL282=null;
        ObjcmParser.type_convertion_return type_convertion277 =null;

        ObjcmParser.object_name_return object_name278 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper279 =null;

        ObjcmParser.object_name_return object_name280 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper281 =null;


        Object STRING_LITERAL282_tree=null;

        try {
            // Objcm.g:524:2: ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL )
            int alt64=4;
            switch ( input.LA(1) ) {
            case L_BR:
                {
                alt64=1;
                }
                break;
            case ID:
            case 189:
                {
                alt64=2;
                }
                break;
            case L_KBR:
                {
                alt64=3;
                }
                break;
            case STRING_LITERAL:
                {
                alt64=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }

            switch (alt64) {
                case 1 :
                    // Objcm.g:524:4: type_convertion ( object_name | method_call_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_convertion_in_object_wrapper_internal2589);
                    type_convertion277=type_convertion();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion277.getTree());

                    // Objcm.g:524:20: ( object_name | method_call_wrapper )
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==ID||LA63_0==189) ) {
                        alt63=1;
                    }
                    else if ( (LA63_0==L_KBR) ) {
                        alt63=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 63, 0, input);

                        throw nvae;

                    }
                    switch (alt63) {
                        case 1 :
                            // Objcm.g:524:21: object_name
                            {
                            pushFollow(FOLLOW_object_name_in_object_wrapper_internal2592);
                            object_name278=object_name();

                            state._fsp--;

                            adaptor.addChild(root_0, object_name278.getTree());

                            }
                            break;
                        case 2 :
                            // Objcm.g:524:35: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2596);
                            method_call_wrapper279=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper279.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:525:4: object_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_name_in_object_wrapper_internal2602);
                    object_name280=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name280.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:526:4: method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2607);
                    method_call_wrapper281=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper281.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:527:4: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL282=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_object_wrapper_internal2612); 
                    STRING_LITERAL282_tree = 
                    (Object)adaptor.create(STRING_LITERAL282)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL282_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper_internal"


    public static class method_message3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_message3"
    // Objcm.g:530:1: method_message3 : classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) ;
    public final ObjcmParser.method_message3_return method_message3() throws RecognitionException {
        ObjcmParser.method_message3_return retval = new ObjcmParser.method_message3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp283 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:531:2: ( classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) )
            // Objcm.g:531:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_method_message32624);
            classical_expr_wrp283=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp283.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 531:23: -> ^( MESSAGE classical_expr_wrp )
            {
                // Objcm.g:531:26: ^( MESSAGE classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_message3"


    public static class type_convertion_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion"
    // Objcm.g:533:1: type_convertion : type_convertion_internal -> ^( TYPE_CONVERTION type_convertion_internal ) ;
    public final ObjcmParser.type_convertion_return type_convertion() throws RecognitionException {
        ObjcmParser.type_convertion_return retval = new ObjcmParser.type_convertion_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_convertion_internal_return type_convertion_internal284 =null;


        RewriteRuleSubtreeStream stream_type_convertion_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_convertion_internal");
        try {
            // Objcm.g:534:2: ( type_convertion_internal -> ^( TYPE_CONVERTION type_convertion_internal ) )
            // Objcm.g:534:4: type_convertion_internal
            {
            pushFollow(FOLLOW_type_convertion_internal_in_type_convertion2643);
            type_convertion_internal284=type_convertion_internal();

            state._fsp--;

            stream_type_convertion_internal.add(type_convertion_internal284.getTree());

            // AST REWRITE
            // elements: type_convertion_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 534:29: -> ^( TYPE_CONVERTION type_convertion_internal )
            {
                // Objcm.g:534:32: ^( TYPE_CONVERTION type_convertion_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CONVERTION, "TYPE_CONVERTION")
                , root_1);

                adaptor.addChild(root_1, stream_type_convertion_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion"


    public static class type_convertion_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion_internal"
    // Objcm.g:536:1: type_convertion_internal : L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( type_internal ( generic )? ) ;
    public final ObjcmParser.type_convertion_internal_return type_convertion_internal() throws RecognitionException {
        ObjcmParser.type_convertion_internal_return retval = new ObjcmParser.type_convertion_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR285=null;
        Token string_literal286=null;
        Token string_literal287=null;
        Token ASTERISK290=null;
        Token R_BR291=null;
        ObjcmParser.type_internal_return type_internal288 =null;

        ObjcmParser.generic_return generic289 =null;


        Object L_BR285_tree=null;
        Object string_literal286_tree=null;
        Object string_literal287_tree=null;
        Object ASTERISK290_tree=null;
        Object R_BR291_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        RewriteRuleSubtreeStream stream_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_internal");
        try {
            // Objcm.g:537:2: ( L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( type_internal ( generic )? ) )
            // Objcm.g:537:4: L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR
            {
            L_BR285=(Token)match(input,L_BR,FOLLOW_L_BR_in_type_convertion_internal2662);  
            stream_L_BR.add(L_BR285);


            // Objcm.g:537:9: ( 'const' )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==CONST_PREFIX) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // Objcm.g:537:9: 'const'
                    {
                    string_literal286=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_convertion_internal2664);  
                    stream_CONST_PREFIX.add(string_literal286);


                    }
                    break;

            }


            // Objcm.g:537:18: ( 'unsigned' )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==196) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // Objcm.g:537:18: 'unsigned'
                    {
                    string_literal287=(Token)match(input,196,FOLLOW_196_in_type_convertion_internal2667);  
                    stream_196.add(string_literal287);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_type_convertion_internal2670);
            type_internal288=type_internal();

            state._fsp--;

            stream_type_internal.add(type_internal288.getTree());

            // Objcm.g:537:44: ( generic )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==L_LESS) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // Objcm.g:537:44: generic
                    {
                    pushFollow(FOLLOW_generic_in_type_convertion_internal2672);
                    generic289=generic();

                    state._fsp--;

                    stream_generic.add(generic289.getTree());

                    }
                    break;

            }


            // Objcm.g:537:53: ( ASTERISK )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==ASTERISK) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // Objcm.g:537:53: ASTERISK
            	    {
            	    ASTERISK290=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_type_convertion_internal2675);  
            	    stream_ASTERISK.add(ASTERISK290);


            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            R_BR291=(Token)match(input,R_BR,FOLLOW_R_BR_in_type_convertion_internal2678);  
            stream_R_BR.add(R_BR291);


            // AST REWRITE
            // elements: type_internal, generic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 537:68: -> ^( type_internal ( generic )? )
            {
                // Objcm.g:537:71: ^( type_internal ( generic )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_type_internal.nextNode(), root_1);

                // Objcm.g:537:87: ( generic )?
                if ( stream_generic.hasNext() ) {
                    adaptor.addChild(root_1, stream_generic.nextTree());

                }
                stream_generic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion_internal"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // Objcm.g:539:1: method_name : ID -> ^( METHOD_NAME ID ) ;
    public final ObjcmParser.method_name_return method_name() throws RecognitionException {
        ObjcmParser.method_name_return retval = new ObjcmParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID292=null;

        Object ID292_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:540:2: ( ID -> ^( METHOD_NAME ID ) )
            // Objcm.g:540:4: ID
            {
            ID292=(Token)match(input,ID,FOLLOW_ID_in_method_name2696);  
            stream_ID.add(ID292);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 540:7: -> ^( METHOD_NAME ID )
            {
                // Objcm.g:540:10: ^( METHOD_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_call_message_list_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list_wrapper"
    // Objcm.g:542:1: method_call_message_list_wrapper : method_call_message_list -> ^( MSG_LIST method_call_message_list ) ;
    public final ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_list_wrapper_return retval = new ObjcmParser.method_call_message_list_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_list_return method_call_message_list293 =null;


        RewriteRuleSubtreeStream stream_method_call_message_list=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_list");
        try {
            // Objcm.g:543:2: ( method_call_message_list -> ^( MSG_LIST method_call_message_list ) )
            // Objcm.g:543:4: method_call_message_list
            {
            pushFollow(FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2713);
            method_call_message_list293=method_call_message_list();

            state._fsp--;

            stream_method_call_message_list.add(method_call_message_list293.getTree());

            // AST REWRITE
            // elements: method_call_message_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 543:29: -> ^( MSG_LIST method_call_message_list )
            {
                // Objcm.g:543:32: ^( MSG_LIST method_call_message_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MSG_LIST, "MSG_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list_wrapper"


    public static class method_call_message_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list"
    // Objcm.g:545:1: method_call_message_list : method_call_message_first_wrapper ( method_call_message_wrapper )* ;
    public final ObjcmParser.method_call_message_list_return method_call_message_list() throws RecognitionException {
        ObjcmParser.method_call_message_list_return retval = new ObjcmParser.method_call_message_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper294 =null;

        ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper295 =null;



        try {
            // Objcm.g:546:2: ( method_call_message_first_wrapper ( method_call_message_wrapper )* )
            // Objcm.g:546:4: method_call_message_first_wrapper ( method_call_message_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2730);
            method_call_message_first_wrapper294=method_call_message_first_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_call_message_first_wrapper294.getTree());

            // Objcm.g:546:38: ( method_call_message_wrapper )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==COLON||LA69_0==ID) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // Objcm.g:546:38: method_call_message_wrapper
            	    {
            	    pushFollow(FOLLOW_method_call_message_wrapper_in_method_call_message_list2732);
            	    method_call_message_wrapper295=method_call_message_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_call_message_wrapper295.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list"


    public static class method_call_message_first_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first_wrapper"
    // Objcm.g:548:1: method_call_message_first_wrapper : method_call_message_first -> ^( METHOD_MSG method_call_message_first ) ;
    public final ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_first_wrapper_return retval = new ObjcmParser.method_call_message_first_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_return method_call_message_first296 =null;


        RewriteRuleSubtreeStream stream_method_call_message_first=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_first");
        try {
            // Objcm.g:549:2: ( method_call_message_first -> ^( METHOD_MSG method_call_message_first ) )
            // Objcm.g:549:4: method_call_message_first
            {
            pushFollow(FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2743);
            method_call_message_first296=method_call_message_first();

            state._fsp--;

            stream_method_call_message_first.add(method_call_message_first296.getTree());

            // AST REWRITE
            // elements: method_call_message_first
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 549:30: -> ^( METHOD_MSG method_call_message_first )
            {
                // Objcm.g:549:33: ^( METHOD_MSG method_call_message_first )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_first.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first_wrapper"


    public static class method_call_message_first_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first"
    // Objcm.g:551:1: method_call_message_first : COLON message ;
    public final ObjcmParser.method_call_message_first_return method_call_message_first() throws RecognitionException {
        ObjcmParser.method_call_message_first_return retval = new ObjcmParser.method_call_message_first_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON297=null;
        ObjcmParser.message_return message298 =null;


        Object COLON297_tree=null;

        try {
            // Objcm.g:552:2: ( COLON message )
            // Objcm.g:552:4: COLON message
            {
            root_0 = (Object)adaptor.nil();


            COLON297=(Token)match(input,COLON,FOLLOW_COLON_in_method_call_message_first2760); 
            COLON297_tree = 
            (Object)adaptor.create(COLON297)
            ;
            adaptor.addChild(root_0, COLON297_tree);


            pushFollow(FOLLOW_message_in_method_call_message_first2763);
            message298=message();

            state._fsp--;

            adaptor.addChild(root_0, message298.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first"


    public static class method_call_message_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_wrapper"
    // Objcm.g:554:1: method_call_message_wrapper : method_call_message -> ^( METHOD_MSG method_call_message ) ;
    public final ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_wrapper_return retval = new ObjcmParser.method_call_message_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_return method_call_message299 =null;


        RewriteRuleSubtreeStream stream_method_call_message=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message");
        try {
            // Objcm.g:555:2: ( method_call_message -> ^( METHOD_MSG method_call_message ) )
            // Objcm.g:555:4: method_call_message
            {
            pushFollow(FOLLOW_method_call_message_in_method_call_message_wrapper2773);
            method_call_message299=method_call_message();

            state._fsp--;

            stream_method_call_message.add(method_call_message299.getTree());

            // AST REWRITE
            // elements: method_call_message
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 555:24: -> ^( METHOD_MSG method_call_message )
            {
                // Objcm.g:555:27: ^( METHOD_MSG method_call_message )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_wrapper"


    public static class method_call_message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message"
    // Objcm.g:557:1: method_call_message : ( prefix | incomplete_prefix ) message ;
    public final ObjcmParser.method_call_message_return method_call_message() throws RecognitionException {
        ObjcmParser.method_call_message_return retval = new ObjcmParser.method_call_message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.prefix_return prefix300 =null;

        ObjcmParser.incomplete_prefix_return incomplete_prefix301 =null;

        ObjcmParser.message_return message302 =null;



        try {
            // Objcm.g:558:2: ( ( prefix | incomplete_prefix ) message )
            // Objcm.g:558:4: ( prefix | incomplete_prefix ) message
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:558:4: ( prefix | incomplete_prefix )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==ID) ) {
                alt70=1;
            }
            else if ( (LA70_0==COLON) ) {
                alt70=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;

            }
            switch (alt70) {
                case 1 :
                    // Objcm.g:558:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_call_message2792);
                    prefix300=prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, prefix300.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:558:14: incomplete_prefix
                    {
                    pushFollow(FOLLOW_incomplete_prefix_in_method_call_message2796);
                    incomplete_prefix301=incomplete_prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, incomplete_prefix301.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_message_in_method_call_message2800);
            message302=message();

            state._fsp--;

            adaptor.addChild(root_0, message302.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message"


    public static class message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "message"
    // Objcm.g:560:1: message : msg_expr ( COMMA msg_expr )* -> ^( MESSAGE msg_expr ( COMMA msg_expr )* ) ;
    public final ObjcmParser.message_return message() throws RecognitionException {
        ObjcmParser.message_return retval = new ObjcmParser.message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA304=null;
        ObjcmParser.msg_expr_return msg_expr303 =null;

        ObjcmParser.msg_expr_return msg_expr305 =null;


        Object COMMA304_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_msg_expr=new RewriteRuleSubtreeStream(adaptor,"rule msg_expr");
        try {
            // Objcm.g:560:9: ( msg_expr ( COMMA msg_expr )* -> ^( MESSAGE msg_expr ( COMMA msg_expr )* ) )
            // Objcm.g:560:11: msg_expr ( COMMA msg_expr )*
            {
            pushFollow(FOLLOW_msg_expr_in_message2809);
            msg_expr303=msg_expr();

            state._fsp--;

            stream_msg_expr.add(msg_expr303.getTree());

            // Objcm.g:560:20: ( COMMA msg_expr )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // Objcm.g:560:21: COMMA msg_expr
            	    {
            	    COMMA304=(Token)match(input,COMMA,FOLLOW_COMMA_in_message2812);  
            	    stream_COMMA.add(COMMA304);


            	    pushFollow(FOLLOW_msg_expr_in_message2814);
            	    msg_expr305=msg_expr();

            	    state._fsp--;

            	    stream_msg_expr.add(msg_expr305.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            // AST REWRITE
            // elements: COMMA, msg_expr, msg_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 560:38: -> ^( MESSAGE msg_expr ( COMMA msg_expr )* )
            {
                // Objcm.g:560:41: ^( MESSAGE msg_expr ( COMMA msg_expr )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_msg_expr.nextTree());

                // Objcm.g:560:60: ( COMMA msg_expr )*
                while ( stream_COMMA.hasNext()||stream_msg_expr.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_COMMA.nextNode()
                    );

                    adaptor.addChild(root_1, stream_msg_expr.nextTree());

                }
                stream_COMMA.reset();
                stream_msg_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "message"


    public static class msg_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "msg_expr"
    // Objcm.g:564:1: msg_expr : classical_expr_wrp ;
    public final ObjcmParser.msg_expr_return msg_expr() throws RecognitionException {
        ObjcmParser.msg_expr_return retval = new ObjcmParser.msg_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp306 =null;



        try {
            // Objcm.g:565:2: ( classical_expr_wrp )
            // Objcm.g:565:5: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_msg_expr2848);
            classical_expr_wrp306=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp306.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "msg_expr"


    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // Objcm.g:572:1: expression : ( classical_expr_wrp | struct_init );
    public final ObjcmParser.expression_return expression() throws RecognitionException {
        ObjcmParser.expression_return retval = new ObjcmParser.expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp307 =null;

        ObjcmParser.struct_init_return struct_init308 =null;



        try {
            // Objcm.g:573:2: ( classical_expr_wrp | struct_init )
            int alt72=2;
            alt72 = dfa72.predict(input);
            switch (alt72) {
                case 1 :
                    // Objcm.g:573:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_expression2864);
                    classical_expr_wrp307=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp307.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:574:4: struct_init
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_in_expression2869);
                    struct_init308=struct_init();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init308.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class full_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr_wrapper"
    // Objcm.g:577:1: full_expr_wrapper : full_expr -> ^( EXPR_FULL full_expr ) ;
    public final ObjcmParser.full_expr_wrapper_return full_expr_wrapper() throws RecognitionException {
        ObjcmParser.full_expr_wrapper_return retval = new ObjcmParser.full_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_return full_expr309 =null;


        RewriteRuleSubtreeStream stream_full_expr=new RewriteRuleSubtreeStream(adaptor,"rule full_expr");
        try {
            // Objcm.g:578:2: ( full_expr -> ^( EXPR_FULL full_expr ) )
            // Objcm.g:578:4: full_expr
            {
            pushFollow(FOLLOW_full_expr_in_full_expr_wrapper2880);
            full_expr309=full_expr();

            state._fsp--;

            stream_full_expr.add(full_expr309.getTree());

            // AST REWRITE
            // elements: full_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 578:14: -> ^( EXPR_FULL full_expr )
            {
                // Objcm.g:578:17: ^( EXPR_FULL full_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_FULL, "EXPR_FULL")
                , root_1);

                adaptor.addChild(root_1, stream_full_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr_wrapper"


    public static class full_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr"
    // Objcm.g:580:1: full_expr : classical_expr_wrp ( COMMA classical_expr_wrp )* ;
    public final ObjcmParser.full_expr_return full_expr() throws RecognitionException {
        ObjcmParser.full_expr_return retval = new ObjcmParser.full_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA311=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp310 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp312 =null;


        Object COMMA311_tree=null;

        try {
            // Objcm.g:581:2: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )
            // Objcm.g:581:4: classical_expr_wrp ( COMMA classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_full_expr2897);
            classical_expr_wrp310=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp310.getTree());

            // Objcm.g:581:23: ( COMMA classical_expr_wrp )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // Objcm.g:581:24: COMMA classical_expr_wrp
            	    {
            	    COMMA311=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr2900); 
            	    COMMA311_tree = 
            	    (Object)adaptor.create(COMMA311)
            	    ;
            	    adaptor.addChild(root_0, COMMA311_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_full_expr2902);
            	    classical_expr_wrp312=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp312.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr"


    public static class full_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr2"
    // Objcm.g:583:1: full_expr2 : classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* ;
    public final ObjcmParser.full_expr2_return full_expr2() throws RecognitionException {
        ObjcmParser.full_expr2_return retval = new ObjcmParser.full_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA314=null;
        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2313 =null;

        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2315 =null;


        Object COMMA314_tree=null;

        try {
            // Objcm.g:584:2: ( classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* )
            // Objcm.g:584:4: classical_expr_wrp2 ( COMMA classical_expr_wrp2 )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr22913);
            classical_expr_wrp2313=classical_expr_wrp2();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp2313.getTree());

            // Objcm.g:584:24: ( COMMA classical_expr_wrp2 )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==COMMA) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // Objcm.g:584:25: COMMA classical_expr_wrp2
            	    {
            	    COMMA314=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr22916); 
            	    COMMA314_tree = 
            	    (Object)adaptor.create(COMMA314)
            	    ;
            	    adaptor.addChild(root_0, COMMA314_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr22918);
            	    classical_expr_wrp2315=classical_expr_wrp2();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp2315.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr2"


    public static class expr_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign_wrapper"
    // Objcm.g:586:1: expr_assign_wrapper : expr_assign -> ^( EXPR_ASSIGN expr_assign ) ;
    public final ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper() throws RecognitionException {
        ObjcmParser.expr_assign_wrapper_return retval = new ObjcmParser.expr_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_assign_return expr_assign316 =null;


        RewriteRuleSubtreeStream stream_expr_assign=new RewriteRuleSubtreeStream(adaptor,"rule expr_assign");
        try {
            // Objcm.g:587:2: ( expr_assign -> ^( EXPR_ASSIGN expr_assign ) )
            // Objcm.g:587:4: expr_assign
            {
            pushFollow(FOLLOW_expr_assign_in_expr_assign_wrapper2929);
            expr_assign316=expr_assign();

            state._fsp--;

            stream_expr_assign.add(expr_assign316.getTree());

            // AST REWRITE
            // elements: expr_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 587:16: -> ^( EXPR_ASSIGN expr_assign )
            {
                // Objcm.g:587:19: ^( EXPR_ASSIGN expr_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ASSIGN, "EXPR_ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_expr_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign_wrapper"


    public static class expr_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign"
    // Objcm.g:589:1: expr_assign : assign_wrapper ( classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) ) ;
    public final ObjcmParser.expr_assign_return expr_assign() throws RecognitionException {
        ObjcmParser.expr_assign_return retval = new ObjcmParser.expr_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_wrapper_return assign_wrapper317 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp318 =null;

        ObjcmParser.array_init_wrapper_return array_init_wrapper319 =null;

        ObjcmParser.func_pointer2_return func_pointer2320 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper321 =null;



        try {
            // Objcm.g:590:2: ( assign_wrapper ( classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) ) )
            // Objcm.g:590:4: assign_wrapper ( classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_assign_wrapper_in_expr_assign2948);
            assign_wrapper317=assign_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, assign_wrapper317.getTree());

            // Objcm.g:590:19: ( classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )
            int alt76=3;
            alt76 = dfa76.predict(input);
            switch (alt76) {
                case 1 :
                    // Objcm.g:590:20: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_expr_assign2951);
                    classical_expr_wrp318=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp318.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:590:41: array_init_wrapper
                    {
                    pushFollow(FOLLOW_array_init_wrapper_in_expr_assign2955);
                    array_init_wrapper319=array_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init_wrapper319.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:590:62: ( func_pointer2 ( method_call_wrapper )? )
                    {
                    // Objcm.g:590:62: ( func_pointer2 ( method_call_wrapper )? )
                    // Objcm.g:590:63: func_pointer2 ( method_call_wrapper )?
                    {
                    pushFollow(FOLLOW_func_pointer2_in_expr_assign2960);
                    func_pointer2320=func_pointer2();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer2320.getTree());

                    // Objcm.g:590:77: ( method_call_wrapper )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==L_KBR) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // Objcm.g:590:77: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_expr_assign2962);
                            method_call_wrapper321=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper321.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign"


    public static class array_init_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init_wrapper"
    // Objcm.g:592:1: array_init_wrapper : array_init -> ^( ARRAY_INIT array_init ) ;
    public final ObjcmParser.array_init_wrapper_return array_init_wrapper() throws RecognitionException {
        ObjcmParser.array_init_wrapper_return retval = new ObjcmParser.array_init_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.array_init_return array_init322 =null;


        RewriteRuleSubtreeStream stream_array_init=new RewriteRuleSubtreeStream(adaptor,"rule array_init");
        try {
            // Objcm.g:593:2: ( array_init -> ^( ARRAY_INIT array_init ) )
            // Objcm.g:593:4: array_init
            {
            pushFollow(FOLLOW_array_init_in_array_init_wrapper2974);
            array_init322=array_init();

            state._fsp--;

            stream_array_init.add(array_init322.getTree());

            // AST REWRITE
            // elements: array_init
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 593:15: -> ^( ARRAY_INIT array_init )
            {
                // Objcm.g:593:18: ^( ARRAY_INIT array_init )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ARRAY_INIT, "ARRAY_INIT")
                , root_1);

                adaptor.addChild(root_1, stream_array_init.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init_wrapper"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // Objcm.g:595:1: array_init : L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR ;
    public final ObjcmParser.array_init_return array_init() throws RecognitionException {
        ObjcmParser.array_init_return retval = new ObjcmParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR323=null;
        Token COMMA325=null;
        Token R_FBR327=null;
        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3324 =null;

        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3326 =null;


        Object L_FBR323_tree=null;
        Object COMMA325_tree=null;
        Object R_FBR327_tree=null;

        try {
            // Objcm.g:596:2: ( L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR )
            // Objcm.g:596:4: L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR323=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array_init2993); 
            L_FBR323_tree = 
            (Object)adaptor.create(L_FBR323)
            ;
            adaptor.addChild(root_0, L_FBR323_tree);


            // Objcm.g:596:10: ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==ASTERISK||LA78_0==ID||LA78_0==L_AND||LA78_0==L_BR||(LA78_0 >= L_FBR && LA78_0 <= L_KBR)||LA78_0==L_MINUS||LA78_0==L_MINUS_MINUS||LA78_0==L_NOT||LA78_0==L_PLUS||LA78_0==L_PLUS_PLUS||LA78_0==L_TILDA||LA78_0==NUMBER||LA78_0==SIZEOF||(LA78_0 >= STRING_LITERAL && LA78_0 <= STRING_LITERAL3)||LA78_0==165||LA78_0==171||LA78_0==173||LA78_0==177||LA78_0==189||LA78_0==191||LA78_0==196) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // Objcm.g:596:11: classical_expr_wrp3 ( COMMA classical_expr_wrp3 )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init2996);
                    classical_expr_wrp3324=classical_expr_wrp3();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp3324.getTree());

                    // Objcm.g:596:31: ( COMMA classical_expr_wrp3 )*
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( (LA77_0==COMMA) ) {
                            alt77=1;
                        }


                        switch (alt77) {
                    	case 1 :
                    	    // Objcm.g:596:32: COMMA classical_expr_wrp3
                    	    {
                    	    COMMA325=(Token)match(input,COMMA,FOLLOW_COMMA_in_array_init2999); 
                    	    COMMA325_tree = 
                    	    (Object)adaptor.create(COMMA325)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA325_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init3001);
                    	    classical_expr_wrp3326=classical_expr_wrp3();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp3326.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop77;
                        }
                    } while (true);


                    }
                    break;

            }


            R_FBR327=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array_init3007); 
            R_FBR327_tree = 
            (Object)adaptor.create(R_FBR327)
            ;
            adaptor.addChild(root_0, R_FBR327_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class classical_expr_wrp3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp3"
    // Objcm.g:599:1: classical_expr_wrp3 : ( array_init_wrapper | classical_expr_wrp );
    public final ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3() throws RecognitionException {
        ObjcmParser.classical_expr_wrp3_return retval = new ObjcmParser.classical_expr_wrp3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.array_init_wrapper_return array_init_wrapper328 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp329 =null;



        try {
            // Objcm.g:600:2: ( array_init_wrapper | classical_expr_wrp )
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==L_FBR) ) {
                alt79=1;
            }
            else if ( (LA79_0==ASTERISK||LA79_0==ID||LA79_0==L_AND||LA79_0==L_BR||LA79_0==L_KBR||LA79_0==L_MINUS||LA79_0==L_MINUS_MINUS||LA79_0==L_NOT||LA79_0==L_PLUS||LA79_0==L_PLUS_PLUS||LA79_0==L_TILDA||LA79_0==NUMBER||LA79_0==SIZEOF||(LA79_0 >= STRING_LITERAL && LA79_0 <= STRING_LITERAL3)||LA79_0==165||LA79_0==171||LA79_0==173||LA79_0==177||LA79_0==189||LA79_0==191||LA79_0==196) ) {
                alt79=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }
            switch (alt79) {
                case 1 :
                    // Objcm.g:600:4: array_init_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_init_wrapper_in_classical_expr_wrp33019);
                    array_init_wrapper328=array_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init_wrapper328.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:601:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_classical_expr_wrp33025);
                    classical_expr_wrp329=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp329.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp3"


    public static class classical_expr_wrp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp"
    // Objcm.g:604:1: classical_expr_wrp : classical_expr -> ^( CLASSICAL_EXPR classical_expr ) ;
    public final ObjcmParser.classical_expr_wrp_return classical_expr_wrp() throws RecognitionException {
        ObjcmParser.classical_expr_wrp_return retval = new ObjcmParser.classical_expr_wrp_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_return classical_expr330 =null;


        RewriteRuleSubtreeStream stream_classical_expr=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr");
        try {
            // Objcm.g:605:2: ( classical_expr -> ^( CLASSICAL_EXPR classical_expr ) )
            // Objcm.g:605:4: classical_expr
            {
            pushFollow(FOLLOW_classical_expr_in_classical_expr_wrp3038);
            classical_expr330=classical_expr();

            state._fsp--;

            stream_classical_expr.add(classical_expr330.getTree());

            // AST REWRITE
            // elements: classical_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 605:19: -> ^( CLASSICAL_EXPR classical_expr )
            {
                // Objcm.g:605:22: ^( CLASSICAL_EXPR classical_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR, "CLASSICAL_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp"


    public static class classical_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr"
    // Objcm.g:607:1: classical_expr : simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr_return classical_expr() throws RecognitionException {
        ObjcmParser.classical_expr_return retval = new ObjcmParser.classical_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper331 =null;

        ObjcmParser.expr_question_wrapper_return expr_question_wrapper332 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper333 =null;



        try {
            // Objcm.g:608:2: ( simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? )
            // Objcm.g:608:4: simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_simple_expr_wrapper_in_classical_expr3055);
            simple_expr_wrapper331=simple_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, simple_expr_wrapper331.getTree());

            // Objcm.g:608:24: ( expr_question_wrapper | expr_assign_wrapper )?
            int alt80=3;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==L_QUESTION) ) {
                alt80=1;
            }
            else if ( (LA80_0==L_AND_EQ||(LA80_0 >= L_DIV_EQ && LA80_0 <= L_EQ)||LA80_0==L_LEFT_EQ||LA80_0==L_MINUS_EQ||LA80_0==L_MULT_EQ||LA80_0==L_OR_EQ||LA80_0==L_PERC_EQ||LA80_0==L_PLUS_EQ||LA80_0==L_RIGHT_EQ||LA80_0==L_XOR_EQ) ) {
                alt80=2;
            }
            switch (alt80) {
                case 1 :
                    // Objcm.g:608:25: expr_question_wrapper
                    {
                    pushFollow(FOLLOW_expr_question_wrapper_in_classical_expr3058);
                    expr_question_wrapper332=expr_question_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_question_wrapper332.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:608:49: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr3062);
                    expr_assign_wrapper333=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper333.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr"


    public static class classical_expr_wrp2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp2"
    // Objcm.g:610:1: classical_expr_wrp2 : classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) ;
    public final ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2() throws RecognitionException {
        ObjcmParser.classical_expr_wrp2_return retval = new ObjcmParser.classical_expr_wrp2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr2_return classical_expr2334 =null;


        RewriteRuleSubtreeStream stream_classical_expr2=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr2");
        try {
            // Objcm.g:611:2: ( classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) )
            // Objcm.g:611:4: classical_expr2
            {
            pushFollow(FOLLOW_classical_expr2_in_classical_expr_wrp23074);
            classical_expr2334=classical_expr2();

            state._fsp--;

            stream_classical_expr2.add(classical_expr2334.getTree());

            // AST REWRITE
            // elements: classical_expr2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 611:20: -> ^( CLASSICAL_EXPR_2 classical_expr2 )
            {
                // Objcm.g:611:23: ^( CLASSICAL_EXPR_2 classical_expr2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR_2, "CLASSICAL_EXPR_2")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp2"


    public static class classical_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr2"
    // Objcm.g:613:1: classical_expr2 : ( object_name | func_pointer1 ) ( expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr2_return classical_expr2() throws RecognitionException {
        ObjcmParser.classical_expr2_return retval = new ObjcmParser.classical_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_name_return object_name335 =null;

        ObjcmParser.func_pointer1_return func_pointer1336 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper337 =null;



        try {
            // Objcm.g:614:2: ( ( object_name | func_pointer1 ) ( expr_assign_wrapper )? )
            // Objcm.g:614:4: ( object_name | func_pointer1 ) ( expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:614:4: ( object_name | func_pointer1 )
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    // Objcm.g:614:5: object_name
                    {
                    pushFollow(FOLLOW_object_name_in_classical_expr23092);
                    object_name335=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name335.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:614:19: func_pointer1
                    {
                    pushFollow(FOLLOW_func_pointer1_in_classical_expr23096);
                    func_pointer1336=func_pointer1();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer1336.getTree());

                    }
                    break;

            }


            // Objcm.g:614:34: ( expr_assign_wrapper )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==L_AND_EQ||(LA82_0 >= L_DIV_EQ && LA82_0 <= L_EQ)||LA82_0==L_LEFT_EQ||LA82_0==L_MINUS_EQ||LA82_0==L_MULT_EQ||LA82_0==L_OR_EQ||LA82_0==L_PERC_EQ||LA82_0==L_PLUS_EQ||LA82_0==L_RIGHT_EQ||LA82_0==L_XOR_EQ) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // Objcm.g:614:34: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr23099);
                    expr_assign_wrapper337=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper337.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr2"


    public static class expr_question_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question_wrapper"
    // Objcm.g:616:1: expr_question_wrapper : expr_question -> ^( EXPR_QUESTION expr_question ) ;
    public final ObjcmParser.expr_question_wrapper_return expr_question_wrapper() throws RecognitionException {
        ObjcmParser.expr_question_wrapper_return retval = new ObjcmParser.expr_question_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_question_return expr_question338 =null;


        RewriteRuleSubtreeStream stream_expr_question=new RewriteRuleSubtreeStream(adaptor,"rule expr_question");
        try {
            // Objcm.g:617:2: ( expr_question -> ^( EXPR_QUESTION expr_question ) )
            // Objcm.g:617:4: expr_question
            {
            pushFollow(FOLLOW_expr_question_in_expr_question_wrapper3109);
            expr_question338=expr_question();

            state._fsp--;

            stream_expr_question.add(expr_question338.getTree());

            // AST REWRITE
            // elements: expr_question
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 617:18: -> ^( EXPR_QUESTION expr_question )
            {
                // Objcm.g:617:21: ^( EXPR_QUESTION expr_question )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_QUESTION, "EXPR_QUESTION")
                , root_1);

                adaptor.addChild(root_1, stream_expr_question.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question_wrapper"


    public static class expr_question_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question"
    // Objcm.g:619:1: expr_question : L_QUESTION classical_expr_wrp COLON classical_expr_wrp ;
    public final ObjcmParser.expr_question_return expr_question() throws RecognitionException {
        ObjcmParser.expr_question_return retval = new ObjcmParser.expr_question_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_QUESTION339=null;
        Token COLON341=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp340 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp342 =null;


        Object L_QUESTION339_tree=null;
        Object COLON341_tree=null;

        try {
            // Objcm.g:620:2: ( L_QUESTION classical_expr_wrp COLON classical_expr_wrp )
            // Objcm.g:620:4: L_QUESTION classical_expr_wrp COLON classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            L_QUESTION339=(Token)match(input,L_QUESTION,FOLLOW_L_QUESTION_in_expr_question3126); 
            L_QUESTION339_tree = 
            (Object)adaptor.create(L_QUESTION339)
            ;
            adaptor.addChild(root_0, L_QUESTION339_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question3128);
            classical_expr_wrp340=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp340.getTree());

            COLON341=(Token)match(input,COLON,FOLLOW_COLON_in_expr_question3130); 
            COLON341_tree = 
            (Object)adaptor.create(COLON341)
            ;
            adaptor.addChild(root_0, COLON341_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question3132);
            classical_expr_wrp342=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp342.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question"


    public static class assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign_wrapper"
    // Objcm.g:622:1: assign_wrapper : assign -> ^( ASSIGN assign ) ;
    public final ObjcmParser.assign_wrapper_return assign_wrapper() throws RecognitionException {
        ObjcmParser.assign_wrapper_return retval = new ObjcmParser.assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_return assign343 =null;


        RewriteRuleSubtreeStream stream_assign=new RewriteRuleSubtreeStream(adaptor,"rule assign");
        try {
            // Objcm.g:623:2: ( assign -> ^( ASSIGN assign ) )
            // Objcm.g:623:4: assign
            {
            pushFollow(FOLLOW_assign_in_assign_wrapper3141);
            assign343=assign();

            state._fsp--;

            stream_assign.add(assign343.getTree());

            // AST REWRITE
            // elements: assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 623:11: -> ^( ASSIGN assign )
            {
                // Objcm.g:623:14: ^( ASSIGN assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ASSIGN, "ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign_wrapper"


    public static class assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign"
    // Objcm.g:625:1: assign : ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ );
    public final ObjcmParser.assign_return assign() throws RecognitionException {
        ObjcmParser.assign_return retval = new ObjcmParser.assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set344=null;

        Object set344_tree=null;

        try {
            // Objcm.g:626:2: ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set344=(Token)input.LT(1);

            if ( input.LA(1)==L_AND_EQ||(input.LA(1) >= L_DIV_EQ && input.LA(1) <= L_EQ)||input.LA(1)==L_LEFT_EQ||input.LA(1)==L_MINUS_EQ||input.LA(1)==L_MULT_EQ||input.LA(1)==L_OR_EQ||input.LA(1)==L_PERC_EQ||input.LA(1)==L_PLUS_EQ||input.LA(1)==L_RIGHT_EQ||input.LA(1)==L_XOR_EQ ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set344)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign"


    public static class simple_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr_wrapper"
    // Objcm.g:630:1: simple_expr_wrapper : simple_expr -> ^( SIMPLE_EXPR simple_expr ) ;
    public final ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper() throws RecognitionException {
        ObjcmParser.simple_expr_wrapper_return retval = new ObjcmParser.simple_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_return simple_expr345 =null;


        RewriteRuleSubtreeStream stream_simple_expr=new RewriteRuleSubtreeStream(adaptor,"rule simple_expr");
        try {
            // Objcm.g:631:2: ( simple_expr -> ^( SIMPLE_EXPR simple_expr ) )
            // Objcm.g:631:4: simple_expr
            {
            pushFollow(FOLLOW_simple_expr_in_simple_expr_wrapper3214);
            simple_expr345=simple_expr();

            state._fsp--;

            stream_simple_expr.add(simple_expr345.getTree());

            // AST REWRITE
            // elements: simple_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 631:16: -> ^( SIMPLE_EXPR simple_expr )
            {
                // Objcm.g:631:19: ^( SIMPLE_EXPR simple_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SIMPLE_EXPR, "SIMPLE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr_wrapper"


    public static class simple_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr"
    // Objcm.g:633:1: simple_expr : expr_or_or -> ^( EXPR_OR_OR expr_or_or ) ;
    public final ObjcmParser.simple_expr_return simple_expr() throws RecognitionException {
        ObjcmParser.simple_expr_return retval = new ObjcmParser.simple_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_or_return expr_or_or346 =null;


        RewriteRuleSubtreeStream stream_expr_or_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or_or");
        try {
            // Objcm.g:634:2: ( expr_or_or -> ^( EXPR_OR_OR expr_or_or ) )
            // Objcm.g:634:4: expr_or_or
            {
            pushFollow(FOLLOW_expr_or_or_in_simple_expr3232);
            expr_or_or346=expr_or_or();

            state._fsp--;

            stream_expr_or_or.add(expr_or_or346.getTree());

            // AST REWRITE
            // elements: expr_or_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 634:15: -> ^( EXPR_OR_OR expr_or_or )
            {
                // Objcm.g:634:18: ^( EXPR_OR_OR expr_or_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR_OR, "EXPR_OR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr"


    public static class expr_or_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_or"
    // Objcm.g:636:1: expr_or_or : expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_or_or_return expr_or_or() throws RecognitionException {
        ObjcmParser.expr_or_or_return retval = new ObjcmParser.expr_or_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR_OR348=null;
        ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper347 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper349 =null;


        Object L_OR_OR348_tree=null;

        try {
            // Objcm.g:637:2: ( expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )* )
            // Objcm.g:637:4: expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_and_wrapper_in_expr_or_or3249);
            expr_and_and_wrapper347=expr_and_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_and_wrapper347.getTree());

            // Objcm.g:637:25: ( L_OR_OR simple_expr_wrapper )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==L_OR_OR) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // Objcm.g:637:26: L_OR_OR simple_expr_wrapper
            	    {
            	    L_OR_OR348=(Token)match(input,L_OR_OR,FOLLOW_L_OR_OR_in_expr_or_or3252); 
            	    L_OR_OR348_tree = 
            	    (Object)adaptor.create(L_OR_OR348)
            	    ;
            	    adaptor.addChild(root_0, L_OR_OR348_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_or_or3254);
            	    simple_expr_wrapper349=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper349.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_or"


    public static class expr_and_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and_wrapper"
    // Objcm.g:639:1: expr_and_and_wrapper : expr_and_and -> ^( EXPR_AND_AND expr_and_and ) ;
    public final ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_and_wrapper_return retval = new ObjcmParser.expr_and_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_and_return expr_and_and350 =null;


        RewriteRuleSubtreeStream stream_expr_and_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and_and");
        try {
            // Objcm.g:640:2: ( expr_and_and -> ^( EXPR_AND_AND expr_and_and ) )
            // Objcm.g:640:4: expr_and_and
            {
            pushFollow(FOLLOW_expr_and_and_in_expr_and_and_wrapper3265);
            expr_and_and350=expr_and_and();

            state._fsp--;

            stream_expr_and_and.add(expr_and_and350.getTree());

            // AST REWRITE
            // elements: expr_and_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 640:17: -> ^( EXPR_AND_AND expr_and_and )
            {
                // Objcm.g:640:20: ^( EXPR_AND_AND expr_and_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND_AND, "EXPR_AND_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and_wrapper"


    public static class expr_and_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and"
    // Objcm.g:642:1: expr_and_and : expr_or_wrapper ( L_AND_AND simple_expr_wrapper )* ;
    public final ObjcmParser.expr_and_and_return expr_and_and() throws RecognitionException {
        ObjcmParser.expr_and_and_return retval = new ObjcmParser.expr_and_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND_AND352=null;
        ObjcmParser.expr_or_wrapper_return expr_or_wrapper351 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper353 =null;


        Object L_AND_AND352_tree=null;

        try {
            // Objcm.g:643:2: ( expr_or_wrapper ( L_AND_AND simple_expr_wrapper )* )
            // Objcm.g:643:4: expr_or_wrapper ( L_AND_AND simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_or_wrapper_in_expr_and_and3282);
            expr_or_wrapper351=expr_or_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_or_wrapper351.getTree());

            // Objcm.g:643:20: ( L_AND_AND simple_expr_wrapper )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==L_AND_AND) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // Objcm.g:643:21: L_AND_AND simple_expr_wrapper
            	    {
            	    L_AND_AND352=(Token)match(input,L_AND_AND,FOLLOW_L_AND_AND_in_expr_and_and3285); 
            	    L_AND_AND352_tree = 
            	    (Object)adaptor.create(L_AND_AND352)
            	    ;
            	    adaptor.addChild(root_0, L_AND_AND352_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_and_and3287);
            	    simple_expr_wrapper353=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper353.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and"


    public static class expr_or_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_wrapper"
    // Objcm.g:645:1: expr_or_wrapper : expr_or -> ^( EXPR_OR expr_or ) ;
    public final ObjcmParser.expr_or_wrapper_return expr_or_wrapper() throws RecognitionException {
        ObjcmParser.expr_or_wrapper_return retval = new ObjcmParser.expr_or_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_return expr_or354 =null;


        RewriteRuleSubtreeStream stream_expr_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or");
        try {
            // Objcm.g:646:2: ( expr_or -> ^( EXPR_OR expr_or ) )
            // Objcm.g:646:4: expr_or
            {
            pushFollow(FOLLOW_expr_or_in_expr_or_wrapper3298);
            expr_or354=expr_or();

            state._fsp--;

            stream_expr_or.add(expr_or354.getTree());

            // AST REWRITE
            // elements: expr_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 646:12: -> ^( EXPR_OR expr_or )
            {
                // Objcm.g:646:15: ^( EXPR_OR expr_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR, "EXPR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_wrapper"


    public static class expr_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or"
    // Objcm.g:648:1: expr_or : expr_xor_wrapper ( L_OR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_or_return expr_or() throws RecognitionException {
        ObjcmParser.expr_or_return retval = new ObjcmParser.expr_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR356=null;
        ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper355 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper357 =null;


        Object L_OR356_tree=null;

        try {
            // Objcm.g:649:2: ( expr_xor_wrapper ( L_OR simple_expr_wrapper )* )
            // Objcm.g:649:4: expr_xor_wrapper ( L_OR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_xor_wrapper_in_expr_or3316);
            expr_xor_wrapper355=expr_xor_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_xor_wrapper355.getTree());

            // Objcm.g:649:21: ( L_OR simple_expr_wrapper )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==L_OR) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // Objcm.g:649:22: L_OR simple_expr_wrapper
            	    {
            	    L_OR356=(Token)match(input,L_OR,FOLLOW_L_OR_in_expr_or3319); 
            	    L_OR356_tree = 
            	    (Object)adaptor.create(L_OR356)
            	    ;
            	    adaptor.addChild(root_0, L_OR356_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_or3321);
            	    simple_expr_wrapper357=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper357.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or"


    public static class expr_xor_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor_wrapper"
    // Objcm.g:651:1: expr_xor_wrapper : expr_xor -> ^( EXPR_XOR expr_xor ) ;
    public final ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper() throws RecognitionException {
        ObjcmParser.expr_xor_wrapper_return retval = new ObjcmParser.expr_xor_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_xor_return expr_xor358 =null;


        RewriteRuleSubtreeStream stream_expr_xor=new RewriteRuleSubtreeStream(adaptor,"rule expr_xor");
        try {
            // Objcm.g:652:2: ( expr_xor -> ^( EXPR_XOR expr_xor ) )
            // Objcm.g:652:4: expr_xor
            {
            pushFollow(FOLLOW_expr_xor_in_expr_xor_wrapper3332);
            expr_xor358=expr_xor();

            state._fsp--;

            stream_expr_xor.add(expr_xor358.getTree());

            // AST REWRITE
            // elements: expr_xor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 652:13: -> ^( EXPR_XOR expr_xor )
            {
                // Objcm.g:652:16: ^( EXPR_XOR expr_xor )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_XOR, "EXPR_XOR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_xor.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor_wrapper"


    public static class expr_xor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor"
    // Objcm.g:654:1: expr_xor : expr_and_wrapper ( L_XOR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_xor_return expr_xor() throws RecognitionException {
        ObjcmParser.expr_xor_return retval = new ObjcmParser.expr_xor_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_XOR360=null;
        ObjcmParser.expr_and_wrapper_return expr_and_wrapper359 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper361 =null;


        Object L_XOR360_tree=null;

        try {
            // Objcm.g:655:2: ( expr_and_wrapper ( L_XOR simple_expr_wrapper )* )
            // Objcm.g:655:4: expr_and_wrapper ( L_XOR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_wrapper_in_expr_xor3349);
            expr_and_wrapper359=expr_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_wrapper359.getTree());

            // Objcm.g:655:21: ( L_XOR simple_expr_wrapper )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==L_XOR) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // Objcm.g:655:22: L_XOR simple_expr_wrapper
            	    {
            	    L_XOR360=(Token)match(input,L_XOR,FOLLOW_L_XOR_in_expr_xor3352); 
            	    L_XOR360_tree = 
            	    (Object)adaptor.create(L_XOR360)
            	    ;
            	    adaptor.addChild(root_0, L_XOR360_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_xor3354);
            	    simple_expr_wrapper361=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper361.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor"


    public static class expr_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_wrapper"
    // Objcm.g:657:1: expr_and_wrapper : expr_and -> ^( EXPR_AND expr_and ) ;
    public final ObjcmParser.expr_and_wrapper_return expr_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_wrapper_return retval = new ObjcmParser.expr_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_return expr_and362 =null;


        RewriteRuleSubtreeStream stream_expr_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and");
        try {
            // Objcm.g:658:2: ( expr_and -> ^( EXPR_AND expr_and ) )
            // Objcm.g:658:4: expr_and
            {
            pushFollow(FOLLOW_expr_and_in_expr_and_wrapper3366);
            expr_and362=expr_and();

            state._fsp--;

            stream_expr_and.add(expr_and362.getTree());

            // AST REWRITE
            // elements: expr_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 658:13: -> ^( EXPR_AND expr_and )
            {
                // Objcm.g:658:16: ^( EXPR_AND expr_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND, "EXPR_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_wrapper"


    public static class expr_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and"
    // Objcm.g:660:1: expr_and : expr_eq_wrapper ( L_AND simple_expr_wrapper )* ;
    public final ObjcmParser.expr_and_return expr_and() throws RecognitionException {
        ObjcmParser.expr_and_return retval = new ObjcmParser.expr_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND364=null;
        ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper363 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper365 =null;


        Object L_AND364_tree=null;

        try {
            // Objcm.g:661:2: ( expr_eq_wrapper ( L_AND simple_expr_wrapper )* )
            // Objcm.g:661:4: expr_eq_wrapper ( L_AND simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_eq_wrapper_in_expr_and3384);
            expr_eq_wrapper363=expr_eq_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_eq_wrapper363.getTree());

            // Objcm.g:661:20: ( L_AND simple_expr_wrapper )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==L_AND) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // Objcm.g:661:21: L_AND simple_expr_wrapper
            	    {
            	    L_AND364=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_and3387); 
            	    L_AND364_tree = 
            	    (Object)adaptor.create(L_AND364)
            	    ;
            	    adaptor.addChild(root_0, L_AND364_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_and3389);
            	    simple_expr_wrapper365=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper365.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and"


    public static class expr_eq_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq_wrapper"
    // Objcm.g:663:1: expr_eq_wrapper : expr_eq -> ^( EXPR_EQ expr_eq ) ;
    public final ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper() throws RecognitionException {
        ObjcmParser.expr_eq_wrapper_return retval = new ObjcmParser.expr_eq_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_eq_return expr_eq366 =null;


        RewriteRuleSubtreeStream stream_expr_eq=new RewriteRuleSubtreeStream(adaptor,"rule expr_eq");
        try {
            // Objcm.g:664:2: ( expr_eq -> ^( EXPR_EQ expr_eq ) )
            // Objcm.g:664:4: expr_eq
            {
            pushFollow(FOLLOW_expr_eq_in_expr_eq_wrapper3401);
            expr_eq366=expr_eq();

            state._fsp--;

            stream_expr_eq.add(expr_eq366.getTree());

            // AST REWRITE
            // elements: expr_eq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 664:12: -> ^( EXPR_EQ expr_eq )
            {
                // Objcm.g:664:15: ^( EXPR_EQ expr_eq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_EQ, "EXPR_EQ")
                , root_1);

                adaptor.addChild(root_1, stream_expr_eq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq_wrapper"


    public static class expr_eq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq"
    // Objcm.g:666:1: expr_eq : expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_eq_return expr_eq() throws RecognitionException {
        ObjcmParser.expr_eq_return retval = new ObjcmParser.expr_eq_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set368=null;
        ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper367 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper369 =null;


        Object set368_tree=null;

        try {
            // Objcm.g:667:2: ( expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )* )
            // Objcm.g:667:4: expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_cond_wrapper_in_expr_eq3419);
            expr_cond_wrapper367=expr_cond_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_cond_wrapper367.getTree());

            // Objcm.g:667:22: ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==L_EQ_EQ||LA88_0==L_NEQ) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // Objcm.g:667:23: ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper
            	    {
            	    set368=(Token)input.LT(1);

            	    if ( input.LA(1)==L_EQ_EQ||input.LA(1)==L_NEQ ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set368)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_eq3430);
            	    simple_expr_wrapper369=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper369.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq"


    public static class expr_cond_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond_wrapper"
    // Objcm.g:669:1: expr_cond_wrapper : expr_cond -> ^( EXPR_COND expr_cond ) ;
    public final ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper() throws RecognitionException {
        ObjcmParser.expr_cond_wrapper_return retval = new ObjcmParser.expr_cond_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_cond_return expr_cond370 =null;


        RewriteRuleSubtreeStream stream_expr_cond=new RewriteRuleSubtreeStream(adaptor,"rule expr_cond");
        try {
            // Objcm.g:670:2: ( expr_cond -> ^( EXPR_COND expr_cond ) )
            // Objcm.g:670:4: expr_cond
            {
            pushFollow(FOLLOW_expr_cond_in_expr_cond_wrapper3441);
            expr_cond370=expr_cond();

            state._fsp--;

            stream_expr_cond.add(expr_cond370.getTree());

            // AST REWRITE
            // elements: expr_cond
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 670:14: -> ^( EXPR_COND expr_cond )
            {
                // Objcm.g:670:17: ^( EXPR_COND expr_cond )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_COND, "EXPR_COND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_cond.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond_wrapper"


    public static class expr_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond"
    // Objcm.g:672:1: expr_cond : expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_cond_return expr_cond() throws RecognitionException {
        ObjcmParser.expr_cond_return retval = new ObjcmParser.expr_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set372=null;
        ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper371 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper373 =null;


        Object set372_tree=null;

        try {
            // Objcm.g:673:2: ( expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )* )
            // Objcm.g:673:4: expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mov_wrapper_in_expr_cond3458);
            expr_mov_wrapper371=expr_mov_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mov_wrapper371.getTree());

            // Objcm.g:673:21: ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( ((LA89_0 >= L_LESS && LA89_0 <= L_LESS_EQ)||(LA89_0 >= L_MORE && LA89_0 <= L_MORE_EQ)) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // Objcm.g:673:22: ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper
            	    {
            	    set372=(Token)input.LT(1);

            	    if ( (input.LA(1) >= L_LESS && input.LA(1) <= L_LESS_EQ)||(input.LA(1) >= L_MORE && input.LA(1) <= L_MORE_EQ) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set372)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_cond3477);
            	    simple_expr_wrapper373=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper373.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond"


    public static class expr_mov_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov_wrapper"
    // Objcm.g:675:1: expr_mov_wrapper : expr_mov -> ^( EXPR_MOV expr_mov ) ;
    public final ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper() throws RecognitionException {
        ObjcmParser.expr_mov_wrapper_return retval = new ObjcmParser.expr_mov_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mov_return expr_mov374 =null;


        RewriteRuleSubtreeStream stream_expr_mov=new RewriteRuleSubtreeStream(adaptor,"rule expr_mov");
        try {
            // Objcm.g:676:2: ( expr_mov -> ^( EXPR_MOV expr_mov ) )
            // Objcm.g:676:4: expr_mov
            {
            pushFollow(FOLLOW_expr_mov_in_expr_mov_wrapper3488);
            expr_mov374=expr_mov();

            state._fsp--;

            stream_expr_mov.add(expr_mov374.getTree());

            // AST REWRITE
            // elements: expr_mov
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 676:13: -> ^( EXPR_MOV expr_mov )
            {
                // Objcm.g:676:16: ^( EXPR_MOV expr_mov )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MOV, "EXPR_MOV")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mov.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov_wrapper"


    public static class expr_mov_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov"
    // Objcm.g:678:1: expr_mov : expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_mov_return expr_mov() throws RecognitionException {
        ObjcmParser.expr_mov_return retval = new ObjcmParser.expr_mov_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set376=null;
        ObjcmParser.expr_add_wrapper_return expr_add_wrapper375 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper377 =null;


        Object set376_tree=null;

        try {
            // Objcm.g:679:2: ( expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )* )
            // Objcm.g:679:4: expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_add_wrapper_in_expr_mov3506);
            expr_add_wrapper375=expr_add_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_add_wrapper375.getTree());

            // Objcm.g:679:21: ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==L_LEFT||LA90_0==L_RIGHT) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // Objcm.g:679:22: ( L_LEFT | L_RIGHT ) simple_expr_wrapper
            	    {
            	    set376=(Token)input.LT(1);

            	    if ( input.LA(1)==L_LEFT||input.LA(1)==L_RIGHT ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set376)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_mov3517);
            	    simple_expr_wrapper377=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper377.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov"


    public static class expr_add_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add_wrapper"
    // Objcm.g:681:1: expr_add_wrapper : expr_add -> ^( EXPR_ADD expr_add ) ;
    public final ObjcmParser.expr_add_wrapper_return expr_add_wrapper() throws RecognitionException {
        ObjcmParser.expr_add_wrapper_return retval = new ObjcmParser.expr_add_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_add_return expr_add378 =null;


        RewriteRuleSubtreeStream stream_expr_add=new RewriteRuleSubtreeStream(adaptor,"rule expr_add");
        try {
            // Objcm.g:682:2: ( expr_add -> ^( EXPR_ADD expr_add ) )
            // Objcm.g:682:4: expr_add
            {
            pushFollow(FOLLOW_expr_add_in_expr_add_wrapper3529);
            expr_add378=expr_add();

            state._fsp--;

            stream_expr_add.add(expr_add378.getTree());

            // AST REWRITE
            // elements: expr_add
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 682:13: -> ^( EXPR_ADD expr_add )
            {
                // Objcm.g:682:16: ^( EXPR_ADD expr_add )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ADD, "EXPR_ADD")
                , root_1);

                adaptor.addChild(root_1, stream_expr_add.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add_wrapper"


    public static class expr_add_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add"
    // Objcm.g:684:1: expr_add : expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_add_return expr_add() throws RecognitionException {
        ObjcmParser.expr_add_return retval = new ObjcmParser.expr_add_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set380=null;
        ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper379 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper381 =null;


        Object set380_tree=null;

        try {
            // Objcm.g:685:2: ( expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )* )
            // Objcm.g:685:4: expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mult_wrapper_in_expr_add3546);
            expr_mult_wrapper379=expr_mult_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mult_wrapper379.getTree());

            // Objcm.g:685:22: ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==L_MINUS||LA91_0==L_PLUS) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // Objcm.g:685:23: ( L_PLUS | L_MINUS ) simple_expr_wrapper
            	    {
            	    set380=(Token)input.LT(1);

            	    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set380)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_add3557);
            	    simple_expr_wrapper381=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper381.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add"


    public static class expr_mult_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult_wrapper"
    // Objcm.g:687:1: expr_mult_wrapper : expr_mult -> ^( EXPR_MULT expr_mult ) ;
    public final ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper() throws RecognitionException {
        ObjcmParser.expr_mult_wrapper_return retval = new ObjcmParser.expr_mult_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mult_return expr_mult382 =null;


        RewriteRuleSubtreeStream stream_expr_mult=new RewriteRuleSubtreeStream(adaptor,"rule expr_mult");
        try {
            // Objcm.g:688:2: ( expr_mult -> ^( EXPR_MULT expr_mult ) )
            // Objcm.g:688:4: expr_mult
            {
            pushFollow(FOLLOW_expr_mult_in_expr_mult_wrapper3568);
            expr_mult382=expr_mult();

            state._fsp--;

            stream_expr_mult.add(expr_mult382.getTree());

            // AST REWRITE
            // elements: expr_mult
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 688:14: -> ^( EXPR_MULT expr_mult )
            {
                // Objcm.g:688:17: ^( EXPR_MULT expr_mult )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MULT, "EXPR_MULT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mult.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult_wrapper"


    public static class expr_mult_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult"
    // Objcm.g:690:1: expr_mult : expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_mult_return expr_mult() throws RecognitionException {
        ObjcmParser.expr_mult_return retval = new ObjcmParser.expr_mult_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set384=null;
        ObjcmParser.expr_type_wrapper_return expr_type_wrapper383 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper385 =null;


        Object set384_tree=null;

        try {
            // Objcm.g:691:2: ( expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) simple_expr_wrapper )* )
            // Objcm.g:691:4: expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_type_wrapper_in_expr_mult3585);
            expr_type_wrapper383=expr_type_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_type_wrapper383.getTree());

            // Objcm.g:691:22: ( ( ASTERISK | L_DIV | L_PERC ) simple_expr_wrapper )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==ASTERISK||LA92_0==L_DIV||LA92_0==L_PERC) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // Objcm.g:691:23: ( ASTERISK | L_DIV | L_PERC ) simple_expr_wrapper
            	    {
            	    set384=(Token)input.LT(1);

            	    if ( input.LA(1)==ASTERISK||input.LA(1)==L_DIV||input.LA(1)==L_PERC ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set384)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_mult3600);
            	    simple_expr_wrapper385=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper385.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult"


    public static class expr_type_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_type_wrapper"
    // Objcm.g:693:1: expr_type_wrapper : expr_type -> ^( EXPR_TYPE expr_type ) ;
    public final ObjcmParser.expr_type_wrapper_return expr_type_wrapper() throws RecognitionException {
        ObjcmParser.expr_type_wrapper_return retval = new ObjcmParser.expr_type_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_type_return expr_type386 =null;


        RewriteRuleSubtreeStream stream_expr_type=new RewriteRuleSubtreeStream(adaptor,"rule expr_type");
        try {
            // Objcm.g:694:2: ( expr_type -> ^( EXPR_TYPE expr_type ) )
            // Objcm.g:694:4: expr_type
            {
            pushFollow(FOLLOW_expr_type_in_expr_type_wrapper3612);
            expr_type386=expr_type();

            state._fsp--;

            stream_expr_type.add(expr_type386.getTree());

            // AST REWRITE
            // elements: expr_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 694:14: -> ^( EXPR_TYPE expr_type )
            {
                // Objcm.g:694:17: ^( EXPR_TYPE expr_type )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_TYPE, "EXPR_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_expr_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_type_wrapper"


    public static class expr_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_type"
    // Objcm.g:696:1: expr_type : ( type_convertion )? expr_unname ;
    public final ObjcmParser.expr_type_return expr_type() throws RecognitionException {
        ObjcmParser.expr_type_return retval = new ObjcmParser.expr_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_convertion_return type_convertion387 =null;

        ObjcmParser.expr_unname_return expr_unname388 =null;



        try {
            // Objcm.g:697:2: ( ( type_convertion )? expr_unname )
            // Objcm.g:697:4: ( type_convertion )? expr_unname
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:697:4: ( type_convertion )?
            int alt93=2;
            alt93 = dfa93.predict(input);
            switch (alt93) {
                case 1 :
                    // Objcm.g:697:4: type_convertion
                    try {
                    pushFollow(FOLLOW_type_convertion_in_expr_type3629);
                    type_convertion387=type_convertion();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion387.getTree());

                    } catch (RecognitionException re) {
                        // ignore :)
                    }
                    break;

            }


            pushFollow(FOLLOW_expr_unname_in_expr_type3632);
            expr_unname388=expr_unname();

            state._fsp--;

            adaptor.addChild(root_0, expr_unname388.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_type"


    public static class expr_unname_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_unname"
    // Objcm.g:699:1: expr_unname : ( ASTERISK ( type_convertion )? )? expr_addr ;
    public final ObjcmParser.expr_unname_return expr_unname() throws RecognitionException {
        ObjcmParser.expr_unname_return retval = new ObjcmParser.expr_unname_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK389=null;
        ObjcmParser.type_convertion_return type_convertion390 =null;

        ObjcmParser.expr_addr_return expr_addr391 =null;


        Object ASTERISK389_tree=null;

        try {
            // Objcm.g:700:2: ( ( ASTERISK ( type_convertion )? )? expr_addr )
            // Objcm.g:700:4: ( ASTERISK ( type_convertion )? )? expr_addr
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:700:4: ( ASTERISK ( type_convertion )? )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==ASTERISK) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // Objcm.g:700:5: ASTERISK ( type_convertion )?
                    {
                    ASTERISK389=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_expr_unname3643); 
                    ASTERISK389_tree = 
                    (Object)adaptor.create(ASTERISK389)
                    ;
                    adaptor.addChild(root_0, ASTERISK389_tree);


                    // Objcm.g:700:14: ( type_convertion )?
                    int alt94=2;
                    alt94 = dfa94.predict(input);
                    switch (alt94) {
                        case 1 :
                            // Objcm.g:700:14: type_convertion
                            {
                            pushFollow(FOLLOW_type_convertion_in_expr_unname3645);
                            type_convertion390=type_convertion();

                            state._fsp--;

                            adaptor.addChild(root_0, type_convertion390.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_addr_in_expr_unname3650);
            expr_addr391=expr_addr();

            state._fsp--;

            adaptor.addChild(root_0, expr_addr391.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_unname"


    public static class expr_addr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_addr"
    // Objcm.g:702:1: expr_addr : ( L_AND )? expr_sign ;
    public final ObjcmParser.expr_addr_return expr_addr() throws RecognitionException {
        ObjcmParser.expr_addr_return retval = new ObjcmParser.expr_addr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND392=null;
        ObjcmParser.expr_sign_return expr_sign393 =null;


        Object L_AND392_tree=null;

        try {
            // Objcm.g:703:2: ( ( L_AND )? expr_sign )
            // Objcm.g:703:4: ( L_AND )? expr_sign
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:703:4: ( L_AND )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==L_AND) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // Objcm.g:703:4: L_AND
                    {
                    L_AND392=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_addr3660); 
                    L_AND392_tree = 
                    (Object)adaptor.create(L_AND392)
                    ;
                    adaptor.addChild(root_0, L_AND392_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_sign_in_expr_addr3663);
            expr_sign393=expr_sign();

            state._fsp--;

            adaptor.addChild(root_0, expr_sign393.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_addr"


    public static class expr_sign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_sign"
    // Objcm.g:705:1: expr_sign : ( L_MINUS | L_PLUS )? expr_not_wrapper ;
    public final ObjcmParser.expr_sign_return expr_sign() throws RecognitionException {
        ObjcmParser.expr_sign_return retval = new ObjcmParser.expr_sign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set394=null;
        ObjcmParser.expr_not_wrapper_return expr_not_wrapper395 =null;


        Object set394_tree=null;

        try {
            // Objcm.g:706:2: ( ( L_MINUS | L_PLUS )? expr_not_wrapper )
            // Objcm.g:706:4: ( L_MINUS | L_PLUS )? expr_not_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:706:4: ( L_MINUS | L_PLUS )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==L_MINUS||LA97_0==L_PLUS) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // Objcm.g:
                    {
                    set394=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set394)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not_wrapper_in_expr_sign3682);
            expr_not_wrapper395=expr_not_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_not_wrapper395.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_sign"


    public static class expr_not_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not_wrapper"
    // Objcm.g:708:1: expr_not_wrapper : expr_not -> ^( EXPR_NOT expr_not ) ;
    public final ObjcmParser.expr_not_wrapper_return expr_not_wrapper() throws RecognitionException {
        ObjcmParser.expr_not_wrapper_return retval = new ObjcmParser.expr_not_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_not_return expr_not396 =null;


        RewriteRuleSubtreeStream stream_expr_not=new RewriteRuleSubtreeStream(adaptor,"rule expr_not");
        try {
            // Objcm.g:709:2: ( expr_not -> ^( EXPR_NOT expr_not ) )
            // Objcm.g:709:4: expr_not
            {
            pushFollow(FOLLOW_expr_not_in_expr_not_wrapper3692);
            expr_not396=expr_not();

            state._fsp--;

            stream_expr_not.add(expr_not396.getTree());

            // AST REWRITE
            // elements: expr_not
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 709:13: -> ^( EXPR_NOT expr_not )
            {
                // Objcm.g:709:16: ^( EXPR_NOT expr_not )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_not.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not_wrapper"


    public static class expr_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not"
    // Objcm.g:711:1: expr_not : ( L_NOT )? expr_not2 ;
    public final ObjcmParser.expr_not_return expr_not() throws RecognitionException {
        ObjcmParser.expr_not_return retval = new ObjcmParser.expr_not_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_NOT397=null;
        ObjcmParser.expr_not2_return expr_not2398 =null;


        Object L_NOT397_tree=null;

        try {
            // Objcm.g:712:2: ( ( L_NOT )? expr_not2 )
            // Objcm.g:712:4: ( L_NOT )? expr_not2
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:712:4: ( L_NOT )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==L_NOT) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // Objcm.g:712:4: L_NOT
                    {
                    L_NOT397=(Token)match(input,L_NOT,FOLLOW_L_NOT_in_expr_not3711); 
                    L_NOT397_tree = 
                    (Object)adaptor.create(L_NOT397)
                    ;
                    adaptor.addChild(root_0, L_NOT397_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not2_in_expr_not3714);
            expr_not2398=expr_not2();

            state._fsp--;

            adaptor.addChild(root_0, expr_not2398.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not"


    public static class expr_not2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not2"
    // Objcm.g:714:1: expr_not2 : ( L_TILDA )? expr_size_of ;
    public final ObjcmParser.expr_not2_return expr_not2() throws RecognitionException {
        ObjcmParser.expr_not2_return retval = new ObjcmParser.expr_not2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_TILDA399=null;
        ObjcmParser.expr_size_of_return expr_size_of400 =null;


        Object L_TILDA399_tree=null;

        try {
            // Objcm.g:715:2: ( ( L_TILDA )? expr_size_of )
            // Objcm.g:715:4: ( L_TILDA )? expr_size_of
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:715:4: ( L_TILDA )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==L_TILDA) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // Objcm.g:715:4: L_TILDA
                    {
                    L_TILDA399=(Token)match(input,L_TILDA,FOLLOW_L_TILDA_in_expr_not23724); 
                    L_TILDA399_tree = 
                    (Object)adaptor.create(L_TILDA399)
                    ;
                    adaptor.addChild(root_0, L_TILDA399_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_size_of_in_expr_not23727);
            expr_size_of400=expr_size_of();

            state._fsp--;

            adaptor.addChild(root_0, expr_size_of400.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not2"


    public static class expr_size_of_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_size_of"
    // Objcm.g:717:1: expr_size_of : ( SIZEOF )? expr_xcrement ;
    public final ObjcmParser.expr_size_of_return expr_size_of() throws RecognitionException {
        ObjcmParser.expr_size_of_return retval = new ObjcmParser.expr_size_of_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SIZEOF401=null;
        ObjcmParser.expr_xcrement_return expr_xcrement402 =null;


        Object SIZEOF401_tree=null;

        try {
            // Objcm.g:718:2: ( ( SIZEOF )? expr_xcrement )
            // Objcm.g:718:4: ( SIZEOF )? expr_xcrement
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:718:4: ( SIZEOF )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==SIZEOF) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // Objcm.g:718:4: SIZEOF
                    {
                    SIZEOF401=(Token)match(input,SIZEOF,FOLLOW_SIZEOF_in_expr_size_of3737); 
                    SIZEOF401_tree = 
                    (Object)adaptor.create(SIZEOF401)
                    ;
                    adaptor.addChild(root_0, SIZEOF401_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_xcrement_in_expr_size_of3740);
            expr_xcrement402=expr_xcrement();

            state._fsp--;

            adaptor.addChild(root_0, expr_xcrement402.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_size_of"


    public static class expr_xcrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xcrement"
    // Objcm.g:720:1: expr_xcrement : ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 ;
    public final ObjcmParser.expr_xcrement_return expr_xcrement() throws RecognitionException {
        ObjcmParser.expr_xcrement_return retval = new ObjcmParser.expr_xcrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set403=null;
        ObjcmParser.object_wrapped1_return object_wrapped1404 =null;


        Object set403_tree=null;

        try {
            // Objcm.g:721:2: ( ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 )
            // Objcm.g:721:4: ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:721:4: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==L_MINUS_MINUS||LA101_0==L_PLUS_PLUS) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // Objcm.g:
                    {
                    set403=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set403)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_object_wrapped1_in_expr_xcrement3759);
            object_wrapped1404=object_wrapped1();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped1404.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xcrement"


    public static class object_wrapped1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped1"
    // Objcm.g:723:1: object_wrapped1 : object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? ;
    public final ObjcmParser.object_wrapped1_return object_wrapped1() throws RecognitionException {
        ObjcmParser.object_wrapped1_return retval = new ObjcmParser.object_wrapped1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set406=null;
        ObjcmParser.object_wrapped2_return object_wrapped2405 =null;


        Object set406_tree=null;

        try {
            // Objcm.g:724:2: ( object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? )
            // Objcm.g:724:4: object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapped2_in_object_wrapped13769);
            object_wrapped2405=object_wrapped2();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped2405.getTree());

            // Objcm.g:724:20: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==L_MINUS_MINUS||LA102_0==L_PLUS_PLUS) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // Objcm.g:
                    {
                    set406=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set406)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped1"


    public static class object_wrapped2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped2"
    // Objcm.g:727:1: object_wrapped2 : ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR classical_expr_wrp R_BR ( id_part_end )? | const_expr_wrapper | a_started );
    public final ObjcmParser.object_wrapped2_return object_wrapped2() throws RecognitionException {
        ObjcmParser.object_wrapped2_return retval = new ObjcmParser.object_wrapped2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal407=null;
        Token L_BR412=null;
        Token R_BR414=null;
        ObjcmParser.object_name_return object_name408 =null;

        ObjcmParser.generic_return generic409 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper410 =null;

        ObjcmParser.id_part_end_return id_part_end411 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp413 =null;

        ObjcmParser.id_part_end_return id_part_end415 =null;

        ObjcmParser.const_expr_wrapper_return const_expr_wrapper416 =null;

        ObjcmParser.a_started_return a_started417 =null;


        Object string_literal407_tree=null;
        Object L_BR412_tree=null;
        Object R_BR414_tree=null;

        try {
            // Objcm.g:728:2: ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR classical_expr_wrp R_BR ( id_part_end )? | const_expr_wrapper | a_started )
            int alt107=5;
            switch ( input.LA(1) ) {
            case ID:
            case 189:
            case 196:
                {
                alt107=1;
                }
                break;
            case L_KBR:
                {
                alt107=2;
                }
                break;
            case L_BR:
                {
                alt107=3;
                }
                break;
            case NUMBER:
            case STRING_LITERAL:
            case STRING_LITERAL2:
            case STRING_LITERAL3:
            case 177:
            case 191:
                {
                alt107=4;
                }
                break;
            case 165:
            case 171:
            case 173:
                {
                alt107=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }

            switch (alt107) {
                case 1 :
                    // Objcm.g:728:5: ( 'unsigned' )? object_name ( generic )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:728:5: ( 'unsigned' )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==196) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // Objcm.g:728:5: 'unsigned'
                            {
                            string_literal407=(Token)match(input,196,FOLLOW_196_in_object_wrapped23790); 
                            string_literal407_tree = 
                            (Object)adaptor.create(string_literal407)
                            ;
                            adaptor.addChild(root_0, string_literal407_tree);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_object_name_in_object_wrapped23793);
                    object_name408=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name408.getTree());

                    // Objcm.g:728:29: ( generic )?
                    int alt104=2;
                    alt104 = dfa104.predict(input);
                    switch (alt104) {
                        case 1 :
                            // Objcm.g:728:29: generic
                            {
                            pushFollow(FOLLOW_generic_in_object_wrapped23795);
                            generic409=generic();

                            state._fsp--;

                            adaptor.addChild(root_0, generic409.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:729:4: method_call_wrapper ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapped23801);
                    method_call_wrapper410=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper410.getTree());

                    // Objcm.g:729:24: ( id_part_end )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==DOT||LA105_0==162) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // Objcm.g:729:24: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23803);
                            id_part_end411=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end411.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // Objcm.g:730:4: L_BR classical_expr_wrp R_BR ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR412=(Token)match(input,L_BR,FOLLOW_L_BR_in_object_wrapped23809); 
                    L_BR412_tree = 
                    (Object)adaptor.create(L_BR412)
                    ;
                    adaptor.addChild(root_0, L_BR412_tree);


                    pushFollow(FOLLOW_classical_expr_wrp_in_object_wrapped23811);
                    classical_expr_wrp413=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp413.getTree());

                    R_BR414=(Token)match(input,R_BR,FOLLOW_R_BR_in_object_wrapped23813); 
                    R_BR414_tree = 
                    (Object)adaptor.create(R_BR414)
                    ;
                    adaptor.addChild(root_0, R_BR414_tree);


                    // Objcm.g:730:33: ( id_part_end )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==DOT||LA106_0==162) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // Objcm.g:730:33: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23815);
                            id_part_end415=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end415.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // Objcm.g:731:4: const_expr_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_wrapper_in_object_wrapped23821);
                    const_expr_wrapper416=const_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr_wrapper416.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:732:4: a_started
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_started_in_object_wrapped23826);
                    a_started417=a_started();

                    state._fsp--;

                    adaptor.addChild(root_0, a_started417.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped2"


    public static class function_brackets_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets_wrapper"
    // Objcm.g:735:1: function_brackets_wrapper : function_brackets -> ^( FUNCTION function_brackets ) ;
    public final ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper() throws RecognitionException {
        ObjcmParser.function_brackets_wrapper_return retval = new ObjcmParser.function_brackets_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.function_brackets_return function_brackets418 =null;


        RewriteRuleSubtreeStream stream_function_brackets=new RewriteRuleSubtreeStream(adaptor,"rule function_brackets");
        try {
            // Objcm.g:736:2: ( function_brackets -> ^( FUNCTION function_brackets ) )
            // Objcm.g:736:4: function_brackets
            {
            pushFollow(FOLLOW_function_brackets_in_function_brackets_wrapper3838);
            function_brackets418=function_brackets();

            state._fsp--;

            stream_function_brackets.add(function_brackets418.getTree());

            // AST REWRITE
            // elements: function_brackets
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 736:22: -> ^( FUNCTION function_brackets )
            {
                // Objcm.g:736:25: ^( FUNCTION function_brackets )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNCTION, "FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_function_brackets.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets_wrapper"


    public static class function_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets"
    // Objcm.g:738:1: function_brackets : L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.function_brackets_return function_brackets() throws RecognitionException {
        ObjcmParser.function_brackets_return retval = new ObjcmParser.function_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR419=null;
        Token COMMA421=null;
        Token R_BR423=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp420 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp422 =null;


        Object L_BR419_tree=null;
        Object COMMA421_tree=null;
        Object R_BR423_tree=null;

        try {
            // Objcm.g:739:2: ( L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR )
            // Objcm.g:739:4: L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR419=(Token)match(input,L_BR,FOLLOW_L_BR_in_function_brackets3857); 
            L_BR419_tree = 
            (Object)adaptor.create(L_BR419)
            ;
            adaptor.addChild(root_0, L_BR419_tree);


            // Objcm.g:739:9: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==ASTERISK||LA109_0==ID||LA109_0==L_AND||LA109_0==L_BR||LA109_0==L_KBR||LA109_0==L_MINUS||LA109_0==L_MINUS_MINUS||LA109_0==L_NOT||LA109_0==L_PLUS||LA109_0==L_PLUS_PLUS||LA109_0==L_TILDA||LA109_0==NUMBER||LA109_0==SIZEOF||(LA109_0 >= STRING_LITERAL && LA109_0 <= STRING_LITERAL3)||LA109_0==165||LA109_0==171||LA109_0==173||LA109_0==177||LA109_0==189||LA109_0==191||LA109_0==196) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // Objcm.g:739:10: classical_expr_wrp ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets3860);
                    classical_expr_wrp420=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp420.getTree());

                    // Objcm.g:739:29: ( COMMA classical_expr_wrp )*
                    loop108:
                    do {
                        int alt108=2;
                        int LA108_0 = input.LA(1);

                        if ( (LA108_0==COMMA) ) {
                            alt108=1;
                        }


                        switch (alt108) {
                    	case 1 :
                    	    // Objcm.g:739:30: COMMA classical_expr_wrp
                    	    {
                    	    COMMA421=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_brackets3863); 
                    	    COMMA421_tree = 
                    	    (Object)adaptor.create(COMMA421)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA421_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets3865);
                    	    classical_expr_wrp422=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp422.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop108;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR423=(Token)match(input,R_BR,FOLLOW_R_BR_in_function_brackets3871); 
            R_BR423_tree = 
            (Object)adaptor.create(R_BR423)
            ;
            adaptor.addChild(root_0, R_BR423_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets"


    public static class index_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_wrapper"
    // Objcm.g:741:1: index_wrapper : index -> ^( INDEX index ) ;
    public final ObjcmParser.index_wrapper_return index_wrapper() throws RecognitionException {
        ObjcmParser.index_wrapper_return retval = new ObjcmParser.index_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.index_return index424 =null;


        RewriteRuleSubtreeStream stream_index=new RewriteRuleSubtreeStream(adaptor,"rule index");
        try {
            // Objcm.g:742:2: ( index -> ^( INDEX index ) )
            // Objcm.g:742:4: index
            {
            pushFollow(FOLLOW_index_in_index_wrapper3881);
            index424=index();

            state._fsp--;

            stream_index.add(index424.getTree());

            // AST REWRITE
            // elements: index
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 742:10: -> ^( INDEX index )
            {
                // Objcm.g:742:13: ^( INDEX index )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INDEX, "INDEX")
                , root_1);

                adaptor.addChild(root_1, stream_index.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_wrapper"


    public static class index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index"
    // Objcm.g:744:1: index : L_KBR ( index_number_wrapper )? R_KBR ;
    public final ObjcmParser.index_return index() throws RecognitionException {
        ObjcmParser.index_return retval = new ObjcmParser.index_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR425=null;
        Token R_KBR427=null;
        ObjcmParser.index_number_wrapper_return index_number_wrapper426 =null;


        Object L_KBR425_tree=null;
        Object R_KBR427_tree=null;

        try {
            // Objcm.g:744:7: ( L_KBR ( index_number_wrapper )? R_KBR )
            // Objcm.g:744:9: L_KBR ( index_number_wrapper )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR425=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index3898); 
            L_KBR425_tree = 
            (Object)adaptor.create(L_KBR425)
            ;
            adaptor.addChild(root_0, L_KBR425_tree);


            // Objcm.g:744:15: ( index_number_wrapper )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==ASTERISK||LA110_0==ID||LA110_0==L_AND||LA110_0==L_BR||LA110_0==L_KBR||LA110_0==L_MINUS||LA110_0==L_MINUS_MINUS||LA110_0==L_NOT||LA110_0==L_PLUS||LA110_0==L_PLUS_PLUS||LA110_0==L_TILDA||LA110_0==NUMBER||LA110_0==SIZEOF||(LA110_0 >= STRING_LITERAL && LA110_0 <= STRING_LITERAL3)||LA110_0==165||LA110_0==171||LA110_0==173||LA110_0==177||LA110_0==189||LA110_0==191||LA110_0==196) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // Objcm.g:744:15: index_number_wrapper
                    {
                    pushFollow(FOLLOW_index_number_wrapper_in_index3900);
                    index_number_wrapper426=index_number_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, index_number_wrapper426.getTree());

                    }
                    break;

            }


            R_KBR427=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index3903); 
            R_KBR427_tree = 
            (Object)adaptor.create(R_KBR427)
            ;
            adaptor.addChild(root_0, R_KBR427_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index"


    public static class index_number_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_number_wrapper"
    // Objcm.g:746:1: index_number_wrapper : classical_expr_wrp -> ^( INDEX_NUMBER classical_expr_wrp ) ;
    public final ObjcmParser.index_number_wrapper_return index_number_wrapper() throws RecognitionException {
        ObjcmParser.index_number_wrapper_return retval = new ObjcmParser.index_number_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp428 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:747:2: ( classical_expr_wrp -> ^( INDEX_NUMBER classical_expr_wrp ) )
            // Objcm.g:747:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_index_number_wrapper3912);
            classical_expr_wrp428=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp428.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 747:23: -> ^( INDEX_NUMBER classical_expr_wrp )
            {
                // Objcm.g:747:26: ^( INDEX_NUMBER classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INDEX_NUMBER, "INDEX_NUMBER")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_number_wrapper"


    public static class struct_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init"
    // Objcm.g:749:1: struct_init : L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init_return struct_init() throws RecognitionException {
        ObjcmParser.struct_init_return retval = new ObjcmParser.struct_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR429=null;
        Token STRUCT_PREFIX430=null;
        Token ID431=null;
        Token R_BR432=null;
        Token L_FBR433=null;
        Token COMMA435=null;
        Token R_FBR437=null;
        ObjcmParser.struct_init_line_return struct_init_line434 =null;

        ObjcmParser.struct_init_line_return struct_init_line436 =null;


        Object L_BR429_tree=null;
        Object STRUCT_PREFIX430_tree=null;
        Object ID431_tree=null;
        Object R_BR432_tree=null;
        Object L_FBR433_tree=null;
        Object COMMA435_tree=null;
        Object R_FBR437_tree=null;

        try {
            // Objcm.g:750:2: ( L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // Objcm.g:750:4: L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_BR429=(Token)match(input,L_BR,FOLLOW_L_BR_in_struct_init3929); 
            L_BR429_tree = 
            (Object)adaptor.create(L_BR429)
            ;
            adaptor.addChild(root_0, L_BR429_tree);


            // Objcm.g:750:10: ( STRUCT_PREFIX )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==STRUCT_PREFIX) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // Objcm.g:750:10: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX430=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_init3932); 
                    STRUCT_PREFIX430_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX430)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX430_tree);


                    }
                    break;

            }


            ID431=(Token)match(input,ID,FOLLOW_ID_in_struct_init3935); 
            ID431_tree = 
            (Object)adaptor.create(ID431)
            ;
            adaptor.addChild(root_0, ID431_tree);


            R_BR432=(Token)match(input,R_BR,FOLLOW_R_BR_in_struct_init3938); 
            R_BR432_tree = 
            (Object)adaptor.create(R_BR432)
            ;
            adaptor.addChild(root_0, R_BR432_tree);


            L_FBR433=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init3941); 
            L_FBR433_tree = 
            (Object)adaptor.create(L_FBR433)
            ;
            adaptor.addChild(root_0, L_FBR433_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init3947);
            struct_init_line434=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line434.getTree());

            // Objcm.g:751:21: ( COMMA struct_init_line )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==COMMA) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // Objcm.g:751:22: COMMA struct_init_line
            	    {
            	    COMMA435=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init3950); 
            	    COMMA435_tree = 
            	    (Object)adaptor.create(COMMA435)
            	    ;
            	    adaptor.addChild(root_0, COMMA435_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init3953);
            	    struct_init_line436=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line436.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            R_FBR437=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init3959); 
            R_FBR437_tree = 
            (Object)adaptor.create(R_FBR437)
            ;
            adaptor.addChild(root_0, R_FBR437_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init"


    public static class struct_init2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init2"
    // Objcm.g:755:1: struct_init2 : L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init2_return struct_init2() throws RecognitionException {
        ObjcmParser.struct_init2_return retval = new ObjcmParser.struct_init2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR438=null;
        Token COMMA440=null;
        Token R_FBR442=null;
        ObjcmParser.struct_init_line_return struct_init_line439 =null;

        ObjcmParser.struct_init_line_return struct_init_line441 =null;


        Object L_FBR438_tree=null;
        Object COMMA440_tree=null;
        Object R_FBR442_tree=null;

        try {
            // Objcm.g:756:2: ( L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // Objcm.g:756:4: L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR438=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init23973); 
            L_FBR438_tree = 
            (Object)adaptor.create(L_FBR438)
            ;
            adaptor.addChild(root_0, L_FBR438_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init23979);
            struct_init_line439=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line439.getTree());

            // Objcm.g:757:21: ( COMMA struct_init_line )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==COMMA) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // Objcm.g:757:22: COMMA struct_init_line
            	    {
            	    COMMA440=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init23982); 
            	    COMMA440_tree = 
            	    (Object)adaptor.create(COMMA440)
            	    ;
            	    adaptor.addChild(root_0, COMMA440_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init23985);
            	    struct_init_line441=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line441.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            R_FBR442=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init23991); 
            R_FBR442_tree = 
            (Object)adaptor.create(R_FBR442)
            ;
            adaptor.addChild(root_0, R_FBR442_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init2"


    public static class struct_init_line_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_line"
    // Objcm.g:761:1: struct_init_line : ( struct_init_var | struct_init_expression );
    public final ObjcmParser.struct_init_line_return struct_init_line() throws RecognitionException {
        ObjcmParser.struct_init_line_return retval = new ObjcmParser.struct_init_line_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_init_var_return struct_init_var443 =null;

        ObjcmParser.struct_init_expression_return struct_init_expression444 =null;



        try {
            // Objcm.g:762:2: ( struct_init_var | struct_init_expression )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==DOT) ) {
                alt114=1;
            }
            else if ( (LA114_0==ASTERISK||LA114_0==ID||LA114_0==L_AND||LA114_0==L_BR||LA114_0==L_KBR||LA114_0==L_MINUS||LA114_0==L_MINUS_MINUS||LA114_0==L_NOT||LA114_0==L_PLUS||LA114_0==L_PLUS_PLUS||LA114_0==L_TILDA||LA114_0==NUMBER||LA114_0==SIZEOF||(LA114_0 >= STRING_LITERAL && LA114_0 <= STRING_LITERAL3)||LA114_0==165||LA114_0==171||LA114_0==173||LA114_0==177||LA114_0==189||LA114_0==191||LA114_0==196) ) {
                alt114=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }
            switch (alt114) {
                case 1 :
                    // Objcm.g:762:4: struct_init_var
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_var_in_struct_init_line4004);
                    struct_init_var443=struct_init_var();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_var443.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:763:4: struct_init_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_expression_in_struct_init_line4009);
                    struct_init_expression444=struct_init_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_expression444.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_line"


    public static class struct_init_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_expression"
    // Objcm.g:766:1: struct_init_expression : classical_expr_wrp ;
    public final ObjcmParser.struct_init_expression_return struct_init_expression() throws RecognitionException {
        ObjcmParser.struct_init_expression_return retval = new ObjcmParser.struct_init_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp445 =null;



        try {
            // Objcm.g:767:2: ( classical_expr_wrp )
            // Objcm.g:767:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_expression4022);
            classical_expr_wrp445=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp445.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_expression"


    public static class struct_init_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_method"
    // Objcm.g:769:1: struct_init_method : classical_expr_wrp ;
    public final ObjcmParser.struct_init_method_return struct_init_method() throws RecognitionException {
        ObjcmParser.struct_init_method_return retval = new ObjcmParser.struct_init_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp446 =null;



        try {
            // Objcm.g:770:2: ( classical_expr_wrp )
            // Objcm.g:770:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_method4033);
            classical_expr_wrp446=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp446.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_method"


    public static class struct_init_var_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_var"
    // Objcm.g:772:1: struct_init_var : ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) ;
    public final ObjcmParser.struct_init_var_return struct_init_var() throws RecognitionException {
        ObjcmParser.struct_init_var_return retval = new ObjcmParser.struct_init_var_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT447=null;
        Token L_EQ449=null;
        ObjcmParser.id_part_return id_part448 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets450 =null;

        ObjcmParser.expression_return expression451 =null;


        Object DOT447_tree=null;
        Object L_EQ449_tree=null;

        try {
            // Objcm.g:773:2: ( ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) )
            // Objcm.g:773:4: ( DOT id_part )+ L_EQ ( in_q_brackets | expression )
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:773:4: ( DOT id_part )+
            int cnt115=0;
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==DOT) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // Objcm.g:773:5: DOT id_part
            	    {
            	    DOT447=(Token)match(input,DOT,FOLLOW_DOT_in_struct_init_var4045); 
            	    DOT447_tree = 
            	    (Object)adaptor.create(DOT447)
            	    ;
            	    adaptor.addChild(root_0, DOT447_tree);


            	    pushFollow(FOLLOW_id_part_in_struct_init_var4047);
            	    id_part448=id_part();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part448.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt115 >= 1 ) break loop115;
                        EarlyExitException eee =
                            new EarlyExitException(115, input);
                        throw eee;
                }
                cnt115++;
            } while (true);


            L_EQ449=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_struct_init_var4052); 
            L_EQ449_tree = 
            (Object)adaptor.create(L_EQ449)
            ;
            adaptor.addChild(root_0, L_EQ449_tree);


            // Objcm.g:773:26: ( in_q_brackets | expression )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==L_FBR) ) {
                alt116=1;
            }
            else if ( (LA116_0==ASTERISK||LA116_0==ID||LA116_0==L_AND||LA116_0==L_BR||LA116_0==L_KBR||LA116_0==L_MINUS||LA116_0==L_MINUS_MINUS||LA116_0==L_NOT||LA116_0==L_PLUS||LA116_0==L_PLUS_PLUS||LA116_0==L_TILDA||LA116_0==NUMBER||LA116_0==SIZEOF||(LA116_0 >= STRING_LITERAL && LA116_0 <= STRING_LITERAL3)||LA116_0==165||LA116_0==171||LA116_0==173||LA116_0==177||LA116_0==189||LA116_0==191||LA116_0==196) ) {
                alt116=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }
            switch (alt116) {
                case 1 :
                    // Objcm.g:773:27: in_q_brackets
                    {
                    pushFollow(FOLLOW_in_q_brackets_in_struct_init_var4056);
                    in_q_brackets450=in_q_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, in_q_brackets450.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:773:43: expression
                    {
                    pushFollow(FOLLOW_expression_in_struct_init_var4060);
                    expression451=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression451.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_var"


    public static class a_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_started"
    // Objcm.g:775:1: a_started : ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper );
    public final ObjcmParser.a_started_return a_started() throws RecognitionException {
        ObjcmParser.a_started_return retval = new ObjcmParser.a_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_wrapper_return a_selector_wrapper452 =null;

        ObjcmParser.a_encode_wrapper_return a_encode_wrapper453 =null;

        ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper454 =null;



        try {
            // Objcm.g:776:2: ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper )
            int alt117=3;
            switch ( input.LA(1) ) {
            case 173:
                {
                alt117=1;
                }
                break;
            case 165:
                {
                alt117=2;
                }
                break;
            case 171:
                {
                alt117=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }

            switch (alt117) {
                case 1 :
                    // Objcm.g:776:4: a_selector_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_selector_wrapper_in_a_started4072);
                    a_selector_wrapper452=a_selector_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_selector_wrapper452.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:777:4: a_encode_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_encode_wrapper_in_a_started4077);
                    a_encode_wrapper453=a_encode_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_encode_wrapper453.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:778:4: a_protocol_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_protocol_wrapper_in_a_started4082);
                    a_protocol_wrapper454=a_protocol_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_protocol_wrapper454.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_started"


    public static class typeof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof"
    // Objcm.g:781:1: typeof : '__typeof__' L_BR ID R_BR ;
    public final ObjcmParser.typeof_return typeof() throws RecognitionException {
        ObjcmParser.typeof_return retval = new ObjcmParser.typeof_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal455=null;
        Token L_BR456=null;
        Token ID457=null;
        Token R_BR458=null;

        Object string_literal455_tree=null;
        Object L_BR456_tree=null;
        Object ID457_tree=null;
        Object R_BR458_tree=null;

        try {
            // Objcm.g:781:8: ( '__typeof__' L_BR ID R_BR )
            // Objcm.g:781:10: '__typeof__' L_BR ID R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal455=(Token)match(input,179,FOLLOW_179_in_typeof4092); 
            string_literal455_tree = 
            (Object)adaptor.create(string_literal455)
            ;
            adaptor.addChild(root_0, string_literal455_tree);


            L_BR456=(Token)match(input,L_BR,FOLLOW_L_BR_in_typeof4095); 
            L_BR456_tree = 
            (Object)adaptor.create(L_BR456)
            ;
            adaptor.addChild(root_0, L_BR456_tree);


            ID457=(Token)match(input,ID,FOLLOW_ID_in_typeof4098); 
            ID457_tree = 
            (Object)adaptor.create(ID457)
            ;
            adaptor.addChild(root_0, ID457_tree);


            R_BR458=(Token)match(input,R_BR,FOLLOW_R_BR_in_typeof4101); 
            R_BR458_tree = 
            (Object)adaptor.create(R_BR458)
            ;
            adaptor.addChild(root_0, R_BR458_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof"


    public static class a_selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_wrapper"
    // Objcm.g:783:1: a_selector_wrapper : a_selector -> ^( SELECTOR a_selector ) ;
    public final ObjcmParser.a_selector_wrapper_return a_selector_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_wrapper_return retval = new ObjcmParser.a_selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_return a_selector459 =null;


        RewriteRuleSubtreeStream stream_a_selector=new RewriteRuleSubtreeStream(adaptor,"rule a_selector");
        try {
            // Objcm.g:784:2: ( a_selector -> ^( SELECTOR a_selector ) )
            // Objcm.g:784:4: a_selector
            {
            pushFollow(FOLLOW_a_selector_in_a_selector_wrapper4112);
            a_selector459=a_selector();

            state._fsp--;

            stream_a_selector.add(a_selector459.getTree());

            // AST REWRITE
            // elements: a_selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 784:15: -> ^( SELECTOR a_selector )
            {
                // Objcm.g:784:18: ^( SELECTOR a_selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR, "SELECTOR")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_wrapper"


    public static class a_selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector"
    // Objcm.g:786:1: a_selector : '@selector' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_selector_return a_selector() throws RecognitionException {
        ObjcmParser.a_selector_return retval = new ObjcmParser.a_selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal460=null;
        Token L_BR461=null;
        Token R_BR463=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper462 =null;


        Object string_literal460_tree=null;
        Object L_BR461_tree=null;
        Object R_BR463_tree=null;

        try {
            // Objcm.g:786:11: ( '@selector' L_BR a_selector_value_wrapper R_BR )
            // Objcm.g:786:13: '@selector' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal460=(Token)match(input,173,FOLLOW_173_in_a_selector4129); 
            string_literal460_tree = 
            (Object)adaptor.create(string_literal460)
            ;
            adaptor.addChild(root_0, string_literal460_tree);


            L_BR461=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_selector4131); 
            L_BR461_tree = 
            (Object)adaptor.create(L_BR461)
            ;
            adaptor.addChild(root_0, L_BR461_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_selector4133);
            a_selector_value_wrapper462=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper462.getTree());

            R_BR463=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_selector4135); 
            R_BR463_tree = 
            (Object)adaptor.create(R_BR463)
            ;
            adaptor.addChild(root_0, R_BR463_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector"


    public static class a_protocol_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol_wrapper"
    // Objcm.g:788:1: a_protocol_wrapper : a_protocol -> ^( PROTOCOL a_protocol ) ;
    public final ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper() throws RecognitionException {
        ObjcmParser.a_protocol_wrapper_return retval = new ObjcmParser.a_protocol_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_protocol_return a_protocol464 =null;


        RewriteRuleSubtreeStream stream_a_protocol=new RewriteRuleSubtreeStream(adaptor,"rule a_protocol");
        try {
            // Objcm.g:789:2: ( a_protocol -> ^( PROTOCOL a_protocol ) )
            // Objcm.g:789:4: a_protocol
            {
            pushFollow(FOLLOW_a_protocol_in_a_protocol_wrapper4145);
            a_protocol464=a_protocol();

            state._fsp--;

            stream_a_protocol.add(a_protocol464.getTree());

            // AST REWRITE
            // elements: a_protocol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 789:15: -> ^( PROTOCOL a_protocol )
            {
                // Objcm.g:789:18: ^( PROTOCOL a_protocol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_a_protocol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol_wrapper"


    public static class a_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol"
    // Objcm.g:791:1: a_protocol : '@protocol' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_protocol_return a_protocol() throws RecognitionException {
        ObjcmParser.a_protocol_return retval = new ObjcmParser.a_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal465=null;
        Token L_BR466=null;
        Token R_BR468=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper467 =null;


        Object string_literal465_tree=null;
        Object L_BR466_tree=null;
        Object R_BR468_tree=null;

        try {
            // Objcm.g:792:2: ( '@protocol' L_BR a_selector_value_wrapper R_BR )
            // Objcm.g:792:4: '@protocol' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal465=(Token)match(input,171,FOLLOW_171_in_a_protocol4163); 
            string_literal465_tree = 
            (Object)adaptor.create(string_literal465)
            ;
            adaptor.addChild(root_0, string_literal465_tree);


            L_BR466=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_protocol4165); 
            L_BR466_tree = 
            (Object)adaptor.create(L_BR466)
            ;
            adaptor.addChild(root_0, L_BR466_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_protocol4167);
            a_selector_value_wrapper467=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper467.getTree());

            R_BR468=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_protocol4169); 
            R_BR468_tree = 
            (Object)adaptor.create(R_BR468)
            ;
            adaptor.addChild(root_0, R_BR468_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol"


    public static class a_encode_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode_wrapper"
    // Objcm.g:794:1: a_encode_wrapper : a_encode -> ^( ENCODE a_encode ) ;
    public final ObjcmParser.a_encode_wrapper_return a_encode_wrapper() throws RecognitionException {
        ObjcmParser.a_encode_wrapper_return retval = new ObjcmParser.a_encode_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_encode_return a_encode469 =null;


        RewriteRuleSubtreeStream stream_a_encode=new RewriteRuleSubtreeStream(adaptor,"rule a_encode");
        try {
            // Objcm.g:795:2: ( a_encode -> ^( ENCODE a_encode ) )
            // Objcm.g:795:4: a_encode
            {
            pushFollow(FOLLOW_a_encode_in_a_encode_wrapper4179);
            a_encode469=a_encode();

            state._fsp--;

            stream_a_encode.add(a_encode469.getTree());

            // AST REWRITE
            // elements: a_encode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 795:13: -> ^( ENCODE a_encode )
            {
                // Objcm.g:795:16: ^( ENCODE a_encode )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENCODE, "ENCODE")
                , root_1);

                adaptor.addChild(root_1, stream_a_encode.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode_wrapper"


    public static class a_selector_value_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value_wrapper"
    // Objcm.g:797:1: a_selector_value_wrapper : a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) ;
    public final ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_value_wrapper_return retval = new ObjcmParser.a_selector_value_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_value_return a_selector_value470 =null;


        RewriteRuleSubtreeStream stream_a_selector_value=new RewriteRuleSubtreeStream(adaptor,"rule a_selector_value");
        try {
            // Objcm.g:798:2: ( a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) )
            // Objcm.g:798:4: a_selector_value
            {
            pushFollow(FOLLOW_a_selector_value_in_a_selector_value_wrapper4196);
            a_selector_value470=a_selector_value();

            state._fsp--;

            stream_a_selector_value.add(a_selector_value470.getTree());

            // AST REWRITE
            // elements: a_selector_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 798:21: -> ^( SELECTOR_VALUE a_selector_value )
            {
                // Objcm.g:798:24: ^( SELECTOR_VALUE a_selector_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR_VALUE, "SELECTOR_VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value_wrapper"


    public static class a_selector_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value"
    // Objcm.g:800:1: a_selector_value : ID ( COLON ( ID COLON )* )? ;
    public final ObjcmParser.a_selector_value_return a_selector_value() throws RecognitionException {
        ObjcmParser.a_selector_value_return retval = new ObjcmParser.a_selector_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID471=null;
        Token COLON472=null;
        Token ID473=null;
        Token COLON474=null;

        Object ID471_tree=null;
        Object COLON472_tree=null;
        Object ID473_tree=null;
        Object COLON474_tree=null;

        try {
            // Objcm.g:801:2: ( ID ( COLON ( ID COLON )* )? )
            // Objcm.g:801:5: ID ( COLON ( ID COLON )* )?
            {
            root_0 = (Object)adaptor.nil();


            ID471=(Token)match(input,ID,FOLLOW_ID_in_a_selector_value4215); 
            ID471_tree = 
            (Object)adaptor.create(ID471)
            ;
            adaptor.addChild(root_0, ID471_tree);


            // Objcm.g:801:9: ( COLON ( ID COLON )* )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==COLON) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // Objcm.g:801:10: COLON ( ID COLON )*
                    {
                    COLON472=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4219); 
                    COLON472_tree = 
                    (Object)adaptor.create(COLON472)
                    ;
                    adaptor.addChild(root_0, COLON472_tree);


                    // Objcm.g:801:17: ( ID COLON )*
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( (LA118_0==ID) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    // Objcm.g:801:18: ID COLON
                    	    {
                    	    ID473=(Token)match(input,ID,FOLLOW_ID_in_a_selector_value4223); 
                    	    ID473_tree = 
                    	    (Object)adaptor.create(ID473)
                    	    ;
                    	    adaptor.addChild(root_0, ID473_tree);


                    	    COLON474=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4226); 
                    	    COLON474_tree = 
                    	    (Object)adaptor.create(COLON474)
                    	    ;
                    	    adaptor.addChild(root_0, COLON474_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop118;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value"


    public static class a_encode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode"
    // Objcm.g:803:1: a_encode : '@encode' L_BR (~ ( R_BR ) )+ R_BR ;
    public final ObjcmParser.a_encode_return a_encode() throws RecognitionException {
        ObjcmParser.a_encode_return retval = new ObjcmParser.a_encode_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal475=null;
        Token L_BR476=null;
        Token set477=null;
        Token R_BR478=null;

        Object string_literal475_tree=null;
        Object L_BR476_tree=null;
        Object set477_tree=null;
        Object R_BR478_tree=null;

        try {
            // Objcm.g:803:9: ( '@encode' L_BR (~ ( R_BR ) )+ R_BR )
            // Objcm.g:803:11: '@encode' L_BR (~ ( R_BR ) )+ R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal475=(Token)match(input,165,FOLLOW_165_in_a_encode4237); 
            string_literal475_tree = 
            (Object)adaptor.create(string_literal475)
            ;
            adaptor.addChild(root_0, string_literal475_tree);


            L_BR476=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_encode4239); 
            L_BR476_tree = 
            (Object)adaptor.create(L_BR476)
            ;
            adaptor.addChild(root_0, L_BR476_tree);


            // Objcm.g:803:26: (~ ( R_BR ) )+
            int cnt120=0;
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( ((LA120_0 >= ARRAY_INIT && LA120_0 <= RETURN_STMT)||(LA120_0 >= R_FBR && LA120_0 <= 197)) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // Objcm.g:
            	    {
            	    set477=(Token)input.LT(1);

            	    if ( (input.LA(1) >= ARRAY_INIT && input.LA(1) <= RETURN_STMT)||(input.LA(1) >= R_FBR && input.LA(1) <= 197) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set477)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt120 >= 1 ) break loop120;
                        EarlyExitException eee =
                            new EarlyExitException(120, input);
                        throw eee;
                }
                cnt120++;
            } while (true);


            R_BR478=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_encode4247); 
            R_BR478_tree = 
            (Object)adaptor.create(R_BR478)
            ;
            adaptor.addChild(root_0, R_BR478_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode"


    public static class const_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr_wrapper"
    // Objcm.g:805:1: const_expr_wrapper : const_expr -> ^( CONST_EXPR const_expr ) ;
    public final ObjcmParser.const_expr_wrapper_return const_expr_wrapper() throws RecognitionException {
        ObjcmParser.const_expr_wrapper_return retval = new ObjcmParser.const_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.const_expr_return const_expr479 =null;


        RewriteRuleSubtreeStream stream_const_expr=new RewriteRuleSubtreeStream(adaptor,"rule const_expr");
        try {
            // Objcm.g:806:2: ( const_expr -> ^( CONST_EXPR const_expr ) )
            // Objcm.g:806:4: const_expr
            {
            pushFollow(FOLLOW_const_expr_in_const_expr_wrapper4256);
            const_expr479=const_expr();

            state._fsp--;

            stream_const_expr.add(const_expr479.getTree());

            // AST REWRITE
            // elements: const_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 806:15: -> ^( CONST_EXPR const_expr )
            {
                // Objcm.g:806:18: ^( CONST_EXPR const_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONST_EXPR, "CONST_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_const_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr_wrapper"


    public static class const_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // Objcm.g:808:1: const_expr : ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt );
    public final ObjcmParser.const_expr_return const_expr() throws RecognitionException {
        ObjcmParser.const_expr_return retval = new ObjcmParser.const_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NUMBER480=null;
        Token STRING_LITERAL481=null;
        Token STRING_LITERAL2482=null;
        Token STRING_LITERAL3483=null;
        ObjcmParser.null_stmt_return null_stmt484 =null;


        Object NUMBER480_tree=null;
        Object STRING_LITERAL481_tree=null;
        Object STRING_LITERAL2482_tree=null;
        Object STRING_LITERAL3483_tree=null;

        try {
            // Objcm.g:809:2: ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt )
            int alt121=5;
            switch ( input.LA(1) ) {
            case NUMBER:
                {
                alt121=1;
                }
                break;
            case STRING_LITERAL:
                {
                alt121=2;
                }
                break;
            case STRING_LITERAL2:
                {
                alt121=3;
                }
                break;
            case STRING_LITERAL3:
                {
                alt121=4;
                }
                break;
            case 177:
            case 191:
                {
                alt121=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;

            }

            switch (alt121) {
                case 1 :
                    // Objcm.g:809:5: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER480=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_const_expr4275); 
                    NUMBER480_tree = 
                    (Object)adaptor.create(NUMBER480)
                    ;
                    adaptor.addChild(root_0, NUMBER480_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:809:14: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL481=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_const_expr4279); 
                    STRING_LITERAL481_tree = 
                    (Object)adaptor.create(STRING_LITERAL481)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL481_tree);


                    }
                    break;
                case 3 :
                    // Objcm.g:809:31: STRING_LITERAL2
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL2482=(Token)match(input,STRING_LITERAL2,FOLLOW_STRING_LITERAL2_in_const_expr4283); 
                    STRING_LITERAL2482_tree = 
                    (Object)adaptor.create(STRING_LITERAL2482)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL2482_tree);


                    }
                    break;
                case 4 :
                    // Objcm.g:809:49: STRING_LITERAL3
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL3483=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_const_expr4287); 
                    STRING_LITERAL3483_tree = 
                    (Object)adaptor.create(STRING_LITERAL3483)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL3483_tree);


                    }
                    break;
                case 5 :
                    // Objcm.g:809:67: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_const_expr4291);
                    null_stmt484=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt484.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class string_literal3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_literal3"
    // Objcm.g:817:1: string_literal3 : STRING_LITERAL3 ;
    public final ObjcmParser.string_literal3_return string_literal3() throws RecognitionException {
        ObjcmParser.string_literal3_return retval = new ObjcmParser.string_literal3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL3485=null;

        Object STRING_LITERAL3485_tree=null;

        try {
            // Objcm.g:818:2: ( STRING_LITERAL3 )
            // Objcm.g:818:4: STRING_LITERAL3
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL3485=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_string_literal34309); 
            STRING_LITERAL3485_tree = 
            (Object)adaptor.create(STRING_LITERAL3485)
            ;
            adaptor.addChild(root_0, STRING_LITERAL3485_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_literal3"


    public static class method_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_brackets"
    // Objcm.g:820:1: method_brackets : L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.method_brackets_return method_brackets() throws RecognitionException {
        ObjcmParser.method_brackets_return retval = new ObjcmParser.method_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR486=null;
        Token COMMA488=null;
        Token R_BR490=null;
        ObjcmParser.expression_return expression487 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp489 =null;


        Object L_BR486_tree=null;
        Object COMMA488_tree=null;
        Object R_BR490_tree=null;

        try {
            // Objcm.g:821:2: ( L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR )
            // Objcm.g:821:4: L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR486=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_brackets4319); 
            L_BR486_tree = 
            (Object)adaptor.create(L_BR486)
            ;
            adaptor.addChild(root_0, L_BR486_tree);


            // Objcm.g:821:10: ( expression ( COMMA classical_expr_wrp )* )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==ASTERISK||LA123_0==ID||LA123_0==L_AND||LA123_0==L_BR||LA123_0==L_KBR||LA123_0==L_MINUS||LA123_0==L_MINUS_MINUS||LA123_0==L_NOT||LA123_0==L_PLUS||LA123_0==L_PLUS_PLUS||LA123_0==L_TILDA||LA123_0==NUMBER||LA123_0==SIZEOF||(LA123_0 >= STRING_LITERAL && LA123_0 <= STRING_LITERAL3)||LA123_0==165||LA123_0==171||LA123_0==173||LA123_0==177||LA123_0==189||LA123_0==191||LA123_0==196) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // Objcm.g:821:11: expression ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_expression_in_method_brackets4323);
                    expression487=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression487.getTree());

                    // Objcm.g:821:23: ( COMMA classical_expr_wrp )*
                    loop122:
                    do {
                        int alt122=2;
                        int LA122_0 = input.LA(1);

                        if ( (LA122_0==COMMA) ) {
                            alt122=1;
                        }


                        switch (alt122) {
                    	case 1 :
                    	    // Objcm.g:821:24: COMMA classical_expr_wrp
                    	    {
                    	    COMMA488=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_brackets4327); 
                    	    COMMA488_tree = 
                    	    (Object)adaptor.create(COMMA488)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA488_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_method_brackets4330);
                    	    classical_expr_wrp489=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp489.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop122;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR490=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_brackets4336); 
            R_BR490_tree = 
            (Object)adaptor.create(R_BR490)
            ;
            adaptor.addChild(root_0, R_BR490_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_brackets"


    public static class func_pointer1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer1"
    // Objcm.g:823:1: func_pointer1 : type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? ;
    public final ObjcmParser.func_pointer1_return func_pointer1() throws RecognitionException {
        ObjcmParser.func_pointer1_return retval = new ObjcmParser.func_pointer1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK492=null;
        Token L_BR493=null;
        Token ASTERISK494=null;
        Token R_BR496=null;
        ObjcmParser.type_internal_return type_internal491 =null;

        ObjcmParser.type_internal_return type_internal495 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params497 =null;


        Object ASTERISK492_tree=null;
        Object L_BR493_tree=null;
        Object ASTERISK494_tree=null;
        Object R_BR496_tree=null;

        try {
            // Objcm.g:824:2: ( type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? )
            // Objcm.g:824:4: type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_func_pointer14346);
            type_internal491=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal491.getTree());

            // Objcm.g:824:19: ( ASTERISK )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==ASTERISK) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // Objcm.g:824:19: ASTERISK
                    {
                    ASTERISK492=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14349); 
                    ASTERISK492_tree = 
                    (Object)adaptor.create(ASTERISK492)
                    ;
                    adaptor.addChild(root_0, ASTERISK492_tree);


                    }
                    break;

            }


            L_BR493=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer14352); 
            L_BR493_tree = 
            (Object)adaptor.create(L_BR493)
            ;
            adaptor.addChild(root_0, L_BR493_tree);


            // Objcm.g:824:34: ( ASTERISK )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==ASTERISK) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // Objcm.g:824:34: ASTERISK
                    {
                    ASTERISK494=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14354); 
                    ASTERISK494_tree = 
                    (Object)adaptor.create(ASTERISK494)
                    ;
                    adaptor.addChild(root_0, ASTERISK494_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_func_pointer14357);
            type_internal495=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal495.getTree());

            R_BR496=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer14360); 
            R_BR496_tree = 
            (Object)adaptor.create(R_BR496)
            ;
            adaptor.addChild(root_0, R_BR496_tree);


            // Objcm.g:824:65: ( func_pointer_params )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==L_BR) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // Objcm.g:824:65: func_pointer_params
                    {
                    pushFollow(FOLLOW_func_pointer_params_in_func_pointer14363);
                    func_pointer_params497=func_pointer_params();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer_params497.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer1"


    public static class func_pointer2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer2"
    // Objcm.g:827:1: func_pointer2 : L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR ;
    public final ObjcmParser.func_pointer2_return func_pointer2() throws RecognitionException {
        ObjcmParser.func_pointer2_return retval = new ObjcmParser.func_pointer2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR498=null;
        Token L_BR500=null;
        Token ASTERISK501=null;
        Token R_BR502=null;
        Token R_BR504=null;
        ObjcmParser.type_internal_return type_internal499 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params503 =null;


        Object L_BR498_tree=null;
        Object L_BR500_tree=null;
        Object ASTERISK501_tree=null;
        Object R_BR502_tree=null;
        Object R_BR504_tree=null;

        try {
            // Objcm.g:828:2: ( L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR )
            // Objcm.g:828:4: L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR498=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24376); 
            L_BR498_tree = 
            (Object)adaptor.create(L_BR498)
            ;
            adaptor.addChild(root_0, L_BR498_tree);


            pushFollow(FOLLOW_type_internal_in_func_pointer24379);
            type_internal499=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal499.getTree());

            L_BR500=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24381); 
            L_BR500_tree = 
            (Object)adaptor.create(L_BR500)
            ;
            adaptor.addChild(root_0, L_BR500_tree);


            ASTERISK501=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer24384); 
            ASTERISK501_tree = 
            (Object)adaptor.create(ASTERISK501)
            ;
            adaptor.addChild(root_0, ASTERISK501_tree);


            R_BR502=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24387); 
            R_BR502_tree = 
            (Object)adaptor.create(R_BR502)
            ;
            adaptor.addChild(root_0, R_BR502_tree);


            pushFollow(FOLLOW_func_pointer_params_in_func_pointer24390);
            func_pointer_params503=func_pointer_params();

            state._fsp--;

            adaptor.addChild(root_0, func_pointer_params503.getTree());

            R_BR504=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24393); 
            R_BR504_tree = 
            (Object)adaptor.create(R_BR504)
            ;
            adaptor.addChild(root_0, R_BR504_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer2"


    public static class func_pointer_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_params"
    // Objcm.g:831:1: func_pointer_params : L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR ;
    public final ObjcmParser.func_pointer_params_return func_pointer_params() throws RecognitionException {
        ObjcmParser.func_pointer_params_return retval = new ObjcmParser.func_pointer_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR505=null;
        Token ID506=null;
        Token ASTERISK507=null;
        Token COMMA508=null;
        Token ID509=null;
        Token ASTERISK510=null;
        Token R_BR511=null;

        Object L_BR505_tree=null;
        Object ID506_tree=null;
        Object ASTERISK507_tree=null;
        Object COMMA508_tree=null;
        Object ID509_tree=null;
        Object ASTERISK510_tree=null;
        Object R_BR511_tree=null;

        try {
            // Objcm.g:832:2: ( L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR )
            // Objcm.g:832:4: L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR505=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer_params4406); 
            L_BR505_tree = 
            (Object)adaptor.create(L_BR505)
            ;
            adaptor.addChild(root_0, L_BR505_tree);


            ID506=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4409); 
            ID506_tree = 
            (Object)adaptor.create(ID506)
            ;
            adaptor.addChild(root_0, ID506_tree);


            // Objcm.g:832:14: ( ASTERISK )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==ASTERISK) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // Objcm.g:832:14: ASTERISK
            	    {
            	    ASTERISK507=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4412); 
            	    ASTERISK507_tree = 
            	    (Object)adaptor.create(ASTERISK507)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK507_tree);


            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            // Objcm.g:832:24: ( COMMA ID ( ASTERISK )* )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==COMMA) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // Objcm.g:832:25: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA508=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_pointer_params4416); 
            	    COMMA508_tree = 
            	    (Object)adaptor.create(COMMA508)
            	    ;
            	    adaptor.addChild(root_0, COMMA508_tree);


            	    ID509=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4419); 
            	    ID509_tree = 
            	    (Object)adaptor.create(ID509)
            	    ;
            	    adaptor.addChild(root_0, ID509_tree);


            	    // Objcm.g:832:36: ( ASTERISK )*
            	    loop128:
            	    do {
            	        int alt128=2;
            	        int LA128_0 = input.LA(1);

            	        if ( (LA128_0==ASTERISK) ) {
            	            alt128=1;
            	        }


            	        switch (alt128) {
            	    	case 1 :
            	    	    // Objcm.g:832:36: ASTERISK
            	    	    {
            	    	    ASTERISK510=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4422); 
            	    	    ASTERISK510_tree = 
            	    	    (Object)adaptor.create(ASTERISK510)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK510_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop128;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            R_BR511=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer_params4427); 
            R_BR511_tree = 
            (Object)adaptor.create(R_BR511)
            ;
            adaptor.addChild(root_0, R_BR511_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_params"


    public static class method_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_start"
    // Objcm.g:834:1: method_start : ID ( method_brackets )? ;
    public final ObjcmParser.method_start_return method_start() throws RecognitionException {
        ObjcmParser.method_start_return retval = new ObjcmParser.method_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID512=null;
        ObjcmParser.method_brackets_return method_brackets513 =null;


        Object ID512_tree=null;

        try {
            // Objcm.g:835:2: ( ID ( method_brackets )? )
            // Objcm.g:835:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID512=(Token)match(input,ID,FOLLOW_ID_in_method_start4438); 
            ID512_tree = 
            (Object)adaptor.create(ID512)
            ;
            adaptor.addChild(root_0, ID512_tree);


            // Objcm.g:835:7: ( method_brackets )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==L_BR) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // Objcm.g:835:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_method_start4440);
                    method_brackets513=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets513.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_start"


    public static class in_q_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_q_brackets"
    // Objcm.g:837:1: in_q_brackets : L_FBR q_brackets_source R_FBR ;
    public final ObjcmParser.in_q_brackets_return in_q_brackets() throws RecognitionException {
        ObjcmParser.in_q_brackets_return retval = new ObjcmParser.in_q_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR514=null;
        Token R_FBR516=null;
        ObjcmParser.q_brackets_source_return q_brackets_source515 =null;


        Object L_FBR514_tree=null;
        Object R_FBR516_tree=null;

        try {
            // Objcm.g:838:2: ( L_FBR q_brackets_source R_FBR )
            // Objcm.g:838:4: L_FBR q_brackets_source R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR514=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_in_q_brackets4451); 
            L_FBR514_tree = 
            (Object)adaptor.create(L_FBR514)
            ;
            adaptor.addChild(root_0, L_FBR514_tree);


            pushFollow(FOLLOW_q_brackets_source_in_in_q_brackets4454);
            q_brackets_source515=q_brackets_source();

            state._fsp--;

            adaptor.addChild(root_0, q_brackets_source515.getTree());

            R_FBR516=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_in_q_brackets4456); 
            R_FBR516_tree = 
            (Object)adaptor.create(R_FBR516)
            ;
            adaptor.addChild(root_0, R_FBR516_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_q_brackets"


    public static class q_brackets_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_brackets_source"
    // Objcm.g:841:1: q_brackets_source : ( q_source | q_br_source );
    public final ObjcmParser.q_brackets_source_return q_brackets_source() throws RecognitionException {
        ObjcmParser.q_brackets_source_return retval = new ObjcmParser.q_brackets_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.q_source_return q_source517 =null;

        ObjcmParser.q_br_source_return q_br_source518 =null;



        try {
            // Objcm.g:842:2: ( q_source | q_br_source )
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==ASTERISK||LA131_0==ID||LA131_0==L_AND||LA131_0==L_BR||LA131_0==L_KBR||LA131_0==L_MINUS||LA131_0==L_MINUS_MINUS||LA131_0==L_NOT||LA131_0==L_PLUS||LA131_0==L_PLUS_PLUS||LA131_0==L_TILDA||LA131_0==NUMBER||LA131_0==R_FBR||LA131_0==SIZEOF||(LA131_0 >= STRING_LITERAL && LA131_0 <= STRING_LITERAL3)||LA131_0==165||LA131_0==171||LA131_0==173||LA131_0==177||LA131_0==189||LA131_0==191||LA131_0==196) ) {
                alt131=1;
            }
            else if ( (LA131_0==L_FBR) ) {
                alt131=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }
            switch (alt131) {
                case 1 :
                    // Objcm.g:842:4: q_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_source_in_q_brackets_source4468);
                    q_source517=q_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_source517.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:843:4: q_br_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_br_source_in_q_brackets_source4473);
                    q_br_source518=q_br_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_br_source518.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_brackets_source"


    public static class q_br_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_br_source"
    // Objcm.g:846:1: q_br_source : in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? ;
    public final ObjcmParser.q_br_source_return q_br_source() throws RecognitionException {
        ObjcmParser.q_br_source_return retval = new ObjcmParser.q_br_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA520=null;
        Token COMMA522=null;
        ObjcmParser.in_q_brackets_return in_q_brackets519 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets521 =null;


        Object COMMA520_tree=null;
        Object COMMA522_tree=null;

        try {
            // Objcm.g:847:2: ( in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? )
            // Objcm.g:847:4: in_q_brackets ( COMMA in_q_brackets )* ( COMMA )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_in_q_brackets_in_q_br_source4486);
            in_q_brackets519=in_q_brackets();

            state._fsp--;

            adaptor.addChild(root_0, in_q_brackets519.getTree());

            // Objcm.g:847:19: ( COMMA in_q_brackets )*
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==COMMA) ) {
                    int LA132_1 = input.LA(2);

                    if ( (LA132_1==L_FBR) ) {
                        alt132=1;
                    }


                }


                switch (alt132) {
            	case 1 :
            	    // Objcm.g:847:20: COMMA in_q_brackets
            	    {
            	    COMMA520=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4490); 
            	    COMMA520_tree = 
            	    (Object)adaptor.create(COMMA520)
            	    ;
            	    adaptor.addChild(root_0, COMMA520_tree);


            	    pushFollow(FOLLOW_in_q_brackets_in_q_br_source4493);
            	    in_q_brackets521=in_q_brackets();

            	    state._fsp--;

            	    adaptor.addChild(root_0, in_q_brackets521.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);


            // Objcm.g:847:43: ( COMMA )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==COMMA) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // Objcm.g:847:43: COMMA
                    {
                    COMMA522=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4497); 
                    COMMA522_tree = 
                    (Object)adaptor.create(COMMA522)
                    ;
                    adaptor.addChild(root_0, COMMA522_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_br_source"


    public static class q_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_source"
    // Objcm.g:850:1: q_source : ( expression ( COMMA expression )* )? ;
    public final ObjcmParser.q_source_return q_source() throws RecognitionException {
        ObjcmParser.q_source_return retval = new ObjcmParser.q_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA524=null;
        ObjcmParser.expression_return expression523 =null;

        ObjcmParser.expression_return expression525 =null;


        Object COMMA524_tree=null;

        try {
            // Objcm.g:850:9: ( ( expression ( COMMA expression )* )? )
            // Objcm.g:850:11: ( expression ( COMMA expression )* )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:850:11: ( expression ( COMMA expression )* )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==ASTERISK||LA135_0==ID||LA135_0==L_AND||LA135_0==L_BR||LA135_0==L_KBR||LA135_0==L_MINUS||LA135_0==L_MINUS_MINUS||LA135_0==L_NOT||LA135_0==L_PLUS||LA135_0==L_PLUS_PLUS||LA135_0==L_TILDA||LA135_0==NUMBER||LA135_0==SIZEOF||(LA135_0 >= STRING_LITERAL && LA135_0 <= STRING_LITERAL3)||LA135_0==165||LA135_0==171||LA135_0==173||LA135_0==177||LA135_0==189||LA135_0==191||LA135_0==196) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    // Objcm.g:850:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_q_source4509);
                    expression523=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression523.getTree());

                    // Objcm.g:850:24: ( COMMA expression )*
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( (LA134_0==COMMA) ) {
                            alt134=1;
                        }


                        switch (alt134) {
                    	case 1 :
                    	    // Objcm.g:850:25: COMMA expression
                    	    {
                    	    COMMA524=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_source4513); 
                    	    COMMA524_tree = 
                    	    (Object)adaptor.create(COMMA524)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA524_tree);


                    	    pushFollow(FOLLOW_expression_in_q_source4516);
                    	    expression525=expression();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, expression525.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop134;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_source"


    public static class simple_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_method_call"
    // Objcm.g:853:1: simple_method_call : ID ( method_brackets )? ;
    public final ObjcmParser.simple_method_call_return simple_method_call() throws RecognitionException {
        ObjcmParser.simple_method_call_return retval = new ObjcmParser.simple_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID526=null;
        ObjcmParser.method_brackets_return method_brackets527 =null;


        Object ID526_tree=null;

        try {
            // Objcm.g:854:2: ( ID ( method_brackets )? )
            // Objcm.g:854:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID526=(Token)match(input,ID,FOLLOW_ID_in_simple_method_call4533); 
            ID526_tree = 
            (Object)adaptor.create(ID526)
            ;
            adaptor.addChild(root_0, ID526_tree);


            // Objcm.g:854:7: ( method_brackets )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==L_BR) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // Objcm.g:854:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_simple_method_call4535);
                    method_brackets527=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets527.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_method_call"


    public static class index_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_brackets"
    // Objcm.g:856:1: index_brackets : L_KBR classical_expr_wrp R_KBR ;
    public final ObjcmParser.index_brackets_return index_brackets() throws RecognitionException {
        ObjcmParser.index_brackets_return retval = new ObjcmParser.index_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR528=null;
        Token R_KBR530=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp529 =null;


        Object L_KBR528_tree=null;
        Object R_KBR530_tree=null;

        try {
            // Objcm.g:857:2: ( L_KBR classical_expr_wrp R_KBR )
            // Objcm.g:857:4: L_KBR classical_expr_wrp R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR528=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index_brackets4551); 
            L_KBR528_tree = 
            (Object)adaptor.create(L_KBR528)
            ;
            adaptor.addChild(root_0, L_KBR528_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_index_brackets4554);
            classical_expr_wrp529=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp529.getTree());

            R_KBR530=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index_brackets4556); 
            R_KBR530_tree = 
            (Object)adaptor.create(R_KBR530)
            ;
            adaptor.addChild(root_0, R_KBR530_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_brackets"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // Objcm.g:864:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcmParser.interface_declaration_wrapper_return retval = new ObjcmParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_declaration_return interface_declaration531 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // Objcm.g:865:2: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // Objcm.g:865:4: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper4570);
            interface_declaration531=interface_declaration();

            state._fsp--;

            stream_interface_declaration.add(interface_declaration531.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 865:26: -> ^( INTERFACE interface_declaration )
            {
                // Objcm.g:865:29: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // Objcm.g:867:1: interface_declaration : '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods )+ '@end' ;
    public final ObjcmParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcmParser.interface_declaration_return retval = new ObjcmParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal532=null;
        Token string_literal538=null;
        ObjcmParser.name_return name533 =null;

        ObjcmParser.interface_category_return interface_category534 =null;

        ObjcmParser.super_class_return super_class535 =null;

        ObjcmParser.annotated_block_return annotated_block536 =null;

        ObjcmParser.interface_methods_return interface_methods537 =null;


        Object string_literal532_tree=null;
        Object string_literal538_tree=null;

        try {
            // Objcm.g:868:2: ( '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods )+ '@end' )
            // Objcm.g:868:4: '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods )+ '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal532=(Token)match(input,169,FOLLOW_169_in_interface_declaration4588); 
            string_literal532_tree = 
            (Object)adaptor.create(string_literal532)
            ;
            adaptor.addChild(root_0, string_literal532_tree);


            pushFollow(FOLLOW_name_in_interface_declaration4591);
            name533=name();

            state._fsp--;

            adaptor.addChild(root_0, name533.getTree());

            // Objcm.g:868:24: ( interface_category )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==L_BR) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // Objcm.g:868:24: interface_category
                    {
                    pushFollow(FOLLOW_interface_category_in_interface_declaration4594);
                    interface_category534=interface_category();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_category534.getTree());

                    }
                    break;

            }


            // Objcm.g:868:44: ( super_class )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==COLON) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // Objcm.g:868:45: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_interface_declaration4598);
                    super_class535=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class535.getTree());

                    }
                    break;

            }


            // Objcm.g:869:3: ( annotated_block | interface_methods )+
            int cnt139=0;
            loop139:
            do {
                int alt139=3;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==L_FBR) ) {
                    alt139=1;
                }
                else if ( (LA139_0==ENUM_PREFIX||LA139_0==L_MINUS||LA139_0==L_PLUS) ) {
                    alt139=2;
                }


                switch (alt139) {
            	case 1 :
            	    // Objcm.g:869:4: annotated_block
            	    {
            	    pushFollow(FOLLOW_annotated_block_in_interface_declaration4605);
            	    annotated_block536=annotated_block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block536.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:869:22: interface_methods
            	    {
            	    pushFollow(FOLLOW_interface_methods_in_interface_declaration4609);
            	    interface_methods537=interface_methods();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_methods537.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt139 >= 1 ) break loop139;
                        EarlyExitException eee =
                            new EarlyExitException(139, input);
                        throw eee;
                }
                cnt139++;
            } while (true);


            string_literal538=(Token)match(input,166,FOLLOW_166_in_interface_declaration4618); 
            string_literal538_tree = 
            (Object)adaptor.create(string_literal538)
            ;
            adaptor.addChild(root_0, string_literal538_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class annotated_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block"
    // Objcm.g:873:1: annotated_block : L_FBR ( annotated_block_internal )* R_FBR ;
    public final ObjcmParser.annotated_block_return annotated_block() throws RecognitionException {
        ObjcmParser.annotated_block_return retval = new ObjcmParser.annotated_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR539=null;
        Token R_FBR541=null;
        ObjcmParser.annotated_block_internal_return annotated_block_internal540 =null;


        Object L_FBR539_tree=null;
        Object R_FBR541_tree=null;

        try {
            // Objcm.g:874:2: ( L_FBR ( annotated_block_internal )* R_FBR )
            // Objcm.g:874:4: L_FBR ( annotated_block_internal )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR539=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_annotated_block4629); 
            L_FBR539_tree = 
            (Object)adaptor.create(L_FBR539)
            ;
            adaptor.addChild(root_0, L_FBR539_tree);


            // Objcm.g:875:3: ( annotated_block_internal )*
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==ID||LA140_0==VOID||LA140_0==170||LA140_0==172||LA140_0==195) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    // Objcm.g:875:3: annotated_block_internal
            	    {
            	    pushFollow(FOLLOW_annotated_block_internal_in_annotated_block4634);
            	    annotated_block_internal540=annotated_block_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block_internal540.getTree());

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            R_FBR541=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_annotated_block4639); 
            R_FBR541_tree = 
            (Object)adaptor.create(R_FBR541)
            ;
            adaptor.addChild(root_0, R_FBR541_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block"


    public static class annotated_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block_internal"
    // Objcm.g:879:1: annotated_block_internal : ( block_annotation | public_block_internal );
    public final ObjcmParser.annotated_block_internal_return annotated_block_internal() throws RecognitionException {
        ObjcmParser.annotated_block_internal_return retval = new ObjcmParser.annotated_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_annotation_return block_annotation542 =null;

        ObjcmParser.public_block_internal_return public_block_internal543 =null;



        try {
            // Objcm.g:880:2: ( block_annotation | public_block_internal )
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==170||LA141_0==172) ) {
                alt141=1;
            }
            else if ( (LA141_0==ID||LA141_0==VOID||LA141_0==195) ) {
                alt141=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;

            }
            switch (alt141) {
                case 1 :
                    // Objcm.g:880:4: block_annotation
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_annotation_in_annotated_block_internal4652);
                    block_annotation542=block_annotation();

                    state._fsp--;

                    adaptor.addChild(root_0, block_annotation542.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:881:5: public_block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_public_block_internal_in_annotated_block_internal4659);
                    public_block_internal543=public_block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, public_block_internal543.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block_internal"


    public static class block_annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_annotation"
    // Objcm.g:884:1: block_annotation : ( '@public' | '@private' );
    public final ObjcmParser.block_annotation_return block_annotation() throws RecognitionException {
        ObjcmParser.block_annotation_return retval = new ObjcmParser.block_annotation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set544=null;

        Object set544_tree=null;

        try {
            // Objcm.g:885:2: ( '@public' | '@private' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set544=(Token)input.LT(1);

            if ( input.LA(1)==170||input.LA(1)==172 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set544)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_annotation"


    public static class public_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "public_block_internal"
    // Objcm.g:889:1: public_block_internal : ( simple_field_declaration | union_declaration );
    public final ObjcmParser.public_block_internal_return public_block_internal() throws RecognitionException {
        ObjcmParser.public_block_internal_return retval = new ObjcmParser.public_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_field_declaration_return simple_field_declaration545 =null;

        ObjcmParser.union_declaration_return union_declaration546 =null;



        try {
            // Objcm.g:890:2: ( simple_field_declaration | union_declaration )
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==ID||LA142_0==VOID) ) {
                alt142=1;
            }
            else if ( (LA142_0==195) ) {
                alt142=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;

            }
            switch (alt142) {
                case 1 :
                    // Objcm.g:890:4: simple_field_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_field_declaration_in_public_block_internal4694);
                    simple_field_declaration545=simple_field_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, simple_field_declaration545.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:891:4: union_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_union_declaration_in_public_block_internal4699);
                    union_declaration546=union_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, union_declaration546.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "public_block_internal"


    public static class simple_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_field_declaration"
    // Objcm.g:894:1: simple_field_declaration : field_type name SEMICOLON ;
    public final ObjcmParser.simple_field_declaration_return simple_field_declaration() throws RecognitionException {
        ObjcmParser.simple_field_declaration_return retval = new ObjcmParser.simple_field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON549=null;
        ObjcmParser.field_type_return field_type547 =null;

        ObjcmParser.name_return name548 =null;


        Object SEMICOLON549_tree=null;

        try {
            // Objcm.g:895:2: ( field_type name SEMICOLON )
            // Objcm.g:895:4: field_type name SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_simple_field_declaration4711);
            field_type547=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type547.getTree());

            pushFollow(FOLLOW_name_in_simple_field_declaration4713);
            name548=name();

            state._fsp--;

            adaptor.addChild(root_0, name548.getTree());

            SEMICOLON549=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_field_declaration4716); 
            SEMICOLON549_tree = 
            (Object)adaptor.create(SEMICOLON549)
            ;
            adaptor.addChild(root_0, SEMICOLON549_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_field_declaration"


    public static class union_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_declaration"
    // Objcm.g:898:1: union_declaration : 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON ;
    public final ObjcmParser.union_declaration_return union_declaration() throws RecognitionException {
        ObjcmParser.union_declaration_return retval = new ObjcmParser.union_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal550=null;
        Token L_FBR551=null;
        Token R_FBR553=null;
        Token ID554=null;
        Token SEMICOLON555=null;
        ObjcmParser.simple_field_declaration_return simple_field_declaration552 =null;


        Object string_literal550_tree=null;
        Object L_FBR551_tree=null;
        Object R_FBR553_tree=null;
        Object ID554_tree=null;
        Object SEMICOLON555_tree=null;

        try {
            // Objcm.g:899:2: ( 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON )
            // Objcm.g:899:4: 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal550=(Token)match(input,195,FOLLOW_195_in_union_declaration4729); 
            string_literal550_tree = 
            (Object)adaptor.create(string_literal550)
            ;
            adaptor.addChild(root_0, string_literal550_tree);


            L_FBR551=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_union_declaration4732); 
            L_FBR551_tree = 
            (Object)adaptor.create(L_FBR551)
            ;
            adaptor.addChild(root_0, L_FBR551_tree);


            // Objcm.g:900:4: ( simple_field_declaration )+
            int cnt143=0;
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==ID||LA143_0==VOID) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // Objcm.g:900:4: simple_field_declaration
            	    {
            	    pushFollow(FOLLOW_simple_field_declaration_in_union_declaration4738);
            	    simple_field_declaration552=simple_field_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_field_declaration552.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt143 >= 1 ) break loop143;
                        EarlyExitException eee =
                            new EarlyExitException(143, input);
                        throw eee;
                }
                cnt143++;
            } while (true);


            R_FBR553=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_union_declaration4743); 
            R_FBR553_tree = 
            (Object)adaptor.create(R_FBR553)
            ;
            adaptor.addChild(root_0, R_FBR553_tree);


            ID554=(Token)match(input,ID,FOLLOW_ID_in_union_declaration4746); 
            ID554_tree = 
            (Object)adaptor.create(ID554)
            ;
            adaptor.addChild(root_0, ID554_tree);


            SEMICOLON555=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_union_declaration4749); 
            SEMICOLON555_tree = 
            (Object)adaptor.create(SEMICOLON555)
            ;
            adaptor.addChild(root_0, SEMICOLON555_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_declaration"


    public static class super_class_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "super_class"
    // Objcm.g:904:1: super_class : COLON ID -> ^( SUPER_CLASS ID ) ;
    public final ObjcmParser.super_class_return super_class() throws RecognitionException {
        ObjcmParser.super_class_return retval = new ObjcmParser.super_class_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON556=null;
        Token ID557=null;

        Object COLON556_tree=null;
        Object ID557_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:905:2: ( COLON ID -> ^( SUPER_CLASS ID ) )
            // Objcm.g:905:4: COLON ID
            {
            COLON556=(Token)match(input,COLON,FOLLOW_COLON_in_super_class4763);  
            stream_COLON.add(COLON556);


            ID557=(Token)match(input,ID,FOLLOW_ID_in_super_class4766);  
            stream_ID.add(ID557);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 905:15: -> ^( SUPER_CLASS ID )
            {
                // Objcm.g:905:18: ^( SUPER_CLASS ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPER_CLASS, "SUPER_CLASS")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "super_class"


    public static class interface_category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_category"
    // Objcm.g:907:1: interface_category : L_BR ID R_BR -> ^( CATEGORY L_BR ID R_BR ) ;
    public final ObjcmParser.interface_category_return interface_category() throws RecognitionException {
        ObjcmParser.interface_category_return retval = new ObjcmParser.interface_category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR558=null;
        Token ID559=null;
        Token R_BR560=null;

        Object L_BR558_tree=null;
        Object ID559_tree=null;
        Object R_BR560_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");

        try {
            // Objcm.g:908:2: ( L_BR ID R_BR -> ^( CATEGORY L_BR ID R_BR ) )
            // Objcm.g:908:4: L_BR ID R_BR
            {
            L_BR558=(Token)match(input,L_BR,FOLLOW_L_BR_in_interface_category4786);  
            stream_L_BR.add(L_BR558);


            ID559=(Token)match(input,ID,FOLLOW_ID_in_interface_category4789);  
            stream_ID.add(ID559);


            R_BR560=(Token)match(input,R_BR,FOLLOW_R_BR_in_interface_category4792);  
            stream_R_BR.add(R_BR560);


            // AST REWRITE
            // elements: L_BR, ID, R_BR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 908:19: -> ^( CATEGORY L_BR ID R_BR )
            {
                // Objcm.g:908:22: ^( CATEGORY L_BR ID R_BR )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_L_BR.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_R_BR.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_category"


    public static class interface_methods_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_methods"
    // Objcm.g:910:1: interface_methods : ( enum_declaration | interface_method )+ ;
    public final ObjcmParser.interface_methods_return interface_methods() throws RecognitionException {
        ObjcmParser.interface_methods_return retval = new ObjcmParser.interface_methods_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.enum_declaration_return enum_declaration561 =null;

        ObjcmParser.interface_method_return interface_method562 =null;



        try {
            // Objcm.g:911:2: ( ( enum_declaration | interface_method )+ )
            // Objcm.g:911:4: ( enum_declaration | interface_method )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:911:4: ( enum_declaration | interface_method )+
            int cnt144=0;
            loop144:
            do {
                int alt144=3;
                int LA144_0 = input.LA(1);

                if ( (LA144_0==ENUM_PREFIX) ) {
                    alt144=1;
                }
                else if ( (LA144_0==L_MINUS||LA144_0==L_PLUS) ) {
                    alt144=2;
                }


                switch (alt144) {
            	case 1 :
            	    // Objcm.g:911:5: enum_declaration
            	    {
            	    pushFollow(FOLLOW_enum_declaration_in_interface_methods4821);
            	    enum_declaration561=enum_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, enum_declaration561.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:911:24: interface_method
            	    {
            	    pushFollow(FOLLOW_interface_method_in_interface_methods4825);
            	    interface_method562=interface_method();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_method562.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt144 >= 1 ) break loop144;
                        EarlyExitException eee =
                            new EarlyExitException(144, input);
                        throw eee;
                }
                cnt144++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_methods"


    public static class interface_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_method"
    // Objcm.g:913:1: interface_method : method_header -> ^( METHOD method_header ) ;
    public final ObjcmParser.interface_method_return interface_method() throws RecognitionException {
        ObjcmParser.interface_method_return retval = new ObjcmParser.interface_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_header_return method_header563 =null;


        RewriteRuleSubtreeStream stream_method_header=new RewriteRuleSubtreeStream(adaptor,"rule method_header");
        try {
            // Objcm.g:914:2: ( method_header -> ^( METHOD method_header ) )
            // Objcm.g:914:4: method_header
            {
            pushFollow(FOLLOW_method_header_in_interface_method4837);
            method_header563=method_header();

            state._fsp--;

            stream_method_header.add(method_header563.getTree());

            // AST REWRITE
            // elements: method_header
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 914:18: -> ^( METHOD method_header )
            {
                // Objcm.g:914:21: ^( METHOD method_header )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_method_header.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_method"


    public static class method_header_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header"
    // Objcm.g:916:1: method_header : method_header_body ( SEMICOLON )? ;
    public final ObjcmParser.method_header_return method_header() throws RecognitionException {
        ObjcmParser.method_header_return retval = new ObjcmParser.method_header_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON565=null;
        ObjcmParser.method_header_body_return method_header_body564 =null;


        Object SEMICOLON565_tree=null;

        try {
            // Objcm.g:917:2: ( method_header_body ( SEMICOLON )? )
            // Objcm.g:917:4: method_header_body ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_method_header4856);
            method_header_body564=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body564.getTree());

            // Objcm.g:917:23: ( SEMICOLON )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==SEMICOLON) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // Objcm.g:917:23: SEMICOLON
                    {
                    SEMICOLON565=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_method_header4858); 
                    SEMICOLON565_tree = 
                    (Object)adaptor.create(SEMICOLON565)
                    ;
                    adaptor.addChild(root_0, SEMICOLON565_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header"


    public static class method_header_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body"
    // Objcm.g:919:1: method_header_body : method_modifier_wrapper method_type name ( method_params )? ( va_args_wrapper )? ;
    public final ObjcmParser.method_header_body_return method_header_body() throws RecognitionException {
        ObjcmParser.method_header_body_return retval = new ObjcmParser.method_header_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper566 =null;

        ObjcmParser.method_type_return method_type567 =null;

        ObjcmParser.name_return name568 =null;

        ObjcmParser.method_params_return method_params569 =null;

        ObjcmParser.va_args_wrapper_return va_args_wrapper570 =null;



        try {
            // Objcm.g:920:2: ( method_modifier_wrapper method_type name ( method_params )? ( va_args_wrapper )? )
            // Objcm.g:920:4: method_modifier_wrapper method_type name ( method_params )? ( va_args_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_header_body4868);
            method_modifier_wrapper566=method_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_modifier_wrapper566.getTree());

            pushFollow(FOLLOW_method_type_in_method_header_body4871);
            method_type567=method_type();

            state._fsp--;

            adaptor.addChild(root_0, method_type567.getTree());

            pushFollow(FOLLOW_name_in_method_header_body4874);
            name568=name();

            state._fsp--;

            adaptor.addChild(root_0, name568.getTree());

            // Objcm.g:920:48: ( method_params )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==COLON||LA146_0==ID||LA146_0==L_BR||LA146_0==189) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // Objcm.g:920:48: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_header_body4877);
                    method_params569=method_params();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params569.getTree());

                    }
                    break;

            }


            // Objcm.g:920:63: ( va_args_wrapper )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==COMMA) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // Objcm.g:920:63: va_args_wrapper
                    {
                    pushFollow(FOLLOW_va_args_wrapper_in_method_header_body4880);
                    va_args_wrapper570=va_args_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, va_args_wrapper570.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body"


    public static class va_args_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args_wrapper"
    // Objcm.g:922:1: va_args_wrapper : va_args -> ^( VA_ARGS va_args ) ;
    public final ObjcmParser.va_args_wrapper_return va_args_wrapper() throws RecognitionException {
        ObjcmParser.va_args_wrapper_return retval = new ObjcmParser.va_args_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.va_args_return va_args571 =null;


        RewriteRuleSubtreeStream stream_va_args=new RewriteRuleSubtreeStream(adaptor,"rule va_args");
        try {
            // Objcm.g:923:2: ( va_args -> ^( VA_ARGS va_args ) )
            // Objcm.g:923:4: va_args
            {
            pushFollow(FOLLOW_va_args_in_va_args_wrapper4890);
            va_args571=va_args();

            state._fsp--;

            stream_va_args.add(va_args571.getTree());

            // AST REWRITE
            // elements: va_args
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 923:12: -> ^( VA_ARGS va_args )
            {
                // Objcm.g:923:15: ^( VA_ARGS va_args )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VA_ARGS, "VA_ARGS")
                , root_1);

                adaptor.addChild(root_1, stream_va_args.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args_wrapper"


    public static class va_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args"
    // Objcm.g:925:1: va_args : COMMA '...' ( SEMICOLON )? ;
    public final ObjcmParser.va_args_return va_args() throws RecognitionException {
        ObjcmParser.va_args_return retval = new ObjcmParser.va_args_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA572=null;
        Token string_literal573=null;
        Token SEMICOLON574=null;

        Object COMMA572_tree=null;
        Object string_literal573_tree=null;
        Object SEMICOLON574_tree=null;

        try {
            // Objcm.g:925:9: ( COMMA '...' ( SEMICOLON )? )
            // Objcm.g:925:11: COMMA '...' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            COMMA572=(Token)match(input,COMMA,FOLLOW_COMMA_in_va_args4907); 
            COMMA572_tree = 
            (Object)adaptor.create(COMMA572)
            ;
            adaptor.addChild(root_0, COMMA572_tree);


            string_literal573=(Token)match(input,163,FOLLOW_163_in_va_args4910); 
            string_literal573_tree = 
            (Object)adaptor.create(string_literal573)
            ;
            adaptor.addChild(root_0, string_literal573_tree);


            // Objcm.g:925:25: ( SEMICOLON )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==SEMICOLON) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // Objcm.g:925:25: SEMICOLON
                    {
                    SEMICOLON574=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_va_args4913); 
                    SEMICOLON574_tree = 
                    (Object)adaptor.create(SEMICOLON574)
                    ;
                    adaptor.addChild(root_0, SEMICOLON574_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args"


    public static class method_header_body2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body2"
    // Objcm.g:927:1: method_header_body2 : method_type name ( method_params2 )? ;
    public final ObjcmParser.method_header_body2_return method_header_body2() throws RecognitionException {
        ObjcmParser.method_header_body2_return retval = new ObjcmParser.method_header_body2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_type_return method_type575 =null;

        ObjcmParser.name_return name576 =null;

        ObjcmParser.method_params2_return method_params2577 =null;



        try {
            // Objcm.g:928:2: ( method_type name ( method_params2 )? )
            // Objcm.g:928:4: method_type name ( method_params2 )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_type_in_method_header_body24924);
            method_type575=method_type();

            state._fsp--;

            adaptor.addChild(root_0, method_type575.getTree());

            pushFollow(FOLLOW_name_in_method_header_body24926);
            name576=name();

            state._fsp--;

            adaptor.addChild(root_0, name576.getTree());

            // Objcm.g:928:22: ( method_params2 )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==L_BR) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // Objcm.g:928:22: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_method_header_body24929);
                    method_params2577=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params2577.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body2"


    public static class method_header_body3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body3"
    // Objcm.g:930:1: method_header_body3 : method_params2 ;
    public final ObjcmParser.method_header_body3_return method_header_body3() throws RecognitionException {
        ObjcmParser.method_header_body3_return retval = new ObjcmParser.method_header_body3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2578 =null;



        try {
            // Objcm.g:931:2: ( method_params2 )
            // Objcm.g:931:4: method_params2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_header_body34939);
            method_params2578=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2578.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body3"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // Objcm.g:933:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcmParser.method_modifier_wrapper_return retval = new ObjcmParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_return method_modifier579 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // Objcm.g:934:2: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // Objcm.g:934:4: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper4948);
            method_modifier579=method_modifier();

            state._fsp--;

            stream_method_modifier.add(method_modifier579.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 934:20: -> ^( MODIFIER method_modifier )
            {
                // Objcm.g:934:23: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // Objcm.g:936:1: method_modifier : ( '+' | '-' );
    public final ObjcmParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcmParser.method_modifier_return retval = new ObjcmParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set580=null;

        Object set580_tree=null;

        try {
            // Objcm.g:937:2: ( '+' | '-' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set580=(Token)input.LT(1);

            if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set580)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_type"
    // Objcm.g:939:1: method_type : ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE type_internal ) | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR -> ^( TYPE ( ID )+ ) );
    public final ObjcmParser.method_type_return method_type() throws RecognitionException {
        ObjcmParser.method_type_return retval = new ObjcmParser.method_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR581=null;
        Token STRUCT_PREFIX582=null;
        Token ASTERISK585=null;
        Token R_BR586=null;
        Token L_BR587=null;
        Token CONST_PREFIX588=null;
        Token ID590=null;
        Token ASTERISK592=null;
        Token R_BR593=null;
        ObjcmParser.type_internal_return type_internal583 =null;

        ObjcmParser.generic_return generic584 =null;

        ObjcmParser.known_types_return known_types589 =null;

        ObjcmParser.generic_return generic591 =null;


        Object L_BR581_tree=null;
        Object STRUCT_PREFIX582_tree=null;
        Object ASTERISK585_tree=null;
        Object R_BR586_tree=null;
        Object L_BR587_tree=null;
        Object CONST_PREFIX588_tree=null;
        Object ID590_tree=null;
        Object ASTERISK592_tree=null;
        Object R_BR593_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_STRUCT_PREFIX=new RewriteRuleTokenStream(adaptor,"token STRUCT_PREFIX");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        RewriteRuleSubtreeStream stream_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_internal");
        RewriteRuleSubtreeStream stream_known_types=new RewriteRuleSubtreeStream(adaptor,"rule known_types");
        try {
            // Objcm.g:940:2: ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE type_internal ) | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR -> ^( TYPE ( ID )+ ) )
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==L_BR) ) {
                switch ( input.LA(2) ) {
                case STRUCT_PREFIX:
                    {
                    alt158=1;
                    }
                    break;
                case VOID:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        alt158=1;
                        }
                        break;
                    case L_LESS:
                        {
                        int LA158_11 = input.LA(4);

                        if ( (LA158_11==ID) ) {
                            alt158=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 158, 11, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA158_12 = input.LA(4);

                        if ( (LA158_12==R_BR) ) {
                            alt158=1;
                        }
                        else if ( (LA158_12==ASTERISK) ) {
                            alt158=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 158, 12, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt158=1;
                        }
                        break;
                    case ID:
                        {
                        alt158=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 158, 3, input);

                        throw nvae;

                    }

                    }
                    break;
                case ASTERISK:
                case CONST_PREFIX:
                case L_LESS:
                case R_BR:
                case 196:
                    {
                    alt158=2;
                    }
                    break;
                case ID:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        alt158=1;
                        }
                        break;
                    case L_LESS:
                        {
                        int LA158_16 = input.LA(4);

                        if ( (LA158_16==ID) ) {
                            alt158=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 158, 16, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA158_17 = input.LA(4);

                        if ( (LA158_17==R_BR) ) {
                            alt158=1;
                        }
                        else if ( (LA158_17==ASTERISK) ) {
                            alt158=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 158, 17, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt158=1;
                        }
                        break;
                    case ID:
                        {
                        alt158=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 158, 5, input);

                        throw nvae;

                    }

                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 1, input);

                    throw nvae;

                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;

            }
            switch (alt158) {
                case 1 :
                    // Objcm.g:940:4: L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR581=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type4980);  
                    stream_L_BR.add(L_BR581);


                    // Objcm.g:940:10: ( STRUCT_PREFIX )?
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==STRUCT_PREFIX) ) {
                        alt150=1;
                    }
                    switch (alt150) {
                        case 1 :
                            // Objcm.g:940:10: STRUCT_PREFIX
                            {
                            STRUCT_PREFIX582=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_type4983);  
                            stream_STRUCT_PREFIX.add(STRUCT_PREFIX582);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_internal_in_method_type4986);
                    type_internal583=type_internal();

                    state._fsp--;

                    stream_type_internal.add(type_internal583.getTree());

                    // Objcm.g:940:40: ( generic )?
                    int alt151=2;
                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==L_LESS) ) {
                        alt151=1;
                    }
                    switch (alt151) {
                        case 1 :
                            // Objcm.g:940:40: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type4989);
                            generic584=generic();

                            state._fsp--;

                            stream_generic.add(generic584.getTree());

                            }
                            break;

                    }


                    // Objcm.g:940:49: ( ASTERISK )*
                    loop152:
                    do {
                        int alt152=2;
                        int LA152_0 = input.LA(1);

                        if ( (LA152_0==ASTERISK) ) {
                            alt152=1;
                        }


                        switch (alt152) {
                    	case 1 :
                    	    // Objcm.g:940:49: ASTERISK
                    	    {
                    	    ASTERISK585=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type4992);  
                    	    stream_ASTERISK.add(ASTERISK585);


                    	    }
                    	    break;

                    	default :
                    	    break loop152;
                        }
                    } while (true);


                    R_BR586=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type4995);  
                    stream_R_BR.add(R_BR586);


                    // AST REWRITE
                    // elements: type_internal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 940:64: -> ^( TYPE type_internal )
                    {
                        // Objcm.g:940:67: ^( TYPE type_internal )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE, "TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_internal.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:941:5: L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR587=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type5009);  
                    stream_L_BR.add(L_BR587);


                    // Objcm.g:941:11: ( CONST_PREFIX )?
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==CONST_PREFIX) ) {
                        alt153=1;
                    }
                    switch (alt153) {
                        case 1 :
                            // Objcm.g:941:11: CONST_PREFIX
                            {
                            CONST_PREFIX588=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_type5012);  
                            stream_CONST_PREFIX.add(CONST_PREFIX588);


                            }
                            break;

                    }


                    // Objcm.g:941:25: ( known_types )?
                    int alt154=2;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==VOID||LA154_0==196) ) {
                        alt154=1;
                    }
                    switch (alt154) {
                        case 1 :
                            // Objcm.g:941:25: known_types
                            {
                            pushFollow(FOLLOW_known_types_in_method_type5015);
                            known_types589=known_types();

                            state._fsp--;

                            stream_known_types.add(known_types589.getTree());

                            }
                            break;

                    }


                    // Objcm.g:941:38: ( ID )*
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);

                        if ( (LA155_0==ID) ) {
                            alt155=1;
                        }


                        switch (alt155) {
                    	case 1 :
                    	    // Objcm.g:941:38: ID
                    	    {
                    	    ID590=(Token)match(input,ID,FOLLOW_ID_in_method_type5018);  
                    	    stream_ID.add(ID590);


                    	    }
                    	    break;

                    	default :
                    	    break loop155;
                        }
                    } while (true);


                    // Objcm.g:941:42: ( generic )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==L_LESS) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // Objcm.g:941:42: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type5021);
                            generic591=generic();

                            state._fsp--;

                            stream_generic.add(generic591.getTree());

                            }
                            break;

                    }


                    // Objcm.g:941:51: ( ASTERISK )*
                    loop157:
                    do {
                        int alt157=2;
                        int LA157_0 = input.LA(1);

                        if ( (LA157_0==ASTERISK) ) {
                            alt157=1;
                        }


                        switch (alt157) {
                    	case 1 :
                    	    // Objcm.g:941:51: ASTERISK
                    	    {
                    	    ASTERISK592=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type5024);  
                    	    stream_ASTERISK.add(ASTERISK592);


                    	    }
                    	    break;

                    	default :
                    	    break loop157;
                        }
                    } while (true);


                    R_BR593=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type5027);  
                    stream_R_BR.add(R_BR593);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 941:66: -> ^( TYPE ( ID )+ )
                    {
                        // Objcm.g:941:69: ^( TYPE ( ID )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE, "TYPE")
                        , root_1);

                        if ( !(stream_ID.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_ID.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_ID.nextNode()
                            );

                        }
                        stream_ID.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_type"


    public static class type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal"
    // Objcm.g:944:1: type_internal : type_internal1 ( L_KBR R_KBR )? ;
    public final ObjcmParser.type_internal_return type_internal() throws RecognitionException {
        ObjcmParser.type_internal_return retval = new ObjcmParser.type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR595=null;
        Token R_KBR596=null;
        ObjcmParser.type_internal1_return type_internal1594 =null;


        Object L_KBR595_tree=null;
        Object R_KBR596_tree=null;

        try {
            // Objcm.g:945:2: ( type_internal1 ( L_KBR R_KBR )? )
            // Objcm.g:945:4: type_internal1 ( L_KBR R_KBR )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal1_in_type_internal5052);
            type_internal1594=type_internal1();

            state._fsp--;

            adaptor.addChild(root_0, type_internal1594.getTree());

            // Objcm.g:945:19: ( L_KBR R_KBR )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==L_KBR) ) {
                int LA159_1 = input.LA(2);

                if ( (LA159_1==R_KBR) ) {
                    alt159=1;
                }
            }
            switch (alt159) {
                case 1 :
                    // Objcm.g:945:20: L_KBR R_KBR
                    {
                    L_KBR595=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_type_internal5055); 
                    L_KBR595_tree = 
                    (Object)adaptor.create(L_KBR595)
                    ;
                    adaptor.addChild(root_0, L_KBR595_tree);


                    R_KBR596=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_type_internal5058); 
                    R_KBR596_tree = 
                    (Object)adaptor.create(R_KBR596)
                    ;
                    adaptor.addChild(root_0, R_KBR596_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal"


    public static class type_internal1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal1"
    // Objcm.g:948:1: type_internal1 : ( VOID | ID );
    public final ObjcmParser.type_internal1_return type_internal1() throws RecognitionException {
        ObjcmParser.type_internal1_return retval = new ObjcmParser.type_internal1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set597=null;

        Object set597_tree=null;

        try {
            // Objcm.g:949:2: ( VOID | ID )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set597=(Token)input.LT(1);

            if ( input.LA(1)==ID||input.LA(1)==VOID ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set597)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal1"


    public static class generic_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic"
    // Objcm.g:953:1: generic : L_LESS generic_internal L_MORE -> ^( GENERIC generic_internal ) ;
    public final ObjcmParser.generic_return generic() throws RecognitionException {
        ObjcmParser.generic_return retval = new ObjcmParser.generic_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_LESS598=null;
        Token L_MORE600=null;
        ObjcmParser.generic_internal_return generic_internal599 =null;


        Object L_LESS598_tree=null;
        Object L_MORE600_tree=null;
        RewriteRuleTokenStream stream_L_MORE=new RewriteRuleTokenStream(adaptor,"token L_MORE");
        RewriteRuleTokenStream stream_L_LESS=new RewriteRuleTokenStream(adaptor,"token L_LESS");
        RewriteRuleSubtreeStream stream_generic_internal=new RewriteRuleSubtreeStream(adaptor,"rule generic_internal");
        try {
            // Objcm.g:953:8: ( L_LESS generic_internal L_MORE -> ^( GENERIC generic_internal ) )
            // Objcm.g:953:11: L_LESS generic_internal L_MORE
            {
            L_LESS598=(Token)match(input,L_LESS,FOLLOW_L_LESS_in_generic5092);  
            stream_L_LESS.add(L_LESS598);


            pushFollow(FOLLOW_generic_internal_in_generic5094);
            generic_internal599=generic_internal();

            state._fsp--;

            stream_generic_internal.add(generic_internal599.getTree());

            L_MORE600=(Token)match(input,L_MORE,FOLLOW_L_MORE_in_generic5096);  
            stream_L_MORE.add(L_MORE600);


            // AST REWRITE
            // elements: generic_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 953:42: -> ^( GENERIC generic_internal )
            {
                // Objcm.g:953:45: ^( GENERIC generic_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GENERIC, "GENERIC")
                , root_1);

                adaptor.addChild(root_1, stream_generic_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
        //    recover(input,re);
    //	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
                 input.rewind();
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic"


    public static class generic_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic_internal"
    // Objcm.g:955:1: generic_internal : ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* ;
    public final ObjcmParser.generic_internal_return generic_internal() throws RecognitionException {
        ObjcmParser.generic_internal_return retval = new ObjcmParser.generic_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID601=null;
        Token ASTERISK602=null;
        Token COMMA603=null;
        Token ID604=null;
        Token ASTERISK605=null;

        Object ID601_tree=null;
        Object ASTERISK602_tree=null;
        Object COMMA603_tree=null;
        Object ID604_tree=null;
        Object ASTERISK605_tree=null;

        try {
            // Objcm.g:956:2: ( ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* )
            // Objcm.g:956:5: ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )*
            {
            root_0 = (Object)adaptor.nil();


            ID601=(Token)match(input,ID,FOLLOW_ID_in_generic_internal5115); 
            ID601_tree = 
            (Object)adaptor.create(ID601)
            ;
            adaptor.addChild(root_0, ID601_tree);


            // Objcm.g:956:8: ( ASTERISK )*
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==ASTERISK) ) {
                    alt160=1;
                }


                switch (alt160) {
            	case 1 :
            	    // Objcm.g:956:8: ASTERISK
            	    {
            	    ASTERISK602=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal5117); 
            	    ASTERISK602_tree = 
            	    (Object)adaptor.create(ASTERISK602)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK602_tree);


            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);


            // Objcm.g:956:18: ( COMMA ID ( ASTERISK )* )*
            loop162:
            do {
                int alt162=2;
                int LA162_0 = input.LA(1);

                if ( (LA162_0==COMMA) ) {
                    alt162=1;
                }


                switch (alt162) {
            	case 1 :
            	    // Objcm.g:956:19: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA603=(Token)match(input,COMMA,FOLLOW_COMMA_in_generic_internal5121); 
            	    COMMA603_tree = 
            	    (Object)adaptor.create(COMMA603)
            	    ;
            	    adaptor.addChild(root_0, COMMA603_tree);


            	    ID604=(Token)match(input,ID,FOLLOW_ID_in_generic_internal5124); 
            	    ID604_tree = 
            	    (Object)adaptor.create(ID604)
            	    ;
            	    adaptor.addChild(root_0, ID604_tree);


            	    // Objcm.g:956:30: ( ASTERISK )*
            	    loop161:
            	    do {
            	        int alt161=2;
            	        int LA161_0 = input.LA(1);

            	        if ( (LA161_0==ASTERISK) ) {
            	            alt161=1;
            	        }


            	        switch (alt161) {
            	    	case 1 :
            	    	    // Objcm.g:956:30: ASTERISK
            	    	    {
            	    	    ASTERISK605=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal5127); 
            	    	    ASTERISK605_tree = 
            	    	    (Object)adaptor.create(ASTERISK605)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK605_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop161;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic_internal"


    public static class method_params2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params2"
    // Objcm.g:958:1: method_params2 : L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR ;
    public final ObjcmParser.method_params2_return method_params2() throws RecognitionException {
        ObjcmParser.method_params2_return retval = new ObjcmParser.method_params2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR606=null;
        Token COMMA608=null;
        Token R_BR610=null;
        ObjcmParser.method_param_wrapper2_return method_param_wrapper2607 =null;

        ObjcmParser.method_param_wrapper2_return method_param_wrapper2609 =null;


        Object L_BR606_tree=null;
        Object COMMA608_tree=null;
        Object R_BR610_tree=null;

        try {
            // Objcm.g:959:2: ( L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR )
            // Objcm.g:959:4: L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR606=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_params25139); 
            L_BR606_tree = 
            (Object)adaptor.create(L_BR606)
            ;
            adaptor.addChild(root_0, L_BR606_tree);


            pushFollow(FOLLOW_method_param_wrapper2_in_method_params25142);
            method_param_wrapper2607=method_param_wrapper2();

            state._fsp--;

            adaptor.addChild(root_0, method_param_wrapper2607.getTree());

            // Objcm.g:959:33: ( COMMA method_param_wrapper2 )*
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==COMMA) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // Objcm.g:959:34: COMMA method_param_wrapper2
            	    {
            	    COMMA608=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_params25146); 
            	    COMMA608_tree = 
            	    (Object)adaptor.create(COMMA608)
            	    ;
            	    adaptor.addChild(root_0, COMMA608_tree);


            	    pushFollow(FOLLOW_method_param_wrapper2_in_method_params25149);
            	    method_param_wrapper2609=method_param_wrapper2();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_param_wrapper2609.getTree());

            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);


            R_BR610=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_params25153); 
            R_BR610_tree = 
            (Object)adaptor.create(R_BR610)
            ;
            adaptor.addChild(root_0, R_BR610_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params2"


    public static class method_param_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_wrapper2"
    // Objcm.g:962:1: method_param_wrapper2 : method_param2 -> ^( PARAM method_param2 ) ;
    public final ObjcmParser.method_param_wrapper2_return method_param_wrapper2() throws RecognitionException {
        ObjcmParser.method_param_wrapper2_return retval = new ObjcmParser.method_param_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param2_return method_param2611 =null;


        RewriteRuleSubtreeStream stream_method_param2=new RewriteRuleSubtreeStream(adaptor,"rule method_param2");
        try {
            // Objcm.g:963:2: ( method_param2 -> ^( PARAM method_param2 ) )
            // Objcm.g:963:4: method_param2
            {
            pushFollow(FOLLOW_method_param2_in_method_param_wrapper25164);
            method_param2611=method_param2();

            state._fsp--;

            stream_method_param2.add(method_param2611.getTree());

            // AST REWRITE
            // elements: method_param2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 963:18: -> ^( PARAM method_param2 )
            {
                // Objcm.g:963:21: ^( PARAM method_param2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM, "PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_method_param2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_wrapper2"


    public static class method_param2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param2"
    // Objcm.g:965:1: method_param2 : ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )? ;
    public final ObjcmParser.method_param2_return method_param2() throws RecognitionException {
        ObjcmParser.method_param2_return retval = new ObjcmParser.method_param2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX612=null;
        Token ENUM_PREFIX613=null;
        Token STRUCT_PREFIX614=null;
        Token string_literal615=null;
        ObjcmParser.field_type_return field_type616 =null;

        ObjcmParser.name_return name617 =null;

        ObjcmParser.indexed_return indexed618 =null;


        Object CONST_PREFIX612_tree=null;
        Object ENUM_PREFIX613_tree=null;
        Object STRUCT_PREFIX614_tree=null;
        Object string_literal615_tree=null;

        try {
            // Objcm.g:966:2: ( ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )? )
            // Objcm.g:966:4: ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:966:4: ( CONST_PREFIX )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==CONST_PREFIX) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // Objcm.g:966:4: CONST_PREFIX
                    {
                    CONST_PREFIX612=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_param25182); 
                    CONST_PREFIX612_tree = 
                    (Object)adaptor.create(CONST_PREFIX612)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX612_tree);


                    }
                    break;

            }


            // Objcm.g:966:18: ( ENUM_PREFIX )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==ENUM_PREFIX) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // Objcm.g:966:18: ENUM_PREFIX
                    {
                    ENUM_PREFIX613=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_method_param25185); 
                    ENUM_PREFIX613_tree = 
                    (Object)adaptor.create(ENUM_PREFIX613)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX613_tree);


                    }
                    break;

            }


            // Objcm.g:966:31: ( STRUCT_PREFIX )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==STRUCT_PREFIX) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // Objcm.g:966:31: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX614=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_param25188); 
                    STRUCT_PREFIX614_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX614)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX614_tree);


                    }
                    break;

            }


            // Objcm.g:966:46: ( 'unsigned' )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==196) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // Objcm.g:966:46: 'unsigned'
                    {
                    string_literal615=(Token)match(input,196,FOLLOW_196_in_method_param25191); 
                    string_literal615_tree = 
                    (Object)adaptor.create(string_literal615)
                    ;
                    adaptor.addChild(root_0, string_literal615_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_method_param25194);
            field_type616=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type616.getTree());

            // Objcm.g:966:69: ( name )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==ID||LA168_0==189) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // Objcm.g:966:69: name
                    {
                    pushFollow(FOLLOW_name_in_method_param25196);
                    name617=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name617.getTree());

                    }
                    break;

            }


            // Objcm.g:966:75: ( indexed )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==L_KBR) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // Objcm.g:966:75: indexed
                    {
                    pushFollow(FOLLOW_indexed_in_method_param25199);
                    indexed618=indexed();

                    state._fsp--;

                    adaptor.addChild(root_0, indexed618.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param2"


    public static class indexed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexed"
    // Objcm.g:968:1: indexed : L_KBR ( NUMBER )? R_KBR ;
    public final ObjcmParser.indexed_return indexed() throws RecognitionException {
        ObjcmParser.indexed_return retval = new ObjcmParser.indexed_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR619=null;
        Token NUMBER620=null;
        Token R_KBR621=null;

        Object L_KBR619_tree=null;
        Object NUMBER620_tree=null;
        Object R_KBR621_tree=null;

        try {
            // Objcm.g:968:9: ( L_KBR ( NUMBER )? R_KBR )
            // Objcm.g:968:11: L_KBR ( NUMBER )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR619=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_indexed5209); 
            L_KBR619_tree = 
            (Object)adaptor.create(L_KBR619)
            ;
            adaptor.addChild(root_0, L_KBR619_tree);


            // Objcm.g:968:17: ( NUMBER )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==NUMBER) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // Objcm.g:968:17: NUMBER
                    {
                    NUMBER620=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_indexed5211); 
                    NUMBER620_tree = 
                    (Object)adaptor.create(NUMBER620)
                    ;
                    adaptor.addChild(root_0, NUMBER620_tree);


                    }
                    break;

            }


            R_KBR621=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_indexed5214); 
            R_KBR621_tree = 
            (Object)adaptor.create(R_KBR621)
            ;
            adaptor.addChild(root_0, R_KBR621_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexed"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // Objcm.g:970:1: method_params : ( method_param )+ -> ( ^( PARAM method_param ) )+ ;
    public final ObjcmParser.method_params_return method_params() throws RecognitionException {
        ObjcmParser.method_params_return retval = new ObjcmParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param_return method_param622 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // Objcm.g:971:2: ( ( method_param )+ -> ( ^( PARAM method_param ) )+ )
            // Objcm.g:971:4: ( method_param )+
            {
            // Objcm.g:971:4: ( method_param )+
            int cnt171=0;
            loop171:
            do {
                int alt171=2;
                int LA171_0 = input.LA(1);

                if ( (LA171_0==COLON||LA171_0==ID||LA171_0==L_BR||LA171_0==189) ) {
                    alt171=1;
                }


                switch (alt171) {
            	case 1 :
            	    // Objcm.g:971:4: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params5224);
            	    method_param622=method_param();

            	    state._fsp--;

            	    stream_method_param.add(method_param622.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt171 >= 1 ) break loop171;
                        EarlyExitException eee =
                            new EarlyExitException(171, input);
                        throw eee;
                }
                cnt171++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 971:18: -> ( ^( PARAM method_param ) )+
            {
                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    // Objcm.g:971:21: ^( PARAM method_param )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(PARAM, "PARAM")
                    , root_1);

                    adaptor.addChild(root_1, stream_method_param.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_method_param.reset();

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // Objcm.g:973:1: method_param : ( ( prefix )? | COLON ) ( method_type )? name ;
    public final ObjcmParser.method_param_return method_param() throws RecognitionException {
        ObjcmParser.method_param_return retval = new ObjcmParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON624=null;
        ObjcmParser.prefix_return prefix623 =null;

        ObjcmParser.method_type_return method_type625 =null;

        ObjcmParser.name_return name626 =null;


        Object COLON624_tree=null;

        try {
            // Objcm.g:974:2: ( ( ( prefix )? | COLON ) ( method_type )? name )
            // Objcm.g:974:4: ( ( prefix )? | COLON ) ( method_type )? name
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:974:4: ( ( prefix )? | COLON )
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==ID||LA173_0==L_BR||LA173_0==189) ) {
                alt173=1;
            }
            else if ( (LA173_0==COLON) ) {
                alt173=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;

            }
            switch (alt173) {
                case 1 :
                    // Objcm.g:974:5: ( prefix )?
                    {
                    // Objcm.g:974:5: ( prefix )?
                    int alt172=2;
                    int LA172_0 = input.LA(1);

                    if ( (LA172_0==ID) ) {
                        int LA172_1 = input.LA(2);

                        if ( (LA172_1==COLON) ) {
                            alt172=1;
                        }
                    }
                    switch (alt172) {
                        case 1 :
                            // Objcm.g:974:5: prefix
                            {
                            pushFollow(FOLLOW_prefix_in_method_param5246);
                            prefix623=prefix();

                            state._fsp--;

                            adaptor.addChild(root_0, prefix623.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:974:15: COLON
                    {
                    COLON624=(Token)match(input,COLON,FOLLOW_COLON_in_method_param5251); 
                    COLON624_tree = 
                    (Object)adaptor.create(COLON624)
                    ;
                    adaptor.addChild(root_0, COLON624_tree);


                    }
                    break;

            }


            // Objcm.g:974:22: ( method_type )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==L_BR) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // Objcm.g:974:22: method_type
                    {
                    pushFollow(FOLLOW_method_type_in_method_param5254);
                    method_type625=method_type();

                    state._fsp--;

                    adaptor.addChild(root_0, method_type625.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_name_in_method_param5257);
            name626=name();

            state._fsp--;

            adaptor.addChild(root_0, name626.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // Objcm.g:977:1: prefix : ID COLON -> ^( PREFIX ID COLON ) ;
    public final ObjcmParser.prefix_return prefix() throws RecognitionException {
        ObjcmParser.prefix_return retval = new ObjcmParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID627=null;
        Token COLON628=null;

        Object ID627_tree=null;
        Object COLON628_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:977:8: ( ID COLON -> ^( PREFIX ID COLON ) )
            // Objcm.g:977:10: ID COLON
            {
            ID627=(Token)match(input,ID,FOLLOW_ID_in_prefix5269);  
            stream_ID.add(ID627);


            COLON628=(Token)match(input,COLON,FOLLOW_COLON_in_prefix5271);  
            stream_COLON.add(COLON628);


            // AST REWRITE
            // elements: COLON, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 977:19: -> ^( PREFIX ID COLON )
            {
                // Objcm.g:977:22: ^( PREFIX ID COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PREFIX, "PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class incomplete_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "incomplete_prefix"
    // Objcm.g:979:1: incomplete_prefix : COLON -> ^( INCOMPLETE_PREFIX COLON ) ;
    public final ObjcmParser.incomplete_prefix_return incomplete_prefix() throws RecognitionException {
        ObjcmParser.incomplete_prefix_return retval = new ObjcmParser.incomplete_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON629=null;

        Object COLON629_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");

        try {
            // Objcm.g:980:2: ( COLON -> ^( INCOMPLETE_PREFIX COLON ) )
            // Objcm.g:980:4: COLON
            {
            COLON629=(Token)match(input,COLON,FOLLOW_COLON_in_incomplete_prefix5290);  
            stream_COLON.add(COLON629);


            // AST REWRITE
            // elements: COLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 980:10: -> ^( INCOMPLETE_PREFIX COLON )
            {
                // Objcm.g:980:13: ^( INCOMPLETE_PREFIX COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INCOMPLETE_PREFIX, "INCOMPLETE_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "incomplete_prefix"


    public static class typedef_struct_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_wrapper"
    // Objcm.g:987:1: typedef_struct_declaration_wrapper : typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) ;
    public final ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration630 =null;


        RewriteRuleSubtreeStream stream_typedef_struct_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_struct_declaration");
        try {
            // Objcm.g:988:2: ( typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) )
            // Objcm.g:988:4: typedef_struct_declaration
            {
            pushFollow(FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5312);
            typedef_struct_declaration630=typedef_struct_declaration();

            state._fsp--;

            stream_typedef_struct_declaration.add(typedef_struct_declaration630.getTree());

            // AST REWRITE
            // elements: typedef_struct_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 988:31: -> ^( TYPEDEF_STRUCT typedef_struct_declaration )
            {
                // Objcm.g:988:34: ^( TYPEDEF_STRUCT typedef_struct_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_STRUCT, "TYPEDEF_STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_struct_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_wrapper"


    public static class typedef_struct_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration"
    // Objcm.g:991:1: typedef_struct_declaration : STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? ;
    public final ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_return retval = new ObjcmParser.typedef_struct_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX631=null;
        Token L_FBR633=null;
        Token R_FBR635=null;
        Token SEMICOLON637=null;
        ObjcmParser.name_return name632 =null;

        ObjcmParser.typedef_struct_body_return typedef_struct_body634 =null;

        ObjcmParser.name_return name636 =null;


        Object STRUCT_PREFIX631_tree=null;
        Object L_FBR633_tree=null;
        Object R_FBR635_tree=null;
        Object SEMICOLON637_tree=null;

        try {
            // Objcm.g:992:2: ( STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? )
            // Objcm.g:992:4: STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX631=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5332); 
            STRUCT_PREFIX631_tree = 
            (Object)adaptor.create(STRUCT_PREFIX631)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX631_tree);


            // Objcm.g:992:18: ( name )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==ID||LA175_0==189) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // Objcm.g:992:18: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5334);
                    name632=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name632.getTree());

                    }
                    break;

            }


            L_FBR633=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_struct_declaration5338); 
            L_FBR633_tree = 
            (Object)adaptor.create(L_FBR633)
            ;
            adaptor.addChild(root_0, L_FBR633_tree);


            // Objcm.g:994:3: ( typedef_struct_body )+
            int cnt176=0;
            loop176:
            do {
                int alt176=2;
                int LA176_0 = input.LA(1);

                if ( (LA176_0==ID||LA176_0==VOID) ) {
                    alt176=1;
                }


                switch (alt176) {
            	case 1 :
            	    // Objcm.g:994:3: typedef_struct_body
            	    {
            	    pushFollow(FOLLOW_typedef_struct_body_in_typedef_struct_declaration5343);
            	    typedef_struct_body634=typedef_struct_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_struct_body634.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt176 >= 1 ) break loop176;
                        EarlyExitException eee =
                            new EarlyExitException(176, input);
                        throw eee;
                }
                cnt176++;
            } while (true);


            R_FBR635=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_struct_declaration5347); 
            R_FBR635_tree = 
            (Object)adaptor.create(R_FBR635)
            ;
            adaptor.addChild(root_0, R_FBR635_tree);


            // Objcm.g:995:9: ( name )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==ID) ) {
                int LA177_1 = input.LA(2);

                if ( (LA177_1==EOF||LA177_1==CONST_PREFIX||LA177_1==L_MINUS||LA177_1==L_PLUS||LA177_1==SEMICOLON||LA177_1==STATIC_PREFIX||LA177_1==STRUCT_PREFIX||LA177_1==VOID||LA177_1==166||(LA177_1 >= 168 && LA177_1 <= 169)||LA177_1==174||LA177_1==185||LA177_1==194) ) {
                    alt177=1;
                }
                else if ( (LA177_1==ID) ) {
                    int LA177_21 = input.LA(3);

                    if ( (LA177_21==ASTERISK||LA177_21==ID||LA177_21==L_KBR||LA177_21==L_LESS||LA177_21==189) ) {
                        alt177=1;
                    }
                }
            }
            else if ( (LA177_0==189) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // Objcm.g:995:9: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5350);
                    name636=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name636.getTree());

                    }
                    break;

            }


            // Objcm.g:995:15: ( SEMICOLON )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==SEMICOLON) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // Objcm.g:995:15: SEMICOLON
                    {
                    SEMICOLON637=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_struct_declaration5353); 
                    SEMICOLON637_tree = 
                    (Object)adaptor.create(SEMICOLON637)
                    ;
                    adaptor.addChild(root_0, SEMICOLON637_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration"


    public static class typedef_struct_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_body"
    // Objcm.g:998:1: typedef_struct_body : typedef_struct_declaration_element_wrapper ;
    public final ObjcmParser.typedef_struct_body_return typedef_struct_body() throws RecognitionException {
        ObjcmParser.typedef_struct_body_return retval = new ObjcmParser.typedef_struct_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper638 =null;



        try {
            // Objcm.g:999:2: ( typedef_struct_declaration_element_wrapper )
            // Objcm.g:999:4: typedef_struct_declaration_element_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5366);
            typedef_struct_declaration_element_wrapper638=typedef_struct_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_struct_declaration_element_wrapper638.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_body"


    public static class typedef_struct_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_element_wrapper"
    // Objcm.g:1002:1: typedef_struct_declaration_element_wrapper : struct_field -> ^( STRUCT_FIELD struct_field ) ;
    public final ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_element_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_field_return struct_field639 =null;


        RewriteRuleSubtreeStream stream_struct_field=new RewriteRuleSubtreeStream(adaptor,"rule struct_field");
        try {
            // Objcm.g:1003:2: ( struct_field -> ^( STRUCT_FIELD struct_field ) )
            // Objcm.g:1003:4: struct_field
            {
            pushFollow(FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5378);
            struct_field639=struct_field();

            state._fsp--;

            stream_struct_field.add(struct_field639.getTree());

            // AST REWRITE
            // elements: struct_field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1003:17: -> ^( STRUCT_FIELD struct_field )
            {
                // Objcm.g:1003:20: ^( STRUCT_FIELD struct_field )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT_FIELD, "STRUCT_FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_struct_field.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_element_wrapper"


    public static class struct_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_field"
    // Objcm.g:1005:1: struct_field : field_type name ( COMMA name )* SEMICOLON ;
    public final ObjcmParser.struct_field_return struct_field() throws RecognitionException {
        ObjcmParser.struct_field_return retval = new ObjcmParser.struct_field_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA642=null;
        Token SEMICOLON644=null;
        ObjcmParser.field_type_return field_type640 =null;

        ObjcmParser.name_return name641 =null;

        ObjcmParser.name_return name643 =null;


        Object COMMA642_tree=null;
        Object SEMICOLON644_tree=null;

        try {
            // Objcm.g:1006:2: ( field_type name ( COMMA name )* SEMICOLON )
            // Objcm.g:1006:4: field_type name ( COMMA name )* SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_struct_field5396);
            field_type640=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type640.getTree());

            pushFollow(FOLLOW_name_in_struct_field5398);
            name641=name();

            state._fsp--;

            adaptor.addChild(root_0, name641.getTree());

            // Objcm.g:1006:21: ( COMMA name )*
            loop179:
            do {
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==COMMA) ) {
                    alt179=1;
                }


                switch (alt179) {
            	case 1 :
            	    // Objcm.g:1006:22: COMMA name
            	    {
            	    COMMA642=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_field5402); 
            	    COMMA642_tree = 
            	    (Object)adaptor.create(COMMA642)
            	    ;
            	    adaptor.addChild(root_0, COMMA642_tree);


            	    pushFollow(FOLLOW_name_in_struct_field5405);
            	    name643=name();

            	    state._fsp--;

            	    adaptor.addChild(root_0, name643.getTree());

            	    }
            	    break;

            	default :
            	    break loop179;
                }
            } while (true);


            SEMICOLON644=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_field5409); 
            SEMICOLON644_tree = 
            (Object)adaptor.create(SEMICOLON644)
            ;
            adaptor.addChild(root_0, SEMICOLON644_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_field"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // Objcm.g:1013:1: typedef_declaration_wrapper : typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_wrapper_return retval = new ObjcmParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration645 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // Objcm.g:1014:2: ( typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // Objcm.g:1014:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5425);
            typedef_declaration645=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration645.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1014:24: -> ^( TYPEDEF typedef_declaration )
            {
                // Objcm.g:1014:27: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class enum_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_declaration"
    // Objcm.g:1017:1: enum_declaration : typedef_declaration -> ^( ENUM typedef_declaration ) ;
    public final ObjcmParser.enum_declaration_return enum_declaration() throws RecognitionException {
        ObjcmParser.enum_declaration_return retval = new ObjcmParser.enum_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration646 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // Objcm.g:1018:2: ( typedef_declaration -> ^( ENUM typedef_declaration ) )
            // Objcm.g:1018:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_enum_declaration5445);
            typedef_declaration646=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration646.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1018:24: -> ^( ENUM typedef_declaration )
            {
                // Objcm.g:1018:27: ^( ENUM typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_declaration"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // Objcm.g:1020:1: typedef_declaration : ENUM_PREFIX L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON ;
    public final ObjcmParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcmParser.typedef_declaration_return retval = new ObjcmParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX647=null;
        Token L_FBR648=null;
        Token COMMA650=null;
        Token R_FBR652=null;
        Token SEMICOLON654=null;
        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper649 =null;

        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper651 =null;

        ObjcmParser.name_return name653 =null;


        Object ENUM_PREFIX647_tree=null;
        Object L_FBR648_tree=null;
        Object COMMA650_tree=null;
        Object R_FBR652_tree=null;
        Object SEMICOLON654_tree=null;

        try {
            // Objcm.g:1021:2: ( ENUM_PREFIX L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON )
            // Objcm.g:1021:5: ENUM_PREFIX L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX647=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_typedef_declaration5465); 
            ENUM_PREFIX647_tree = 
            (Object)adaptor.create(ENUM_PREFIX647)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX647_tree);


            L_FBR648=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_declaration5467); 
            L_FBR648_tree = 
            (Object)adaptor.create(L_FBR648)
            ;
            adaptor.addChild(root_0, L_FBR648_tree);


            pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5470);
            typedef_declaration_element_wrapper649=typedef_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_declaration_element_wrapper649.getTree());

            // Objcm.g:1021:61: ( COMMA typedef_declaration_element_wrapper )*
            loop180:
            do {
                int alt180=2;
                int LA180_0 = input.LA(1);

                if ( (LA180_0==COMMA) ) {
                    alt180=1;
                }


                switch (alt180) {
            	case 1 :
            	    // Objcm.g:1021:62: COMMA typedef_declaration_element_wrapper
            	    {
            	    COMMA650=(Token)match(input,COMMA,FOLLOW_COMMA_in_typedef_declaration5474); 
            	    COMMA650_tree = 
            	    (Object)adaptor.create(COMMA650)
            	    ;
            	    adaptor.addChild(root_0, COMMA650_tree);


            	    pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5477);
            	    typedef_declaration_element_wrapper651=typedef_declaration_element_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_declaration_element_wrapper651.getTree());

            	    }
            	    break;

            	default :
            	    break loop180;
                }
            } while (true);


            R_FBR652=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_declaration5481); 
            R_FBR652_tree = 
            (Object)adaptor.create(R_FBR652)
            ;
            adaptor.addChild(root_0, R_FBR652_tree);


            // Objcm.g:1021:114: ( name )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==ID||LA181_0==189) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // Objcm.g:1021:114: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_declaration5484);
                    name653=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name653.getTree());

                    }
                    break;

            }


            SEMICOLON654=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_declaration5487); 
            SEMICOLON654_tree = 
            (Object)adaptor.create(SEMICOLON654)
            ;
            adaptor.addChild(root_0, SEMICOLON654_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class typedef_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element_wrapper"
    // Objcm.g:1023:1: typedef_declaration_element_wrapper : typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) ;
    public final ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_wrapper_return retval = new ObjcmParser.typedef_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_element_return typedef_declaration_element655 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration_element=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration_element");
        try {
            // Objcm.g:1024:2: ( typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) )
            // Objcm.g:1024:4: typedef_declaration_element
            {
            pushFollow(FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5497);
            typedef_declaration_element655=typedef_declaration_element();

            state._fsp--;

            stream_typedef_declaration_element.add(typedef_declaration_element655.getTree());

            // AST REWRITE
            // elements: typedef_declaration_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1024:32: -> ^( TYPEDEF_ELEMENT typedef_declaration_element )
            {
                // Objcm.g:1024:35: ^( TYPEDEF_ELEMENT typedef_declaration_element )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_ELEMENT, "TYPEDEF_ELEMENT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration_element.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element_wrapper"


    public static class typedef_declaration_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element"
    // Objcm.g:1027:1: typedef_declaration_element : ID ( L_EQ ( ID | NUMBER ) )? ;
    public final ObjcmParser.typedef_declaration_element_return typedef_declaration_element() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_return retval = new ObjcmParser.typedef_declaration_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID656=null;
        Token L_EQ657=null;
        Token set658=null;

        Object ID656_tree=null;
        Object L_EQ657_tree=null;
        Object set658_tree=null;

        try {
            // Objcm.g:1028:2: ( ID ( L_EQ ( ID | NUMBER ) )? )
            // Objcm.g:1028:4: ID ( L_EQ ( ID | NUMBER ) )?
            {
            root_0 = (Object)adaptor.nil();


            ID656=(Token)match(input,ID,FOLLOW_ID_in_typedef_declaration_element5516); 
            ID656_tree = 
            (Object)adaptor.create(ID656)
            ;
            adaptor.addChild(root_0, ID656_tree);


            // Objcm.g:1028:8: ( L_EQ ( ID | NUMBER ) )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==L_EQ) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // Objcm.g:1028:9: L_EQ ( ID | NUMBER )
                    {
                    L_EQ657=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_typedef_declaration_element5520); 
                    L_EQ657_tree = 
                    (Object)adaptor.create(L_EQ657)
                    ;
                    adaptor.addChild(root_0, L_EQ657_tree);


                    set658=(Token)input.LT(1);

                    if ( input.LA(1)==ID||input.LA(1)==NUMBER ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set658)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // Objcm.g:1035:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_wrapper_return retval = new ObjcmParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_return field_declaration659 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // Objcm.g:1036:2: ( field_declaration -> ^( FIELD field_declaration ) )
            // Objcm.g:1036:4: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper5544);
            field_declaration659=field_declaration();

            state._fsp--;

            stream_field_declaration.add(field_declaration659.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1036:22: -> ^( FIELD field_declaration )
            {
                // Objcm.g:1036:25: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // Objcm.g:1038:1: field_declaration : field_modifier_wrapper field_type name field_declaration_end ;
    public final ObjcmParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcmParser.field_declaration_return retval = new ObjcmParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper660 =null;

        ObjcmParser.field_type_return field_type661 =null;

        ObjcmParser.name_return name662 =null;

        ObjcmParser.field_declaration_end_return field_declaration_end663 =null;



        try {
            // Objcm.g:1039:2: ( field_modifier_wrapper field_type name field_declaration_end )
            // Objcm.g:1039:4: field_modifier_wrapper field_type name field_declaration_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_modifier_wrapper_in_field_declaration5561);
            field_modifier_wrapper660=field_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, field_modifier_wrapper660.getTree());

            pushFollow(FOLLOW_field_type_in_field_declaration5564);
            field_type661=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type661.getTree());

            pushFollow(FOLLOW_name_in_field_declaration5566);
            name662=name();

            state._fsp--;

            adaptor.addChild(root_0, name662.getTree());

            pushFollow(FOLLOW_field_declaration_end_in_field_declaration5568);
            field_declaration_end663=field_declaration_end();

            state._fsp--;

            adaptor.addChild(root_0, field_declaration_end663.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end"
    // Objcm.g:1041:1: field_declaration_end : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_declaration_end_return field_declaration_end() throws RecognitionException {
        ObjcmParser.field_declaration_end_return retval = new ObjcmParser.field_declaration_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON665=null;
        ObjcmParser.value_set_return value_set664 =null;


        Object SEMICOLON665_tree=null;

        try {
            // Objcm.g:1042:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:1042:5: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1042:5: ( value_set )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==L_EQ) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // Objcm.g:1042:5: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_declaration_end5579);
                    value_set664=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set664.getTree());

                    }
                    break;

            }


            SEMICOLON665=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration_end5582); 
            SEMICOLON665_tree = 
            (Object)adaptor.create(SEMICOLON665)
            ;
            adaptor.addChild(root_0, SEMICOLON665_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end"


    public static class type_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start_wrapper"
    // Objcm.g:1044:1: type_start_wrapper : type_start -> ^( M_TYPE_START type_start ) ;
    public final ObjcmParser.type_start_wrapper_return type_start_wrapper() throws RecognitionException {
        ObjcmParser.type_start_wrapper_return retval = new ObjcmParser.type_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_start_return type_start666 =null;


        RewriteRuleSubtreeStream stream_type_start=new RewriteRuleSubtreeStream(adaptor,"rule type_start");
        try {
            // Objcm.g:1045:2: ( type_start -> ^( M_TYPE_START type_start ) )
            // Objcm.g:1045:4: type_start
            {
            pushFollow(FOLLOW_type_start_in_type_start_wrapper5592);
            type_start666=type_start();

            state._fsp--;

            stream_type_start.add(type_start666.getTree());

            // AST REWRITE
            // elements: type_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1045:15: -> ^( M_TYPE_START type_start )
            {
                // Objcm.g:1045:18: ^( M_TYPE_START type_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(M_TYPE_START, "M_TYPE_START")
                , root_1);

                adaptor.addChild(root_1, stream_type_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start_wrapper"


    public static class type_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start"
    // Objcm.g:1047:1: type_start : ( CONST_PREFIX )? field_type name type_end ;
    public final ObjcmParser.type_start_return type_start() throws RecognitionException {
        ObjcmParser.type_start_return retval = new ObjcmParser.type_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX667=null;
        ObjcmParser.field_type_return field_type668 =null;

        ObjcmParser.name_return name669 =null;

        ObjcmParser.type_end_return type_end670 =null;


        Object CONST_PREFIX667_tree=null;

        try {
            // Objcm.g:1048:2: ( ( CONST_PREFIX )? field_type name type_end )
            // Objcm.g:1048:4: ( CONST_PREFIX )? field_type name type_end
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1048:4: ( CONST_PREFIX )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==CONST_PREFIX) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // Objcm.g:1048:4: CONST_PREFIX
                    {
                    CONST_PREFIX667=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_start5609); 
                    CONST_PREFIX667_tree = 
                    (Object)adaptor.create(CONST_PREFIX667)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX667_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_type_start5612);
            field_type668=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type668.getTree());

            pushFollow(FOLLOW_name_in_type_start5614);
            name669=name();

            state._fsp--;

            adaptor.addChild(root_0, name669.getTree());

            pushFollow(FOLLOW_type_end_in_type_start5616);
            type_end670=type_end();

            state._fsp--;

            adaptor.addChild(root_0, type_end670.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start"


    public static class type_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_end"
    // Objcm.g:1050:1: type_end : ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) );
    public final ObjcmParser.type_end_return type_end() throws RecognitionException {
        ObjcmParser.type_end_return retval = new ObjcmParser.type_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration4_return field_declaration4671 =null;

        ObjcmParser.method_declaration4_return method_declaration4672 =null;


        RewriteRuleSubtreeStream stream_field_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration4");
        RewriteRuleSubtreeStream stream_method_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration4");
        try {
            // Objcm.g:1050:9: ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) )
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==L_EQ||LA185_0==SEMICOLON) ) {
                alt185=1;
            }
            else if ( (LA185_0==L_BR) ) {
                alt185=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;

            }
            switch (alt185) {
                case 1 :
                    // Objcm.g:1050:11: field_declaration4
                    {
                    pushFollow(FOLLOW_field_declaration4_in_type_end5624);
                    field_declaration4671=field_declaration4();

                    state._fsp--;

                    stream_field_declaration4.add(field_declaration4671.getTree());

                    // AST REWRITE
                    // elements: field_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1050:30: -> ^( FIELD field_declaration4 )
                    {
                        // Objcm.g:1050:33: ^( FIELD field_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD, "FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_field_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:1051:4: method_declaration4
                    {
                    pushFollow(FOLLOW_method_declaration4_in_type_end5637);
                    method_declaration4672=method_declaration4();

                    state._fsp--;

                    stream_method_declaration4.add(method_declaration4672.getTree());

                    // AST REWRITE
                    // elements: method_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1051:24: -> ^( STATIC_METHOD method_declaration4 )
                    {
                        // Objcm.g:1051:27: ^( STATIC_METHOD method_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_end"


    public static class field_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration4"
    // Objcm.g:1054:1: field_declaration4 : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_declaration4_return field_declaration4() throws RecognitionException {
        ObjcmParser.field_declaration4_return retval = new ObjcmParser.field_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON674=null;
        ObjcmParser.value_set_return value_set673 =null;


        Object SEMICOLON674_tree=null;

        try {
            // Objcm.g:1055:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:1055:5: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1055:5: ( value_set )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==L_EQ) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // Objcm.g:1055:5: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_declaration45659);
                    value_set673=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set673.getTree());

                    }
                    break;

            }


            SEMICOLON674=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration45662); 
            SEMICOLON674_tree = 
            (Object)adaptor.create(SEMICOLON674)
            ;
            adaptor.addChild(root_0, SEMICOLON674_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration4"


    public static class method_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration4"
    // Objcm.g:1058:1: method_declaration4 : method_params2 block_wrapper ;
    public final ObjcmParser.method_declaration4_return method_declaration4() throws RecognitionException {
        ObjcmParser.method_declaration4_return retval = new ObjcmParser.method_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2675 =null;

        ObjcmParser.block_wrapper_return block_wrapper676 =null;



        try {
            // Objcm.g:1059:2: ( method_params2 block_wrapper )
            // Objcm.g:1059:5: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_declaration45675);
            method_params2675=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2675.getTree());

            pushFollow(FOLLOW_block_wrapper_in_method_declaration45680);
            block_wrapper676=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper676.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration4"


    public static class field_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier_wrapper"
    // Objcm.g:1063:1: field_modifier_wrapper : field_modifier -> ^( MODIFIER field_modifier ) ;
    public final ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper() throws RecognitionException {
        ObjcmParser.field_modifier_wrapper_return retval = new ObjcmParser.field_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_return field_modifier677 =null;


        RewriteRuleSubtreeStream stream_field_modifier=new RewriteRuleSubtreeStream(adaptor,"rule field_modifier");
        try {
            // Objcm.g:1064:2: ( field_modifier -> ^( MODIFIER field_modifier ) )
            // Objcm.g:1064:4: field_modifier
            {
            pushFollow(FOLLOW_field_modifier_in_field_modifier_wrapper5692);
            field_modifier677=field_modifier();

            state._fsp--;

            stream_field_modifier.add(field_modifier677.getTree());

            // AST REWRITE
            // elements: field_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1064:19: -> ^( MODIFIER field_modifier )
            {
                // Objcm.g:1064:22: ^( MODIFIER field_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_field_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier_wrapper"


    public static class field_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier"
    // Objcm.g:1066:1: field_modifier : 'extern' ;
    public final ObjcmParser.field_modifier_return field_modifier() throws RecognitionException {
        ObjcmParser.field_modifier_return retval = new ObjcmParser.field_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal678=null;

        Object string_literal678_tree=null;

        try {
            // Objcm.g:1067:2: ( 'extern' )
            // Objcm.g:1067:4: 'extern'
            {
            root_0 = (Object)adaptor.nil();


            string_literal678=(Token)match(input,185,FOLLOW_185_in_field_modifier5710); 
            string_literal678_tree = 
            (Object)adaptor.create(string_literal678)
            ;
            adaptor.addChild(root_0, string_literal678_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier"


    public static class field_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type"
    // Objcm.g:1070:1: field_type : field_type_internal -> ^( TYPE field_type_internal ) ;
    public final ObjcmParser.field_type_return field_type() throws RecognitionException {
        ObjcmParser.field_type_return retval = new ObjcmParser.field_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_internal_return field_type_internal679 =null;


        RewriteRuleSubtreeStream stream_field_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_type_internal");
        try {
            // Objcm.g:1071:2: ( field_type_internal -> ^( TYPE field_type_internal ) )
            // Objcm.g:1071:5: field_type_internal
            {
            pushFollow(FOLLOW_field_type_internal_in_field_type5722);
            field_type_internal679=field_type_internal();

            state._fsp--;

            stream_field_type_internal.add(field_type_internal679.getTree());

            // AST REWRITE
            // elements: field_type_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1071:25: -> ^( TYPE field_type_internal )
            {
                // Objcm.g:1071:28: ^( TYPE field_type_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE, "TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type"


    public static class field_type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_internal"
    // Objcm.g:1073:1: field_type_internal : type_internal ( generic )? ( ASTERISK )* ;
    public final ObjcmParser.field_type_internal_return field_type_internal() throws RecognitionException {
        ObjcmParser.field_type_internal_return retval = new ObjcmParser.field_type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK682=null;
        ObjcmParser.type_internal_return type_internal680 =null;

        ObjcmParser.generic_return generic681 =null;


        Object ASTERISK682_tree=null;

        try {
            // Objcm.g:1074:2: ( type_internal ( generic )? ( ASTERISK )* )
            // Objcm.g:1074:4: type_internal ( generic )? ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_field_type_internal5741);
            type_internal680=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal680.getTree());

            // Objcm.g:1074:18: ( generic )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==L_LESS) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // Objcm.g:1074:18: generic
                    {
                    pushFollow(FOLLOW_generic_in_field_type_internal5743);
                    generic681=generic();

                    state._fsp--;

                    adaptor.addChild(root_0, generic681.getTree());

                    }
                    break;

            }


            // Objcm.g:1074:27: ( ASTERISK )*
            loop188:
            do {
                int alt188=2;
                int LA188_0 = input.LA(1);

                if ( (LA188_0==ASTERISK) ) {
                    alt188=1;
                }


                switch (alt188) {
            	case 1 :
            	    // Objcm.g:1074:27: ASTERISK
            	    {
            	    ASTERISK682=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_field_type_internal5746); 
            	    ASTERISK682_tree = 
            	    (Object)adaptor.create(ASTERISK682)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK682_tree);


            	    }
            	    break;

            	default :
            	    break loop188;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_internal"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // Objcm.g:1080:1: name : name_internal -> ^( NAME name_internal ) ;
    public final ObjcmParser.name_return name() throws RecognitionException {
        ObjcmParser.name_return retval = new ObjcmParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal683 =null;


        RewriteRuleSubtreeStream stream_name_internal=new RewriteRuleSubtreeStream(adaptor,"rule name_internal");
        try {
            // Objcm.g:1081:2: ( name_internal -> ^( NAME name_internal ) )
            // Objcm.g:1081:4: name_internal
            {
            pushFollow(FOLLOW_name_internal_in_name5760);
            name_internal683=name_internal();

            state._fsp--;

            stream_name_internal.add(name_internal683.getTree());

            // AST REWRITE
            // elements: name_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1081:18: -> ^( NAME name_internal )
            {
                // Objcm.g:1081:21: ^( NAME name_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, stream_name_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_internal"
    // Objcm.g:1084:1: name_internal : ( ID | 'in' );
    public final ObjcmParser.name_internal_return name_internal() throws RecognitionException {
        ObjcmParser.name_internal_return retval = new ObjcmParser.name_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set684=null;

        Object set684_tree=null;

        try {
            // Objcm.g:1085:2: ( ID | 'in' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set684=(Token)input.LT(1);

            if ( input.LA(1)==ID||input.LA(1)==189 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set684)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_internal"


    public static class value_set_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value_set"
    // Objcm.g:1089:1: value_set : L_EQ value -> ^( VALUE value ) ;
    public final ObjcmParser.value_set_return value_set() throws RecognitionException {
        ObjcmParser.value_set_return retval = new ObjcmParser.value_set_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_EQ685=null;
        ObjcmParser.value_return value686 =null;


        Object L_EQ685_tree=null;
        RewriteRuleTokenStream stream_L_EQ=new RewriteRuleTokenStream(adaptor,"token L_EQ");
        RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
        try {
            // Objcm.g:1090:2: ( L_EQ value -> ^( VALUE value ) )
            // Objcm.g:1090:4: L_EQ value
            {
            L_EQ685=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_value_set5800);  
            stream_L_EQ.add(L_EQ685);


            pushFollow(FOLLOW_value_in_value_set5803);
            value686=value();

            state._fsp--;

            stream_value.add(value686.getTree());

            // AST REWRITE
            // elements: value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1090:16: -> ^( VALUE value )
            {
                // Objcm.g:1090:19: ^( VALUE value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VALUE, "VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "value_set"


    public static class value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value"
    // Objcm.g:1092:1: value : ( ID | string_value | null_stmt | array | NUMBER | struct_init2 );
    public final ObjcmParser.value_return value() throws RecognitionException {
        ObjcmParser.value_return retval = new ObjcmParser.value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID687=null;
        Token NUMBER691=null;
        ObjcmParser.string_value_return string_value688 =null;

        ObjcmParser.null_stmt_return null_stmt689 =null;

        ObjcmParser.array_return array690 =null;

        ObjcmParser.struct_init2_return struct_init2692 =null;


        Object ID687_tree=null;
        Object NUMBER691_tree=null;

        try {
            // Objcm.g:1092:7: ( ID | string_value | null_stmt | array | NUMBER | struct_init2 )
            int alt189=6;
            alt189 = dfa189.predict(input);
            switch (alt189) {
                case 1 :
                    // Objcm.g:1092:9: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID687=(Token)match(input,ID,FOLLOW_ID_in_value5819); 
                    ID687_tree = 
                    (Object)adaptor.create(ID687)
                    ;
                    adaptor.addChild(root_0, ID687_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:1092:14: string_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_string_value_in_value5823);
                    string_value688=string_value();

                    state._fsp--;

                    adaptor.addChild(root_0, string_value688.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:1092:29: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_value5827);
                    null_stmt689=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt689.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:1092:41: array
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_in_value5831);
                    array690=array();

                    state._fsp--;

                    adaptor.addChild(root_0, array690.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:1092:49: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER691=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_value5835); 
                    NUMBER691_tree = 
                    (Object)adaptor.create(NUMBER691)
                    ;
                    adaptor.addChild(root_0, NUMBER691_tree);


                    }
                    break;
                case 6 :
                    // Objcm.g:1092:58: struct_init2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init2_in_value5839);
                    struct_init2692=struct_init2();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init2692.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "value"


    public static class string_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_value"
    // Objcm.g:1094:1: string_value : STRING_LITERAL ;
    public final ObjcmParser.string_value_return string_value() throws RecognitionException {
        ObjcmParser.string_value_return retval = new ObjcmParser.string_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL693=null;

        Object STRING_LITERAL693_tree=null;

        try {
            // Objcm.g:1095:2: ( STRING_LITERAL )
            // Objcm.g:1095:4: STRING_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL693=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string_value5849); 
            STRING_LITERAL693_tree = 
            (Object)adaptor.create(STRING_LITERAL693)
            ;
            adaptor.addChild(root_0, STRING_LITERAL693_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_value"


    public static class null_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_stmt"
    // Objcm.g:1097:1: null_stmt : ( 'nil' | 'Nil' );
    public final ObjcmParser.null_stmt_return null_stmt() throws RecognitionException {
        ObjcmParser.null_stmt_return retval = new ObjcmParser.null_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set694=null;

        Object set694_tree=null;

        try {
            // Objcm.g:1097:11: ( 'nil' | 'Nil' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set694=(Token)input.LT(1);

            if ( input.LA(1)==177||input.LA(1)==191 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set694)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_stmt"


    public static class array_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array"
    // Objcm.g:1099:1: array : L_FBR value ( COMMA value )* R_FBR ;
    public final ObjcmParser.array_return array() throws RecognitionException {
        ObjcmParser.array_return retval = new ObjcmParser.array_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR695=null;
        Token COMMA697=null;
        Token R_FBR699=null;
        ObjcmParser.value_return value696 =null;

        ObjcmParser.value_return value698 =null;


        Object L_FBR695_tree=null;
        Object COMMA697_tree=null;
        Object R_FBR699_tree=null;

        try {
            // Objcm.g:1099:7: ( L_FBR value ( COMMA value )* R_FBR )
            // Objcm.g:1099:9: L_FBR value ( COMMA value )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR695=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array5870); 
            L_FBR695_tree = 
            (Object)adaptor.create(L_FBR695)
            ;
            adaptor.addChild(root_0, L_FBR695_tree);


            pushFollow(FOLLOW_value_in_array5873);
            value696=value();

            state._fsp--;

            adaptor.addChild(root_0, value696.getTree());

            // Objcm.g:1099:23: ( COMMA value )*
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==COMMA) ) {
                    alt190=1;
                }


                switch (alt190) {
            	case 1 :
            	    // Objcm.g:1099:24: COMMA value
            	    {
            	    COMMA697=(Token)match(input,COMMA,FOLLOW_COMMA_in_array5877); 
            	    COMMA697_tree = 
            	    (Object)adaptor.create(COMMA697)
            	    ;
            	    adaptor.addChild(root_0, COMMA697_tree);


            	    pushFollow(FOLLOW_value_in_array5880);
            	    value698=value();

            	    state._fsp--;

            	    adaptor.addChild(root_0, value698.getTree());

            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);


            R_FBR699=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array5884); 
            R_FBR699_tree = 
            (Object)adaptor.create(R_FBR699)
            ;
            adaptor.addChild(root_0, R_FBR699_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array"

    // Delegated rules


    protected DFA28 dfa28 = new DFA28(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA55 dfa55 = new DFA55(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA189 dfa189 = new DFA189(this);
    static final String DFA28_eotS =
        "\u0117\uffff";
    static final String DFA28_eofS =
        "\u0117\uffff";
    static final String DFA28_minS =
        "\1\6\15\uffff\1\6\30\uffff\1\6\1\uffff\1\6\1\uffff\2\6\2\66\2\uffff"+
        "\1\6\12\uffff\2\6\6\uffff\2\6\2\66\15\uffff\2\6\u00c0\uffff";
    static final String DFA28_maxS =
        "\1\u00c5\15\uffff\1\u00bd\30\uffff\1\u00bd\1\uffff\1\u00bd\1\uffff"+
        "\2\u00c4\2\u00bd\2\uffff\1\u00c4\12\uffff\2\u00c4\6\uffff\2\u00c4"+
        "\2\u00bd\15\uffff\2\u00c4\u00c0\uffff";
    static final String DFA28_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\22\uffff\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\uffff\1\16\1\17\1\20\1\21\1\22\1\23\32\uffff\1\6\30"+
        "\uffff\1\6\1\uffff\25\6\1\uffff\27\6\22\uffff\24\6\11\uffff\1\6"+
        "\11\uffff\1\6\1\uffff\76\6\11\uffff\1\6\11\uffff\1\6\1\uffff";
    static final String DFA28_specialS =
        "\u0117\uffff}>";
    static final String[] DFA28_transitionS = {
            "\1\6\2\uffff\1\37\11\uffff\1\5\6\uffff\1\42\33\uffff\1\6\11"+
            "\uffff\1\6\2\uffff\1\6\5\uffff\1\6\4\uffff\1\6\1\uffff\1\6\4"+
            "\uffff\1\6\5\uffff\1\6\1\uffff\1\6\3\uffff\1\6\16\uffff\1\6"+
            "\16\uffff\1\45\2\uffff\1\37\1\6\2\uffff\1\3\3\uffff\3\6\1\uffff"+
            "\1\41\16\uffff\1\44\7\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\1\2\1\1\1\6\1\uffff\1\43\3\uffff\1\4\1\32\1\uffff\1\35\1\46"+
            "\1\31\1\6\1\uffff\1\6\1\34\1\33\2\uffff\1\16\1\36",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\44\57\uffff\1\47\146\uffff\1\44\37\uffff\1\51",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\61\11\uffff\1\101\1\75\5\uffff\1\55\36\uffff\1\6\11\uffff"+
            "\2\6\1\74\1\53\1\101\2\74\1\6\1\uffff\1\54\1\6\1\74\3\6\1\74"+
            "\3\6\1\74\1\6\1\uffff\1\6\1\74\1\6\1\101\1\74\1\6\1\74\3\6\1"+
            "\74\1\uffff\1\6\1\74\33\uffff\1\101\35\uffff\1\6\4\uffff\1\56"+
            "\32\uffff\1\6",
            "",
            "\1\101\11\uffff\1\132\1\126\5\uffff\1\106\36\uffff\1\101\11"+
            "\uffff\2\101\1\125\1\104\1\101\2\125\1\101\1\uffff\1\105\1\101"+
            "\1\125\3\101\1\125\3\101\1\125\1\101\1\uffff\1\101\1\125\2\101"+
            "\1\125\1\101\1\125\3\101\1\125\1\uffff\1\101\1\125\33\uffff"+
            "\1\132\35\uffff\1\101\4\uffff\1\107\32\uffff\1\101",
            "",
            "\1\135\57\uffff\1\145\11\uffff\1\136\2\uffff\1\134\5\uffff"+
            "\1\146\4\uffff\1\137\1\uffff\1\143\4\uffff\1\140\5\uffff\1\137"+
            "\1\uffff\1\143\3\uffff\1\141\16\uffff\1\147\11\uffff\1\157\10"+
            "\uffff\1\142\6\uffff\1\150\1\151\1\152\20\uffff\1\44\7\uffff"+
            "\1\155\5\uffff\1\156\1\uffff\1\154\3\uffff\1\153\13\uffff\1"+
            "\160\1\uffff\1\153\4\uffff\1\144",
            "\1\164\57\uffff\1\174\11\uffff\1\165\2\uffff\1\163\5\uffff"+
            "\1\175\4\uffff\1\166\1\uffff\1\172\4\uffff\1\167\5\uffff\1\166"+
            "\1\uffff\1\172\3\uffff\1\170\16\uffff\1\176\13\uffff\1\162\6"+
            "\uffff\1\171\6\uffff\1\177\1\u0080\1\u0081\30\uffff\1\u0084"+
            "\5\uffff\1\u0085\1\uffff\1\u0083\3\uffff\1\u0082\13\uffff\1"+
            "\174\1\uffff\1\u0082\4\uffff\1\173",
            "\1\u0086\u0086\uffff\1\u0086",
            "\1\u0087\u0086\uffff\1\u0087",
            "",
            "",
            "\1\132\57\uffff\1\132\11\uffff\1\132\2\uffff\1\u0088\5\uffff"+
            "\1\132\4\uffff\1\132\1\uffff\1\132\4\uffff\1\132\5\uffff\1\132"+
            "\1\uffff\1\132\3\uffff\1\132\16\uffff\1\132\22\uffff\1\132\6"+
            "\uffff\3\132\30\uffff\1\132\5\uffff\1\132\1\uffff\1\132\3\uffff"+
            "\1\132\13\uffff\1\132\1\uffff\1\132\4\uffff\1\132",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u009c\57\uffff\1\u00a4\11\uffff\1\u009d\2\uffff\1\u009b"+
            "\4\uffff\1\u00ae\1\u00a5\4\uffff\1\u009e\1\uffff\1\u00a2\4\uffff"+
            "\1\u009f\5\uffff\1\u009e\1\uffff\1\u00a2\3\uffff\1\u00a0\16"+
            "\uffff\1\u00a6\22\uffff\1\u00a1\6\uffff\1\u00a7\1\u00a8\1\u00a9"+
            "\30\uffff\1\u00ac\5\uffff\1\u00ad\1\uffff\1\u00ab\3\uffff\1"+
            "\u00aa\13\uffff\1\u00a4\1\uffff\1\u00aa\4\uffff\1\u00a3",
            "\1\132\57\uffff\1\u00b8\11\uffff\1\132\2\uffff\1\132\5\uffff"+
            "\1\132\4\uffff\1\132\1\uffff\1\132\4\uffff\1\132\5\uffff\1\132"+
            "\1\uffff\1\132\3\uffff\1\132\16\uffff\1\132\22\uffff\1\132\6"+
            "\uffff\3\132\20\uffff\1\44\7\uffff\1\132\5\uffff\1\132\1\uffff"+
            "\1\132\3\uffff\1\132\13\uffff\1\u00c2\1\uffff\1\132\4\uffff"+
            "\1\132",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c5\57\uffff\1\u00cd\11\uffff\1\u00c6\2\uffff\1\u00c4"+
            "\5\uffff\1\u00ce\4\uffff\1\u00c7\1\uffff\1\u00cb\4\uffff\1\u00c8"+
            "\5\uffff\1\u00c7\1\uffff\1\u00cb\3\uffff\1\u00c9\16\uffff\1"+
            "\u00cf\11\uffff\1\u00d7\10\uffff\1\u00ca\6\uffff\1\u00d0\1\u00d1"+
            "\1\u00d2\30\uffff\1\u00d5\5\uffff\1\u00d6\1\uffff\1\u00d4\3"+
            "\uffff\1\u00d3\13\uffff\1\u00cd\1\uffff\1\u00d3\4\uffff\1\u00cc",
            "\1\u00d9\57\uffff\1\u00e1\11\uffff\1\u00da\2\uffff\1\u00d8"+
            "\5\uffff\1\u00e2\4\uffff\1\u00db\1\uffff\1\u00df\4\uffff\1\u00dc"+
            "\5\uffff\1\u00db\1\uffff\1\u00df\3\uffff\1\u00dd\16\uffff\1"+
            "\u00e3\13\uffff\1\u00eb\6\uffff\1\u00de\6\uffff\1\u00e4\1\u00e5"+
            "\1\u00e6\30\uffff\1\u00e9\5\uffff\1\u00ea\1\uffff\1\u00e8\3"+
            "\uffff\1\u00e7\13\uffff\1\u00e1\1\uffff\1\u00e7\4\uffff\1\u00e0",
            "\1\u00ec\u0086\uffff\1\u00ec",
            "\1\u00ed\u0086\uffff\1\u00ed",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ef\57\uffff\1\u00f7\11\uffff\1\u00f0\2\uffff\1\u00ee"+
            "\4\uffff\1\u0101\1\u00f8\4\uffff\1\u00f1\1\uffff\1\u00f5\4\uffff"+
            "\1\u00f2\5\uffff\1\u00f1\1\uffff\1\u00f5\3\uffff\1\u00f3\16"+
            "\uffff\1\u00f9\22\uffff\1\u00f4\6\uffff\1\u00fa\1\u00fb\1\u00fc"+
            "\30\uffff\1\u00ff\5\uffff\1\u0100\1\uffff\1\u00fe\3\uffff\1"+
            "\u00fd\13\uffff\1\u00f7\1\uffff\1\u00fd\4\uffff\1\u00f6",
            "\1\132\57\uffff\1\u010b\11\uffff\1\132\2\uffff\1\132\5\uffff"+
            "\1\132\4\uffff\1\132\1\uffff\1\132\4\uffff\1\132\5\uffff\1\132"+
            "\1\uffff\1\132\3\uffff\1\132\16\uffff\1\132\22\uffff\1\132\6"+
            "\uffff\3\132\20\uffff\1\44\7\uffff\1\132\5\uffff\1\132\1\uffff"+
            "\1\132\3\uffff\1\132\13\uffff\1\u0115\1\uffff\1\132\4\uffff"+
            "\1\132",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_specialS);
    static final short[][] DFA28_transition;

    static {
        int numStates = DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_transitionS[i]);
        }
    }

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;
        }
        public String getDescription() {
            return "275:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper );";
        }
    }
    static final String DFA48_eotS =
        "\u019a\uffff";
    static final String DFA48_eofS =
        "\u019a\uffff";
    static final String DFA48_minS =
        "\1\66\1\21\4\uffff\1\27\2\6\16\uffff\2\6\16\uffff\2\6\1\66\1\6\20"+
        "\uffff\1\6\10\66\1\6\1\66\5\6\3\103\u014c\uffff";
    static final String DFA48_maxS =
        "\1\u00bd\1\u00c4\4\uffff\3\u00c4\16\uffff\2\u00c4\16\uffff\1\u00c4"+
        "\1\u00a2\1\u00bd\1\174\20\uffff\10\u00c4\1\u00bd\1\u00a2\1\u00bd"+
        "\5\172\3\103\u014c\uffff";
    static final String DFA48_acceptS =
        "\2\uffff\1\2\1\uffff\1\3\1\1\111\uffff\23\1\1\uffff\1\1\10\uffff"+
        "\2\1\1\uffff\1\1\7\uffff\3\1\10\uffff\1\1\12\uffff\4\1\20\uffff"+
        "\4\1\17\uffff\u0093\1\1\uffff\22\1\1\uffff\16\1\1\uffff\16\1\1\uffff"+
        "\16\1\1\uffff\16\1\1\uffff\3\1";
    static final String DFA48_specialS =
        "\u019a\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\2\110\uffff\1\4\35\uffff\1\2\37\uffff\1\1",
            "\1\2\5\uffff\1\2\36\uffff\1\5\13\uffff\1\2\1\10\1\uffff\2\2"+
            "\2\uffff\1\7\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\14\uffff\1"+
            "\5\16\uffff\1\2\12\uffff\3\5\25\uffff\1\2\2\uffff\1\5\5\uffff"+
            "\1\5\1\uffff\1\5\3\uffff\1\5\13\uffff\1\6\1\uffff\1\5\4\uffff"+
            "\1\5",
            "",
            "",
            "",
            "",
            "\1\5\36\uffff\1\2\14\uffff\1\27\5\uffff\1\30\2\uffff\1\5\43"+
            "\uffff\1\2\11\uffff\1\5\17\uffff\3\2\25\uffff\1\5\2\uffff\1"+
            "\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\2\57\uffff\1\50\11\uffff\1\2\2\uffff\1\47\5\uffff\1\51\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\13\uffff\1\2\6\uffff\1\2\6\uffff\1\52"+
            "\2\2\30\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff"+
            "\1\50\1\uffff\1\2\4\uffff\1\2",
            "\1\74\57\uffff\1\104\11\uffff\1\75\2\uffff\1\73\5\uffff\1\105"+
            "\4\uffff\1\76\1\uffff\1\102\4\uffff\1\77\5\uffff\1\76\1\uffff"+
            "\1\102\3\uffff\1\100\16\uffff\1\106\11\uffff\1\2\10\uffff\1"+
            "\101\6\uffff\1\107\1\110\1\111\30\uffff\1\114\5\uffff\1\115"+
            "\1\uffff\1\113\3\uffff\1\112\13\uffff\1\104\1\uffff\1\112\4"+
            "\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\120\57\uffff\1\130\11\uffff\1\121\2\uffff\1\117\5\uffff"+
            "\1\131\4\uffff\1\122\1\uffff\1\126\4\uffff\1\123\5\uffff\1\122"+
            "\1\uffff\1\126\3\uffff\1\124\16\uffff\1\132\11\uffff\1\5\10"+
            "\uffff\1\125\6\uffff\1\133\1\134\1\135\30\uffff\1\140\5\uffff"+
            "\1\141\1\uffff\1\137\3\uffff\1\136\13\uffff\1\130\1\uffff\1"+
            "\136\4\uffff\1\127",
            "\1\5\57\uffff\1\154\11\uffff\1\5\2\uffff\1\143\5\uffff\1\155"+
            "\4\uffff\1\5\1\uffff\1\5\4\uffff\1\5\5\uffff\1\5\1\uffff\1\5"+
            "\3\uffff\1\5\16\uffff\1\5\13\uffff\1\5\6\uffff\1\5\6\uffff\1"+
            "\157\2\5\30\uffff\1\5\5\uffff\1\5\1\uffff\1\5\3\uffff\1\5\13"+
            "\uffff\1\154\1\uffff\1\5\4\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\14\uffff\1\167\42\uffff\1\171\11\uffff\1\2\2\uffff\1\2"+
            "\5\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2"+
            "\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3"+
            "\2\20\uffff\1\u0082\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\13\uffff\1\2\1\uffff\1\2\4\uffff\1\170",
            "\1\2\20\uffff\1\u008f\36\uffff\1\5\11\uffff\3\2\1\u008d\4\2"+
            "\1\uffff\1\u008e\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff\1\2"+
            "\45\uffff\1\u0090",
            "\1\u00a2\14\uffff\1\u00a1\5\uffff\1\u00a3\100\uffff\1\u00a4"+
            "\62\uffff\1\u00a2",
            "\1\2\57\uffff\1\5\11\uffff\3\2\1\uffff\4\2\2\uffff\13\2\1\uffff"+
            "\13\2\1\uffff\2\2\30\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00b8\14\uffff\1\u00b4\42\uffff\1\u00b6\11\uffff\1\u00b9"+
            "\2\uffff\1\u00b7\5\uffff\1\u00c1\4\uffff\1\u00ba\1\uffff\1\u00be"+
            "\4\uffff\1\u00bb\5\uffff\1\u00ba\1\uffff\1\u00be\3\uffff\1\u00bc"+
            "\16\uffff\1\u00c2\22\uffff\1\u00bd\6\uffff\1\u00c3\1\u00c4\1"+
            "\u00c5\20\uffff\1\u00bf\7\uffff\1\u00c8\5\uffff\1\u00c9\1\uffff"+
            "\1\u00c7\3\uffff\1\u00c6\13\uffff\1\u00c0\1\uffff\1\u00c6\4"+
            "\uffff\1\u00b5",
            "\1\u00d2\11\uffff\1\u00cb\2\uffff\1\u00ca\5\uffff\1\u00d3\4"+
            "\uffff\1\u00cc\1\uffff\1\u00d0\4\uffff\1\u00cd\5\uffff\1\u00cc"+
            "\1\uffff\1\u00d0\3\uffff\1\u00ce\16\uffff\1\u00d4\22\uffff\1"+
            "\u00cf\6\uffff\1\u00d5\1\u00d6\1\u00d7\30\uffff\1\u00da\5\uffff"+
            "\1\u00db\1\uffff\1\u00d9\3\uffff\1\u00d8\13\uffff\1\u00d2\1"+
            "\uffff\1\u00d8\4\uffff\1\u00d1",
            "\1\u00e2\14\uffff\1\u00e4\5\uffff\1\u00e3\4\uffff\1\u00dc\1"+
            "\uffff\1\u00e0\4\uffff\1\u00dd\5\uffff\1\u00dc\1\uffff\1\u00e0"+
            "\3\uffff\1\u00de\16\uffff\1\u00e5\22\uffff\1\u00df\6\uffff\1"+
            "\u00e6\1\u00e7\1\u00e8\30\uffff\1\u00eb\5\uffff\1\u00ec\1\uffff"+
            "\1\u00ea\3\uffff\1\u00e9\13\uffff\1\u00e2\1\uffff\1\u00e9\4"+
            "\uffff\1\u00e1",
            "\1\u00f2\14\uffff\1\u00f4\5\uffff\1\u00f3\6\uffff\1\u00f0\4"+
            "\uffff\1\u00ed\7\uffff\1\u00f0\3\uffff\1\u00ee\16\uffff\1\u00f5"+
            "\22\uffff\1\u00ef\6\uffff\1\u00f6\1\u00f7\1\u00f8\30\uffff\1"+
            "\u00fb\5\uffff\1\u00fc\1\uffff\1\u00fa\3\uffff\1\u00f9\13\uffff"+
            "\1\u00f2\1\uffff\1\u00f9\4\uffff\1\u00f1",
            "\1\u0101\14\uffff\1\u0103\5\uffff\1\u0102\6\uffff\1\u00ff\14"+
            "\uffff\1\u00ff\3\uffff\1\u00fd\16\uffff\1\u0104\22\uffff\1\u00fe"+
            "\6\uffff\1\u0105\1\u0106\1\u0107\30\uffff\1\u010a\5\uffff\1"+
            "\u010b\1\uffff\1\u0109\3\uffff\1\u0108\13\uffff\1\u0101\1\uffff"+
            "\1\u0108\4\uffff\1\u0100",
            "\1\u010f\14\uffff\1\u0111\5\uffff\1\u0110\6\uffff\1\u010d\14"+
            "\uffff\1\u010d\22\uffff\1\u0112\22\uffff\1\u010c\6\uffff\1\u0113"+
            "\1\u0114\1\u0115\30\uffff\1\u0118\5\uffff\1\u0119\1\uffff\1"+
            "\u0117\3\uffff\1\u0116\13\uffff\1\u010f\1\uffff\1\u0116\4\uffff"+
            "\1\u010e",
            "\1\u011c\14\uffff\1\u011e\5\uffff\1\u011d\6\uffff\1\u011a\14"+
            "\uffff\1\u011a\22\uffff\1\u011f\31\uffff\1\u0120\1\u0121\1\u0122"+
            "\30\uffff\1\u0125\5\uffff\1\u0126\1\uffff\1\u0124\3\uffff\1"+
            "\u0123\13\uffff\1\u011c\1\uffff\1\u0123\4\uffff\1\u011b",
            "\1\u0128\14\uffff\1\u012a\5\uffff\1\u0129\46\uffff\1\u012b"+
            "\31\uffff\1\u012c\1\u012d\1\u012e\30\uffff\1\u0131\5\uffff\1"+
            "\u0132\1\uffff\1\u0130\3\uffff\1\u012f\13\uffff\1\u0128\1\uffff"+
            "\1\u012f\4\uffff\1\u0127",
            "\1\u0133\u0086\uffff\1\u0133",
            "\1\u013a\12\uffff\1\2\5\uffff\1\u0136\50\uffff\1\u013f\1\u0142"+
            "\1\u0145\1\u0134\1\u013a\2\u0145\1\u013e\1\uffff\1\u0135\1\u013c"+
            "\1\u0145\1\u0138\1\u013d\1\u013b\1\u0145\1\u0139\2\u013d\1\u0145"+
            "\1\u013e\1\uffff\1\u0141\1\u0145\1\u0143\1\u013a\1\u0145\1\u013b"+
            "\1\u0145\1\u0139\1\u0144\1\u013c\1\u0145\1\uffff\1\u0140\1\u0145"+
            "\26\uffff\1\u0146\47\uffff\1\u0137",
            "\1\u0149\14\uffff\1\u0148\5\uffff\1\u014a\100\uffff\1\u014b"+
            "\62\uffff\1\u0149",
            "\1\u014d\12\uffff\1\2\56\uffff\1\u0152\1\u0155\1\u0158\1\uffff"+
            "\1\u014d\2\u0158\1\u0151\2\uffff\1\u014f\1\u0158\2\u0150\1\u014e"+
            "\1\u0158\1\u014c\2\u0150\1\u0158\1\u0151\1\uffff\1\u0154\1\u0158"+
            "\1\u0156\1\u014d\1\u0158\1\u014e\1\u0158\1\u014c\1\u0157\1\u014f"+
            "\1\u0158\1\uffff\1\u0153\1\u0158\26\uffff\1\u0159",
            "\1\u015c\12\uffff\1\2\56\uffff\1\u0161\1\u0164\1\u0167\1\uffff"+
            "\1\u015c\2\u0167\1\u0160\2\uffff\1\u015e\1\u0167\2\u015f\1\u015d"+
            "\1\u0167\1\u015b\2\u015f\1\u0167\1\u0160\1\uffff\1\u0163\1\u0167"+
            "\1\u0165\1\u015c\1\u0167\1\u015d\1\u0167\1\u015b\1\u0166\1\u015e"+
            "\1\u0167\1\uffff\1\u0162\1\u0167\26\uffff\1\u0168",
            "\1\u016b\12\uffff\1\2\56\uffff\1\u0170\1\u0173\1\u0176\1\uffff"+
            "\1\u016b\2\u0176\1\u016f\2\uffff\1\u016d\1\u0176\2\u016e\1\u016c"+
            "\1\u0176\1\u016a\2\u016e\1\u0176\1\u016f\1\uffff\1\u0172\1\u0176"+
            "\1\u0174\1\u016b\1\u0176\1\u016c\1\u0176\1\u016a\1\u0175\1\u016d"+
            "\1\u0176\1\uffff\1\u0171\1\u0176\26\uffff\1\u0177",
            "\1\u017a\12\uffff\1\2\56\uffff\1\u017f\1\u0182\1\u0185\1\uffff"+
            "\1\u017a\2\u0185\1\u017e\2\uffff\1\u017c\1\u0185\2\u017d\1\u017b"+
            "\1\u0185\1\u0179\2\u017d\1\u0185\1\u017e\1\uffff\1\u0181\1\u0185"+
            "\1\u0183\1\u017a\1\u0185\1\u017b\1\u0185\1\u0179\1\u0184\1\u017c"+
            "\1\u0185\1\uffff\1\u0180\1\u0185\26\uffff\1\u0186",
            "\1\u0189\12\uffff\1\2\56\uffff\1\u018e\1\u0191\1\u0194\1\uffff"+
            "\1\u0189\2\u0194\1\u018d\2\uffff\1\u018b\1\u0194\2\u018c\1\u018a"+
            "\1\u0194\1\u0188\2\u018c\1\u0194\1\u018d\1\uffff\1\u0190\1\u0194"+
            "\1\u0192\1\u0189\1\u0194\1\u018a\1\u0194\1\u0188\1\u0193\1\u018b"+
            "\1\u0194\1\uffff\1\u018f\1\u0194\26\uffff\1\u0195",
            "\1\u0197",
            "\1\u0198",
            "\1\u0199",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "439:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )";
        }
    }
    static final String DFA55_eotS =
        "\u046c\uffff";
    static final String DFA55_eofS =
        "\u046c\uffff";
    static final String DFA55_minS =
        "\1\66\2\6\1\uffff\2\6\2\66\1\6\6\uffff\2\6\2\66\7\uffff\1\6\10\66"+
        "\1\6\1\66\5\6\3\103\2\6\1\uffff\2\6\10\66\1\6\1\66\5\6\3\103\2\6"+
        "\5\uffff\1\6\10\66\1\6\1\66\5\6\3\103\2\6\10\66\1\6\1\66\5\6\3\103"+
        "\3\6\u03f7\uffff";
    static final String DFA55_maxS =
        "\3\u00bd\1\uffff\2\u00c4\3\u00bd\6\uffff\2\u00c4\2\u00bd\7\uffff"+
        "\10\u00c4\1\u00bd\1\u00a2\1\u00bd\5\172\3\103\1\u00bd\1\u00a2\1"+
        "\uffff\1\u00bd\10\u00c4\1\u00bd\1\u00a2\1\u00bd\5\174\3\103\2\u00bd"+
        "\5\uffff\10\u00c4\1\u00bd\1\u00a2\1\u00bd\5\172\3\103\1\u00bd\10"+
        "\u00c4\1\u00bd\1\u00a2\1\u00bd\5\174\3\103\3\u00bd\u03f7\uffff";
    static final String DFA55_acceptS =
        "\3\uffff\1\2\5\uffff\1\1\153\uffff\51\1\1\uffff\u00c1\1\7\uffff"+
        "\25\1\1\uffff\2\1\3\uffff\1\1\3\uffff\u00e2\1\4\uffff\2\1\3\uffff"+
        "\2\1\4\uffff\2\1\3\uffff\u00e9\1\7\uffff\u00e2\1\4\uffff\1\1\3\uffff"+
        "\2\1\4\uffff\2\1\3\uffff\2\1\4\uffff\2\1\3\uffff";
    static final String DFA55_specialS =
        "\u046c\uffff}>";
    static final String[] DFA55_transitionS = {
            "\1\1\146\uffff\1\3\37\uffff\1\2",
            "\1\10\12\uffff\1\3\5\uffff\1\6\36\uffff\1\11\13\uffff\1\3\1"+
            "\4\1\uffff\2\3\2\uffff\1\5\1\uffff\1\3\3\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff\1"+
            "\3\33\uffff\1\3\35\uffff\1\11\4\uffff\1\7\32\uffff\1\11",
            "\1\11\12\uffff\1\3\5\uffff\1\21\36\uffff\1\11\13\uffff\1\3"+
            "\1\17\1\uffff\2\3\2\uffff\1\20\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\35\uffff\1\11\4\uffff\1\22\32\uffff\1\11",
            "",
            "\1\33\57\uffff\1\43\11\uffff\1\34\2\uffff\1\32\5\uffff\1\44"+
            "\4\uffff\1\35\1\uffff\1\41\4\uffff\1\36\5\uffff\1\35\1\uffff"+
            "\1\41\3\uffff\1\37\16\uffff\1\45\11\uffff\1\55\10\uffff\1\40"+
            "\6\uffff\1\46\1\47\1\50\20\uffff\1\3\7\uffff\1\53\5\uffff\1"+
            "\54\1\uffff\1\52\3\uffff\1\51\13\uffff\1\56\1\uffff\1\51\4\uffff"+
            "\1\42",
            "\1\62\57\uffff\1\72\11\uffff\1\63\2\uffff\1\61\5\uffff\1\73"+
            "\4\uffff\1\64\1\uffff\1\70\4\uffff\1\65\5\uffff\1\64\1\uffff"+
            "\1\70\3\uffff\1\66\16\uffff\1\74\13\uffff\1\60\6\uffff\1\67"+
            "\6\uffff\1\75\1\76\1\77\30\uffff\1\102\5\uffff\1\103\1\uffff"+
            "\1\101\3\uffff\1\100\13\uffff\1\72\1\uffff\1\100\4\uffff\1\71",
            "\1\104\u0086\uffff\1\104",
            "\1\105\u0086\uffff\1\105",
            "\1\11\57\uffff\1\11\14\uffff\1\3\131\uffff\1\11\37\uffff\1"+
            "\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\114\57\uffff\1\124\11\uffff\1\115\2\uffff\1\113\5\uffff"+
            "\1\125\4\uffff\1\116\1\uffff\1\122\4\uffff\1\117\5\uffff\1\116"+
            "\1\uffff\1\122\3\uffff\1\120\16\uffff\1\126\11\uffff\1\136\10"+
            "\uffff\1\121\6\uffff\1\127\1\130\1\131\30\uffff\1\134\5\uffff"+
            "\1\135\1\uffff\1\133\3\uffff\1\132\13\uffff\1\124\1\uffff\1"+
            "\132\4\uffff\1\123",
            "\1\140\57\uffff\1\150\11\uffff\1\141\2\uffff\1\137\5\uffff"+
            "\1\151\4\uffff\1\142\1\uffff\1\146\4\uffff\1\143\5\uffff\1\142"+
            "\1\uffff\1\146\3\uffff\1\144\16\uffff\1\152\13\uffff\1\162\6"+
            "\uffff\1\145\6\uffff\1\153\1\154\1\155\30\uffff\1\160\5\uffff"+
            "\1\161\1\uffff\1\157\3\uffff\1\156\13\uffff\1\150\1\uffff\1"+
            "\156\4\uffff\1\147",
            "\1\163\u0086\uffff\1\163",
            "\1\164\u0086\uffff\1\164",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\171\14\uffff\1\165\42\uffff\1\167\11\uffff\1\172\2\uffff"+
            "\1\170\5\uffff\1\u0082\4\uffff\1\173\1\uffff\1\177\4\uffff\1"+
            "\174\5\uffff\1\173\1\uffff\1\177\3\uffff\1\175\16\uffff\1\u0083"+
            "\22\uffff\1\176\6\uffff\1\u0084\1\u0085\1\u0086\20\uffff\1\u0080"+
            "\7\uffff\1\u0089\5\uffff\1\u008a\1\uffff\1\u0088\3\uffff\1\u0087"+
            "\13\uffff\1\u0081\1\uffff\1\u0087\4\uffff\1\166",
            "\1\u0093\11\uffff\1\u008c\2\uffff\1\u008b\5\uffff\1\u0094\4"+
            "\uffff\1\u008d\1\uffff\1\u0091\4\uffff\1\u008e\5\uffff\1\u008d"+
            "\1\uffff\1\u0091\3\uffff\1\u008f\16\uffff\1\u0095\22\uffff\1"+
            "\u0090\6\uffff\1\u0096\1\u0097\1\u0098\20\uffff\1\3\7\uffff"+
            "\1\u009b\5\uffff\1\u009c\1\uffff\1\u009a\3\uffff\1\u0099\13"+
            "\uffff\1\u009d\1\uffff\1\u0099\4\uffff\1\u0092",
            "\1\u00a5\14\uffff\1\u00a7\5\uffff\1\u00a6\4\uffff\1\u009f\1"+
            "\uffff\1\u00a3\4\uffff\1\u00a0\5\uffff\1\u009f\1\uffff\1\u00a3"+
            "\3\uffff\1\u00a1\16\uffff\1\u00a8\22\uffff\1\u00a2\6\uffff\1"+
            "\u00a9\1\u00aa\1\u00ab\30\uffff\1\u00ae\5\uffff\1\u00af\1\uffff"+
            "\1\u00ad\3\uffff\1\u00ac\13\uffff\1\u00a5\1\uffff\1\u00ac\4"+
            "\uffff\1\u00a4",
            "\1\u00b5\14\uffff\1\u00b7\5\uffff\1\u00b6\6\uffff\1\u00b3\4"+
            "\uffff\1\u00b0\7\uffff\1\u00b3\3\uffff\1\u00b1\16\uffff\1\u00b8"+
            "\22\uffff\1\u00b2\6\uffff\1\u00b9\1\u00ba\1\u00bb\30\uffff\1"+
            "\u00be\5\uffff\1\u00bf\1\uffff\1\u00bd\3\uffff\1\u00bc\13\uffff"+
            "\1\u00b5\1\uffff\1\u00bc\4\uffff\1\u00b4",
            "\1\u00c4\14\uffff\1\u00c6\5\uffff\1\u00c5\6\uffff\1\u00c2\14"+
            "\uffff\1\u00c2\3\uffff\1\u00c0\16\uffff\1\u00c7\22\uffff\1\u00c1"+
            "\6\uffff\1\u00c8\1\u00c9\1\u00ca\30\uffff\1\u00cd\5\uffff\1"+
            "\u00ce\1\uffff\1\u00cc\3\uffff\1\u00cb\13\uffff\1\u00c4\1\uffff"+
            "\1\u00cb\4\uffff\1\u00c3",
            "\1\u00d2\14\uffff\1\u00d4\5\uffff\1\u00d3\6\uffff\1\u00d0\14"+
            "\uffff\1\u00d0\22\uffff\1\u00d5\22\uffff\1\u00cf\6\uffff\1\u00d6"+
            "\1\u00d7\1\u00d8\30\uffff\1\u00db\5\uffff\1\u00dc\1\uffff\1"+
            "\u00da\3\uffff\1\u00d9\13\uffff\1\u00d2\1\uffff\1\u00d9\4\uffff"+
            "\1\u00d1",
            "\1\u00df\14\uffff\1\u00e1\5\uffff\1\u00e0\6\uffff\1\u00dd\14"+
            "\uffff\1\u00dd\22\uffff\1\u00e2\31\uffff\1\u00e3\1\u00e4\1\u00e5"+
            "\30\uffff\1\u00e8\5\uffff\1\u00e9\1\uffff\1\u00e7\3\uffff\1"+
            "\u00e6\13\uffff\1\u00df\1\uffff\1\u00e6\4\uffff\1\u00de",
            "\1\u00eb\14\uffff\1\u00ed\5\uffff\1\u00ec\46\uffff\1\u00ee"+
            "\31\uffff\1\u00ef\1\u00f0\1\u00f1\30\uffff\1\u00f4\5\uffff\1"+
            "\u00f5\1\uffff\1\u00f3\3\uffff\1\u00f2\13\uffff\1\u00eb\1\uffff"+
            "\1\u00f2\4\uffff\1\u00ea",
            "\1\u00f6\u0086\uffff\1\u00f6",
            "\1\u00fd\12\uffff\1\u0109\5\uffff\1\u00f9\50\uffff\1\u0102"+
            "\1\u0105\1\u0108\1\u00f7\1\u00fd\2\u0108\1\u0101\1\uffff\1\u00f8"+
            "\1\u00ff\1\u0108\1\u00fb\1\u0100\1\u00fe\1\u0108\1\u00fc\2\u0100"+
            "\1\u0108\1\u0101\1\uffff\1\u0104\1\u0108\1\u0106\1\u00fd\1\u0108"+
            "\1\u00fe\1\u0108\1\u00fc\1\u0107\1\u00ff\1\u0108\1\uffff\1\u0103"+
            "\1\u0108\26\uffff\1\u010a\47\uffff\1\u00fa",
            "\1\u010c\14\uffff\1\u010b\5\uffff\1\u010d\100\uffff\1\u010e"+
            "\62\uffff\1\u010c",
            "\1\u0110\12\uffff\1\u011c\56\uffff\1\u0115\1\u0118\1\u011b"+
            "\1\uffff\1\u0110\2\u011b\1\u0114\2\uffff\1\u0112\1\u011b\2\u0113"+
            "\1\u0111\1\u011b\1\u010f\2\u0113\1\u011b\1\u0114\1\uffff\1\u0117"+
            "\1\u011b\1\u0119\1\u0110\1\u011b\1\u0111\1\u011b\1\u010f\1\u011a"+
            "\1\u0112\1\u011b\1\uffff\1\u0116\1\u011b\26\uffff\1\u011d",
            "\1\u011f\12\uffff\1\u012b\56\uffff\1\u0124\1\u0127\1\u012a"+
            "\1\uffff\1\u011f\2\u012a\1\u0123\2\uffff\1\u0121\1\u012a\2\u0122"+
            "\1\u0120\1\u012a\1\u011e\2\u0122\1\u012a\1\u0123\1\uffff\1\u0126"+
            "\1\u012a\1\u0128\1\u011f\1\u012a\1\u0120\1\u012a\1\u011e\1\u0129"+
            "\1\u0121\1\u012a\1\uffff\1\u0125\1\u012a\26\uffff\1\u012c",
            "\1\u012e\12\uffff\1\u013a\56\uffff\1\u0133\1\u0136\1\u0139"+
            "\1\uffff\1\u012e\2\u0139\1\u0132\2\uffff\1\u0130\1\u0139\2\u0131"+
            "\1\u012f\1\u0139\1\u012d\2\u0131\1\u0139\1\u0132\1\uffff\1\u0135"+
            "\1\u0139\1\u0137\1\u012e\1\u0139\1\u012f\1\u0139\1\u012d\1\u0138"+
            "\1\u0130\1\u0139\1\uffff\1\u0134\1\u0139\26\uffff\1\u013b",
            "\1\u013d\12\uffff\1\u0149\56\uffff\1\u0142\1\u0145\1\u0148"+
            "\1\uffff\1\u013d\2\u0148\1\u0141\2\uffff\1\u013f\1\u0148\2\u0140"+
            "\1\u013e\1\u0148\1\u013c\2\u0140\1\u0148\1\u0141\1\uffff\1\u0144"+
            "\1\u0148\1\u0146\1\u013d\1\u0148\1\u013e\1\u0148\1\u013c\1\u0147"+
            "\1\u013f\1\u0148\1\uffff\1\u0143\1\u0148\26\uffff\1\u014a",
            "\1\u014c\12\uffff\1\u0158\56\uffff\1\u0151\1\u0154\1\u0157"+
            "\1\uffff\1\u014c\2\u0157\1\u0150\2\uffff\1\u014e\1\u0157\2\u014f"+
            "\1\u014d\1\u0157\1\u014b\2\u014f\1\u0157\1\u0150\1\uffff\1\u0153"+
            "\1\u0157\1\u0155\1\u014c\1\u0157\1\u014d\1\u0157\1\u014b\1\u0156"+
            "\1\u014e\1\u0157\1\uffff\1\u0152\1\u0157\26\uffff\1\u0159",
            "\1\u015a",
            "\1\u015b",
            "\1\u015c",
            "\1\11\12\uffff\1\3\5\uffff\1\u015e\36\uffff\1\11\13\uffff\1"+
            "\3\2\uffff\2\3\2\uffff\1\u015d\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\35\uffff\1\11\4\uffff\1\u015f\32\uffff\1\11",
            "\1\u016d\12\uffff\1\u0179\5\uffff\1\u0169\50\uffff\1\u0172"+
            "\1\u0175\1\u0178\1\u0167\1\u016d\2\u0178\1\u0171\1\uffff\1\u0168"+
            "\1\u016f\1\u0178\1\u016b\1\u0170\1\u016e\1\u0178\1\u016c\2\u0170"+
            "\1\u0178\1\u0171\1\uffff\1\u0174\1\u0178\1\u0176\1\u016d\1\u0178"+
            "\1\u016e\1\u0178\1\u016c\1\u0177\1\u016f\1\u0178\1\uffff\1\u0173"+
            "\1\u0178\26\uffff\1\u017a\47\uffff\1\u016a",
            "",
            "\1\u017b\12\uffff\1\3\5\uffff\1\u017d\36\uffff\1\11\13\uffff"+
            "\2\3\1\uffff\2\3\2\uffff\1\u0182\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\35\uffff\1\11\4\uffff\1\u017e\32\uffff\1\11",
            "\1\u018a\14\uffff\1\u0186\42\uffff\1\u0188\11\uffff\1\u018b"+
            "\2\uffff\1\u0189\5\uffff\1\u0193\4\uffff\1\u018c\1\uffff\1\u0190"+
            "\4\uffff\1\u018d\5\uffff\1\u018c\1\uffff\1\u0190\3\uffff\1\u018e"+
            "\16\uffff\1\u0194\22\uffff\1\u018f\6\uffff\1\u0195\1\u0196\1"+
            "\u0197\20\uffff\1\u0191\7\uffff\1\u019a\5\uffff\1\u019b\1\uffff"+
            "\1\u0199\3\uffff\1\u0198\13\uffff\1\u0192\1\uffff\1\u0198\4"+
            "\uffff\1\u0187",
            "\1\u01a4\11\uffff\1\u019d\2\uffff\1\u019c\5\uffff\1\u01a5\4"+
            "\uffff\1\u019e\1\uffff\1\u01a2\4\uffff\1\u019f\5\uffff\1\u019e"+
            "\1\uffff\1\u01a2\3\uffff\1\u01a0\16\uffff\1\u01a6\22\uffff\1"+
            "\u01a1\6\uffff\1\u01a7\1\u01a8\1\u01a9\30\uffff\1\u01ac\5\uffff"+
            "\1\u01ad\1\uffff\1\u01ab\3\uffff\1\u01aa\13\uffff\1\u01a4\1"+
            "\uffff\1\u01aa\4\uffff\1\u01a3",
            "\1\u01b4\14\uffff\1\u01b6\5\uffff\1\u01b5\4\uffff\1\u01ae\1"+
            "\uffff\1\u01b2\4\uffff\1\u01af\5\uffff\1\u01ae\1\uffff\1\u01b2"+
            "\3\uffff\1\u01b0\16\uffff\1\u01b7\22\uffff\1\u01b1\6\uffff\1"+
            "\u01b8\1\u01b9\1\u01ba\30\uffff\1\u01bd\5\uffff\1\u01be\1\uffff"+
            "\1\u01bc\3\uffff\1\u01bb\13\uffff\1\u01b4\1\uffff\1\u01bb\4"+
            "\uffff\1\u01b3",
            "\1\u01c4\14\uffff\1\u01c6\5\uffff\1\u01c5\6\uffff\1\u01c2\4"+
            "\uffff\1\u01bf\7\uffff\1\u01c2\3\uffff\1\u01c0\16\uffff\1\u01c7"+
            "\22\uffff\1\u01c1\6\uffff\1\u01c8\1\u01c9\1\u01ca\30\uffff\1"+
            "\u01cd\5\uffff\1\u01ce\1\uffff\1\u01cc\3\uffff\1\u01cb\13\uffff"+
            "\1\u01c4\1\uffff\1\u01cb\4\uffff\1\u01c3",
            "\1\u01d3\14\uffff\1\u01d5\5\uffff\1\u01d4\6\uffff\1\u01d1\14"+
            "\uffff\1\u01d1\3\uffff\1\u01cf\16\uffff\1\u01d6\22\uffff\1\u01d0"+
            "\6\uffff\1\u01d7\1\u01d8\1\u01d9\30\uffff\1\u01dc\5\uffff\1"+
            "\u01dd\1\uffff\1\u01db\3\uffff\1\u01da\13\uffff\1\u01d3\1\uffff"+
            "\1\u01da\4\uffff\1\u01d2",
            "\1\u01e1\14\uffff\1\u01e3\5\uffff\1\u01e2\6\uffff\1\u01df\14"+
            "\uffff\1\u01df\22\uffff\1\u01e4\22\uffff\1\u01de\6\uffff\1\u01e5"+
            "\1\u01e6\1\u01e7\30\uffff\1\u01ea\5\uffff\1\u01eb\1\uffff\1"+
            "\u01e9\3\uffff\1\u01e8\13\uffff\1\u01e1\1\uffff\1\u01e8\4\uffff"+
            "\1\u01e0",
            "\1\u01ee\14\uffff\1\u01f0\5\uffff\1\u01ef\6\uffff\1\u01ec\14"+
            "\uffff\1\u01ec\22\uffff\1\u01f1\31\uffff\1\u01f2\1\u01f3\1\u01f4"+
            "\30\uffff\1\u01f7\5\uffff\1\u01f8\1\uffff\1\u01f6\3\uffff\1"+
            "\u01f5\13\uffff\1\u01ee\1\uffff\1\u01f5\4\uffff\1\u01ed",
            "\1\u01fa\14\uffff\1\u01fc\5\uffff\1\u01fb\46\uffff\1\u01fd"+
            "\31\uffff\1\u01fe\1\u01ff\1\u0200\30\uffff\1\u0203\5\uffff\1"+
            "\u0204\1\uffff\1\u0202\3\uffff\1\u0201\13\uffff\1\u01fa\1\uffff"+
            "\1\u0201\4\uffff\1\u01f9",
            "\1\u0205\u0086\uffff\1\u0205",
            "\1\u020c\20\uffff\1\u0208\50\uffff\1\u0211\1\u0214\1\u0217"+
            "\1\u0206\1\u020c\2\u0217\1\u0210\1\uffff\1\u0207\1\u020e\1\u0217"+
            "\1\u020a\1\u020f\1\u020d\1\u0217\1\u020b\2\u020f\1\u0217\1\u0210"+
            "\1\uffff\1\u0213\1\u0217\1\u0215\1\u020c\1\u0217\1\u020d\1\u0217"+
            "\1\u020b\1\u0216\1\u020e\1\u0217\1\uffff\1\u0212\1\u0217\30"+
            "\uffff\1\u0218\45\uffff\1\u0209",
            "\1\u021a\14\uffff\1\u0219\5\uffff\1\u021b\100\uffff\1\u021c"+
            "\62\uffff\1\u021a",
            "\1\u021e\71\uffff\1\u0223\1\u0226\1\u0229\1\uffff\1\u021e\2"+
            "\u0229\1\u0222\2\uffff\1\u0220\1\u0229\2\u0221\1\u021f\1\u0229"+
            "\1\u021d\2\u0221\1\u0229\1\u0222\1\uffff\1\u0225\1\u0229\1\u0227"+
            "\1\u021e\1\u0229\1\u021f\1\u0229\1\u021d\1\u0228\1\u0220\1\u0229"+
            "\1\uffff\1\u0224\1\u0229\30\uffff\1\u022a",
            "\1\u022c\71\uffff\1\u0231\1\u0234\1\u0237\1\uffff\1\u022c\2"+
            "\u0237\1\u0230\2\uffff\1\u022e\1\u0237\2\u022f\1\u022d\1\u0237"+
            "\1\u022b\2\u022f\1\u0237\1\u0230\1\uffff\1\u0233\1\u0237\1\u0235"+
            "\1\u022c\1\u0237\1\u022d\1\u0237\1\u022b\1\u0236\1\u022e\1\u0237"+
            "\1\uffff\1\u0232\1\u0237\30\uffff\1\u0238",
            "\1\u023a\71\uffff\1\u023f\1\u0242\1\u0245\1\uffff\1\u023a\2"+
            "\u0245\1\u023e\2\uffff\1\u023c\1\u0245\2\u023d\1\u023b\1\u0245"+
            "\1\u0239\2\u023d\1\u0245\1\u023e\1\uffff\1\u0241\1\u0245\1\u0243"+
            "\1\u023a\1\u0245\1\u023b\1\u0245\1\u0239\1\u0244\1\u023c\1\u0245"+
            "\1\uffff\1\u0240\1\u0245\30\uffff\1\u0246",
            "\1\u0248\71\uffff\1\u024d\1\u0250\1\u0253\1\uffff\1\u0248\2"+
            "\u0253\1\u024c\2\uffff\1\u024a\1\u0253\2\u024b\1\u0249\1\u0253"+
            "\1\u0247\2\u024b\1\u0253\1\u024c\1\uffff\1\u024f\1\u0253\1\u0251"+
            "\1\u0248\1\u0253\1\u0249\1\u0253\1\u0247\1\u0252\1\u024a\1\u0253"+
            "\1\uffff\1\u024e\1\u0253\30\uffff\1\u0254",
            "\1\u0256\71\uffff\1\u025b\1\u025e\1\u0261\1\uffff\1\u0256\2"+
            "\u0261\1\u025a\2\uffff\1\u0258\1\u0261\2\u0259\1\u0257\1\u0261"+
            "\1\u0255\2\u0259\1\u0261\1\u025a\1\uffff\1\u025d\1\u0261\1\u025f"+
            "\1\u0256\1\u0261\1\u0257\1\u0261\1\u0255\1\u0260\1\u0258\1\u0261"+
            "\1\uffff\1\u025c\1\u0261\30\uffff\1\u0262",
            "\1\u0263",
            "\1\u0264",
            "\1\u0265",
            "\1\11\12\uffff\1\3\5\uffff\1\u026c\36\uffff\1\11\13\uffff\1"+
            "\3\1\u0266\1\uffff\2\3\2\uffff\1\u0267\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\33\uffff\1\3\35\uffff\1\11\4\uffff\1\u026d\32"+
            "\uffff\1\11",
            "\1\11\12\uffff\1\3\5\uffff\1\u0277\36\uffff\1\11\13\uffff\1"+
            "\3\1\u0271\1\uffff\2\3\2\uffff\1\u0272\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\33\uffff\1\3\35\uffff\1\11\4\uffff\1\u0278\32"+
            "\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\u0280\14\uffff\1\u027c\42\uffff\1\u027e\11\uffff\1\u0281"+
            "\2\uffff\1\u027f\5\uffff\1\u0289\4\uffff\1\u0282\1\uffff\1\u0286"+
            "\4\uffff\1\u0283\5\uffff\1\u0282\1\uffff\1\u0286\3\uffff\1\u0284"+
            "\16\uffff\1\u028a\22\uffff\1\u0285\6\uffff\1\u028b\1\u028c\1"+
            "\u028d\20\uffff\1\u0287\7\uffff\1\u0290\5\uffff\1\u0291\1\uffff"+
            "\1\u028f\3\uffff\1\u028e\13\uffff\1\u0288\1\uffff\1\u028e\4"+
            "\uffff\1\u027d",
            "\1\u029a\11\uffff\1\u0293\2\uffff\1\u0292\5\uffff\1\u029b\4"+
            "\uffff\1\u0294\1\uffff\1\u0298\4\uffff\1\u0295\5\uffff\1\u0294"+
            "\1\uffff\1\u0298\3\uffff\1\u0296\16\uffff\1\u029c\22\uffff\1"+
            "\u0297\6\uffff\1\u029d\1\u029e\1\u029f\30\uffff\1\u02a2\5\uffff"+
            "\1\u02a3\1\uffff\1\u02a1\3\uffff\1\u02a0\13\uffff\1\u029a\1"+
            "\uffff\1\u02a0\4\uffff\1\u0299",
            "\1\u02aa\14\uffff\1\u02ac\5\uffff\1\u02ab\4\uffff\1\u02a4\1"+
            "\uffff\1\u02a8\4\uffff\1\u02a5\5\uffff\1\u02a4\1\uffff\1\u02a8"+
            "\3\uffff\1\u02a6\16\uffff\1\u02ad\22\uffff\1\u02a7\6\uffff\1"+
            "\u02ae\1\u02af\1\u02b0\30\uffff\1\u02b3\5\uffff\1\u02b4\1\uffff"+
            "\1\u02b2\3\uffff\1\u02b1\13\uffff\1\u02aa\1\uffff\1\u02b1\4"+
            "\uffff\1\u02a9",
            "\1\u02ba\14\uffff\1\u02bc\5\uffff\1\u02bb\6\uffff\1\u02b8\4"+
            "\uffff\1\u02b5\7\uffff\1\u02b8\3\uffff\1\u02b6\16\uffff\1\u02bd"+
            "\22\uffff\1\u02b7\6\uffff\1\u02be\1\u02bf\1\u02c0\30\uffff\1"+
            "\u02c3\5\uffff\1\u02c4\1\uffff\1\u02c2\3\uffff\1\u02c1\13\uffff"+
            "\1\u02ba\1\uffff\1\u02c1\4\uffff\1\u02b9",
            "\1\u02c9\14\uffff\1\u02cb\5\uffff\1\u02ca\6\uffff\1\u02c7\14"+
            "\uffff\1\u02c7\3\uffff\1\u02c5\16\uffff\1\u02cc\22\uffff\1\u02c6"+
            "\6\uffff\1\u02cd\1\u02ce\1\u02cf\30\uffff\1\u02d2\5\uffff\1"+
            "\u02d3\1\uffff\1\u02d1\3\uffff\1\u02d0\13\uffff\1\u02c9\1\uffff"+
            "\1\u02d0\4\uffff\1\u02c8",
            "\1\u02d7\14\uffff\1\u02d9\5\uffff\1\u02d8\6\uffff\1\u02d5\14"+
            "\uffff\1\u02d5\22\uffff\1\u02da\22\uffff\1\u02d4\6\uffff\1\u02db"+
            "\1\u02dc\1\u02dd\30\uffff\1\u02e0\5\uffff\1\u02e1\1\uffff\1"+
            "\u02df\3\uffff\1\u02de\13\uffff\1\u02d7\1\uffff\1\u02de\4\uffff"+
            "\1\u02d6",
            "\1\u02e4\14\uffff\1\u02e6\5\uffff\1\u02e5\6\uffff\1\u02e2\14"+
            "\uffff\1\u02e2\22\uffff\1\u02e7\31\uffff\1\u02e8\1\u02e9\1\u02ea"+
            "\30\uffff\1\u02ed\5\uffff\1\u02ee\1\uffff\1\u02ec\3\uffff\1"+
            "\u02eb\13\uffff\1\u02e4\1\uffff\1\u02eb\4\uffff\1\u02e3",
            "\1\u02f0\14\uffff\1\u02f2\5\uffff\1\u02f1\46\uffff\1\u02f3"+
            "\31\uffff\1\u02f4\1\u02f5\1\u02f6\30\uffff\1\u02f9\5\uffff\1"+
            "\u02fa\1\uffff\1\u02f8\3\uffff\1\u02f7\13\uffff\1\u02f0\1\uffff"+
            "\1\u02f7\4\uffff\1\u02ef",
            "\1\u02fb\u0086\uffff\1\u02fb",
            "\1\u0302\12\uffff\1\u030e\5\uffff\1\u02fe\50\uffff\1\u0307"+
            "\1\u030a\1\u030d\1\u02fc\1\u0302\2\u030d\1\u0306\1\uffff\1\u02fd"+
            "\1\u0304\1\u030d\1\u0300\1\u0305\1\u0303\1\u030d\1\u0301\2\u0305"+
            "\1\u030d\1\u0306\1\uffff\1\u0309\1\u030d\1\u030b\1\u0302\1\u030d"+
            "\1\u0303\1\u030d\1\u0301\1\u030c\1\u0304\1\u030d\1\uffff\1\u0308"+
            "\1\u030d\26\uffff\1\u030f\47\uffff\1\u02ff",
            "\1\u0311\14\uffff\1\u0310\5\uffff\1\u0312\100\uffff\1\u0313"+
            "\62\uffff\1\u0311",
            "\1\u0315\12\uffff\1\u0321\56\uffff\1\u031a\1\u031d\1\u0320"+
            "\1\uffff\1\u0315\2\u0320\1\u0319\2\uffff\1\u0317\1\u0320\2\u0318"+
            "\1\u0316\1\u0320\1\u0314\2\u0318\1\u0320\1\u0319\1\uffff\1\u031c"+
            "\1\u0320\1\u031e\1\u0315\1\u0320\1\u0316\1\u0320\1\u0314\1\u031f"+
            "\1\u0317\1\u0320\1\uffff\1\u031b\1\u0320\26\uffff\1\u0322",
            "\1\u0324\12\uffff\1\u0330\56\uffff\1\u0329\1\u032c\1\u032f"+
            "\1\uffff\1\u0324\2\u032f\1\u0328\2\uffff\1\u0326\1\u032f\2\u0327"+
            "\1\u0325\1\u032f\1\u0323\2\u0327\1\u032f\1\u0328\1\uffff\1\u032b"+
            "\1\u032f\1\u032d\1\u0324\1\u032f\1\u0325\1\u032f\1\u0323\1\u032e"+
            "\1\u0326\1\u032f\1\uffff\1\u032a\1\u032f\26\uffff\1\u0331",
            "\1\u0333\12\uffff\1\u033f\56\uffff\1\u0338\1\u033b\1\u033e"+
            "\1\uffff\1\u0333\2\u033e\1\u0337\2\uffff\1\u0335\1\u033e\2\u0336"+
            "\1\u0334\1\u033e\1\u0332\2\u0336\1\u033e\1\u0337\1\uffff\1\u033a"+
            "\1\u033e\1\u033c\1\u0333\1\u033e\1\u0334\1\u033e\1\u0332\1\u033d"+
            "\1\u0335\1\u033e\1\uffff\1\u0339\1\u033e\26\uffff\1\u0340",
            "\1\u0342\12\uffff\1\u034e\56\uffff\1\u0347\1\u034a\1\u034d"+
            "\1\uffff\1\u0342\2\u034d\1\u0346\2\uffff\1\u0344\1\u034d\2\u0345"+
            "\1\u0343\1\u034d\1\u0341\2\u0345\1\u034d\1\u0346\1\uffff\1\u0349"+
            "\1\u034d\1\u034b\1\u0342\1\u034d\1\u0343\1\u034d\1\u0341\1\u034c"+
            "\1\u0344\1\u034d\1\uffff\1\u0348\1\u034d\26\uffff\1\u034f",
            "\1\u0351\12\uffff\1\u035d\56\uffff\1\u0356\1\u0359\1\u035c"+
            "\1\uffff\1\u0351\2\u035c\1\u0355\2\uffff\1\u0353\1\u035c\2\u0354"+
            "\1\u0352\1\u035c\1\u0350\2\u0354\1\u035c\1\u0355\1\uffff\1\u0358"+
            "\1\u035c\1\u035a\1\u0351\1\u035c\1\u0352\1\u035c\1\u0350\1\u035b"+
            "\1\u0353\1\u035c\1\uffff\1\u0357\1\u035c\26\uffff\1\u035e",
            "\1\u035f",
            "\1\u0360",
            "\1\u0361",
            "\1\11\12\uffff\1\3\5\uffff\1\u0363\36\uffff\1\11\13\uffff\1"+
            "\3\2\uffff\2\3\2\uffff\1\u0362\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\35\uffff\1\11\4\uffff\1\u0364\32\uffff\1\11",
            "\1\u0370\14\uffff\1\u036c\42\uffff\1\u036e\11\uffff\1\u0371"+
            "\2\uffff\1\u036f\5\uffff\1\u0379\4\uffff\1\u0372\1\uffff\1\u0376"+
            "\4\uffff\1\u0373\5\uffff\1\u0372\1\uffff\1\u0376\3\uffff\1\u0374"+
            "\16\uffff\1\u037a\22\uffff\1\u0375\6\uffff\1\u037b\1\u037c\1"+
            "\u037d\20\uffff\1\u0377\7\uffff\1\u0380\5\uffff\1\u0381\1\uffff"+
            "\1\u037f\3\uffff\1\u037e\13\uffff\1\u0378\1\uffff\1\u037e\4"+
            "\uffff\1\u036d",
            "\1\u038a\11\uffff\1\u0383\2\uffff\1\u0382\5\uffff\1\u038b\4"+
            "\uffff\1\u0384\1\uffff\1\u0388\4\uffff\1\u0385\5\uffff\1\u0384"+
            "\1\uffff\1\u0388\3\uffff\1\u0386\16\uffff\1\u038c\22\uffff\1"+
            "\u0387\6\uffff\1\u038d\1\u038e\1\u038f\30\uffff\1\u0392\5\uffff"+
            "\1\u0393\1\uffff\1\u0391\3\uffff\1\u0390\13\uffff\1\u038a\1"+
            "\uffff\1\u0390\4\uffff\1\u0389",
            "\1\u039a\14\uffff\1\u039c\5\uffff\1\u039b\4\uffff\1\u0394\1"+
            "\uffff\1\u0398\4\uffff\1\u0395\5\uffff\1\u0394\1\uffff\1\u0398"+
            "\3\uffff\1\u0396\16\uffff\1\u039d\22\uffff\1\u0397\6\uffff\1"+
            "\u039e\1\u039f\1\u03a0\30\uffff\1\u03a3\5\uffff\1\u03a4\1\uffff"+
            "\1\u03a2\3\uffff\1\u03a1\13\uffff\1\u039a\1\uffff\1\u03a1\4"+
            "\uffff\1\u0399",
            "\1\u03aa\14\uffff\1\u03ac\5\uffff\1\u03ab\6\uffff\1\u03a8\4"+
            "\uffff\1\u03a5\7\uffff\1\u03a8\3\uffff\1\u03a6\16\uffff\1\u03ad"+
            "\22\uffff\1\u03a7\6\uffff\1\u03ae\1\u03af\1\u03b0\30\uffff\1"+
            "\u03b3\5\uffff\1\u03b4\1\uffff\1\u03b2\3\uffff\1\u03b1\13\uffff"+
            "\1\u03aa\1\uffff\1\u03b1\4\uffff\1\u03a9",
            "\1\u03b9\14\uffff\1\u03bb\5\uffff\1\u03ba\6\uffff\1\u03b7\14"+
            "\uffff\1\u03b7\3\uffff\1\u03b5\16\uffff\1\u03bc\22\uffff\1\u03b6"+
            "\6\uffff\1\u03bd\1\u03be\1\u03bf\30\uffff\1\u03c2\5\uffff\1"+
            "\u03c3\1\uffff\1\u03c1\3\uffff\1\u03c0\13\uffff\1\u03b9\1\uffff"+
            "\1\u03c0\4\uffff\1\u03b8",
            "\1\u03c7\14\uffff\1\u03c9\5\uffff\1\u03c8\6\uffff\1\u03c5\14"+
            "\uffff\1\u03c5\22\uffff\1\u03ca\22\uffff\1\u03c4\6\uffff\1\u03cb"+
            "\1\u03cc\1\u03cd\30\uffff\1\u03d0\5\uffff\1\u03d1\1\uffff\1"+
            "\u03cf\3\uffff\1\u03ce\13\uffff\1\u03c7\1\uffff\1\u03ce\4\uffff"+
            "\1\u03c6",
            "\1\u03d4\14\uffff\1\u03d6\5\uffff\1\u03d5\6\uffff\1\u03d2\14"+
            "\uffff\1\u03d2\22\uffff\1\u03d7\31\uffff\1\u03d8\1\u03d9\1\u03da"+
            "\30\uffff\1\u03dd\5\uffff\1\u03de\1\uffff\1\u03dc\3\uffff\1"+
            "\u03db\13\uffff\1\u03d4\1\uffff\1\u03db\4\uffff\1\u03d3",
            "\1\u03e0\14\uffff\1\u03e2\5\uffff\1\u03e1\46\uffff\1\u03e3"+
            "\31\uffff\1\u03e4\1\u03e5\1\u03e6\30\uffff\1\u03e9\5\uffff\1"+
            "\u03ea\1\uffff\1\u03e8\3\uffff\1\u03e7\13\uffff\1\u03e0\1\uffff"+
            "\1\u03e7\4\uffff\1\u03df",
            "\1\u03eb\u0086\uffff\1\u03eb",
            "\1\u03f2\20\uffff\1\u03ee\50\uffff\1\u03f7\1\u03fa\1\u03fd"+
            "\1\u03ec\1\u03f2\2\u03fd\1\u03f6\1\uffff\1\u03ed\1\u03f4\1\u03fd"+
            "\1\u03f0\1\u03f5\1\u03f3\1\u03fd\1\u03f1\2\u03f5\1\u03fd\1\u03f6"+
            "\1\uffff\1\u03f9\1\u03fd\1\u03fb\1\u03f2\1\u03fd\1\u03f3\1\u03fd"+
            "\1\u03f1\1\u03fc\1\u03f4\1\u03fd\1\uffff\1\u03f8\1\u03fd\30"+
            "\uffff\1\u03fe\45\uffff\1\u03ef",
            "\1\u0400\14\uffff\1\u03ff\5\uffff\1\u0401\100\uffff\1\u0402"+
            "\62\uffff\1\u0400",
            "\1\u0404\71\uffff\1\u0409\1\u040c\1\u040f\1\uffff\1\u0404\2"+
            "\u040f\1\u0408\2\uffff\1\u0406\1\u040f\2\u0407\1\u0405\1\u040f"+
            "\1\u0403\2\u0407\1\u040f\1\u0408\1\uffff\1\u040b\1\u040f\1\u040d"+
            "\1\u0404\1\u040f\1\u0405\1\u040f\1\u0403\1\u040e\1\u0406\1\u040f"+
            "\1\uffff\1\u040a\1\u040f\30\uffff\1\u0410",
            "\1\u0412\71\uffff\1\u0417\1\u041a\1\u041d\1\uffff\1\u0412\2"+
            "\u041d\1\u0416\2\uffff\1\u0414\1\u041d\2\u0415\1\u0413\1\u041d"+
            "\1\u0411\2\u0415\1\u041d\1\u0416\1\uffff\1\u0419\1\u041d\1\u041b"+
            "\1\u0412\1\u041d\1\u0413\1\u041d\1\u0411\1\u041c\1\u0414\1\u041d"+
            "\1\uffff\1\u0418\1\u041d\30\uffff\1\u041e",
            "\1\u0420\71\uffff\1\u0425\1\u0428\1\u042b\1\uffff\1\u0420\2"+
            "\u042b\1\u0424\2\uffff\1\u0422\1\u042b\2\u0423\1\u0421\1\u042b"+
            "\1\u041f\2\u0423\1\u042b\1\u0424\1\uffff\1\u0427\1\u042b\1\u0429"+
            "\1\u0420\1\u042b\1\u0421\1\u042b\1\u041f\1\u042a\1\u0422\1\u042b"+
            "\1\uffff\1\u0426\1\u042b\30\uffff\1\u042c",
            "\1\u042e\71\uffff\1\u0433\1\u0436\1\u0439\1\uffff\1\u042e\2"+
            "\u0439\1\u0432\2\uffff\1\u0430\1\u0439\2\u0431\1\u042f\1\u0439"+
            "\1\u042d\2\u0431\1\u0439\1\u0432\1\uffff\1\u0435\1\u0439\1\u0437"+
            "\1\u042e\1\u0439\1\u042f\1\u0439\1\u042d\1\u0438\1\u0430\1\u0439"+
            "\1\uffff\1\u0434\1\u0439\30\uffff\1\u043a",
            "\1\u043c\71\uffff\1\u0441\1\u0444\1\u0447\1\uffff\1\u043c\2"+
            "\u0447\1\u0440\2\uffff\1\u043e\1\u0447\2\u043f\1\u043d\1\u0447"+
            "\1\u043b\2\u043f\1\u0447\1\u0440\1\uffff\1\u0443\1\u0447\1\u0445"+
            "\1\u043c\1\u0447\1\u043d\1\u0447\1\u043b\1\u0446\1\u043e\1\u0447"+
            "\1\uffff\1\u0442\1\u0447\30\uffff\1\u0448",
            "\1\u0449",
            "\1\u044a",
            "\1\u044b",
            "\1\11\12\uffff\1\3\5\uffff\1\u044c\36\uffff\1\11\13\uffff\1"+
            "\3\2\uffff\2\3\2\uffff\1\u0452\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\35\uffff\1\11\4\uffff\1\u044d\32\uffff\1\11",
            "\1\11\12\uffff\1\3\5\uffff\1\u045c\36\uffff\1\11\13\uffff\1"+
            "\3\1\u0456\1\uffff\2\3\2\uffff\1\u0457\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\33\uffff\1\3\35\uffff\1\11\4\uffff\1\u045d\32"+
            "\uffff\1\11",
            "\1\11\12\uffff\1\3\5\uffff\1\u0467\36\uffff\1\11\13\uffff\1"+
            "\3\1\u0461\1\uffff\2\3\2\uffff\1\u0462\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\33\uffff\1\3\35\uffff\1\11\4\uffff\1\u0468\32"+
            "\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_eotS);
    static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_eofS);
    static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_minS);
    static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_maxS);
    static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_acceptS);
    static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_specialS);
    static final short[][] DFA55_transition;

    static {
        int numStates = DFA55_transitionS.length;
        DFA55_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA55_transition[i] = DFA.unpackEncodedString(DFA55_transitionS[i]);
        }
    }

    class DFA55 extends DFA {

        public DFA55(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = DFA55_eot;
            this.eof = DFA55_eof;
            this.min = DFA55_min;
            this.max = DFA55_max;
            this.accept = DFA55_accept;
            this.special = DFA55_special;
            this.transition = DFA55_transition;
        }
        public String getDescription() {
            return "480:32: ( static_type_wrapper )?";
        }
    }
    static final String DFA72_eotS =
        "\142\uffff";
    static final String DFA72_eofS =
        "\142\uffff";
    static final String DFA72_minS =
        "\2\6\24\uffff\1\6\24\uffff\1\6\66\uffff";
    static final String DFA72_maxS =
        "\2\u00c4\24\uffff\1\u00a2\24\uffff\1\u00c4\66\uffff";
    static final String DFA72_acceptS =
        "\2\uffff\1\1\47\uffff\1\2\67\uffff";
    static final String DFA72_specialS =
        "\142\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\30\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "\1\2\14\uffff\1\2\42\uffff\1\26\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\1\uffff\1\52\16\uffff\1\2\7\uffff\1\2\5\uffff\1\2\1\uffff\1"+
            "\2\3\uffff\1\2\13\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\20\uffff\1\2\50\uffff\10\2\1\uffff\14\2\1\uffff\13\2\1"+
            "\uffff\2\2\26\uffff\1\53\47\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\12\uffff\1\2\5\uffff\1\2\36\uffff\1\2\11\uffff\10\2\1"+
            "\52\33\2\14\uffff\1\2\11\uffff\2\2\7\uffff\1\2\6\uffff\3\2\25"+
            "\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\13"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "572:1: expression : ( classical_expr_wrp | struct_init );";
        }
    }
    static final String DFA76_eotS =
        "\155\uffff";
    static final String DFA76_eofS =
        "\155\uffff";
    static final String DFA76_minS =
        "\2\6\25\uffff\1\6\10\uffff\1\6\12\uffff\1\6\3\uffff\1\6\17\uffff"+
        "\1\174\55\uffff";
    static final String DFA76_maxS =
        "\2\u00c4\25\uffff\1\u00a2\10\uffff\1\172\12\uffff\1\u00c4\3\uffff"+
        "\1\u00c4\17\uffff\1\174\55\uffff";
    static final String DFA76_acceptS =
        "\2\uffff\1\1\21\uffff\1\2\56\uffff\1\3\1\1\23\uffff\1\1\23\uffff"+
        "\1\1";
    static final String DFA76_specialS =
        "\155\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\1\4\uffff\1\24\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\30\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\2\14\uffff\1\2\42\uffff\1\27\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\20\uffff\1\40\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\13\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\20\uffff\1\2\50\uffff\3\2\1\57\4\2\1\uffff\1\53\13\2\1"+
            "\uffff\13\2\1\uffff\2\2\26\uffff\1\2\47\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\74\uffff\1\103\5\uffff\1\77\2\uffff\1\2\55\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\104\6\uffff\1\2\6\uffff\3\2\30"+
            "\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "\1\130\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\6\uffff\3"+
            "\2\30\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\154",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "590:19: ( classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )";
        }
    }
    static final String DFA81_eotS =
        "\150\uffff";
    static final String DFA81_eofS =
        "\150\uffff";
    static final String DFA81_minS =
        "\1\66\1\6\2\uffff\2\6\10\uffff\1\66\7\uffff\1\6\14\uffff\1\6\104"+
        "\uffff";
    static final String DFA81_maxS =
        "\2\u00bd\2\uffff\2\u00c4\10\uffff\1\u00c4\7\uffff\1\u00a2\14\uffff"+
        "\1\u00bd\104\uffff";
    static final String DFA81_acceptS =
        "\2\uffff\1\1\1\2\73\uffff\1\1\14\uffff\1\1\21\uffff\1\1\11\uffff";
    static final String DFA81_specialS =
        "\150\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\1\146\uffff\1\3\37\uffff\1\2",
            "\1\3\12\uffff\1\2\5\uffff\1\2\52\uffff\1\2\1\4\1\uffff\2\2"+
            "\2\uffff\1\5\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\33\uffff\1"+
            "\2\42\uffff\1\2\32\uffff\1\2",
            "",
            "",
            "\1\16\57\uffff\1\26\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\6\uffff\3"+
            "\2\20\uffff\1\3\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\13\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\43\6\uffff\1\2\6\uffff\3\2\30\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\77\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\6\uffff\3\2\20\uffff\1\3\7\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\12\uffff\1\2\5\uffff\1\2\50\uffff\10\2\1\uffff\1\114\13"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\136\47\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\12\uffff\1\136\5\uffff\1\136\52\uffff\1\136\1\3\1\uffff"+
            "\2\136\2\uffff\1\136\1\uffff\1\136\3\uffff\1\136\3\uffff\1\136"+
            "\3\uffff\1\136\2\uffff\1\136\1\uffff\1\136\3\uffff\1\136\2\uffff"+
            "\1\136\33\uffff\1\136\42\uffff\1\136\32\uffff\1\136",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "614:4: ( object_name | func_pointer1 )";
        }
    }
    static final String DFA93_eotS =
        "\u00b9\uffff";
    static final String DFA93_eofS =
        "\60\uffff\1\2\u0088\uffff";
    static final String DFA93_minS =
        "\2\6\23\uffff\1\66\1\6\23\uffff\1\6\2\uffff\4\6\u0088\uffff";
    static final String DFA93_maxS =
        "\2\u00c4\23\uffff\1\u00bd\1\u00a2\23\uffff\1\u00a2\2\uffff\4\u00c4"+
        "\u0088\uffff";
    static final String DFA93_acceptS =
        "\2\uffff\1\2\21\uffff\1\1\54\uffff\4\1\20\uffff\1\1\23\uffff\1\1"+
        "\24\uffff\1\1\22\uffff\3\1\3\uffff\1\1\1\uffff\1\1\32\uffff\1\1"+
        "\4\uffff";
    static final String DFA93_specialS =
        "\u00b9\uffff}>";
    static final String[] DFA93_transitionS = {
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\30\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "\1\2\14\uffff\1\24\42\uffff\1\26\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\20\uffff\1\24\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\13\uffff\1\2\1\uffff\1\2\4\uffff\1\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\52\146\uffff\1\24\37\uffff\1\2",
            "\1\57\20\uffff\1\2\50\uffff\10\2\1\uffff\1\55\2\2\1\56\10\2"+
            "\1\uffff\13\2\1\uffff\2\2\26\uffff\1\60\47\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\20\uffff\1\2\50\uffff\10\2\1\uffff\1\101\2\2\1\102\10"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\104\47\uffff\1\2",
            "",
            "",
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\125\6\uffff\1\2\6\uffff\3\2\30"+
            "\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2",
            "\1\2\57\uffff\1\151\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\30\uffff\1"+
            "\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\176\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\11\uffff\1\24\10\uffff\1\2\6\uffff\3"+
            "\2\30\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\u0091\11\uffff\2\2\5\uffff\1\2\36\uffff\1\u0099\11\uffff"+
            "\1\u0092\2\2\1\u0099\4\2\1\uffff\1\u0099\4\2\1\u0093\1\2\1\u0097"+
            "\4\2\1\u0093\5\2\1\u0093\1\2\1\u0097\3\2\1\u0093\2\2\14\uffff"+
            "\1\u0099\11\uffff\3\2\2\uffff\1\2\3\uffff\1\u0093\6\uffff\3"+
            "\u0099\20\uffff\1\2\4\uffff\1\2\2\uffff\1\u0099\5\uffff\1\u0099"+
            "\1\uffff\1\u0099\3\uffff\1\u0099\13\uffff\1\u00b4\1\uffff\1"+
            "\u0099\4\uffff\1\u0093",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "697:4: ( type_convertion )?";
        }
    }
    static final String DFA94_eotS =
        "\u00b7\uffff";
    static final String DFA94_eofS =
        "\57\uffff\1\2\u0087\uffff";
    static final String DFA94_minS =
        "\1\66\1\6\22\uffff\1\66\1\6\23\uffff\1\6\2\uffff\4\6\u0087\uffff";
    static final String DFA94_maxS =
        "\2\u00c4\22\uffff\1\u00bd\1\u00a2\23\uffff\1\u00a2\2\uffff\4\u00c4"+
        "\u0087\uffff";
    static final String DFA94_acceptS =
        "\2\uffff\1\2\20\uffff\1\1\54\uffff\4\1\20\uffff\1\1\23\uffff\1\1"+
        "\24\uffff\1\1\22\uffff\2\1\3\uffff\1\1\1\uffff\1\1\32\uffff\1\1"+
        "\4\uffff";
    static final String DFA94_specialS =
        "\u00b7\uffff}>";
    static final String[] DFA94_transitionS = {
            "\1\2\11\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\6\uffff\3\2\30\uffff\1\2\5\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\13\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\14\uffff\1\23\42\uffff\1\25\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\20\uffff\1\23\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\13\uffff\1\2\1\uffff\1\2\4\uffff\1\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51\146\uffff\1\23\37\uffff\1\2",
            "\1\56\20\uffff\1\2\50\uffff\10\2\1\uffff\1\54\2\2\1\55\10\2"+
            "\1\uffff\13\2\1\uffff\2\2\26\uffff\1\57\47\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\102\20\uffff\1\2\50\uffff\10\2\1\uffff\1\100\2\2\1\101\10"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\103\47\uffff\1\2",
            "",
            "",
            "\1\2\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\124\6\uffff\1\2\6\uffff\3\2\30"+
            "\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2",
            "\1\2\57\uffff\1\150\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\30\uffff\1"+
            "\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\175\57\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\11\uffff\1\23\10\uffff\1\2\6\uffff\3"+
            "\2\30\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\11\uffff\2\2\5\uffff\1\2\36\uffff\1\u0097\11\uffff\1\u0090"+
            "\2\2\1\u0097\4\2\1\uffff\1\u0097\4\2\1\u0091\1\2\1\u0095\4\2"+
            "\1\u0091\5\2\1\u0091\1\2\1\u0095\3\2\1\u0091\2\2\14\uffff\1"+
            "\u0097\11\uffff\3\2\2\uffff\1\2\3\uffff\1\u0091\6\uffff\3\u0097"+
            "\20\uffff\1\2\4\uffff\1\2\2\uffff\1\u0097\5\uffff\1\u0097\1"+
            "\uffff\1\u0097\3\uffff\1\u0097\13\uffff\1\u00b2\1\uffff\1\u0097"+
            "\4\uffff\1\u0091",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "700:14: ( type_convertion )?";
        }
    }
    static final String DFA104_eotS =
        "\u009d\uffff";
    static final String DFA104_eofS =
        "\1\2\30\uffff\1\2\25\uffff\1\113\155\uffff";
    static final String DFA104_minS =
        "\2\6\27\uffff\1\6\23\uffff\3\6\155\uffff";
    static final String DFA104_maxS =
        "\1\u00bd\1\u00c4\27\uffff\1\u00bd\23\uffff\3\u00c4\155\uffff";
    static final String DFA104_acceptS =
        "\2\uffff\1\2\110\uffff\1\1\1\uffff\1\1\22\uffff\1\1\27\uffff\3\1"+
        "\3\uffff\1\1\11\uffff\1\1\3\uffff\1\1\20\uffff";
    static final String DFA104_specialS =
        "\u009d\uffff}>";
    static final String[] DFA104_transitionS = {
            "\1\2\11\uffff\2\2\44\uffff\1\2\11\uffff\3\2\1\uffff\4\2\2\uffff"+
            "\2\2\1\1\10\2\1\uffff\13\2\1\uffff\2\2\26\uffff\3\2\2\uffff"+
            "\1\2\35\uffff\1\2\37\uffff\1\2",
            "\1\2\57\uffff\1\31\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\30\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\55\11\uffff\1\2\1\56\5\uffff\1\2\36\uffff\1\2\11\uffff\10"+
            "\2\1\uffff\10\2\1\57\3\2\1\uffff\13\2\1\uffff\2\2\26\uffff\3"+
            "\2\2\uffff\1\2\35\uffff\1\2\4\uffff\1\2\32\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\115\12\uffff\1\113\44\uffff\1\2\11\uffff\1\2\2\uffff\1\2"+
            "\5\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\113\3\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff"+
            "\3\2\30\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\13\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\20\uffff\1\2\36\uffff\1\140\11\uffff\1\2\2\uffff\1\2\4"+
            "\uffff\2\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\20\uffff\1\2\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\13\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\171\11\uffff\1\u0088\1\113\44\uffff\1\u0088\11\uffff\1\176"+
            "\2\113\1\2\1\u008c\3\113\1\uffff\1\2\4\113\1\172\1\113\1\170"+
            "\4\113\1\2\3\113\1\u008c\1\113\1\172\1\113\1\170\3\113\1\2\2"+
            "\113\14\uffff\1\2\11\uffff\1\113\2\u0088\2\uffff\1\113\3\uffff"+
            "\1\2\6\uffff\3\2\20\uffff\1\u008c\7\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\13\uffff\1\u008c\1\uffff\1\2\4\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "728:29: ( generic )?";
        }
    }
    static final String DFA189_eotS =
        "\u00b5\uffff";
    static final String DFA189_eofS =
        "\u00b5\uffff";
    static final String DFA189_minS =
        "\1\66\3\uffff\1\6\1\uffff\3\6\1\uffff\1\6\21\uffff\1\6\23\uffff"+
        "\1\6\16\uffff\1\6\16\uffff\1\6\146\uffff";
    static final String DFA189_maxS =
        "\1\u00bf\3\uffff\1\u00c4\1\uffff\1\u00a2\2\173\1\uffff\1\173\21"+
        "\uffff\1\u00c4\23\uffff\1\u00c4\16\uffff\1\u00c4\16\uffff\1\u00c4"+
        "\146\uffff";
    static final String DFA189_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\uffff\1\5\3\uffff\1\4\1\uffff\1\6\21\uffff"+
        "\1\4\23\uffff\1\4\16\uffff\1\4\16\uffff\1\4\15\uffff\3\4\1\uffff"+
        "\1\4\21\uffff\3\4\1\uffff\1\4\21\uffff\3\4\1\uffff\1\4\21\uffff"+
        "\3\4\1\uffff\1\4\21\uffff";
    static final String DFA189_specialS =
        "\u00b5\uffff}>";
    static final String[] DFA189_transitionS = {
            "\1\1\21\uffff\1\4\47\uffff\1\5\31\uffff\1\2\46\uffff\1\3\15"+
            "\uffff\1\3",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\36\uffff\1\6\11\uffff\1\13\2\uffff\1\13"+
            "\4\uffff\1\11\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\12\22\uffff"+
            "\1\13\6\uffff\1\7\2\13\30\uffff\1\13\5\uffff\1\13\1\uffff\1"+
            "\13\3\uffff\1\10\13\uffff\1\13\1\uffff\1\10\4\uffff\1\13",
            "",
            "\1\13\12\uffff\1\34\5\uffff\1\13\50\uffff\10\13\1\uffff\14"+
            "\13\1\uffff\13\13\1\uffff\2\13\27\uffff\1\35\46\uffff\1\13",
            "\1\13\12\uffff\1\60\56\uffff\3\13\1\uffff\4\13\2\uffff\13\13"+
            "\1\uffff\13\13\1\uffff\2\13\27\uffff\1\61",
            "\1\13\12\uffff\1\77\56\uffff\3\13\1\uffff\4\13\2\uffff\13\13"+
            "\1\uffff\13\13\1\uffff\2\13\27\uffff\1\100",
            "",
            "\1\13\12\uffff\1\116\56\uffff\3\13\1\uffff\4\13\2\uffff\13"+
            "\13\1\uffff\13\13\1\uffff\2\13\27\uffff\1\117",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\36\uffff\1\135\11\uffff\1\13\2\uffff\1"+
            "\13\4\uffff\1\117\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13"+
            "\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\141\22\uffff"+
            "\1\13\6\uffff\1\136\2\13\30\uffff\1\13\5\uffff\1\13\1\uffff"+
            "\1\13\3\uffff\1\137\13\uffff\1\13\1\uffff\1\137\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\36\uffff\1\163\11\uffff\1\13\2\uffff\1"+
            "\13\4\uffff\1\117\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13"+
            "\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\167\22\uffff"+
            "\1\13\6\uffff\1\164\2\13\30\uffff\1\13\5\uffff\1\13\1\uffff"+
            "\1\13\3\uffff\1\165\13\uffff\1\13\1\uffff\1\165\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\36\uffff\1\u0089\11\uffff\1\13\2\uffff"+
            "\1\13\4\uffff\1\117\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1"+
            "\13\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\u008d"+
            "\22\uffff\1\13\6\uffff\1\u008a\2\13\30\uffff\1\13\5\uffff\1"+
            "\13\1\uffff\1\13\3\uffff\1\u008b\13\uffff\1\13\1\uffff\1\u008b"+
            "\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\36\uffff\1\u009f\11\uffff\1\13\2\uffff"+
            "\1\13\4\uffff\1\117\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1"+
            "\13\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\u00a3"+
            "\22\uffff\1\13\6\uffff\1\u00a0\2\13\30\uffff\1\13\5\uffff\1"+
            "\13\1\uffff\1\13\3\uffff\1\u00a1\13\uffff\1\13\1\uffff\1\u00a1"+
            "\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA189_eot = DFA.unpackEncodedString(DFA189_eotS);
    static final short[] DFA189_eof = DFA.unpackEncodedString(DFA189_eofS);
    static final char[] DFA189_min = DFA.unpackEncodedStringToUnsignedChars(DFA189_minS);
    static final char[] DFA189_max = DFA.unpackEncodedStringToUnsignedChars(DFA189_maxS);
    static final short[] DFA189_accept = DFA.unpackEncodedString(DFA189_acceptS);
    static final short[] DFA189_special = DFA.unpackEncodedString(DFA189_specialS);
    static final short[][] DFA189_transition;

    static {
        int numStates = DFA189_transitionS.length;
        DFA189_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA189_transition[i] = DFA.unpackEncodedString(DFA189_transitionS[i]);
        }
    }

    class DFA189 extends DFA {

        public DFA189(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 189;
            this.eot = DFA189_eot;
            this.eof = DFA189_eof;
            this.min = DFA189_min;
            this.max = DFA189_max;
            this.accept = DFA189_accept;
            this.special = DFA189_special;
            this.transition = DFA189_transition;
        }
        public String getDescription() {
            return "1092:1: value : ( ID | string_value | null_stmt | array | NUMBER | struct_init2 );";
        }
    }
 

    public static final BitSet FOLLOW_code_internal_in_code431 = new BitSet(new long[]{0x0040000000080002L,0x0000000000000000L,0x0200030020004040L});
    public static final BitSet FOLLOW_operator_wrapper_in_code_internal445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_in_operator_wrapper462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_wrapper_in_operator480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_operator486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_wrapper_in_operator491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_operator498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_operator504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_extern542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_extern545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_extern548 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xF7FFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000000003FL});
    public static final BitSet FOLLOW_set_in_extern550 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_extern555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_implementation586 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_implementation589 = new BitSet(new long[]{0x0040000000010000L,0x0000000008004008L,0x0200400020004040L,0x0000000000000004L});
    public static final BitSet FOLLOW_category_in_implementation592 = new BitSet(new long[]{0x0040000000010000L,0x0000000008004000L,0x0200400020004040L,0x0000000000000004L});
    public static final BitSet FOLLOW_super_class_in_implementation595 = new BitSet(new long[]{0x0040000000000000L,0x0000000008004000L,0x0200400020004040L,0x0000000000000004L});
    public static final BitSet FOLLOW_implementation_body_in_implementation600 = new BitSet(new long[]{0x0040000000000000L,0x0000000008004000L,0x0200404020004040L,0x0000000000000004L});
    public static final BitSet FOLLOW_166_in_implementation605 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_category620 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_category623 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_category626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_in_implementation_body650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_implementation_body656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_wrapper_in_implementation_body668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_implementation_body674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_synthesize703 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize706 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synthesize709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_typedef721 = new BitSet(new long[]{0x0000000004000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_typedef725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_typedef729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_in_static_section_wrapper744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_section764 = new BitSet(new long[]{0x0040000004080000L,0x8000000000000100L,0x4000000020004000L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_section766 = new BitSet(new long[]{0x0040000004000000L,0x8000000000000100L,0x4000000020004000L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_static_section769 = new BitSet(new long[]{0x0040000004000000L,0x8000000000000100L,0x4000000020000000L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_static_section772 = new BitSet(new long[]{0x0040000000000000L,0x8000000000000100L,0x4000000020000000L});
    public static final BitSet FOLLOW_static_section2_in_static_section775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_section_in_static_section2784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper2_in_static_section2791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section3_in_static_section2798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_inline_section810 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_field_type_in_inline_section813 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_inline_section815 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000108L});
    public static final BitSet FOLLOW_method_params2_in_inline_section818 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_inline_section822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_inline_section826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_static_section3837 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_static_section3839 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000248L});
    public static final BitSet FOLLOW_indexed_in_static_section3841 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000248L});
    public static final BitSet FOLLOW_static_end_in_static_section3845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper3_in_static_end857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_in_static_end863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_internal_in_field_end874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_end_internal892 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_end_internal895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method3_in_implementation_method_wrapper3907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body3_in_implementation_method3925 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000100L,0x0004000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method3928 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L,0x0004000000000000L});
    public static final BitSet FOLLOW_attribute_in_implementation_method3933 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method3938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_attribute951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_attribute954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_attribute957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_181_in_attribute960 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute963 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute966 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_attribute969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method2981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method2986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_in_field_type_started_wrapper998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_field_type_started1017 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_field_type_started1019 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000048L});
    public static final BitSet FOLLOW_classic_method_declaration_wrapper_in_field_type_started1022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_wrapper_in_field_type_started1026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_classic_method_declaration1075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_classic_method_declaration1080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_in_implementation_method_wrapper1093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method2_in_implementation_method_wrapper21110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_implementation_method1127 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000100L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method1129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method1134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_block_wrapper1147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block1169 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xBD8BA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_block_internal_full_in_block1175 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xBD8BA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_block_in_block1179 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xBD8BA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_R_FBR_in_block1187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block_case1202 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xBDCBA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_block_internal_full_in_block_case1208 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xBDCBA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_block_in_block_case1212 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214309L,0xBDCBA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_default_stmt_in_block_case1221 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_block_case1226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_full1238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_in_block_internal1249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_wrapper_in_block_internal1259 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expression_in_block_internal1271 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_wrapper_in_block_internal1278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_wrapper_in_block_internal1283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_wrapper_in_block_internal1293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_operators_in_block_internal1313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_variable_in_block_internal1318 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_variable_in_block_internal1325 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_started_in_block_internal1332 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_type_started_in_block_internal1339 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_wrapper_in_block_internal1352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_operator_in_goto_wrapper1364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_goto_operator1381 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_goto_operator1383 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_goto_operator1385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_in_variable_init_wrapper1396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_variable_init1414 = new BitSet(new long[]{0x0040000000010000L,0x8000000000000000L,0x2000000020000000L});
    public static final BitSet FOLLOW_full_expr2_in_variable_init1418 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_variable_init1421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_variable_init1426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_types_in_known_type_started1438 = new BitSet(new long[]{0x0040000000000040L,0x0000000000000000L,0x2000000020000000L});
    public static final BitSet FOLLOW_ASTERISK_in_known_type_started1440 = new BitSet(new long[]{0x0040000000000040L,0x0000000000000000L,0x2000000020000000L});
    public static final BitSet FOLLOW_full_expr2_in_known_type_started1443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_in_typeof_started1455 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_typeof_started1457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_variable1470 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_struct_variable1472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_enum_variable1481 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_enum_variable1483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_const_expression1494 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_const_expression1496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper1505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_throw_stmt1522 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_throw_stmt1525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_try_stmt1536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_in_try_stmt1539 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000009000000000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt1542 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000009000000000L});
    public static final BitSet FOLLOW_167_in_try_stmt1546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_in_try_stmt1549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_catch_stmt1563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_catch_stmt1566 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1569 = new BitSet(new long[]{0x0040000000000040L});
    public static final BitSet FOLLOW_ASTERISK_in_catch_stmt1572 = new BitSet(new long[]{0x0040000000000040L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1575 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_catch_stmt1578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_in_catch_stmt1581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_switch_stmt_wrapper1594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_switch_stmt1611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_switch_stmt1614 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_switch_expr_in_switch_stmt1617 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_switch_stmt1619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_switch_body_wrapper_in_switch_stmt1625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_switch_body_wrapper1638 = new BitSet(new long[]{0x0040000004080240L,0x8801000228214209L,0xBDDBA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_switch_body_in_switch_body_wrapper1640 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_switch_body_wrapper1642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_switch_body1661 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214209L,0xBDDBA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_switch_internal_in_switch_body1666 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0050000000000000L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_switch_expr1679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_wrapper_in_switch_internal1696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_wrapper_in_switch_internal1702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_case_stmt_wrapper1711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_case_stmt1728 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000000L,0x8002000000001C00L});
    public static final BitSet FOLLOW_case_expr_wrapper_in_case_stmt1731 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_case_stmt1734 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214309L,0xBD8BA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_case_body_wrapper_in_case_stmt1739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_body_in_case_body_wrapper1753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_case_body1772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_case_body1779 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214209L,0xBD8BA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_case_expr_in_case_expr_wrapper1795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_case_expr1817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_case_expr1824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_case_in_block_break1835 = new BitSet(new long[]{0x0000000000000202L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_single_operators_in_block_break1837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_default_stmt_wrapper1849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_default_stmt1866 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_default_stmt1869 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214309L,0xBD8BA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_default_body_wrapper_in_default_stmt1874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_body_in_default_body_wrapper1887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_default_body1907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_default_body1913 = new BitSet(new long[]{0x0040000004080242L,0x8001000228214209L,0xBD8BA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_SINGLE_OP_in_single_operators1928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_wrapper_in_single_operators1935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_break_wrapper1947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_WORD_in_break_stmt1965 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_break_stmt1968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_do_stmt1978 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xBD8BA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_if_stmt_block_in_do_stmt1981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_do_stmt1984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_do_stmt1987 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_expression_in_do_stmt1990 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_do_stmt1992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper2001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_while_stmt2020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_while_stmt2023 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_while_expr_in_while_stmt2026 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_while_stmt2028 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xBD8BA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_while_stmt2031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_while_expr2044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper2063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_for_stmt2080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_for_stmt2083 = new BitSet(new long[]{0x0040000000000040L,0x8001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_for_stmt_expr_wrapper_in_for_stmt2086 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_for_stmt2088 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xBD8BA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_if_stmt_block_in_for_stmt2091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_expr_in_for_stmt_expr_wrapper2103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_for_stmt_expr2122 = new BitSet(new long[]{0x0040000000000000L,0x8000000000000000L,0x2000000020000000L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr2_in_for_stmt_expr2130 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_for_stmt_int12164 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000208L,0xA002282000001C00L,0x0000000000000010L});
    public static final BitSet FOLLOW_object_wrapped2_in_for_stmt_int12166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22186 = new BitSet(new long[]{0x0040000000000040L,0x8001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22188 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22191 = new BitSet(new long[]{0x0040000000000042L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_return_stmt2210 = new BitSet(new long[]{0x0040000000000040L,0x8001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_return_stmt2212 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_return_stmt2215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_if_stmt_wrapper2236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_if_stmt2252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_if_stmt2255 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_if_expr_in_if_stmt2258 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_if_stmt2260 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xBD8BA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_if_stmt2263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_if_expr2276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_else_stmt2295 = new BitSet(new long[]{0x0040000004080240L,0x8001000228214309L,0xBD8BA82020005C4CL,0x0000000000000033L});
    public static final BitSet FOLLOW_if_stmt_block_in_else_stmt2298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_if_stmt_block2324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_if_stmt_block2330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_in_static_start_wrapper2342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_start2360 = new BitSet(new long[]{0x0040000000080000L,0x0000000000000000L,0x2000000020000000L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_start2362 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000020000000L});
    public static final BitSet FOLLOW_static_type_wrapper_in_static_start2365 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000020000000L});
    public static final BitSet FOLLOW_full_expr2_in_static_start2368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_type_in_static_type_wrapper2380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_static_type2399 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASTERISK_in_static_type2401 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_id_part_end_internal_in_id_part_end2413 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_DOT_in_id_part_end_internal2428 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_162_in_id_part_end_internal2432 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_id_part_in_id_part_end_internal2435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_internal_in_id_part2473 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000208L});
    public static final BitSet FOLLOW_function_brackets_wrapper_in_id_part2475 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_index_wrapper_in_id_part2478 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_id_part_in_object_name2491 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_name2493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_method_call_wrapper2507 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000208L,0x2000000000000400L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper2509 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_method_call_wrapper2511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper22534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_in_method_call22553 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_method_name_in_method_call22555 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_method_call_message_list_wrapper_in_method_call22559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_internal_in_object_wrapper2570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_in_object_wrapper_internal2589 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_object_wrapper_internal2612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_message32624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_internal_in_type_convertion2643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_type_convertion_internal2662 = new BitSet(new long[]{0x0040000000080000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_convertion_internal2664 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_type_convertion_internal2667 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_type_internal_in_type_convertion_internal2670 = new BitSet(new long[]{0x0000000000000040L,0x0400000000001000L});
    public static final BitSet FOLLOW_generic_in_type_convertion_internal2672 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_type_convertion_internal2675 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_type_convertion_internal2678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name2696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2730 = new BitSet(new long[]{0x0040000000010002L});
    public static final BitSet FOLLOW_method_call_message_wrapper_in_method_call_message_list2732 = new BitSet(new long[]{0x0040000000010002L});
    public static final BitSet FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_method_call_message_first2760 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_message_in_method_call_message_first2763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_in_method_call_message_wrapper2773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_in_method_call_message2792 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_incomplete_prefix_in_method_call_message2796 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_message_in_method_call_message2800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_msg_expr_in_message2809 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_message2812 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_msg_expr_in_message2814 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_msg_expr2848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expression2864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_in_expression2869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_in_full_expr_wrapper2880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr2897 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr2900 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr2902 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr22913 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr22916 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000020000000L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr22918 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_expr_assign_in_expr_assign_wrapper2929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_wrapper_in_expr_assign2948 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214309L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_assign2951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_wrapper_in_expr_assign2955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer2_in_expr_assign2960 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_method_call_wrapper_in_expr_assign2962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_in_array_init_wrapper2974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array_init2993 = new BitSet(new long[]{0x0040000000000040L,0x0801000228214309L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init2996 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array_init2999 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214309L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init3001 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array_init3007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_wrapper_in_classical_expr_wrp33019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_classical_expr_wrp33025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_in_classical_expr_wrp3038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_classical_expr3055 = new BitSet(new long[]{0x0000000000000002L,0x0000000954888864L});
    public static final BitSet FOLLOW_expr_question_wrapper_in_classical_expr3058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr3062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr2_in_classical_expr_wrp23074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_classical_expr23092 = new BitSet(new long[]{0x0000000000000002L,0x0000000914888864L});
    public static final BitSet FOLLOW_func_pointer1_in_classical_expr23096 = new BitSet(new long[]{0x0000000000000002L,0x0000000914888864L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr23099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_question_in_expr_question_wrapper3109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_QUESTION_in_expr_question3126 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question3128 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_expr_question3130 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question3132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_in_assign_wrapper3141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_in_simple_expr_wrapper3214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_or_in_simple_expr3232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_and_wrapper_in_expr_or_or3249 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_L_OR_OR_in_expr_or_or3252 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_or_or3254 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_expr_and_and_in_expr_and_and_wrapper3265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_wrapper_in_expr_and_and3282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_L_AND_AND_in_expr_and_and3285 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_and_and3287 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_in_expr_or_wrapper3298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_xor_wrapper_in_expr_or3316 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_L_OR_in_expr_or3319 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_or3321 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400000L});
    public static final BitSet FOLLOW_expr_xor_in_expr_xor_wrapper3332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_wrapper_in_expr_xor3349 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_L_XOR_in_expr_xor3352 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_xor3354 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_expr_and_in_expr_and_wrapper3366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eq_wrapper_in_expr_and3384 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_AND_in_expr_and3387 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_and3389 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_expr_eq_in_expr_eq_wrapper3401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_cond_wrapper_in_expr_eq3419 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100080L});
    public static final BitSet FOLLOW_set_in_expr_eq3422 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_eq3430 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100080L});
    public static final BitSet FOLLOW_expr_cond_in_expr_cond_wrapper3441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mov_wrapper_in_expr_cond3458 = new BitSet(new long[]{0x0000000000000002L,0x0000000000063000L});
    public static final BitSet FOLLOW_set_in_expr_cond3461 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_cond3477 = new BitSet(new long[]{0x0000000000000002L,0x0000000000063000L});
    public static final BitSet FOLLOW_expr_mov_in_expr_mov_wrapper3488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_add_wrapper_in_expr_mov3506 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000400L});
    public static final BitSet FOLLOW_set_in_expr_mov3509 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_mov3517 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000400L});
    public static final BitSet FOLLOW_expr_add_in_expr_add_wrapper3529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mult_wrapper_in_expr_add3546 = new BitSet(new long[]{0x0000000000000002L,0x0000000008004000L});
    public static final BitSet FOLLOW_set_in_expr_add3549 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_add3557 = new BitSet(new long[]{0x0000000000000002L,0x0000000008004000L});
    public static final BitSet FOLLOW_expr_mult_in_expr_mult_wrapper3568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_type_wrapper_in_expr_mult3585 = new BitSet(new long[]{0x0000000000000042L,0x0000000002000010L});
    public static final BitSet FOLLOW_set_in_expr_mult3588 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_mult3600 = new BitSet(new long[]{0x0000000000000042L,0x0000000002000010L});
    public static final BitSet FOLLOW_expr_type_in_expr_type_wrapper3612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_in_expr_type3629 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_expr_unname_in_expr_type3632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_expr_unname3643 = new BitSet(new long[]{0x0040000000000000L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_type_convertion_in_expr_unname3645 = new BitSet(new long[]{0x0040000000000000L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_expr_addr_in_expr_unname3650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_AND_in_expr_addr3660 = new BitSet(new long[]{0x0040000000000000L,0x0001000228214208L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_expr_sign_in_expr_addr3663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_wrapper_in_expr_sign3682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_in_expr_not_wrapper3692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_NOT_in_expr_not3711 = new BitSet(new long[]{0x0040000000000000L,0x0001000220010208L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_expr_not2_in_expr_not3714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_TILDA_in_expr_not23724 = new BitSet(new long[]{0x0040000000000000L,0x0001000020010208L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_expr_size_of_in_expr_not23727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_expr_size_of3737 = new BitSet(new long[]{0x0040000000000000L,0x0001000020010208L,0xA002282000001C00L,0x0000000000000010L});
    public static final BitSet FOLLOW_expr_xcrement_in_expr_size_of3740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped1_in_expr_xcrement3759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped2_in_object_wrapped13769 = new BitSet(new long[]{0x0000000000000002L,0x0000000020010000L});
    public static final BitSet FOLLOW_196_in_object_wrapped23790 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_object_name_in_object_wrapped23793 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_generic_in_object_wrapped23795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapped23801 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_object_wrapped23809 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_object_wrapped23811 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_object_wrapped23813 = new BitSet(new long[]{0x0000000000800002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_wrapper_in_object_wrapped23821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_started_in_object_wrapped23826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_brackets_in_function_brackets_wrapper3838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_function_brackets3857 = new BitSet(new long[]{0x0040000000000040L,0x0401000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets3860 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_function_brackets3863 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets3865 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_function_brackets3871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_in_index_wrapper3881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index3898 = new BitSet(new long[]{0x0040000000000040L,0x1001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_index_number_wrapper_in_index3900 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index3903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_number_wrapper3912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_struct_init3929 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_init3932 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_struct_init3935 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_struct_init3938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init3941 = new BitSet(new long[]{0x0040000000800040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init3947 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init3950 = new BitSet(new long[]{0x0040000000800040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init3953 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init3959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init23973 = new BitSet(new long[]{0x0040000000800040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init23979 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init23982 = new BitSet(new long[]{0x0040000000800040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init23985 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init23991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_var_in_struct_init_line4004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_expression_in_struct_init_line4009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_expression4022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_method4033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_struct_init_var4045 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_id_part_in_struct_init_var4047 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000040L});
    public static final BitSet FOLLOW_L_EQ_in_struct_init_var4052 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214309L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_in_q_brackets_in_struct_init_var4056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_struct_init_var4060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_wrapper_in_a_started4072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_wrapper_in_a_started4077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_wrapper_in_a_started4082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_typeof4092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_typeof4095 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_typeof4098 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_typeof4101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_in_a_selector_wrapper4112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_a_selector4129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_a_selector4131 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_selector4133 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_selector4135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_in_a_protocol_wrapper4145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_a_protocol4163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_a_protocol4165 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_protocol4167 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_protocol4169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_in_a_encode_wrapper4179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_value_in_a_selector_value_wrapper4196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_a_selector_value4215 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4219 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_ID_in_a_selector_value4223 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4226 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_165_in_a_encode4237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_a_encode4239 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFBFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000000003FL});
    public static final BitSet FOLLOW_R_BR_in_a_encode4247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_const_expr_wrapper4256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_const_expr4275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_const_expr4279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL2_in_const_expr4283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_const_expr4287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_const_expr4291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_string_literal34309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_brackets4319 = new BitSet(new long[]{0x0040000000000040L,0x0401000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_expression_in_method_brackets4323 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_brackets4327 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_brackets4330 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_brackets4336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14346 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000008L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer14352 = new BitSet(new long[]{0x0040000000000040L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14354 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14357 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer14360 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer14363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24376 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer24379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24381 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer24384 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer24390 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer_params4406 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4409 = new BitSet(new long[]{0x0000000000020040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4412 = new BitSet(new long[]{0x0000000000020040L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_func_pointer_params4416 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4419 = new BitSet(new long[]{0x0000000000020040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4422 = new BitSet(new long[]{0x0000000000020040L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer_params4427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_start4438 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_brackets_in_method_start4440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_in_q_brackets4451 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214309L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_q_brackets_source_in_in_q_brackets4454 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_in_q_brackets4456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_source_in_q_brackets_source4468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_br_source_in_q_brackets_source4473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4486 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4493 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_q_source4509 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_source4513 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_expression_in_q_source4516 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_ID_in_simple_method_call4533 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_brackets_in_simple_method_call4535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index_brackets4551 = new BitSet(new long[]{0x0040000000000040L,0x0001000228214209L,0xA002282000001C08L,0x0000000000000010L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_brackets4554 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index_brackets4556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper4570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_interface_declaration4588 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_interface_declaration4591 = new BitSet(new long[]{0x0000000004010000L,0x0000000008004108L});
    public static final BitSet FOLLOW_interface_category_in_interface_declaration4594 = new BitSet(new long[]{0x0000000004010000L,0x0000000008004100L});
    public static final BitSet FOLLOW_super_class_in_interface_declaration4598 = new BitSet(new long[]{0x0000000004000000L,0x0000000008004100L});
    public static final BitSet FOLLOW_annotated_block_in_interface_declaration4605 = new BitSet(new long[]{0x0000000004000000L,0x0000000008004100L,0x0000004000000000L});
    public static final BitSet FOLLOW_interface_methods_in_interface_declaration4609 = new BitSet(new long[]{0x0000000004000000L,0x0000000008004100L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_interface_declaration4618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_annotated_block4629 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L,0x0000140020000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_annotated_block_internal_in_annotated_block4634 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L,0x0000140020000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_R_FBR_in_annotated_block4639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_annotation_in_annotated_block_internal4652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_public_block_internal_in_annotated_block_internal4659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_field_declaration_in_public_block_internal4694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_declaration_in_public_block_internal4699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_simple_field_declaration4711 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_simple_field_declaration4713 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_field_declaration4716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_union_declaration4729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_union_declaration4732 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_simple_field_declaration_in_union_declaration4738 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_R_FBR_in_union_declaration4743 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_union_declaration4746 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_union_declaration4749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_super_class4763 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_super_class4766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_interface_category4786 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_interface_category4789 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_interface_category4792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_declaration_in_interface_methods4821 = new BitSet(new long[]{0x0000000004000002L,0x0000000008004000L});
    public static final BitSet FOLLOW_interface_method_in_interface_methods4825 = new BitSet(new long[]{0x0000000004000002L,0x0000000008004000L});
    public static final BitSet FOLLOW_method_header_in_interface_method4837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_method_header4856 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_method_header4858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_header_body4868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_type_in_method_header_body4871 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_method_header_body4874 = new BitSet(new long[]{0x0040000000030002L,0x0000000000000008L,0x2000000000000000L});
    public static final BitSet FOLLOW_method_params_in_method_header_body4877 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_va_args_wrapper_in_method_header_body4880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_va_args_in_va_args_wrapper4890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_va_args4907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_va_args4910 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_va_args4913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_type_in_method_header_body24924 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_method_header_body24926 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body24929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body34939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper4948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type4980 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000020004000L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_type4983 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_type_internal_in_method_type4986 = new BitSet(new long[]{0x0000000000000040L,0x0400000000001000L});
    public static final BitSet FOLLOW_generic_in_method_type4989 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type4992 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type4995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type5009 = new BitSet(new long[]{0x0040000000080040L,0x0400000000001000L,0x0000000020000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_type5012 = new BitSet(new long[]{0x0040000000000040L,0x0400000000001000L,0x0000000020000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_known_types_in_method_type5015 = new BitSet(new long[]{0x0040000000000040L,0x0400000000001000L});
    public static final BitSet FOLLOW_ID_in_method_type5018 = new BitSet(new long[]{0x0040000000000040L,0x0400000000001000L});
    public static final BitSet FOLLOW_generic_in_method_type5021 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type5024 = new BitSet(new long[]{0x0000000000000040L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type5027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal1_in_type_internal5052 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_L_KBR_in_type_internal5055 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_type_internal5058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_LESS_in_generic5092 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_generic_internal_in_generic5094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_L_MORE_in_generic5096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_generic_internal5115 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal5117 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_COMMA_in_generic_internal5121 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_ID_in_generic_internal5124 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal5127 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_L_BR_in_method_params25139 = new BitSet(new long[]{0x0040000004080000L,0x0000000000000000L,0x0000000020004000L,0x0000000000000010L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25142 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_params25146 = new BitSet(new long[]{0x0040000004080000L,0x0000000000000000L,0x0000000020004000L,0x0000000000000010L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25149 = new BitSet(new long[]{0x0000000000020000L,0x0400000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_params25153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param2_in_method_param_wrapper25164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_param25182 = new BitSet(new long[]{0x0040000004000000L,0x0000000000000000L,0x0000000020004000L,0x0000000000000010L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_method_param25185 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000020004000L,0x0000000000000010L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_param25188 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_method_param25191 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_field_type_in_method_param25194 = new BitSet(new long[]{0x0040000000000002L,0x0000000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_method_param25196 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_indexed_in_method_param25199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_indexed5209 = new BitSet(new long[]{0x0000000000000000L,0x1001000000000000L});
    public static final BitSet FOLLOW_NUMBER_in_indexed5211 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_indexed5214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params5224 = new BitSet(new long[]{0x0040000000010002L,0x0000000000000008L,0x2000000000000000L});
    public static final BitSet FOLLOW_prefix_in_method_param5246 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000008L,0x2000000000000000L});
    public static final BitSet FOLLOW_COLON_in_method_param5251 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000008L,0x2000000000000000L});
    public static final BitSet FOLLOW_method_type_in_method_param5254 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_method_param5257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5269 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_prefix5271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_incomplete_prefix5290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5332 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000100L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_struct_declaration5338 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_typedef_struct_body_in_typedef_struct_declaration5343 = new BitSet(new long[]{0x0040000000000000L,0x0800000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_struct_declaration5347 = new BitSet(new long[]{0x0040000000000002L,0x8000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5350 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_struct_declaration5353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_struct_field5396 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_struct_field5398 = new BitSet(new long[]{0x0000000000020000L,0x8000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_field5402 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_struct_field5405 = new BitSet(new long[]{0x0000000000020000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_field5409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_enum_declaration5445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_typedef_declaration5465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_declaration5467 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5470 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_typedef_declaration5474 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5477 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_declaration5481 = new BitSet(new long[]{0x0040000000000000L,0x8000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_typedef_declaration5484 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_declaration5487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_declaration_element5516 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_L_EQ_in_typedef_declaration_element5520 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_set_in_typedef_declaration_element5523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper5544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_wrapper_in_field_declaration5561 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_field_type_in_field_declaration5564 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_field_declaration5566 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000040L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration5568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_declaration_end5579 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration_end5582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_in_type_start_wrapper5592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_start5609 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_field_type_in_type_start5612 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_name_in_type_start5614 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000048L});
    public static final BitSet FOLLOW_type_end_in_type_start5616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration4_in_type_end5624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration4_in_type_end5637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_declaration45659 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration45662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_declaration45675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_block_wrapper_in_method_declaration45680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_in_field_modifier_wrapper5692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_field_modifier5710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_internal_in_field_type5722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_field_type_internal5741 = new BitSet(new long[]{0x0000000000000042L,0x0000000000001000L});
    public static final BitSet FOLLOW_generic_in_field_type_internal5743 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASTERISK_in_field_type_internal5746 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_name_internal_in_name5760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_EQ_in_value_set5800 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000100L,0x8002000000000400L});
    public static final BitSet FOLLOW_value_in_value_set5803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_value5819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_value_in_value5823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_value5827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_in_value5831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_value5835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init2_in_value5839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string_value5849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array5870 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000100L,0x8002000000000400L});
    public static final BitSet FOLLOW_value_in_array5873 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array5877 = new BitSet(new long[]{0x0040000000000000L,0x0001000000000100L,0x8002000000000400L});
    public static final BitSet FOLLOW_value_in_array5880 = new BitSet(new long[]{0x0000000000020000L,0x0800000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array5884 = new BitSet(new long[]{0x0000000000000002L});

}