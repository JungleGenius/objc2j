// $ANTLR 3.4 C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g 2013-08-27 13:37:22

package ru.andremoniy.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcmParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARRAY_INIT", "ASSIGN", "ASTERISK", "BLOCK", "BREAK", "BREAK_WORD", "CASE_BODY", "CASE_EXPR", "CASE_STMT", "CATEGORY", "CLASSICAL_EXPR", "CLASSICAL_EXPR_2", "COLON", "COMMA", "CONST_EXPR", "CONST_EXPR2", "CONST_PREFIX", "DEFAULT_BODY", "DEFAULT_STMT", "DIGIT", "DOT", "ENCODE", "ENUM", "ENUM_PREFIX", "ESC", "EXPR", "EXPR_ADD", "EXPR_AND", "EXPR_AND_AND", "EXPR_ASSIGN", "EXPR_COND", "EXPR_EQ", "EXPR_FULL", "EXPR_MOV", "EXPR_MULT", "EXPR_NOT", "EXPR_OR", "EXPR_OR_OR", "EXPR_QUESTION", "EXPR_UNNAME", "EXPR_XOR", "EXTERN", "FIELD", "FIELD_ACCESS", "FIELD_TYPE_STARTED", "FOR_IN_STMT", "FOR_STMT", "FOR_STMT_EXPR", "FUNCTION", "GENERIC", "GOTO", "ID", "IF_BLOCK", "IF_EXPR", "IF_STMT", "IMPLEMENTATION", "INCOMPLETE_PREFIX", "INDEX", "INDEX_NUMBER", "INTERFACE", "LETTER", "L_AND", "L_AND_AND", "L_AND_EQ", "L_BR", "L_BR_TOKEN", "L_DIV", "L_DIV_EQ", "L_EQ", "L_EQ_EQ", "L_FBR", "L_KBR", "L_LEFT", "L_LEFT_EQ", "L_LESS", "L_LESS_EQ", "L_MINUS", "L_MINUS_EQ", "L_MINUS_MINUS", "L_MORE", "L_MORE_EQ", "L_MULT_EQ", "L_NEQ", "L_NOT", "L_OR", "L_OR_EQ", "L_OR_OR", "L_PERC", "L_PERC_EQ", "L_PLUS", "L_PLUS_EQ", "L_PLUS_PLUS", "L_QUESTION", "L_RIGHT", "L_RIGHT_EQ", "L_TILDA", "L_XOR", "L_XOR_EQ", "MESSAGE", "METHOD", "METHOD_CALL", "METHOD_MSG", "METHOD_NAME", "MODIFIER", "MSG_LIST", "MULTI_COMMENT", "M_IMPORT", "M_TYPE_START", "NAME", "NOT", "NUMBER", "OBJECT", "OP", "OPER", "OPERATOR", "PARAM", "PREFIX", "PREPROCESSOR_DECLARATION", "PROTOCOL", "RETURN_STMT", "R_BR", "R_FBR", "R_KBR", "SELECTOR", "SELECTOR_VALUE", "SEMICOLON", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_OP", "SIZEOF", "STATIC", "STATIC_METHOD", "STATIC_PREFIX", "STATIC_START", "STATIC_TYPE", "STRING", "STRING_LITERAL", "STRING_LITERAL2", "STRING_LITERAL3", "STRUCT_FIELD", "STRUCT_PREFIX", "STRUCT_VARIABLE", "SUPER_CLASS", "SWITCH", "SWITCH_BODY", "SWITCH_EXPRESSION", "THROW_EXCEPTION", "THROW_STMT", "TYPE", "TYPEDEF", "TYPEDEF_ELEMENT", "TYPEDEF_STRUCT", "TYPE_CONVERTION", "TYPE_CONVERTION2", "TYPE_RENAME", "VALUE", "VARIABLE_INIT", "VA_ARGS", "VOID", "WHILE_EXPR", "WHILE_STMT", "WS", "'\"C\"'", "'->'", "'...'", "'@catch'", "'@encode'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@private'", "'@property'", "'@protocol'", "'@public'", "'@selector'", "'@synthesize'", "'@throw'", "'@try'", "'Nil'", "'__attribute__'", "'__typeof__'", "'assign'", "'case'", "'constructor'", "'copy'", "'default'", "'do'", "'else'", "'extern'", "'for'", "'goto'", "'if'", "'in'", "'inline'", "'nil'", "'readwrite'", "'return'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'while'"
    };

    public static final int EOF=-1;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int T__198=198;
    public static final int T__199=199;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int T__202=202;
    public static final int T__203=203;
    public static final int T__204=204;
    public static final int T__205=205;
    public static final int T__206=206;
    public static final int ARRAY_INIT=4;
    public static final int ASSIGN=5;
    public static final int ASTERISK=6;
    public static final int BLOCK=7;
    public static final int BREAK=8;
    public static final int BREAK_WORD=9;
    public static final int CASE_BODY=10;
    public static final int CASE_EXPR=11;
    public static final int CASE_STMT=12;
    public static final int CATEGORY=13;
    public static final int CLASSICAL_EXPR=14;
    public static final int CLASSICAL_EXPR_2=15;
    public static final int COLON=16;
    public static final int COMMA=17;
    public static final int CONST_EXPR=18;
    public static final int CONST_EXPR2=19;
    public static final int CONST_PREFIX=20;
    public static final int DEFAULT_BODY=21;
    public static final int DEFAULT_STMT=22;
    public static final int DIGIT=23;
    public static final int DOT=24;
    public static final int ENCODE=25;
    public static final int ENUM=26;
    public static final int ENUM_PREFIX=27;
    public static final int ESC=28;
    public static final int EXPR=29;
    public static final int EXPR_ADD=30;
    public static final int EXPR_AND=31;
    public static final int EXPR_AND_AND=32;
    public static final int EXPR_ASSIGN=33;
    public static final int EXPR_COND=34;
    public static final int EXPR_EQ=35;
    public static final int EXPR_FULL=36;
    public static final int EXPR_MOV=37;
    public static final int EXPR_MULT=38;
    public static final int EXPR_NOT=39;
    public static final int EXPR_OR=40;
    public static final int EXPR_OR_OR=41;
    public static final int EXPR_QUESTION=42;
    public static final int EXPR_UNNAME=43;
    public static final int EXPR_XOR=44;
    public static final int EXTERN=45;
    public static final int FIELD=46;
    public static final int FIELD_ACCESS=47;
    public static final int FIELD_TYPE_STARTED=48;
    public static final int FOR_IN_STMT=49;
    public static final int FOR_STMT=50;
    public static final int FOR_STMT_EXPR=51;
    public static final int FUNCTION=52;
    public static final int GENERIC=53;
    public static final int GOTO=54;
    public static final int ID=55;
    public static final int IF_BLOCK=56;
    public static final int IF_EXPR=57;
    public static final int IF_STMT=58;
    public static final int IMPLEMENTATION=59;
    public static final int INCOMPLETE_PREFIX=60;
    public static final int INDEX=61;
    public static final int INDEX_NUMBER=62;
    public static final int INTERFACE=63;
    public static final int LETTER=64;
    public static final int L_AND=65;
    public static final int L_AND_AND=66;
    public static final int L_AND_EQ=67;
    public static final int L_BR=68;
    public static final int L_BR_TOKEN=69;
    public static final int L_DIV=70;
    public static final int L_DIV_EQ=71;
    public static final int L_EQ=72;
    public static final int L_EQ_EQ=73;
    public static final int L_FBR=74;
    public static final int L_KBR=75;
    public static final int L_LEFT=76;
    public static final int L_LEFT_EQ=77;
    public static final int L_LESS=78;
    public static final int L_LESS_EQ=79;
    public static final int L_MINUS=80;
    public static final int L_MINUS_EQ=81;
    public static final int L_MINUS_MINUS=82;
    public static final int L_MORE=83;
    public static final int L_MORE_EQ=84;
    public static final int L_MULT_EQ=85;
    public static final int L_NEQ=86;
    public static final int L_NOT=87;
    public static final int L_OR=88;
    public static final int L_OR_EQ=89;
    public static final int L_OR_OR=90;
    public static final int L_PERC=91;
    public static final int L_PERC_EQ=92;
    public static final int L_PLUS=93;
    public static final int L_PLUS_EQ=94;
    public static final int L_PLUS_PLUS=95;
    public static final int L_QUESTION=96;
    public static final int L_RIGHT=97;
    public static final int L_RIGHT_EQ=98;
    public static final int L_TILDA=99;
    public static final int L_XOR=100;
    public static final int L_XOR_EQ=101;
    public static final int MESSAGE=102;
    public static final int METHOD=103;
    public static final int METHOD_CALL=104;
    public static final int METHOD_MSG=105;
    public static final int METHOD_NAME=106;
    public static final int MODIFIER=107;
    public static final int MSG_LIST=108;
    public static final int MULTI_COMMENT=109;
    public static final int M_IMPORT=110;
    public static final int M_TYPE_START=111;
    public static final int NAME=112;
    public static final int NOT=113;
    public static final int NUMBER=114;
    public static final int OBJECT=115;
    public static final int OP=116;
    public static final int OPER=117;
    public static final int OPERATOR=118;
    public static final int PARAM=119;
    public static final int PREFIX=120;
    public static final int PREPROCESSOR_DECLARATION=121;
    public static final int PROTOCOL=122;
    public static final int RETURN_STMT=123;
    public static final int R_BR=124;
    public static final int R_FBR=125;
    public static final int R_KBR=126;
    public static final int SELECTOR=127;
    public static final int SELECTOR_VALUE=128;
    public static final int SEMICOLON=129;
    public static final int SIMPLE_EXPR=130;
    public static final int SINGLE_COMMENT=131;
    public static final int SINGLE_OP=132;
    public static final int SIZEOF=133;
    public static final int STATIC=134;
    public static final int STATIC_METHOD=135;
    public static final int STATIC_PREFIX=136;
    public static final int STATIC_START=137;
    public static final int STATIC_TYPE=138;
    public static final int STRING=139;
    public static final int STRING_LITERAL=140;
    public static final int STRING_LITERAL2=141;
    public static final int STRING_LITERAL3=142;
    public static final int STRUCT_FIELD=143;
    public static final int STRUCT_PREFIX=144;
    public static final int STRUCT_VARIABLE=145;
    public static final int SUPER_CLASS=146;
    public static final int SWITCH=147;
    public static final int SWITCH_BODY=148;
    public static final int SWITCH_EXPRESSION=149;
    public static final int THROW_EXCEPTION=150;
    public static final int THROW_STMT=151;
    public static final int TYPE=152;
    public static final int TYPEDEF=153;
    public static final int TYPEDEF_ELEMENT=154;
    public static final int TYPEDEF_STRUCT=155;
    public static final int TYPE_CONVERTION=156;
    public static final int TYPE_CONVERTION2=157;
    public static final int TYPE_RENAME=158;
    public static final int VALUE=159;
    public static final int VARIABLE_INIT=160;
    public static final int VA_ARGS=161;
    public static final int VOID=162;
    public static final int WHILE_EXPR=163;
    public static final int WHILE_STMT=164;
    public static final int WS=165;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcmParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcmParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcmParser.tokenNames; }
    public String getGrammarFileName() { return "C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:120:1: code : ( code_internal )* ;
    public final ObjcmParser.code_return code() throws RecognitionException {
        ObjcmParser.code_return retval = new ObjcmParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.code_internal_return code_internal1 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:120:6: ( ( code_internal )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:121:3: ( code_internal )*
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:121:3: ( code_internal )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CONST_PREFIX||LA1_0==ENUM_PREFIX||LA1_0==ID||LA1_0==STATIC_PREFIX||LA1_0==STRUCT_PREFIX||LA1_0==VOID||(LA1_0 >= 173 && LA1_0 <= 174)||LA1_0==193||LA1_0==203||LA1_0==205) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:121:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code451);
            	    code_internal1=code_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:125:1: code_internal : ( operator_wrapper | implementation_wrapper );
    public final ObjcmParser.code_internal_return code_internal() throws RecognitionException {
        ObjcmParser.code_internal_return retval = new ObjcmParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_wrapper_return operator_wrapper2 =null;

        ObjcmParser.implementation_wrapper_return implementation_wrapper3 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:126:2: ( operator_wrapper | implementation_wrapper )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==CONST_PREFIX||LA2_0==ENUM_PREFIX||LA2_0==ID||LA2_0==STATIC_PREFIX||LA2_0==STRUCT_PREFIX||LA2_0==VOID||LA2_0==174||LA2_0==193||LA2_0==203||LA2_0==205) ) {
                alt2=1;
            }
            else if ( (LA2_0==173) ) {
                alt2=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }
            switch (alt2) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:126:4: operator_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_operator_wrapper_in_code_internal465);
                    operator_wrapper2=operator_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, operator_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:127:5: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal471);
                    implementation_wrapper3=implementation_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_wrapper3.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class operator_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:130:1: operator_wrapper : operator -> ^( OPERATOR operator ) ;
    public final ObjcmParser.operator_wrapper_return operator_wrapper() throws RecognitionException {
        ObjcmParser.operator_wrapper_return retval = new ObjcmParser.operator_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_return operator4 =null;


        RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:131:2: ( operator -> ^( OPERATOR operator ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:131:4: operator
            {
            pushFollow(FOLLOW_operator_in_operator_wrapper482);
            operator4=operator();

            state._fsp--;

            stream_operator.add(operator4.getTree());

            // AST REWRITE
            // elements: operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 131:13: -> ^( OPERATOR operator )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:131:16: ^( OPERATOR operator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OPERATOR, "OPERATOR")
                , root_1);

                adaptor.addChild(root_1, stream_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_wrapper"


    public static class operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:133:1: operator : ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration_wrapper | typedef_declaration_wrapper | typedef );
    public final ObjcmParser.operator_return operator() throws RecognitionException {
        ObjcmParser.operator_return retval = new ObjcmParser.operator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_wrapper_return extern_wrapper5 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper6 =null;

        ObjcmParser.type_start_wrapper_return type_start_wrapper7 =null;

        ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper8 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper9 =null;

        ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper10 =null;

        ObjcmParser.typedef_return typedef11 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:134:2: ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration_wrapper | typedef_declaration_wrapper | typedef )
            int alt3=7;
            switch ( input.LA(1) ) {
            case 193:
                {
                alt3=1;
                }
                break;
            case STATIC_PREFIX:
                {
                alt3=2;
                }
                break;
            case CONST_PREFIX:
            case ID:
            case VOID:
            case 205:
                {
                alt3=3;
                }
                break;
            case 174:
                {
                alt3=4;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt3=5;
                }
                break;
            case ENUM_PREFIX:
                {
                alt3=6;
                }
                break;
            case 203:
                {
                alt3=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }

            switch (alt3) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:134:4: extern_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_wrapper_in_operator500);
                    extern_wrapper5=extern_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, extern_wrapper5.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:135:4: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_operator506);
                    static_section_wrapper6=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper6.getTree());

                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:136:4: type_start_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_start_wrapper_in_operator511);
                    type_start_wrapper7=type_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, type_start_wrapper7.getTree());

                    }
                    break;
                case 4 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:137:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_operator518);
                    interface_declaration_wrapper8=interface_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_declaration_wrapper8.getTree());

                    }
                    break;
                case 5 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:138:4: typedef_struct_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_operator524);
                    typedef_struct_declaration_wrapper9=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper9.getTree());

                    }
                    break;
                case 6 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:139:4: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_operator529);
                    typedef_declaration_wrapper10=typedef_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_declaration_wrapper10.getTree());

                    }
                    break;
                case 7 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:140:4: typedef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_in_operator534);
                    typedef11=typedef();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef11.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:147:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcmParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcmParser.extern_wrapper_return retval = new ObjcmParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_return extern12 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:148:3: ( extern -> ^( EXTERN ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:148:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper552);
            extern12=extern();

            state._fsp--;

            stream_extern.add(extern12.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 148:12: -> ^( EXTERN )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:148:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:151:2: extern : 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR ;
    public final ObjcmParser.extern_return extern() throws RecognitionException {
        ObjcmParser.extern_return retval = new ObjcmParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal13=null;
        Token string_literal14=null;
        Token L_FBR15=null;
        Token set16=null;
        Token R_FBR17=null;

        Object string_literal13_tree=null;
        Object string_literal14_tree=null;
        Object L_FBR15_tree=null;
        Object set16_tree=null;
        Object R_FBR17_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:151:9: ( 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:151:11: 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR
            {
            root_0 = (Object)adaptor.nil();


            string_literal13=(Token)match(input,193,FOLLOW_193_in_extern571); 
            string_literal13_tree = 
            (Object)adaptor.create(string_literal13)
            ;
            adaptor.addChild(root_0, string_literal13_tree);


            string_literal14=(Token)match(input,166,FOLLOW_166_in_extern574); 
            string_literal14_tree = 
            (Object)adaptor.create(string_literal14)
            ;
            adaptor.addChild(root_0, string_literal14_tree);


            L_FBR15=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_extern577); 
            L_FBR15_tree = 
            (Object)adaptor.create(L_FBR15)
            ;
            adaptor.addChild(root_0, L_FBR15_tree);


            set16=(Token)input.LT(1);

            if ( (input.LA(1) >= ARRAY_INIT && input.LA(1) <= R_BR)||(input.LA(1) >= R_KBR && input.LA(1) <= 206) ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set16)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            R_FBR17=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_extern584); 
            R_FBR17_tree = 
            (Object)adaptor.create(R_FBR17)
            ;
            adaptor.addChild(root_0, R_FBR17_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:153:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcmParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcmParser.implementation_wrapper_return retval = new ObjcmParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_return implementation18 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:154:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:154:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper596);
            implementation18=implementation();

            state._fsp--;

            stream_implementation.add(implementation18.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 154:20: -> ^( IMPLEMENTATION implementation )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:154:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:156:1: implementation : '@implementation' name ( category )? ( super_class )? ( implementation_body )* '@end' ( SEMICOLON )? ;
    public final ObjcmParser.implementation_return implementation() throws RecognitionException {
        ObjcmParser.implementation_return retval = new ObjcmParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal19=null;
        Token string_literal24=null;
        Token SEMICOLON25=null;
        ObjcmParser.name_return name20 =null;

        ObjcmParser.category_return category21 =null;

        ObjcmParser.super_class_return super_class22 =null;

        ObjcmParser.implementation_body_return implementation_body23 =null;


        Object string_literal19_tree=null;
        Object string_literal24_tree=null;
        Object SEMICOLON25_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:157:2: ( '@implementation' name ( category )? ( super_class )? ( implementation_body )* '@end' ( SEMICOLON )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:157:4: '@implementation' name ( category )? ( super_class )? ( implementation_body )* '@end' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal19=(Token)match(input,173,FOLLOW_173_in_implementation615); 
            string_literal19_tree = 
            (Object)adaptor.create(string_literal19)
            ;
            adaptor.addChild(root_0, string_literal19_tree);


            pushFollow(FOLLOW_name_in_implementation618);
            name20=name();

            state._fsp--;

            adaptor.addChild(root_0, name20.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:157:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==L_BR) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:157:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation621);
                    category21=category();

                    state._fsp--;

                    adaptor.addChild(root_0, category21.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:157:39: ( super_class )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==COLON) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:157:39: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_implementation624);
                    super_class22=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class22.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:158:3: ( implementation_body )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==ID||LA6_0==L_MINUS||LA6_0==L_PLUS||LA6_0==STATIC_PREFIX||LA6_0==STRUCT_PREFIX||LA6_0==VOID||LA6_0==180||LA6_0==193||LA6_0==203||LA6_0==205) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:158:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation629);
            	    implementation_body23=implementation_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, implementation_body23.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            string_literal24=(Token)match(input,171,FOLLOW_171_in_implementation634); 
            string_literal24_tree = 
            (Object)adaptor.create(string_literal24)
            ;
            adaptor.addChild(root_0, string_literal24_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:159:11: ( SEMICOLON )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==SEMICOLON) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:159:11: SEMICOLON
                    {
                    SEMICOLON25=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation637); 
                    SEMICOLON25_tree = 
                    (Object)adaptor.create(SEMICOLON25)
                    ;
                    adaptor.addChild(root_0, SEMICOLON25_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:162:1: category : L_BR name R_BR -> ^( CATEGORY name ) ;
    public final ObjcmParser.category_return category() throws RecognitionException {
        ObjcmParser.category_return retval = new ObjcmParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR26=null;
        Token R_BR28=null;
        ObjcmParser.name_return name27 =null;


        Object L_BR26_tree=null;
        Object R_BR28_tree=null;
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:162:9: ( L_BR name R_BR -> ^( CATEGORY name ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:162:11: L_BR name R_BR
            {
            L_BR26=(Token)match(input,L_BR,FOLLOW_L_BR_in_category649);  
            stream_L_BR.add(L_BR26);


            pushFollow(FOLLOW_name_in_category652);
            name27=name();

            state._fsp--;

            stream_name.add(name27.getTree());

            R_BR28=(Token)match(input,R_BR,FOLLOW_R_BR_in_category655);  
            stream_R_BR.add(R_BR28);


            // AST REWRITE
            // elements: name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 162:28: -> ^( CATEGORY name )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:162:31: ^( CATEGORY name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:164:1: implementation_body : ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper );
    public final ObjcmParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcmParser.implementation_body_return retval = new ObjcmParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.directives_return directives29 =null;

        ObjcmParser.typedef_return typedef30 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper31 =null;

        ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper32 =null;

        ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper33 =null;

        ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper34 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper35 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:165:2: ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper )
            int alt8=7;
            switch ( input.LA(1) ) {
            case 180:
                {
                alt8=1;
                }
                break;
            case 203:
                {
                alt8=2;
                }
                break;
            case STATIC_PREFIX:
                {
                alt8=3;
                }
                break;
            case L_MINUS:
            case L_PLUS:
                {
                alt8=4;
                }
                break;
            case ID:
            case VOID:
            case 205:
                {
                alt8=5;
                }
                break;
            case 193:
                {
                alt8=6;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt8=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }

            switch (alt8) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:165:4: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body673);
                    directives29=directives();

                    state._fsp--;

                    adaptor.addChild(root_0, directives29.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:166:5: typedef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_in_implementation_body679);
                    typedef30=typedef();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef30.getTree());

                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:167:5: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_implementation_body685);
                    static_section_wrapper31=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper31.getTree());

                    }
                    break;
                case 4 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:168:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body691);
                    implementation_method_wrapper32=implementation_method_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper32.getTree());

                    }
                    break;
                case 5 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:170:4: field_type_started_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_type_started_wrapper_in_implementation_body697);
                    field_type_started_wrapper33=field_type_started_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_type_started_wrapper33.getTree());

                    }
                    break;
                case 6 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:171:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_implementation_body703);
                    field_declaration_wrapper34=field_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_wrapper34.getTree());

                    }
                    break;
                case 7 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:172:4: typedef_struct_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body708);
                    typedef_struct_declaration_wrapper35=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper35.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:175:1: directives : synthesize ;
    public final ObjcmParser.directives_return directives() throws RecognitionException {
        ObjcmParser.directives_return retval = new ObjcmParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.synthesize_return synthesize36 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:176:2: ( synthesize )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:176:4: synthesize
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_synthesize_in_directives719);
            synthesize36=synthesize();

            state._fsp--;

            adaptor.addChild(root_0, synthesize36.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:179:1: synthesize : '@synthesize' ID ( L_EQ ID )? ( COMMA ID ( L_EQ ID )? )* SEMICOLON ;
    public final ObjcmParser.synthesize_return synthesize() throws RecognitionException {
        ObjcmParser.synthesize_return retval = new ObjcmParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal37=null;
        Token ID38=null;
        Token L_EQ39=null;
        Token ID40=null;
        Token COMMA41=null;
        Token ID42=null;
        Token L_EQ43=null;
        Token ID44=null;
        Token SEMICOLON45=null;

        Object string_literal37_tree=null;
        Object ID38_tree=null;
        Object L_EQ39_tree=null;
        Object ID40_tree=null;
        Object COMMA41_tree=null;
        Object ID42_tree=null;
        Object L_EQ43_tree=null;
        Object ID44_tree=null;
        Object SEMICOLON45_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:180:2: ( '@synthesize' ID ( L_EQ ID )? ( COMMA ID ( L_EQ ID )? )* SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:180:4: '@synthesize' ID ( L_EQ ID )? ( COMMA ID ( L_EQ ID )? )* SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal37=(Token)match(input,180,FOLLOW_180_in_synthesize732); 
            string_literal37_tree = 
            (Object)adaptor.create(string_literal37)
            ;
            adaptor.addChild(root_0, string_literal37_tree);


            ID38=(Token)match(input,ID,FOLLOW_ID_in_synthesize735); 
            ID38_tree = 
            (Object)adaptor.create(ID38)
            ;
            adaptor.addChild(root_0, ID38_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:180:22: ( L_EQ ID )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==L_EQ) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:180:23: L_EQ ID
                    {
                    L_EQ39=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_synthesize738); 
                    L_EQ39_tree = 
                    (Object)adaptor.create(L_EQ39)
                    ;
                    adaptor.addChild(root_0, L_EQ39_tree);


                    ID40=(Token)match(input,ID,FOLLOW_ID_in_synthesize740); 
                    ID40_tree = 
                    (Object)adaptor.create(ID40)
                    ;
                    adaptor.addChild(root_0, ID40_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:180:33: ( COMMA ID ( L_EQ ID )? )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==COMMA) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:180:34: COMMA ID ( L_EQ ID )?
            	    {
            	    COMMA41=(Token)match(input,COMMA,FOLLOW_COMMA_in_synthesize745); 
            	    COMMA41_tree = 
            	    (Object)adaptor.create(COMMA41)
            	    ;
            	    adaptor.addChild(root_0, COMMA41_tree);


            	    ID42=(Token)match(input,ID,FOLLOW_ID_in_synthesize747); 
            	    ID42_tree = 
            	    (Object)adaptor.create(ID42)
            	    ;
            	    adaptor.addChild(root_0, ID42_tree);


            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:180:43: ( L_EQ ID )?
            	    int alt10=2;
            	    int LA10_0 = input.LA(1);

            	    if ( (LA10_0==L_EQ) ) {
            	        alt10=1;
            	    }
            	    switch (alt10) {
            	        case 1 :
            	            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:180:44: L_EQ ID
            	            {
            	            L_EQ43=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_synthesize750); 
            	            L_EQ43_tree = 
            	            (Object)adaptor.create(L_EQ43)
            	            ;
            	            adaptor.addChild(root_0, L_EQ43_tree);


            	            ID44=(Token)match(input,ID,FOLLOW_ID_in_synthesize752); 
            	            ID44_tree = 
            	            (Object)adaptor.create(ID44)
            	            ;
            	            adaptor.addChild(root_0, ID44_tree);


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);


            SEMICOLON45=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synthesize758); 
            SEMICOLON45_tree = 
            (Object)adaptor.create(SEMICOLON45)
            ;
            adaptor.addChild(root_0, SEMICOLON45_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class typedef_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:183:1: typedef : 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper ) ;
    public final ObjcmParser.typedef_return typedef() throws RecognitionException {
        ObjcmParser.typedef_return retval = new ObjcmParser.typedef_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal46=null;
        ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper47 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper48 =null;

        ObjcmParser.type_rename_wrapper_return type_rename_wrapper49 =null;


        Object string_literal46_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:183:9: ( 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:183:11: 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            string_literal46=(Token)match(input,203,FOLLOW_203_in_typedef770); 
            string_literal46_tree = 
            (Object)adaptor.create(string_literal46)
            ;
            adaptor.addChild(root_0, string_literal46_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:183:22: ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper )
            int alt12=3;
            switch ( input.LA(1) ) {
            case ENUM_PREFIX:
                {
                alt12=1;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt12=2;
                }
                break;
            case ID:
                {
                alt12=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }

            switch (alt12) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:183:23: typedef_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_typedef774);
                    typedef_declaration_wrapper47=typedef_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_declaration_wrapper47.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:183:53: typedef_struct_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_typedef778);
                    typedef_struct_declaration_wrapper48=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper48.getTree());

                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:183:90: type_rename_wrapper
                    {
                    pushFollow(FOLLOW_type_rename_wrapper_in_typedef782);
                    type_rename_wrapper49=type_rename_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, type_rename_wrapper49.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef"


    public static class type_rename_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_rename_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:186:1: type_rename_wrapper : type_rename -> ^( TYPE_RENAME type_rename ) ;
    public final ObjcmParser.type_rename_wrapper_return type_rename_wrapper() throws RecognitionException {
        ObjcmParser.type_rename_wrapper_return retval = new ObjcmParser.type_rename_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_rename_return type_rename50 =null;


        RewriteRuleSubtreeStream stream_type_rename=new RewriteRuleSubtreeStream(adaptor,"rule type_rename");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:187:2: ( type_rename -> ^( TYPE_RENAME type_rename ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:187:4: type_rename
            {
            pushFollow(FOLLOW_type_rename_in_type_rename_wrapper796);
            type_rename50=type_rename();

            state._fsp--;

            stream_type_rename.add(type_rename50.getTree());

            // AST REWRITE
            // elements: type_rename
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 187:16: -> ^( TYPE_RENAME type_rename )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:187:19: ^( TYPE_RENAME type_rename )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_RENAME, "TYPE_RENAME")
                , root_1);

                adaptor.addChild(root_1, stream_type_rename.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_rename_wrapper"


    public static class type_rename_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_rename"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:189:1: type_rename : ID ID SEMICOLON ;
    public final ObjcmParser.type_rename_return type_rename() throws RecognitionException {
        ObjcmParser.type_rename_return retval = new ObjcmParser.type_rename_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID51=null;
        Token ID52=null;
        Token SEMICOLON53=null;

        Object ID51_tree=null;
        Object ID52_tree=null;
        Object SEMICOLON53_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:190:2: ( ID ID SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:190:4: ID ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            ID51=(Token)match(input,ID,FOLLOW_ID_in_type_rename815); 
            ID51_tree = 
            (Object)adaptor.create(ID51)
            ;
            adaptor.addChild(root_0, ID51_tree);


            ID52=(Token)match(input,ID,FOLLOW_ID_in_type_rename817); 
            ID52_tree = 
            (Object)adaptor.create(ID52)
            ;
            adaptor.addChild(root_0, ID52_tree);


            SEMICOLON53=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_rename819); 
            SEMICOLON53_tree = 
            (Object)adaptor.create(SEMICOLON53)
            ;
            adaptor.addChild(root_0, SEMICOLON53_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_rename"


    public static class static_section_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:192:1: static_section_wrapper : static_section -> ^( STATIC static_section ) ;
    public final ObjcmParser.static_section_wrapper_return static_section_wrapper() throws RecognitionException {
        ObjcmParser.static_section_wrapper_return retval = new ObjcmParser.static_section_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_section_return static_section54 =null;


        RewriteRuleSubtreeStream stream_static_section=new RewriteRuleSubtreeStream(adaptor,"rule static_section");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:193:2: ( static_section -> ^( STATIC static_section ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:193:4: static_section
            {
            pushFollow(FOLLOW_static_section_in_static_section_wrapper831);
            static_section54=static_section();

            state._fsp--;

            stream_static_section.add(static_section54.getTree());

            // AST REWRITE
            // elements: static_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 193:19: -> ^( STATIC static_section )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:193:22: ^( STATIC static_section )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC, "STATIC")
                , root_1);

                adaptor.addChild(root_1, stream_static_section.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section_wrapper"


    public static class static_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:195:1: static_section : STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 ;
    public final ObjcmParser.static_section_return static_section() throws RecognitionException {
        ObjcmParser.static_section_return retval = new ObjcmParser.static_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX55=null;
        Token CONST_PREFIX56=null;
        Token STRUCT_PREFIX57=null;
        Token ENUM_PREFIX58=null;
        ObjcmParser.static_section2_return static_section259 =null;


        Object STATIC_PREFIX55_tree=null;
        Object CONST_PREFIX56_tree=null;
        Object STRUCT_PREFIX57_tree=null;
        Object ENUM_PREFIX58_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:197:2: ( STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:197:5: STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX55=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_section853); 
            STATIC_PREFIX55_tree = 
            (Object)adaptor.create(STATIC_PREFIX55)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX55_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:197:19: ( CONST_PREFIX )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==CONST_PREFIX) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:197:19: CONST_PREFIX
                    {
                    CONST_PREFIX56=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_section855); 
                    CONST_PREFIX56_tree = 
                    (Object)adaptor.create(CONST_PREFIX56)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX56_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:197:33: ( STRUCT_PREFIX )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==STRUCT_PREFIX) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:197:33: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX57=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_static_section858); 
                    STRUCT_PREFIX57_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX57)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX57_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:197:48: ( ENUM_PREFIX )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==ENUM_PREFIX) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:197:48: ENUM_PREFIX
                    {
                    ENUM_PREFIX58=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_static_section861); 
                    ENUM_PREFIX58_tree = 
                    (Object)adaptor.create(ENUM_PREFIX58)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX58_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_static_section2_in_static_section864);
            static_section259=static_section2();

            state._fsp--;

            adaptor.addChild(root_0, static_section259.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section"


    public static class static_section2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:199:1: static_section2 : ( inline_section | implementation_method_wrapper2 | static_section3 );
    public final ObjcmParser.static_section2_return static_section2() throws RecognitionException {
        ObjcmParser.static_section2_return retval = new ObjcmParser.static_section2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.inline_section_return inline_section60 =null;

        ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper261 =null;

        ObjcmParser.static_section3_return static_section362 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:200:2: ( inline_section | implementation_method_wrapper2 | static_section3 )
            int alt16=3;
            switch ( input.LA(1) ) {
            case 198:
                {
                alt16=1;
                }
                break;
            case L_FBR:
            case SEMICOLON:
                {
                alt16=2;
                }
                break;
            case ID:
            case VOID:
            case 205:
                {
                alt16=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }

            switch (alt16) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:200:4: inline_section
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_inline_section_in_static_section2873);
                    inline_section60=inline_section();

                    state._fsp--;

                    adaptor.addChild(root_0, inline_section60.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:201:5: implementation_method_wrapper2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper2_in_static_section2880);
                    implementation_method_wrapper261=implementation_method_wrapper2();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper261.getTree());

                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:202:5: static_section3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section3_in_static_section2887);
                    static_section362=static_section3();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section362.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section2"


    public static class inline_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_section"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:205:1: inline_section : 'inline' ( ENUM_PREFIX )? field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) ;
    public final ObjcmParser.inline_section_return inline_section() throws RecognitionException {
        ObjcmParser.inline_section_return retval = new ObjcmParser.inline_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal63=null;
        Token ENUM_PREFIX64=null;
        Token SEMICOLON69=null;
        ObjcmParser.field_type_return field_type65 =null;

        ObjcmParser.name_return name66 =null;

        ObjcmParser.method_params2_return method_params267 =null;

        ObjcmParser.block_wrapper_return block_wrapper68 =null;


        Object string_literal63_tree=null;
        Object ENUM_PREFIX64_tree=null;
        Object SEMICOLON69_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:206:2: ( 'inline' ( ENUM_PREFIX )? field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:206:4: 'inline' ( ENUM_PREFIX )? field_type name ( method_params2 )? ( block_wrapper | SEMICOLON )
            {
            root_0 = (Object)adaptor.nil();


            string_literal63=(Token)match(input,198,FOLLOW_198_in_inline_section899); 
            string_literal63_tree = 
            (Object)adaptor.create(string_literal63)
            ;
            adaptor.addChild(root_0, string_literal63_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:206:13: ( ENUM_PREFIX )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==ENUM_PREFIX) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:206:13: ENUM_PREFIX
                    {
                    ENUM_PREFIX64=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_inline_section901); 
                    ENUM_PREFIX64_tree = 
                    (Object)adaptor.create(ENUM_PREFIX64)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX64_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_inline_section904);
            field_type65=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type65.getTree());

            pushFollow(FOLLOW_name_in_inline_section906);
            name66=name();

            state._fsp--;

            adaptor.addChild(root_0, name66.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:206:43: ( method_params2 )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==L_BR) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:206:43: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_inline_section909);
                    method_params267=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params267.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:206:59: ( block_wrapper | SEMICOLON )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==L_FBR) ) {
                alt19=1;
            }
            else if ( (LA19_0==SEMICOLON) ) {
                alt19=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }
            switch (alt19) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:206:60: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_inline_section913);
                    block_wrapper68=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper68.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:206:76: SEMICOLON
                    {
                    SEMICOLON69=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inline_section917); 
                    SEMICOLON69_tree = 
                    (Object)adaptor.create(SEMICOLON69)
                    ;
                    adaptor.addChild(root_0, SEMICOLON69_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_section"


    public static class static_section3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section3"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:208:1: static_section3 : field_type name ( indexed )* static_end ;
    public final ObjcmParser.static_section3_return static_section3() throws RecognitionException {
        ObjcmParser.static_section3_return retval = new ObjcmParser.static_section3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type70 =null;

        ObjcmParser.name_return name71 =null;

        ObjcmParser.indexed_return indexed72 =null;

        ObjcmParser.static_end_return static_end73 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:209:2: ( field_type name ( indexed )* static_end )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:209:4: field_type name ( indexed )* static_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_static_section3928);
            field_type70=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type70.getTree());

            pushFollow(FOLLOW_name_in_static_section3930);
            name71=name();

            state._fsp--;

            adaptor.addChild(root_0, name71.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:209:20: ( indexed )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==L_KBR) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:209:20: indexed
            	    {
            	    pushFollow(FOLLOW_indexed_in_static_section3932);
            	    indexed72=indexed();

            	    state._fsp--;

            	    adaptor.addChild(root_0, indexed72.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);


            pushFollow(FOLLOW_static_end_in_static_section3936);
            static_end73=static_end();

            state._fsp--;

            adaptor.addChild(root_0, static_end73.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section3"


    public static class static_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_end"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:212:1: static_end : ( implementation_method_wrapper3 | field_end );
    public final ObjcmParser.static_end_return static_end() throws RecognitionException {
        ObjcmParser.static_end_return retval = new ObjcmParser.static_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper374 =null;

        ObjcmParser.field_end_return field_end75 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:213:2: ( implementation_method_wrapper3 | field_end )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==L_BR) ) {
                alt21=1;
            }
            else if ( (LA21_0==L_AND_EQ||(LA21_0 >= L_DIV_EQ && LA21_0 <= L_EQ)||LA21_0==L_LEFT_EQ||LA21_0==L_MINUS_EQ||LA21_0==L_MULT_EQ||LA21_0==L_OR_EQ||LA21_0==L_PERC_EQ||LA21_0==L_PLUS_EQ||LA21_0==L_RIGHT_EQ||LA21_0==L_XOR_EQ||LA21_0==SEMICOLON) ) {
                alt21=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;

            }
            switch (alt21) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:213:4: implementation_method_wrapper3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper3_in_static_end948);
                    implementation_method_wrapper374=implementation_method_wrapper3();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper374.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:214:5: field_end
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_end_in_static_end954);
                    field_end75=field_end();

                    state._fsp--;

                    adaptor.addChild(root_0, field_end75.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_end"


    public static class field_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:216:1: field_end : field_end_internal -> ^( FIELD field_end_internal ) ;
    public final ObjcmParser.field_end_return field_end() throws RecognitionException {
        ObjcmParser.field_end_return retval = new ObjcmParser.field_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_end_internal_return field_end_internal76 =null;


        RewriteRuleSubtreeStream stream_field_end_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_end_internal");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:217:2: ( field_end_internal -> ^( FIELD field_end_internal ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:217:4: field_end_internal
            {
            pushFollow(FOLLOW_field_end_internal_in_field_end965);
            field_end_internal76=field_end_internal();

            state._fsp--;

            stream_field_end_internal.add(field_end_internal76.getTree());

            // AST REWRITE
            // elements: field_end_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 217:23: -> ^( FIELD field_end_internal )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:217:26: ^( FIELD field_end_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_end_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end"


    public static class field_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:219:1: field_end_internal : ( expr_assign_wrapper )? SEMICOLON ;
    public final ObjcmParser.field_end_internal_return field_end_internal() throws RecognitionException {
        ObjcmParser.field_end_internal_return retval = new ObjcmParser.field_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON78=null;
        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper77 =null;


        Object SEMICOLON78_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:220:2: ( ( expr_assign_wrapper )? SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:220:4: ( expr_assign_wrapper )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:220:4: ( expr_assign_wrapper )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==L_AND_EQ||(LA22_0 >= L_DIV_EQ && LA22_0 <= L_EQ)||LA22_0==L_LEFT_EQ||LA22_0==L_MINUS_EQ||LA22_0==L_MULT_EQ||LA22_0==L_OR_EQ||LA22_0==L_PERC_EQ||LA22_0==L_PLUS_EQ||LA22_0==L_RIGHT_EQ||LA22_0==L_XOR_EQ) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:220:4: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_field_end_internal983);
                    expr_assign_wrapper77=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper77.getTree());

                    }
                    break;

            }


            SEMICOLON78=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_end_internal986); 
            SEMICOLON78_tree = 
            (Object)adaptor.create(SEMICOLON78)
            ;
            adaptor.addChild(root_0, SEMICOLON78_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end_internal"


    public static class implementation_method_wrapper3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper3"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:222:1: implementation_method_wrapper3 : implementation_method3 -> ^( METHOD implementation_method3 ) ;
    public final ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper3() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper3_return retval = new ObjcmParser.implementation_method_wrapper3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method3_return implementation_method379 =null;


        RewriteRuleSubtreeStream stream_implementation_method3=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method3");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:223:2: ( implementation_method3 -> ^( METHOD implementation_method3 ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:223:4: implementation_method3
            {
            pushFollow(FOLLOW_implementation_method3_in_implementation_method_wrapper3998);
            implementation_method379=implementation_method3();

            state._fsp--;

            stream_implementation_method3.add(implementation_method379.getTree());

            // AST REWRITE
            // elements: implementation_method3
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 223:27: -> ^( METHOD implementation_method3 )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:223:30: ^( METHOD implementation_method3 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method3.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper3"


    public static class implementation_method3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method3"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:225:1: implementation_method3 : method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? ;
    public final ObjcmParser.implementation_method3_return implementation_method3() throws RecognitionException {
        ObjcmParser.implementation_method3_return retval = new ObjcmParser.implementation_method3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON81=null;
        ObjcmParser.method_header_body3_return method_header_body380 =null;

        ObjcmParser.attribute_return attribute82 =null;

        ObjcmParser.block_wrapper_return block_wrapper83 =null;


        Object SEMICOLON81_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:226:2: ( method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:226:4: method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body3_in_implementation_method31016);
            method_header_body380=method_header_body3();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body380.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:226:25: ( SEMICOLON )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==SEMICOLON) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:226:25: SEMICOLON
                    {
                    SEMICOLON81=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method31019); 
                    SEMICOLON81_tree = 
                    (Object)adaptor.create(SEMICOLON81)
                    ;
                    adaptor.addChild(root_0, SEMICOLON81_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:227:3: ( attribute )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==184) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:227:3: attribute
                    {
                    pushFollow(FOLLOW_attribute_in_implementation_method31024);
                    attribute82=attribute();

                    state._fsp--;

                    adaptor.addChild(root_0, attribute82.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:228:3: ( block_wrapper )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==L_FBR) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:228:3: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_implementation_method31029);
                    block_wrapper83=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper83.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method3"


    public static class attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:231:1: attribute : '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON ;
    public final ObjcmParser.attribute_return attribute() throws RecognitionException {
        ObjcmParser.attribute_return retval = new ObjcmParser.attribute_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal84=null;
        Token L_BR85=null;
        Token L_BR86=null;
        Token string_literal87=null;
        Token R_BR88=null;
        Token R_BR89=null;
        Token SEMICOLON90=null;

        Object string_literal84_tree=null;
        Object L_BR85_tree=null;
        Object L_BR86_tree=null;
        Object string_literal87_tree=null;
        Object R_BR88_tree=null;
        Object R_BR89_tree=null;
        Object SEMICOLON90_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:232:2: ( '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:232:4: '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal84=(Token)match(input,184,FOLLOW_184_in_attribute1042); 
            string_literal84_tree = 
            (Object)adaptor.create(string_literal84)
            ;
            adaptor.addChild(root_0, string_literal84_tree);


            L_BR85=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute1045); 
            L_BR85_tree = 
            (Object)adaptor.create(L_BR85)
            ;
            adaptor.addChild(root_0, L_BR85_tree);


            L_BR86=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute1048); 
            L_BR86_tree = 
            (Object)adaptor.create(L_BR86)
            ;
            adaptor.addChild(root_0, L_BR86_tree);


            string_literal87=(Token)match(input,188,FOLLOW_188_in_attribute1051); 
            string_literal87_tree = 
            (Object)adaptor.create(string_literal87)
            ;
            adaptor.addChild(root_0, string_literal87_tree);


            R_BR88=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute1054); 
            R_BR88_tree = 
            (Object)adaptor.create(R_BR88)
            ;
            adaptor.addChild(root_0, R_BR88_tree);


            R_BR89=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute1057); 
            R_BR89_tree = 
            (Object)adaptor.create(R_BR89)
            ;
            adaptor.addChild(root_0, R_BR89_tree);


            SEMICOLON90=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_attribute1060); 
            SEMICOLON90_tree = 
            (Object)adaptor.create(SEMICOLON90)
            ;
            adaptor.addChild(root_0, SEMICOLON90_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute"


    public static class implementation_method2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:234:1: implementation_method2 : ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method2_return implementation_method2() throws RecognitionException {
        ObjcmParser.implementation_method2_return retval = new ObjcmParser.implementation_method2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON91=null;
        ObjcmParser.block_wrapper_return block_wrapper92 =null;


        Object SEMICOLON91_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:235:2: ( ( SEMICOLON )? block_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:235:5: ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:235:5: ( SEMICOLON )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==SEMICOLON) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:235:5: SEMICOLON
                    {
                    SEMICOLON91=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method21072); 
                    SEMICOLON91_tree = 
                    (Object)adaptor.create(SEMICOLON91)
                    ;
                    adaptor.addChild(root_0, SEMICOLON91_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method21077);
            block_wrapper92=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper92.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method2"


    public static class field_type_started_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:239:1: field_type_started_wrapper : field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) ;
    public final ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper() throws RecognitionException {
        ObjcmParser.field_type_started_wrapper_return retval = new ObjcmParser.field_type_started_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_started_return field_type_started93 =null;


        RewriteRuleSubtreeStream stream_field_type_started=new RewriteRuleSubtreeStream(adaptor,"rule field_type_started");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:240:2: ( field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:240:4: field_type_started
            {
            pushFollow(FOLLOW_field_type_started_in_field_type_started_wrapper1089);
            field_type_started93=field_type_started();

            state._fsp--;

            stream_field_type_started.add(field_type_started93.getTree());

            // AST REWRITE
            // elements: field_type_started
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 240:23: -> ^( FIELD_TYPE_STARTED field_type_started )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:240:26: ^( FIELD_TYPE_STARTED field_type_started )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_TYPE_STARTED, "FIELD_TYPE_STARTED")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_started.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started_wrapper"


    public static class field_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:242:1: field_type_started : field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) ;
    public final ObjcmParser.field_type_started_return field_type_started() throws RecognitionException {
        ObjcmParser.field_type_started_return retval = new ObjcmParser.field_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type94 =null;

        ObjcmParser.name_return name95 =null;

        ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper96 =null;

        ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper97 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:243:2: ( field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:243:4: field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_field_type_started1108);
            field_type94=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type94.getTree());

            pushFollow(FOLLOW_name_in_field_type_started1110);
            name95=name();

            state._fsp--;

            adaptor.addChild(root_0, name95.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:243:20: ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==L_BR) ) {
                alt27=1;
            }
            else if ( (LA27_0==L_AND_EQ||(LA27_0 >= L_DIV_EQ && LA27_0 <= L_EQ)||LA27_0==L_LEFT_EQ||LA27_0==L_MINUS_EQ||LA27_0==L_MULT_EQ||LA27_0==L_OR_EQ||LA27_0==L_PERC_EQ||LA27_0==L_PLUS_EQ||LA27_0==L_RIGHT_EQ||LA27_0==L_XOR_EQ||LA27_0==SEMICOLON) ) {
                alt27=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;

            }
            switch (alt27) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:243:21: classic_method_declaration_wrapper
                    {
                    pushFollow(FOLLOW_classic_method_declaration_wrapper_in_field_type_started1113);
                    classic_method_declaration_wrapper96=classic_method_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, classic_method_declaration_wrapper96.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:243:58: field_declaration_end_wrapper
                    {
                    pushFollow(FOLLOW_field_declaration_end_wrapper_in_field_type_started1117);
                    field_declaration_end_wrapper97=field_declaration_end_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_end_wrapper97.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started"


    public static class field_declaration_end_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:245:1: field_declaration_end_wrapper : field_declaration_end -> ^( FIELD field_declaration_end ) ;
    public final ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_end_wrapper_return retval = new ObjcmParser.field_declaration_end_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_end_return field_declaration_end98 =null;


        RewriteRuleSubtreeStream stream_field_declaration_end=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_end");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:246:2: ( field_declaration_end -> ^( FIELD field_declaration_end ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:246:4: field_declaration_end
            {
            pushFollow(FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1128);
            field_declaration_end98=field_declaration_end();

            state._fsp--;

            stream_field_declaration_end.add(field_declaration_end98.getTree());

            // AST REWRITE
            // elements: field_declaration_end
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 246:26: -> ^( FIELD field_declaration_end )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:246:29: ^( FIELD field_declaration_end )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_end.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end_wrapper"


    public static class classic_method_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:248:1: classic_method_declaration_wrapper : classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) ;
    public final ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper() throws RecognitionException {
        ObjcmParser.classic_method_declaration_wrapper_return retval = new ObjcmParser.classic_method_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classic_method_declaration_return classic_method_declaration99 =null;


        RewriteRuleSubtreeStream stream_classic_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classic_method_declaration");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:249:2: ( classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:249:4: classic_method_declaration
            {
            pushFollow(FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1146);
            classic_method_declaration99=classic_method_declaration();

            state._fsp--;

            stream_classic_method_declaration.add(classic_method_declaration99.getTree());

            // AST REWRITE
            // elements: classic_method_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 249:31: -> ^( STATIC_METHOD classic_method_declaration )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:249:34: ^( STATIC_METHOD classic_method_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_classic_method_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration_wrapper"


    public static class classic_method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:251:1: classic_method_declaration : method_params2 block_wrapper ;
    public final ObjcmParser.classic_method_declaration_return classic_method_declaration() throws RecognitionException {
        ObjcmParser.classic_method_declaration_return retval = new ObjcmParser.classic_method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2100 =null;

        ObjcmParser.block_wrapper_return block_wrapper101 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:253:2: ( method_params2 block_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:253:4: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_classic_method_declaration1166);
            method_params2100=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2100.getTree());

            pushFollow(FOLLOW_block_wrapper_in_classic_method_declaration1171);
            block_wrapper101=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper101.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:257:1: implementation_method_wrapper : implementation_method -> ^( METHOD implementation_method ) ;
    public final ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper_return retval = new ObjcmParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_return implementation_method102 =null;


        RewriteRuleSubtreeStream stream_implementation_method=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:258:2: ( implementation_method -> ^( METHOD implementation_method ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:258:4: implementation_method
            {
            pushFollow(FOLLOW_implementation_method_in_implementation_method_wrapper1184);
            implementation_method102=implementation_method();

            state._fsp--;

            stream_implementation_method.add(implementation_method102.getTree());

            // AST REWRITE
            // elements: implementation_method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 258:26: -> ^( METHOD implementation_method )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:258:29: ^( METHOD implementation_method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class implementation_method_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:260:1: implementation_method_wrapper2 : implementation_method2 -> ^( METHOD implementation_method2 ) ;
    public final ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper2() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper2_return retval = new ObjcmParser.implementation_method_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method2_return implementation_method2103 =null;


        RewriteRuleSubtreeStream stream_implementation_method2=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method2");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:261:2: ( implementation_method2 -> ^( METHOD implementation_method2 ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:261:4: implementation_method2
            {
            pushFollow(FOLLOW_implementation_method2_in_implementation_method_wrapper21201);
            implementation_method2103=implementation_method2();

            state._fsp--;

            stream_implementation_method2.add(implementation_method2103.getTree());

            // AST REWRITE
            // elements: implementation_method2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 261:27: -> ^( METHOD implementation_method2 )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:261:30: ^( METHOD implementation_method2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper2"


    public static class implementation_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:263:1: implementation_method : method_header_body ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method_return implementation_method() throws RecognitionException {
        ObjcmParser.implementation_method_return retval = new ObjcmParser.implementation_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON105=null;
        ObjcmParser.method_header_body_return method_header_body104 =null;

        ObjcmParser.block_wrapper_return block_wrapper106 =null;


        Object SEMICOLON105_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:264:2: ( method_header_body ( SEMICOLON )? block_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:264:4: method_header_body ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_implementation_method1218);
            method_header_body104=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body104.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:264:23: ( SEMICOLON )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==SEMICOLON) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:264:23: SEMICOLON
                    {
                    SEMICOLON105=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method1220); 
                    SEMICOLON105_tree = 
                    (Object)adaptor.create(SEMICOLON105)
                    ;
                    adaptor.addChild(root_0, SEMICOLON105_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method1225);
            block_wrapper106=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper106.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method"


    public static class block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:268:1: block_wrapper : block -> ^( BLOCK block ) ;
    public final ObjcmParser.block_wrapper_return block_wrapper() throws RecognitionException {
        ObjcmParser.block_wrapper_return retval = new ObjcmParser.block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_return block107 =null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:269:2: ( block -> ^( BLOCK block ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:269:4: block
            {
            pushFollow(FOLLOW_block_in_block_wrapper1238);
            block107=block();

            state._fsp--;

            stream_block.add(block107.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 269:10: -> ^( BLOCK block )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:269:13: ^( BLOCK block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK, "BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_wrapper"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:271:1: block : L_FBR ( block_internal_full | block )* R_FBR ;
    public final ObjcmParser.block_return block() throws RecognitionException {
        ObjcmParser.block_return retval = new ObjcmParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR108=null;
        Token R_FBR111=null;
        ObjcmParser.block_internal_full_return block_internal_full109 =null;

        ObjcmParser.block_return block110 =null;


        Object L_FBR108_tree=null;
        Object R_FBR111_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:271:7: ( L_FBR ( block_internal_full | block )* R_FBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:272:3: L_FBR ( block_internal_full | block )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR108=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block1260); 
            L_FBR108_tree = 
            (Object)adaptor.create(L_FBR108)
            ;
            adaptor.addChild(root_0, L_FBR108_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:273:4: ( block_internal_full | block )*
            loop29:
            do {
                int alt29=3;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==ASTERISK||LA29_0==BREAK_WORD||LA29_0==CONST_PREFIX||LA29_0==ENUM_PREFIX||LA29_0==ID||LA29_0==L_AND||LA29_0==L_BR||LA29_0==L_KBR||LA29_0==L_MINUS||LA29_0==L_MINUS_MINUS||LA29_0==L_NOT||LA29_0==L_PLUS||LA29_0==L_PLUS_PLUS||LA29_0==L_TILDA||LA29_0==NUMBER||LA29_0==SEMICOLON||(LA29_0 >= SINGLE_OP && LA29_0 <= SIZEOF)||LA29_0==STATIC_PREFIX||(LA29_0 >= STRING_LITERAL && LA29_0 <= STRING_LITERAL3)||LA29_0==STRUCT_PREFIX||LA29_0==VOID||LA29_0==170||LA29_0==177||LA29_0==179||(LA29_0 >= 181 && LA29_0 <= 183)||(LA29_0 >= 185 && LA29_0 <= 186)||LA29_0==189||(LA29_0 >= 191 && LA29_0 <= 197)||(LA29_0 >= 199 && LA29_0 <= 202)||(LA29_0 >= 205 && LA29_0 <= 206)) ) {
                    alt29=1;
                }
                else if ( (LA29_0==L_FBR) ) {
                    alt29=2;
                }


                switch (alt29) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:273:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block1266);
            	    block_internal_full109=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full109.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:273:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block1270);
            	    block110=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block110.getTree());

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);


            R_FBR111=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block1278); 
            R_FBR111_tree = 
            (Object)adaptor.create(R_FBR111)
            ;
            adaptor.addChild(root_0, R_FBR111_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_case_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_case"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:277:1: block_case : L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR ;
    public final ObjcmParser.block_case_return block_case() throws RecognitionException {
        ObjcmParser.block_case_return retval = new ObjcmParser.block_case_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR112=null;
        Token R_FBR116=null;
        ObjcmParser.block_internal_full_return block_internal_full113 =null;

        ObjcmParser.block_return block114 =null;

        ObjcmParser.default_stmt_return default_stmt115 =null;


        Object L_FBR112_tree=null;
        Object R_FBR116_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:278:2: ( L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:279:3: L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR112=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block_case1293); 
            L_FBR112_tree = 
            (Object)adaptor.create(L_FBR112)
            ;
            adaptor.addChild(root_0, L_FBR112_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:280:4: ( block_internal_full | block )*
            loop30:
            do {
                int alt30=3;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==ASTERISK||LA30_0==BREAK_WORD||LA30_0==CONST_PREFIX||LA30_0==ENUM_PREFIX||LA30_0==ID||LA30_0==L_AND||LA30_0==L_BR||LA30_0==L_KBR||LA30_0==L_MINUS||LA30_0==L_MINUS_MINUS||LA30_0==L_NOT||LA30_0==L_PLUS||LA30_0==L_PLUS_PLUS||LA30_0==L_TILDA||LA30_0==NUMBER||LA30_0==SEMICOLON||(LA30_0 >= SINGLE_OP && LA30_0 <= SIZEOF)||LA30_0==STATIC_PREFIX||(LA30_0 >= STRING_LITERAL && LA30_0 <= STRING_LITERAL3)||LA30_0==STRUCT_PREFIX||LA30_0==VOID||LA30_0==170||LA30_0==177||LA30_0==179||(LA30_0 >= 181 && LA30_0 <= 183)||(LA30_0 >= 185 && LA30_0 <= 186)||LA30_0==189||(LA30_0 >= 191 && LA30_0 <= 197)||(LA30_0 >= 199 && LA30_0 <= 202)||(LA30_0 >= 205 && LA30_0 <= 206)) ) {
                    alt30=1;
                }
                else if ( (LA30_0==L_FBR) ) {
                    alt30=2;
                }


                switch (alt30) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:280:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block_case1299);
            	    block_internal_full113=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full113.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:280:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block_case1303);
            	    block114=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block114.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:281:4: ( default_stmt )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==190) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:281:4: default_stmt
                    {
                    pushFollow(FOLLOW_default_stmt_in_block_case1312);
                    default_stmt115=default_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt115.getTree());

                    }
                    break;

            }


            R_FBR116=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block_case1317); 
            R_FBR116_tree = 
            (Object)adaptor.create(R_FBR116)
            ;
            adaptor.addChild(root_0, R_FBR116_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_case"


    public static class block_internal_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_full"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:285:1: block_internal_full : block_internal ;
    public final ObjcmParser.block_internal_full_return block_internal_full() throws RecognitionException {
        ObjcmParser.block_internal_full_return retval = new ObjcmParser.block_internal_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_return block_internal117 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:286:2: ( block_internal )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:286:4: block_internal
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_internal_in_block_internal_full1329);
            block_internal117=block_internal();

            state._fsp--;

            adaptor.addChild(root_0, block_internal117.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_full"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:289:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression_wrapper SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper | 'extern' );
    public final ObjcmParser.block_internal_return block_internal() throws RecognitionException {
        ObjcmParser.block_internal_return retval = new ObjcmParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON121=null;
        Token SEMICOLON124=null;
        Token SEMICOLON134=null;
        Token SEMICOLON136=null;
        Token SEMICOLON138=null;
        Token SEMICOLON140=null;
        Token SEMICOLON141=null;
        Token string_literal143=null;
        ObjcmParser.try_stmt_return try_stmt118 =null;

        ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper119 =null;

        ObjcmParser.static_start_wrapper_return static_start_wrapper120 =null;

        ObjcmParser.do_stmt_return do_stmt122 =null;

        ObjcmParser.const_expression_wrapper_return const_expression_wrapper123 =null;

        ObjcmParser.variable_init_wrapper_return variable_init_wrapper125 =null;

        ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper126 =null;

        ObjcmParser.else_stmt_return else_stmt127 =null;

        ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper128 =null;

        ObjcmParser.return_stmt_return return_stmt129 =null;

        ObjcmParser.for_stmt_wrapper_return for_stmt_wrapper130 =null;

        ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper131 =null;

        ObjcmParser.single_operators_return single_operators132 =null;

        ObjcmParser.struct_variable_return struct_variable133 =null;

        ObjcmParser.enum_variable_return enum_variable135 =null;

        ObjcmParser.typeof_started_return typeof_started137 =null;

        ObjcmParser.known_type_started_return known_type_started139 =null;

        ObjcmParser.goto_wrapper_return goto_wrapper142 =null;


        Object SEMICOLON121_tree=null;
        Object SEMICOLON124_tree=null;
        Object SEMICOLON134_tree=null;
        Object SEMICOLON136_tree=null;
        Object SEMICOLON138_tree=null;
        Object SEMICOLON140_tree=null;
        Object SEMICOLON141_tree=null;
        Object string_literal143_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:290:2: ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression_wrapper SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper | 'extern' )
            int alt32=20;
            alt32 = dfa32.predict(input);
            switch (alt32) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:290:4: try_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_in_block_internal1340);
                    try_stmt118=try_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, try_stmt118.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:291:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1345);
                    throw_stmt_wrapper119=throw_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, throw_stmt_wrapper119.getTree());

                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:292:4: static_start_wrapper SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_start_wrapper_in_block_internal1350);
                    static_start_wrapper120=static_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_start_wrapper120.getTree());

                    SEMICOLON121=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1352); 
                    SEMICOLON121_tree = 
                    (Object)adaptor.create(SEMICOLON121)
                    ;
                    adaptor.addChild(root_0, SEMICOLON121_tree);


                    }
                    break;
                case 4 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:293:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1357);
                    do_stmt122=do_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, do_stmt122.getTree());

                    }
                    break;
                case 5 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:294:4: const_expression_wrapper SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expression_wrapper_in_block_internal1362);
                    const_expression_wrapper123=const_expression_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expression_wrapper123.getTree());

                    SEMICOLON124=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1364); 
                    SEMICOLON124_tree = 
                    (Object)adaptor.create(SEMICOLON124)
                    ;
                    adaptor.addChild(root_0, SEMICOLON124_tree);


                    }
                    break;
                case 6 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:295:4: variable_init_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_init_wrapper_in_block_internal1369);
                    variable_init_wrapper125=variable_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, variable_init_wrapper125.getTree());

                    }
                    break;
                case 7 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:296:4: if_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_wrapper_in_block_internal1374);
                    if_stmt_wrapper126=if_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, if_stmt_wrapper126.getTree());

                    }
                    break;
                case 8 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:297:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1379);
                    else_stmt127=else_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, else_stmt127.getTree());

                    }
                    break;
                case 9 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:298:4: switch_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_wrapper_in_block_internal1384);
                    switch_stmt_wrapper128=switch_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, switch_stmt_wrapper128.getTree());

                    }
                    break;
                case 10 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:299:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1389);
                    return_stmt129=return_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, return_stmt129.getTree());

                    }
                    break;
                case 11 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:300:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1394);
                    for_stmt_wrapper130=for_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_wrapper130.getTree());

                    }
                    break;
                case 12 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:301:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1399);
                    while_stmt_wrapper131=while_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, while_stmt_wrapper131.getTree());

                    }
                    break;
                case 13 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:302:4: single_operators
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_operators_in_block_internal1404);
                    single_operators132=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators132.getTree());

                    }
                    break;
                case 14 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:303:4: struct_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_variable_in_block_internal1409);
                    struct_variable133=struct_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_variable133.getTree());

                    SEMICOLON134=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1411); 
                    SEMICOLON134_tree = 
                    (Object)adaptor.create(SEMICOLON134)
                    ;
                    adaptor.addChild(root_0, SEMICOLON134_tree);


                    }
                    break;
                case 15 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:304:4: enum_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_enum_variable_in_block_internal1416);
                    enum_variable135=enum_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, enum_variable135.getTree());

                    SEMICOLON136=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1418); 
                    SEMICOLON136_tree = 
                    (Object)adaptor.create(SEMICOLON136)
                    ;
                    adaptor.addChild(root_0, SEMICOLON136_tree);


                    }
                    break;
                case 16 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:305:4: typeof_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typeof_started_in_block_internal1423);
                    typeof_started137=typeof_started();

                    state._fsp--;

                    adaptor.addChild(root_0, typeof_started137.getTree());

                    SEMICOLON138=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1425); 
                    SEMICOLON138_tree = 
                    (Object)adaptor.create(SEMICOLON138)
                    ;
                    adaptor.addChild(root_0, SEMICOLON138_tree);


                    }
                    break;
                case 17 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:306:4: known_type_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_known_type_started_in_block_internal1430);
                    known_type_started139=known_type_started();

                    state._fsp--;

                    adaptor.addChild(root_0, known_type_started139.getTree());

                    SEMICOLON140=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1432); 
                    SEMICOLON140_tree = 
                    (Object)adaptor.create(SEMICOLON140)
                    ;
                    adaptor.addChild(root_0, SEMICOLON140_tree);


                    }
                    break;
                case 18 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:307:4: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    SEMICOLON141=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1437); 
                    SEMICOLON141_tree = 
                    (Object)adaptor.create(SEMICOLON141)
                    ;
                    adaptor.addChild(root_0, SEMICOLON141_tree);


                    }
                    break;
                case 19 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:308:4: goto_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_wrapper_in_block_internal1443);
                    goto_wrapper142=goto_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, goto_wrapper142.getTree());

                    }
                    break;
                case 20 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:309:4: 'extern'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal143=(Token)match(input,193,FOLLOW_193_in_block_internal1448); 
                    string_literal143_tree = 
                    (Object)adaptor.create(string_literal143)
                    ;
                    adaptor.addChild(root_0, string_literal143_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class goto_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:312:1: goto_wrapper : goto_operator -> ^( GOTO goto_operator ) ;
    public final ObjcmParser.goto_wrapper_return goto_wrapper() throws RecognitionException {
        ObjcmParser.goto_wrapper_return retval = new ObjcmParser.goto_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.goto_operator_return goto_operator144 =null;


        RewriteRuleSubtreeStream stream_goto_operator=new RewriteRuleSubtreeStream(adaptor,"rule goto_operator");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:313:2: ( goto_operator -> ^( GOTO goto_operator ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:313:4: goto_operator
            {
            pushFollow(FOLLOW_goto_operator_in_goto_wrapper1460);
            goto_operator144=goto_operator();

            state._fsp--;

            stream_goto_operator.add(goto_operator144.getTree());

            // AST REWRITE
            // elements: goto_operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 313:18: -> ^( GOTO goto_operator )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:313:21: ^( GOTO goto_operator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GOTO, "GOTO")
                , root_1);

                adaptor.addChild(root_1, stream_goto_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_wrapper"


    public static class goto_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_operator"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:315:1: goto_operator : 'goto' ID SEMICOLON ;
    public final ObjcmParser.goto_operator_return goto_operator() throws RecognitionException {
        ObjcmParser.goto_operator_return retval = new ObjcmParser.goto_operator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal145=null;
        Token ID146=null;
        Token SEMICOLON147=null;

        Object string_literal145_tree=null;
        Object ID146_tree=null;
        Object SEMICOLON147_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:316:2: ( 'goto' ID SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:316:4: 'goto' ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal145=(Token)match(input,195,FOLLOW_195_in_goto_operator1477); 
            string_literal145_tree = 
            (Object)adaptor.create(string_literal145)
            ;
            adaptor.addChild(root_0, string_literal145_tree);


            ID146=(Token)match(input,ID,FOLLOW_ID_in_goto_operator1479); 
            ID146_tree = 
            (Object)adaptor.create(ID146)
            ;
            adaptor.addChild(root_0, ID146_tree);


            SEMICOLON147=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_goto_operator1481); 
            SEMICOLON147_tree = 
            (Object)adaptor.create(SEMICOLON147)
            ;
            adaptor.addChild(root_0, SEMICOLON147_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_operator"


    public static class variable_init_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:318:1: variable_init_wrapper : variable_init -> ^( VARIABLE_INIT variable_init ) ;
    public final ObjcmParser.variable_init_wrapper_return variable_init_wrapper() throws RecognitionException {
        ObjcmParser.variable_init_wrapper_return retval = new ObjcmParser.variable_init_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.variable_init_return variable_init148 =null;


        RewriteRuleSubtreeStream stream_variable_init=new RewriteRuleSubtreeStream(adaptor,"rule variable_init");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:319:2: ( variable_init -> ^( VARIABLE_INIT variable_init ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:319:4: variable_init
            {
            pushFollow(FOLLOW_variable_init_in_variable_init_wrapper1492);
            variable_init148=variable_init();

            state._fsp--;

            stream_variable_init.add(variable_init148.getTree());

            // AST REWRITE
            // elements: variable_init
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 319:18: -> ^( VARIABLE_INIT variable_init )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:319:21: ^( VARIABLE_INIT variable_init )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_INIT, "VARIABLE_INIT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_init.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init_wrapper"


    public static class variable_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:321:1: variable_init : full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) ;
    public final ObjcmParser.variable_init_return variable_init() throws RecognitionException {
        ObjcmParser.variable_init_return retval = new ObjcmParser.variable_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON151=null;
        Token COLON152=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper149 =null;

        ObjcmParser.full_expr2_return full_expr2150 =null;


        Object SEMICOLON151_tree=null;
        Object COLON152_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:322:2: ( full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:322:4: full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_full_expr_wrapper_in_variable_init1510);
            full_expr_wrapper149=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper149.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:322:22: ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==ID||LA34_0==SEMICOLON||LA34_0==VOID||LA34_0==186||LA34_0==189||LA34_0==197||LA34_0==200||LA34_0==205) ) {
                alt34=1;
            }
            else if ( (LA34_0==COLON) ) {
                alt34=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;

            }
            switch (alt34) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:322:23: ( ( full_expr2 )? SEMICOLON )
                    {
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:322:23: ( ( full_expr2 )? SEMICOLON )
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:322:24: ( full_expr2 )? SEMICOLON
                    {
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:322:24: ( full_expr2 )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==ID||LA33_0==VOID||LA33_0==186||LA33_0==189||LA33_0==197||LA33_0==200||LA33_0==205) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:322:24: full_expr2
                            {
                            pushFollow(FOLLOW_full_expr2_in_variable_init1514);
                            full_expr2150=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2150.getTree());

                            }
                            break;

                    }


                    SEMICOLON151=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_variable_init1517); 
                    SEMICOLON151_tree = 
                    (Object)adaptor.create(SEMICOLON151)
                    ;
                    adaptor.addChild(root_0, SEMICOLON151_tree);


                    }


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:322:49: COLON
                    {
                    COLON152=(Token)match(input,COLON,FOLLOW_COLON_in_variable_init1522); 
                    COLON152_tree = 
                    (Object)adaptor.create(COLON152)
                    ;
                    adaptor.addChild(root_0, COLON152_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init"


    public static class known_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_type_started"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:324:1: known_type_started : known_types ( ASTERISK )* full_expr2 ;
    public final ObjcmParser.known_type_started_return known_type_started() throws RecognitionException {
        ObjcmParser.known_type_started_return retval = new ObjcmParser.known_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK154=null;
        ObjcmParser.known_types_return known_types153 =null;

        ObjcmParser.full_expr2_return full_expr2155 =null;


        Object ASTERISK154_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:325:2: ( known_types ( ASTERISK )* full_expr2 )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:325:4: known_types ( ASTERISK )* full_expr2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_known_types_in_known_type_started1534);
            known_types153=known_types();

            state._fsp--;

            adaptor.addChild(root_0, known_types153.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:325:16: ( ASTERISK )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==ASTERISK) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:325:16: ASTERISK
            	    {
            	    ASTERISK154=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_known_type_started1536); 
            	    ASTERISK154_tree = 
            	    (Object)adaptor.create(ASTERISK154)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK154_tree);


            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            pushFollow(FOLLOW_full_expr2_in_known_type_started1539);
            full_expr2155=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2155.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_type_started"


    public static class typeof_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof_started"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:327:1: typeof_started : typeof full_expr_wrapper ;
    public final ObjcmParser.typeof_started_return typeof_started() throws RecognitionException {
        ObjcmParser.typeof_started_return retval = new ObjcmParser.typeof_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typeof_return typeof156 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper157 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:328:2: ( typeof full_expr_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:328:4: typeof full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typeof_in_typeof_started1551);
            typeof156=typeof();

            state._fsp--;

            adaptor.addChild(root_0, typeof156.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_typeof_started1553);
            full_expr_wrapper157=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper157.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof_started"


    public static class struct_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_variable"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:331:1: struct_variable : STRUCT_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )* -> ^( STRUCT_VARIABLE STRUCT_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )* ) ;
    public final ObjcmParser.struct_variable_return struct_variable() throws RecognitionException {
        ObjcmParser.struct_variable_return retval = new ObjcmParser.struct_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX158=null;
        Token COMMA161=null;
        ObjcmParser.name_return name159 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper160 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper162 =null;


        Object STRUCT_PREFIX158_tree=null;
        Object COMMA161_tree=null;
        RewriteRuleTokenStream stream_STRUCT_PREFIX=new RewriteRuleTokenStream(adaptor,"token STRUCT_PREFIX");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_full_expr_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule full_expr_wrapper");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:332:2: ( STRUCT_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )* -> ^( STRUCT_VARIABLE STRUCT_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )* ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:332:4: STRUCT_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )*
            {
            STRUCT_PREFIX158=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_variable1566);  
            stream_STRUCT_PREFIX.add(STRUCT_PREFIX158);


            pushFollow(FOLLOW_name_in_struct_variable1568);
            name159=name();

            state._fsp--;

            stream_name.add(name159.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_struct_variable1570);
            full_expr_wrapper160=full_expr_wrapper();

            state._fsp--;

            stream_full_expr_wrapper.add(full_expr_wrapper160.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:332:41: ( COMMA full_expr_wrapper )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==COMMA) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:332:42: COMMA full_expr_wrapper
            	    {
            	    COMMA161=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_variable1573);  
            	    stream_COMMA.add(COMMA161);


            	    pushFollow(FOLLOW_full_expr_wrapper_in_struct_variable1575);
            	    full_expr_wrapper162=full_expr_wrapper();

            	    state._fsp--;

            	    stream_full_expr_wrapper.add(full_expr_wrapper162.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            // AST REWRITE
            // elements: full_expr_wrapper, full_expr_wrapper, STRUCT_PREFIX, COMMA, name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 332:68: -> ^( STRUCT_VARIABLE STRUCT_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )* )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:332:71: ^( STRUCT_VARIABLE STRUCT_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT_VARIABLE, "STRUCT_VARIABLE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_STRUCT_PREFIX.nextNode()
                );

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_full_expr_wrapper.nextTree());

                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:332:126: ( COMMA full_expr_wrapper )*
                while ( stream_COMMA.hasNext()||stream_full_expr_wrapper.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_COMMA.nextNode()
                    );

                    adaptor.addChild(root_1, stream_full_expr_wrapper.nextTree());

                }
                stream_COMMA.reset();
                stream_full_expr_wrapper.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_variable"


    public static class enum_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_variable"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:334:1: enum_variable : ENUM_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )* ;
    public final ObjcmParser.enum_variable_return enum_variable() throws RecognitionException {
        ObjcmParser.enum_variable_return retval = new ObjcmParser.enum_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX163=null;
        Token COMMA166=null;
        ObjcmParser.name_return name164 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper165 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper167 =null;


        Object ENUM_PREFIX163_tree=null;
        Object COMMA166_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:335:2: ( ENUM_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:335:4: ENUM_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX163=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_enum_variable1605); 
            ENUM_PREFIX163_tree = 
            (Object)adaptor.create(ENUM_PREFIX163)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX163_tree);


            pushFollow(FOLLOW_name_in_enum_variable1607);
            name164=name();

            state._fsp--;

            adaptor.addChild(root_0, name164.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_enum_variable1609);
            full_expr_wrapper165=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper165.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:335:39: ( COMMA full_expr_wrapper )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==COMMA) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:335:40: COMMA full_expr_wrapper
            	    {
            	    COMMA166=(Token)match(input,COMMA,FOLLOW_COMMA_in_enum_variable1612); 
            	    COMMA166_tree = 
            	    (Object)adaptor.create(COMMA166)
            	    ;
            	    adaptor.addChild(root_0, COMMA166_tree);


            	    pushFollow(FOLLOW_full_expr_wrapper_in_enum_variable1614);
            	    full_expr_wrapper167=full_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, full_expr_wrapper167.getTree());

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_variable"


    public static class const_expression_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expression_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:337:1: const_expression_wrapper : CONST_PREFIX const_expression -> ^( CONST_EXPR2 const_expression ) ;
    public final ObjcmParser.const_expression_wrapper_return const_expression_wrapper() throws RecognitionException {
        ObjcmParser.const_expression_wrapper_return retval = new ObjcmParser.const_expression_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX168=null;
        ObjcmParser.const_expression_return const_expression169 =null;


        Object CONST_PREFIX168_tree=null;
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_const_expression=new RewriteRuleSubtreeStream(adaptor,"rule const_expression");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:338:2: ( CONST_PREFIX const_expression -> ^( CONST_EXPR2 const_expression ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:338:4: CONST_PREFIX const_expression
            {
            CONST_PREFIX168=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_const_expression_wrapper1625);  
            stream_CONST_PREFIX.add(CONST_PREFIX168);


            pushFollow(FOLLOW_const_expression_in_const_expression_wrapper1627);
            const_expression169=const_expression();

            state._fsp--;

            stream_const_expression.add(const_expression169.getTree());

            // AST REWRITE
            // elements: const_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 338:34: -> ^( CONST_EXPR2 const_expression )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:338:37: ^( CONST_EXPR2 const_expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONST_EXPR2, "CONST_EXPR2")
                , root_1);

                adaptor.addChild(root_1, stream_const_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expression_wrapper"


    public static class const_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expression"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:340:1: const_expression : type_internal full_expr_wrapper ;
    public final ObjcmParser.const_expression_return const_expression() throws RecognitionException {
        ObjcmParser.const_expression_return retval = new ObjcmParser.const_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_internal_return type_internal170 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper171 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:341:2: ( type_internal full_expr_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:341:4: type_internal full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_const_expression1646);
            type_internal170=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal170.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_const_expression1648);
            full_expr_wrapper171=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper171.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expression"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:343:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcmParser.throw_stmt_wrapper_return retval = new ObjcmParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.throw_stmt_return throw_stmt172 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:344:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:344:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper1657);
            throw_stmt172=throw_stmt();

            state._fsp--;

            stream_throw_stmt.add(throw_stmt172.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:15: -> ^( THROW_STMT throw_stmt )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:344:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:346:1: throw_stmt : '@throw' SEMICOLON ;
    public final ObjcmParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcmParser.throw_stmt_return retval = new ObjcmParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal173=null;
        Token SEMICOLON174=null;

        Object string_literal173_tree=null;
        Object SEMICOLON174_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:347:2: ( '@throw' SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:347:4: '@throw' SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal173=(Token)match(input,181,FOLLOW_181_in_throw_stmt1674); 
            string_literal173_tree = 
            (Object)adaptor.create(string_literal173)
            ;
            adaptor.addChild(root_0, string_literal173_tree);


            SEMICOLON174=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_throw_stmt1677); 
            SEMICOLON174_tree = 
            (Object)adaptor.create(SEMICOLON174)
            ;
            adaptor.addChild(root_0, SEMICOLON174_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class try_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:350:1: try_stmt : '@try' block ( catch_stmt )* ( '@finally' block )? ;
    public final ObjcmParser.try_stmt_return try_stmt() throws RecognitionException {
        ObjcmParser.try_stmt_return retval = new ObjcmParser.try_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal175=null;
        Token string_literal178=null;
        ObjcmParser.block_return block176 =null;

        ObjcmParser.catch_stmt_return catch_stmt177 =null;

        ObjcmParser.block_return block179 =null;


        Object string_literal175_tree=null;
        Object string_literal178_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:350:9: ( '@try' block ( catch_stmt )* ( '@finally' block )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:350:11: '@try' block ( catch_stmt )* ( '@finally' block )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal175=(Token)match(input,182,FOLLOW_182_in_try_stmt1688); 
            string_literal175_tree = 
            (Object)adaptor.create(string_literal175)
            ;
            adaptor.addChild(root_0, string_literal175_tree);


            pushFollow(FOLLOW_block_in_try_stmt1691);
            block176=block();

            state._fsp--;

            adaptor.addChild(root_0, block176.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:350:26: ( catch_stmt )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==169) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:350:26: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt1694);
            	    catch_stmt177=catch_stmt();

            	    state._fsp--;

            	    adaptor.addChild(root_0, catch_stmt177.getTree());

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:350:38: ( '@finally' block )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==172) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:350:39: '@finally' block
                    {
                    string_literal178=(Token)match(input,172,FOLLOW_172_in_try_stmt1698); 
                    string_literal178_tree = 
                    (Object)adaptor.create(string_literal178)
                    ;
                    adaptor.addChild(root_0, string_literal178_tree);


                    pushFollow(FOLLOW_block_in_try_stmt1701);
                    block179=block();

                    state._fsp--;

                    adaptor.addChild(root_0, block179.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:353:1: catch_stmt : '@catch' L_BR ( ( ID ( ASTERISK )* ID ) | '...' ) R_BR block ;
    public final ObjcmParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcmParser.catch_stmt_return retval = new ObjcmParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal180=null;
        Token L_BR181=null;
        Token ID182=null;
        Token ASTERISK183=null;
        Token ID184=null;
        Token string_literal185=null;
        Token R_BR186=null;
        ObjcmParser.block_return block187 =null;


        Object string_literal180_tree=null;
        Object L_BR181_tree=null;
        Object ID182_tree=null;
        Object ASTERISK183_tree=null;
        Object ID184_tree=null;
        Object string_literal185_tree=null;
        Object R_BR186_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:354:2: ( '@catch' L_BR ( ( ID ( ASTERISK )* ID ) | '...' ) R_BR block )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:354:4: '@catch' L_BR ( ( ID ( ASTERISK )* ID ) | '...' ) R_BR block
            {
            root_0 = (Object)adaptor.nil();


            string_literal180=(Token)match(input,169,FOLLOW_169_in_catch_stmt1715); 
            string_literal180_tree = 
            (Object)adaptor.create(string_literal180)
            ;
            adaptor.addChild(root_0, string_literal180_tree);


            L_BR181=(Token)match(input,L_BR,FOLLOW_L_BR_in_catch_stmt1718); 
            L_BR181_tree = 
            (Object)adaptor.create(L_BR181)
            ;
            adaptor.addChild(root_0, L_BR181_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:354:20: ( ( ID ( ASTERISK )* ID ) | '...' )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==ID) ) {
                alt41=1;
            }
            else if ( (LA41_0==168) ) {
                alt41=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }
            switch (alt41) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:354:21: ( ID ( ASTERISK )* ID )
                    {
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:354:21: ( ID ( ASTERISK )* ID )
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:354:22: ID ( ASTERISK )* ID
                    {
                    ID182=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1723); 
                    ID182_tree = 
                    (Object)adaptor.create(ID182)
                    ;
                    adaptor.addChild(root_0, ID182_tree);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:354:26: ( ASTERISK )*
                    loop40:
                    do {
                        int alt40=2;
                        int LA40_0 = input.LA(1);

                        if ( (LA40_0==ASTERISK) ) {
                            alt40=1;
                        }


                        switch (alt40) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:354:26: ASTERISK
                    	    {
                    	    ASTERISK183=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_catch_stmt1726); 
                    	    ASTERISK183_tree = 
                    	    (Object)adaptor.create(ASTERISK183)
                    	    ;
                    	    adaptor.addChild(root_0, ASTERISK183_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop40;
                        }
                    } while (true);


                    ID184=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1729); 
                    ID184_tree = 
                    (Object)adaptor.create(ID184)
                    ;
                    adaptor.addChild(root_0, ID184_tree);


                    }


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:354:42: '...'
                    {
                    string_literal185=(Token)match(input,168,FOLLOW_168_in_catch_stmt1734); 
                    string_literal185_tree = 
                    (Object)adaptor.create(string_literal185)
                    ;
                    adaptor.addChild(root_0, string_literal185_tree);


                    }
                    break;

            }


            R_BR186=(Token)match(input,R_BR,FOLLOW_R_BR_in_catch_stmt1738); 
            R_BR186_tree = 
            (Object)adaptor.create(R_BR186)
            ;
            adaptor.addChild(root_0, R_BR186_tree);


            pushFollow(FOLLOW_block_in_catch_stmt1741);
            block187=block();

            state._fsp--;

            adaptor.addChild(root_0, block187.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class switch_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:357:1: switch_stmt_wrapper : switch_stmt -> ^( SWITCH switch_stmt ) ;
    public final ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper() throws RecognitionException {
        ObjcmParser.switch_stmt_wrapper_return retval = new ObjcmParser.switch_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.switch_stmt_return switch_stmt188 =null;


        RewriteRuleSubtreeStream stream_switch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule switch_stmt");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:358:2: ( switch_stmt -> ^( SWITCH switch_stmt ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:358:4: switch_stmt
            {
            pushFollow(FOLLOW_switch_stmt_in_switch_stmt_wrapper1754);
            switch_stmt188=switch_stmt();

            state._fsp--;

            stream_switch_stmt.add(switch_stmt188.getTree());

            // AST REWRITE
            // elements: switch_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 358:16: -> ^( SWITCH switch_stmt )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:358:19: ^( SWITCH switch_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH, "SWITCH")
                , root_1);

                adaptor.addChild(root_1, stream_switch_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt_wrapper"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:360:1: switch_stmt : 'switch' L_BR switch_expr R_BR switch_body_wrapper ;
    public final ObjcmParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcmParser.switch_stmt_return retval = new ObjcmParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal189=null;
        Token L_BR190=null;
        Token R_BR192=null;
        ObjcmParser.switch_expr_return switch_expr191 =null;

        ObjcmParser.switch_body_wrapper_return switch_body_wrapper193 =null;


        Object string_literal189_tree=null;
        Object L_BR190_tree=null;
        Object R_BR192_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:361:2: ( 'switch' L_BR switch_expr R_BR switch_body_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:361:4: 'switch' L_BR switch_expr R_BR switch_body_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal189=(Token)match(input,202,FOLLOW_202_in_switch_stmt1771); 
            string_literal189_tree = 
            (Object)adaptor.create(string_literal189)
            ;
            adaptor.addChild(root_0, string_literal189_tree);


            L_BR190=(Token)match(input,L_BR,FOLLOW_L_BR_in_switch_stmt1774); 
            L_BR190_tree = 
            (Object)adaptor.create(L_BR190)
            ;
            adaptor.addChild(root_0, L_BR190_tree);


            pushFollow(FOLLOW_switch_expr_in_switch_stmt1777);
            switch_expr191=switch_expr();

            state._fsp--;

            adaptor.addChild(root_0, switch_expr191.getTree());

            R_BR192=(Token)match(input,R_BR,FOLLOW_R_BR_in_switch_stmt1779); 
            R_BR192_tree = 
            (Object)adaptor.create(R_BR192)
            ;
            adaptor.addChild(root_0, R_BR192_tree);


            pushFollow(FOLLOW_switch_body_wrapper_in_switch_stmt1785);
            switch_body_wrapper193=switch_body_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, switch_body_wrapper193.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:365:1: switch_body_wrapper : L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) ;
    public final ObjcmParser.switch_body_wrapper_return switch_body_wrapper() throws RecognitionException {
        ObjcmParser.switch_body_wrapper_return retval = new ObjcmParser.switch_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR194=null;
        Token R_FBR196=null;
        ObjcmParser.switch_body_return switch_body195 =null;


        Object L_FBR194_tree=null;
        Object R_FBR196_tree=null;
        RewriteRuleTokenStream stream_R_FBR=new RewriteRuleTokenStream(adaptor,"token R_FBR");
        RewriteRuleTokenStream stream_L_FBR=new RewriteRuleTokenStream(adaptor,"token L_FBR");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:366:2: ( L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:366:4: L_FBR switch_body R_FBR
            {
            L_FBR194=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_switch_body_wrapper1798);  
            stream_L_FBR.add(L_FBR194);


            pushFollow(FOLLOW_switch_body_in_switch_body_wrapper1800);
            switch_body195=switch_body();

            state._fsp--;

            stream_switch_body.add(switch_body195.getTree());

            R_FBR196=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_switch_body_wrapper1802);  
            stream_R_FBR.add(R_FBR196);


            // AST REWRITE
            // elements: switch_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:28: -> ^( SWITCH_BODY switch_body )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:366:31: ^( SWITCH_BODY switch_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_BODY, "SWITCH_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_switch_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body_wrapper"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:368:1: switch_body : ( block_internal_full )* ( switch_internal )* ;
    public final ObjcmParser.switch_body_return switch_body() throws RecognitionException {
        ObjcmParser.switch_body_return retval = new ObjcmParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_full_return block_internal_full197 =null;

        ObjcmParser.switch_internal_return switch_internal198 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:369:2: ( ( block_internal_full )* ( switch_internal )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:369:4: ( block_internal_full )* ( switch_internal )*
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:369:4: ( block_internal_full )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0==ASTERISK||LA42_0==BREAK_WORD||LA42_0==CONST_PREFIX||LA42_0==ENUM_PREFIX||LA42_0==ID||LA42_0==L_AND||LA42_0==L_BR||LA42_0==L_KBR||LA42_0==L_MINUS||LA42_0==L_MINUS_MINUS||LA42_0==L_NOT||LA42_0==L_PLUS||LA42_0==L_PLUS_PLUS||LA42_0==L_TILDA||LA42_0==NUMBER||LA42_0==SEMICOLON||(LA42_0 >= SINGLE_OP && LA42_0 <= SIZEOF)||LA42_0==STATIC_PREFIX||(LA42_0 >= STRING_LITERAL && LA42_0 <= STRING_LITERAL3)||LA42_0==STRUCT_PREFIX||LA42_0==VOID||LA42_0==170||LA42_0==177||LA42_0==179||(LA42_0 >= 181 && LA42_0 <= 183)||(LA42_0 >= 185 && LA42_0 <= 186)||LA42_0==189||(LA42_0 >= 191 && LA42_0 <= 197)||(LA42_0 >= 199 && LA42_0 <= 202)||(LA42_0 >= 205 && LA42_0 <= 206)) ) {
                    alt42=1;
                }


                switch (alt42) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:369:4: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_switch_body1821);
            	    block_internal_full197=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full197.getTree());

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:370:3: ( switch_internal )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==187||LA43_0==190) ) {
                    alt43=1;
                }


                switch (alt43) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:370:3: switch_internal
            	    {
            	    pushFollow(FOLLOW_switch_internal_in_switch_body1826);
            	    switch_internal198=switch_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, switch_internal198.getTree());

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class switch_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:373:1: switch_expr : classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) ;
    public final ObjcmParser.switch_expr_return switch_expr() throws RecognitionException {
        ObjcmParser.switch_expr_return retval = new ObjcmParser.switch_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp199 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:374:2: ( classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:374:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_switch_expr1839);
            classical_expr_wrp199=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp199.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 374:23: -> ^( SWITCH_EXPRESSION classical_expr_wrp )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:374:26: ^( SWITCH_EXPRESSION classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_EXPRESSION, "SWITCH_EXPRESSION")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_expr"


    public static class switch_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:376:1: switch_internal : ( case_stmt_wrapper | default_stmt_wrapper );
    public final ObjcmParser.switch_internal_return switch_internal() throws RecognitionException {
        ObjcmParser.switch_internal_return retval = new ObjcmParser.switch_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper200 =null;

        ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper201 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:377:2: ( case_stmt_wrapper | default_stmt_wrapper )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==187) ) {
                alt44=1;
            }
            else if ( (LA44_0==190) ) {
                alt44=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;

            }
            switch (alt44) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:377:4: case_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_wrapper_in_switch_internal1856);
                    case_stmt_wrapper200=case_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_stmt_wrapper200.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:378:5: default_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_wrapper_in_switch_internal1862);
                    default_stmt_wrapper201=default_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt_wrapper201.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_internal"


    public static class case_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:380:1: case_stmt_wrapper : case_stmt -> ^( CASE_STMT case_stmt ) ;
    public final ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper() throws RecognitionException {
        ObjcmParser.case_stmt_wrapper_return retval = new ObjcmParser.case_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_return case_stmt202 =null;


        RewriteRuleSubtreeStream stream_case_stmt=new RewriteRuleSubtreeStream(adaptor,"rule case_stmt");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:381:2: ( case_stmt -> ^( CASE_STMT case_stmt ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:381:4: case_stmt
            {
            pushFollow(FOLLOW_case_stmt_in_case_stmt_wrapper1871);
            case_stmt202=case_stmt();

            state._fsp--;

            stream_case_stmt.add(case_stmt202.getTree());

            // AST REWRITE
            // elements: case_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 381:14: -> ^( CASE_STMT case_stmt )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:381:17: ^( CASE_STMT case_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_case_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt_wrapper"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:383:1: case_stmt : 'case' case_expr_wrapper COLON ( case_body_wrapper )? ;
    public final ObjcmParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcmParser.case_stmt_return retval = new ObjcmParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal203=null;
        Token COLON205=null;
        ObjcmParser.case_expr_wrapper_return case_expr_wrapper204 =null;

        ObjcmParser.case_body_wrapper_return case_body_wrapper206 =null;


        Object string_literal203_tree=null;
        Object COLON205_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:384:2: ( 'case' case_expr_wrapper COLON ( case_body_wrapper )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:384:4: 'case' case_expr_wrapper COLON ( case_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal203=(Token)match(input,187,FOLLOW_187_in_case_stmt1888); 
            string_literal203_tree = 
            (Object)adaptor.create(string_literal203)
            ;
            adaptor.addChild(root_0, string_literal203_tree);


            pushFollow(FOLLOW_case_expr_wrapper_in_case_stmt1891);
            case_expr_wrapper204=case_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, case_expr_wrapper204.getTree());

            COLON205=(Token)match(input,COLON,FOLLOW_COLON_in_case_stmt1894); 
            COLON205_tree = 
            (Object)adaptor.create(COLON205)
            ;
            adaptor.addChild(root_0, COLON205_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:385:3: ( case_body_wrapper )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==ASTERISK||LA45_0==BREAK_WORD||LA45_0==CONST_PREFIX||LA45_0==ENUM_PREFIX||LA45_0==ID||LA45_0==L_AND||LA45_0==L_BR||(LA45_0 >= L_FBR && LA45_0 <= L_KBR)||LA45_0==L_MINUS||LA45_0==L_MINUS_MINUS||LA45_0==L_NOT||LA45_0==L_PLUS||LA45_0==L_PLUS_PLUS||LA45_0==L_TILDA||LA45_0==NUMBER||LA45_0==SEMICOLON||(LA45_0 >= SINGLE_OP && LA45_0 <= SIZEOF)||LA45_0==STATIC_PREFIX||(LA45_0 >= STRING_LITERAL && LA45_0 <= STRING_LITERAL3)||LA45_0==STRUCT_PREFIX||LA45_0==VOID||LA45_0==170||LA45_0==177||LA45_0==179||(LA45_0 >= 181 && LA45_0 <= 183)||(LA45_0 >= 185 && LA45_0 <= 186)||LA45_0==189||(LA45_0 >= 191 && LA45_0 <= 197)||(LA45_0 >= 199 && LA45_0 <= 202)||(LA45_0 >= 205 && LA45_0 <= 206)) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:385:3: case_body_wrapper
                    {
                    pushFollow(FOLLOW_case_body_wrapper_in_case_stmt1899);
                    case_body_wrapper206=case_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_body_wrapper206.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class case_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:388:1: case_body_wrapper : case_body -> ^( CASE_BODY case_body ) ;
    public final ObjcmParser.case_body_wrapper_return case_body_wrapper() throws RecognitionException {
        ObjcmParser.case_body_wrapper_return retval = new ObjcmParser.case_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_body_return case_body207 =null;


        RewriteRuleSubtreeStream stream_case_body=new RewriteRuleSubtreeStream(adaptor,"rule case_body");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:389:2: ( case_body -> ^( CASE_BODY case_body ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:389:4: case_body
            {
            pushFollow(FOLLOW_case_body_in_case_body_wrapper1913);
            case_body207=case_body();

            state._fsp--;

            stream_case_body.add(case_body207.getTree());

            // AST REWRITE
            // elements: case_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 389:14: -> ^( CASE_BODY case_body )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:389:17: ^( CASE_BODY case_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_BODY, "CASE_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_case_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body_wrapper"


    public static class case_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:391:1: case_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.case_body_return case_body() throws RecognitionException {
        ObjcmParser.case_body_return retval = new ObjcmParser.case_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break208 =null;

        ObjcmParser.block_internal_full_return block_internal_full209 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:392:2: ( block_break | ( block_internal_full )+ )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==L_FBR) ) {
                alt47=1;
            }
            else if ( (LA47_0==ASTERISK||LA47_0==BREAK_WORD||LA47_0==CONST_PREFIX||LA47_0==ENUM_PREFIX||LA47_0==ID||LA47_0==L_AND||LA47_0==L_BR||LA47_0==L_KBR||LA47_0==L_MINUS||LA47_0==L_MINUS_MINUS||LA47_0==L_NOT||LA47_0==L_PLUS||LA47_0==L_PLUS_PLUS||LA47_0==L_TILDA||LA47_0==NUMBER||LA47_0==SEMICOLON||(LA47_0 >= SINGLE_OP && LA47_0 <= SIZEOF)||LA47_0==STATIC_PREFIX||(LA47_0 >= STRING_LITERAL && LA47_0 <= STRING_LITERAL3)||LA47_0==STRUCT_PREFIX||LA47_0==VOID||LA47_0==170||LA47_0==177||LA47_0==179||(LA47_0 >= 181 && LA47_0 <= 183)||(LA47_0 >= 185 && LA47_0 <= 186)||LA47_0==189||(LA47_0 >= 191 && LA47_0 <= 197)||(LA47_0 >= 199 && LA47_0 <= 202)||(LA47_0 >= 205 && LA47_0 <= 206)) ) {
                alt47=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }
            switch (alt47) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:392:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_case_body1932);
                    block_break208=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break208.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:393:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:393:5: ( block_internal_full )+
                    int cnt46=0;
                    loop46:
                    do {
                        int alt46=2;
                        int LA46_0 = input.LA(1);

                        if ( (LA46_0==ASTERISK||LA46_0==BREAK_WORD||LA46_0==CONST_PREFIX||LA46_0==ENUM_PREFIX||LA46_0==ID||LA46_0==L_AND||LA46_0==L_BR||LA46_0==L_KBR||LA46_0==L_MINUS||LA46_0==L_MINUS_MINUS||LA46_0==L_NOT||LA46_0==L_PLUS||LA46_0==L_PLUS_PLUS||LA46_0==L_TILDA||LA46_0==NUMBER||LA46_0==SEMICOLON||(LA46_0 >= SINGLE_OP && LA46_0 <= SIZEOF)||LA46_0==STATIC_PREFIX||(LA46_0 >= STRING_LITERAL && LA46_0 <= STRING_LITERAL3)||LA46_0==STRUCT_PREFIX||LA46_0==VOID||LA46_0==170||LA46_0==177||LA46_0==179||(LA46_0 >= 181 && LA46_0 <= 183)||(LA46_0 >= 185 && LA46_0 <= 186)||LA46_0==189||(LA46_0 >= 191 && LA46_0 <= 197)||(LA46_0 >= 199 && LA46_0 <= 202)||(LA46_0 >= 205 && LA46_0 <= 206)) ) {
                            alt46=1;
                        }


                        switch (alt46) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:393:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_case_body1939);
                    	    block_internal_full209=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full209.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt46 >= 1 ) break loop46;
                                EarlyExitException eee =
                                    new EarlyExitException(46, input);
                                throw eee;
                        }
                        cnt46++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body"


    public static class case_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:396:1: case_expr_wrapper : case_expr -> ^( CASE_EXPR case_expr ) ;
    public final ObjcmParser.case_expr_wrapper_return case_expr_wrapper() throws RecognitionException {
        ObjcmParser.case_expr_wrapper_return retval = new ObjcmParser.case_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_expr_return case_expr210 =null;


        RewriteRuleSubtreeStream stream_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule case_expr");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:397:2: ( case_expr -> ^( CASE_EXPR case_expr ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:397:4: case_expr
            {
            pushFollow(FOLLOW_case_expr_in_case_expr_wrapper1955);
            case_expr210=case_expr();

            state._fsp--;

            stream_case_expr.add(case_expr210.getTree());

            // AST REWRITE
            // elements: case_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 397:14: -> ^( CASE_EXPR case_expr )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:397:17: ^( CASE_EXPR case_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_EXPR, "CASE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_case_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr_wrapper"


    public static class case_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:399:1: case_expr : ( const_expr | ID );
    public final ObjcmParser.case_expr_return case_expr() throws RecognitionException {
        ObjcmParser.case_expr_return retval = new ObjcmParser.case_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID212=null;
        ObjcmParser.const_expr_return const_expr211 =null;


        Object ID212_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:400:2: ( const_expr | ID )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==NUMBER||(LA48_0 >= STRING_LITERAL && LA48_0 <= STRING_LITERAL3)||LA48_0==183||LA48_0==199) ) {
                alt48=1;
            }
            else if ( (LA48_0==ID) ) {
                alt48=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;

            }
            switch (alt48) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:400:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_case_expr1977);
                    const_expr211=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr211.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:401:5: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID212=(Token)match(input,ID,FOLLOW_ID_in_case_expr1984); 
                    ID212_tree = 
                    (Object)adaptor.create(ID212)
                    ;
                    adaptor.addChild(root_0, ID212_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr"


    public static class block_break_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_break"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:403:1: block_break : block_case ( single_operators )? ;
    public final ObjcmParser.block_break_return block_break() throws RecognitionException {
        ObjcmParser.block_break_return retval = new ObjcmParser.block_break_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_case_return block_case213 =null;

        ObjcmParser.single_operators_return single_operators214 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:404:2: ( block_case ( single_operators )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:404:4: block_case ( single_operators )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_case_in_block_break1995);
            block_case213=block_case();

            state._fsp--;

            adaptor.addChild(root_0, block_case213.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:404:15: ( single_operators )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==BREAK_WORD||LA49_0==SINGLE_OP) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:404:15: single_operators
                    {
                    pushFollow(FOLLOW_single_operators_in_block_break1997);
                    single_operators214=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators214.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_break"


    public static class default_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:407:1: default_stmt_wrapper : default_stmt -> ^( DEFAULT_STMT default_stmt ) ;
    public final ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper() throws RecognitionException {
        ObjcmParser.default_stmt_wrapper_return retval = new ObjcmParser.default_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_stmt_return default_stmt215 =null;


        RewriteRuleSubtreeStream stream_default_stmt=new RewriteRuleSubtreeStream(adaptor,"rule default_stmt");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:408:2: ( default_stmt -> ^( DEFAULT_STMT default_stmt ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:408:4: default_stmt
            {
            pushFollow(FOLLOW_default_stmt_in_default_stmt_wrapper2009);
            default_stmt215=default_stmt();

            state._fsp--;

            stream_default_stmt.add(default_stmt215.getTree());

            // AST REWRITE
            // elements: default_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 408:17: -> ^( DEFAULT_STMT default_stmt )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:408:20: ^( DEFAULT_STMT default_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_default_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt_wrapper"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:410:1: default_stmt : 'default' COLON ( default_body_wrapper )? ;
    public final ObjcmParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcmParser.default_stmt_return retval = new ObjcmParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal216=null;
        Token COLON217=null;
        ObjcmParser.default_body_wrapper_return default_body_wrapper218 =null;


        Object string_literal216_tree=null;
        Object COLON217_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:411:2: ( 'default' COLON ( default_body_wrapper )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:411:4: 'default' COLON ( default_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal216=(Token)match(input,190,FOLLOW_190_in_default_stmt2026); 
            string_literal216_tree = 
            (Object)adaptor.create(string_literal216)
            ;
            adaptor.addChild(root_0, string_literal216_tree);


            COLON217=(Token)match(input,COLON,FOLLOW_COLON_in_default_stmt2029); 
            COLON217_tree = 
            (Object)adaptor.create(COLON217)
            ;
            adaptor.addChild(root_0, COLON217_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:412:3: ( default_body_wrapper )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==ASTERISK||LA50_0==BREAK_WORD||LA50_0==CONST_PREFIX||LA50_0==ENUM_PREFIX||LA50_0==ID||LA50_0==L_AND||LA50_0==L_BR||(LA50_0 >= L_FBR && LA50_0 <= L_KBR)||LA50_0==L_MINUS||LA50_0==L_MINUS_MINUS||LA50_0==L_NOT||LA50_0==L_PLUS||LA50_0==L_PLUS_PLUS||LA50_0==L_TILDA||LA50_0==NUMBER||LA50_0==SEMICOLON||(LA50_0 >= SINGLE_OP && LA50_0 <= SIZEOF)||LA50_0==STATIC_PREFIX||(LA50_0 >= STRING_LITERAL && LA50_0 <= STRING_LITERAL3)||LA50_0==STRUCT_PREFIX||LA50_0==VOID||LA50_0==170||LA50_0==177||LA50_0==179||(LA50_0 >= 181 && LA50_0 <= 183)||(LA50_0 >= 185 && LA50_0 <= 186)||LA50_0==189||(LA50_0 >= 191 && LA50_0 <= 197)||(LA50_0 >= 199 && LA50_0 <= 202)||(LA50_0 >= 205 && LA50_0 <= 206)) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:412:3: default_body_wrapper
                    {
                    pushFollow(FOLLOW_default_body_wrapper_in_default_stmt2034);
                    default_body_wrapper218=default_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_body_wrapper218.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class default_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:415:1: default_body_wrapper : default_body -> ^( DEFAULT_BODY default_body ) ;
    public final ObjcmParser.default_body_wrapper_return default_body_wrapper() throws RecognitionException {
        ObjcmParser.default_body_wrapper_return retval = new ObjcmParser.default_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_body_return default_body219 =null;


        RewriteRuleSubtreeStream stream_default_body=new RewriteRuleSubtreeStream(adaptor,"rule default_body");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:416:2: ( default_body -> ^( DEFAULT_BODY default_body ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:416:4: default_body
            {
            pushFollow(FOLLOW_default_body_in_default_body_wrapper2047);
            default_body219=default_body();

            state._fsp--;

            stream_default_body.add(default_body219.getTree());

            // AST REWRITE
            // elements: default_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 416:17: -> ^( DEFAULT_BODY default_body )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:416:20: ^( DEFAULT_BODY default_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_BODY, "DEFAULT_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_default_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body_wrapper"


    public static class default_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:419:1: default_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.default_body_return default_body() throws RecognitionException {
        ObjcmParser.default_body_return retval = new ObjcmParser.default_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break220 =null;

        ObjcmParser.block_internal_full_return block_internal_full221 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:420:2: ( block_break | ( block_internal_full )+ )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==L_FBR) ) {
                alt52=1;
            }
            else if ( (LA52_0==ASTERISK||LA52_0==BREAK_WORD||LA52_0==CONST_PREFIX||LA52_0==ENUM_PREFIX||LA52_0==ID||LA52_0==L_AND||LA52_0==L_BR||LA52_0==L_KBR||LA52_0==L_MINUS||LA52_0==L_MINUS_MINUS||LA52_0==L_NOT||LA52_0==L_PLUS||LA52_0==L_PLUS_PLUS||LA52_0==L_TILDA||LA52_0==NUMBER||LA52_0==SEMICOLON||(LA52_0 >= SINGLE_OP && LA52_0 <= SIZEOF)||LA52_0==STATIC_PREFIX||(LA52_0 >= STRING_LITERAL && LA52_0 <= STRING_LITERAL3)||LA52_0==STRUCT_PREFIX||LA52_0==VOID||LA52_0==170||LA52_0==177||LA52_0==179||(LA52_0 >= 181 && LA52_0 <= 183)||(LA52_0 >= 185 && LA52_0 <= 186)||LA52_0==189||(LA52_0 >= 191 && LA52_0 <= 197)||(LA52_0 >= 199 && LA52_0 <= 202)||(LA52_0 >= 205 && LA52_0 <= 206)) ) {
                alt52=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;

            }
            switch (alt52) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:420:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_default_body2067);
                    block_break220=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break220.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:421:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:421:5: ( block_internal_full )+
                    int cnt51=0;
                    loop51:
                    do {
                        int alt51=2;
                        int LA51_0 = input.LA(1);

                        if ( (LA51_0==ASTERISK||LA51_0==BREAK_WORD||LA51_0==CONST_PREFIX||LA51_0==ENUM_PREFIX||LA51_0==ID||LA51_0==L_AND||LA51_0==L_BR||LA51_0==L_KBR||LA51_0==L_MINUS||LA51_0==L_MINUS_MINUS||LA51_0==L_NOT||LA51_0==L_PLUS||LA51_0==L_PLUS_PLUS||LA51_0==L_TILDA||LA51_0==NUMBER||LA51_0==SEMICOLON||(LA51_0 >= SINGLE_OP && LA51_0 <= SIZEOF)||LA51_0==STATIC_PREFIX||(LA51_0 >= STRING_LITERAL && LA51_0 <= STRING_LITERAL3)||LA51_0==STRUCT_PREFIX||LA51_0==VOID||LA51_0==170||LA51_0==177||LA51_0==179||(LA51_0 >= 181 && LA51_0 <= 183)||(LA51_0 >= 185 && LA51_0 <= 186)||LA51_0==189||(LA51_0 >= 191 && LA51_0 <= 197)||(LA51_0 >= 199 && LA51_0 <= 202)||(LA51_0 >= 205 && LA51_0 <= 206)) ) {
                            alt51=1;
                        }


                        switch (alt51) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:421:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_default_body2073);
                    	    block_internal_full221=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full221.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt51 >= 1 ) break loop51;
                                EarlyExitException eee =
                                    new EarlyExitException(51, input);
                                throw eee;
                        }
                        cnt51++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body"


    public static class single_operators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_operators"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:424:1: single_operators : ( SINGLE_OP | break_wrapper );
    public final ObjcmParser.single_operators_return single_operators() throws RecognitionException {
        ObjcmParser.single_operators_return retval = new ObjcmParser.single_operators_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_OP222=null;
        ObjcmParser.break_wrapper_return break_wrapper223 =null;


        Object SINGLE_OP222_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:425:2: ( SINGLE_OP | break_wrapper )
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==SINGLE_OP) ) {
                alt53=1;
            }
            else if ( (LA53_0==BREAK_WORD) ) {
                alt53=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;

            }
            switch (alt53) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:425:4: SINGLE_OP
                    {
                    root_0 = (Object)adaptor.nil();


                    SINGLE_OP222=(Token)match(input,SINGLE_OP,FOLLOW_SINGLE_OP_in_single_operators2088); 
                    SINGLE_OP222_tree = 
                    (Object)adaptor.create(SINGLE_OP222)
                    ;
                    adaptor.addChild(root_0, SINGLE_OP222_tree);


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:426:5: break_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_wrapper_in_single_operators2095);
                    break_wrapper223=break_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, break_wrapper223.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_operators"


    public static class break_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:429:1: break_wrapper : break_stmt -> ^( BREAK break_stmt ) ;
    public final ObjcmParser.break_wrapper_return break_wrapper() throws RecognitionException {
        ObjcmParser.break_wrapper_return retval = new ObjcmParser.break_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.break_stmt_return break_stmt224 =null;


        RewriteRuleSubtreeStream stream_break_stmt=new RewriteRuleSubtreeStream(adaptor,"rule break_stmt");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:430:2: ( break_stmt -> ^( BREAK break_stmt ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:430:4: break_stmt
            {
            pushFollow(FOLLOW_break_stmt_in_break_wrapper2107);
            break_stmt224=break_stmt();

            state._fsp--;

            stream_break_stmt.add(break_stmt224.getTree());

            // AST REWRITE
            // elements: break_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 430:15: -> ^( BREAK break_stmt )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:430:18: ^( BREAK break_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK, "BREAK")
                , root_1);

                adaptor.addChild(root_1, stream_break_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_wrapper"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:432:1: break_stmt : BREAK_WORD SEMICOLON ;
    public final ObjcmParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcmParser.break_stmt_return retval = new ObjcmParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BREAK_WORD225=null;
        Token SEMICOLON226=null;

        Object BREAK_WORD225_tree=null;
        Object SEMICOLON226_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:433:2: ( BREAK_WORD SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:433:4: BREAK_WORD SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            BREAK_WORD225=(Token)match(input,BREAK_WORD,FOLLOW_BREAK_WORD_in_break_stmt2125); 
            BREAK_WORD225_tree = 
            (Object)adaptor.create(BREAK_WORD225)
            ;
            adaptor.addChild(root_0, BREAK_WORD225_tree);


            SEMICOLON226=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_break_stmt2128); 
            SEMICOLON226_tree = 
            (Object)adaptor.create(SEMICOLON226)
            ;
            adaptor.addChild(root_0, SEMICOLON226_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:435:1: do_stmt : 'do' if_stmt_block 'while' L_BR expression R_BR ;
    public final ObjcmParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcmParser.do_stmt_return retval = new ObjcmParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal227=null;
        Token string_literal229=null;
        Token L_BR230=null;
        Token R_BR232=null;
        ObjcmParser.if_stmt_block_return if_stmt_block228 =null;

        ObjcmParser.expression_return expression231 =null;


        Object string_literal227_tree=null;
        Object string_literal229_tree=null;
        Object L_BR230_tree=null;
        Object R_BR232_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:435:9: ( 'do' if_stmt_block 'while' L_BR expression R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:435:11: 'do' if_stmt_block 'while' L_BR expression R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal227=(Token)match(input,191,FOLLOW_191_in_do_stmt2138); 
            string_literal227_tree = 
            (Object)adaptor.create(string_literal227)
            ;
            adaptor.addChild(root_0, string_literal227_tree);


            pushFollow(FOLLOW_if_stmt_block_in_do_stmt2141);
            if_stmt_block228=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block228.getTree());

            string_literal229=(Token)match(input,206,FOLLOW_206_in_do_stmt2144); 
            string_literal229_tree = 
            (Object)adaptor.create(string_literal229)
            ;
            adaptor.addChild(root_0, string_literal229_tree);


            L_BR230=(Token)match(input,L_BR,FOLLOW_L_BR_in_do_stmt2147); 
            L_BR230_tree = 
            (Object)adaptor.create(L_BR230)
            ;
            adaptor.addChild(root_0, L_BR230_tree);


            pushFollow(FOLLOW_expression_in_do_stmt2150);
            expression231=expression();

            state._fsp--;

            adaptor.addChild(root_0, expression231.getTree());

            R_BR232=(Token)match(input,R_BR,FOLLOW_R_BR_in_do_stmt2152); 
            R_BR232_tree = 
            (Object)adaptor.create(R_BR232)
            ;
            adaptor.addChild(root_0, R_BR232_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:437:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcmParser.while_stmt_wrapper_return retval = new ObjcmParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.while_stmt_return while_stmt233 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:438:2: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:438:4: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper2161);
            while_stmt233=while_stmt();

            state._fsp--;

            stream_while_stmt.add(while_stmt233.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 438:15: -> ^( WHILE_STMT while_stmt )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:438:18: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:441:1: while_stmt : 'while' L_BR while_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcmParser.while_stmt_return retval = new ObjcmParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal234=null;
        Token L_BR235=null;
        Token R_BR237=null;
        ObjcmParser.while_expr_return while_expr236 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper238 =null;


        Object string_literal234_tree=null;
        Object L_BR235_tree=null;
        Object R_BR237_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:442:2: ( 'while' L_BR while_expr R_BR if_stmt_block_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:442:4: 'while' L_BR while_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal234=(Token)match(input,206,FOLLOW_206_in_while_stmt2180); 
            string_literal234_tree = 
            (Object)adaptor.create(string_literal234)
            ;
            adaptor.addChild(root_0, string_literal234_tree);


            L_BR235=(Token)match(input,L_BR,FOLLOW_L_BR_in_while_stmt2183); 
            L_BR235_tree = 
            (Object)adaptor.create(L_BR235)
            ;
            adaptor.addChild(root_0, L_BR235_tree);


            pushFollow(FOLLOW_while_expr_in_while_stmt2186);
            while_expr236=while_expr();

            state._fsp--;

            adaptor.addChild(root_0, while_expr236.getTree());

            R_BR237=(Token)match(input,R_BR,FOLLOW_R_BR_in_while_stmt2188); 
            R_BR237_tree = 
            (Object)adaptor.create(R_BR237)
            ;
            adaptor.addChild(root_0, R_BR237_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_while_stmt2191);
            if_stmt_block_wrapper238=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper238.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class while_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:444:1: while_expr : classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.while_expr_return while_expr() throws RecognitionException {
        ObjcmParser.while_expr_return retval = new ObjcmParser.while_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp239 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:445:2: ( classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:445:5: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_while_expr2204);
            classical_expr_wrp239=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp239.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 445:24: -> ^( WHILE_EXPR classical_expr_wrp )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:445:27: ^( WHILE_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_EXPR, "WHILE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_expr"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:447:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcmParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcmParser.for_stmt_wrapper_return retval = new ObjcmParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.for_stmt_return for_stmt240 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:448:2: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:448:4: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper2223);
            for_stmt240=for_stmt();

            state._fsp--;

            stream_for_stmt.add(for_stmt240.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 448:13: -> ^( FOR_STMT for_stmt )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:448:16: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:450:1: for_stmt : 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block ;
    public final ObjcmParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcmParser.for_stmt_return retval = new ObjcmParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal241=null;
        Token L_BR242=null;
        Token R_BR244=null;
        ObjcmParser.for_stmt_expr_wrapper_return for_stmt_expr_wrapper243 =null;

        ObjcmParser.if_stmt_block_return if_stmt_block245 =null;


        Object string_literal241_tree=null;
        Object L_BR242_tree=null;
        Object R_BR244_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:450:9: ( 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:450:11: 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal241=(Token)match(input,194,FOLLOW_194_in_for_stmt2240); 
            string_literal241_tree = 
            (Object)adaptor.create(string_literal241)
            ;
            adaptor.addChild(root_0, string_literal241_tree);


            L_BR242=(Token)match(input,L_BR,FOLLOW_L_BR_in_for_stmt2243); 
            L_BR242_tree = 
            (Object)adaptor.create(L_BR242)
            ;
            adaptor.addChild(root_0, L_BR242_tree);


            pushFollow(FOLLOW_for_stmt_expr_wrapper_in_for_stmt2246);
            for_stmt_expr_wrapper243=for_stmt_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, for_stmt_expr_wrapper243.getTree());

            R_BR244=(Token)match(input,R_BR,FOLLOW_R_BR_in_for_stmt2248); 
            R_BR244_tree = 
            (Object)adaptor.create(R_BR244)
            ;
            adaptor.addChild(root_0, R_BR244_tree);


            pushFollow(FOLLOW_if_stmt_block_in_for_stmt2251);
            if_stmt_block245=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block245.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:453:1: for_stmt_expr_wrapper : for_stmt_expr -> ^( FOR_STMT_EXPR for_stmt_expr ) ;
    public final ObjcmParser.for_stmt_expr_wrapper_return for_stmt_expr_wrapper() throws RecognitionException {
        ObjcmParser.for_stmt_expr_wrapper_return retval = new ObjcmParser.for_stmt_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.for_stmt_expr_return for_stmt_expr246 =null;


        RewriteRuleSubtreeStream stream_for_stmt_expr=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt_expr");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:454:2: ( for_stmt_expr -> ^( FOR_STMT_EXPR for_stmt_expr ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:454:4: for_stmt_expr
            {
            pushFollow(FOLLOW_for_stmt_expr_in_for_stmt_expr_wrapper2263);
            for_stmt_expr246=for_stmt_expr();

            state._fsp--;

            stream_for_stmt_expr.add(for_stmt_expr246.getTree());

            // AST REWRITE
            // elements: for_stmt_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 454:18: -> ^( FOR_STMT_EXPR for_stmt_expr )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:454:21: ^( FOR_STMT_EXPR for_stmt_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT_EXPR, "FOR_STMT_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr_wrapper"


    public static class for_stmt_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:456:1: for_stmt_expr : ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 );
    public final ObjcmParser.for_stmt_expr_return for_stmt_expr() throws RecognitionException {
        ObjcmParser.for_stmt_expr_return retval = new ObjcmParser.for_stmt_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper247 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1248 =null;

        ObjcmParser.full_expr2_return full_expr2249 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1250 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2251 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2252 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2253 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:457:2: ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==ASTERISK||LA56_0==ID||LA56_0==L_AND||LA56_0==L_BR||LA56_0==L_KBR||LA56_0==L_MINUS||LA56_0==L_MINUS_MINUS||LA56_0==L_NOT||LA56_0==L_PLUS||LA56_0==L_PLUS_PLUS||LA56_0==L_TILDA||LA56_0==NUMBER||LA56_0==SIZEOF||(LA56_0 >= STRING_LITERAL && LA56_0 <= STRING_LITERAL3)||LA56_0==170||LA56_0==177||LA56_0==179||LA56_0==183||LA56_0==186||LA56_0==189||LA56_0==197||(LA56_0 >= 199 && LA56_0 <= 200)||LA56_0==205) ) {
                alt56=1;
            }
            else if ( (LA56_0==SEMICOLON) ) {
                alt56=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;

            }
            switch (alt56) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:457:4: full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_full_expr_wrapper_in_for_stmt_expr2282);
                    full_expr_wrapper247=full_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, full_expr_wrapper247.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:457:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    int alt55=3;
                    alt55 = dfa55.predict(input);
                    switch (alt55) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:457:23: for_stmt_int1
                            {
                            pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2285);
                            for_stmt_int1248=for_stmt_int1();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int1248.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:457:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            {
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:457:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:457:40: full_expr2 ( for_stmt_int1 | for_stmt_int2 )
                            {
                            pushFollow(FOLLOW_full_expr2_in_for_stmt_expr2290);
                            full_expr2249=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2249.getTree());

                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:457:51: ( for_stmt_int1 | for_stmt_int2 )
                            int alt54=2;
                            int LA54_0 = input.LA(1);

                            if ( (LA54_0==197) ) {
                                alt54=1;
                            }
                            else if ( (LA54_0==SEMICOLON) ) {
                                alt54=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 54, 0, input);

                                throw nvae;

                            }
                            switch (alt54) {
                                case 1 :
                                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:457:52: for_stmt_int1
                                    {
                                    pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2293);
                                    for_stmt_int1250=for_stmt_int1();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int1250.getTree());

                                    }
                                    break;
                                case 2 :
                                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:457:68: for_stmt_int2
                                    {
                                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2297);
                                    for_stmt_int2251=for_stmt_int2();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int2251.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:457:86: for_stmt_int2
                            {
                            pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2303);
                            for_stmt_int2252=for_stmt_int2();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int2252.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:458:4: for_stmt_int2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2309);
                    for_stmt_int2253=for_stmt_int2();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_int2253.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr"


    public static class for_stmt_int1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int1"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:461:1: for_stmt_int1 : 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) ;
    public final ObjcmParser.for_stmt_int1_return for_stmt_int1() throws RecognitionException {
        ObjcmParser.for_stmt_int1_return retval = new ObjcmParser.for_stmt_int1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal254=null;
        ObjcmParser.object_wrapped2_return object_wrapped2255 =null;


        Object string_literal254_tree=null;
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleSubtreeStream stream_object_wrapped2=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapped2");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:462:2: ( 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:462:4: 'in' object_wrapped2
            {
            string_literal254=(Token)match(input,197,FOLLOW_197_in_for_stmt_int12324);  
            stream_197.add(string_literal254);


            pushFollow(FOLLOW_object_wrapped2_in_for_stmt_int12326);
            object_wrapped2255=object_wrapped2();

            state._fsp--;

            stream_object_wrapped2.add(object_wrapped2255.getTree());

            // AST REWRITE
            // elements: object_wrapped2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 462:26: -> ^( FOR_IN_STMT object_wrapped2 )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:462:29: ^( FOR_IN_STMT object_wrapped2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapped2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int1"


    public static class for_stmt_int2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:464:1: for_stmt_int2 : SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? ;
    public final ObjcmParser.for_stmt_int2_return for_stmt_int2() throws RecognitionException {
        ObjcmParser.for_stmt_int2_return retval = new ObjcmParser.for_stmt_int2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON256=null;
        Token SEMICOLON258=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp257 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp259 =null;


        Object SEMICOLON256_tree=null;
        Object SEMICOLON258_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:465:2: ( SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:465:4: SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )?
            {
            root_0 = (Object)adaptor.nil();


            SEMICOLON256=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22346); 
            SEMICOLON256_tree = 
            (Object)adaptor.create(SEMICOLON256)
            ;
            adaptor.addChild(root_0, SEMICOLON256_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:465:14: ( classical_expr_wrp )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==ASTERISK||LA57_0==ID||LA57_0==L_AND||LA57_0==L_BR||LA57_0==L_KBR||LA57_0==L_MINUS||LA57_0==L_MINUS_MINUS||LA57_0==L_NOT||LA57_0==L_PLUS||LA57_0==L_PLUS_PLUS||LA57_0==L_TILDA||LA57_0==NUMBER||LA57_0==SIZEOF||(LA57_0 >= STRING_LITERAL && LA57_0 <= STRING_LITERAL3)||LA57_0==170||LA57_0==177||LA57_0==179||LA57_0==183||LA57_0==186||LA57_0==189||LA57_0==197||(LA57_0 >= 199 && LA57_0 <= 200)||LA57_0==205) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:465:14: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22348);
                    classical_expr_wrp257=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp257.getTree());

                    }
                    break;

            }


            SEMICOLON258=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22351); 
            SEMICOLON258_tree = 
            (Object)adaptor.create(SEMICOLON258)
            ;
            adaptor.addChild(root_0, SEMICOLON258_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:465:44: ( classical_expr_wrp )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==ASTERISK||LA58_0==ID||LA58_0==L_AND||LA58_0==L_BR||LA58_0==L_KBR||LA58_0==L_MINUS||LA58_0==L_MINUS_MINUS||LA58_0==L_NOT||LA58_0==L_PLUS||LA58_0==L_PLUS_PLUS||LA58_0==L_TILDA||LA58_0==NUMBER||LA58_0==SIZEOF||(LA58_0 >= STRING_LITERAL && LA58_0 <= STRING_LITERAL3)||LA58_0==170||LA58_0==177||LA58_0==179||LA58_0==183||LA58_0==186||LA58_0==189||LA58_0==197||(LA58_0 >= 199 && LA58_0 <= 200)||LA58_0==205) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:465:44: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22353);
                    classical_expr_wrp259=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp259.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int2"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:468:1: return_stmt : 'return' ( expression )? SEMICOLON -> ^( RETURN_STMT ( expression )? SEMICOLON ) ;
    public final ObjcmParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcmParser.return_stmt_return retval = new ObjcmParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal260=null;
        Token SEMICOLON262=null;
        ObjcmParser.expression_return expression261 =null;


        Object string_literal260_tree=null;
        Object SEMICOLON262_tree=null;
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:469:2: ( 'return' ( expression )? SEMICOLON -> ^( RETURN_STMT ( expression )? SEMICOLON ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:469:4: 'return' ( expression )? SEMICOLON
            {
            string_literal260=(Token)match(input,201,FOLLOW_201_in_return_stmt2366);  
            stream_201.add(string_literal260);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:469:13: ( expression )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==ASTERISK||LA59_0==ID||LA59_0==L_AND||LA59_0==L_BR||LA59_0==L_KBR||LA59_0==L_MINUS||LA59_0==L_MINUS_MINUS||LA59_0==L_NOT||LA59_0==L_PLUS||LA59_0==L_PLUS_PLUS||LA59_0==L_TILDA||LA59_0==NUMBER||LA59_0==SIZEOF||(LA59_0 >= STRING_LITERAL && LA59_0 <= STRING_LITERAL3)||LA59_0==170||LA59_0==177||LA59_0==179||LA59_0==183||LA59_0==186||LA59_0==189||LA59_0==197||(LA59_0 >= 199 && LA59_0 <= 200)||LA59_0==205) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:469:13: expression
                    {
                    pushFollow(FOLLOW_expression_in_return_stmt2368);
                    expression261=expression();

                    state._fsp--;

                    stream_expression.add(expression261.getTree());

                    }
                    break;

            }


            SEMICOLON262=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_return_stmt2371);  
            stream_SEMICOLON.add(SEMICOLON262);


            // AST REWRITE
            // elements: expression, SEMICOLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 469:35: -> ^( RETURN_STMT ( expression )? SEMICOLON )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:469:38: ^( RETURN_STMT ( expression )? SEMICOLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:469:52: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, 
                stream_SEMICOLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class if_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:471:1: if_stmt_wrapper : if_stmt -> ^( IF_STMT if_stmt ) ;
    public final ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_wrapper_return retval = new ObjcmParser.if_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_return if_stmt263 =null;


        RewriteRuleSubtreeStream stream_if_stmt=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:472:2: ( if_stmt -> ^( IF_STMT if_stmt ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:472:4: if_stmt
            {
            pushFollow(FOLLOW_if_stmt_in_if_stmt_wrapper2392);
            if_stmt263=if_stmt();

            state._fsp--;

            stream_if_stmt.add(if_stmt263.getTree());

            // AST REWRITE
            // elements: if_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 472:12: -> ^( IF_STMT if_stmt )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:472:15: ^( IF_STMT if_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_wrapper"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:474:1: if_stmt : 'if' L_BR if_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcmParser.if_stmt_return retval = new ObjcmParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal264=null;
        Token L_BR265=null;
        Token R_BR267=null;
        ObjcmParser.if_expr_return if_expr266 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper268 =null;


        Object string_literal264_tree=null;
        Object L_BR265_tree=null;
        Object R_BR267_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:474:9: ( 'if' L_BR if_expr R_BR if_stmt_block_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:474:11: 'if' L_BR if_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal264=(Token)match(input,196,FOLLOW_196_in_if_stmt2408); 
            string_literal264_tree = 
            (Object)adaptor.create(string_literal264)
            ;
            adaptor.addChild(root_0, string_literal264_tree);


            L_BR265=(Token)match(input,L_BR,FOLLOW_L_BR_in_if_stmt2411); 
            L_BR265_tree = 
            (Object)adaptor.create(L_BR265)
            ;
            adaptor.addChild(root_0, L_BR265_tree);


            pushFollow(FOLLOW_if_expr_in_if_stmt2414);
            if_expr266=if_expr();

            state._fsp--;

            adaptor.addChild(root_0, if_expr266.getTree());

            R_BR267=(Token)match(input,R_BR,FOLLOW_R_BR_in_if_stmt2416); 
            R_BR267_tree = 
            (Object)adaptor.create(R_BR267)
            ;
            adaptor.addChild(root_0, R_BR267_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_if_stmt2419);
            if_stmt_block_wrapper268=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper268.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class if_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:477:1: if_expr : classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.if_expr_return if_expr() throws RecognitionException {
        ObjcmParser.if_expr_return retval = new ObjcmParser.if_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp269 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:477:9: ( classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:477:12: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_if_expr2432);
            classical_expr_wrp269=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp269.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 477:31: -> ^( IF_EXPR classical_expr_wrp )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:477:34: ^( IF_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_EXPR, "IF_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_expr"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:479:1: else_stmt : 'else' if_stmt_block ;
    public final ObjcmParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcmParser.else_stmt_return retval = new ObjcmParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal270=null;
        ObjcmParser.if_stmt_block_return if_stmt_block271 =null;


        Object string_literal270_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:480:2: ( 'else' if_stmt_block )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:480:4: 'else' if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal270=(Token)match(input,192,FOLLOW_192_in_else_stmt2451); 
            string_literal270_tree = 
            (Object)adaptor.create(string_literal270)
            ;
            adaptor.addChild(root_0, string_literal270_tree);


            pushFollow(FOLLOW_if_stmt_block_in_else_stmt2454);
            if_stmt_block271=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block271.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class if_stmt_block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:482:1: if_stmt_block_wrapper : if_stmt_block -> ^( IF_BLOCK if_stmt_block ) ;
    public final ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_block_wrapper_return retval = new ObjcmParser.if_stmt_block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_block_return if_stmt_block272 =null;


        RewriteRuleSubtreeStream stream_if_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt_block");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:483:2: ( if_stmt_block -> ^( IF_BLOCK if_stmt_block ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:483:4: if_stmt_block
            {
            pushFollow(FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2463);
            if_stmt_block272=if_stmt_block();

            state._fsp--;

            stream_if_stmt_block.add(if_stmt_block272.getTree());

            // AST REWRITE
            // elements: if_stmt_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 483:18: -> ^( IF_BLOCK if_stmt_block )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:483:21: ^( IF_BLOCK if_stmt_block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_BLOCK, "IF_BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block_wrapper"


    public static class if_stmt_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:485:1: if_stmt_block : ( block_wrapper | block_internal );
    public final ObjcmParser.if_stmt_block_return if_stmt_block() throws RecognitionException {
        ObjcmParser.if_stmt_block_return retval = new ObjcmParser.if_stmt_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_wrapper_return block_wrapper273 =null;

        ObjcmParser.block_internal_return block_internal274 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:486:2: ( block_wrapper | block_internal )
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==L_FBR) ) {
                alt60=1;
            }
            else if ( (LA60_0==ASTERISK||LA60_0==BREAK_WORD||LA60_0==CONST_PREFIX||LA60_0==ENUM_PREFIX||LA60_0==ID||LA60_0==L_AND||LA60_0==L_BR||LA60_0==L_KBR||LA60_0==L_MINUS||LA60_0==L_MINUS_MINUS||LA60_0==L_NOT||LA60_0==L_PLUS||LA60_0==L_PLUS_PLUS||LA60_0==L_TILDA||LA60_0==NUMBER||LA60_0==SEMICOLON||(LA60_0 >= SINGLE_OP && LA60_0 <= SIZEOF)||LA60_0==STATIC_PREFIX||(LA60_0 >= STRING_LITERAL && LA60_0 <= STRING_LITERAL3)||LA60_0==STRUCT_PREFIX||LA60_0==VOID||LA60_0==170||LA60_0==177||LA60_0==179||(LA60_0 >= 181 && LA60_0 <= 183)||(LA60_0 >= 185 && LA60_0 <= 186)||LA60_0==189||(LA60_0 >= 191 && LA60_0 <= 197)||(LA60_0 >= 199 && LA60_0 <= 202)||(LA60_0 >= 205 && LA60_0 <= 206)) ) {
                alt60=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;

            }
            switch (alt60) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:486:4: block_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_wrapper_in_if_stmt_block2480);
                    block_wrapper273=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper273.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:487:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_if_stmt_block2486);
                    block_internal274=block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, block_internal274.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block"


    public static class static_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:490:1: static_start_wrapper : static_start -> ^( STATIC_START static_start ) ;
    public final ObjcmParser.static_start_wrapper_return static_start_wrapper() throws RecognitionException {
        ObjcmParser.static_start_wrapper_return retval = new ObjcmParser.static_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_start_return static_start275 =null;


        RewriteRuleSubtreeStream stream_static_start=new RewriteRuleSubtreeStream(adaptor,"rule static_start");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:491:2: ( static_start -> ^( STATIC_START static_start ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:491:4: static_start
            {
            pushFollow(FOLLOW_static_start_in_static_start_wrapper2498);
            static_start275=static_start();

            state._fsp--;

            stream_static_start.add(static_start275.getTree());

            // AST REWRITE
            // elements: static_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 491:17: -> ^( STATIC_START static_start )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:491:20: ^( STATIC_START static_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_START, "STATIC_START")
                , root_1);

                adaptor.addChild(root_1, stream_static_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start_wrapper"


    public static class static_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:493:1: static_start : STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2 ;
    public final ObjcmParser.static_start_return static_start() throws RecognitionException {
        ObjcmParser.static_start_return retval = new ObjcmParser.static_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX276=null;
        Token CONST_PREFIX277=null;
        ObjcmParser.static_type_wrapper_return static_type_wrapper278 =null;

        ObjcmParser.full_expr2_return full_expr2279 =null;


        Object STATIC_PREFIX276_tree=null;
        Object CONST_PREFIX277_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:494:2: ( STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2 )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:494:4: STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX276=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_start2516); 
            STATIC_PREFIX276_tree = 
            (Object)adaptor.create(STATIC_PREFIX276)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX276_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:494:18: ( CONST_PREFIX )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==CONST_PREFIX) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:494:18: CONST_PREFIX
                    {
                    CONST_PREFIX277=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_start2518); 
                    CONST_PREFIX277_tree = 
                    (Object)adaptor.create(CONST_PREFIX277)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX277_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:494:32: ( static_type_wrapper )?
            int alt62=2;
            alt62 = dfa62.predict(input);
            switch (alt62) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:494:32: static_type_wrapper
                    {
                    pushFollow(FOLLOW_static_type_wrapper_in_static_start2521);
                    static_type_wrapper278=static_type_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_type_wrapper278.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_full_expr2_in_static_start2524);
            full_expr2279=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2279.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start"


    public static class static_type_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:497:1: static_type_wrapper : static_type -> ^( STATIC_TYPE static_type ) ;
    public final ObjcmParser.static_type_wrapper_return static_type_wrapper() throws RecognitionException {
        ObjcmParser.static_type_wrapper_return retval = new ObjcmParser.static_type_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_type_return static_type280 =null;


        RewriteRuleSubtreeStream stream_static_type=new RewriteRuleSubtreeStream(adaptor,"rule static_type");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:498:2: ( static_type -> ^( STATIC_TYPE static_type ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:498:4: static_type
            {
            pushFollow(FOLLOW_static_type_in_static_type_wrapper2536);
            static_type280=static_type();

            state._fsp--;

            stream_static_type.add(static_type280.getTree());

            // AST REWRITE
            // elements: static_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 498:16: -> ^( STATIC_TYPE static_type )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:498:19: ^( STATIC_TYPE static_type )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_TYPE, "STATIC_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_static_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type_wrapper"


    public static class static_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:500:1: static_type : object_name ( ASTERISK )* ;
    public final ObjcmParser.static_type_return static_type() throws RecognitionException {
        ObjcmParser.static_type_return retval = new ObjcmParser.static_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK282=null;
        ObjcmParser.object_name_return object_name281 =null;


        Object ASTERISK282_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:501:2: ( object_name ( ASTERISK )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:501:4: object_name ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_name_in_static_type2555);
            object_name281=object_name();

            state._fsp--;

            adaptor.addChild(root_0, object_name281.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:501:16: ( ASTERISK )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==ASTERISK) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:501:16: ASTERISK
            	    {
            	    ASTERISK282=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_static_type2557); 
            	    ASTERISK282_tree = 
            	    (Object)adaptor.create(ASTERISK282)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK282_tree);


            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type"


    public static class id_part_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:503:1: id_part_end : ( id_part_end_internal )+ ;
    public final ObjcmParser.id_part_end_return id_part_end() throws RecognitionException {
        ObjcmParser.id_part_end_return retval = new ObjcmParser.id_part_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_end_internal_return id_part_end_internal283 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:504:2: ( ( id_part_end_internal )+ )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:504:4: ( id_part_end_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:504:4: ( id_part_end_internal )+
            int cnt64=0;
            loop64:
            do {
                int alt64=2;
                int LA64_0 = input.LA(1);

                if ( (LA64_0==DOT||LA64_0==167) ) {
                    alt64=1;
                }


                switch (alt64) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:504:4: id_part_end_internal
            	    {
            	    pushFollow(FOLLOW_id_part_end_internal_in_id_part_end2569);
            	    id_part_end_internal283=id_part_end_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part_end_internal283.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt64 >= 1 ) break loop64;
                        EarlyExitException eee =
                            new EarlyExitException(64, input);
                        throw eee;
                }
                cnt64++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end"


    public static class id_part_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:507:1: id_part_end_internal : ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) ;
    public final ObjcmParser.id_part_end_internal_return id_part_end_internal() throws RecognitionException {
        ObjcmParser.id_part_end_internal_return retval = new ObjcmParser.id_part_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT284=null;
        Token string_literal285=null;
        ObjcmParser.id_part_return id_part286 =null;


        Object DOT284_tree=null;
        Object string_literal285_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleSubtreeStream stream_id_part=new RewriteRuleSubtreeStream(adaptor,"rule id_part");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:508:2: ( ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:508:4: ( DOT | '->' ) id_part
            {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:508:4: ( DOT | '->' )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==DOT) ) {
                alt65=1;
            }
            else if ( (LA65_0==167) ) {
                alt65=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;

            }
            switch (alt65) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:508:5: DOT
                    {
                    DOT284=(Token)match(input,DOT,FOLLOW_DOT_in_id_part_end_internal2584);  
                    stream_DOT.add(DOT284);


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:508:11: '->'
                    {
                    string_literal285=(Token)match(input,167,FOLLOW_167_in_id_part_end_internal2588);  
                    stream_167.add(string_literal285);


                    }
                    break;

            }


            pushFollow(FOLLOW_id_part_in_id_part_end_internal2591);
            id_part286=id_part();

            state._fsp--;

            stream_id_part.add(id_part286.getTree());

            // AST REWRITE
            // elements: id_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 508:25: -> ^( FIELD_ACCESS id_part )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:508:28: ^( FIELD_ACCESS id_part )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_ACCESS, "FIELD_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_id_part.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end_internal"


    public static class known_types_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_types"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:511:1: known_types : ( 'unsigned' | VOID );
    public final ObjcmParser.known_types_return known_types() throws RecognitionException {
        ObjcmParser.known_types_return retval = new ObjcmParser.known_types_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set287=null;

        Object set287_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:512:2: ( 'unsigned' | VOID )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set287=(Token)input.LT(1);

            if ( input.LA(1)==VOID||input.LA(1)==205 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set287)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_types"


    public static class id_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:516:1: id_part : name_internal ( function_brackets_wrapper )? ( index_wrapper )* ;
    public final ObjcmParser.id_part_return id_part() throws RecognitionException {
        ObjcmParser.id_part_return retval = new ObjcmParser.id_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal288 =null;

        ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper289 =null;

        ObjcmParser.index_wrapper_return index_wrapper290 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:516:9: ( name_internal ( function_brackets_wrapper )? ( index_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:516:12: name_internal ( function_brackets_wrapper )? ( index_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_internal_in_id_part2629);
            name_internal288=name_internal();

            state._fsp--;

            adaptor.addChild(root_0, name_internal288.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:516:26: ( function_brackets_wrapper )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==L_BR) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:516:26: function_brackets_wrapper
                    {
                    pushFollow(FOLLOW_function_brackets_wrapper_in_id_part2631);
                    function_brackets_wrapper289=function_brackets_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, function_brackets_wrapper289.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:516:53: ( index_wrapper )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==L_KBR) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:516:53: index_wrapper
            	    {
            	    pushFollow(FOLLOW_index_wrapper_in_id_part2634);
            	    index_wrapper290=index_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, index_wrapper290.getTree());

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part"


    public static class object_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_name"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:519:1: object_name : id_part ( id_part_end )? ;
    public final ObjcmParser.object_name_return object_name() throws RecognitionException {
        ObjcmParser.object_name_return retval = new ObjcmParser.object_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_return id_part291 =null;

        ObjcmParser.id_part_end_return id_part_end292 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:520:2: ( id_part ( id_part_end )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:520:4: id_part ( id_part_end )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_id_part_in_object_name2647);
            id_part291=id_part();

            state._fsp--;

            adaptor.addChild(root_0, id_part291.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:520:12: ( id_part_end )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==DOT||LA68_0==167) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:520:12: id_part_end
                    {
                    pushFollow(FOLLOW_id_part_end_in_object_name2649);
                    id_part_end292=id_part_end();

                    state._fsp--;

                    adaptor.addChild(root_0, id_part_end292.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_name"


    public static class method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:523:1: method_call_wrapper : L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper_return method_call_wrapper() throws RecognitionException {
        ObjcmParser.method_call_wrapper_return retval = new ObjcmParser.method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR293=null;
        Token R_KBR295=null;
        ObjcmParser.method_call2_return method_call2294 =null;


        Object L_KBR293_tree=null;
        Object R_KBR295_tree=null;
        RewriteRuleTokenStream stream_L_KBR=new RewriteRuleTokenStream(adaptor,"token L_KBR");
        RewriteRuleTokenStream stream_R_KBR=new RewriteRuleTokenStream(adaptor,"token R_KBR");
        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:524:2: ( L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:524:4: L_KBR method_call2 R_KBR
            {
            L_KBR293=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_method_call_wrapper2663);  
            stream_L_KBR.add(L_KBR293);


            pushFollow(FOLLOW_method_call2_in_method_call_wrapper2665);
            method_call2294=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2294.getTree());

            R_KBR295=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_method_call_wrapper2667);  
            stream_R_KBR.add(R_KBR295);


            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 524:29: -> ^( METHOD_CALL method_call2 )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:524:32: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper"


    public static class method_call_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:527:1: method_call_wrapper2 : method_call2 -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper2_return method_call_wrapper2() throws RecognitionException {
        ObjcmParser.method_call_wrapper2_return retval = new ObjcmParser.method_call_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call2_return method_call2296 =null;


        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:528:2: ( method_call2 -> ^( METHOD_CALL method_call2 ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:528:4: method_call2
            {
            pushFollow(FOLLOW_method_call2_in_method_call_wrapper22690);
            method_call2296=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2296.getTree());

            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 528:17: -> ^( METHOD_CALL method_call2 )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:528:20: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper2"


    public static class method_call2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:530:1: method_call2 : object_wrapper method_name ( method_call_message_list_wrapper )? ;
    public final ObjcmParser.method_call2_return method_call2() throws RecognitionException {
        ObjcmParser.method_call2_return retval = new ObjcmParser.method_call2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_return object_wrapper297 =null;

        ObjcmParser.method_name_return method_name298 =null;

        ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper299 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:531:2: ( object_wrapper method_name ( method_call_message_list_wrapper )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:531:4: object_wrapper method_name ( method_call_message_list_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapper_in_method_call22709);
            object_wrapper297=object_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapper297.getTree());

            pushFollow(FOLLOW_method_name_in_method_call22711);
            method_name298=method_name();

            state._fsp--;

            adaptor.addChild(root_0, method_name298.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:531:31: ( method_call_message_list_wrapper )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==COLON) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:531:33: method_call_message_list_wrapper
                    {
                    pushFollow(FOLLOW_method_call_message_list_wrapper_in_method_call22715);
                    method_call_message_list_wrapper299=method_call_message_list_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_message_list_wrapper299.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call2"


    public static class object_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:533:1: object_wrapper : object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) ;
    public final ObjcmParser.object_wrapper_return object_wrapper() throws RecognitionException {
        ObjcmParser.object_wrapper_return retval = new ObjcmParser.object_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_internal_return object_wrapper_internal300 =null;


        RewriteRuleSubtreeStream stream_object_wrapper_internal=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapper_internal");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:534:2: ( object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:534:4: object_wrapper_internal
            {
            pushFollow(FOLLOW_object_wrapper_internal_in_object_wrapper2726);
            object_wrapper_internal300=object_wrapper_internal();

            state._fsp--;

            stream_object_wrapper_internal.add(object_wrapper_internal300.getTree());

            // AST REWRITE
            // elements: object_wrapper_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 534:28: -> ^( OBJECT object_wrapper_internal )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:534:31: ^( OBJECT object_wrapper_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT, "OBJECT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapper_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper"


    public static class object_wrapper_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:536:1: object_wrapper_internal : ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL );
    public final ObjcmParser.object_wrapper_internal_return object_wrapper_internal() throws RecognitionException {
        ObjcmParser.object_wrapper_internal_return retval = new ObjcmParser.object_wrapper_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL306=null;
        ObjcmParser.type_convertion_return type_convertion301 =null;

        ObjcmParser.object_name_return object_name302 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper303 =null;

        ObjcmParser.object_name_return object_name304 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper305 =null;


        Object STRING_LITERAL306_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:538:2: ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL )
            int alt71=4;
            switch ( input.LA(1) ) {
            case L_BR:
                {
                alt71=1;
                }
                break;
            case ID:
            case 186:
            case 189:
            case 197:
            case 200:
                {
                alt71=2;
                }
                break;
            case L_KBR:
                {
                alt71=3;
                }
                break;
            case STRING_LITERAL:
                {
                alt71=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 71, 0, input);

                throw nvae;

            }

            switch (alt71) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:538:4: type_convertion ( object_name | method_call_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_convertion_in_object_wrapper_internal2745);
                    type_convertion301=type_convertion();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion301.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:538:20: ( object_name | method_call_wrapper )
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==ID||LA70_0==186||LA70_0==189||LA70_0==197||LA70_0==200) ) {
                        alt70=1;
                    }
                    else if ( (LA70_0==L_KBR) ) {
                        alt70=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 70, 0, input);

                        throw nvae;

                    }
                    switch (alt70) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:538:21: object_name
                            {
                            pushFollow(FOLLOW_object_name_in_object_wrapper_internal2748);
                            object_name302=object_name();

                            state._fsp--;

                            adaptor.addChild(root_0, object_name302.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:538:35: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2752);
                            method_call_wrapper303=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper303.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:539:4: object_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_name_in_object_wrapper_internal2758);
                    object_name304=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name304.getTree());

                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:540:4: method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2763);
                    method_call_wrapper305=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper305.getTree());

                    }
                    break;
                case 4 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:541:4: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL306=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_object_wrapper_internal2768); 
                    STRING_LITERAL306_tree = 
                    (Object)adaptor.create(STRING_LITERAL306)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL306_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper_internal"


    public static class method_message3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_message3"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:544:1: method_message3 : classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) ;
    public final ObjcmParser.method_message3_return method_message3() throws RecognitionException {
        ObjcmParser.method_message3_return retval = new ObjcmParser.method_message3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp307 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:545:2: ( classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:545:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_method_message32780);
            classical_expr_wrp307=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp307.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 545:23: -> ^( MESSAGE classical_expr_wrp )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:545:26: ^( MESSAGE classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_message3"


    public static class type_convertion_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:547:1: type_convertion : L_BR type_convertion_internal_wrapper R_BR ;
    public final ObjcmParser.type_convertion_return type_convertion() throws RecognitionException {
        ObjcmParser.type_convertion_return retval = new ObjcmParser.type_convertion_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR308=null;
        Token R_BR310=null;
        ObjcmParser.type_convertion_internal_wrapper_return type_convertion_internal_wrapper309 =null;


        Object L_BR308_tree=null;
        Object R_BR310_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:548:2: ( L_BR type_convertion_internal_wrapper R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:548:4: L_BR type_convertion_internal_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR308=(Token)match(input,L_BR,FOLLOW_L_BR_in_type_convertion2799); 
            L_BR308_tree = 
            (Object)adaptor.create(L_BR308)
            ;
            adaptor.addChild(root_0, L_BR308_tree);


            pushFollow(FOLLOW_type_convertion_internal_wrapper_in_type_convertion2801);
            type_convertion_internal_wrapper309=type_convertion_internal_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, type_convertion_internal_wrapper309.getTree());

            R_BR310=(Token)match(input,R_BR,FOLLOW_R_BR_in_type_convertion2803); 
            R_BR310_tree = 
            (Object)adaptor.create(R_BR310)
            ;
            adaptor.addChild(root_0, R_BR310_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion"


    public static class type_convertion_internal_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion_internal_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:550:1: type_convertion_internal_wrapper : ( CONST_PREFIX )? type_convertion_internal -> ^( TYPE_CONVERTION type_convertion_internal ) ;
    public final ObjcmParser.type_convertion_internal_wrapper_return type_convertion_internal_wrapper() throws RecognitionException {
        ObjcmParser.type_convertion_internal_wrapper_return retval = new ObjcmParser.type_convertion_internal_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX311=null;
        ObjcmParser.type_convertion_internal_return type_convertion_internal312 =null;


        Object CONST_PREFIX311_tree=null;
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_type_convertion_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_convertion_internal");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:551:2: ( ( CONST_PREFIX )? type_convertion_internal -> ^( TYPE_CONVERTION type_convertion_internal ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:551:4: ( CONST_PREFIX )? type_convertion_internal
            {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:551:4: ( CONST_PREFIX )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==CONST_PREFIX) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:551:4: CONST_PREFIX
                    {
                    CONST_PREFIX311=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_convertion_internal_wrapper2812);  
                    stream_CONST_PREFIX.add(CONST_PREFIX311);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_convertion_internal_in_type_convertion_internal_wrapper2815);
            type_convertion_internal312=type_convertion_internal();

            state._fsp--;

            stream_type_convertion_internal.add(type_convertion_internal312.getTree());

            // AST REWRITE
            // elements: type_convertion_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 551:43: -> ^( TYPE_CONVERTION type_convertion_internal )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:551:46: ^( TYPE_CONVERTION type_convertion_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CONVERTION, "TYPE_CONVERTION")
                , root_1);

                adaptor.addChild(root_1, stream_type_convertion_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion_internal_wrapper"


    public static class type_convertion_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:553:1: type_convertion_internal : ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* ;
    public final ObjcmParser.type_convertion_internal_return type_convertion_internal() throws RecognitionException {
        ObjcmParser.type_convertion_internal_return retval = new ObjcmParser.type_convertion_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal313=null;
        Token ASTERISK316=null;
        ObjcmParser.type_internal_return type_internal314 =null;

        ObjcmParser.generic_return generic315 =null;


        Object string_literal313_tree=null;
        Object ASTERISK316_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:554:2: ( ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:554:4: ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:554:4: ( 'unsigned' )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==205) ) {
                int LA73_1 = input.LA(2);

                if ( (LA73_1==ID||LA73_1==VOID||LA73_1==205) ) {
                    alt73=1;
                }
            }
            switch (alt73) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:554:4: 'unsigned'
                    {
                    string_literal313=(Token)match(input,205,FOLLOW_205_in_type_convertion_internal2833); 
                    string_literal313_tree = 
                    (Object)adaptor.create(string_literal313)
                    ;
                    adaptor.addChild(root_0, string_literal313_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_type_convertion_internal2836);
            type_internal314=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal314.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:554:30: ( generic )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==L_LESS) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:554:30: generic
                    {
                    pushFollow(FOLLOW_generic_in_type_convertion_internal2838);
                    generic315=generic();

                    state._fsp--;

                    adaptor.addChild(root_0, generic315.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:554:39: ( ASTERISK )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==ASTERISK) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:554:39: ASTERISK
            	    {
            	    ASTERISK316=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_type_convertion_internal2841); 
            	    ASTERISK316_tree = 
            	    (Object)adaptor.create(ASTERISK316)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK316_tree);


            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion_internal"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:556:1: method_name : ( ID -> ^( METHOD_NAME ID ) | property -> ^( METHOD_NAME property ) );
    public final ObjcmParser.method_name_return method_name() throws RecognitionException {
        ObjcmParser.method_name_return retval = new ObjcmParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID317=null;
        ObjcmParser.property_return property318 =null;


        Object ID317_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_property=new RewriteRuleSubtreeStream(adaptor,"rule property");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:557:2: ( ID -> ^( METHOD_NAME ID ) | property -> ^( METHOD_NAME property ) )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==ID) ) {
                alt76=1;
            }
            else if ( (LA76_0==186||LA76_0==189||LA76_0==200) ) {
                alt76=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;

            }
            switch (alt76) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:557:4: ID
                    {
                    ID317=(Token)match(input,ID,FOLLOW_ID_in_method_name2852);  
                    stream_ID.add(ID317);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 557:7: -> ^( METHOD_NAME ID )
                    {
                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:557:10: ^( METHOD_NAME ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_ID.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:558:4: property
                    {
                    pushFollow(FOLLOW_property_in_method_name2865);
                    property318=property();

                    state._fsp--;

                    stream_property.add(property318.getTree());

                    // AST REWRITE
                    // elements: property
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 558:13: -> ^( METHOD_NAME property )
                    {
                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:558:16: ^( METHOD_NAME property )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                        , root_1);

                        adaptor.addChild(root_1, stream_property.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_call_message_list_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:560:1: method_call_message_list_wrapper : method_call_message_list -> ^( MSG_LIST method_call_message_list ) ;
    public final ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_list_wrapper_return retval = new ObjcmParser.method_call_message_list_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_list_return method_call_message_list319 =null;


        RewriteRuleSubtreeStream stream_method_call_message_list=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_list");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:561:2: ( method_call_message_list -> ^( MSG_LIST method_call_message_list ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:561:4: method_call_message_list
            {
            pushFollow(FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2882);
            method_call_message_list319=method_call_message_list();

            state._fsp--;

            stream_method_call_message_list.add(method_call_message_list319.getTree());

            // AST REWRITE
            // elements: method_call_message_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 561:29: -> ^( MSG_LIST method_call_message_list )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:561:32: ^( MSG_LIST method_call_message_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MSG_LIST, "MSG_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list_wrapper"


    public static class method_call_message_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:563:1: method_call_message_list : method_call_message_first_wrapper ( method_call_message_wrapper )* ;
    public final ObjcmParser.method_call_message_list_return method_call_message_list() throws RecognitionException {
        ObjcmParser.method_call_message_list_return retval = new ObjcmParser.method_call_message_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper320 =null;

        ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper321 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:564:2: ( method_call_message_first_wrapper ( method_call_message_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:564:4: method_call_message_first_wrapper ( method_call_message_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2899);
            method_call_message_first_wrapper320=method_call_message_first_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_call_message_first_wrapper320.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:564:38: ( method_call_message_wrapper )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==COLON||LA77_0==ID) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:564:38: method_call_message_wrapper
            	    {
            	    pushFollow(FOLLOW_method_call_message_wrapper_in_method_call_message_list2901);
            	    method_call_message_wrapper321=method_call_message_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_call_message_wrapper321.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list"


    public static class method_call_message_first_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:566:1: method_call_message_first_wrapper : method_call_message_first -> ^( METHOD_MSG method_call_message_first ) ;
    public final ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_first_wrapper_return retval = new ObjcmParser.method_call_message_first_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_return method_call_message_first322 =null;


        RewriteRuleSubtreeStream stream_method_call_message_first=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_first");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:567:2: ( method_call_message_first -> ^( METHOD_MSG method_call_message_first ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:567:4: method_call_message_first
            {
            pushFollow(FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2912);
            method_call_message_first322=method_call_message_first();

            state._fsp--;

            stream_method_call_message_first.add(method_call_message_first322.getTree());

            // AST REWRITE
            // elements: method_call_message_first
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 567:30: -> ^( METHOD_MSG method_call_message_first )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:567:33: ^( METHOD_MSG method_call_message_first )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_first.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first_wrapper"


    public static class method_call_message_first_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:569:1: method_call_message_first : COLON message_wrapper ;
    public final ObjcmParser.method_call_message_first_return method_call_message_first() throws RecognitionException {
        ObjcmParser.method_call_message_first_return retval = new ObjcmParser.method_call_message_first_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON323=null;
        ObjcmParser.message_wrapper_return message_wrapper324 =null;


        Object COLON323_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:570:2: ( COLON message_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:570:4: COLON message_wrapper
            {
            root_0 = (Object)adaptor.nil();


            COLON323=(Token)match(input,COLON,FOLLOW_COLON_in_method_call_message_first2929); 
            COLON323_tree = 
            (Object)adaptor.create(COLON323)
            ;
            adaptor.addChild(root_0, COLON323_tree);


            pushFollow(FOLLOW_message_wrapper_in_method_call_message_first2932);
            message_wrapper324=message_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, message_wrapper324.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first"


    public static class method_call_message_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:572:1: method_call_message_wrapper : method_call_message -> ^( METHOD_MSG method_call_message ) ;
    public final ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_wrapper_return retval = new ObjcmParser.method_call_message_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_return method_call_message325 =null;


        RewriteRuleSubtreeStream stream_method_call_message=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:573:2: ( method_call_message -> ^( METHOD_MSG method_call_message ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:573:4: method_call_message
            {
            pushFollow(FOLLOW_method_call_message_in_method_call_message_wrapper2942);
            method_call_message325=method_call_message();

            state._fsp--;

            stream_method_call_message.add(method_call_message325.getTree());

            // AST REWRITE
            // elements: method_call_message
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 573:24: -> ^( METHOD_MSG method_call_message )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:573:27: ^( METHOD_MSG method_call_message )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_wrapper"


    public static class method_call_message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:575:1: method_call_message : ( prefix | incomplete_prefix ) message_wrapper ;
    public final ObjcmParser.method_call_message_return method_call_message() throws RecognitionException {
        ObjcmParser.method_call_message_return retval = new ObjcmParser.method_call_message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.prefix_return prefix326 =null;

        ObjcmParser.incomplete_prefix_return incomplete_prefix327 =null;

        ObjcmParser.message_wrapper_return message_wrapper328 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:576:2: ( ( prefix | incomplete_prefix ) message_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:576:4: ( prefix | incomplete_prefix ) message_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:576:4: ( prefix | incomplete_prefix )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==ID) ) {
                alt78=1;
            }
            else if ( (LA78_0==COLON) ) {
                alt78=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;

            }
            switch (alt78) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:576:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_call_message2961);
                    prefix326=prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, prefix326.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:576:14: incomplete_prefix
                    {
                    pushFollow(FOLLOW_incomplete_prefix_in_method_call_message2965);
                    incomplete_prefix327=incomplete_prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, incomplete_prefix327.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_message_wrapper_in_method_call_message2968);
            message_wrapper328=message_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, message_wrapper328.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message"


    public static class message_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "message_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:578:1: message_wrapper : message -> ^( MESSAGE message ) ;
    public final ObjcmParser.message_wrapper_return message_wrapper() throws RecognitionException {
        ObjcmParser.message_wrapper_return retval = new ObjcmParser.message_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.message_return message329 =null;


        RewriteRuleSubtreeStream stream_message=new RewriteRuleSubtreeStream(adaptor,"rule message");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:579:2: ( message -> ^( MESSAGE message ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:579:4: message
            {
            pushFollow(FOLLOW_message_in_message_wrapper2978);
            message329=message();

            state._fsp--;

            stream_message.add(message329.getTree());

            // AST REWRITE
            // elements: message
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 579:12: -> ^( MESSAGE message )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:579:15: ^( MESSAGE message )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_message.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "message_wrapper"


    public static class message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "message"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:581:1: message : expression ( COMMA expression )* ;
    public final ObjcmParser.message_return message() throws RecognitionException {
        ObjcmParser.message_return retval = new ObjcmParser.message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA331=null;
        ObjcmParser.expression_return expression330 =null;

        ObjcmParser.expression_return expression332 =null;


        Object COMMA331_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:581:9: ( expression ( COMMA expression )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:581:11: expression ( COMMA expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expression_in_message2996);
            expression330=expression();

            state._fsp--;

            adaptor.addChild(root_0, expression330.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:581:22: ( COMMA expression )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==COMMA) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:581:23: COMMA expression
            	    {
            	    COMMA331=(Token)match(input,COMMA,FOLLOW_COMMA_in_message2999); 
            	    COMMA331_tree = 
            	    (Object)adaptor.create(COMMA331)
            	    ;
            	    adaptor.addChild(root_0, COMMA331_tree);


            	    pushFollow(FOLLOW_expression_in_message3001);
            	    expression332=expression();

            	    state._fsp--;

            	    adaptor.addChild(root_0, expression332.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "message"


    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:587:1: expression : ( classical_expr_wrp | struct_init );
    public final ObjcmParser.expression_return expression() throws RecognitionException {
        ObjcmParser.expression_return retval = new ObjcmParser.expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp333 =null;

        ObjcmParser.struct_init_return struct_init334 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:588:2: ( classical_expr_wrp | struct_init )
            int alt80=2;
            alt80 = dfa80.predict(input);
            switch (alt80) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:588:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_expression3017);
                    classical_expr_wrp333=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp333.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:589:4: struct_init
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_in_expression3022);
                    struct_init334=struct_init();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init334.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class full_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:592:1: full_expr_wrapper : full_expr -> ^( EXPR_FULL full_expr ) ;
    public final ObjcmParser.full_expr_wrapper_return full_expr_wrapper() throws RecognitionException {
        ObjcmParser.full_expr_wrapper_return retval = new ObjcmParser.full_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_return full_expr335 =null;


        RewriteRuleSubtreeStream stream_full_expr=new RewriteRuleSubtreeStream(adaptor,"rule full_expr");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:593:2: ( full_expr -> ^( EXPR_FULL full_expr ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:593:4: full_expr
            {
            pushFollow(FOLLOW_full_expr_in_full_expr_wrapper3033);
            full_expr335=full_expr();

            state._fsp--;

            stream_full_expr.add(full_expr335.getTree());

            // AST REWRITE
            // elements: full_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 593:14: -> ^( EXPR_FULL full_expr )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:593:17: ^( EXPR_FULL full_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_FULL, "EXPR_FULL")
                , root_1);

                adaptor.addChild(root_1, stream_full_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr_wrapper"


    public static class full_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:595:1: full_expr : classical_expr_wrp ( COMMA classical_expr_wrp )* ;
    public final ObjcmParser.full_expr_return full_expr() throws RecognitionException {
        ObjcmParser.full_expr_return retval = new ObjcmParser.full_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA337=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp336 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp338 =null;


        Object COMMA337_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:596:2: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:596:4: classical_expr_wrp ( COMMA classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_full_expr3050);
            classical_expr_wrp336=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp336.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:596:23: ( COMMA classical_expr_wrp )*
            loop81:
            do {
                int alt81=2;
                alt81 = dfa81.predict(input);
                switch (alt81) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:596:24: COMMA classical_expr_wrp
            	    {
            	    COMMA337=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr3053); 
            	    COMMA337_tree = 
            	    (Object)adaptor.create(COMMA337)
            	    ;
            	    adaptor.addChild(root_0, COMMA337_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_full_expr3055);
            	    classical_expr_wrp338=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp338.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr"


    public static class full_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:598:1: full_expr2 : classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* ;
    public final ObjcmParser.full_expr2_return full_expr2() throws RecognitionException {
        ObjcmParser.full_expr2_return retval = new ObjcmParser.full_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA340=null;
        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2339 =null;

        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2341 =null;


        Object COMMA340_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:599:2: ( classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:599:4: classical_expr_wrp2 ( COMMA classical_expr_wrp2 )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr23066);
            classical_expr_wrp2339=classical_expr_wrp2();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp2339.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:599:24: ( COMMA classical_expr_wrp2 )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==COMMA) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:599:25: COMMA classical_expr_wrp2
            	    {
            	    COMMA340=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr23069); 
            	    COMMA340_tree = 
            	    (Object)adaptor.create(COMMA340)
            	    ;
            	    adaptor.addChild(root_0, COMMA340_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr23071);
            	    classical_expr_wrp2341=classical_expr_wrp2();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp2341.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr2"


    public static class expr_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:601:1: expr_assign_wrapper : expr_assign -> ^( EXPR_ASSIGN expr_assign ) ;
    public final ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper() throws RecognitionException {
        ObjcmParser.expr_assign_wrapper_return retval = new ObjcmParser.expr_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_assign_return expr_assign342 =null;


        RewriteRuleSubtreeStream stream_expr_assign=new RewriteRuleSubtreeStream(adaptor,"rule expr_assign");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:602:2: ( expr_assign -> ^( EXPR_ASSIGN expr_assign ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:602:4: expr_assign
            {
            pushFollow(FOLLOW_expr_assign_in_expr_assign_wrapper3082);
            expr_assign342=expr_assign();

            state._fsp--;

            stream_expr_assign.add(expr_assign342.getTree());

            // AST REWRITE
            // elements: expr_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 602:16: -> ^( EXPR_ASSIGN expr_assign )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:602:19: ^( EXPR_ASSIGN expr_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ASSIGN, "EXPR_ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_expr_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign_wrapper"


    public static class expr_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:604:1: expr_assign : assign_wrapper ( struct_init | classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) ) ;
    public final ObjcmParser.expr_assign_return expr_assign() throws RecognitionException {
        ObjcmParser.expr_assign_return retval = new ObjcmParser.expr_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_wrapper_return assign_wrapper343 =null;

        ObjcmParser.struct_init_return struct_init344 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp345 =null;

        ObjcmParser.array_init_wrapper_return array_init_wrapper346 =null;

        ObjcmParser.func_pointer2_return func_pointer2347 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper348 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:605:2: ( assign_wrapper ( struct_init | classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:605:4: assign_wrapper ( struct_init | classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_assign_wrapper_in_expr_assign3101);
            assign_wrapper343=assign_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, assign_wrapper343.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:605:19: ( struct_init | classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )
            int alt84=4;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:605:20: struct_init
                    {
                    pushFollow(FOLLOW_struct_init_in_expr_assign3104);
                    struct_init344=struct_init();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init344.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:605:34: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_expr_assign3108);
                    classical_expr_wrp345=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp345.getTree());

                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:605:55: array_init_wrapper
                    {
                    pushFollow(FOLLOW_array_init_wrapper_in_expr_assign3112);
                    array_init_wrapper346=array_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init_wrapper346.getTree());

                    }
                    break;
                case 4 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:605:76: ( func_pointer2 ( method_call_wrapper )? )
                    {
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:605:76: ( func_pointer2 ( method_call_wrapper )? )
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:605:77: func_pointer2 ( method_call_wrapper )?
                    {
                    pushFollow(FOLLOW_func_pointer2_in_expr_assign3117);
                    func_pointer2347=func_pointer2();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer2347.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:605:91: ( method_call_wrapper )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==L_KBR) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:605:91: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_expr_assign3119);
                            method_call_wrapper348=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper348.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign"


    public static class array_init_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:607:1: array_init_wrapper : array_init -> ^( ARRAY_INIT array_init ) ;
    public final ObjcmParser.array_init_wrapper_return array_init_wrapper() throws RecognitionException {
        ObjcmParser.array_init_wrapper_return retval = new ObjcmParser.array_init_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.array_init_return array_init349 =null;


        RewriteRuleSubtreeStream stream_array_init=new RewriteRuleSubtreeStream(adaptor,"rule array_init");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:608:2: ( array_init -> ^( ARRAY_INIT array_init ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:608:4: array_init
            {
            pushFollow(FOLLOW_array_init_in_array_init_wrapper3131);
            array_init349=array_init();

            state._fsp--;

            stream_array_init.add(array_init349.getTree());

            // AST REWRITE
            // elements: array_init
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 608:15: -> ^( ARRAY_INIT array_init )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:608:18: ^( ARRAY_INIT array_init )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ARRAY_INIT, "ARRAY_INIT")
                , root_1);

                adaptor.addChild(root_1, stream_array_init.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init_wrapper"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:610:1: array_init : L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR ;
    public final ObjcmParser.array_init_return array_init() throws RecognitionException {
        ObjcmParser.array_init_return retval = new ObjcmParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR350=null;
        Token COMMA352=null;
        Token R_FBR354=null;
        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3351 =null;

        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3353 =null;


        Object L_FBR350_tree=null;
        Object COMMA352_tree=null;
        Object R_FBR354_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:611:2: ( L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:611:4: L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR350=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array_init3150); 
            L_FBR350_tree = 
            (Object)adaptor.create(L_FBR350)
            ;
            adaptor.addChild(root_0, L_FBR350_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:611:10: ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==ASTERISK||LA86_0==ID||LA86_0==L_AND||LA86_0==L_BR||(LA86_0 >= L_FBR && LA86_0 <= L_KBR)||LA86_0==L_MINUS||LA86_0==L_MINUS_MINUS||LA86_0==L_NOT||LA86_0==L_PLUS||LA86_0==L_PLUS_PLUS||LA86_0==L_TILDA||LA86_0==NUMBER||LA86_0==SIZEOF||(LA86_0 >= STRING_LITERAL && LA86_0 <= STRING_LITERAL3)||LA86_0==170||LA86_0==177||LA86_0==179||LA86_0==183||LA86_0==186||LA86_0==189||LA86_0==197||(LA86_0 >= 199 && LA86_0 <= 200)||LA86_0==205) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:611:11: classical_expr_wrp3 ( COMMA classical_expr_wrp3 )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init3153);
                    classical_expr_wrp3351=classical_expr_wrp3();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp3351.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:611:31: ( COMMA classical_expr_wrp3 )*
                    loop85:
                    do {
                        int alt85=2;
                        int LA85_0 = input.LA(1);

                        if ( (LA85_0==COMMA) ) {
                            alt85=1;
                        }


                        switch (alt85) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:611:32: COMMA classical_expr_wrp3
                    	    {
                    	    COMMA352=(Token)match(input,COMMA,FOLLOW_COMMA_in_array_init3156); 
                    	    COMMA352_tree = 
                    	    (Object)adaptor.create(COMMA352)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA352_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init3158);
                    	    classical_expr_wrp3353=classical_expr_wrp3();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp3353.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop85;
                        }
                    } while (true);


                    }
                    break;

            }


            R_FBR354=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array_init3164); 
            R_FBR354_tree = 
            (Object)adaptor.create(R_FBR354)
            ;
            adaptor.addChild(root_0, R_FBR354_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class classical_expr_wrp3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp3"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:614:1: classical_expr_wrp3 : ( array_init_wrapper | classical_expr_wrp );
    public final ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3() throws RecognitionException {
        ObjcmParser.classical_expr_wrp3_return retval = new ObjcmParser.classical_expr_wrp3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.array_init_wrapper_return array_init_wrapper355 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp356 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:615:2: ( array_init_wrapper | classical_expr_wrp )
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==L_FBR) ) {
                alt87=1;
            }
            else if ( (LA87_0==ASTERISK||LA87_0==ID||LA87_0==L_AND||LA87_0==L_BR||LA87_0==L_KBR||LA87_0==L_MINUS||LA87_0==L_MINUS_MINUS||LA87_0==L_NOT||LA87_0==L_PLUS||LA87_0==L_PLUS_PLUS||LA87_0==L_TILDA||LA87_0==NUMBER||LA87_0==SIZEOF||(LA87_0 >= STRING_LITERAL && LA87_0 <= STRING_LITERAL3)||LA87_0==170||LA87_0==177||LA87_0==179||LA87_0==183||LA87_0==186||LA87_0==189||LA87_0==197||(LA87_0 >= 199 && LA87_0 <= 200)||LA87_0==205) ) {
                alt87=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;

            }
            switch (alt87) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:615:4: array_init_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_init_wrapper_in_classical_expr_wrp33176);
                    array_init_wrapper355=array_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init_wrapper355.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:616:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_classical_expr_wrp33182);
                    classical_expr_wrp356=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp356.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp3"


    public static class classical_expr_wrp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:619:1: classical_expr_wrp : classical_expr -> ^( CLASSICAL_EXPR classical_expr ) ;
    public final ObjcmParser.classical_expr_wrp_return classical_expr_wrp() throws RecognitionException {
        ObjcmParser.classical_expr_wrp_return retval = new ObjcmParser.classical_expr_wrp_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_return classical_expr357 =null;


        RewriteRuleSubtreeStream stream_classical_expr=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:620:2: ( classical_expr -> ^( CLASSICAL_EXPR classical_expr ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:620:4: classical_expr
            {
            pushFollow(FOLLOW_classical_expr_in_classical_expr_wrp3195);
            classical_expr357=classical_expr();

            state._fsp--;

            stream_classical_expr.add(classical_expr357.getTree());

            // AST REWRITE
            // elements: classical_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 620:19: -> ^( CLASSICAL_EXPR classical_expr )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:620:22: ^( CLASSICAL_EXPR classical_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR, "CLASSICAL_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp"


    public static class classical_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:622:1: classical_expr : simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr_return classical_expr() throws RecognitionException {
        ObjcmParser.classical_expr_return retval = new ObjcmParser.classical_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper358 =null;

        ObjcmParser.expr_question_wrapper_return expr_question_wrapper359 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper360 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:623:2: ( simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:623:4: simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_simple_expr_wrapper_in_classical_expr3212);
            simple_expr_wrapper358=simple_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, simple_expr_wrapper358.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:623:24: ( expr_question_wrapper | expr_assign_wrapper )?
            int alt88=3;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==L_QUESTION) ) {
                alt88=1;
            }
            else if ( (LA88_0==L_AND_EQ||(LA88_0 >= L_DIV_EQ && LA88_0 <= L_EQ)||LA88_0==L_LEFT_EQ||LA88_0==L_MINUS_EQ||LA88_0==L_MULT_EQ||LA88_0==L_OR_EQ||LA88_0==L_PERC_EQ||LA88_0==L_PLUS_EQ||LA88_0==L_RIGHT_EQ||LA88_0==L_XOR_EQ) ) {
                alt88=2;
            }
            switch (alt88) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:623:25: expr_question_wrapper
                    {
                    pushFollow(FOLLOW_expr_question_wrapper_in_classical_expr3215);
                    expr_question_wrapper359=expr_question_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_question_wrapper359.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:623:49: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr3219);
                    expr_assign_wrapper360=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper360.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr"


    public static class classical_expr_wrp2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:625:1: classical_expr_wrp2 : classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) ;
    public final ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2() throws RecognitionException {
        ObjcmParser.classical_expr_wrp2_return retval = new ObjcmParser.classical_expr_wrp2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr2_return classical_expr2361 =null;


        RewriteRuleSubtreeStream stream_classical_expr2=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr2");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:626:2: ( classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:626:4: classical_expr2
            {
            pushFollow(FOLLOW_classical_expr2_in_classical_expr_wrp23231);
            classical_expr2361=classical_expr2();

            state._fsp--;

            stream_classical_expr2.add(classical_expr2361.getTree());

            // AST REWRITE
            // elements: classical_expr2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 626:20: -> ^( CLASSICAL_EXPR_2 classical_expr2 )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:626:23: ^( CLASSICAL_EXPR_2 classical_expr2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR_2, "CLASSICAL_EXPR_2")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp2"


    public static class classical_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:628:1: classical_expr2 : ( object_name | func_pointer1 ) ( expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr2_return classical_expr2() throws RecognitionException {
        ObjcmParser.classical_expr2_return retval = new ObjcmParser.classical_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_name_return object_name362 =null;

        ObjcmParser.func_pointer1_return func_pointer1363 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper364 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:629:2: ( ( object_name | func_pointer1 ) ( expr_assign_wrapper )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:629:4: ( object_name | func_pointer1 ) ( expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:629:4: ( object_name | func_pointer1 )
            int alt89=2;
            alt89 = dfa89.predict(input);
            switch (alt89) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:629:5: object_name
                    {
                    pushFollow(FOLLOW_object_name_in_classical_expr23249);
                    object_name362=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name362.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:629:19: func_pointer1
                    {
                    pushFollow(FOLLOW_func_pointer1_in_classical_expr23253);
                    func_pointer1363=func_pointer1();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer1363.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:629:34: ( expr_assign_wrapper )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==L_AND_EQ||(LA90_0 >= L_DIV_EQ && LA90_0 <= L_EQ)||LA90_0==L_LEFT_EQ||LA90_0==L_MINUS_EQ||LA90_0==L_MULT_EQ||LA90_0==L_OR_EQ||LA90_0==L_PERC_EQ||LA90_0==L_PLUS_EQ||LA90_0==L_RIGHT_EQ||LA90_0==L_XOR_EQ) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:629:34: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr23256);
                    expr_assign_wrapper364=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper364.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr2"


    public static class expr_question_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:631:1: expr_question_wrapper : expr_question -> ^( EXPR_QUESTION expr_question ) ;
    public final ObjcmParser.expr_question_wrapper_return expr_question_wrapper() throws RecognitionException {
        ObjcmParser.expr_question_wrapper_return retval = new ObjcmParser.expr_question_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_question_return expr_question365 =null;


        RewriteRuleSubtreeStream stream_expr_question=new RewriteRuleSubtreeStream(adaptor,"rule expr_question");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:632:2: ( expr_question -> ^( EXPR_QUESTION expr_question ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:632:4: expr_question
            {
            pushFollow(FOLLOW_expr_question_in_expr_question_wrapper3266);
            expr_question365=expr_question();

            state._fsp--;

            stream_expr_question.add(expr_question365.getTree());

            // AST REWRITE
            // elements: expr_question
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 632:18: -> ^( EXPR_QUESTION expr_question )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:632:21: ^( EXPR_QUESTION expr_question )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_QUESTION, "EXPR_QUESTION")
                , root_1);

                adaptor.addChild(root_1, stream_expr_question.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question_wrapper"


    public static class expr_question_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:634:1: expr_question : L_QUESTION classical_expr_wrp COLON classical_expr_wrp ;
    public final ObjcmParser.expr_question_return expr_question() throws RecognitionException {
        ObjcmParser.expr_question_return retval = new ObjcmParser.expr_question_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_QUESTION366=null;
        Token COLON368=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp367 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp369 =null;


        Object L_QUESTION366_tree=null;
        Object COLON368_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:635:2: ( L_QUESTION classical_expr_wrp COLON classical_expr_wrp )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:635:4: L_QUESTION classical_expr_wrp COLON classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            L_QUESTION366=(Token)match(input,L_QUESTION,FOLLOW_L_QUESTION_in_expr_question3283); 
            L_QUESTION366_tree = 
            (Object)adaptor.create(L_QUESTION366)
            ;
            adaptor.addChild(root_0, L_QUESTION366_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question3285);
            classical_expr_wrp367=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp367.getTree());

            COLON368=(Token)match(input,COLON,FOLLOW_COLON_in_expr_question3287); 
            COLON368_tree = 
            (Object)adaptor.create(COLON368)
            ;
            adaptor.addChild(root_0, COLON368_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question3289);
            classical_expr_wrp369=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp369.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question"


    public static class assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:637:1: assign_wrapper : assign -> ^( ASSIGN assign ) ;
    public final ObjcmParser.assign_wrapper_return assign_wrapper() throws RecognitionException {
        ObjcmParser.assign_wrapper_return retval = new ObjcmParser.assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_return assign370 =null;


        RewriteRuleSubtreeStream stream_assign=new RewriteRuleSubtreeStream(adaptor,"rule assign");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:638:2: ( assign -> ^( ASSIGN assign ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:638:4: assign
            {
            pushFollow(FOLLOW_assign_in_assign_wrapper3298);
            assign370=assign();

            state._fsp--;

            stream_assign.add(assign370.getTree());

            // AST REWRITE
            // elements: assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 638:11: -> ^( ASSIGN assign )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:638:14: ^( ASSIGN assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ASSIGN, "ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign_wrapper"


    public static class assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:640:1: assign : ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ );
    public final ObjcmParser.assign_return assign() throws RecognitionException {
        ObjcmParser.assign_return retval = new ObjcmParser.assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set371=null;

        Object set371_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:641:2: ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set371=(Token)input.LT(1);

            if ( input.LA(1)==L_AND_EQ||(input.LA(1) >= L_DIV_EQ && input.LA(1) <= L_EQ)||input.LA(1)==L_LEFT_EQ||input.LA(1)==L_MINUS_EQ||input.LA(1)==L_MULT_EQ||input.LA(1)==L_OR_EQ||input.LA(1)==L_PERC_EQ||input.LA(1)==L_PLUS_EQ||input.LA(1)==L_RIGHT_EQ||input.LA(1)==L_XOR_EQ ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set371)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign"


    public static class simple_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:645:1: simple_expr_wrapper : simple_expr -> ^( SIMPLE_EXPR simple_expr ) ;
    public final ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper() throws RecognitionException {
        ObjcmParser.simple_expr_wrapper_return retval = new ObjcmParser.simple_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_return simple_expr372 =null;


        RewriteRuleSubtreeStream stream_simple_expr=new RewriteRuleSubtreeStream(adaptor,"rule simple_expr");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:646:2: ( simple_expr -> ^( SIMPLE_EXPR simple_expr ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:646:4: simple_expr
            {
            pushFollow(FOLLOW_simple_expr_in_simple_expr_wrapper3372);
            simple_expr372=simple_expr();

            state._fsp--;

            stream_simple_expr.add(simple_expr372.getTree());

            // AST REWRITE
            // elements: simple_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 646:16: -> ^( SIMPLE_EXPR simple_expr )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:646:19: ^( SIMPLE_EXPR simple_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SIMPLE_EXPR, "SIMPLE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr_wrapper"


    public static class simple_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:648:1: simple_expr : expr_or_or -> ^( EXPR_OR_OR expr_or_or ) ;
    public final ObjcmParser.simple_expr_return simple_expr() throws RecognitionException {
        ObjcmParser.simple_expr_return retval = new ObjcmParser.simple_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_or_return expr_or_or373 =null;


        RewriteRuleSubtreeStream stream_expr_or_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or_or");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:649:2: ( expr_or_or -> ^( EXPR_OR_OR expr_or_or ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:649:4: expr_or_or
            {
            pushFollow(FOLLOW_expr_or_or_in_simple_expr3390);
            expr_or_or373=expr_or_or();

            state._fsp--;

            stream_expr_or_or.add(expr_or_or373.getTree());

            // AST REWRITE
            // elements: expr_or_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 649:15: -> ^( EXPR_OR_OR expr_or_or )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:649:18: ^( EXPR_OR_OR expr_or_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR_OR, "EXPR_OR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr"


    public static class expr_or_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_or"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:651:1: expr_or_or : expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_or_or_return expr_or_or() throws RecognitionException {
        ObjcmParser.expr_or_or_return retval = new ObjcmParser.expr_or_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR_OR375=null;
        ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper374 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper376 =null;


        Object L_OR_OR375_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:652:2: ( expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:652:4: expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_and_wrapper_in_expr_or_or3407);
            expr_and_and_wrapper374=expr_and_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_and_wrapper374.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:652:25: ( L_OR_OR simple_expr_wrapper )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==L_OR_OR) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:652:26: L_OR_OR simple_expr_wrapper
            	    {
            	    L_OR_OR375=(Token)match(input,L_OR_OR,FOLLOW_L_OR_OR_in_expr_or_or3410); 
            	    L_OR_OR375_tree = 
            	    (Object)adaptor.create(L_OR_OR375)
            	    ;
            	    adaptor.addChild(root_0, L_OR_OR375_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_or_or3412);
            	    simple_expr_wrapper376=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper376.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_or"


    public static class expr_and_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:654:1: expr_and_and_wrapper : expr_and_and -> ^( EXPR_AND_AND expr_and_and ) ;
    public final ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_and_wrapper_return retval = new ObjcmParser.expr_and_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_and_return expr_and_and377 =null;


        RewriteRuleSubtreeStream stream_expr_and_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and_and");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:655:2: ( expr_and_and -> ^( EXPR_AND_AND expr_and_and ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:655:4: expr_and_and
            {
            pushFollow(FOLLOW_expr_and_and_in_expr_and_and_wrapper3423);
            expr_and_and377=expr_and_and();

            state._fsp--;

            stream_expr_and_and.add(expr_and_and377.getTree());

            // AST REWRITE
            // elements: expr_and_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 655:17: -> ^( EXPR_AND_AND expr_and_and )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:655:20: ^( EXPR_AND_AND expr_and_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND_AND, "EXPR_AND_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and_wrapper"


    public static class expr_and_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:657:1: expr_and_and : expr_or_wrapper ( L_AND_AND simple_expr_wrapper )* ;
    public final ObjcmParser.expr_and_and_return expr_and_and() throws RecognitionException {
        ObjcmParser.expr_and_and_return retval = new ObjcmParser.expr_and_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND_AND379=null;
        ObjcmParser.expr_or_wrapper_return expr_or_wrapper378 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper380 =null;


        Object L_AND_AND379_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:658:2: ( expr_or_wrapper ( L_AND_AND simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:658:4: expr_or_wrapper ( L_AND_AND simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_or_wrapper_in_expr_and_and3440);
            expr_or_wrapper378=expr_or_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_or_wrapper378.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:658:20: ( L_AND_AND simple_expr_wrapper )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==L_AND_AND) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:658:21: L_AND_AND simple_expr_wrapper
            	    {
            	    L_AND_AND379=(Token)match(input,L_AND_AND,FOLLOW_L_AND_AND_in_expr_and_and3443); 
            	    L_AND_AND379_tree = 
            	    (Object)adaptor.create(L_AND_AND379)
            	    ;
            	    adaptor.addChild(root_0, L_AND_AND379_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_and_and3445);
            	    simple_expr_wrapper380=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper380.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and"


    public static class expr_or_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:660:1: expr_or_wrapper : expr_or -> ^( EXPR_OR expr_or ) ;
    public final ObjcmParser.expr_or_wrapper_return expr_or_wrapper() throws RecognitionException {
        ObjcmParser.expr_or_wrapper_return retval = new ObjcmParser.expr_or_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_return expr_or381 =null;


        RewriteRuleSubtreeStream stream_expr_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:661:2: ( expr_or -> ^( EXPR_OR expr_or ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:661:4: expr_or
            {
            pushFollow(FOLLOW_expr_or_in_expr_or_wrapper3456);
            expr_or381=expr_or();

            state._fsp--;

            stream_expr_or.add(expr_or381.getTree());

            // AST REWRITE
            // elements: expr_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 661:12: -> ^( EXPR_OR expr_or )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:661:15: ^( EXPR_OR expr_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR, "EXPR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_wrapper"


    public static class expr_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:663:1: expr_or : expr_xor_wrapper ( L_OR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_or_return expr_or() throws RecognitionException {
        ObjcmParser.expr_or_return retval = new ObjcmParser.expr_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR383=null;
        ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper382 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper384 =null;


        Object L_OR383_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:664:2: ( expr_xor_wrapper ( L_OR simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:664:4: expr_xor_wrapper ( L_OR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_xor_wrapper_in_expr_or3474);
            expr_xor_wrapper382=expr_xor_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_xor_wrapper382.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:664:21: ( L_OR simple_expr_wrapper )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==L_OR) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:664:22: L_OR simple_expr_wrapper
            	    {
            	    L_OR383=(Token)match(input,L_OR,FOLLOW_L_OR_in_expr_or3477); 
            	    L_OR383_tree = 
            	    (Object)adaptor.create(L_OR383)
            	    ;
            	    adaptor.addChild(root_0, L_OR383_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_or3479);
            	    simple_expr_wrapper384=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper384.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or"


    public static class expr_xor_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:666:1: expr_xor_wrapper : expr_xor -> ^( EXPR_XOR expr_xor ) ;
    public final ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper() throws RecognitionException {
        ObjcmParser.expr_xor_wrapper_return retval = new ObjcmParser.expr_xor_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_xor_return expr_xor385 =null;


        RewriteRuleSubtreeStream stream_expr_xor=new RewriteRuleSubtreeStream(adaptor,"rule expr_xor");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:667:2: ( expr_xor -> ^( EXPR_XOR expr_xor ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:667:4: expr_xor
            {
            pushFollow(FOLLOW_expr_xor_in_expr_xor_wrapper3490);
            expr_xor385=expr_xor();

            state._fsp--;

            stream_expr_xor.add(expr_xor385.getTree());

            // AST REWRITE
            // elements: expr_xor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 667:13: -> ^( EXPR_XOR expr_xor )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:667:16: ^( EXPR_XOR expr_xor )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_XOR, "EXPR_XOR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_xor.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor_wrapper"


    public static class expr_xor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:669:1: expr_xor : expr_and_wrapper ( L_XOR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_xor_return expr_xor() throws RecognitionException {
        ObjcmParser.expr_xor_return retval = new ObjcmParser.expr_xor_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_XOR387=null;
        ObjcmParser.expr_and_wrapper_return expr_and_wrapper386 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper388 =null;


        Object L_XOR387_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:670:2: ( expr_and_wrapper ( L_XOR simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:670:4: expr_and_wrapper ( L_XOR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_wrapper_in_expr_xor3507);
            expr_and_wrapper386=expr_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_wrapper386.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:670:21: ( L_XOR simple_expr_wrapper )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==L_XOR) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:670:22: L_XOR simple_expr_wrapper
            	    {
            	    L_XOR387=(Token)match(input,L_XOR,FOLLOW_L_XOR_in_expr_xor3510); 
            	    L_XOR387_tree = 
            	    (Object)adaptor.create(L_XOR387)
            	    ;
            	    adaptor.addChild(root_0, L_XOR387_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_xor3512);
            	    simple_expr_wrapper388=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper388.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor"


    public static class expr_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:672:1: expr_and_wrapper : expr_and -> ^( EXPR_AND expr_and ) ;
    public final ObjcmParser.expr_and_wrapper_return expr_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_wrapper_return retval = new ObjcmParser.expr_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_return expr_and389 =null;


        RewriteRuleSubtreeStream stream_expr_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:673:2: ( expr_and -> ^( EXPR_AND expr_and ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:673:4: expr_and
            {
            pushFollow(FOLLOW_expr_and_in_expr_and_wrapper3524);
            expr_and389=expr_and();

            state._fsp--;

            stream_expr_and.add(expr_and389.getTree());

            // AST REWRITE
            // elements: expr_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 673:13: -> ^( EXPR_AND expr_and )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:673:16: ^( EXPR_AND expr_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND, "EXPR_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_wrapper"


    public static class expr_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:675:1: expr_and : expr_eq_wrapper ( L_AND simple_expr_wrapper )* ;
    public final ObjcmParser.expr_and_return expr_and() throws RecognitionException {
        ObjcmParser.expr_and_return retval = new ObjcmParser.expr_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND391=null;
        ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper390 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper392 =null;


        Object L_AND391_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:676:2: ( expr_eq_wrapper ( L_AND simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:676:4: expr_eq_wrapper ( L_AND simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_eq_wrapper_in_expr_and3542);
            expr_eq_wrapper390=expr_eq_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_eq_wrapper390.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:676:20: ( L_AND simple_expr_wrapper )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==L_AND) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:676:21: L_AND simple_expr_wrapper
            	    {
            	    L_AND391=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_and3545); 
            	    L_AND391_tree = 
            	    (Object)adaptor.create(L_AND391)
            	    ;
            	    adaptor.addChild(root_0, L_AND391_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_and3547);
            	    simple_expr_wrapper392=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper392.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and"


    public static class expr_eq_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:678:1: expr_eq_wrapper : expr_eq -> ^( EXPR_EQ expr_eq ) ;
    public final ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper() throws RecognitionException {
        ObjcmParser.expr_eq_wrapper_return retval = new ObjcmParser.expr_eq_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_eq_return expr_eq393 =null;


        RewriteRuleSubtreeStream stream_expr_eq=new RewriteRuleSubtreeStream(adaptor,"rule expr_eq");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:679:2: ( expr_eq -> ^( EXPR_EQ expr_eq ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:679:4: expr_eq
            {
            pushFollow(FOLLOW_expr_eq_in_expr_eq_wrapper3559);
            expr_eq393=expr_eq();

            state._fsp--;

            stream_expr_eq.add(expr_eq393.getTree());

            // AST REWRITE
            // elements: expr_eq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 679:12: -> ^( EXPR_EQ expr_eq )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:679:15: ^( EXPR_EQ expr_eq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_EQ, "EXPR_EQ")
                , root_1);

                adaptor.addChild(root_1, stream_expr_eq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq_wrapper"


    public static class expr_eq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:681:1: expr_eq : expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_eq_return expr_eq() throws RecognitionException {
        ObjcmParser.expr_eq_return retval = new ObjcmParser.expr_eq_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set395=null;
        ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper394 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper396 =null;


        Object set395_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:682:2: ( expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:682:4: expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_cond_wrapper_in_expr_eq3577);
            expr_cond_wrapper394=expr_cond_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_cond_wrapper394.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:682:22: ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==L_EQ_EQ||LA96_0==L_NEQ) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:682:23: ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper
            	    {
            	    set395=(Token)input.LT(1);

            	    if ( input.LA(1)==L_EQ_EQ||input.LA(1)==L_NEQ ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set395)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_eq3588);
            	    simple_expr_wrapper396=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper396.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq"


    public static class expr_cond_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:684:1: expr_cond_wrapper : expr_cond -> ^( EXPR_COND expr_cond ) ;
    public final ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper() throws RecognitionException {
        ObjcmParser.expr_cond_wrapper_return retval = new ObjcmParser.expr_cond_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_cond_return expr_cond397 =null;


        RewriteRuleSubtreeStream stream_expr_cond=new RewriteRuleSubtreeStream(adaptor,"rule expr_cond");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:685:2: ( expr_cond -> ^( EXPR_COND expr_cond ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:685:4: expr_cond
            {
            pushFollow(FOLLOW_expr_cond_in_expr_cond_wrapper3599);
            expr_cond397=expr_cond();

            state._fsp--;

            stream_expr_cond.add(expr_cond397.getTree());

            // AST REWRITE
            // elements: expr_cond
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 685:14: -> ^( EXPR_COND expr_cond )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:685:17: ^( EXPR_COND expr_cond )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_COND, "EXPR_COND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_cond.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond_wrapper"


    public static class expr_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:687:1: expr_cond : expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_cond_return expr_cond() throws RecognitionException {
        ObjcmParser.expr_cond_return retval = new ObjcmParser.expr_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set399=null;
        ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper398 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper400 =null;


        Object set399_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:688:2: ( expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:688:4: expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mov_wrapper_in_expr_cond3616);
            expr_mov_wrapper398=expr_mov_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mov_wrapper398.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:688:21: ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( ((LA97_0 >= L_LESS && LA97_0 <= L_LESS_EQ)||(LA97_0 >= L_MORE && LA97_0 <= L_MORE_EQ)) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:688:22: ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper
            	    {
            	    set399=(Token)input.LT(1);

            	    if ( (input.LA(1) >= L_LESS && input.LA(1) <= L_LESS_EQ)||(input.LA(1) >= L_MORE && input.LA(1) <= L_MORE_EQ) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set399)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_cond3635);
            	    simple_expr_wrapper400=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper400.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond"


    public static class expr_mov_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:690:1: expr_mov_wrapper : expr_mov -> ^( EXPR_MOV expr_mov ) ;
    public final ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper() throws RecognitionException {
        ObjcmParser.expr_mov_wrapper_return retval = new ObjcmParser.expr_mov_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mov_return expr_mov401 =null;


        RewriteRuleSubtreeStream stream_expr_mov=new RewriteRuleSubtreeStream(adaptor,"rule expr_mov");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:691:2: ( expr_mov -> ^( EXPR_MOV expr_mov ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:691:4: expr_mov
            {
            pushFollow(FOLLOW_expr_mov_in_expr_mov_wrapper3646);
            expr_mov401=expr_mov();

            state._fsp--;

            stream_expr_mov.add(expr_mov401.getTree());

            // AST REWRITE
            // elements: expr_mov
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 691:13: -> ^( EXPR_MOV expr_mov )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:691:16: ^( EXPR_MOV expr_mov )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MOV, "EXPR_MOV")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mov.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov_wrapper"


    public static class expr_mov_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:693:1: expr_mov : expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_mov_return expr_mov() throws RecognitionException {
        ObjcmParser.expr_mov_return retval = new ObjcmParser.expr_mov_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set403=null;
        ObjcmParser.expr_add_wrapper_return expr_add_wrapper402 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper404 =null;


        Object set403_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:694:2: ( expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:694:4: expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_add_wrapper_in_expr_mov3664);
            expr_add_wrapper402=expr_add_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_add_wrapper402.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:694:21: ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==L_LEFT||LA98_0==L_RIGHT) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:694:22: ( L_LEFT | L_RIGHT ) simple_expr_wrapper
            	    {
            	    set403=(Token)input.LT(1);

            	    if ( input.LA(1)==L_LEFT||input.LA(1)==L_RIGHT ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set403)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_mov3675);
            	    simple_expr_wrapper404=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper404.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov"


    public static class expr_add_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:696:1: expr_add_wrapper : expr_add -> ^( EXPR_ADD expr_add ) ;
    public final ObjcmParser.expr_add_wrapper_return expr_add_wrapper() throws RecognitionException {
        ObjcmParser.expr_add_wrapper_return retval = new ObjcmParser.expr_add_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_add_return expr_add405 =null;


        RewriteRuleSubtreeStream stream_expr_add=new RewriteRuleSubtreeStream(adaptor,"rule expr_add");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:697:2: ( expr_add -> ^( EXPR_ADD expr_add ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:697:4: expr_add
            {
            pushFollow(FOLLOW_expr_add_in_expr_add_wrapper3687);
            expr_add405=expr_add();

            state._fsp--;

            stream_expr_add.add(expr_add405.getTree());

            // AST REWRITE
            // elements: expr_add
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 697:13: -> ^( EXPR_ADD expr_add )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:697:16: ^( EXPR_ADD expr_add )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ADD, "EXPR_ADD")
                , root_1);

                adaptor.addChild(root_1, stream_expr_add.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add_wrapper"


    public static class expr_add_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:699:1: expr_add : expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_add_return expr_add() throws RecognitionException {
        ObjcmParser.expr_add_return retval = new ObjcmParser.expr_add_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set407=null;
        ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper406 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper408 =null;


        Object set407_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:700:2: ( expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:700:4: expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mult_wrapper_in_expr_add3704);
            expr_mult_wrapper406=expr_mult_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mult_wrapper406.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:700:22: ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==L_MINUS||LA99_0==L_PLUS) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:700:23: ( L_PLUS | L_MINUS ) simple_expr_wrapper
            	    {
            	    set407=(Token)input.LT(1);

            	    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set407)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_add3715);
            	    simple_expr_wrapper408=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper408.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add"


    public static class expr_mult_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:702:1: expr_mult_wrapper : expr_mult -> ^( EXPR_MULT expr_mult ) ;
    public final ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper() throws RecognitionException {
        ObjcmParser.expr_mult_wrapper_return retval = new ObjcmParser.expr_mult_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mult_return expr_mult409 =null;


        RewriteRuleSubtreeStream stream_expr_mult=new RewriteRuleSubtreeStream(adaptor,"rule expr_mult");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:703:2: ( expr_mult -> ^( EXPR_MULT expr_mult ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:703:4: expr_mult
            {
            pushFollow(FOLLOW_expr_mult_in_expr_mult_wrapper3726);
            expr_mult409=expr_mult();

            state._fsp--;

            stream_expr_mult.add(expr_mult409.getTree());

            // AST REWRITE
            // elements: expr_mult
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 703:14: -> ^( EXPR_MULT expr_mult )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:703:17: ^( EXPR_MULT expr_mult )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MULT, "EXPR_MULT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mult.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult_wrapper"


    public static class expr_mult_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:705:1: expr_mult : expr_unname_wrapper ( ( ASTERISK | L_DIV | L_PERC ) expr_unname_wrapper )* ;
    public final ObjcmParser.expr_mult_return expr_mult() throws RecognitionException {
        ObjcmParser.expr_mult_return retval = new ObjcmParser.expr_mult_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set411=null;
        ObjcmParser.expr_unname_wrapper_return expr_unname_wrapper410 =null;

        ObjcmParser.expr_unname_wrapper_return expr_unname_wrapper412 =null;


        Object set411_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:706:2: ( expr_unname_wrapper ( ( ASTERISK | L_DIV | L_PERC ) expr_unname_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:706:4: expr_unname_wrapper ( ( ASTERISK | L_DIV | L_PERC ) expr_unname_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_unname_wrapper_in_expr_mult3743);
            expr_unname_wrapper410=expr_unname_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_unname_wrapper410.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:706:24: ( ( ASTERISK | L_DIV | L_PERC ) expr_unname_wrapper )*
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( (LA100_0==ASTERISK||LA100_0==L_DIV||LA100_0==L_PERC) ) {
                    alt100=1;
                }


                switch (alt100) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:706:25: ( ASTERISK | L_DIV | L_PERC ) expr_unname_wrapper
            	    {
            	    set411=(Token)input.LT(1);

            	    if ( input.LA(1)==ASTERISK||input.LA(1)==L_DIV||input.LA(1)==L_PERC ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set411)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_expr_unname_wrapper_in_expr_mult3758);
            	    expr_unname_wrapper412=expr_unname_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, expr_unname_wrapper412.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult"


    public static class expr_unname_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_unname_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:708:1: expr_unname_wrapper : expr_unname -> ^( EXPR_UNNAME expr_unname ) ;
    public final ObjcmParser.expr_unname_wrapper_return expr_unname_wrapper() throws RecognitionException {
        ObjcmParser.expr_unname_wrapper_return retval = new ObjcmParser.expr_unname_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_unname_return expr_unname413 =null;


        RewriteRuleSubtreeStream stream_expr_unname=new RewriteRuleSubtreeStream(adaptor,"rule expr_unname");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:709:2: ( expr_unname -> ^( EXPR_UNNAME expr_unname ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:709:4: expr_unname
            {
            pushFollow(FOLLOW_expr_unname_in_expr_unname_wrapper3770);
            expr_unname413=expr_unname();

            state._fsp--;

            stream_expr_unname.add(expr_unname413.getTree());

            // AST REWRITE
            // elements: expr_unname
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 709:16: -> ^( EXPR_UNNAME expr_unname )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:709:19: ^( EXPR_UNNAME expr_unname )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_UNNAME, "EXPR_UNNAME")
                , root_1);

                adaptor.addChild(root_1, stream_expr_unname.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_unname_wrapper"


    public static class expr_unname_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_unname"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:711:1: expr_unname : ( ASTERISK ( type_convertion )? )? expr_addr ;
    public final ObjcmParser.expr_unname_return expr_unname() throws RecognitionException {
        ObjcmParser.expr_unname_return retval = new ObjcmParser.expr_unname_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK414=null;
        ObjcmParser.type_convertion_return type_convertion415 =null;

        ObjcmParser.expr_addr_return expr_addr416 =null;


        Object ASTERISK414_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:712:2: ( ( ASTERISK ( type_convertion )? )? expr_addr )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:712:4: ( ASTERISK ( type_convertion )? )? expr_addr
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:712:4: ( ASTERISK ( type_convertion )? )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==ASTERISK) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:712:5: ASTERISK ( type_convertion )?
                    {
                    ASTERISK414=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_expr_unname3791); 
                    ASTERISK414_tree = 
                    (Object)adaptor.create(ASTERISK414)
                    ;
                    adaptor.addChild(root_0, ASTERISK414_tree);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:712:14: ( type_convertion )?
                    int alt101=2;
                    alt101 = dfa101.predict(input);
                    switch (alt101) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:712:14: type_convertion
                            {
                            pushFollow(FOLLOW_type_convertion_in_expr_unname3793);
                            type_convertion415=type_convertion();

                            state._fsp--;

                            adaptor.addChild(root_0, type_convertion415.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_addr_in_expr_unname3798);
            expr_addr416=expr_addr();

            state._fsp--;

            adaptor.addChild(root_0, expr_addr416.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_unname"


    public static class expr_addr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_addr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:714:1: expr_addr : ( L_AND )? expr_sign ;
    public final ObjcmParser.expr_addr_return expr_addr() throws RecognitionException {
        ObjcmParser.expr_addr_return retval = new ObjcmParser.expr_addr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND417=null;
        ObjcmParser.expr_sign_return expr_sign418 =null;


        Object L_AND417_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:715:2: ( ( L_AND )? expr_sign )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:715:4: ( L_AND )? expr_sign
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:715:4: ( L_AND )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==L_AND) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:715:4: L_AND
                    {
                    L_AND417=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_addr3808); 
                    L_AND417_tree = 
                    (Object)adaptor.create(L_AND417)
                    ;
                    adaptor.addChild(root_0, L_AND417_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_sign_in_expr_addr3811);
            expr_sign418=expr_sign();

            state._fsp--;

            adaptor.addChild(root_0, expr_sign418.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_addr"


    public static class expr_sign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_sign"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:717:1: expr_sign : ( L_MINUS | L_PLUS )? expr_not_wrapper ;
    public final ObjcmParser.expr_sign_return expr_sign() throws RecognitionException {
        ObjcmParser.expr_sign_return retval = new ObjcmParser.expr_sign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set419=null;
        ObjcmParser.expr_not_wrapper_return expr_not_wrapper420 =null;


        Object set419_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:718:2: ( ( L_MINUS | L_PLUS )? expr_not_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:718:4: ( L_MINUS | L_PLUS )? expr_not_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:718:4: ( L_MINUS | L_PLUS )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==L_MINUS||LA104_0==L_PLUS) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
                    {
                    set419=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set419)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not_wrapper_in_expr_sign3830);
            expr_not_wrapper420=expr_not_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_not_wrapper420.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_sign"


    public static class expr_not_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:720:1: expr_not_wrapper : expr_not -> ^( EXPR_NOT expr_not ) ;
    public final ObjcmParser.expr_not_wrapper_return expr_not_wrapper() throws RecognitionException {
        ObjcmParser.expr_not_wrapper_return retval = new ObjcmParser.expr_not_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_not_return expr_not421 =null;


        RewriteRuleSubtreeStream stream_expr_not=new RewriteRuleSubtreeStream(adaptor,"rule expr_not");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:721:2: ( expr_not -> ^( EXPR_NOT expr_not ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:721:4: expr_not
            {
            pushFollow(FOLLOW_expr_not_in_expr_not_wrapper3840);
            expr_not421=expr_not();

            state._fsp--;

            stream_expr_not.add(expr_not421.getTree());

            // AST REWRITE
            // elements: expr_not
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 721:13: -> ^( EXPR_NOT expr_not )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:721:16: ^( EXPR_NOT expr_not )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_not.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not_wrapper"


    public static class expr_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:723:1: expr_not : ( L_NOT )? expr_not2 ;
    public final ObjcmParser.expr_not_return expr_not() throws RecognitionException {
        ObjcmParser.expr_not_return retval = new ObjcmParser.expr_not_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_NOT422=null;
        ObjcmParser.expr_not2_return expr_not2423 =null;


        Object L_NOT422_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:724:2: ( ( L_NOT )? expr_not2 )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:724:4: ( L_NOT )? expr_not2
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:724:4: ( L_NOT )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==L_NOT) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:724:4: L_NOT
                    {
                    L_NOT422=(Token)match(input,L_NOT,FOLLOW_L_NOT_in_expr_not3859); 
                    L_NOT422_tree = 
                    (Object)adaptor.create(L_NOT422)
                    ;
                    adaptor.addChild(root_0, L_NOT422_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not2_in_expr_not3862);
            expr_not2423=expr_not2();

            state._fsp--;

            adaptor.addChild(root_0, expr_not2423.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not"


    public static class expr_not2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:726:1: expr_not2 : ( L_TILDA )? expr_size_of ;
    public final ObjcmParser.expr_not2_return expr_not2() throws RecognitionException {
        ObjcmParser.expr_not2_return retval = new ObjcmParser.expr_not2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_TILDA424=null;
        ObjcmParser.expr_size_of_return expr_size_of425 =null;


        Object L_TILDA424_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:727:2: ( ( L_TILDA )? expr_size_of )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:727:4: ( L_TILDA )? expr_size_of
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:727:4: ( L_TILDA )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==L_TILDA) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:727:4: L_TILDA
                    {
                    L_TILDA424=(Token)match(input,L_TILDA,FOLLOW_L_TILDA_in_expr_not23872); 
                    L_TILDA424_tree = 
                    (Object)adaptor.create(L_TILDA424)
                    ;
                    adaptor.addChild(root_0, L_TILDA424_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_size_of_in_expr_not23875);
            expr_size_of425=expr_size_of();

            state._fsp--;

            adaptor.addChild(root_0, expr_size_of425.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not2"


    public static class expr_size_of_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_size_of"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:729:1: expr_size_of : ( SIZEOF )? expr_xcrement ;
    public final ObjcmParser.expr_size_of_return expr_size_of() throws RecognitionException {
        ObjcmParser.expr_size_of_return retval = new ObjcmParser.expr_size_of_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SIZEOF426=null;
        ObjcmParser.expr_xcrement_return expr_xcrement427 =null;


        Object SIZEOF426_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:730:2: ( ( SIZEOF )? expr_xcrement )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:730:4: ( SIZEOF )? expr_xcrement
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:730:4: ( SIZEOF )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==SIZEOF) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:730:4: SIZEOF
                    {
                    SIZEOF426=(Token)match(input,SIZEOF,FOLLOW_SIZEOF_in_expr_size_of3885); 
                    SIZEOF426_tree = 
                    (Object)adaptor.create(SIZEOF426)
                    ;
                    adaptor.addChild(root_0, SIZEOF426_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_xcrement_in_expr_size_of3888);
            expr_xcrement427=expr_xcrement();

            state._fsp--;

            adaptor.addChild(root_0, expr_xcrement427.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_size_of"


    public static class expr_xcrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xcrement"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:732:1: expr_xcrement : ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 ;
    public final ObjcmParser.expr_xcrement_return expr_xcrement() throws RecognitionException {
        ObjcmParser.expr_xcrement_return retval = new ObjcmParser.expr_xcrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set428=null;
        ObjcmParser.object_wrapped1_return object_wrapped1429 =null;


        Object set428_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:733:2: ( ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:733:4: ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:733:4: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==L_MINUS_MINUS||LA108_0==L_PLUS_PLUS) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
                    {
                    set428=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set428)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_object_wrapped1_in_expr_xcrement3907);
            object_wrapped1429=object_wrapped1();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped1429.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xcrement"


    public static class object_wrapped1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped1"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:735:1: object_wrapped1 : object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? ;
    public final ObjcmParser.object_wrapped1_return object_wrapped1() throws RecognitionException {
        ObjcmParser.object_wrapped1_return retval = new ObjcmParser.object_wrapped1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set431=null;
        ObjcmParser.object_wrapped2_return object_wrapped2430 =null;


        Object set431_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:736:2: ( object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:736:4: object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapped2_in_object_wrapped13917);
            object_wrapped2430=object_wrapped2();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped2430.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:736:20: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==L_MINUS_MINUS||LA109_0==L_PLUS_PLUS) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
                    {
                    set431=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set431)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped1"


    public static class object_wrapped2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:739:1: object_wrapped2 : ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR l_br_end -> ^( L_BR_TOKEN l_br_end ) | const_expr_wrapper | a_started );
    public final ObjcmParser.object_wrapped2_return object_wrapped2() throws RecognitionException {
        ObjcmParser.object_wrapped2_return retval = new ObjcmParser.object_wrapped2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal432=null;
        Token L_BR437=null;
        ObjcmParser.object_name_return object_name433 =null;

        ObjcmParser.generic_return generic434 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper435 =null;

        ObjcmParser.id_part_end_return id_part_end436 =null;

        ObjcmParser.l_br_end_return l_br_end438 =null;

        ObjcmParser.const_expr_wrapper_return const_expr_wrapper439 =null;

        ObjcmParser.a_started_return a_started440 =null;


        Object string_literal432_tree=null;
        Object L_BR437_tree=null;
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleSubtreeStream stream_l_br_end=new RewriteRuleSubtreeStream(adaptor,"rule l_br_end");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:740:2: ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR l_br_end -> ^( L_BR_TOKEN l_br_end ) | const_expr_wrapper | a_started )
            int alt113=5;
            switch ( input.LA(1) ) {
            case ID:
            case 186:
            case 189:
            case 197:
            case 200:
            case 205:
                {
                alt113=1;
                }
                break;
            case L_KBR:
                {
                alt113=2;
                }
                break;
            case L_BR:
                {
                alt113=3;
                }
                break;
            case NUMBER:
            case STRING_LITERAL:
            case STRING_LITERAL2:
            case STRING_LITERAL3:
            case 183:
            case 199:
                {
                alt113=4;
                }
                break;
            case 170:
            case 177:
            case 179:
                {
                alt113=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;

            }

            switch (alt113) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:740:5: ( 'unsigned' )? object_name ( generic )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:740:5: ( 'unsigned' )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==205) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:740:5: 'unsigned'
                            {
                            string_literal432=(Token)match(input,205,FOLLOW_205_in_object_wrapped23938); 
                            string_literal432_tree = 
                            (Object)adaptor.create(string_literal432)
                            ;
                            adaptor.addChild(root_0, string_literal432_tree);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_object_name_in_object_wrapped23941);
                    object_name433=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name433.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:740:29: ( generic )?
                    int alt111=2;
                    alt111 = dfa111.predict(input);
                    switch (alt111) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:740:29: generic
                            {
                            pushFollow(FOLLOW_generic_in_object_wrapped23943);
                            generic434=generic();

                            state._fsp--;

                            adaptor.addChild(root_0, generic434.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:741:4: method_call_wrapper ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapped23949);
                    method_call_wrapper435=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper435.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:741:24: ( id_part_end )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==DOT||LA112_0==167) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:741:24: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23951);
                            id_part_end436=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end436.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:742:4: L_BR l_br_end
                    {
                    L_BR437=(Token)match(input,L_BR,FOLLOW_L_BR_in_object_wrapped23957);  
                    stream_L_BR.add(L_BR437);


                    pushFollow(FOLLOW_l_br_end_in_object_wrapped23959);
                    l_br_end438=l_br_end();

                    state._fsp--;

                    stream_l_br_end.add(l_br_end438.getTree());

                    // AST REWRITE
                    // elements: l_br_end
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 742:18: -> ^( L_BR_TOKEN l_br_end )
                    {
                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:742:21: ^( L_BR_TOKEN l_br_end )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(L_BR_TOKEN, "L_BR_TOKEN")
                        , root_1);

                        adaptor.addChild(root_1, stream_l_br_end.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 4 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:743:4: const_expr_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_wrapper_in_object_wrapped23972);
                    const_expr_wrapper439=const_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr_wrapper439.getTree());

                    }
                    break;
                case 5 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:744:4: a_started
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_started_in_object_wrapped23977);
                    a_started440=a_started();

                    state._fsp--;

                    adaptor.addChild(root_0, a_started440.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped2"


    public static class l_br_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "l_br_end"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:747:1: l_br_end : ( type_convertion_internal_wrapper R_BR classical_expr_wrp -> ^( TYPE_CONVERTION2 type_convertion_internal_wrapper classical_expr_wrp ) | classical_expr_wrp R_BR ( id_part_end )? );
    public final ObjcmParser.l_br_end_return l_br_end() throws RecognitionException {
        ObjcmParser.l_br_end_return retval = new ObjcmParser.l_br_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token R_BR442=null;
        Token R_BR445=null;
        ObjcmParser.type_convertion_internal_wrapper_return type_convertion_internal_wrapper441 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp443 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp444 =null;

        ObjcmParser.id_part_end_return id_part_end446 =null;


        Object R_BR442_tree=null;
        Object R_BR445_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        RewriteRuleSubtreeStream stream_type_convertion_internal_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule type_convertion_internal_wrapper");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:747:9: ( type_convertion_internal_wrapper R_BR classical_expr_wrp -> ^( TYPE_CONVERTION2 type_convertion_internal_wrapper classical_expr_wrp ) | classical_expr_wrp R_BR ( id_part_end )? )
            int alt115=2;
            alt115 = dfa115.predict(input);
            switch (alt115) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:747:11: type_convertion_internal_wrapper R_BR classical_expr_wrp
                    {
                    pushFollow(FOLLOW_type_convertion_internal_wrapper_in_l_br_end3986);
                    type_convertion_internal_wrapper441=type_convertion_internal_wrapper();

                    state._fsp--;

                    stream_type_convertion_internal_wrapper.add(type_convertion_internal_wrapper441.getTree());

                    R_BR442=(Token)match(input,R_BR,FOLLOW_R_BR_in_l_br_end3988);  
                    stream_R_BR.add(R_BR442);


                    pushFollow(FOLLOW_classical_expr_wrp_in_l_br_end3990);
                    classical_expr_wrp443=classical_expr_wrp();

                    state._fsp--;

                    stream_classical_expr_wrp.add(classical_expr_wrp443.getTree());

                    // AST REWRITE
                    // elements: classical_expr_wrp, type_convertion_internal_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 747:68: -> ^( TYPE_CONVERTION2 type_convertion_internal_wrapper classical_expr_wrp )
                    {
                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:747:71: ^( TYPE_CONVERTION2 type_convertion_internal_wrapper classical_expr_wrp )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE_CONVERTION2, "TYPE_CONVERTION2")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_convertion_internal_wrapper.nextTree());

                        adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:748:4: classical_expr_wrp R_BR ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_l_br_end4005);
                    classical_expr_wrp444=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp444.getTree());

                    R_BR445=(Token)match(input,R_BR,FOLLOW_R_BR_in_l_br_end4007); 
                    R_BR445_tree = 
                    (Object)adaptor.create(R_BR445)
                    ;
                    adaptor.addChild(root_0, R_BR445_tree);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:748:28: ( id_part_end )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==DOT||LA114_0==167) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:748:28: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_l_br_end4009);
                            id_part_end446=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end446.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "l_br_end"


    public static class function_brackets_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:751:1: function_brackets_wrapper : function_brackets -> ^( FUNCTION function_brackets ) ;
    public final ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper() throws RecognitionException {
        ObjcmParser.function_brackets_wrapper_return retval = new ObjcmParser.function_brackets_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.function_brackets_return function_brackets447 =null;


        RewriteRuleSubtreeStream stream_function_brackets=new RewriteRuleSubtreeStream(adaptor,"rule function_brackets");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:752:2: ( function_brackets -> ^( FUNCTION function_brackets ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:752:4: function_brackets
            {
            pushFollow(FOLLOW_function_brackets_in_function_brackets_wrapper4023);
            function_brackets447=function_brackets();

            state._fsp--;

            stream_function_brackets.add(function_brackets447.getTree());

            // AST REWRITE
            // elements: function_brackets
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 752:22: -> ^( FUNCTION function_brackets )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:752:25: ^( FUNCTION function_brackets )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNCTION, "FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_function_brackets.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets_wrapper"


    public static class function_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:754:1: function_brackets : L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.function_brackets_return function_brackets() throws RecognitionException {
        ObjcmParser.function_brackets_return retval = new ObjcmParser.function_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR448=null;
        Token COMMA450=null;
        Token R_BR452=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp449 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp451 =null;


        Object L_BR448_tree=null;
        Object COMMA450_tree=null;
        Object R_BR452_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:755:2: ( L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:755:4: L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR448=(Token)match(input,L_BR,FOLLOW_L_BR_in_function_brackets4042); 
            L_BR448_tree = 
            (Object)adaptor.create(L_BR448)
            ;
            adaptor.addChild(root_0, L_BR448_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:755:9: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==ASTERISK||LA117_0==ID||LA117_0==L_AND||LA117_0==L_BR||LA117_0==L_KBR||LA117_0==L_MINUS||LA117_0==L_MINUS_MINUS||LA117_0==L_NOT||LA117_0==L_PLUS||LA117_0==L_PLUS_PLUS||LA117_0==L_TILDA||LA117_0==NUMBER||LA117_0==SIZEOF||(LA117_0 >= STRING_LITERAL && LA117_0 <= STRING_LITERAL3)||LA117_0==170||LA117_0==177||LA117_0==179||LA117_0==183||LA117_0==186||LA117_0==189||LA117_0==197||(LA117_0 >= 199 && LA117_0 <= 200)||LA117_0==205) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:755:10: classical_expr_wrp ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets4045);
                    classical_expr_wrp449=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp449.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:755:29: ( COMMA classical_expr_wrp )*
                    loop116:
                    do {
                        int alt116=2;
                        int LA116_0 = input.LA(1);

                        if ( (LA116_0==COMMA) ) {
                            alt116=1;
                        }


                        switch (alt116) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:755:30: COMMA classical_expr_wrp
                    	    {
                    	    COMMA450=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_brackets4048); 
                    	    COMMA450_tree = 
                    	    (Object)adaptor.create(COMMA450)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA450_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets4050);
                    	    classical_expr_wrp451=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp451.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop116;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR452=(Token)match(input,R_BR,FOLLOW_R_BR_in_function_brackets4056); 
            R_BR452_tree = 
            (Object)adaptor.create(R_BR452)
            ;
            adaptor.addChild(root_0, R_BR452_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets"


    public static class index_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:757:1: index_wrapper : index -> ^( INDEX index ) ;
    public final ObjcmParser.index_wrapper_return index_wrapper() throws RecognitionException {
        ObjcmParser.index_wrapper_return retval = new ObjcmParser.index_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.index_return index453 =null;


        RewriteRuleSubtreeStream stream_index=new RewriteRuleSubtreeStream(adaptor,"rule index");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:758:2: ( index -> ^( INDEX index ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:758:4: index
            {
            pushFollow(FOLLOW_index_in_index_wrapper4066);
            index453=index();

            state._fsp--;

            stream_index.add(index453.getTree());

            // AST REWRITE
            // elements: index
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 758:10: -> ^( INDEX index )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:758:13: ^( INDEX index )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INDEX, "INDEX")
                , root_1);

                adaptor.addChild(root_1, stream_index.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_wrapper"


    public static class index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:760:1: index : L_KBR ( index_number_wrapper )? R_KBR ;
    public final ObjcmParser.index_return index() throws RecognitionException {
        ObjcmParser.index_return retval = new ObjcmParser.index_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR454=null;
        Token R_KBR456=null;
        ObjcmParser.index_number_wrapper_return index_number_wrapper455 =null;


        Object L_KBR454_tree=null;
        Object R_KBR456_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:760:7: ( L_KBR ( index_number_wrapper )? R_KBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:760:9: L_KBR ( index_number_wrapper )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR454=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index4083); 
            L_KBR454_tree = 
            (Object)adaptor.create(L_KBR454)
            ;
            adaptor.addChild(root_0, L_KBR454_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:760:15: ( index_number_wrapper )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==ASTERISK||LA118_0==ID||LA118_0==L_AND||LA118_0==L_BR||LA118_0==L_KBR||LA118_0==L_MINUS||LA118_0==L_MINUS_MINUS||LA118_0==L_NOT||LA118_0==L_PLUS||LA118_0==L_PLUS_PLUS||LA118_0==L_TILDA||LA118_0==NUMBER||LA118_0==SIZEOF||(LA118_0 >= STRING_LITERAL && LA118_0 <= STRING_LITERAL3)||LA118_0==170||LA118_0==177||LA118_0==179||LA118_0==183||LA118_0==186||LA118_0==189||LA118_0==197||(LA118_0 >= 199 && LA118_0 <= 200)||LA118_0==205) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:760:15: index_number_wrapper
                    {
                    pushFollow(FOLLOW_index_number_wrapper_in_index4085);
                    index_number_wrapper455=index_number_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, index_number_wrapper455.getTree());

                    }
                    break;

            }


            R_KBR456=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index4088); 
            R_KBR456_tree = 
            (Object)adaptor.create(R_KBR456)
            ;
            adaptor.addChild(root_0, R_KBR456_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index"


    public static class index_number_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_number_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:762:1: index_number_wrapper : classical_expr_wrp -> ^( INDEX_NUMBER classical_expr_wrp ) ;
    public final ObjcmParser.index_number_wrapper_return index_number_wrapper() throws RecognitionException {
        ObjcmParser.index_number_wrapper_return retval = new ObjcmParser.index_number_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp457 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:763:2: ( classical_expr_wrp -> ^( INDEX_NUMBER classical_expr_wrp ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:763:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_index_number_wrapper4097);
            classical_expr_wrp457=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp457.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 763:23: -> ^( INDEX_NUMBER classical_expr_wrp )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:763:26: ^( INDEX_NUMBER classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INDEX_NUMBER, "INDEX_NUMBER")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_number_wrapper"


    public static class struct_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:765:1: struct_init : L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init_return struct_init() throws RecognitionException {
        ObjcmParser.struct_init_return retval = new ObjcmParser.struct_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR458=null;
        Token STRUCT_PREFIX459=null;
        Token ID460=null;
        Token R_BR461=null;
        Token L_FBR462=null;
        Token COMMA464=null;
        Token R_FBR466=null;
        ObjcmParser.struct_init_line_return struct_init_line463 =null;

        ObjcmParser.struct_init_line_return struct_init_line465 =null;


        Object L_BR458_tree=null;
        Object STRUCT_PREFIX459_tree=null;
        Object ID460_tree=null;
        Object R_BR461_tree=null;
        Object L_FBR462_tree=null;
        Object COMMA464_tree=null;
        Object R_FBR466_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:766:2: ( L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:766:4: L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_BR458=(Token)match(input,L_BR,FOLLOW_L_BR_in_struct_init4114); 
            L_BR458_tree = 
            (Object)adaptor.create(L_BR458)
            ;
            adaptor.addChild(root_0, L_BR458_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:766:10: ( STRUCT_PREFIX )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==STRUCT_PREFIX) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:766:10: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX459=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_init4117); 
                    STRUCT_PREFIX459_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX459)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX459_tree);


                    }
                    break;

            }


            ID460=(Token)match(input,ID,FOLLOW_ID_in_struct_init4120); 
            ID460_tree = 
            (Object)adaptor.create(ID460)
            ;
            adaptor.addChild(root_0, ID460_tree);


            R_BR461=(Token)match(input,R_BR,FOLLOW_R_BR_in_struct_init4123); 
            R_BR461_tree = 
            (Object)adaptor.create(R_BR461)
            ;
            adaptor.addChild(root_0, R_BR461_tree);


            L_FBR462=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init4126); 
            L_FBR462_tree = 
            (Object)adaptor.create(L_FBR462)
            ;
            adaptor.addChild(root_0, L_FBR462_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init4132);
            struct_init_line463=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line463.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:767:21: ( COMMA struct_init_line )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==COMMA) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:767:22: COMMA struct_init_line
            	    {
            	    COMMA464=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init4135); 
            	    COMMA464_tree = 
            	    (Object)adaptor.create(COMMA464)
            	    ;
            	    adaptor.addChild(root_0, COMMA464_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init4138);
            	    struct_init_line465=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line465.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            R_FBR466=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init4144); 
            R_FBR466_tree = 
            (Object)adaptor.create(R_FBR466)
            ;
            adaptor.addChild(root_0, R_FBR466_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init"


    public static class struct_init2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:771:1: struct_init2 : L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init2_return struct_init2() throws RecognitionException {
        ObjcmParser.struct_init2_return retval = new ObjcmParser.struct_init2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR467=null;
        Token COMMA469=null;
        Token R_FBR471=null;
        ObjcmParser.struct_init_line_return struct_init_line468 =null;

        ObjcmParser.struct_init_line_return struct_init_line470 =null;


        Object L_FBR467_tree=null;
        Object COMMA469_tree=null;
        Object R_FBR471_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:772:2: ( L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:772:4: L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR467=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init24158); 
            L_FBR467_tree = 
            (Object)adaptor.create(L_FBR467)
            ;
            adaptor.addChild(root_0, L_FBR467_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init24164);
            struct_init_line468=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line468.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:773:21: ( COMMA struct_init_line )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==COMMA) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:773:22: COMMA struct_init_line
            	    {
            	    COMMA469=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init24167); 
            	    COMMA469_tree = 
            	    (Object)adaptor.create(COMMA469)
            	    ;
            	    adaptor.addChild(root_0, COMMA469_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init24170);
            	    struct_init_line470=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line470.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            R_FBR471=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init24176); 
            R_FBR471_tree = 
            (Object)adaptor.create(R_FBR471)
            ;
            adaptor.addChild(root_0, R_FBR471_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init2"


    public static class struct_init_line_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_line"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:777:1: struct_init_line : ( struct_init_var | struct_init_expression );
    public final ObjcmParser.struct_init_line_return struct_init_line() throws RecognitionException {
        ObjcmParser.struct_init_line_return retval = new ObjcmParser.struct_init_line_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_init_var_return struct_init_var472 =null;

        ObjcmParser.struct_init_expression_return struct_init_expression473 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:778:2: ( struct_init_var | struct_init_expression )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==DOT) ) {
                alt122=1;
            }
            else if ( (LA122_0==ASTERISK||LA122_0==ID||LA122_0==L_AND||LA122_0==L_BR||LA122_0==L_KBR||LA122_0==L_MINUS||LA122_0==L_MINUS_MINUS||LA122_0==L_NOT||LA122_0==L_PLUS||LA122_0==L_PLUS_PLUS||LA122_0==L_TILDA||LA122_0==NUMBER||LA122_0==SIZEOF||(LA122_0 >= STRING_LITERAL && LA122_0 <= STRING_LITERAL3)||LA122_0==170||LA122_0==177||LA122_0==179||LA122_0==183||LA122_0==186||LA122_0==189||LA122_0==197||(LA122_0 >= 199 && LA122_0 <= 200)||LA122_0==205) ) {
                alt122=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;

            }
            switch (alt122) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:778:4: struct_init_var
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_var_in_struct_init_line4189);
                    struct_init_var472=struct_init_var();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_var472.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:779:4: struct_init_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_expression_in_struct_init_line4194);
                    struct_init_expression473=struct_init_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_expression473.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_line"


    public static class struct_init_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_expression"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:782:1: struct_init_expression : classical_expr_wrp ;
    public final ObjcmParser.struct_init_expression_return struct_init_expression() throws RecognitionException {
        ObjcmParser.struct_init_expression_return retval = new ObjcmParser.struct_init_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp474 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:783:2: ( classical_expr_wrp )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:783:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_expression4207);
            classical_expr_wrp474=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp474.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_expression"


    public static class struct_init_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_method"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:785:1: struct_init_method : classical_expr_wrp ;
    public final ObjcmParser.struct_init_method_return struct_init_method() throws RecognitionException {
        ObjcmParser.struct_init_method_return retval = new ObjcmParser.struct_init_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp475 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:786:2: ( classical_expr_wrp )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:786:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_method4218);
            classical_expr_wrp475=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp475.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_method"


    public static class struct_init_var_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_var"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:788:1: struct_init_var : ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) ;
    public final ObjcmParser.struct_init_var_return struct_init_var() throws RecognitionException {
        ObjcmParser.struct_init_var_return retval = new ObjcmParser.struct_init_var_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT476=null;
        Token L_EQ478=null;
        ObjcmParser.id_part_return id_part477 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets479 =null;

        ObjcmParser.expression_return expression480 =null;


        Object DOT476_tree=null;
        Object L_EQ478_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:789:2: ( ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:789:4: ( DOT id_part )+ L_EQ ( in_q_brackets | expression )
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:789:4: ( DOT id_part )+
            int cnt123=0;
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==DOT) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:789:5: DOT id_part
            	    {
            	    DOT476=(Token)match(input,DOT,FOLLOW_DOT_in_struct_init_var4230); 
            	    DOT476_tree = 
            	    (Object)adaptor.create(DOT476)
            	    ;
            	    adaptor.addChild(root_0, DOT476_tree);


            	    pushFollow(FOLLOW_id_part_in_struct_init_var4232);
            	    id_part477=id_part();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part477.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt123 >= 1 ) break loop123;
                        EarlyExitException eee =
                            new EarlyExitException(123, input);
                        throw eee;
                }
                cnt123++;
            } while (true);


            L_EQ478=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_struct_init_var4237); 
            L_EQ478_tree = 
            (Object)adaptor.create(L_EQ478)
            ;
            adaptor.addChild(root_0, L_EQ478_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:789:26: ( in_q_brackets | expression )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==L_FBR) ) {
                alt124=1;
            }
            else if ( (LA124_0==ASTERISK||LA124_0==ID||LA124_0==L_AND||LA124_0==L_BR||LA124_0==L_KBR||LA124_0==L_MINUS||LA124_0==L_MINUS_MINUS||LA124_0==L_NOT||LA124_0==L_PLUS||LA124_0==L_PLUS_PLUS||LA124_0==L_TILDA||LA124_0==NUMBER||LA124_0==SIZEOF||(LA124_0 >= STRING_LITERAL && LA124_0 <= STRING_LITERAL3)||LA124_0==170||LA124_0==177||LA124_0==179||LA124_0==183||LA124_0==186||LA124_0==189||LA124_0==197||(LA124_0 >= 199 && LA124_0 <= 200)||LA124_0==205) ) {
                alt124=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;

            }
            switch (alt124) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:789:27: in_q_brackets
                    {
                    pushFollow(FOLLOW_in_q_brackets_in_struct_init_var4241);
                    in_q_brackets479=in_q_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, in_q_brackets479.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:789:43: expression
                    {
                    pushFollow(FOLLOW_expression_in_struct_init_var4245);
                    expression480=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression480.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_var"


    public static class a_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_started"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:791:1: a_started : ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper );
    public final ObjcmParser.a_started_return a_started() throws RecognitionException {
        ObjcmParser.a_started_return retval = new ObjcmParser.a_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_wrapper_return a_selector_wrapper481 =null;

        ObjcmParser.a_encode_wrapper_return a_encode_wrapper482 =null;

        ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper483 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:792:2: ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper )
            int alt125=3;
            switch ( input.LA(1) ) {
            case 179:
                {
                alt125=1;
                }
                break;
            case 170:
                {
                alt125=2;
                }
                break;
            case 177:
                {
                alt125=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;

            }

            switch (alt125) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:792:4: a_selector_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_selector_wrapper_in_a_started4257);
                    a_selector_wrapper481=a_selector_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_selector_wrapper481.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:793:4: a_encode_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_encode_wrapper_in_a_started4262);
                    a_encode_wrapper482=a_encode_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_encode_wrapper482.getTree());

                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:794:4: a_protocol_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_protocol_wrapper_in_a_started4267);
                    a_protocol_wrapper483=a_protocol_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_protocol_wrapper483.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_started"


    public static class typeof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:797:1: typeof : '__typeof__' L_BR ID R_BR ;
    public final ObjcmParser.typeof_return typeof() throws RecognitionException {
        ObjcmParser.typeof_return retval = new ObjcmParser.typeof_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal484=null;
        Token L_BR485=null;
        Token ID486=null;
        Token R_BR487=null;

        Object string_literal484_tree=null;
        Object L_BR485_tree=null;
        Object ID486_tree=null;
        Object R_BR487_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:797:8: ( '__typeof__' L_BR ID R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:797:10: '__typeof__' L_BR ID R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal484=(Token)match(input,185,FOLLOW_185_in_typeof4277); 
            string_literal484_tree = 
            (Object)adaptor.create(string_literal484)
            ;
            adaptor.addChild(root_0, string_literal484_tree);


            L_BR485=(Token)match(input,L_BR,FOLLOW_L_BR_in_typeof4280); 
            L_BR485_tree = 
            (Object)adaptor.create(L_BR485)
            ;
            adaptor.addChild(root_0, L_BR485_tree);


            ID486=(Token)match(input,ID,FOLLOW_ID_in_typeof4283); 
            ID486_tree = 
            (Object)adaptor.create(ID486)
            ;
            adaptor.addChild(root_0, ID486_tree);


            R_BR487=(Token)match(input,R_BR,FOLLOW_R_BR_in_typeof4286); 
            R_BR487_tree = 
            (Object)adaptor.create(R_BR487)
            ;
            adaptor.addChild(root_0, R_BR487_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof"


    public static class a_selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:799:1: a_selector_wrapper : a_selector -> ^( SELECTOR a_selector ) ;
    public final ObjcmParser.a_selector_wrapper_return a_selector_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_wrapper_return retval = new ObjcmParser.a_selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_return a_selector488 =null;


        RewriteRuleSubtreeStream stream_a_selector=new RewriteRuleSubtreeStream(adaptor,"rule a_selector");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:800:2: ( a_selector -> ^( SELECTOR a_selector ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:800:4: a_selector
            {
            pushFollow(FOLLOW_a_selector_in_a_selector_wrapper4297);
            a_selector488=a_selector();

            state._fsp--;

            stream_a_selector.add(a_selector488.getTree());

            // AST REWRITE
            // elements: a_selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 800:15: -> ^( SELECTOR a_selector )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:800:18: ^( SELECTOR a_selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR, "SELECTOR")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_wrapper"


    public static class a_selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:802:1: a_selector : '@selector' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_selector_return a_selector() throws RecognitionException {
        ObjcmParser.a_selector_return retval = new ObjcmParser.a_selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal489=null;
        Token L_BR490=null;
        Token R_BR492=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper491 =null;


        Object string_literal489_tree=null;
        Object L_BR490_tree=null;
        Object R_BR492_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:802:11: ( '@selector' L_BR a_selector_value_wrapper R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:802:13: '@selector' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal489=(Token)match(input,179,FOLLOW_179_in_a_selector4314); 
            string_literal489_tree = 
            (Object)adaptor.create(string_literal489)
            ;
            adaptor.addChild(root_0, string_literal489_tree);


            L_BR490=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_selector4316); 
            L_BR490_tree = 
            (Object)adaptor.create(L_BR490)
            ;
            adaptor.addChild(root_0, L_BR490_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_selector4318);
            a_selector_value_wrapper491=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper491.getTree());

            R_BR492=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_selector4320); 
            R_BR492_tree = 
            (Object)adaptor.create(R_BR492)
            ;
            adaptor.addChild(root_0, R_BR492_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector"


    public static class a_protocol_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:804:1: a_protocol_wrapper : a_protocol -> ^( PROTOCOL a_protocol ) ;
    public final ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper() throws RecognitionException {
        ObjcmParser.a_protocol_wrapper_return retval = new ObjcmParser.a_protocol_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_protocol_return a_protocol493 =null;


        RewriteRuleSubtreeStream stream_a_protocol=new RewriteRuleSubtreeStream(adaptor,"rule a_protocol");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:805:2: ( a_protocol -> ^( PROTOCOL a_protocol ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:805:4: a_protocol
            {
            pushFollow(FOLLOW_a_protocol_in_a_protocol_wrapper4330);
            a_protocol493=a_protocol();

            state._fsp--;

            stream_a_protocol.add(a_protocol493.getTree());

            // AST REWRITE
            // elements: a_protocol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 805:15: -> ^( PROTOCOL a_protocol )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:805:18: ^( PROTOCOL a_protocol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_a_protocol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol_wrapper"


    public static class a_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:807:1: a_protocol : '@protocol' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_protocol_return a_protocol() throws RecognitionException {
        ObjcmParser.a_protocol_return retval = new ObjcmParser.a_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal494=null;
        Token L_BR495=null;
        Token R_BR497=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper496 =null;


        Object string_literal494_tree=null;
        Object L_BR495_tree=null;
        Object R_BR497_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:808:2: ( '@protocol' L_BR a_selector_value_wrapper R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:808:4: '@protocol' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal494=(Token)match(input,177,FOLLOW_177_in_a_protocol4348); 
            string_literal494_tree = 
            (Object)adaptor.create(string_literal494)
            ;
            adaptor.addChild(root_0, string_literal494_tree);


            L_BR495=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_protocol4350); 
            L_BR495_tree = 
            (Object)adaptor.create(L_BR495)
            ;
            adaptor.addChild(root_0, L_BR495_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_protocol4352);
            a_selector_value_wrapper496=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper496.getTree());

            R_BR497=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_protocol4354); 
            R_BR497_tree = 
            (Object)adaptor.create(R_BR497)
            ;
            adaptor.addChild(root_0, R_BR497_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol"


    public static class a_encode_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:810:1: a_encode_wrapper : a_encode -> ^( ENCODE a_encode ) ;
    public final ObjcmParser.a_encode_wrapper_return a_encode_wrapper() throws RecognitionException {
        ObjcmParser.a_encode_wrapper_return retval = new ObjcmParser.a_encode_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_encode_return a_encode498 =null;


        RewriteRuleSubtreeStream stream_a_encode=new RewriteRuleSubtreeStream(adaptor,"rule a_encode");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:811:2: ( a_encode -> ^( ENCODE a_encode ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:811:4: a_encode
            {
            pushFollow(FOLLOW_a_encode_in_a_encode_wrapper4364);
            a_encode498=a_encode();

            state._fsp--;

            stream_a_encode.add(a_encode498.getTree());

            // AST REWRITE
            // elements: a_encode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 811:13: -> ^( ENCODE a_encode )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:811:16: ^( ENCODE a_encode )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENCODE, "ENCODE")
                , root_1);

                adaptor.addChild(root_1, stream_a_encode.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode_wrapper"


    public static class a_encode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:813:1: a_encode : '@encode' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_encode_return a_encode() throws RecognitionException {
        ObjcmParser.a_encode_return retval = new ObjcmParser.a_encode_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal499=null;
        Token L_BR500=null;
        Token R_BR502=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper501 =null;


        Object string_literal499_tree=null;
        Object L_BR500_tree=null;
        Object R_BR502_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:813:9: ( '@encode' L_BR a_selector_value_wrapper R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:813:11: '@encode' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal499=(Token)match(input,170,FOLLOW_170_in_a_encode4380); 
            string_literal499_tree = 
            (Object)adaptor.create(string_literal499)
            ;
            adaptor.addChild(root_0, string_literal499_tree);


            L_BR500=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_encode4382); 
            L_BR500_tree = 
            (Object)adaptor.create(L_BR500)
            ;
            adaptor.addChild(root_0, L_BR500_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_encode4384);
            a_selector_value_wrapper501=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper501.getTree());

            R_BR502=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_encode4386); 
            R_BR502_tree = 
            (Object)adaptor.create(R_BR502)
            ;
            adaptor.addChild(root_0, R_BR502_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode"


    public static class a_selector_value_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:816:1: a_selector_value_wrapper : a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) ;
    public final ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_value_wrapper_return retval = new ObjcmParser.a_selector_value_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_value_return a_selector_value503 =null;


        RewriteRuleSubtreeStream stream_a_selector_value=new RewriteRuleSubtreeStream(adaptor,"rule a_selector_value");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:817:2: ( a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:817:4: a_selector_value
            {
            pushFollow(FOLLOW_a_selector_value_in_a_selector_value_wrapper4397);
            a_selector_value503=a_selector_value();

            state._fsp--;

            stream_a_selector_value.add(a_selector_value503.getTree());

            // AST REWRITE
            // elements: a_selector_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 817:21: -> ^( SELECTOR_VALUE a_selector_value )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:817:24: ^( SELECTOR_VALUE a_selector_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR_VALUE, "SELECTOR_VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value_wrapper"


    public static class a_selector_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:819:1: a_selector_value : sel_id ( COLON ( sel_id COLON )* )? ;
    public final ObjcmParser.a_selector_value_return a_selector_value() throws RecognitionException {
        ObjcmParser.a_selector_value_return retval = new ObjcmParser.a_selector_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON505=null;
        Token COLON507=null;
        ObjcmParser.sel_id_return sel_id504 =null;

        ObjcmParser.sel_id_return sel_id506 =null;


        Object COLON505_tree=null;
        Object COLON507_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:820:2: ( sel_id ( COLON ( sel_id COLON )* )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:820:5: sel_id ( COLON ( sel_id COLON )* )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sel_id_in_a_selector_value4416);
            sel_id504=sel_id();

            state._fsp--;

            adaptor.addChild(root_0, sel_id504.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:820:13: ( COLON ( sel_id COLON )* )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==COLON) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:820:14: COLON ( sel_id COLON )*
                    {
                    COLON505=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4420); 
                    COLON505_tree = 
                    (Object)adaptor.create(COLON505)
                    ;
                    adaptor.addChild(root_0, COLON505_tree);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:820:21: ( sel_id COLON )*
                    loop126:
                    do {
                        int alt126=2;
                        int LA126_0 = input.LA(1);

                        if ( (LA126_0==ID||LA126_0==186||LA126_0==189||LA126_0==200) ) {
                            alt126=1;
                        }


                        switch (alt126) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:820:22: sel_id COLON
                    	    {
                    	    pushFollow(FOLLOW_sel_id_in_a_selector_value4424);
                    	    sel_id506=sel_id();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, sel_id506.getTree());

                    	    COLON507=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4427); 
                    	    COLON507_tree = 
                    	    (Object)adaptor.create(COLON507)
                    	    ;
                    	    adaptor.addChild(root_0, COLON507_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop126;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value"


    public static class sel_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sel_id"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:822:1: sel_id : ( ID | property );
    public final ObjcmParser.sel_id_return sel_id() throws RecognitionException {
        ObjcmParser.sel_id_return retval = new ObjcmParser.sel_id_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID508=null;
        ObjcmParser.property_return property509 =null;


        Object ID508_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:822:8: ( ID | property )
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==ID) ) {
                alt128=1;
            }
            else if ( (LA128_0==186||LA128_0==189||LA128_0==200) ) {
                alt128=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;

            }
            switch (alt128) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:822:10: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID508=(Token)match(input,ID,FOLLOW_ID_in_sel_id4440); 
                    ID508_tree = 
                    (Object)adaptor.create(ID508)
                    ;
                    adaptor.addChild(root_0, ID508_tree);


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:823:4: property
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_property_in_sel_id4445);
                    property509=property();

                    state._fsp--;

                    adaptor.addChild(root_0, property509.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sel_id"


    public static class const_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:826:1: const_expr_wrapper : const_expr -> ^( CONST_EXPR const_expr ) ;
    public final ObjcmParser.const_expr_wrapper_return const_expr_wrapper() throws RecognitionException {
        ObjcmParser.const_expr_wrapper_return retval = new ObjcmParser.const_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.const_expr_return const_expr510 =null;


        RewriteRuleSubtreeStream stream_const_expr=new RewriteRuleSubtreeStream(adaptor,"rule const_expr");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:827:2: ( const_expr -> ^( CONST_EXPR const_expr ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:827:4: const_expr
            {
            pushFollow(FOLLOW_const_expr_in_const_expr_wrapper4457);
            const_expr510=const_expr();

            state._fsp--;

            stream_const_expr.add(const_expr510.getTree());

            // AST REWRITE
            // elements: const_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 827:15: -> ^( CONST_EXPR const_expr )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:827:18: ^( CONST_EXPR const_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONST_EXPR, "CONST_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_const_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr_wrapper"


    public static class const_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:829:1: const_expr : ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt );
    public final ObjcmParser.const_expr_return const_expr() throws RecognitionException {
        ObjcmParser.const_expr_return retval = new ObjcmParser.const_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NUMBER511=null;
        Token STRING_LITERAL512=null;
        Token STRING_LITERAL2513=null;
        Token STRING_LITERAL3514=null;
        ObjcmParser.null_stmt_return null_stmt515 =null;


        Object NUMBER511_tree=null;
        Object STRING_LITERAL512_tree=null;
        Object STRING_LITERAL2513_tree=null;
        Object STRING_LITERAL3514_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:830:2: ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt )
            int alt129=5;
            switch ( input.LA(1) ) {
            case NUMBER:
                {
                alt129=1;
                }
                break;
            case STRING_LITERAL:
                {
                alt129=2;
                }
                break;
            case STRING_LITERAL2:
                {
                alt129=3;
                }
                break;
            case STRING_LITERAL3:
                {
                alt129=4;
                }
                break;
            case 183:
            case 199:
                {
                alt129=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;

            }

            switch (alt129) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:830:5: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER511=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_const_expr4476); 
                    NUMBER511_tree = 
                    (Object)adaptor.create(NUMBER511)
                    ;
                    adaptor.addChild(root_0, NUMBER511_tree);


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:830:14: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL512=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_const_expr4480); 
                    STRING_LITERAL512_tree = 
                    (Object)adaptor.create(STRING_LITERAL512)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL512_tree);


                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:830:31: STRING_LITERAL2
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL2513=(Token)match(input,STRING_LITERAL2,FOLLOW_STRING_LITERAL2_in_const_expr4484); 
                    STRING_LITERAL2513_tree = 
                    (Object)adaptor.create(STRING_LITERAL2513)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL2513_tree);


                    }
                    break;
                case 4 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:830:49: STRING_LITERAL3
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL3514=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_const_expr4488); 
                    STRING_LITERAL3514_tree = 
                    (Object)adaptor.create(STRING_LITERAL3514)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL3514_tree);


                    }
                    break;
                case 5 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:830:67: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_const_expr4492);
                    null_stmt515=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt515.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class string_literal3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_literal3"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:832:1: string_literal3 : STRING_LITERAL3 ;
    public final ObjcmParser.string_literal3_return string_literal3() throws RecognitionException {
        ObjcmParser.string_literal3_return retval = new ObjcmParser.string_literal3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL3516=null;

        Object STRING_LITERAL3516_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:833:2: ( STRING_LITERAL3 )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:833:4: STRING_LITERAL3
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL3516=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_string_literal34502); 
            STRING_LITERAL3516_tree = 
            (Object)adaptor.create(STRING_LITERAL3516)
            ;
            adaptor.addChild(root_0, STRING_LITERAL3516_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_literal3"


    public static class method_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_brackets"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:835:1: method_brackets : L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.method_brackets_return method_brackets() throws RecognitionException {
        ObjcmParser.method_brackets_return retval = new ObjcmParser.method_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR517=null;
        Token COMMA519=null;
        Token R_BR521=null;
        ObjcmParser.expression_return expression518 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp520 =null;


        Object L_BR517_tree=null;
        Object COMMA519_tree=null;
        Object R_BR521_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:836:2: ( L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:836:4: L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR517=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_brackets4512); 
            L_BR517_tree = 
            (Object)adaptor.create(L_BR517)
            ;
            adaptor.addChild(root_0, L_BR517_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:836:10: ( expression ( COMMA classical_expr_wrp )* )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==ASTERISK||LA131_0==ID||LA131_0==L_AND||LA131_0==L_BR||LA131_0==L_KBR||LA131_0==L_MINUS||LA131_0==L_MINUS_MINUS||LA131_0==L_NOT||LA131_0==L_PLUS||LA131_0==L_PLUS_PLUS||LA131_0==L_TILDA||LA131_0==NUMBER||LA131_0==SIZEOF||(LA131_0 >= STRING_LITERAL && LA131_0 <= STRING_LITERAL3)||LA131_0==170||LA131_0==177||LA131_0==179||LA131_0==183||LA131_0==186||LA131_0==189||LA131_0==197||(LA131_0 >= 199 && LA131_0 <= 200)||LA131_0==205) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:836:11: expression ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_expression_in_method_brackets4516);
                    expression518=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression518.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:836:23: ( COMMA classical_expr_wrp )*
                    loop130:
                    do {
                        int alt130=2;
                        int LA130_0 = input.LA(1);

                        if ( (LA130_0==COMMA) ) {
                            alt130=1;
                        }


                        switch (alt130) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:836:24: COMMA classical_expr_wrp
                    	    {
                    	    COMMA519=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_brackets4520); 
                    	    COMMA519_tree = 
                    	    (Object)adaptor.create(COMMA519)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA519_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_method_brackets4523);
                    	    classical_expr_wrp520=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp520.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop130;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR521=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_brackets4529); 
            R_BR521_tree = 
            (Object)adaptor.create(R_BR521)
            ;
            adaptor.addChild(root_0, R_BR521_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_brackets"


    public static class func_pointer1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer1"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:838:1: func_pointer1 : type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? ;
    public final ObjcmParser.func_pointer1_return func_pointer1() throws RecognitionException {
        ObjcmParser.func_pointer1_return retval = new ObjcmParser.func_pointer1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK523=null;
        Token L_BR524=null;
        Token ASTERISK525=null;
        Token R_BR527=null;
        ObjcmParser.type_internal_return type_internal522 =null;

        ObjcmParser.type_internal_return type_internal526 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params528 =null;


        Object ASTERISK523_tree=null;
        Object L_BR524_tree=null;
        Object ASTERISK525_tree=null;
        Object R_BR527_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:839:2: ( type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:839:4: type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_func_pointer14539);
            type_internal522=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal522.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:839:19: ( ASTERISK )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==ASTERISK) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:839:19: ASTERISK
                    {
                    ASTERISK523=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14542); 
                    ASTERISK523_tree = 
                    (Object)adaptor.create(ASTERISK523)
                    ;
                    adaptor.addChild(root_0, ASTERISK523_tree);


                    }
                    break;

            }


            L_BR524=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer14545); 
            L_BR524_tree = 
            (Object)adaptor.create(L_BR524)
            ;
            adaptor.addChild(root_0, L_BR524_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:839:34: ( ASTERISK )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==ASTERISK) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:839:34: ASTERISK
                    {
                    ASTERISK525=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14547); 
                    ASTERISK525_tree = 
                    (Object)adaptor.create(ASTERISK525)
                    ;
                    adaptor.addChild(root_0, ASTERISK525_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_func_pointer14550);
            type_internal526=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal526.getTree());

            R_BR527=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer14553); 
            R_BR527_tree = 
            (Object)adaptor.create(R_BR527)
            ;
            adaptor.addChild(root_0, R_BR527_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:839:65: ( func_pointer_params )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==L_BR) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:839:65: func_pointer_params
                    {
                    pushFollow(FOLLOW_func_pointer_params_in_func_pointer14556);
                    func_pointer_params528=func_pointer_params();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer_params528.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer1"


    public static class func_pointer2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:842:1: func_pointer2 : L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR ;
    public final ObjcmParser.func_pointer2_return func_pointer2() throws RecognitionException {
        ObjcmParser.func_pointer2_return retval = new ObjcmParser.func_pointer2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR529=null;
        Token L_BR531=null;
        Token ASTERISK532=null;
        Token R_BR533=null;
        Token R_BR535=null;
        ObjcmParser.type_internal_return type_internal530 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params534 =null;


        Object L_BR529_tree=null;
        Object L_BR531_tree=null;
        Object ASTERISK532_tree=null;
        Object R_BR533_tree=null;
        Object R_BR535_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:843:2: ( L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:843:4: L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR529=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24569); 
            L_BR529_tree = 
            (Object)adaptor.create(L_BR529)
            ;
            adaptor.addChild(root_0, L_BR529_tree);


            pushFollow(FOLLOW_type_internal_in_func_pointer24572);
            type_internal530=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal530.getTree());

            L_BR531=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24574); 
            L_BR531_tree = 
            (Object)adaptor.create(L_BR531)
            ;
            adaptor.addChild(root_0, L_BR531_tree);


            ASTERISK532=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer24577); 
            ASTERISK532_tree = 
            (Object)adaptor.create(ASTERISK532)
            ;
            adaptor.addChild(root_0, ASTERISK532_tree);


            R_BR533=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24580); 
            R_BR533_tree = 
            (Object)adaptor.create(R_BR533)
            ;
            adaptor.addChild(root_0, R_BR533_tree);


            pushFollow(FOLLOW_func_pointer_params_in_func_pointer24583);
            func_pointer_params534=func_pointer_params();

            state._fsp--;

            adaptor.addChild(root_0, func_pointer_params534.getTree());

            R_BR535=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24586); 
            R_BR535_tree = 
            (Object)adaptor.create(R_BR535)
            ;
            adaptor.addChild(root_0, R_BR535_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer2"


    public static class func_pointer_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_params"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:846:1: func_pointer_params : L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR ;
    public final ObjcmParser.func_pointer_params_return func_pointer_params() throws RecognitionException {
        ObjcmParser.func_pointer_params_return retval = new ObjcmParser.func_pointer_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR536=null;
        Token ID537=null;
        Token ASTERISK538=null;
        Token COMMA539=null;
        Token ID540=null;
        Token ASTERISK541=null;
        Token R_BR542=null;

        Object L_BR536_tree=null;
        Object ID537_tree=null;
        Object ASTERISK538_tree=null;
        Object COMMA539_tree=null;
        Object ID540_tree=null;
        Object ASTERISK541_tree=null;
        Object R_BR542_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:847:2: ( L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:847:4: L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR536=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer_params4599); 
            L_BR536_tree = 
            (Object)adaptor.create(L_BR536)
            ;
            adaptor.addChild(root_0, L_BR536_tree);


            ID537=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4602); 
            ID537_tree = 
            (Object)adaptor.create(ID537)
            ;
            adaptor.addChild(root_0, ID537_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:847:14: ( ASTERISK )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==ASTERISK) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:847:14: ASTERISK
            	    {
            	    ASTERISK538=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4605); 
            	    ASTERISK538_tree = 
            	    (Object)adaptor.create(ASTERISK538)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK538_tree);


            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:847:24: ( COMMA ID ( ASTERISK )* )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==COMMA) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:847:25: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA539=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_pointer_params4609); 
            	    COMMA539_tree = 
            	    (Object)adaptor.create(COMMA539)
            	    ;
            	    adaptor.addChild(root_0, COMMA539_tree);


            	    ID540=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4612); 
            	    ID540_tree = 
            	    (Object)adaptor.create(ID540)
            	    ;
            	    adaptor.addChild(root_0, ID540_tree);


            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:847:36: ( ASTERISK )*
            	    loop136:
            	    do {
            	        int alt136=2;
            	        int LA136_0 = input.LA(1);

            	        if ( (LA136_0==ASTERISK) ) {
            	            alt136=1;
            	        }


            	        switch (alt136) {
            	    	case 1 :
            	    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:847:36: ASTERISK
            	    	    {
            	    	    ASTERISK541=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4615); 
            	    	    ASTERISK541_tree = 
            	    	    (Object)adaptor.create(ASTERISK541)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK541_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop136;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);


            R_BR542=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer_params4620); 
            R_BR542_tree = 
            (Object)adaptor.create(R_BR542)
            ;
            adaptor.addChild(root_0, R_BR542_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_params"


    public static class method_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_start"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:849:1: method_start : ID ( method_brackets )? ;
    public final ObjcmParser.method_start_return method_start() throws RecognitionException {
        ObjcmParser.method_start_return retval = new ObjcmParser.method_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID543=null;
        ObjcmParser.method_brackets_return method_brackets544 =null;


        Object ID543_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:850:2: ( ID ( method_brackets )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:850:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID543=(Token)match(input,ID,FOLLOW_ID_in_method_start4631); 
            ID543_tree = 
            (Object)adaptor.create(ID543)
            ;
            adaptor.addChild(root_0, ID543_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:850:7: ( method_brackets )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==L_BR) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:850:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_method_start4633);
                    method_brackets544=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets544.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_start"


    public static class in_q_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_q_brackets"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:852:1: in_q_brackets : L_FBR q_brackets_source R_FBR ;
    public final ObjcmParser.in_q_brackets_return in_q_brackets() throws RecognitionException {
        ObjcmParser.in_q_brackets_return retval = new ObjcmParser.in_q_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR545=null;
        Token R_FBR547=null;
        ObjcmParser.q_brackets_source_return q_brackets_source546 =null;


        Object L_FBR545_tree=null;
        Object R_FBR547_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:853:2: ( L_FBR q_brackets_source R_FBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:853:4: L_FBR q_brackets_source R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR545=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_in_q_brackets4644); 
            L_FBR545_tree = 
            (Object)adaptor.create(L_FBR545)
            ;
            adaptor.addChild(root_0, L_FBR545_tree);


            pushFollow(FOLLOW_q_brackets_source_in_in_q_brackets4647);
            q_brackets_source546=q_brackets_source();

            state._fsp--;

            adaptor.addChild(root_0, q_brackets_source546.getTree());

            R_FBR547=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_in_q_brackets4649); 
            R_FBR547_tree = 
            (Object)adaptor.create(R_FBR547)
            ;
            adaptor.addChild(root_0, R_FBR547_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_q_brackets"


    public static class q_brackets_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_brackets_source"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:856:1: q_brackets_source : ( q_source | q_br_source );
    public final ObjcmParser.q_brackets_source_return q_brackets_source() throws RecognitionException {
        ObjcmParser.q_brackets_source_return retval = new ObjcmParser.q_brackets_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.q_source_return q_source548 =null;

        ObjcmParser.q_br_source_return q_br_source549 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:857:2: ( q_source | q_br_source )
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==ASTERISK||LA139_0==ID||LA139_0==L_AND||LA139_0==L_BR||LA139_0==L_KBR||LA139_0==L_MINUS||LA139_0==L_MINUS_MINUS||LA139_0==L_NOT||LA139_0==L_PLUS||LA139_0==L_PLUS_PLUS||LA139_0==L_TILDA||LA139_0==NUMBER||LA139_0==R_FBR||LA139_0==SIZEOF||(LA139_0 >= STRING_LITERAL && LA139_0 <= STRING_LITERAL3)||LA139_0==170||LA139_0==177||LA139_0==179||LA139_0==183||LA139_0==186||LA139_0==189||LA139_0==197||(LA139_0 >= 199 && LA139_0 <= 200)||LA139_0==205) ) {
                alt139=1;
            }
            else if ( (LA139_0==L_FBR) ) {
                alt139=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;

            }
            switch (alt139) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:857:4: q_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_source_in_q_brackets_source4661);
                    q_source548=q_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_source548.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:858:4: q_br_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_br_source_in_q_brackets_source4666);
                    q_br_source549=q_br_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_br_source549.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_brackets_source"


    public static class q_br_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_br_source"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:861:1: q_br_source : in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? ;
    public final ObjcmParser.q_br_source_return q_br_source() throws RecognitionException {
        ObjcmParser.q_br_source_return retval = new ObjcmParser.q_br_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA551=null;
        Token COMMA553=null;
        ObjcmParser.in_q_brackets_return in_q_brackets550 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets552 =null;


        Object COMMA551_tree=null;
        Object COMMA553_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:862:2: ( in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:862:4: in_q_brackets ( COMMA in_q_brackets )* ( COMMA )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_in_q_brackets_in_q_br_source4679);
            in_q_brackets550=in_q_brackets();

            state._fsp--;

            adaptor.addChild(root_0, in_q_brackets550.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:862:19: ( COMMA in_q_brackets )*
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==COMMA) ) {
                    int LA140_1 = input.LA(2);

                    if ( (LA140_1==L_FBR) ) {
                        alt140=1;
                    }


                }


                switch (alt140) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:862:20: COMMA in_q_brackets
            	    {
            	    COMMA551=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4683); 
            	    COMMA551_tree = 
            	    (Object)adaptor.create(COMMA551)
            	    ;
            	    adaptor.addChild(root_0, COMMA551_tree);


            	    pushFollow(FOLLOW_in_q_brackets_in_q_br_source4686);
            	    in_q_brackets552=in_q_brackets();

            	    state._fsp--;

            	    adaptor.addChild(root_0, in_q_brackets552.getTree());

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:862:43: ( COMMA )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==COMMA) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:862:43: COMMA
                    {
                    COMMA553=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4690); 
                    COMMA553_tree = 
                    (Object)adaptor.create(COMMA553)
                    ;
                    adaptor.addChild(root_0, COMMA553_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_br_source"


    public static class q_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_source"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:865:1: q_source : ( expression ( COMMA expression )* )? ;
    public final ObjcmParser.q_source_return q_source() throws RecognitionException {
        ObjcmParser.q_source_return retval = new ObjcmParser.q_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA555=null;
        ObjcmParser.expression_return expression554 =null;

        ObjcmParser.expression_return expression556 =null;


        Object COMMA555_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:865:9: ( ( expression ( COMMA expression )* )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:865:11: ( expression ( COMMA expression )* )?
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:865:11: ( expression ( COMMA expression )* )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==ASTERISK||LA143_0==ID||LA143_0==L_AND||LA143_0==L_BR||LA143_0==L_KBR||LA143_0==L_MINUS||LA143_0==L_MINUS_MINUS||LA143_0==L_NOT||LA143_0==L_PLUS||LA143_0==L_PLUS_PLUS||LA143_0==L_TILDA||LA143_0==NUMBER||LA143_0==SIZEOF||(LA143_0 >= STRING_LITERAL && LA143_0 <= STRING_LITERAL3)||LA143_0==170||LA143_0==177||LA143_0==179||LA143_0==183||LA143_0==186||LA143_0==189||LA143_0==197||(LA143_0 >= 199 && LA143_0 <= 200)||LA143_0==205) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:865:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_q_source4702);
                    expression554=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression554.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:865:24: ( COMMA expression )*
                    loop142:
                    do {
                        int alt142=2;
                        int LA142_0 = input.LA(1);

                        if ( (LA142_0==COMMA) ) {
                            alt142=1;
                        }


                        switch (alt142) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:865:25: COMMA expression
                    	    {
                    	    COMMA555=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_source4706); 
                    	    COMMA555_tree = 
                    	    (Object)adaptor.create(COMMA555)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA555_tree);


                    	    pushFollow(FOLLOW_expression_in_q_source4709);
                    	    expression556=expression();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, expression556.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop142;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_source"


    public static class simple_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_method_call"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:868:1: simple_method_call : ID ( method_brackets )? ;
    public final ObjcmParser.simple_method_call_return simple_method_call() throws RecognitionException {
        ObjcmParser.simple_method_call_return retval = new ObjcmParser.simple_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID557=null;
        ObjcmParser.method_brackets_return method_brackets558 =null;


        Object ID557_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:869:2: ( ID ( method_brackets )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:869:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID557=(Token)match(input,ID,FOLLOW_ID_in_simple_method_call4726); 
            ID557_tree = 
            (Object)adaptor.create(ID557)
            ;
            adaptor.addChild(root_0, ID557_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:869:7: ( method_brackets )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==L_BR) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:869:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_simple_method_call4728);
                    method_brackets558=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets558.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_method_call"


    public static class index_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_brackets"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:871:1: index_brackets : L_KBR classical_expr_wrp R_KBR ;
    public final ObjcmParser.index_brackets_return index_brackets() throws RecognitionException {
        ObjcmParser.index_brackets_return retval = new ObjcmParser.index_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR559=null;
        Token R_KBR561=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp560 =null;


        Object L_KBR559_tree=null;
        Object R_KBR561_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:872:2: ( L_KBR classical_expr_wrp R_KBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:872:4: L_KBR classical_expr_wrp R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR559=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index_brackets4744); 
            L_KBR559_tree = 
            (Object)adaptor.create(L_KBR559)
            ;
            adaptor.addChild(root_0, L_KBR559_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_index_brackets4747);
            classical_expr_wrp560=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp560.getTree());

            R_KBR561=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index_brackets4749); 
            R_KBR561_tree = 
            (Object)adaptor.create(R_KBR561)
            ;
            adaptor.addChild(root_0, R_KBR561_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_brackets"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:879:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcmParser.interface_declaration_wrapper_return retval = new ObjcmParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_declaration_return interface_declaration562 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:880:2: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:880:4: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper4763);
            interface_declaration562=interface_declaration();

            state._fsp--;

            stream_interface_declaration.add(interface_declaration562.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 880:26: -> ^( INTERFACE interface_declaration )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:880:29: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:882:1: interface_declaration : '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods | interface_fields )* '@end' ;
    public final ObjcmParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcmParser.interface_declaration_return retval = new ObjcmParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal563=null;
        Token string_literal570=null;
        ObjcmParser.name_return name564 =null;

        ObjcmParser.interface_category_return interface_category565 =null;

        ObjcmParser.super_class_return super_class566 =null;

        ObjcmParser.annotated_block_return annotated_block567 =null;

        ObjcmParser.interface_methods_return interface_methods568 =null;

        ObjcmParser.interface_fields_return interface_fields569 =null;


        Object string_literal563_tree=null;
        Object string_literal570_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:883:2: ( '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods | interface_fields )* '@end' )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:883:4: '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods | interface_fields )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal563=(Token)match(input,174,FOLLOW_174_in_interface_declaration4781); 
            string_literal563_tree = 
            (Object)adaptor.create(string_literal563)
            ;
            adaptor.addChild(root_0, string_literal563_tree);


            pushFollow(FOLLOW_name_in_interface_declaration4784);
            name564=name();

            state._fsp--;

            adaptor.addChild(root_0, name564.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:883:24: ( interface_category )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==L_BR) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:883:24: interface_category
                    {
                    pushFollow(FOLLOW_interface_category_in_interface_declaration4787);
                    interface_category565=interface_category();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_category565.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:883:44: ( super_class )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==COLON) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:883:45: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_interface_declaration4791);
                    super_class566=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class566.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:884:3: ( annotated_block | interface_methods | interface_fields )*
            loop147:
            do {
                int alt147=4;
                switch ( input.LA(1) ) {
                case L_FBR:
                    {
                    alt147=1;
                    }
                    break;
                case ENUM_PREFIX:
                case L_MINUS:
                case L_PLUS:
                    {
                    alt147=2;
                    }
                    break;
                case ID:
                case VOID:
                case 176:
                case 205:
                    {
                    alt147=3;
                    }
                    break;

                }

                switch (alt147) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:884:4: annotated_block
            	    {
            	    pushFollow(FOLLOW_annotated_block_in_interface_declaration4798);
            	    annotated_block567=annotated_block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block567.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:884:22: interface_methods
            	    {
            	    pushFollow(FOLLOW_interface_methods_in_interface_declaration4802);
            	    interface_methods568=interface_methods();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_methods568.getTree());

            	    }
            	    break;
            	case 3 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:884:42: interface_fields
            	    {
            	    pushFollow(FOLLOW_interface_fields_in_interface_declaration4806);
            	    interface_fields569=interface_fields();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_fields569.getTree());

            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);


            string_literal570=(Token)match(input,171,FOLLOW_171_in_interface_declaration4815); 
            string_literal570_tree = 
            (Object)adaptor.create(string_literal570)
            ;
            adaptor.addChild(root_0, string_literal570_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class annotated_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:888:1: annotated_block : L_FBR ( annotated_block_internal )* R_FBR ;
    public final ObjcmParser.annotated_block_return annotated_block() throws RecognitionException {
        ObjcmParser.annotated_block_return retval = new ObjcmParser.annotated_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR571=null;
        Token R_FBR573=null;
        ObjcmParser.annotated_block_internal_return annotated_block_internal572 =null;


        Object L_FBR571_tree=null;
        Object R_FBR573_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:889:2: ( L_FBR ( annotated_block_internal )* R_FBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:889:4: L_FBR ( annotated_block_internal )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR571=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_annotated_block4826); 
            L_FBR571_tree = 
            (Object)adaptor.create(L_FBR571)
            ;
            adaptor.addChild(root_0, L_FBR571_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:890:3: ( annotated_block_internal )*
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);

                if ( (LA148_0==ID||LA148_0==VOID||LA148_0==175||LA148_0==178||(LA148_0 >= 204 && LA148_0 <= 205)) ) {
                    alt148=1;
                }


                switch (alt148) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:890:3: annotated_block_internal
            	    {
            	    pushFollow(FOLLOW_annotated_block_internal_in_annotated_block4831);
            	    annotated_block_internal572=annotated_block_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block_internal572.getTree());

            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);


            R_FBR573=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_annotated_block4836); 
            R_FBR573_tree = 
            (Object)adaptor.create(R_FBR573)
            ;
            adaptor.addChild(root_0, R_FBR573_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block"


    public static class annotated_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:894:1: annotated_block_internal : ( block_annotation | public_block_internal );
    public final ObjcmParser.annotated_block_internal_return annotated_block_internal() throws RecognitionException {
        ObjcmParser.annotated_block_internal_return retval = new ObjcmParser.annotated_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_annotation_return block_annotation574 =null;

        ObjcmParser.public_block_internal_return public_block_internal575 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:895:2: ( block_annotation | public_block_internal )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==175||LA149_0==178) ) {
                alt149=1;
            }
            else if ( (LA149_0==ID||LA149_0==VOID||(LA149_0 >= 204 && LA149_0 <= 205)) ) {
                alt149=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;

            }
            switch (alt149) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:895:4: block_annotation
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_annotation_in_annotated_block_internal4849);
                    block_annotation574=block_annotation();

                    state._fsp--;

                    adaptor.addChild(root_0, block_annotation574.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:896:5: public_block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_public_block_internal_in_annotated_block_internal4856);
                    public_block_internal575=public_block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, public_block_internal575.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block_internal"


    public static class block_annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_annotation"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:899:1: block_annotation : ( '@public' | '@private' );
    public final ObjcmParser.block_annotation_return block_annotation() throws RecognitionException {
        ObjcmParser.block_annotation_return retval = new ObjcmParser.block_annotation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set576=null;

        Object set576_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:900:2: ( '@public' | '@private' )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set576=(Token)input.LT(1);

            if ( input.LA(1)==175||input.LA(1)==178 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set576)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_annotation"


    public static class public_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "public_block_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:904:1: public_block_internal : ( simple_field_declaration | union_declaration );
    public final ObjcmParser.public_block_internal_return public_block_internal() throws RecognitionException {
        ObjcmParser.public_block_internal_return retval = new ObjcmParser.public_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_field_declaration_return simple_field_declaration577 =null;

        ObjcmParser.union_declaration_return union_declaration578 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:905:2: ( simple_field_declaration | union_declaration )
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==ID||LA150_0==VOID||LA150_0==205) ) {
                alt150=1;
            }
            else if ( (LA150_0==204) ) {
                alt150=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;

            }
            switch (alt150) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:905:4: simple_field_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_field_declaration_in_public_block_internal4891);
                    simple_field_declaration577=simple_field_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, simple_field_declaration577.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:906:4: union_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_union_declaration_in_public_block_internal4896);
                    union_declaration578=union_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, union_declaration578.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "public_block_internal"


    public static class simple_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_field_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:909:1: simple_field_declaration : field_type name SEMICOLON ;
    public final ObjcmParser.simple_field_declaration_return simple_field_declaration() throws RecognitionException {
        ObjcmParser.simple_field_declaration_return retval = new ObjcmParser.simple_field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON581=null;
        ObjcmParser.field_type_return field_type579 =null;

        ObjcmParser.name_return name580 =null;


        Object SEMICOLON581_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:910:2: ( field_type name SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:910:4: field_type name SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_simple_field_declaration4908);
            field_type579=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type579.getTree());

            pushFollow(FOLLOW_name_in_simple_field_declaration4910);
            name580=name();

            state._fsp--;

            adaptor.addChild(root_0, name580.getTree());

            SEMICOLON581=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_field_declaration4913); 
            SEMICOLON581_tree = 
            (Object)adaptor.create(SEMICOLON581)
            ;
            adaptor.addChild(root_0, SEMICOLON581_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_field_declaration"


    public static class union_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:913:1: union_declaration : 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON ;
    public final ObjcmParser.union_declaration_return union_declaration() throws RecognitionException {
        ObjcmParser.union_declaration_return retval = new ObjcmParser.union_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal582=null;
        Token L_FBR583=null;
        Token R_FBR585=null;
        Token ID586=null;
        Token SEMICOLON587=null;
        ObjcmParser.simple_field_declaration_return simple_field_declaration584 =null;


        Object string_literal582_tree=null;
        Object L_FBR583_tree=null;
        Object R_FBR585_tree=null;
        Object ID586_tree=null;
        Object SEMICOLON587_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:914:2: ( 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:914:4: 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal582=(Token)match(input,204,FOLLOW_204_in_union_declaration4926); 
            string_literal582_tree = 
            (Object)adaptor.create(string_literal582)
            ;
            adaptor.addChild(root_0, string_literal582_tree);


            L_FBR583=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_union_declaration4929); 
            L_FBR583_tree = 
            (Object)adaptor.create(L_FBR583)
            ;
            adaptor.addChild(root_0, L_FBR583_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:915:4: ( simple_field_declaration )+
            int cnt151=0;
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);

                if ( (LA151_0==ID||LA151_0==VOID||LA151_0==205) ) {
                    alt151=1;
                }


                switch (alt151) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:915:4: simple_field_declaration
            	    {
            	    pushFollow(FOLLOW_simple_field_declaration_in_union_declaration4935);
            	    simple_field_declaration584=simple_field_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_field_declaration584.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt151 >= 1 ) break loop151;
                        EarlyExitException eee =
                            new EarlyExitException(151, input);
                        throw eee;
                }
                cnt151++;
            } while (true);


            R_FBR585=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_union_declaration4940); 
            R_FBR585_tree = 
            (Object)adaptor.create(R_FBR585)
            ;
            adaptor.addChild(root_0, R_FBR585_tree);


            ID586=(Token)match(input,ID,FOLLOW_ID_in_union_declaration4943); 
            ID586_tree = 
            (Object)adaptor.create(ID586)
            ;
            adaptor.addChild(root_0, ID586_tree);


            SEMICOLON587=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_union_declaration4946); 
            SEMICOLON587_tree = 
            (Object)adaptor.create(SEMICOLON587)
            ;
            adaptor.addChild(root_0, SEMICOLON587_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_declaration"


    public static class super_class_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "super_class"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:919:1: super_class : COLON ID -> ^( SUPER_CLASS ID ) ;
    public final ObjcmParser.super_class_return super_class() throws RecognitionException {
        ObjcmParser.super_class_return retval = new ObjcmParser.super_class_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON588=null;
        Token ID589=null;

        Object COLON588_tree=null;
        Object ID589_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:920:2: ( COLON ID -> ^( SUPER_CLASS ID ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:920:4: COLON ID
            {
            COLON588=(Token)match(input,COLON,FOLLOW_COLON_in_super_class4960);  
            stream_COLON.add(COLON588);


            ID589=(Token)match(input,ID,FOLLOW_ID_in_super_class4963);  
            stream_ID.add(ID589);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 920:15: -> ^( SUPER_CLASS ID )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:920:18: ^( SUPER_CLASS ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPER_CLASS, "SUPER_CLASS")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "super_class"


    public static class interface_category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_category"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:922:1: interface_category : L_BR ( ID )? R_BR -> ^( CATEGORY L_BR ( ID )? R_BR ) ;
    public final ObjcmParser.interface_category_return interface_category() throws RecognitionException {
        ObjcmParser.interface_category_return retval = new ObjcmParser.interface_category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR590=null;
        Token ID591=null;
        Token R_BR592=null;

        Object L_BR590_tree=null;
        Object ID591_tree=null;
        Object R_BR592_tree=null;
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:923:2: ( L_BR ( ID )? R_BR -> ^( CATEGORY L_BR ( ID )? R_BR ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:923:4: L_BR ( ID )? R_BR
            {
            L_BR590=(Token)match(input,L_BR,FOLLOW_L_BR_in_interface_category4983);  
            stream_L_BR.add(L_BR590);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:923:10: ( ID )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==ID) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:923:10: ID
                    {
                    ID591=(Token)match(input,ID,FOLLOW_ID_in_interface_category4986);  
                    stream_ID.add(ID591);


                    }
                    break;

            }


            R_BR592=(Token)match(input,R_BR,FOLLOW_R_BR_in_interface_category4990);  
            stream_R_BR.add(R_BR592);


            // AST REWRITE
            // elements: R_BR, ID, L_BR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 923:20: -> ^( CATEGORY L_BR ( ID )? R_BR )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:923:23: ^( CATEGORY L_BR ( ID )? R_BR )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_L_BR.nextNode()
                );

                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:923:40: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                adaptor.addChild(root_1, 
                stream_R_BR.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_category"


    public static class interface_fields_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_fields"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:925:1: interface_fields : ( interface_field_wrapper )+ ;
    public final ObjcmParser.interface_fields_return interface_fields() throws RecognitionException {
        ObjcmParser.interface_fields_return retval = new ObjcmParser.interface_fields_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_field_wrapper_return interface_field_wrapper593 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:926:2: ( ( interface_field_wrapper )+ )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:926:4: ( interface_field_wrapper )+
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:926:4: ( interface_field_wrapper )+
            int cnt153=0;
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==176) ) {
                    alt153=1;
                }
                else if ( (LA153_0==ID||LA153_0==VOID||LA153_0==205) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:926:4: interface_field_wrapper
            	    {
            	    pushFollow(FOLLOW_interface_field_wrapper_in_interface_fields5019);
            	    interface_field_wrapper593=interface_field_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_field_wrapper593.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt153 >= 1 ) break loop153;
                        EarlyExitException eee =
                            new EarlyExitException(153, input);
                        throw eee;
                }
                cnt153++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_fields"


    public static class interface_field_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_field_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:928:1: interface_field_wrapper : interface_field -> ^( FIELD interface_field ) ;
    public final ObjcmParser.interface_field_wrapper_return interface_field_wrapper() throws RecognitionException {
        ObjcmParser.interface_field_wrapper_return retval = new ObjcmParser.interface_field_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_field_return interface_field594 =null;


        RewriteRuleSubtreeStream stream_interface_field=new RewriteRuleSubtreeStream(adaptor,"rule interface_field");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:929:2: ( interface_field -> ^( FIELD interface_field ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:929:4: interface_field
            {
            pushFollow(FOLLOW_interface_field_in_interface_field_wrapper5030);
            interface_field594=interface_field();

            state._fsp--;

            stream_interface_field.add(interface_field594.getTree());

            // AST REWRITE
            // elements: interface_field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 929:20: -> ^( FIELD interface_field )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:929:23: ^( FIELD interface_field )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_interface_field.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_field_wrapper"


    public static class interface_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_field"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:931:1: interface_field : ( property_prefix )? interface_field_declaration ;
    public final ObjcmParser.interface_field_return interface_field() throws RecognitionException {
        ObjcmParser.interface_field_return retval = new ObjcmParser.interface_field_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.property_prefix_return property_prefix595 =null;

        ObjcmParser.interface_field_declaration_return interface_field_declaration596 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:932:2: ( ( property_prefix )? interface_field_declaration )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:932:4: ( property_prefix )? interface_field_declaration
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:932:4: ( property_prefix )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==176) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:932:4: property_prefix
                    {
                    pushFollow(FOLLOW_property_prefix_in_interface_field5049);
                    property_prefix595=property_prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, property_prefix595.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_interface_field_declaration_in_interface_field5052);
            interface_field_declaration596=interface_field_declaration();

            state._fsp--;

            adaptor.addChild(root_0, interface_field_declaration596.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_field"


    public static class interface_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_field_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:934:1: interface_field_declaration : field_type name SEMICOLON ;
    public final ObjcmParser.interface_field_declaration_return interface_field_declaration() throws RecognitionException {
        ObjcmParser.interface_field_declaration_return retval = new ObjcmParser.interface_field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON599=null;
        ObjcmParser.field_type_return field_type597 =null;

        ObjcmParser.name_return name598 =null;


        Object SEMICOLON599_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:935:2: ( field_type name SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:935:4: field_type name SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_interface_field_declaration5063);
            field_type597=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type597.getTree());

            pushFollow(FOLLOW_name_in_interface_field_declaration5065);
            name598=name();

            state._fsp--;

            adaptor.addChild(root_0, name598.getTree());

            SEMICOLON599=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_field_declaration5067); 
            SEMICOLON599_tree = 
            (Object)adaptor.create(SEMICOLON599)
            ;
            adaptor.addChild(root_0, SEMICOLON599_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_field_declaration"


    public static class property_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_prefix"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:937:1: property_prefix : '@property' L_BR property ( COMMA property )* R_BR ;
    public final ObjcmParser.property_prefix_return property_prefix() throws RecognitionException {
        ObjcmParser.property_prefix_return retval = new ObjcmParser.property_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal600=null;
        Token L_BR601=null;
        Token COMMA603=null;
        Token R_BR605=null;
        ObjcmParser.property_return property602 =null;

        ObjcmParser.property_return property604 =null;


        Object string_literal600_tree=null;
        Object L_BR601_tree=null;
        Object COMMA603_tree=null;
        Object R_BR605_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:938:2: ( '@property' L_BR property ( COMMA property )* R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:938:4: '@property' L_BR property ( COMMA property )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal600=(Token)match(input,176,FOLLOW_176_in_property_prefix5078); 
            string_literal600_tree = 
            (Object)adaptor.create(string_literal600)
            ;
            adaptor.addChild(root_0, string_literal600_tree);


            L_BR601=(Token)match(input,L_BR,FOLLOW_L_BR_in_property_prefix5080); 
            L_BR601_tree = 
            (Object)adaptor.create(L_BR601)
            ;
            adaptor.addChild(root_0, L_BR601_tree);


            pushFollow(FOLLOW_property_in_property_prefix5082);
            property602=property();

            state._fsp--;

            adaptor.addChild(root_0, property602.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:938:30: ( COMMA property )*
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);

                if ( (LA155_0==COMMA) ) {
                    alt155=1;
                }


                switch (alt155) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:938:31: COMMA property
            	    {
            	    COMMA603=(Token)match(input,COMMA,FOLLOW_COMMA_in_property_prefix5085); 
            	    COMMA603_tree = 
            	    (Object)adaptor.create(COMMA603)
            	    ;
            	    adaptor.addChild(root_0, COMMA603_tree);


            	    pushFollow(FOLLOW_property_in_property_prefix5087);
            	    property604=property();

            	    state._fsp--;

            	    adaptor.addChild(root_0, property604.getTree());

            	    }
            	    break;

            	default :
            	    break loop155;
                }
            } while (true);


            R_BR605=(Token)match(input,R_BR,FOLLOW_R_BR_in_property_prefix5091); 
            R_BR605_tree = 
            (Object)adaptor.create(R_BR605)
            ;
            adaptor.addChild(root_0, R_BR605_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_prefix"


    public static class property_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:940:1: property : ( 'readwrite' | 'assign' | 'copy' );
    public final ObjcmParser.property_return property() throws RecognitionException {
        ObjcmParser.property_return retval = new ObjcmParser.property_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set606=null;

        Object set606_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:940:9: ( 'readwrite' | 'assign' | 'copy' )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set606=(Token)input.LT(1);

            if ( input.LA(1)==186||input.LA(1)==189||input.LA(1)==200 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set606)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property"


    public static class interface_methods_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_methods"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:945:1: interface_methods : ( enum_declaration | interface_method )+ ;
    public final ObjcmParser.interface_methods_return interface_methods() throws RecognitionException {
        ObjcmParser.interface_methods_return retval = new ObjcmParser.interface_methods_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.enum_declaration_return enum_declaration607 =null;

        ObjcmParser.interface_method_return interface_method608 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:946:2: ( ( enum_declaration | interface_method )+ )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:946:4: ( enum_declaration | interface_method )+
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:946:4: ( enum_declaration | interface_method )+
            int cnt156=0;
            loop156:
            do {
                int alt156=3;
                int LA156_0 = input.LA(1);

                if ( (LA156_0==ENUM_PREFIX) ) {
                    alt156=1;
                }
                else if ( (LA156_0==L_MINUS||LA156_0==L_PLUS) ) {
                    alt156=2;
                }


                switch (alt156) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:946:5: enum_declaration
            	    {
            	    pushFollow(FOLLOW_enum_declaration_in_interface_methods5124);
            	    enum_declaration607=enum_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, enum_declaration607.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:946:24: interface_method
            	    {
            	    pushFollow(FOLLOW_interface_method_in_interface_methods5128);
            	    interface_method608=interface_method();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_method608.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt156 >= 1 ) break loop156;
                        EarlyExitException eee =
                            new EarlyExitException(156, input);
                        throw eee;
                }
                cnt156++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_methods"


    public static class interface_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_method"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:948:1: interface_method : method_header -> ^( METHOD method_header ) ;
    public final ObjcmParser.interface_method_return interface_method() throws RecognitionException {
        ObjcmParser.interface_method_return retval = new ObjcmParser.interface_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_header_return method_header609 =null;


        RewriteRuleSubtreeStream stream_method_header=new RewriteRuleSubtreeStream(adaptor,"rule method_header");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:949:2: ( method_header -> ^( METHOD method_header ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:949:4: method_header
            {
            pushFollow(FOLLOW_method_header_in_interface_method5142);
            method_header609=method_header();

            state._fsp--;

            stream_method_header.add(method_header609.getTree());

            // AST REWRITE
            // elements: method_header
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 949:18: -> ^( METHOD method_header )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:949:21: ^( METHOD method_header )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_method_header.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_method"


    public static class method_header_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:951:1: method_header : method_header_body ( SEMICOLON )? ;
    public final ObjcmParser.method_header_return method_header() throws RecognitionException {
        ObjcmParser.method_header_return retval = new ObjcmParser.method_header_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON611=null;
        ObjcmParser.method_header_body_return method_header_body610 =null;


        Object SEMICOLON611_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:952:2: ( method_header_body ( SEMICOLON )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:952:4: method_header_body ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_method_header5161);
            method_header_body610=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body610.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:952:23: ( SEMICOLON )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==SEMICOLON) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:952:23: SEMICOLON
                    {
                    SEMICOLON611=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_method_header5163); 
                    SEMICOLON611_tree = 
                    (Object)adaptor.create(SEMICOLON611)
                    ;
                    adaptor.addChild(root_0, SEMICOLON611_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header"


    public static class method_header_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:954:1: method_header_body : method_modifier_wrapper ( method_type )? name ( method_params )? ( va_args_wrapper )? ;
    public final ObjcmParser.method_header_body_return method_header_body() throws RecognitionException {
        ObjcmParser.method_header_body_return retval = new ObjcmParser.method_header_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper612 =null;

        ObjcmParser.method_type_return method_type613 =null;

        ObjcmParser.name_return name614 =null;

        ObjcmParser.method_params_return method_params615 =null;

        ObjcmParser.va_args_wrapper_return va_args_wrapper616 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:955:2: ( method_modifier_wrapper ( method_type )? name ( method_params )? ( va_args_wrapper )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:955:4: method_modifier_wrapper ( method_type )? name ( method_params )? ( va_args_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_header_body5173);
            method_modifier_wrapper612=method_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_modifier_wrapper612.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:955:29: ( method_type )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==L_BR) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:955:29: method_type
                    {
                    pushFollow(FOLLOW_method_type_in_method_header_body5176);
                    method_type613=method_type();

                    state._fsp--;

                    adaptor.addChild(root_0, method_type613.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_name_in_method_header_body5180);
            name614=name();

            state._fsp--;

            adaptor.addChild(root_0, name614.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:955:49: ( method_params )?
            int alt159=2;
            alt159 = dfa159.predict(input);
            switch (alt159) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:955:49: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_header_body5183);
                    method_params615=method_params();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params615.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:955:64: ( va_args_wrapper )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==COMMA) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:955:64: va_args_wrapper
                    {
                    pushFollow(FOLLOW_va_args_wrapper_in_method_header_body5186);
                    va_args_wrapper616=va_args_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, va_args_wrapper616.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body"


    public static class va_args_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:957:1: va_args_wrapper : va_args -> ^( VA_ARGS va_args ) ;
    public final ObjcmParser.va_args_wrapper_return va_args_wrapper() throws RecognitionException {
        ObjcmParser.va_args_wrapper_return retval = new ObjcmParser.va_args_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.va_args_return va_args617 =null;


        RewriteRuleSubtreeStream stream_va_args=new RewriteRuleSubtreeStream(adaptor,"rule va_args");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:958:2: ( va_args -> ^( VA_ARGS va_args ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:958:4: va_args
            {
            pushFollow(FOLLOW_va_args_in_va_args_wrapper5196);
            va_args617=va_args();

            state._fsp--;

            stream_va_args.add(va_args617.getTree());

            // AST REWRITE
            // elements: va_args
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 958:12: -> ^( VA_ARGS va_args )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:958:15: ^( VA_ARGS va_args )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VA_ARGS, "VA_ARGS")
                , root_1);

                adaptor.addChild(root_1, stream_va_args.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args_wrapper"


    public static class va_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:960:1: va_args : COMMA '...' ( SEMICOLON )? ;
    public final ObjcmParser.va_args_return va_args() throws RecognitionException {
        ObjcmParser.va_args_return retval = new ObjcmParser.va_args_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA618=null;
        Token string_literal619=null;
        Token SEMICOLON620=null;

        Object COMMA618_tree=null;
        Object string_literal619_tree=null;
        Object SEMICOLON620_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:960:9: ( COMMA '...' ( SEMICOLON )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:960:11: COMMA '...' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            COMMA618=(Token)match(input,COMMA,FOLLOW_COMMA_in_va_args5213); 
            COMMA618_tree = 
            (Object)adaptor.create(COMMA618)
            ;
            adaptor.addChild(root_0, COMMA618_tree);


            string_literal619=(Token)match(input,168,FOLLOW_168_in_va_args5216); 
            string_literal619_tree = 
            (Object)adaptor.create(string_literal619)
            ;
            adaptor.addChild(root_0, string_literal619_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:960:25: ( SEMICOLON )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==SEMICOLON) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:960:25: SEMICOLON
                    {
                    SEMICOLON620=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_va_args5219); 
                    SEMICOLON620_tree = 
                    (Object)adaptor.create(SEMICOLON620)
                    ;
                    adaptor.addChild(root_0, SEMICOLON620_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args"


    public static class method_header_body2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:962:1: method_header_body2 : method_type name ( method_params2 )? ;
    public final ObjcmParser.method_header_body2_return method_header_body2() throws RecognitionException {
        ObjcmParser.method_header_body2_return retval = new ObjcmParser.method_header_body2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_type_return method_type621 =null;

        ObjcmParser.name_return name622 =null;

        ObjcmParser.method_params2_return method_params2623 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:963:2: ( method_type name ( method_params2 )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:963:4: method_type name ( method_params2 )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_type_in_method_header_body25230);
            method_type621=method_type();

            state._fsp--;

            adaptor.addChild(root_0, method_type621.getTree());

            pushFollow(FOLLOW_name_in_method_header_body25232);
            name622=name();

            state._fsp--;

            adaptor.addChild(root_0, name622.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:963:22: ( method_params2 )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==L_BR) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:963:22: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_method_header_body25235);
                    method_params2623=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params2623.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body2"


    public static class method_header_body3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body3"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:965:1: method_header_body3 : method_params2 ;
    public final ObjcmParser.method_header_body3_return method_header_body3() throws RecognitionException {
        ObjcmParser.method_header_body3_return retval = new ObjcmParser.method_header_body3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2624 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:966:2: ( method_params2 )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:966:4: method_params2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_header_body35245);
            method_params2624=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2624.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body3"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:968:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcmParser.method_modifier_wrapper_return retval = new ObjcmParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_return method_modifier625 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:969:2: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:969:4: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper5254);
            method_modifier625=method_modifier();

            state._fsp--;

            stream_method_modifier.add(method_modifier625.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 969:20: -> ^( MODIFIER method_modifier )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:969:23: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:971:1: method_modifier : ( '+' | '-' );
    public final ObjcmParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcmParser.method_modifier_return retval = new ObjcmParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set626=null;

        Object set626_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:972:2: ( '+' | '-' )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set626=(Token)input.LT(1);

            if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set626)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_type"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:974:1: method_type : method_type_internal -> ^( TYPE method_type_internal ) ;
    public final ObjcmParser.method_type_return method_type() throws RecognitionException {
        ObjcmParser.method_type_return retval = new ObjcmParser.method_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_type_internal_return method_type_internal627 =null;


        RewriteRuleSubtreeStream stream_method_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule method_type_internal");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:975:2: ( method_type_internal -> ^( TYPE method_type_internal ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:975:4: method_type_internal
            {
            pushFollow(FOLLOW_method_type_internal_in_method_type5285);
            method_type_internal627=method_type_internal();

            state._fsp--;

            stream_method_type_internal.add(method_type_internal627.getTree());

            // AST REWRITE
            // elements: method_type_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 975:25: -> ^( TYPE method_type_internal )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:975:28: ^( TYPE method_type_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE, "TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_method_type_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_type"


    public static class method_type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_type_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:977:1: method_type_internal : ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? ( ASTERISK )* R_BR -> ^( L_BR ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? R_BR ) );
    public final ObjcmParser.method_type_internal_return method_type_internal() throws RecognitionException {
        ObjcmParser.method_type_internal_return retval = new ObjcmParser.method_type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR628=null;
        Token STRUCT_PREFIX629=null;
        Token ASTERISK632=null;
        Token R_BR633=null;
        Token L_BR634=null;
        Token CONST_PREFIX635=null;
        Token ID637=null;
        Token L_KBR638=null;
        Token R_KBR639=null;
        Token ASTERISK641=null;
        Token R_BR642=null;
        ObjcmParser.type_internal_return type_internal630 =null;

        ObjcmParser.generic_return generic631 =null;

        ObjcmParser.known_types_return known_types636 =null;

        ObjcmParser.generic_return generic640 =null;


        Object L_BR628_tree=null;
        Object STRUCT_PREFIX629_tree=null;
        Object ASTERISK632_tree=null;
        Object R_BR633_tree=null;
        Object L_BR634_tree=null;
        Object CONST_PREFIX635_tree=null;
        Object ID637_tree=null;
        Object L_KBR638_tree=null;
        Object R_KBR639_tree=null;
        Object ASTERISK641_tree=null;
        Object R_BR642_tree=null;
        RewriteRuleTokenStream stream_L_KBR=new RewriteRuleTokenStream(adaptor,"token L_KBR");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_R_KBR=new RewriteRuleTokenStream(adaptor,"token R_KBR");
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleSubtreeStream stream_known_types=new RewriteRuleSubtreeStream(adaptor,"rule known_types");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:2: ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? ( ASTERISK )* R_BR -> ^( L_BR ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? R_BR ) )
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==L_BR) ) {
                switch ( input.LA(2) ) {
                case STRUCT_PREFIX:
                    {
                    alt172=1;
                    }
                    break;
                case VOID:
                case 205:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        int LA172_10 = input.LA(4);

                        if ( (LA172_10==R_KBR) ) {
                            alt172=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 172, 10, input);

                            throw nvae;

                        }
                        }
                        break;
                    case L_LESS:
                        {
                        int LA172_11 = input.LA(4);

                        if ( (LA172_11==ID) ) {
                            alt172=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 172, 11, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA172_12 = input.LA(4);

                        if ( (LA172_12==R_BR) ) {
                            alt172=1;
                        }
                        else if ( (LA172_12==ASTERISK) ) {
                            alt172=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 172, 12, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt172=1;
                        }
                        break;
                    case ID:
                        {
                        alt172=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 172, 3, input);

                        throw nvae;

                    }

                    }
                    break;
                case ASTERISK:
                case CONST_PREFIX:
                case L_KBR:
                case L_LESS:
                case R_BR:
                    {
                    alt172=2;
                    }
                    break;
                case ID:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        int LA172_15 = input.LA(4);

                        if ( (LA172_15==R_KBR) ) {
                            alt172=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 172, 15, input);

                            throw nvae;

                        }
                        }
                        break;
                    case L_LESS:
                        {
                        int LA172_16 = input.LA(4);

                        if ( (LA172_16==ID) ) {
                            alt172=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 172, 16, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA172_17 = input.LA(4);

                        if ( (LA172_17==R_BR) ) {
                            alt172=1;
                        }
                        else if ( (LA172_17==ASTERISK) ) {
                            alt172=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 172, 17, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt172=1;
                        }
                        break;
                    case ID:
                        {
                        alt172=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 172, 5, input);

                        throw nvae;

                    }

                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 172, 1, input);

                    throw nvae;

                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;

            }
            switch (alt172) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:4: L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR628=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type_internal5303); 
                    L_BR628_tree = 
                    (Object)adaptor.create(L_BR628)
                    ;
                    adaptor.addChild(root_0, L_BR628_tree);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:9: ( STRUCT_PREFIX )?
                    int alt163=2;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==STRUCT_PREFIX) ) {
                        alt163=1;
                    }
                    switch (alt163) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:9: STRUCT_PREFIX
                            {
                            STRUCT_PREFIX629=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_type_internal5305); 
                            STRUCT_PREFIX629_tree = 
                            (Object)adaptor.create(STRUCT_PREFIX629)
                            ;
                            adaptor.addChild(root_0, STRUCT_PREFIX629_tree);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_internal_in_method_type_internal5308);
                    type_internal630=type_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, type_internal630.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:38: ( generic )?
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==L_LESS) ) {
                        alt164=1;
                    }
                    switch (alt164) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:38: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type_internal5310);
                            generic631=generic();

                            state._fsp--;

                            adaptor.addChild(root_0, generic631.getTree());

                            }
                            break;

                    }


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:47: ( ASTERISK )*
                    loop165:
                    do {
                        int alt165=2;
                        int LA165_0 = input.LA(1);

                        if ( (LA165_0==ASTERISK) ) {
                            alt165=1;
                        }


                        switch (alt165) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:47: ASTERISK
                    	    {
                    	    ASTERISK632=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type_internal5313); 
                    	    ASTERISK632_tree = 
                    	    (Object)adaptor.create(ASTERISK632)
                    	    ;
                    	    adaptor.addChild(root_0, ASTERISK632_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop165;
                        }
                    } while (true);


                    R_BR633=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type_internal5316); 
                    R_BR633_tree = 
                    (Object)adaptor.create(R_BR633)
                    ;
                    adaptor.addChild(root_0, R_BR633_tree);


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:5: L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR634=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type_internal5322);  
                    stream_L_BR.add(L_BR634);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:10: ( CONST_PREFIX )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==CONST_PREFIX) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:10: CONST_PREFIX
                            {
                            CONST_PREFIX635=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_type_internal5324);  
                            stream_CONST_PREFIX.add(CONST_PREFIX635);


                            }
                            break;

                    }


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:24: ( known_types )?
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==VOID||LA167_0==205) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:24: known_types
                            {
                            pushFollow(FOLLOW_known_types_in_method_type_internal5327);
                            known_types636=known_types();

                            state._fsp--;

                            stream_known_types.add(known_types636.getTree());

                            }
                            break;

                    }


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:37: ( ID )*
                    loop168:
                    do {
                        int alt168=2;
                        int LA168_0 = input.LA(1);

                        if ( (LA168_0==ID) ) {
                            alt168=1;
                        }


                        switch (alt168) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:37: ID
                    	    {
                    	    ID637=(Token)match(input,ID,FOLLOW_ID_in_method_type_internal5330);  
                    	    stream_ID.add(ID637);


                    	    }
                    	    break;

                    	default :
                    	    break loop168;
                        }
                    } while (true);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:41: ( L_KBR R_KBR )*
                    loop169:
                    do {
                        int alt169=2;
                        int LA169_0 = input.LA(1);

                        if ( (LA169_0==L_KBR) ) {
                            alt169=1;
                        }


                        switch (alt169) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:42: L_KBR R_KBR
                    	    {
                    	    L_KBR638=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_method_type_internal5334);  
                    	    stream_L_KBR.add(L_KBR638);


                    	    R_KBR639=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_method_type_internal5336);  
                    	    stream_R_KBR.add(R_KBR639);


                    	    }
                    	    break;

                    	default :
                    	    break loop169;
                        }
                    } while (true);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:56: ( generic )?
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==L_LESS) ) {
                        alt170=1;
                    }
                    switch (alt170) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:56: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type_internal5340);
                            generic640=generic();

                            state._fsp--;

                            stream_generic.add(generic640.getTree());

                            }
                            break;

                    }


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:65: ( ASTERISK )*
                    loop171:
                    do {
                        int alt171=2;
                        int LA171_0 = input.LA(1);

                        if ( (LA171_0==ASTERISK) ) {
                            alt171=1;
                        }


                        switch (alt171) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:65: ASTERISK
                    	    {
                    	    ASTERISK641=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type_internal5343);  
                    	    stream_ASTERISK.add(ASTERISK641);


                    	    }
                    	    break;

                    	default :
                    	    break loop171;
                        }
                    } while (true);


                    R_BR642=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type_internal5346);  
                    stream_R_BR.add(R_BR642);


                    // AST REWRITE
                    // elements: ID, known_types, generic, R_KBR, R_BR, L_BR, L_KBR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 979:80: -> ^( L_BR ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? R_BR )
                    {
                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:83: ^( L_BR ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? R_BR )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_L_BR.nextNode()
                        , root_1);

                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:91: ( known_types )?
                        if ( stream_known_types.hasNext() ) {
                            adaptor.addChild(root_1, stream_known_types.nextTree());

                        }
                        stream_known_types.reset();

                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:104: ( ID )*
                        while ( stream_ID.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_ID.nextNode()
                            );

                        }
                        stream_ID.reset();

                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:108: ( L_KBR R_KBR )*
                        while ( stream_R_KBR.hasNext()||stream_L_KBR.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_L_KBR.nextNode()
                            );

                            adaptor.addChild(root_1, 
                            stream_R_KBR.nextNode()
                            );

                        }
                        stream_R_KBR.reset();
                        stream_L_KBR.reset();

                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:979:123: ( generic )?
                        if ( stream_generic.hasNext() ) {
                            adaptor.addChild(root_1, stream_generic.nextTree());

                        }
                        stream_generic.reset();

                        adaptor.addChild(root_1, 
                        stream_R_BR.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_type_internal"


    public static class type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:982:1: type_internal : type_internal1 ( L_KBR R_KBR )? ;
    public final ObjcmParser.type_internal_return type_internal() throws RecognitionException {
        ObjcmParser.type_internal_return retval = new ObjcmParser.type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR644=null;
        Token R_KBR645=null;
        ObjcmParser.type_internal1_return type_internal1643 =null;


        Object L_KBR644_tree=null;
        Object R_KBR645_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:983:2: ( type_internal1 ( L_KBR R_KBR )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:983:4: type_internal1 ( L_KBR R_KBR )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal1_in_type_internal5387);
            type_internal1643=type_internal1();

            state._fsp--;

            adaptor.addChild(root_0, type_internal1643.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:983:19: ( L_KBR R_KBR )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==L_KBR) ) {
                int LA173_1 = input.LA(2);

                if ( (LA173_1==R_KBR) ) {
                    alt173=1;
                }
            }
            switch (alt173) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:983:20: L_KBR R_KBR
                    {
                    L_KBR644=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_type_internal5390); 
                    L_KBR644_tree = 
                    (Object)adaptor.create(L_KBR644)
                    ;
                    adaptor.addChild(root_0, L_KBR644_tree);


                    R_KBR645=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_type_internal5393); 
                    R_KBR645_tree = 
                    (Object)adaptor.create(R_KBR645)
                    ;
                    adaptor.addChild(root_0, R_KBR645_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal"


    public static class type_internal1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal1"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:986:1: type_internal1 : ( VOID | ID | 'unsigned' );
    public final ObjcmParser.type_internal1_return type_internal1() throws RecognitionException {
        ObjcmParser.type_internal1_return retval = new ObjcmParser.type_internal1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set646=null;

        Object set646_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:987:2: ( VOID | ID | 'unsigned' )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set646=(Token)input.LT(1);

            if ( input.LA(1)==ID||input.LA(1)==VOID||input.LA(1)==205 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set646)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal1"


    public static class generic_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:992:1: generic : L_LESS generic_internal_wrapper L_MORE ;
    public final ObjcmParser.generic_return generic() throws RecognitionException {
        ObjcmParser.generic_return retval = new ObjcmParser.generic_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_LESS647=null;
        Token L_MORE649=null;
        ObjcmParser.generic_internal_wrapper_return generic_internal_wrapper648 =null;


        Object L_LESS647_tree=null;
        Object L_MORE649_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:992:8: ( L_LESS generic_internal_wrapper L_MORE )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:992:11: L_LESS generic_internal_wrapper L_MORE
            {
            root_0 = (Object)adaptor.nil();


            L_LESS647=(Token)match(input,L_LESS,FOLLOW_L_LESS_in_generic5432); 
            L_LESS647_tree = 
            (Object)adaptor.create(L_LESS647)
            ;
            adaptor.addChild(root_0, L_LESS647_tree);


            pushFollow(FOLLOW_generic_internal_wrapper_in_generic5434);
            generic_internal_wrapper648=generic_internal_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, generic_internal_wrapper648.getTree());

            L_MORE649=(Token)match(input,L_MORE,FOLLOW_L_MORE_in_generic5436); 
            L_MORE649_tree = 
            (Object)adaptor.create(L_MORE649)
            ;
            adaptor.addChild(root_0, L_MORE649_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic"


    public static class generic_internal_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic_internal_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:994:1: generic_internal_wrapper : generic_internal -> ^( GENERIC generic_internal ) ;
    public final ObjcmParser.generic_internal_wrapper_return generic_internal_wrapper() throws RecognitionException {
        ObjcmParser.generic_internal_wrapper_return retval = new ObjcmParser.generic_internal_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.generic_internal_return generic_internal650 =null;


        RewriteRuleSubtreeStream stream_generic_internal=new RewriteRuleSubtreeStream(adaptor,"rule generic_internal");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:995:2: ( generic_internal -> ^( GENERIC generic_internal ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:995:4: generic_internal
            {
            pushFollow(FOLLOW_generic_internal_in_generic_internal_wrapper5446);
            generic_internal650=generic_internal();

            state._fsp--;

            stream_generic_internal.add(generic_internal650.getTree());

            // AST REWRITE
            // elements: generic_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 995:21: -> ^( GENERIC generic_internal )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:995:24: ^( GENERIC generic_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GENERIC, "GENERIC")
                , root_1);

                adaptor.addChild(root_1, stream_generic_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic_internal_wrapper"


    public static class generic_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:997:1: generic_internal : ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* ;
    public final ObjcmParser.generic_internal_return generic_internal() throws RecognitionException {
        ObjcmParser.generic_internal_return retval = new ObjcmParser.generic_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID651=null;
        Token ASTERISK652=null;
        Token COMMA653=null;
        Token ID654=null;
        Token ASTERISK655=null;

        Object ID651_tree=null;
        Object ASTERISK652_tree=null;
        Object COMMA653_tree=null;
        Object ID654_tree=null;
        Object ASTERISK655_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:998:2: ( ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:998:5: ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )*
            {
            root_0 = (Object)adaptor.nil();


            ID651=(Token)match(input,ID,FOLLOW_ID_in_generic_internal5464); 
            ID651_tree = 
            (Object)adaptor.create(ID651)
            ;
            adaptor.addChild(root_0, ID651_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:998:8: ( ASTERISK )*
            loop174:
            do {
                int alt174=2;
                int LA174_0 = input.LA(1);

                if ( (LA174_0==ASTERISK) ) {
                    alt174=1;
                }


                switch (alt174) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:998:8: ASTERISK
            	    {
            	    ASTERISK652=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal5466); 
            	    ASTERISK652_tree = 
            	    (Object)adaptor.create(ASTERISK652)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK652_tree);


            	    }
            	    break;

            	default :
            	    break loop174;
                }
            } while (true);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:998:18: ( COMMA ID ( ASTERISK )* )*
            loop176:
            do {
                int alt176=2;
                int LA176_0 = input.LA(1);

                if ( (LA176_0==COMMA) ) {
                    alt176=1;
                }


                switch (alt176) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:998:19: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA653=(Token)match(input,COMMA,FOLLOW_COMMA_in_generic_internal5470); 
            	    COMMA653_tree = 
            	    (Object)adaptor.create(COMMA653)
            	    ;
            	    adaptor.addChild(root_0, COMMA653_tree);


            	    ID654=(Token)match(input,ID,FOLLOW_ID_in_generic_internal5473); 
            	    ID654_tree = 
            	    (Object)adaptor.create(ID654)
            	    ;
            	    adaptor.addChild(root_0, ID654_tree);


            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:998:30: ( ASTERISK )*
            	    loop175:
            	    do {
            	        int alt175=2;
            	        int LA175_0 = input.LA(1);

            	        if ( (LA175_0==ASTERISK) ) {
            	            alt175=1;
            	        }


            	        switch (alt175) {
            	    	case 1 :
            	    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:998:30: ASTERISK
            	    	    {
            	    	    ASTERISK655=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal5476); 
            	    	    ASTERISK655_tree = 
            	    	    (Object)adaptor.create(ASTERISK655)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK655_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop175;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop176;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic_internal"


    public static class method_params2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1000:1: method_params2 : L_BR ( method_param_wrapper2 ( COMMA method_param_wrapper2 )* )? R_BR ;
    public final ObjcmParser.method_params2_return method_params2() throws RecognitionException {
        ObjcmParser.method_params2_return retval = new ObjcmParser.method_params2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR656=null;
        Token COMMA658=null;
        Token R_BR660=null;
        ObjcmParser.method_param_wrapper2_return method_param_wrapper2657 =null;

        ObjcmParser.method_param_wrapper2_return method_param_wrapper2659 =null;


        Object L_BR656_tree=null;
        Object COMMA658_tree=null;
        Object R_BR660_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1001:2: ( L_BR ( method_param_wrapper2 ( COMMA method_param_wrapper2 )* )? R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1001:4: L_BR ( method_param_wrapper2 ( COMMA method_param_wrapper2 )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR656=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_params25488); 
            L_BR656_tree = 
            (Object)adaptor.create(L_BR656)
            ;
            adaptor.addChild(root_0, L_BR656_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1001:10: ( method_param_wrapper2 ( COMMA method_param_wrapper2 )* )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==CONST_PREFIX||LA178_0==ENUM_PREFIX||LA178_0==ID||LA178_0==STRUCT_PREFIX||LA178_0==VOID||LA178_0==205) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1001:11: method_param_wrapper2 ( COMMA method_param_wrapper2 )*
                    {
                    pushFollow(FOLLOW_method_param_wrapper2_in_method_params25492);
                    method_param_wrapper2657=method_param_wrapper2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_param_wrapper2657.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1001:33: ( COMMA method_param_wrapper2 )*
                    loop177:
                    do {
                        int alt177=2;
                        int LA177_0 = input.LA(1);

                        if ( (LA177_0==COMMA) ) {
                            alt177=1;
                        }


                        switch (alt177) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1001:34: COMMA method_param_wrapper2
                    	    {
                    	    COMMA658=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_params25495); 
                    	    COMMA658_tree = 
                    	    (Object)adaptor.create(COMMA658)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA658_tree);


                    	    pushFollow(FOLLOW_method_param_wrapper2_in_method_params25497);
                    	    method_param_wrapper2659=method_param_wrapper2();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, method_param_wrapper2659.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop177;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR660=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_params25503); 
            R_BR660_tree = 
            (Object)adaptor.create(R_BR660)
            ;
            adaptor.addChild(root_0, R_BR660_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params2"


    public static class method_param_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_wrapper2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1004:1: method_param_wrapper2 : method_param2 -> ^( PARAM method_param2 ) ;
    public final ObjcmParser.method_param_wrapper2_return method_param_wrapper2() throws RecognitionException {
        ObjcmParser.method_param_wrapper2_return retval = new ObjcmParser.method_param_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param2_return method_param2661 =null;


        RewriteRuleSubtreeStream stream_method_param2=new RewriteRuleSubtreeStream(adaptor,"rule method_param2");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1005:2: ( method_param2 -> ^( PARAM method_param2 ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1005:4: method_param2
            {
            pushFollow(FOLLOW_method_param2_in_method_param_wrapper25514);
            method_param2661=method_param2();

            state._fsp--;

            stream_method_param2.add(method_param2661.getTree());

            // AST REWRITE
            // elements: method_param2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1005:18: -> ^( PARAM method_param2 )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1005:21: ^( PARAM method_param2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM, "PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_method_param2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_wrapper2"


    public static class method_param2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1007:1: method_param2 : ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( index_wrapper )? ;
    public final ObjcmParser.method_param2_return method_param2() throws RecognitionException {
        ObjcmParser.method_param2_return retval = new ObjcmParser.method_param2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX662=null;
        Token ENUM_PREFIX663=null;
        Token STRUCT_PREFIX664=null;
        Token string_literal665=null;
        ObjcmParser.field_type_return field_type666 =null;

        ObjcmParser.name_return name667 =null;

        ObjcmParser.index_wrapper_return index_wrapper668 =null;


        Object CONST_PREFIX662_tree=null;
        Object ENUM_PREFIX663_tree=null;
        Object STRUCT_PREFIX664_tree=null;
        Object string_literal665_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1008:2: ( ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( index_wrapper )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1008:4: ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( index_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1008:4: ( CONST_PREFIX )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==CONST_PREFIX) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1008:4: CONST_PREFIX
                    {
                    CONST_PREFIX662=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_param25532); 
                    CONST_PREFIX662_tree = 
                    (Object)adaptor.create(CONST_PREFIX662)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX662_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1008:18: ( ENUM_PREFIX )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==ENUM_PREFIX) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1008:18: ENUM_PREFIX
                    {
                    ENUM_PREFIX663=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_method_param25535); 
                    ENUM_PREFIX663_tree = 
                    (Object)adaptor.create(ENUM_PREFIX663)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX663_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1008:31: ( STRUCT_PREFIX )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==STRUCT_PREFIX) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1008:31: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX664=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_param25538); 
                    STRUCT_PREFIX664_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX664)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX664_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1008:46: ( 'unsigned' )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==205) ) {
                int LA182_1 = input.LA(2);

                if ( (LA182_1==ID||LA182_1==VOID||LA182_1==205) ) {
                    alt182=1;
                }
            }
            switch (alt182) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1008:46: 'unsigned'
                    {
                    string_literal665=(Token)match(input,205,FOLLOW_205_in_method_param25541); 
                    string_literal665_tree = 
                    (Object)adaptor.create(string_literal665)
                    ;
                    adaptor.addChild(root_0, string_literal665_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_method_param25544);
            field_type666=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type666.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1008:69: ( name )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==ID||LA183_0==186||LA183_0==189||LA183_0==197||LA183_0==200) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1008:69: name
                    {
                    pushFollow(FOLLOW_name_in_method_param25546);
                    name667=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name667.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1008:75: ( index_wrapper )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==L_KBR) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1008:75: index_wrapper
                    {
                    pushFollow(FOLLOW_index_wrapper_in_method_param25549);
                    index_wrapper668=index_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, index_wrapper668.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param2"


    public static class indexed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexed"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1010:1: indexed : L_KBR ( NUMBER )? R_KBR ;
    public final ObjcmParser.indexed_return indexed() throws RecognitionException {
        ObjcmParser.indexed_return retval = new ObjcmParser.indexed_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR669=null;
        Token NUMBER670=null;
        Token R_KBR671=null;

        Object L_KBR669_tree=null;
        Object NUMBER670_tree=null;
        Object R_KBR671_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1010:9: ( L_KBR ( NUMBER )? R_KBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1010:11: L_KBR ( NUMBER )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR669=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_indexed5559); 
            L_KBR669_tree = 
            (Object)adaptor.create(L_KBR669)
            ;
            adaptor.addChild(root_0, L_KBR669_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1010:17: ( NUMBER )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==NUMBER) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1010:17: NUMBER
                    {
                    NUMBER670=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_indexed5561); 
                    NUMBER670_tree = 
                    (Object)adaptor.create(NUMBER670)
                    ;
                    adaptor.addChild(root_0, NUMBER670_tree);


                    }
                    break;

            }


            R_KBR671=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_indexed5564); 
            R_KBR671_tree = 
            (Object)adaptor.create(R_KBR671)
            ;
            adaptor.addChild(root_0, R_KBR671_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexed"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1012:1: method_params : ( method_param_wrapper )+ ;
    public final ObjcmParser.method_params_return method_params() throws RecognitionException {
        ObjcmParser.method_params_return retval = new ObjcmParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param_wrapper_return method_param_wrapper672 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1013:2: ( ( method_param_wrapper )+ )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1013:4: ( method_param_wrapper )+
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1013:4: ( method_param_wrapper )+
            int cnt186=0;
            loop186:
            do {
                int alt186=2;
                alt186 = dfa186.predict(input);
                switch (alt186) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1013:4: method_param_wrapper
            	    {
            	    pushFollow(FOLLOW_method_param_wrapper_in_method_params5574);
            	    method_param_wrapper672=method_param_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_param_wrapper672.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt186 >= 1 ) break loop186;
                        EarlyExitException eee =
                            new EarlyExitException(186, input);
                        throw eee;
                }
                cnt186++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1015:1: method_param_wrapper : method_param -> ^( PARAM method_param ) ;
    public final ObjcmParser.method_param_wrapper_return method_param_wrapper() throws RecognitionException {
        ObjcmParser.method_param_wrapper_return retval = new ObjcmParser.method_param_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param_return method_param673 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1016:2: ( method_param -> ^( PARAM method_param ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1016:4: method_param
            {
            pushFollow(FOLLOW_method_param_in_method_param_wrapper5586);
            method_param673=method_param();

            state._fsp--;

            stream_method_param.add(method_param673.getTree());

            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1016:17: -> ^( PARAM method_param )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1016:20: ^( PARAM method_param )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM, "PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_method_param.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_wrapper"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1018:1: method_param : ( ( prefix )? | COLON ) ( method_type )? name ;
    public final ObjcmParser.method_param_return method_param() throws RecognitionException {
        ObjcmParser.method_param_return retval = new ObjcmParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON675=null;
        ObjcmParser.prefix_return prefix674 =null;

        ObjcmParser.method_type_return method_type676 =null;

        ObjcmParser.name_return name677 =null;


        Object COLON675_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1019:2: ( ( ( prefix )? | COLON ) ( method_type )? name )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1019:4: ( ( prefix )? | COLON ) ( method_type )? name
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1019:4: ( ( prefix )? | COLON )
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==ID||LA188_0==L_BR||LA188_0==186||LA188_0==189||LA188_0==197||LA188_0==200) ) {
                alt188=1;
            }
            else if ( (LA188_0==COLON) ) {
                alt188=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;

            }
            switch (alt188) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1019:5: ( prefix )?
                    {
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1019:5: ( prefix )?
                    int alt187=2;
                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==ID) ) {
                        int LA187_1 = input.LA(2);

                        if ( (LA187_1==COLON) ) {
                            alt187=1;
                        }
                    }
                    switch (alt187) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1019:5: prefix
                            {
                            pushFollow(FOLLOW_prefix_in_method_param5606);
                            prefix674=prefix();

                            state._fsp--;

                            adaptor.addChild(root_0, prefix674.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1019:15: COLON
                    {
                    COLON675=(Token)match(input,COLON,FOLLOW_COLON_in_method_param5611); 
                    COLON675_tree = 
                    (Object)adaptor.create(COLON675)
                    ;
                    adaptor.addChild(root_0, COLON675_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1019:22: ( method_type )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==L_BR) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1019:22: method_type
                    {
                    pushFollow(FOLLOW_method_type_in_method_param5614);
                    method_type676=method_type();

                    state._fsp--;

                    adaptor.addChild(root_0, method_type676.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_name_in_method_param5617);
            name677=name();

            state._fsp--;

            adaptor.addChild(root_0, name677.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1022:1: prefix : ID COLON -> ^( PREFIX ID COLON ) ;
    public final ObjcmParser.prefix_return prefix() throws RecognitionException {
        ObjcmParser.prefix_return retval = new ObjcmParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID678=null;
        Token COLON679=null;

        Object ID678_tree=null;
        Object COLON679_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1022:8: ( ID COLON -> ^( PREFIX ID COLON ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1022:10: ID COLON
            {
            ID678=(Token)match(input,ID,FOLLOW_ID_in_prefix5629);  
            stream_ID.add(ID678);


            COLON679=(Token)match(input,COLON,FOLLOW_COLON_in_prefix5631);  
            stream_COLON.add(COLON679);


            // AST REWRITE
            // elements: ID, COLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1022:19: -> ^( PREFIX ID COLON )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1022:22: ^( PREFIX ID COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PREFIX, "PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class incomplete_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "incomplete_prefix"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1024:1: incomplete_prefix : COLON -> ^( INCOMPLETE_PREFIX COLON ) ;
    public final ObjcmParser.incomplete_prefix_return incomplete_prefix() throws RecognitionException {
        ObjcmParser.incomplete_prefix_return retval = new ObjcmParser.incomplete_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON680=null;

        Object COLON680_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1025:2: ( COLON -> ^( INCOMPLETE_PREFIX COLON ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1025:4: COLON
            {
            COLON680=(Token)match(input,COLON,FOLLOW_COLON_in_incomplete_prefix5650);  
            stream_COLON.add(COLON680);


            // AST REWRITE
            // elements: COLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1025:10: -> ^( INCOMPLETE_PREFIX COLON )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1025:13: ^( INCOMPLETE_PREFIX COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INCOMPLETE_PREFIX, "INCOMPLETE_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "incomplete_prefix"


    public static class typedef_struct_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1032:1: typedef_struct_declaration_wrapper : typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) ;
    public final ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration681 =null;


        RewriteRuleSubtreeStream stream_typedef_struct_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_struct_declaration");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1033:2: ( typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1033:4: typedef_struct_declaration
            {
            pushFollow(FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5672);
            typedef_struct_declaration681=typedef_struct_declaration();

            state._fsp--;

            stream_typedef_struct_declaration.add(typedef_struct_declaration681.getTree());

            // AST REWRITE
            // elements: typedef_struct_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1033:31: -> ^( TYPEDEF_STRUCT typedef_struct_declaration )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1033:34: ^( TYPEDEF_STRUCT typedef_struct_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_STRUCT, "TYPEDEF_STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_struct_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_wrapper"


    public static class typedef_struct_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1037:1: typedef_struct_declaration : STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? ;
    public final ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_return retval = new ObjcmParser.typedef_struct_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX682=null;
        Token L_FBR684=null;
        Token R_FBR686=null;
        Token SEMICOLON688=null;
        ObjcmParser.name_return name683 =null;

        ObjcmParser.typedef_struct_body_return typedef_struct_body685 =null;

        ObjcmParser.name_return name687 =null;


        Object STRUCT_PREFIX682_tree=null;
        Object L_FBR684_tree=null;
        Object R_FBR686_tree=null;
        Object SEMICOLON688_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1038:2: ( STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1038:4: STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX682=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5693); 
            STRUCT_PREFIX682_tree = 
            (Object)adaptor.create(STRUCT_PREFIX682)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX682_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1038:18: ( name )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==ID||LA190_0==186||LA190_0==189||LA190_0==197||LA190_0==200) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1038:18: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5695);
                    name683=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name683.getTree());

                    }
                    break;

            }


            L_FBR684=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_struct_declaration5699); 
            L_FBR684_tree = 
            (Object)adaptor.create(L_FBR684)
            ;
            adaptor.addChild(root_0, L_FBR684_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1040:3: ( typedef_struct_body )+
            int cnt191=0;
            loop191:
            do {
                int alt191=2;
                int LA191_0 = input.LA(1);

                if ( (LA191_0==ID||LA191_0==VOID||LA191_0==205) ) {
                    alt191=1;
                }


                switch (alt191) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1040:3: typedef_struct_body
            	    {
            	    pushFollow(FOLLOW_typedef_struct_body_in_typedef_struct_declaration5704);
            	    typedef_struct_body685=typedef_struct_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_struct_body685.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt191 >= 1 ) break loop191;
                        EarlyExitException eee =
                            new EarlyExitException(191, input);
                        throw eee;
                }
                cnt191++;
            } while (true);


            R_FBR686=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_struct_declaration5708); 
            R_FBR686_tree = 
            (Object)adaptor.create(R_FBR686)
            ;
            adaptor.addChild(root_0, R_FBR686_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1041:9: ( name )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==ID) ) {
                int LA192_1 = input.LA(2);

                if ( (LA192_1==EOF||LA192_1==CONST_PREFIX||LA192_1==ENUM_PREFIX||LA192_1==L_MINUS||LA192_1==L_PLUS||LA192_1==SEMICOLON||LA192_1==STATIC_PREFIX||LA192_1==STRUCT_PREFIX||LA192_1==VOID||LA192_1==171||(LA192_1 >= 173 && LA192_1 <= 174)||LA192_1==180||LA192_1==193||LA192_1==203||LA192_1==205) ) {
                    alt192=1;
                }
                else if ( (LA192_1==ID) ) {
                    int LA192_23 = input.LA(3);

                    if ( (LA192_23==L_KBR) ) {
                        int LA192_38 = input.LA(4);

                        if ( (LA192_38==R_KBR) ) {
                            alt192=1;
                        }
                    }
                    else if ( (LA192_23==ASTERISK||LA192_23==ID||LA192_23==L_LESS||LA192_23==186||LA192_23==189||LA192_23==197||LA192_23==200) ) {
                        alt192=1;
                    }
                }
            }
            else if ( (LA192_0==186||LA192_0==189||LA192_0==197||LA192_0==200) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1041:9: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5711);
                    name687=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name687.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1041:15: ( SEMICOLON )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==SEMICOLON) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1041:15: SEMICOLON
                    {
                    SEMICOLON688=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_struct_declaration5714); 
                    SEMICOLON688_tree = 
                    (Object)adaptor.create(SEMICOLON688)
                    ;
                    adaptor.addChild(root_0, SEMICOLON688_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration"


    public static class typedef_struct_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_body"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1044:1: typedef_struct_body : typedef_struct_declaration_element_wrapper ;
    public final ObjcmParser.typedef_struct_body_return typedef_struct_body() throws RecognitionException {
        ObjcmParser.typedef_struct_body_return retval = new ObjcmParser.typedef_struct_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper689 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1045:2: ( typedef_struct_declaration_element_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1045:4: typedef_struct_declaration_element_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5727);
            typedef_struct_declaration_element_wrapper689=typedef_struct_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_struct_declaration_element_wrapper689.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_body"


    public static class typedef_struct_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_element_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1048:1: typedef_struct_declaration_element_wrapper : struct_field -> ^( STRUCT_FIELD struct_field ) ;
    public final ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_element_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_field_return struct_field690 =null;


        RewriteRuleSubtreeStream stream_struct_field=new RewriteRuleSubtreeStream(adaptor,"rule struct_field");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1049:2: ( struct_field -> ^( STRUCT_FIELD struct_field ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1049:4: struct_field
            {
            pushFollow(FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5739);
            struct_field690=struct_field();

            state._fsp--;

            stream_struct_field.add(struct_field690.getTree());

            // AST REWRITE
            // elements: struct_field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1049:17: -> ^( STRUCT_FIELD struct_field )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1049:20: ^( STRUCT_FIELD struct_field )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT_FIELD, "STRUCT_FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_struct_field.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_element_wrapper"


    public static class struct_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_field"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1051:1: struct_field : field_type name ( COMMA name )* SEMICOLON ;
    public final ObjcmParser.struct_field_return struct_field() throws RecognitionException {
        ObjcmParser.struct_field_return retval = new ObjcmParser.struct_field_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA693=null;
        Token SEMICOLON695=null;
        ObjcmParser.field_type_return field_type691 =null;

        ObjcmParser.name_return name692 =null;

        ObjcmParser.name_return name694 =null;


        Object COMMA693_tree=null;
        Object SEMICOLON695_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1052:2: ( field_type name ( COMMA name )* SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1052:4: field_type name ( COMMA name )* SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_struct_field5757);
            field_type691=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type691.getTree());

            pushFollow(FOLLOW_name_in_struct_field5759);
            name692=name();

            state._fsp--;

            adaptor.addChild(root_0, name692.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1052:21: ( COMMA name )*
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);

                if ( (LA194_0==COMMA) ) {
                    alt194=1;
                }


                switch (alt194) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1052:22: COMMA name
            	    {
            	    COMMA693=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_field5763); 
            	    COMMA693_tree = 
            	    (Object)adaptor.create(COMMA693)
            	    ;
            	    adaptor.addChild(root_0, COMMA693_tree);


            	    pushFollow(FOLLOW_name_in_struct_field5766);
            	    name694=name();

            	    state._fsp--;

            	    adaptor.addChild(root_0, name694.getTree());

            	    }
            	    break;

            	default :
            	    break loop194;
                }
            } while (true);


            SEMICOLON695=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_field5770); 
            SEMICOLON695_tree = 
            (Object)adaptor.create(SEMICOLON695)
            ;
            adaptor.addChild(root_0, SEMICOLON695_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_field"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1059:1: typedef_declaration_wrapper : typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_wrapper_return retval = new ObjcmParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration696 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1060:2: ( typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1060:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5786);
            typedef_declaration696=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration696.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1060:24: -> ^( TYPEDEF typedef_declaration )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1060:27: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class enum_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1063:1: enum_declaration : typedef_declaration -> ^( ENUM typedef_declaration ) ;
    public final ObjcmParser.enum_declaration_return enum_declaration() throws RecognitionException {
        ObjcmParser.enum_declaration_return retval = new ObjcmParser.enum_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration697 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1064:2: ( typedef_declaration -> ^( ENUM typedef_declaration ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1064:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_enum_declaration5806);
            typedef_declaration697=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration697.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1064:24: -> ^( ENUM typedef_declaration )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1064:27: ^( ENUM typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_declaration"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1066:1: typedef_declaration : ENUM_PREFIX ( name )? L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON ;
    public final ObjcmParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcmParser.typedef_declaration_return retval = new ObjcmParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX698=null;
        Token L_FBR700=null;
        Token COMMA702=null;
        Token R_FBR704=null;
        Token SEMICOLON706=null;
        ObjcmParser.name_return name699 =null;

        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper701 =null;

        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper703 =null;

        ObjcmParser.name_return name705 =null;


        Object ENUM_PREFIX698_tree=null;
        Object L_FBR700_tree=null;
        Object COMMA702_tree=null;
        Object R_FBR704_tree=null;
        Object SEMICOLON706_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1067:2: ( ENUM_PREFIX ( name )? L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1067:5: ENUM_PREFIX ( name )? L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX698=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_typedef_declaration5826); 
            ENUM_PREFIX698_tree = 
            (Object)adaptor.create(ENUM_PREFIX698)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX698_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1067:17: ( name )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==ID||LA195_0==186||LA195_0==189||LA195_0==197||LA195_0==200) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1067:17: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_declaration5828);
                    name699=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name699.getTree());

                    }
                    break;

            }


            L_FBR700=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_declaration5831); 
            L_FBR700_tree = 
            (Object)adaptor.create(L_FBR700)
            ;
            adaptor.addChild(root_0, L_FBR700_tree);


            pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5834);
            typedef_declaration_element_wrapper701=typedef_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_declaration_element_wrapper701.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1067:67: ( COMMA typedef_declaration_element_wrapper )*
            loop196:
            do {
                int alt196=2;
                int LA196_0 = input.LA(1);

                if ( (LA196_0==COMMA) ) {
                    alt196=1;
                }


                switch (alt196) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1067:68: COMMA typedef_declaration_element_wrapper
            	    {
            	    COMMA702=(Token)match(input,COMMA,FOLLOW_COMMA_in_typedef_declaration5838); 
            	    COMMA702_tree = 
            	    (Object)adaptor.create(COMMA702)
            	    ;
            	    adaptor.addChild(root_0, COMMA702_tree);


            	    pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5841);
            	    typedef_declaration_element_wrapper703=typedef_declaration_element_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_declaration_element_wrapper703.getTree());

            	    }
            	    break;

            	default :
            	    break loop196;
                }
            } while (true);


            R_FBR704=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_declaration5845); 
            R_FBR704_tree = 
            (Object)adaptor.create(R_FBR704)
            ;
            adaptor.addChild(root_0, R_FBR704_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1067:120: ( name )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==ID||LA197_0==186||LA197_0==189||LA197_0==197||LA197_0==200) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1067:120: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_declaration5848);
                    name705=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name705.getTree());

                    }
                    break;

            }


            SEMICOLON706=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_declaration5851); 
            SEMICOLON706_tree = 
            (Object)adaptor.create(SEMICOLON706)
            ;
            adaptor.addChild(root_0, SEMICOLON706_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class typedef_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1069:1: typedef_declaration_element_wrapper : typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) ;
    public final ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_wrapper_return retval = new ObjcmParser.typedef_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_element_return typedef_declaration_element707 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration_element=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration_element");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1070:2: ( typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1070:4: typedef_declaration_element
            {
            pushFollow(FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5861);
            typedef_declaration_element707=typedef_declaration_element();

            state._fsp--;

            stream_typedef_declaration_element.add(typedef_declaration_element707.getTree());

            // AST REWRITE
            // elements: typedef_declaration_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1070:32: -> ^( TYPEDEF_ELEMENT typedef_declaration_element )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1070:35: ^( TYPEDEF_ELEMENT typedef_declaration_element )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_ELEMENT, "TYPEDEF_ELEMENT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration_element.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element_wrapper"


    public static class typedef_declaration_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1073:1: typedef_declaration_element : ( ID ( L_EQ ( ID | NUMBER ) )? | NUMBER L_EQ NUMBER );
    public final ObjcmParser.typedef_declaration_element_return typedef_declaration_element() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_return retval = new ObjcmParser.typedef_declaration_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID708=null;
        Token L_EQ709=null;
        Token set710=null;
        Token NUMBER711=null;
        Token L_EQ712=null;
        Token NUMBER713=null;

        Object ID708_tree=null;
        Object L_EQ709_tree=null;
        Object set710_tree=null;
        Object NUMBER711_tree=null;
        Object L_EQ712_tree=null;
        Object NUMBER713_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1074:2: ( ID ( L_EQ ( ID | NUMBER ) )? | NUMBER L_EQ NUMBER )
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==ID) ) {
                alt199=1;
            }
            else if ( (LA199_0==NUMBER) ) {
                alt199=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);

                throw nvae;

            }
            switch (alt199) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1074:4: ID ( L_EQ ( ID | NUMBER ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    ID708=(Token)match(input,ID,FOLLOW_ID_in_typedef_declaration_element5880); 
                    ID708_tree = 
                    (Object)adaptor.create(ID708)
                    ;
                    adaptor.addChild(root_0, ID708_tree);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1074:8: ( L_EQ ( ID | NUMBER ) )?
                    int alt198=2;
                    int LA198_0 = input.LA(1);

                    if ( (LA198_0==L_EQ) ) {
                        alt198=1;
                    }
                    switch (alt198) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1074:9: L_EQ ( ID | NUMBER )
                            {
                            L_EQ709=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_typedef_declaration_element5884); 
                            L_EQ709_tree = 
                            (Object)adaptor.create(L_EQ709)
                            ;
                            adaptor.addChild(root_0, L_EQ709_tree);


                            set710=(Token)input.LT(1);

                            if ( input.LA(1)==ID||input.LA(1)==NUMBER ) {
                                input.consume();
                                adaptor.addChild(root_0, 
                                (Object)adaptor.create(set710)
                                );
                                state.errorRecovery=false;
                            }
                            else {
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1075:4: NUMBER L_EQ NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER711=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_typedef_declaration_element5899); 
                    NUMBER711_tree = 
                    (Object)adaptor.create(NUMBER711)
                    ;
                    adaptor.addChild(root_0, NUMBER711_tree);


                    L_EQ712=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_typedef_declaration_element5901); 
                    L_EQ712_tree = 
                    (Object)adaptor.create(L_EQ712)
                    ;
                    adaptor.addChild(root_0, L_EQ712_tree);


                    NUMBER713=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_typedef_declaration_element5903); 
                    NUMBER713_tree = 
                    (Object)adaptor.create(NUMBER713)
                    ;
                    adaptor.addChild(root_0, NUMBER713_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1082:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_wrapper_return retval = new ObjcmParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_return field_declaration714 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1083:2: ( field_declaration -> ^( FIELD field_declaration ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1083:4: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper5917);
            field_declaration714=field_declaration();

            state._fsp--;

            stream_field_declaration.add(field_declaration714.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1083:22: -> ^( FIELD field_declaration )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1083:25: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1085:1: field_declaration : field_modifier_wrapper field_type name field_declaration_end ;
    public final ObjcmParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcmParser.field_declaration_return retval = new ObjcmParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper715 =null;

        ObjcmParser.field_type_return field_type716 =null;

        ObjcmParser.name_return name717 =null;

        ObjcmParser.field_declaration_end_return field_declaration_end718 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1086:2: ( field_modifier_wrapper field_type name field_declaration_end )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1086:4: field_modifier_wrapper field_type name field_declaration_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_modifier_wrapper_in_field_declaration5934);
            field_modifier_wrapper715=field_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, field_modifier_wrapper715.getTree());

            pushFollow(FOLLOW_field_type_in_field_declaration5937);
            field_type716=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type716.getTree());

            pushFollow(FOLLOW_name_in_field_declaration5939);
            name717=name();

            state._fsp--;

            adaptor.addChild(root_0, name717.getTree());

            pushFollow(FOLLOW_field_declaration_end_in_field_declaration5941);
            field_declaration_end718=field_declaration_end();

            state._fsp--;

            adaptor.addChild(root_0, field_declaration_end718.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1088:1: field_declaration_end : ( expr_assign_wrapper )? SEMICOLON ;
    public final ObjcmParser.field_declaration_end_return field_declaration_end() throws RecognitionException {
        ObjcmParser.field_declaration_end_return retval = new ObjcmParser.field_declaration_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON720=null;
        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper719 =null;


        Object SEMICOLON720_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1089:2: ( ( expr_assign_wrapper )? SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1089:5: ( expr_assign_wrapper )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1089:5: ( expr_assign_wrapper )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==L_AND_EQ||(LA200_0 >= L_DIV_EQ && LA200_0 <= L_EQ)||LA200_0==L_LEFT_EQ||LA200_0==L_MINUS_EQ||LA200_0==L_MULT_EQ||LA200_0==L_OR_EQ||LA200_0==L_PERC_EQ||LA200_0==L_PLUS_EQ||LA200_0==L_RIGHT_EQ||LA200_0==L_XOR_EQ) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1089:5: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_field_declaration_end5952);
                    expr_assign_wrapper719=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper719.getTree());

                    }
                    break;

            }


            SEMICOLON720=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration_end5955); 
            SEMICOLON720_tree = 
            (Object)adaptor.create(SEMICOLON720)
            ;
            adaptor.addChild(root_0, SEMICOLON720_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end"


    public static class type_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1091:1: type_start_wrapper : type_start -> ^( M_TYPE_START type_start ) ;
    public final ObjcmParser.type_start_wrapper_return type_start_wrapper() throws RecognitionException {
        ObjcmParser.type_start_wrapper_return retval = new ObjcmParser.type_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_start_return type_start721 =null;


        RewriteRuleSubtreeStream stream_type_start=new RewriteRuleSubtreeStream(adaptor,"rule type_start");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1092:2: ( type_start -> ^( M_TYPE_START type_start ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1092:4: type_start
            {
            pushFollow(FOLLOW_type_start_in_type_start_wrapper5965);
            type_start721=type_start();

            state._fsp--;

            stream_type_start.add(type_start721.getTree());

            // AST REWRITE
            // elements: type_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1092:15: -> ^( M_TYPE_START type_start )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1092:18: ^( M_TYPE_START type_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(M_TYPE_START, "M_TYPE_START")
                , root_1);

                adaptor.addChild(root_1, stream_type_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start_wrapper"


    public static class type_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1094:1: type_start : ( CONST_PREFIX )? field_type name ( L_KBR R_KBR )? type_end ;
    public final ObjcmParser.type_start_return type_start() throws RecognitionException {
        ObjcmParser.type_start_return retval = new ObjcmParser.type_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX722=null;
        Token L_KBR725=null;
        Token R_KBR726=null;
        ObjcmParser.field_type_return field_type723 =null;

        ObjcmParser.name_return name724 =null;

        ObjcmParser.type_end_return type_end727 =null;


        Object CONST_PREFIX722_tree=null;
        Object L_KBR725_tree=null;
        Object R_KBR726_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1095:2: ( ( CONST_PREFIX )? field_type name ( L_KBR R_KBR )? type_end )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1095:4: ( CONST_PREFIX )? field_type name ( L_KBR R_KBR )? type_end
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1095:4: ( CONST_PREFIX )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==CONST_PREFIX) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1095:4: CONST_PREFIX
                    {
                    CONST_PREFIX722=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_start5982); 
                    CONST_PREFIX722_tree = 
                    (Object)adaptor.create(CONST_PREFIX722)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX722_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_type_start5985);
            field_type723=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type723.getTree());

            pushFollow(FOLLOW_name_in_type_start5987);
            name724=name();

            state._fsp--;

            adaptor.addChild(root_0, name724.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1095:34: ( L_KBR R_KBR )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==L_KBR) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1095:35: L_KBR R_KBR
                    {
                    L_KBR725=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_type_start5990); 
                    L_KBR725_tree = 
                    (Object)adaptor.create(L_KBR725)
                    ;
                    adaptor.addChild(root_0, L_KBR725_tree);


                    R_KBR726=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_type_start5992); 
                    R_KBR726_tree = 
                    (Object)adaptor.create(R_KBR726)
                    ;
                    adaptor.addChild(root_0, R_KBR726_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_end_in_type_start5996);
            type_end727=type_end();

            state._fsp--;

            adaptor.addChild(root_0, type_end727.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start"


    public static class type_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_end"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1097:1: type_end : ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) );
    public final ObjcmParser.type_end_return type_end() throws RecognitionException {
        ObjcmParser.type_end_return retval = new ObjcmParser.type_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration4_return field_declaration4728 =null;

        ObjcmParser.method_declaration4_return method_declaration4729 =null;


        RewriteRuleSubtreeStream stream_method_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration4");
        RewriteRuleSubtreeStream stream_field_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration4");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1097:9: ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) )
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==L_AND_EQ||(LA203_0 >= L_DIV_EQ && LA203_0 <= L_EQ)||LA203_0==L_LEFT_EQ||LA203_0==L_MINUS_EQ||LA203_0==L_MULT_EQ||LA203_0==L_OR_EQ||LA203_0==L_PERC_EQ||LA203_0==L_PLUS_EQ||LA203_0==L_RIGHT_EQ||LA203_0==L_XOR_EQ||LA203_0==SEMICOLON) ) {
                alt203=1;
            }
            else if ( (LA203_0==L_BR) ) {
                alt203=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 203, 0, input);

                throw nvae;

            }
            switch (alt203) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1097:11: field_declaration4
                    {
                    pushFollow(FOLLOW_field_declaration4_in_type_end6004);
                    field_declaration4728=field_declaration4();

                    state._fsp--;

                    stream_field_declaration4.add(field_declaration4728.getTree());

                    // AST REWRITE
                    // elements: field_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1097:30: -> ^( FIELD field_declaration4 )
                    {
                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1097:33: ^( FIELD field_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD, "FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_field_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1098:4: method_declaration4
                    {
                    pushFollow(FOLLOW_method_declaration4_in_type_end6017);
                    method_declaration4729=method_declaration4();

                    state._fsp--;

                    stream_method_declaration4.add(method_declaration4729.getTree());

                    // AST REWRITE
                    // elements: method_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1098:24: -> ^( STATIC_METHOD method_declaration4 )
                    {
                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1098:27: ^( STATIC_METHOD method_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_end"


    public static class field_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration4"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1101:1: field_declaration4 : ( expr_assign_wrapper )? SEMICOLON ;
    public final ObjcmParser.field_declaration4_return field_declaration4() throws RecognitionException {
        ObjcmParser.field_declaration4_return retval = new ObjcmParser.field_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON731=null;
        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper730 =null;


        Object SEMICOLON731_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1102:2: ( ( expr_assign_wrapper )? SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1102:5: ( expr_assign_wrapper )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1102:5: ( expr_assign_wrapper )?
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==L_AND_EQ||(LA204_0 >= L_DIV_EQ && LA204_0 <= L_EQ)||LA204_0==L_LEFT_EQ||LA204_0==L_MINUS_EQ||LA204_0==L_MULT_EQ||LA204_0==L_OR_EQ||LA204_0==L_PERC_EQ||LA204_0==L_PLUS_EQ||LA204_0==L_RIGHT_EQ||LA204_0==L_XOR_EQ) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1102:5: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_field_declaration46039);
                    expr_assign_wrapper730=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper730.getTree());

                    }
                    break;

            }


            SEMICOLON731=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration46042); 
            SEMICOLON731_tree = 
            (Object)adaptor.create(SEMICOLON731)
            ;
            adaptor.addChild(root_0, SEMICOLON731_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration4"


    public static class method_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration4"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1105:1: method_declaration4 : method_params2 block_wrapper ;
    public final ObjcmParser.method_declaration4_return method_declaration4() throws RecognitionException {
        ObjcmParser.method_declaration4_return retval = new ObjcmParser.method_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2732 =null;

        ObjcmParser.block_wrapper_return block_wrapper733 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1106:2: ( method_params2 block_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1106:5: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_declaration46055);
            method_params2732=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2732.getTree());

            pushFollow(FOLLOW_block_wrapper_in_method_declaration46060);
            block_wrapper733=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper733.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration4"


    public static class field_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1110:1: field_modifier_wrapper : field_modifier -> ^( MODIFIER field_modifier ) ;
    public final ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper() throws RecognitionException {
        ObjcmParser.field_modifier_wrapper_return retval = new ObjcmParser.field_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_return field_modifier734 =null;


        RewriteRuleSubtreeStream stream_field_modifier=new RewriteRuleSubtreeStream(adaptor,"rule field_modifier");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1111:2: ( field_modifier -> ^( MODIFIER field_modifier ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1111:4: field_modifier
            {
            pushFollow(FOLLOW_field_modifier_in_field_modifier_wrapper6072);
            field_modifier734=field_modifier();

            state._fsp--;

            stream_field_modifier.add(field_modifier734.getTree());

            // AST REWRITE
            // elements: field_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1111:19: -> ^( MODIFIER field_modifier )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1111:22: ^( MODIFIER field_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_field_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier_wrapper"


    public static class field_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1113:1: field_modifier : 'extern' ;
    public final ObjcmParser.field_modifier_return field_modifier() throws RecognitionException {
        ObjcmParser.field_modifier_return retval = new ObjcmParser.field_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal735=null;

        Object string_literal735_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1114:2: ( 'extern' )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1114:4: 'extern'
            {
            root_0 = (Object)adaptor.nil();


            string_literal735=(Token)match(input,193,FOLLOW_193_in_field_modifier6090); 
            string_literal735_tree = 
            (Object)adaptor.create(string_literal735)
            ;
            adaptor.addChild(root_0, string_literal735_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier"


    public static class field_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1117:1: field_type : field_type_internal -> ^( TYPE field_type_internal ) ;
    public final ObjcmParser.field_type_return field_type() throws RecognitionException {
        ObjcmParser.field_type_return retval = new ObjcmParser.field_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_internal_return field_type_internal736 =null;


        RewriteRuleSubtreeStream stream_field_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_type_internal");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1118:2: ( field_type_internal -> ^( TYPE field_type_internal ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1118:5: field_type_internal
            {
            pushFollow(FOLLOW_field_type_internal_in_field_type6102);
            field_type_internal736=field_type_internal();

            state._fsp--;

            stream_field_type_internal.add(field_type_internal736.getTree());

            // AST REWRITE
            // elements: field_type_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1118:25: -> ^( TYPE field_type_internal )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1118:28: ^( TYPE field_type_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE, "TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type"


    public static class field_type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1120:1: field_type_internal : type_internal ( generic )? ( ASTERISK )* ;
    public final ObjcmParser.field_type_internal_return field_type_internal() throws RecognitionException {
        ObjcmParser.field_type_internal_return retval = new ObjcmParser.field_type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK739=null;
        ObjcmParser.type_internal_return type_internal737 =null;

        ObjcmParser.generic_return generic738 =null;


        Object ASTERISK739_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1121:2: ( type_internal ( generic )? ( ASTERISK )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1121:4: type_internal ( generic )? ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_field_type_internal6121);
            type_internal737=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal737.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1121:18: ( generic )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==L_LESS) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1121:18: generic
                    {
                    pushFollow(FOLLOW_generic_in_field_type_internal6123);
                    generic738=generic();

                    state._fsp--;

                    adaptor.addChild(root_0, generic738.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1121:27: ( ASTERISK )*
            loop206:
            do {
                int alt206=2;
                int LA206_0 = input.LA(1);

                if ( (LA206_0==ASTERISK) ) {
                    alt206=1;
                }


                switch (alt206) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1121:27: ASTERISK
            	    {
            	    ASTERISK739=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_field_type_internal6126); 
            	    ASTERISK739_tree = 
            	    (Object)adaptor.create(ASTERISK739)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK739_tree);


            	    }
            	    break;

            	default :
            	    break loop206;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_internal"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1127:1: name : name_internal -> ^( NAME name_internal ) ;
    public final ObjcmParser.name_return name() throws RecognitionException {
        ObjcmParser.name_return retval = new ObjcmParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal740 =null;


        RewriteRuleSubtreeStream stream_name_internal=new RewriteRuleSubtreeStream(adaptor,"rule name_internal");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1127:6: ( name_internal -> ^( NAME name_internal ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1127:8: name_internal
            {
            pushFollow(FOLLOW_name_internal_in_name6139);
            name_internal740=name_internal();

            state._fsp--;

            stream_name_internal.add(name_internal740.getTree());

            // AST REWRITE
            // elements: name_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1127:22: -> ^( NAME name_internal )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1127:25: ^( NAME name_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, stream_name_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1130:1: name_internal : ( ID | 'in' | property );
    public final ObjcmParser.name_internal_return name_internal() throws RecognitionException {
        ObjcmParser.name_internal_return retval = new ObjcmParser.name_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID741=null;
        Token string_literal742=null;
        ObjcmParser.property_return property743 =null;


        Object ID741_tree=null;
        Object string_literal742_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1131:2: ( ID | 'in' | property )
            int alt207=3;
            switch ( input.LA(1) ) {
            case ID:
                {
                alt207=1;
                }
                break;
            case 197:
                {
                alt207=2;
                }
                break;
            case 186:
            case 189:
            case 200:
                {
                alt207=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);

                throw nvae;

            }

            switch (alt207) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1131:4: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID741=(Token)match(input,ID,FOLLOW_ID_in_name_internal6160); 
                    ID741_tree = 
                    (Object)adaptor.create(ID741)
                    ;
                    adaptor.addChild(root_0, ID741_tree);


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1132:5: 'in'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal742=(Token)match(input,197,FOLLOW_197_in_name_internal6167); 
                    string_literal742_tree = 
                    (Object)adaptor.create(string_literal742)
                    ;
                    adaptor.addChild(root_0, string_literal742_tree);


                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1133:5: property
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_property_in_name_internal6174);
                    property743=property();

                    state._fsp--;

                    adaptor.addChild(root_0, property743.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_internal"


    public static class string_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_value"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1136:1: string_value : STRING_LITERAL ;
    public final ObjcmParser.string_value_return string_value() throws RecognitionException {
        ObjcmParser.string_value_return retval = new ObjcmParser.string_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL744=null;

        Object STRING_LITERAL744_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1137:2: ( STRING_LITERAL )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1137:4: STRING_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL744=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string_value6185); 
            STRING_LITERAL744_tree = 
            (Object)adaptor.create(STRING_LITERAL744)
            ;
            adaptor.addChild(root_0, STRING_LITERAL744_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_value"


    public static class null_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1139:1: null_stmt : ( 'nil' | 'Nil' );
    public final ObjcmParser.null_stmt_return null_stmt() throws RecognitionException {
        ObjcmParser.null_stmt_return retval = new ObjcmParser.null_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set745=null;

        Object set745_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1139:11: ( 'nil' | 'Nil' )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set745=(Token)input.LT(1);

            if ( input.LA(1)==183||input.LA(1)==199 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set745)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_stmt"

    // Delegated rules


    protected DFA32 dfa32 = new DFA32(this);
    protected DFA55 dfa55 = new DFA55(this);
    protected DFA62 dfa62 = new DFA62(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA186 dfa186 = new DFA186(this);
    static final String DFA32_eotS =
        "\u01ab\uffff";
    static final String DFA32_eofS =
        "\u01ab\uffff";
    static final String DFA32_minS =
        "\1\6\14\uffff\1\6\34\uffff\3\6\2\uffff\2\6\2\67\2\uffff\1\6\12\uffff"+
        "\2\6\7\uffff\2\6\2\67\15\uffff\2\6\6\uffff\2\6\2\67\15\uffff\2\6"+
        "\u0136\uffff";
    static final String DFA32_maxS =
        "\1\u00ce\14\uffff\1\u00cd\34\uffff\3\u00cd\2\uffff\2\u00cd\2\u00c8"+
        "\2\uffff\1\u00cd\12\uffff\2\u00cd\7\uffff\2\u00cd\2\u00c8\15\uffff"+
        "\2\u00cd\6\uffff\2\u00cd\2\u00c8\15\uffff\2\u00cd\u0136\uffff";
    static final String DFA32_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\24\uffff\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\uffff\1\16\1\17\1\20\1\21\1\22\1\23\1\24\34\uffff\1"+
        "\6\31\uffff\1\6\30\uffff\1\6\1\uffff\26\6\1\uffff\34\6\14\uffff"+
        "\1\6\10\uffff\26\6\7\uffff\4\6\13\uffff\110\6\7\uffff\4\6\13\uffff"+
        "\110\6\7\uffff\4\6\13\uffff";
    static final String DFA32_specialS =
        "\u01ab\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\6\2\uffff\1\41\12\uffff\1\5\6\uffff\1\44\33\uffff\1\6\11"+
            "\uffff\1\6\2\uffff\1\6\6\uffff\1\6\4\uffff\1\6\1\uffff\1\6\4"+
            "\uffff\1\6\5\uffff\1\6\1\uffff\1\6\3\uffff\1\6\16\uffff\1\6"+
            "\16\uffff\1\47\2\uffff\1\41\1\6\2\uffff\1\3\3\uffff\3\6\1\uffff"+
            "\1\43\21\uffff\1\46\7\uffff\1\6\6\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\1\2\1\1\1\6\1\uffff\1\45\1\6\2\uffff\1\6\1\uffff\1\4\1\34\1"+
            "\51\1\37\1\50\1\33\1\6\1\uffff\2\6\1\36\1\35\2\uffff\1\15\1"+
            "\40",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\46\60\uffff\1\52\152\uffff\1\46\27\uffff\1\54\2\uffff\1"+
            "\54\7\uffff\1\53\2\uffff\1\54\4\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\65\11\uffff\1\106\1\101\6\uffff\1\61\36\uffff\1\6\11\uffff"+
            "\2\6\1\100\1\57\1\uffff\1\106\2\100\1\6\1\uffff\1\60\1\6\1\100"+
            "\3\6\1\100\3\6\1\100\1\6\1\uffff\1\6\1\100\1\6\1\106\1\100\1"+
            "\6\1\100\3\6\1\100\1\uffff\1\6\1\100\33\uffff\1\106\40\uffff"+
            "\1\6\4\uffff\1\62\22\uffff\1\6\2\uffff\1\6\7\uffff\1\6\2\uffff"+
            "\1\6\4\uffff\1\6",
            "\1\106\11\uffff\1\140\1\133\6\uffff\1\113\36\uffff\1\106\11"+
            "\uffff\2\106\1\132\1\111\1\uffff\1\106\2\132\1\106\1\uffff\1"+
            "\112\1\106\1\132\3\106\1\132\3\106\1\132\1\106\1\uffff\1\106"+
            "\1\132\2\106\1\132\1\106\1\132\3\106\1\132\1\uffff\1\106\1\132"+
            "\33\uffff\1\140\40\uffff\1\106\4\uffff\1\114\22\uffff\1\106"+
            "\2\uffff\1\106\7\uffff\1\106\2\uffff\1\106\4\uffff\1\106",
            "\1\140\11\uffff\1\171\1\164\6\uffff\1\144\36\uffff\1\140\11"+
            "\uffff\2\140\1\163\1\142\1\uffff\1\140\2\163\1\140\1\uffff\1"+
            "\143\1\140\1\163\3\140\1\163\3\140\1\163\1\140\1\uffff\1\140"+
            "\1\163\2\140\1\163\1\140\1\163\3\140\1\163\1\uffff\1\140\1\163"+
            "\33\uffff\1\171\40\uffff\1\140\4\uffff\1\145\22\uffff\1\140"+
            "\2\uffff\1\140\7\uffff\1\140\2\uffff\1\140\4\uffff\1\140",
            "",
            "",
            "\1\173\60\uffff\1\u0083\11\uffff\1\174\2\uffff\1\u0087\6\uffff"+
            "\1\u0086\4\uffff\1\175\1\uffff\1\u0081\4\uffff\1\176\5\uffff"+
            "\1\175\1\uffff\1\u0081\3\uffff\1\177\16\uffff\1\u0088\11\uffff"+
            "\1\u0090\10\uffff\1\u0080\6\uffff\1\u0089\1\u008a\1\u008b\23"+
            "\uffff\1\46\7\uffff\1\u008e\6\uffff\1\u008f\1\uffff\1\u008d"+
            "\3\uffff\1\u008c\2\uffff\1\u0085\2\uffff\1\u0085\7\uffff\1\u0084"+
            "\1\uffff\1\u008c\1\u0085\4\uffff\1\u0082",
            "\1\u0093\60\uffff\1\u009b\11\uffff\1\u0094\2\uffff\1\u009f"+
            "\6\uffff\1\u009e\4\uffff\1\u0095\1\uffff\1\u0099\4\uffff\1\u0096"+
            "\5\uffff\1\u0095\1\uffff\1\u0099\3\uffff\1\u0097\16\uffff\1"+
            "\u00a0\13\uffff\1\u0092\6\uffff\1\u0098\6\uffff\1\u00a1\1\u00a2"+
            "\1\u00a3\33\uffff\1\u00a6\6\uffff\1\u00a7\1\uffff\1\u00a5\3"+
            "\uffff\1\u00a4\2\uffff\1\u009d\2\uffff\1\u009d\7\uffff\1\u009c"+
            "\1\uffff\1\u00a4\1\u009d\4\uffff\1\u009a",
            "\1\u00a8\u0082\uffff\1\u00aa\2\uffff\1\u00aa\7\uffff\1\u00a9"+
            "\2\uffff\1\u00aa",
            "\1\u00ab\u0082\uffff\1\u00ad\2\uffff\1\u00ad\7\uffff\1\u00ac"+
            "\2\uffff\1\u00ad",
            "",
            "",
            "\1\171\60\uffff\1\171\11\uffff\1\171\2\uffff\1\u00ba\6\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\33\uffff\1\171\6\uffff\1\171\1\uffff\1\171\3\uffff"+
            "\1\171\2\uffff\1\171\2\uffff\1\171\7\uffff\1\171\1\uffff\2\171"+
            "\4\uffff\1\171",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c4\60\uffff\1\u00cc\11\uffff\1\u00c5\2\uffff\1\u00c3"+
            "\5\uffff\1\u00d8\1\u00cf\4\uffff\1\u00c6\1\uffff\1\u00ca\4\uffff"+
            "\1\u00c7\5\uffff\1\u00c6\1\uffff\1\u00ca\3\uffff\1\u00c8\16"+
            "\uffff\1\u00d0\22\uffff\1\u00c9\6\uffff\1\u00d1\1\u00d2\1\u00d3"+
            "\33\uffff\1\u00d6\6\uffff\1\u00d7\1\uffff\1\u00d5\3\uffff\1"+
            "\u00d4\2\uffff\1\u00ce\2\uffff\1\u00ce\7\uffff\1\u00cd\1\uffff"+
            "\1\u00d4\1\u00ce\4\uffff\1\u00cb",
            "\1\171\60\uffff\1\u00e1\11\uffff\1\171\2\uffff\1\171\6\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\23\uffff\1\46\7\uffff\1\171\6\uffff\1\171\1\uffff"+
            "\1\171\3\uffff\1\171\2\uffff\1\u00e3\2\uffff\1\u00e3\7\uffff"+
            "\1\u00e2\1\uffff\1\171\1\u00e3\4\uffff\1\u00e0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ef\60\uffff\1\u00f7\11\uffff\1\u00f0\2\uffff\1\u00fb"+
            "\6\uffff\1\u00fa\4\uffff\1\u00f1\1\uffff\1\u00f5\4\uffff\1\u00f2"+
            "\5\uffff\1\u00f1\1\uffff\1\u00f5\3\uffff\1\u00f3\16\uffff\1"+
            "\u00fc\11\uffff\1\u0104\10\uffff\1\u00f4\6\uffff\1\u00fd\1\u00fe"+
            "\1\u00ff\33\uffff\1\u0102\6\uffff\1\u0103\1\uffff\1\u0101\3"+
            "\uffff\1\u0100\2\uffff\1\u00f9\2\uffff\1\u00f9\7\uffff\1\u00f8"+
            "\1\uffff\1\u0100\1\u00f9\4\uffff\1\u00f6",
            "\1\u0105\60\uffff\1\u010d\11\uffff\1\u0106\2\uffff\1\u0111"+
            "\6\uffff\1\u0110\4\uffff\1\u0107\1\uffff\1\u010b\4\uffff\1\u0108"+
            "\5\uffff\1\u0107\1\uffff\1\u010b\3\uffff\1\u0109\16\uffff\1"+
            "\u0112\13\uffff\1\u011a\6\uffff\1\u010a\6\uffff\1\u0113\1\u0114"+
            "\1\u0115\33\uffff\1\u0118\6\uffff\1\u0119\1\uffff\1\u0117\3"+
            "\uffff\1\u0116\2\uffff\1\u010f\2\uffff\1\u010f\7\uffff\1\u010e"+
            "\1\uffff\1\u0116\1\u010f\4\uffff\1\u010c",
            "\1\u011b\u0082\uffff\1\u011d\2\uffff\1\u011d\7\uffff\1\u011c"+
            "\2\uffff\1\u011d",
            "\1\u011e\u0082\uffff\1\u0120\2\uffff\1\u0120\7\uffff\1\u011f"+
            "\2\uffff\1\u0120",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0122\60\uffff\1\u012a\11\uffff\1\u0123\2\uffff\1\u0121"+
            "\5\uffff\1\u0136\1\u012d\4\uffff\1\u0124\1\uffff\1\u0128\4\uffff"+
            "\1\u0125\5\uffff\1\u0124\1\uffff\1\u0128\3\uffff\1\u0126\16"+
            "\uffff\1\u012e\22\uffff\1\u0127\6\uffff\1\u012f\1\u0130\1\u0131"+
            "\33\uffff\1\u0134\6\uffff\1\u0135\1\uffff\1\u0133\3\uffff\1"+
            "\u0132\2\uffff\1\u012c\2\uffff\1\u012c\7\uffff\1\u012b\1\uffff"+
            "\1\u0132\1\u012c\4\uffff\1\u0129",
            "\1\171\60\uffff\1\u013f\11\uffff\1\171\2\uffff\1\171\6\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\23\uffff\1\46\7\uffff\1\171\6\uffff\1\171\1\uffff"+
            "\1\171\3\uffff\1\171\2\uffff\1\u0141\2\uffff\1\u0141\7\uffff"+
            "\1\u0140\1\uffff\1\171\1\u0141\4\uffff\1\u013e",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u014d\60\uffff\1\u0155\11\uffff\1\u014e\2\uffff\1\u0159"+
            "\6\uffff\1\u0158\4\uffff\1\u014f\1\uffff\1\u0153\4\uffff\1\u0150"+
            "\5\uffff\1\u014f\1\uffff\1\u0153\3\uffff\1\u0151\16\uffff\1"+
            "\u015a\11\uffff\1\u0162\10\uffff\1\u0152\6\uffff\1\u015b\1\u015c"+
            "\1\u015d\33\uffff\1\u0160\6\uffff\1\u0161\1\uffff\1\u015f\3"+
            "\uffff\1\u015e\2\uffff\1\u0157\2\uffff\1\u0157\7\uffff\1\u0156"+
            "\1\uffff\1\u015e\1\u0157\4\uffff\1\u0154",
            "\1\u0163\60\uffff\1\u016b\11\uffff\1\u0164\2\uffff\1\u016f"+
            "\6\uffff\1\u016e\4\uffff\1\u0165\1\uffff\1\u0169\4\uffff\1\u0166"+
            "\5\uffff\1\u0165\1\uffff\1\u0169\3\uffff\1\u0167\16\uffff\1"+
            "\u0170\13\uffff\1\u0178\6\uffff\1\u0168\6\uffff\1\u0171\1\u0172"+
            "\1\u0173\33\uffff\1\u0176\6\uffff\1\u0177\1\uffff\1\u0175\3"+
            "\uffff\1\u0174\2\uffff\1\u016d\2\uffff\1\u016d\7\uffff\1\u016c"+
            "\1\uffff\1\u0174\1\u016d\4\uffff\1\u016a",
            "\1\u0179\u0082\uffff\1\u017b\2\uffff\1\u017b\7\uffff\1\u017a"+
            "\2\uffff\1\u017b",
            "\1\u017c\u0082\uffff\1\u017e\2\uffff\1\u017e\7\uffff\1\u017d"+
            "\2\uffff\1\u017e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0180\60\uffff\1\u0188\11\uffff\1\u0181\2\uffff\1\u017f"+
            "\5\uffff\1\u0194\1\u018b\4\uffff\1\u0182\1\uffff\1\u0186\4\uffff"+
            "\1\u0183\5\uffff\1\u0182\1\uffff\1\u0186\3\uffff\1\u0184\16"+
            "\uffff\1\u018c\22\uffff\1\u0185\6\uffff\1\u018d\1\u018e\1\u018f"+
            "\33\uffff\1\u0192\6\uffff\1\u0193\1\uffff\1\u0191\3\uffff\1"+
            "\u0190\2\uffff\1\u018a\2\uffff\1\u018a\7\uffff\1\u0189\1\uffff"+
            "\1\u0190\1\u018a\4\uffff\1\u0187",
            "\1\171\60\uffff\1\u019d\11\uffff\1\171\2\uffff\1\171\6\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\23\uffff\1\46\7\uffff\1\171\6\uffff\1\171\1\uffff"+
            "\1\171\3\uffff\1\171\2\uffff\1\u019f\2\uffff\1\u019f\7\uffff"+
            "\1\u019e\1\uffff\1\171\1\u019f\4\uffff\1\u019c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "289:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression_wrapper SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper | 'extern' );";
        }
    }
    static final String DFA55_eotS =
        "\u021a\uffff";
    static final String DFA55_eofS =
        "\u021a\uffff";
    static final String DFA55_minS =
        "\1\67\1\21\6\uffff\1\30\1\uffff\2\6\15\uffff\2\6\20\uffff\4\6\1"+
        "\67\1\6\21\uffff\2\6\7\67\1\uffff\2\6\1\67\6\6\3\104\u01c2\uffff";
    static final String DFA55_maxS =
        "\2\u00cd\6\uffff\1\u00cd\1\uffff\2\u00cd\15\uffff\2\u00cd\20\uffff"+
        "\1\u00cd\5\u00c8\21\uffff\1\u00cd\1\u00a7\7\u00cd\1\uffff\2\u00a7"+
        "\1\u00c8\1\u00cd\5\174\3\104\u01c2\uffff";
    static final String DFA55_acceptS =
        "\2\uffff\1\2\2\uffff\1\3\1\1\122\uffff\25\1\13\uffff\5\1\1\uffff"+
        "\1\1\7\uffff\3\1\7\uffff\1\1\14\uffff\4\1\21\uffff\4\1\21\uffff"+
        "\4\1\21\uffff\6\1\20\uffff\1\1\5\uffff\26\1\1\uffff\u008a\1\1\uffff"+
        "\23\1\1\uffff\53\1\1\uffff\16\1\1\uffff\16\1\1\uffff\16\1\1\uffff"+
        "\16\1\1\uffff\3\1";
    static final String DFA55_specialS =
        "\u021a\uffff}>";
    static final String[] DFA55_transitionS = {
            "\1\2\111\uffff\1\5\40\uffff\1\2\27\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\1\2\uffff\1\2\4\uffff\1\2",
            "\1\2\6\uffff\1\2\36\uffff\1\6\13\uffff\1\2\1\13\2\uffff\2\2"+
            "\2\uffff\1\12\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\14\uffff"+
            "\1\6\16\uffff\1\2\12\uffff\3\6\30\uffff\1\2\2\uffff\1\6\6\uffff"+
            "\1\6\1\uffff\1\6\3\uffff\1\6\2\uffff\1\6\2\uffff\1\6\7\uffff"+
            "\1\10\1\uffff\2\6\4\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\6\36\uffff\1\2\14\uffff\1\31\6\uffff\1\32\2\uffff\1\6\43"+
            "\uffff\1\2\11\uffff\1\6\17\uffff\3\2\30\uffff\1\6\2\uffff\1"+
            "\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1"+
            "\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "\1\2\60\uffff\1\54\11\uffff\1\2\2\uffff\1\53\6\uffff\1\57\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\13\uffff\1\2\6\uffff\1\2\6\uffff\1\60"+
            "\2\2\33\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\56\2\uffff\1\56\7\uffff\1\55\1\uffff\1\2\1\56\4\uffff\1\2",
            "\1\104\15\uffff\1\6\42\uffff\1\103\11\uffff\1\105\2\uffff\1"+
            "\117\6\uffff\1\116\4\uffff\1\106\1\uffff\1\112\4\uffff\1\107"+
            "\5\uffff\1\106\1\uffff\1\112\3\uffff\1\110\16\uffff\1\120\11"+
            "\uffff\1\2\10\uffff\1\111\6\uffff\1\121\1\122\1\123\23\uffff"+
            "\1\6\7\uffff\1\126\6\uffff\1\127\1\uffff\1\125\3\uffff\1\124"+
            "\2\uffff\1\115\2\uffff\1\115\7\uffff\1\114\1\uffff\1\124\1\115"+
            "\4\uffff\1\102",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\131\15\uffff\1\2\42\uffff\1\141\11\uffff\1\132\2\uffff\1"+
            "\145\6\uffff\1\144\4\uffff\1\133\1\uffff\1\137\4\uffff\1\134"+
            "\5\uffff\1\133\1\uffff\1\137\3\uffff\1\135\16\uffff\1\146\11"+
            "\uffff\1\6\10\uffff\1\136\6\uffff\1\147\1\150\1\151\23\uffff"+
            "\1\2\7\uffff\1\154\6\uffff\1\155\1\uffff\1\153\3\uffff\1\152"+
            "\2\uffff\1\143\2\uffff\1\143\7\uffff\1\142\1\uffff\1\152\1\143"+
            "\4\uffff\1\140",
            "\1\6\60\uffff\1\171\11\uffff\1\6\2\uffff\1\175\6\uffff\1\174"+
            "\4\uffff\1\6\1\uffff\1\6\4\uffff\1\6\5\uffff\1\6\1\uffff\1\6"+
            "\3\uffff\1\6\16\uffff\1\6\13\uffff\1\6\6\uffff\1\6\6\uffff\1"+
            "\177\2\6\33\uffff\1\6\6\uffff\1\6\1\uffff\1\6\3\uffff\1\6\2"+
            "\uffff\1\173\2\uffff\1\173\7\uffff\1\172\1\uffff\1\6\1\173\4"+
            "\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\15\uffff\1\u0087\42\uffff\1\u0089\11\uffff\1\2\2\uffff"+
            "\1\2\6\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff"+
            "\3\2\23\uffff\1\u0091\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4"+
            "\uffff\1\u0088",
            "\1\2\21\uffff\1\u00a0\36\uffff\1\6\11\uffff\3\2\1\u009e\1\uffff"+
            "\4\2\1\uffff\1\u009f\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff"+
            "\1\2\50\uffff\1\u00a1\22\uffff\1\6\2\uffff\1\6\12\uffff\1\6",
            "\1\2\21\uffff\1\u00b5\36\uffff\1\6\11\uffff\3\2\1\u00b3\1\uffff"+
            "\4\2\1\uffff\1\u00b4\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff"+
            "\1\2\50\uffff\1\u00b6\22\uffff\1\6\2\uffff\1\6\12\uffff\1\6",
            "\1\2\21\uffff\1\u00ca\36\uffff\1\6\11\uffff\3\2\1\u00c8\1\uffff"+
            "\4\2\1\uffff\1\u00c9\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff"+
            "\1\2\50\uffff\1\u00cb\22\uffff\1\6\2\uffff\1\6\12\uffff\1\6",
            "\1\u00de\14\uffff\1\u00dd\6\uffff\1\u00e1\100\uffff\1\u00e2"+
            "\55\uffff\1\u00e0\2\uffff\1\u00e0\7\uffff\1\u00df\2\uffff\1"+
            "\u00e0",
            "\1\2\60\uffff\1\6\11\uffff\3\2\2\uffff\4\2\2\uffff\13\2\1\uffff"+
            "\13\2\1\uffff\2\2\30\uffff\1\2\73\uffff\1\6\2\uffff\1\6\12\uffff"+
            "\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\6\60\uffff\1\u00f3\23\uffff\1\6\2\uffff\1\6\55\uffff\1\6"+
            "\45\uffff\1\6\27\uffff\1\u00fa\2\uffff\1\u00fa\7\uffff\1\u00f9"+
            "\2\uffff\1\u00fa\4\uffff\1\6",
            "\1\u00fd\12\uffff\1\2\6\uffff\1\u0100\50\uffff\1\u0108\1\u010b"+
            "\1\u010e\1\u00ff\1\uffff\1\u0103\2\u010e\1\u0107\1\uffff\1\u00fb"+
            "\1\u0105\1\u010e\1\u00fc\1\u0106\1\u0104\1\u010e\1\u0102\2\u0106"+
            "\1\u010e\1\u0107\1\uffff\1\u010a\1\u010e\1\u010c\1\u0103\1\u010e"+
            "\1\u0104\1\u010e\1\u0102\1\u010d\1\u0105\1\u010e\1\uffff\1\u0109"+
            "\1\u010e\26\uffff\1\u00fe\52\uffff\1\u0101",
            "\1\u0118\11\uffff\1\u0111\2\uffff\1\u0110\6\uffff\1\u011b\4"+
            "\uffff\1\u0112\1\uffff\1\u0116\4\uffff\1\u0113\5\uffff\1\u0112"+
            "\1\uffff\1\u0116\3\uffff\1\u0114\16\uffff\1\u011c\22\uffff\1"+
            "\u0115\6\uffff\1\u011d\1\u011e\1\u011f\33\uffff\1\u0122\6\uffff"+
            "\1\u0123\1\uffff\1\u0121\3\uffff\1\u0120\2\uffff\1\u011a\2\uffff"+
            "\1\u011a\7\uffff\1\u0119\1\uffff\1\u0120\1\u011a\4\uffff\1\u0117",
            "\1\u012a\14\uffff\1\u012e\6\uffff\1\u012d\4\uffff\1\u0124\1"+
            "\uffff\1\u0128\4\uffff\1\u0125\5\uffff\1\u0124\1\uffff\1\u0128"+
            "\3\uffff\1\u0126\16\uffff\1\u012f\22\uffff\1\u0127\6\uffff\1"+
            "\u0130\1\u0131\1\u0132\33\uffff\1\u0135\6\uffff\1\u0136\1\uffff"+
            "\1\u0134\3\uffff\1\u0133\2\uffff\1\u012c\2\uffff\1\u012c\7\uffff"+
            "\1\u012b\1\uffff\1\u0133\1\u012c\4\uffff\1\u0129",
            "\1\u013c\14\uffff\1\u0140\6\uffff\1\u013f\6\uffff\1\u013a\4"+
            "\uffff\1\u0137\7\uffff\1\u013a\3\uffff\1\u0138\16\uffff\1\u0141"+
            "\22\uffff\1\u0139\6\uffff\1\u0142\1\u0143\1\u0144\33\uffff\1"+
            "\u0147\6\uffff\1\u0148\1\uffff\1\u0146\3\uffff\1\u0145\2\uffff"+
            "\1\u013e\2\uffff\1\u013e\7\uffff\1\u013d\1\uffff\1\u0145\1\u013e"+
            "\4\uffff\1\u013b",
            "\1\u014d\14\uffff\1\u0151\6\uffff\1\u0150\6\uffff\1\u014b\14"+
            "\uffff\1\u014b\3\uffff\1\u0149\16\uffff\1\u0152\22\uffff\1\u014a"+
            "\6\uffff\1\u0153\1\u0154\1\u0155\33\uffff\1\u0158\6\uffff\1"+
            "\u0159\1\uffff\1\u0157\3\uffff\1\u0156\2\uffff\1\u014f\2\uffff"+
            "\1\u014f\7\uffff\1\u014e\1\uffff\1\u0156\1\u014f\4\uffff\1\u014c",
            "\1\u015d\14\uffff\1\u0161\6\uffff\1\u0160\6\uffff\1\u015b\14"+
            "\uffff\1\u015b\22\uffff\1\u0162\22\uffff\1\u015a\6\uffff\1\u0163"+
            "\1\u0164\1\u0165\33\uffff\1\u0168\6\uffff\1\u0169\1\uffff\1"+
            "\u0167\3\uffff\1\u0166\2\uffff\1\u015f\2\uffff\1\u015f\7\uffff"+
            "\1\u015e\1\uffff\1\u0166\1\u015f\4\uffff\1\u015c",
            "\1\u016c\14\uffff\1\u0170\6\uffff\1\u016f\6\uffff\1\u016a\14"+
            "\uffff\1\u016a\22\uffff\1\u0171\31\uffff\1\u0172\1\u0173\1\u0174"+
            "\33\uffff\1\u0177\6\uffff\1\u0178\1\uffff\1\u0176\3\uffff\1"+
            "\u0175\2\uffff\1\u016e\2\uffff\1\u016e\7\uffff\1\u016d\1\uffff"+
            "\1\u0175\1\u016e\4\uffff\1\u016b",
            "\1\u017a\14\uffff\1\u017e\6\uffff\1\u017d\46\uffff\1\u017f"+
            "\31\uffff\1\u0180\1\u0181\1\u0182\33\uffff\1\u0185\6\uffff\1"+
            "\u0186\1\uffff\1\u0184\3\uffff\1\u0183\2\uffff\1\u017c\2\uffff"+
            "\1\u017c\7\uffff\1\u017b\1\uffff\1\u0183\1\u017c\4\uffff\1\u0179",
            "",
            "\1\u018d\12\uffff\1\2\6\uffff\1\u0189\50\uffff\1\u0192\1\u0195"+
            "\1\u0198\1\u0187\1\uffff\1\u018d\2\u0198\1\u0191\1\uffff\1\u0188"+
            "\1\u018f\1\u0198\1\u018b\1\u0190\1\u018e\1\u0198\1\u018c\2\u0190"+
            "\1\u0198\1\u0191\1\uffff\1\u0194\1\u0198\1\u0196\1\u018d\1\u0198"+
            "\1\u018e\1\u0198\1\u018c\1\u0197\1\u018f\1\u0198\1\uffff\1\u0193"+
            "\1\u0198\26\uffff\1\u0199\52\uffff\1\u018a",
            "\1\u01a1\12\uffff\1\2\6\uffff\1\u019d\50\uffff\1\u01a6\1\u01a9"+
            "\1\u01ac\1\u019b\1\uffff\1\u01a1\2\u01ac\1\u01a5\1\uffff\1\u019c"+
            "\1\u01a3\1\u01ac\1\u019f\1\u01a4\1\u01a2\1\u01ac\1\u01a0\2\u01a4"+
            "\1\u01ac\1\u01a5\1\uffff\1\u01a8\1\u01ac\1\u01aa\1\u01a1\1\u01ac"+
            "\1\u01a2\1\u01ac\1\u01a0\1\u01ab\1\u01a3\1\u01ac\1\uffff\1\u01a7"+
            "\1\u01ac\26\uffff\1\u01ad\52\uffff\1\u019e",
            "\1\u01b0\14\uffff\1\u01af\6\uffff\1\u01b3\100\uffff\1\u01b4"+
            "\55\uffff\1\u01b2\2\uffff\1\u01b2\7\uffff\1\u01b1\2\uffff\1"+
            "\u01b2",
            "\1\u01b8\15\uffff\1\u01b5\42\uffff\1\u01b7\11\uffff\1\u01b9"+
            "\2\uffff\1\u01c3\6\uffff\1\u01c2\4\uffff\1\u01ba\1\uffff\1\u01be"+
            "\4\uffff\1\u01bb\5\uffff\1\u01ba\1\uffff\1\u01be\3\uffff\1\u01bc"+
            "\16\uffff\1\u01c4\22\uffff\1\u01bd\6\uffff\1\u01c5\1\u01c6\1"+
            "\u01c7\23\uffff\1\u01bf\7\uffff\1\u01ca\6\uffff\1\u01cb\1\uffff"+
            "\1\u01c9\3\uffff\1\u01c8\2\uffff\1\u01c1\2\uffff\1\u01c1\7\uffff"+
            "\1\u01c0\1\uffff\1\u01c8\1\u01c1\4\uffff\1\u01b6",
            "\1\u01cd\12\uffff\1\2\57\uffff\1\u01d2\1\u01d5\1\u01d8\2\uffff"+
            "\1\u01cd\2\u01d8\1\u01d1\2\uffff\1\u01cf\1\u01d8\2\u01d0\1\u01ce"+
            "\1\u01d8\1\u01cc\2\u01d0\1\u01d8\1\u01d1\1\uffff\1\u01d4\1\u01d8"+
            "\1\u01d6\1\u01cd\1\u01d8\1\u01ce\1\u01d8\1\u01cc\1\u01d7\1\u01cf"+
            "\1\u01d8\1\uffff\1\u01d3\1\u01d8\26\uffff\1\u01d9",
            "\1\u01dc\12\uffff\1\2\57\uffff\1\u01e1\1\u01e4\1\u01e7\2\uffff"+
            "\1\u01dc\2\u01e7\1\u01e0\2\uffff\1\u01de\1\u01e7\2\u01df\1\u01dd"+
            "\1\u01e7\1\u01db\2\u01df\1\u01e7\1\u01e0\1\uffff\1\u01e3\1\u01e7"+
            "\1\u01e5\1\u01dc\1\u01e7\1\u01dd\1\u01e7\1\u01db\1\u01e6\1\u01de"+
            "\1\u01e7\1\uffff\1\u01e2\1\u01e7\26\uffff\1\u01e8",
            "\1\u01eb\12\uffff\1\2\57\uffff\1\u01f0\1\u01f3\1\u01f6\2\uffff"+
            "\1\u01eb\2\u01f6\1\u01ef\2\uffff\1\u01ed\1\u01f6\2\u01ee\1\u01ec"+
            "\1\u01f6\1\u01ea\2\u01ee\1\u01f6\1\u01ef\1\uffff\1\u01f2\1\u01f6"+
            "\1\u01f4\1\u01eb\1\u01f6\1\u01ec\1\u01f6\1\u01ea\1\u01f5\1\u01ed"+
            "\1\u01f6\1\uffff\1\u01f1\1\u01f6\26\uffff\1\u01f7",
            "\1\u01fa\12\uffff\1\2\57\uffff\1\u01ff\1\u0202\1\u0205\2\uffff"+
            "\1\u01fa\2\u0205\1\u01fe\2\uffff\1\u01fc\1\u0205\2\u01fd\1\u01fb"+
            "\1\u0205\1\u01f9\2\u01fd\1\u0205\1\u01fe\1\uffff\1\u0201\1\u0205"+
            "\1\u0203\1\u01fa\1\u0205\1\u01fb\1\u0205\1\u01f9\1\u0204\1\u01fc"+
            "\1\u0205\1\uffff\1\u0200\1\u0205\26\uffff\1\u0206",
            "\1\u0209\12\uffff\1\2\57\uffff\1\u020e\1\u0211\1\u0214\2\uffff"+
            "\1\u0209\2\u0214\1\u020d\2\uffff\1\u020b\1\u0214\2\u020c\1\u020a"+
            "\1\u0214\1\u0208\2\u020c\1\u0214\1\u020d\1\uffff\1\u0210\1\u0214"+
            "\1\u0212\1\u0209\1\u0214\1\u020a\1\u0214\1\u0208\1\u0213\1\u020b"+
            "\1\u0214\1\uffff\1\u020f\1\u0214\26\uffff\1\u0215",
            "\1\u0217",
            "\1\u0218",
            "\1\u0219",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA55_eot = DFA.unpackEncodedString(DFA55_eotS);
    static final short[] DFA55_eof = DFA.unpackEncodedString(DFA55_eofS);
    static final char[] DFA55_min = DFA.unpackEncodedStringToUnsignedChars(DFA55_minS);
    static final char[] DFA55_max = DFA.unpackEncodedStringToUnsignedChars(DFA55_maxS);
    static final short[] DFA55_accept = DFA.unpackEncodedString(DFA55_acceptS);
    static final short[] DFA55_special = DFA.unpackEncodedString(DFA55_specialS);
    static final short[][] DFA55_transition;

    static {
        int numStates = DFA55_transitionS.length;
        DFA55_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA55_transition[i] = DFA.unpackEncodedString(DFA55_transitionS[i]);
        }
    }

    class DFA55 extends DFA {

        public DFA55(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 55;
            this.eot = DFA55_eot;
            this.eof = DFA55_eof;
            this.min = DFA55_min;
            this.max = DFA55_max;
            this.accept = DFA55_accept;
            this.special = DFA55_special;
            this.transition = DFA55_transition;
        }
        public String getDescription() {
            return "457:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )";
        }
    }
    static final String DFA62_eotS =
        "\u0892\uffff";
    static final String DFA62_eofS =
        "\u0892\uffff";
    static final String DFA62_minS =
        "\1\67\3\6\1\uffff\2\6\2\67\1\6\7\uffff\2\6\2\67\10\uffff\2\6\2\67"+
        "\10\uffff\10\67\3\6\1\67\6\6\3\104\1\6\1\uffff\1\6\10\67\3\6\1\67"+
        "\6\6\3\104\6\6\6\uffff\10\67\3\6\1\67\6\6\3\104\1\6\10\67\3\6\1"+
        "\67\6\6\3\104\7\6\10\67\3\6\1\67\6\6\3\104\1\6\10\67\3\6\1\67\6"+
        "\6\3\104\7\6\u07cc\uffff";
    static final String DFA62_maxS =
        "\4\u00cd\1\uffff\2\u00cd\2\u00c8\1\u00cd\7\uffff\2\u00cd\2\u00c8"+
        "\10\uffff\2\u00cd\2\u00c8\10\uffff\7\u00cd\1\u00c8\3\u00a7\1\u00c8"+
        "\1\u00cd\5\174\3\104\1\u00cd\1\uffff\10\u00cd\1\u00c8\3\u00a7\1"+
        "\u00c8\1\u00cd\5\176\3\104\6\u00cd\6\uffff\7\u00cd\1\u00c8\3\u00a7"+
        "\1\u00c8\1\u00cd\5\174\3\104\10\u00cd\1\u00c8\3\u00a7\1\u00c8\1"+
        "\u00cd\5\176\3\104\16\u00cd\1\u00c8\3\u00a7\1\u00c8\1\u00cd\5\174"+
        "\3\104\10\u00cd\1\u00c8\3\u00a7\1\u00c8\1\u00cd\5\176\3\104\7\u00cd"+
        "\u07cc\uffff";
    static final String DFA62_acceptS =
        "\4\uffff\1\2\5\uffff\1\1\u00bb\uffff\24\1\1\uffff\146\1\2\uffff"+
        "\u00aa\1\10\uffff\1\1\1\uffff\2\1\4\uffff\1\1\3\uffff\u011b\1\5"+
        "\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff"+
        "\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1"+
        "\3\uffff\u0124\1\10\uffff\u011b\1\5\uffff\1\1\3\uffff\2\1\5\uffff"+
        "\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1"+
        "\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff"+
        "\u0124\1\10\uffff\u011b\1\5\uffff\1\1\3\uffff\2\1\5\uffff\2\1\3"+
        "\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff"+
        "\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff";
    static final String DFA62_specialS =
        "\u0892\uffff}>";
    static final String[] DFA62_transitionS = {
            "\1\1\152\uffff\1\4\27\uffff\1\3\2\uffff\1\3\7\uffff\1\2\2\uffff"+
            "\1\3\4\uffff\1\4",
            "\1\11\12\uffff\1\4\6\uffff\1\7\36\uffff\1\12\13\uffff\1\4\1"+
            "\5\2\uffff\2\4\2\uffff\1\6\1\uffff\1\4\3\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1"+
            "\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\10\22\uffff\1\12\2\uffff"+
            "\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\12\12\uffff\1\4\6\uffff\1\23\36\uffff\1\12\13\uffff\1\4"+
            "\1\21\2\uffff\2\4\2\uffff\1\22\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\24\22\uffff\1\12\2"+
            "\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\12\12\uffff\1\4\6\uffff\1\37\36\uffff\1\12\13\uffff\1\4"+
            "\1\35\2\uffff\2\4\2\uffff\1\36\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\40\22\uffff\1\12\2"+
            "\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "",
            "\1\51\60\uffff\1\61\11\uffff\1\52\2\uffff\1\65\6\uffff\1\64"+
            "\4\uffff\1\53\1\uffff\1\57\4\uffff\1\54\5\uffff\1\53\1\uffff"+
            "\1\57\3\uffff\1\55\16\uffff\1\66\11\uffff\1\76\10\uffff\1\56"+
            "\6\uffff\1\67\1\70\1\71\23\uffff\1\4\7\uffff\1\74\6\uffff\1"+
            "\75\1\uffff\1\73\3\uffff\1\72\2\uffff\1\63\2\uffff\1\63\7\uffff"+
            "\1\62\1\uffff\1\72\1\63\4\uffff\1\60",
            "\1\101\60\uffff\1\111\11\uffff\1\102\2\uffff\1\115\6\uffff"+
            "\1\114\4\uffff\1\103\1\uffff\1\107\4\uffff\1\104\5\uffff\1\103"+
            "\1\uffff\1\107\3\uffff\1\105\16\uffff\1\116\13\uffff\1\100\6"+
            "\uffff\1\106\6\uffff\1\117\1\120\1\121\33\uffff\1\124\6\uffff"+
            "\1\125\1\uffff\1\123\3\uffff\1\122\2\uffff\1\113\2\uffff\1\113"+
            "\7\uffff\1\112\1\uffff\1\122\1\113\4\uffff\1\110",
            "\1\126\u0082\uffff\1\130\2\uffff\1\130\7\uffff\1\127\2\uffff"+
            "\1\130",
            "\1\131\u0082\uffff\1\133\2\uffff\1\133\7\uffff\1\132\2\uffff"+
            "\1\133",
            "\1\12\60\uffff\1\12\14\uffff\1\4\135\uffff\1\12\27\uffff\1"+
            "\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\142\60\uffff\1\152\11\uffff\1\143\2\uffff\1\156\6\uffff"+
            "\1\155\4\uffff\1\144\1\uffff\1\150\4\uffff\1\145\5\uffff\1\144"+
            "\1\uffff\1\150\3\uffff\1\146\16\uffff\1\157\11\uffff\1\167\10"+
            "\uffff\1\147\6\uffff\1\160\1\161\1\162\33\uffff\1\165\6\uffff"+
            "\1\166\1\uffff\1\164\3\uffff\1\163\2\uffff\1\154\2\uffff\1\154"+
            "\7\uffff\1\153\1\uffff\1\163\1\154\4\uffff\1\151",
            "\1\170\60\uffff\1\u0080\11\uffff\1\171\2\uffff\1\u0084\6\uffff"+
            "\1\u0083\4\uffff\1\172\1\uffff\1\176\4\uffff\1\173\5\uffff\1"+
            "\172\1\uffff\1\176\3\uffff\1\174\16\uffff\1\u0085\13\uffff\1"+
            "\u008d\6\uffff\1\175\6\uffff\1\u0086\1\u0087\1\u0088\33\uffff"+
            "\1\u008b\6\uffff\1\u008c\1\uffff\1\u008a\3\uffff\1\u0089\2\uffff"+
            "\1\u0082\2\uffff\1\u0082\7\uffff\1\u0081\1\uffff\1\u0089\1\u0082"+
            "\4\uffff\1\177",
            "\1\u008e\u0082\uffff\1\u0090\2\uffff\1\u0090\7\uffff\1\u008f"+
            "\2\uffff\1\u0090",
            "\1\u0091\u0082\uffff\1\u0093\2\uffff\1\u0093\7\uffff\1\u0092"+
            "\2\uffff\1\u0093",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0094\60\uffff\1\u009c\11\uffff\1\u0095\2\uffff\1\u00a0"+
            "\6\uffff\1\u009f\4\uffff\1\u0096\1\uffff\1\u009a\4\uffff\1\u0097"+
            "\5\uffff\1\u0096\1\uffff\1\u009a\3\uffff\1\u0098\16\uffff\1"+
            "\u00a1\11\uffff\1\u00a9\10\uffff\1\u0099\6\uffff\1\u00a2\1\u00a3"+
            "\1\u00a4\33\uffff\1\u00a7\6\uffff\1\u00a8\1\uffff\1\u00a6\3"+
            "\uffff\1\u00a5\2\uffff\1\u009e\2\uffff\1\u009e\7\uffff\1\u009d"+
            "\1\uffff\1\u00a5\1\u009e\4\uffff\1\u009b",
            "\1\u00aa\60\uffff\1\u00b2\11\uffff\1\u00ab\2\uffff\1\u00b6"+
            "\6\uffff\1\u00b5\4\uffff\1\u00ac\1\uffff\1\u00b0\4\uffff\1\u00ad"+
            "\5\uffff\1\u00ac\1\uffff\1\u00b0\3\uffff\1\u00ae\16\uffff\1"+
            "\u00b7\13\uffff\1\u00bf\6\uffff\1\u00af\6\uffff\1\u00b8\1\u00b9"+
            "\1\u00ba\33\uffff\1\u00bd\6\uffff\1\u00be\1\uffff\1\u00bc\3"+
            "\uffff\1\u00bb\2\uffff\1\u00b4\2\uffff\1\u00b4\7\uffff\1\u00b3"+
            "\1\uffff\1\u00bb\1\u00b4\4\uffff\1\u00b1",
            "\1\u00c0\u0082\uffff\1\u00c2\2\uffff\1\u00c2\7\uffff\1\u00c1"+
            "\2\uffff\1\u00c2",
            "\1\u00c3\u0082\uffff\1\u00c5\2\uffff\1\u00c5\7\uffff\1\u00c4"+
            "\2\uffff\1\u00c5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ce\11\uffff\1\u00c7\2\uffff\1\u00c6\6\uffff\1\u00d1\4"+
            "\uffff\1\u00c8\1\uffff\1\u00cc\4\uffff\1\u00c9\5\uffff\1\u00c8"+
            "\1\uffff\1\u00cc\3\uffff\1\u00ca\16\uffff\1\u00d2\22\uffff\1"+
            "\u00cb\6\uffff\1\u00d3\1\u00d4\1\u00d5\23\uffff\1\4\7\uffff"+
            "\1\u00d8\6\uffff\1\u00d9\1\uffff\1\u00d7\3\uffff\1\u00d6\2\uffff"+
            "\1\u00d0\2\uffff\1\u00d0\7\uffff\1\u00cf\1\uffff\1\u00d6\1\u00d0"+
            "\4\uffff\1\u00cd",
            "\1\u00e1\14\uffff\1\u00e5\6\uffff\1\u00e4\4\uffff\1\u00db\1"+
            "\uffff\1\u00df\4\uffff\1\u00dc\5\uffff\1\u00db\1\uffff\1\u00df"+
            "\3\uffff\1\u00dd\16\uffff\1\u00e6\22\uffff\1\u00de\6\uffff\1"+
            "\u00e7\1\u00e8\1\u00e9\33\uffff\1\u00ec\6\uffff\1\u00ed\1\uffff"+
            "\1\u00eb\3\uffff\1\u00ea\2\uffff\1\u00e3\2\uffff\1\u00e3\7\uffff"+
            "\1\u00e2\1\uffff\1\u00ea\1\u00e3\4\uffff\1\u00e0",
            "\1\u00f3\14\uffff\1\u00f7\6\uffff\1\u00f6\6\uffff\1\u00f1\4"+
            "\uffff\1\u00ee\7\uffff\1\u00f1\3\uffff\1\u00ef\16\uffff\1\u00f8"+
            "\22\uffff\1\u00f0\6\uffff\1\u00f9\1\u00fa\1\u00fb\33\uffff\1"+
            "\u00fe\6\uffff\1\u00ff\1\uffff\1\u00fd\3\uffff\1\u00fc\2\uffff"+
            "\1\u00f5\2\uffff\1\u00f5\7\uffff\1\u00f4\1\uffff\1\u00fc\1\u00f5"+
            "\4\uffff\1\u00f2",
            "\1\u0104\14\uffff\1\u0108\6\uffff\1\u0107\6\uffff\1\u0102\14"+
            "\uffff\1\u0102\3\uffff\1\u0100\16\uffff\1\u0109\22\uffff\1\u0101"+
            "\6\uffff\1\u010a\1\u010b\1\u010c\33\uffff\1\u010f\6\uffff\1"+
            "\u0110\1\uffff\1\u010e\3\uffff\1\u010d\2\uffff\1\u0106\2\uffff"+
            "\1\u0106\7\uffff\1\u0105\1\uffff\1\u010d\1\u0106\4\uffff\1\u0103",
            "\1\u0114\14\uffff\1\u0118\6\uffff\1\u0117\6\uffff\1\u0112\14"+
            "\uffff\1\u0112\22\uffff\1\u0119\22\uffff\1\u0111\6\uffff\1\u011a"+
            "\1\u011b\1\u011c\33\uffff\1\u011f\6\uffff\1\u0120\1\uffff\1"+
            "\u011e\3\uffff\1\u011d\2\uffff\1\u0116\2\uffff\1\u0116\7\uffff"+
            "\1\u0115\1\uffff\1\u011d\1\u0116\4\uffff\1\u0113",
            "\1\u0123\14\uffff\1\u0127\6\uffff\1\u0126\6\uffff\1\u0121\14"+
            "\uffff\1\u0121\22\uffff\1\u0128\31\uffff\1\u0129\1\u012a\1\u012b"+
            "\33\uffff\1\u012e\6\uffff\1\u012f\1\uffff\1\u012d\3\uffff\1"+
            "\u012c\2\uffff\1\u0125\2\uffff\1\u0125\7\uffff\1\u0124\1\uffff"+
            "\1\u012c\1\u0125\4\uffff\1\u0122",
            "\1\u0131\14\uffff\1\u0135\6\uffff\1\u0134\46\uffff\1\u0136"+
            "\31\uffff\1\u0137\1\u0138\1\u0139\33\uffff\1\u013c\6\uffff\1"+
            "\u013d\1\uffff\1\u013b\3\uffff\1\u013a\2\uffff\1\u0133\2\uffff"+
            "\1\u0133\7\uffff\1\u0132\1\uffff\1\u013a\1\u0133\4\uffff\1\u0130",
            "\1\u013e\23\uffff\1\4\60\uffff\1\4\75\uffff\1\u0140\2\uffff"+
            "\1\u0140\7\uffff\1\u013f\2\uffff\1\u0140",
            "\1\u0149\12\uffff\1\u0155\6\uffff\1\u0145\50\uffff\1\u014e"+
            "\1\u0151\1\u0154\1\u0143\1\uffff\1\u0149\2\u0154\1\u014d\1\uffff"+
            "\1\u0144\1\u014b\1\u0154\1\u0147\1\u014c\1\u014a\1\u0154\1\u0148"+
            "\2\u014c\1\u0154\1\u014d\1\uffff\1\u0150\1\u0154\1\u0152\1\u0149"+
            "\1\u0154\1\u014a\1\u0154\1\u0148\1\u0153\1\u014b\1\u0154\1\uffff"+
            "\1\u014f\1\u0154\26\uffff\1\u0156\52\uffff\1\u0146",
            "\1\u015d\12\uffff\1\u0169\6\uffff\1\u0159\50\uffff\1\u0162"+
            "\1\u0165\1\u0168\1\u0157\1\uffff\1\u015d\2\u0168\1\u0161\1\uffff"+
            "\1\u0158\1\u015f\1\u0168\1\u015b\1\u0160\1\u015e\1\u0168\1\u015c"+
            "\2\u0160\1\u0168\1\u0161\1\uffff\1\u0164\1\u0168\1\u0166\1\u015d"+
            "\1\u0168\1\u015e\1\u0168\1\u015c\1\u0167\1\u015f\1\u0168\1\uffff"+
            "\1\u0163\1\u0168\26\uffff\1\u016a\52\uffff\1\u015a",
            "\1\u0171\12\uffff\1\u017d\6\uffff\1\u016d\50\uffff\1\u0176"+
            "\1\u0179\1\u017c\1\u016b\1\uffff\1\u0171\2\u017c\1\u0175\1\uffff"+
            "\1\u016c\1\u0173\1\u017c\1\u016f\1\u0174\1\u0172\1\u017c\1\u0170"+
            "\2\u0174\1\u017c\1\u0175\1\uffff\1\u0178\1\u017c\1\u017a\1\u0171"+
            "\1\u017c\1\u0172\1\u017c\1\u0170\1\u017b\1\u0173\1\u017c\1\uffff"+
            "\1\u0177\1\u017c\26\uffff\1\u017e\52\uffff\1\u016e",
            "\1\u0180\14\uffff\1\u017f\6\uffff\1\u0183\100\uffff\1\u0184"+
            "\55\uffff\1\u0182\2\uffff\1\u0182\7\uffff\1\u0181\2\uffff\1"+
            "\u0182",
            "\1\u0188\15\uffff\1\u0185\42\uffff\1\u0187\11\uffff\1\u0189"+
            "\2\uffff\1\u0193\6\uffff\1\u0192\4\uffff\1\u018a\1\uffff\1\u018e"+
            "\4\uffff\1\u018b\5\uffff\1\u018a\1\uffff\1\u018e\3\uffff\1\u018c"+
            "\16\uffff\1\u0194\22\uffff\1\u018d\6\uffff\1\u0195\1\u0196\1"+
            "\u0197\23\uffff\1\u018f\7\uffff\1\u019a\6\uffff\1\u019b\1\uffff"+
            "\1\u0199\3\uffff\1\u0198\2\uffff\1\u0191\2\uffff\1\u0191\7\uffff"+
            "\1\u0190\1\uffff\1\u0198\1\u0191\4\uffff\1\u0186",
            "\1\u019d\12\uffff\1\u01a9\57\uffff\1\u01a2\1\u01a5\1\u01a8"+
            "\2\uffff\1\u019d\2\u01a8\1\u01a1\2\uffff\1\u019f\1\u01a8\2\u01a0"+
            "\1\u019e\1\u01a8\1\u019c\2\u01a0\1\u01a8\1\u01a1\1\uffff\1\u01a4"+
            "\1\u01a8\1\u01a6\1\u019d\1\u01a8\1\u019e\1\u01a8\1\u019c\1\u01a7"+
            "\1\u019f\1\u01a8\1\uffff\1\u01a3\1\u01a8\26\uffff\1\u01aa",
            "\1\u01ac\12\uffff\1\u01b8\57\uffff\1\u01b1\1\u01b4\1\u01b7"+
            "\2\uffff\1\u01ac\2\u01b7\1\u01b0\2\uffff\1\u01ae\1\u01b7\2\u01af"+
            "\1\u01ad\1\u01b7\1\u01ab\2\u01af\1\u01b7\1\u01b0\1\uffff\1\u01b3"+
            "\1\u01b7\1\u01b5\1\u01ac\1\u01b7\1\u01ad\1\u01b7\1\u01ab\1\u01b6"+
            "\1\u01ae\1\u01b7\1\uffff\1\u01b2\1\u01b7\26\uffff\1\u01b9",
            "\1\u01bb\12\uffff\1\u01c7\57\uffff\1\u01c0\1\u01c3\1\u01c6"+
            "\2\uffff\1\u01bb\2\u01c6\1\u01bf\2\uffff\1\u01bd\1\u01c6\2\u01be"+
            "\1\u01bc\1\u01c6\1\u01ba\2\u01be\1\u01c6\1\u01bf\1\uffff\1\u01c2"+
            "\1\u01c6\1\u01c4\1\u01bb\1\u01c6\1\u01bc\1\u01c6\1\u01ba\1\u01c5"+
            "\1\u01bd\1\u01c6\1\uffff\1\u01c1\1\u01c6\26\uffff\1\u01c8",
            "\1\u01ca\12\uffff\1\u01d6\57\uffff\1\u01cf\1\u01d2\1\u01d5"+
            "\2\uffff\1\u01ca\2\u01d5\1\u01ce\2\uffff\1\u01cc\1\u01d5\2\u01cd"+
            "\1\u01cb\1\u01d5\1\u01c9\2\u01cd\1\u01d5\1\u01ce\1\uffff\1\u01d1"+
            "\1\u01d5\1\u01d3\1\u01ca\1\u01d5\1\u01cb\1\u01d5\1\u01c9\1\u01d4"+
            "\1\u01cc\1\u01d5\1\uffff\1\u01d0\1\u01d5\26\uffff\1\u01d7",
            "\1\u01d9\12\uffff\1\u01e5\57\uffff\1\u01de\1\u01e1\1\u01e4"+
            "\2\uffff\1\u01d9\2\u01e4\1\u01dd\2\uffff\1\u01db\1\u01e4\2\u01dc"+
            "\1\u01da\1\u01e4\1\u01d8\2\u01dc\1\u01e4\1\u01dd\1\uffff\1\u01e0"+
            "\1\u01e4\1\u01e2\1\u01d9\1\u01e4\1\u01da\1\u01e4\1\u01d8\1\u01e3"+
            "\1\u01db\1\u01e4\1\uffff\1\u01df\1\u01e4\26\uffff\1\u01e6",
            "\1\u01e7",
            "\1\u01e8",
            "\1\u01e9",
            "\1\12\12\uffff\1\4\6\uffff\1\u01eb\36\uffff\1\12\13\uffff\1"+
            "\4\3\uffff\2\4\2\uffff\1\u01ea\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u01ec\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "",
            "\1\u01f5\12\uffff\1\4\6\uffff\1\u01f7\36\uffff\1\12\13\uffff"+
            "\2\4\2\uffff\2\4\2\uffff\1\u01fd\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u01f8\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\u0209\11\uffff\1\u0202\2\uffff\1\u0201\6\uffff\1\u020c\4"+
            "\uffff\1\u0203\1\uffff\1\u0207\4\uffff\1\u0204\5\uffff\1\u0203"+
            "\1\uffff\1\u0207\3\uffff\1\u0205\16\uffff\1\u020d\22\uffff\1"+
            "\u0206\6\uffff\1\u020e\1\u020f\1\u0210\33\uffff\1\u0213\6\uffff"+
            "\1\u0214\1\uffff\1\u0212\3\uffff\1\u0211\2\uffff\1\u020b\2\uffff"+
            "\1\u020b\7\uffff\1\u020a\1\uffff\1\u0211\1\u020b\4\uffff\1\u0208",
            "\1\u021b\14\uffff\1\u021f\6\uffff\1\u021e\4\uffff\1\u0215\1"+
            "\uffff\1\u0219\4\uffff\1\u0216\5\uffff\1\u0215\1\uffff\1\u0219"+
            "\3\uffff\1\u0217\16\uffff\1\u0220\22\uffff\1\u0218\6\uffff\1"+
            "\u0221\1\u0222\1\u0223\33\uffff\1\u0226\6\uffff\1\u0227\1\uffff"+
            "\1\u0225\3\uffff\1\u0224\2\uffff\1\u021d\2\uffff\1\u021d\7\uffff"+
            "\1\u021c\1\uffff\1\u0224\1\u021d\4\uffff\1\u021a",
            "\1\u022d\14\uffff\1\u0231\6\uffff\1\u0230\6\uffff\1\u022b\4"+
            "\uffff\1\u0228\7\uffff\1\u022b\3\uffff\1\u0229\16\uffff\1\u0232"+
            "\22\uffff\1\u022a\6\uffff\1\u0233\1\u0234\1\u0235\33\uffff\1"+
            "\u0238\6\uffff\1\u0239\1\uffff\1\u0237\3\uffff\1\u0236\2\uffff"+
            "\1\u022f\2\uffff\1\u022f\7\uffff\1\u022e\1\uffff\1\u0236\1\u022f"+
            "\4\uffff\1\u022c",
            "\1\u023e\14\uffff\1\u0242\6\uffff\1\u0241\6\uffff\1\u023c\14"+
            "\uffff\1\u023c\3\uffff\1\u023a\16\uffff\1\u0243\22\uffff\1\u023b"+
            "\6\uffff\1\u0244\1\u0245\1\u0246\33\uffff\1\u0249\6\uffff\1"+
            "\u024a\1\uffff\1\u0248\3\uffff\1\u0247\2\uffff\1\u0240\2\uffff"+
            "\1\u0240\7\uffff\1\u023f\1\uffff\1\u0247\1\u0240\4\uffff\1\u023d",
            "\1\u024e\14\uffff\1\u0252\6\uffff\1\u0251\6\uffff\1\u024c\14"+
            "\uffff\1\u024c\22\uffff\1\u0253\22\uffff\1\u024b\6\uffff\1\u0254"+
            "\1\u0255\1\u0256\33\uffff\1\u0259\6\uffff\1\u025a\1\uffff\1"+
            "\u0258\3\uffff\1\u0257\2\uffff\1\u0250\2\uffff\1\u0250\7\uffff"+
            "\1\u024f\1\uffff\1\u0257\1\u0250\4\uffff\1\u024d",
            "\1\u025d\14\uffff\1\u0261\6\uffff\1\u0260\6\uffff\1\u025b\14"+
            "\uffff\1\u025b\22\uffff\1\u0262\31\uffff\1\u0263\1\u0264\1\u0265"+
            "\33\uffff\1\u0268\6\uffff\1\u0269\1\uffff\1\u0267\3\uffff\1"+
            "\u0266\2\uffff\1\u025f\2\uffff\1\u025f\7\uffff\1\u025e\1\uffff"+
            "\1\u0266\1\u025f\4\uffff\1\u025c",
            "\1\u026b\14\uffff\1\u026f\6\uffff\1\u026e\46\uffff\1\u0270"+
            "\31\uffff\1\u0271\1\u0272\1\u0273\33\uffff\1\u0276\6\uffff\1"+
            "\u0277\1\uffff\1\u0275\3\uffff\1\u0274\2\uffff\1\u026d\2\uffff"+
            "\1\u026d\7\uffff\1\u026c\1\uffff\1\u0274\1\u026d\4\uffff\1\u026a",
            "\1\u0278\u0082\uffff\1\u027a\2\uffff\1\u027a\7\uffff\1\u0279"+
            "\2\uffff\1\u027a",
            "\1\u0281\21\uffff\1\u027d\50\uffff\1\u0286\1\u0289\1\u028c"+
            "\1\u027b\1\uffff\1\u0281\2\u028c\1\u0285\1\uffff\1\u027c\1\u0283"+
            "\1\u028c\1\u027f\1\u0284\1\u0282\1\u028c\1\u0280\2\u0284\1\u028c"+
            "\1\u0285\1\uffff\1\u0288\1\u028c\1\u028a\1\u0281\1\u028c\1\u0282"+
            "\1\u028c\1\u0280\1\u028b\1\u0283\1\u028c\1\uffff\1\u0287\1\u028c"+
            "\30\uffff\1\u028d\50\uffff\1\u027e",
            "\1\u0294\21\uffff\1\u0290\50\uffff\1\u0299\1\u029c\1\u029f"+
            "\1\u028e\1\uffff\1\u0294\2\u029f\1\u0298\1\uffff\1\u028f\1\u0296"+
            "\1\u029f\1\u0292\1\u0297\1\u0295\1\u029f\1\u0293\2\u0297\1\u029f"+
            "\1\u0298\1\uffff\1\u029b\1\u029f\1\u029d\1\u0294\1\u029f\1\u0295"+
            "\1\u029f\1\u0293\1\u029e\1\u0296\1\u029f\1\uffff\1\u029a\1\u029f"+
            "\30\uffff\1\u02a0\50\uffff\1\u0291",
            "\1\u02a7\21\uffff\1\u02a3\50\uffff\1\u02ac\1\u02af\1\u02b2"+
            "\1\u02a1\1\uffff\1\u02a7\2\u02b2\1\u02ab\1\uffff\1\u02a2\1\u02a9"+
            "\1\u02b2\1\u02a5\1\u02aa\1\u02a8\1\u02b2\1\u02a6\2\u02aa\1\u02b2"+
            "\1\u02ab\1\uffff\1\u02ae\1\u02b2\1\u02b0\1\u02a7\1\u02b2\1\u02a8"+
            "\1\u02b2\1\u02a6\1\u02b1\1\u02a9\1\u02b2\1\uffff\1\u02ad\1\u02b2"+
            "\30\uffff\1\u02b3\50\uffff\1\u02a4",
            "\1\u02b5\14\uffff\1\u02b4\6\uffff\1\u02b8\100\uffff\1\u02b9"+
            "\55\uffff\1\u02b7\2\uffff\1\u02b7\7\uffff\1\u02b6\2\uffff\1"+
            "\u02b7",
            "\1\u02bd\15\uffff\1\u02ba\42\uffff\1\u02bc\11\uffff\1\u02be"+
            "\2\uffff\1\u02c8\6\uffff\1\u02c7\4\uffff\1\u02bf\1\uffff\1\u02c3"+
            "\4\uffff\1\u02c0\5\uffff\1\u02bf\1\uffff\1\u02c3\3\uffff\1\u02c1"+
            "\16\uffff\1\u02c9\22\uffff\1\u02c2\6\uffff\1\u02ca\1\u02cb\1"+
            "\u02cc\23\uffff\1\u02c4\7\uffff\1\u02cf\6\uffff\1\u02d0\1\uffff"+
            "\1\u02ce\3\uffff\1\u02cd\2\uffff\1\u02c6\2\uffff\1\u02c6\7\uffff"+
            "\1\u02c5\1\uffff\1\u02cd\1\u02c6\4\uffff\1\u02bb",
            "\1\u02d2\72\uffff\1\u02d7\1\u02da\1\u02dd\2\uffff\1\u02d2\2"+
            "\u02dd\1\u02d6\2\uffff\1\u02d4\1\u02dd\2\u02d5\1\u02d3\1\u02dd"+
            "\1\u02d1\2\u02d5\1\u02dd\1\u02d6\1\uffff\1\u02d9\1\u02dd\1\u02db"+
            "\1\u02d2\1\u02dd\1\u02d3\1\u02dd\1\u02d1\1\u02dc\1\u02d4\1\u02dd"+
            "\1\uffff\1\u02d8\1\u02dd\30\uffff\1\u02de",
            "\1\u02e0\72\uffff\1\u02e5\1\u02e8\1\u02eb\2\uffff\1\u02e0\2"+
            "\u02eb\1\u02e4\2\uffff\1\u02e2\1\u02eb\2\u02e3\1\u02e1\1\u02eb"+
            "\1\u02df\2\u02e3\1\u02eb\1\u02e4\1\uffff\1\u02e7\1\u02eb\1\u02e9"+
            "\1\u02e0\1\u02eb\1\u02e1\1\u02eb\1\u02df\1\u02ea\1\u02e2\1\u02eb"+
            "\1\uffff\1\u02e6\1\u02eb\30\uffff\1\u02ec",
            "\1\u02ee\72\uffff\1\u02f3\1\u02f6\1\u02f9\2\uffff\1\u02ee\2"+
            "\u02f9\1\u02f2\2\uffff\1\u02f0\1\u02f9\2\u02f1\1\u02ef\1\u02f9"+
            "\1\u02ed\2\u02f1\1\u02f9\1\u02f2\1\uffff\1\u02f5\1\u02f9\1\u02f7"+
            "\1\u02ee\1\u02f9\1\u02ef\1\u02f9\1\u02ed\1\u02f8\1\u02f0\1\u02f9"+
            "\1\uffff\1\u02f4\1\u02f9\30\uffff\1\u02fa",
            "\1\u02fc\72\uffff\1\u0301\1\u0304\1\u0307\2\uffff\1\u02fc\2"+
            "\u0307\1\u0300\2\uffff\1\u02fe\1\u0307\2\u02ff\1\u02fd\1\u0307"+
            "\1\u02fb\2\u02ff\1\u0307\1\u0300\1\uffff\1\u0303\1\u0307\1\u0305"+
            "\1\u02fc\1\u0307\1\u02fd\1\u0307\1\u02fb\1\u0306\1\u02fe\1\u0307"+
            "\1\uffff\1\u0302\1\u0307\30\uffff\1\u0308",
            "\1\u030a\72\uffff\1\u030f\1\u0312\1\u0315\2\uffff\1\u030a\2"+
            "\u0315\1\u030e\2\uffff\1\u030c\1\u0315\2\u030d\1\u030b\1\u0315"+
            "\1\u0309\2\u030d\1\u0315\1\u030e\1\uffff\1\u0311\1\u0315\1\u0313"+
            "\1\u030a\1\u0315\1\u030b\1\u0315\1\u0309\1\u0314\1\u030c\1\u0315"+
            "\1\uffff\1\u0310\1\u0315\30\uffff\1\u0316",
            "\1\u0317",
            "\1\u0318",
            "\1\u0319",
            "\1\12\12\uffff\1\4\6\uffff\1\u0321\36\uffff\1\12\13\uffff\1"+
            "\4\1\u031a\2\uffff\2\4\2\uffff\1\u031b\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u0322\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u032d\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0326\2\uffff\2\4\2\uffff\1\u0327\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u032e\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u0339\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0332\2\uffff\2\4\2\uffff\1\u0333\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u033a\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u0345\36\uffff\1\12\13\uffff\1"+
            "\4\1\u033e\2\uffff\2\4\2\uffff\1\u033f\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u0346\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u0351\36\uffff\1\12\13\uffff\1"+
            "\4\1\u034a\2\uffff\2\4\2\uffff\1\u034b\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u0352\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u035d\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0356\2\uffff\2\4\2\uffff\1\u0357\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u035e\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u036a\11\uffff\1\u0363\2\uffff\1\u0362\6\uffff\1\u036d\4"+
            "\uffff\1\u0364\1\uffff\1\u0368\4\uffff\1\u0365\5\uffff\1\u0364"+
            "\1\uffff\1\u0368\3\uffff\1\u0366\16\uffff\1\u036e\22\uffff\1"+
            "\u0367\6\uffff\1\u036f\1\u0370\1\u0371\33\uffff\1\u0374\6\uffff"+
            "\1\u0375\1\uffff\1\u0373\3\uffff\1\u0372\2\uffff\1\u036c\2\uffff"+
            "\1\u036c\7\uffff\1\u036b\1\uffff\1\u0372\1\u036c\4\uffff\1\u0369",
            "\1\u037c\14\uffff\1\u0380\6\uffff\1\u037f\4\uffff\1\u0376\1"+
            "\uffff\1\u037a\4\uffff\1\u0377\5\uffff\1\u0376\1\uffff\1\u037a"+
            "\3\uffff\1\u0378\16\uffff\1\u0381\22\uffff\1\u0379\6\uffff\1"+
            "\u0382\1\u0383\1\u0384\33\uffff\1\u0387\6\uffff\1\u0388\1\uffff"+
            "\1\u0386\3\uffff\1\u0385\2\uffff\1\u037e\2\uffff\1\u037e\7\uffff"+
            "\1\u037d\1\uffff\1\u0385\1\u037e\4\uffff\1\u037b",
            "\1\u038e\14\uffff\1\u0392\6\uffff\1\u0391\6\uffff\1\u038c\4"+
            "\uffff\1\u0389\7\uffff\1\u038c\3\uffff\1\u038a\16\uffff\1\u0393"+
            "\22\uffff\1\u038b\6\uffff\1\u0394\1\u0395\1\u0396\33\uffff\1"+
            "\u0399\6\uffff\1\u039a\1\uffff\1\u0398\3\uffff\1\u0397\2\uffff"+
            "\1\u0390\2\uffff\1\u0390\7\uffff\1\u038f\1\uffff\1\u0397\1\u0390"+
            "\4\uffff\1\u038d",
            "\1\u039f\14\uffff\1\u03a3\6\uffff\1\u03a2\6\uffff\1\u039d\14"+
            "\uffff\1\u039d\3\uffff\1\u039b\16\uffff\1\u03a4\22\uffff\1\u039c"+
            "\6\uffff\1\u03a5\1\u03a6\1\u03a7\33\uffff\1\u03aa\6\uffff\1"+
            "\u03ab\1\uffff\1\u03a9\3\uffff\1\u03a8\2\uffff\1\u03a1\2\uffff"+
            "\1\u03a1\7\uffff\1\u03a0\1\uffff\1\u03a8\1\u03a1\4\uffff\1\u039e",
            "\1\u03af\14\uffff\1\u03b3\6\uffff\1\u03b2\6\uffff\1\u03ad\14"+
            "\uffff\1\u03ad\22\uffff\1\u03b4\22\uffff\1\u03ac\6\uffff\1\u03b5"+
            "\1\u03b6\1\u03b7\33\uffff\1\u03ba\6\uffff\1\u03bb\1\uffff\1"+
            "\u03b9\3\uffff\1\u03b8\2\uffff\1\u03b1\2\uffff\1\u03b1\7\uffff"+
            "\1\u03b0\1\uffff\1\u03b8\1\u03b1\4\uffff\1\u03ae",
            "\1\u03be\14\uffff\1\u03c2\6\uffff\1\u03c1\6\uffff\1\u03bc\14"+
            "\uffff\1\u03bc\22\uffff\1\u03c3\31\uffff\1\u03c4\1\u03c5\1\u03c6"+
            "\33\uffff\1\u03c9\6\uffff\1\u03ca\1\uffff\1\u03c8\3\uffff\1"+
            "\u03c7\2\uffff\1\u03c0\2\uffff\1\u03c0\7\uffff\1\u03bf\1\uffff"+
            "\1\u03c7\1\u03c0\4\uffff\1\u03bd",
            "\1\u03cc\14\uffff\1\u03d0\6\uffff\1\u03cf\46\uffff\1\u03d1"+
            "\31\uffff\1\u03d2\1\u03d3\1\u03d4\33\uffff\1\u03d7\6\uffff\1"+
            "\u03d8\1\uffff\1\u03d6\3\uffff\1\u03d5\2\uffff\1\u03ce\2\uffff"+
            "\1\u03ce\7\uffff\1\u03cd\1\uffff\1\u03d5\1\u03ce\4\uffff\1\u03cb",
            "\1\u03d9\u0082\uffff\1\u03db\2\uffff\1\u03db\7\uffff\1\u03da"+
            "\2\uffff\1\u03db",
            "\1\u03e2\12\uffff\1\u03ee\6\uffff\1\u03de\50\uffff\1\u03e7"+
            "\1\u03ea\1\u03ed\1\u03dc\1\uffff\1\u03e2\2\u03ed\1\u03e6\1\uffff"+
            "\1\u03dd\1\u03e4\1\u03ed\1\u03e0\1\u03e5\1\u03e3\1\u03ed\1\u03e1"+
            "\2\u03e5\1\u03ed\1\u03e6\1\uffff\1\u03e9\1\u03ed\1\u03eb\1\u03e2"+
            "\1\u03ed\1\u03e3\1\u03ed\1\u03e1\1\u03ec\1\u03e4\1\u03ed\1\uffff"+
            "\1\u03e8\1\u03ed\26\uffff\1\u03ef\52\uffff\1\u03df",
            "\1\u03f6\12\uffff\1\u0402\6\uffff\1\u03f2\50\uffff\1\u03fb"+
            "\1\u03fe\1\u0401\1\u03f0\1\uffff\1\u03f6\2\u0401\1\u03fa\1\uffff"+
            "\1\u03f1\1\u03f8\1\u0401\1\u03f4\1\u03f9\1\u03f7\1\u0401\1\u03f5"+
            "\2\u03f9\1\u0401\1\u03fa\1\uffff\1\u03fd\1\u0401\1\u03ff\1\u03f6"+
            "\1\u0401\1\u03f7\1\u0401\1\u03f5\1\u0400\1\u03f8\1\u0401\1\uffff"+
            "\1\u03fc\1\u0401\26\uffff\1\u0403\52\uffff\1\u03f3",
            "\1\u040a\12\uffff\1\u0416\6\uffff\1\u0406\50\uffff\1\u040f"+
            "\1\u0412\1\u0415\1\u0404\1\uffff\1\u040a\2\u0415\1\u040e\1\uffff"+
            "\1\u0405\1\u040c\1\u0415\1\u0408\1\u040d\1\u040b\1\u0415\1\u0409"+
            "\2\u040d\1\u0415\1\u040e\1\uffff\1\u0411\1\u0415\1\u0413\1\u040a"+
            "\1\u0415\1\u040b\1\u0415\1\u0409\1\u0414\1\u040c\1\u0415\1\uffff"+
            "\1\u0410\1\u0415\26\uffff\1\u0417\52\uffff\1\u0407",
            "\1\u0419\14\uffff\1\u0418\6\uffff\1\u041c\100\uffff\1\u041d"+
            "\55\uffff\1\u041b\2\uffff\1\u041b\7\uffff\1\u041a\2\uffff\1"+
            "\u041b",
            "\1\u0421\15\uffff\1\u041e\42\uffff\1\u0420\11\uffff\1\u0422"+
            "\2\uffff\1\u042c\6\uffff\1\u042b\4\uffff\1\u0423\1\uffff\1\u0427"+
            "\4\uffff\1\u0424\5\uffff\1\u0423\1\uffff\1\u0427\3\uffff\1\u0425"+
            "\16\uffff\1\u042d\22\uffff\1\u0426\6\uffff\1\u042e\1\u042f\1"+
            "\u0430\23\uffff\1\u0428\7\uffff\1\u0433\6\uffff\1\u0434\1\uffff"+
            "\1\u0432\3\uffff\1\u0431\2\uffff\1\u042a\2\uffff\1\u042a\7\uffff"+
            "\1\u0429\1\uffff\1\u0431\1\u042a\4\uffff\1\u041f",
            "\1\u0436\12\uffff\1\u0442\57\uffff\1\u043b\1\u043e\1\u0441"+
            "\2\uffff\1\u0436\2\u0441\1\u043a\2\uffff\1\u0438\1\u0441\2\u0439"+
            "\1\u0437\1\u0441\1\u0435\2\u0439\1\u0441\1\u043a\1\uffff\1\u043d"+
            "\1\u0441\1\u043f\1\u0436\1\u0441\1\u0437\1\u0441\1\u0435\1\u0440"+
            "\1\u0438\1\u0441\1\uffff\1\u043c\1\u0441\26\uffff\1\u0443",
            "\1\u0445\12\uffff\1\u0451\57\uffff\1\u044a\1\u044d\1\u0450"+
            "\2\uffff\1\u0445\2\u0450\1\u0449\2\uffff\1\u0447\1\u0450\2\u0448"+
            "\1\u0446\1\u0450\1\u0444\2\u0448\1\u0450\1\u0449\1\uffff\1\u044c"+
            "\1\u0450\1\u044e\1\u0445\1\u0450\1\u0446\1\u0450\1\u0444\1\u044f"+
            "\1\u0447\1\u0450\1\uffff\1\u044b\1\u0450\26\uffff\1\u0452",
            "\1\u0454\12\uffff\1\u0460\57\uffff\1\u0459\1\u045c\1\u045f"+
            "\2\uffff\1\u0454\2\u045f\1\u0458\2\uffff\1\u0456\1\u045f\2\u0457"+
            "\1\u0455\1\u045f\1\u0453\2\u0457\1\u045f\1\u0458\1\uffff\1\u045b"+
            "\1\u045f\1\u045d\1\u0454\1\u045f\1\u0455\1\u045f\1\u0453\1\u045e"+
            "\1\u0456\1\u045f\1\uffff\1\u045a\1\u045f\26\uffff\1\u0461",
            "\1\u0463\12\uffff\1\u046f\57\uffff\1\u0468\1\u046b\1\u046e"+
            "\2\uffff\1\u0463\2\u046e\1\u0467\2\uffff\1\u0465\1\u046e\2\u0466"+
            "\1\u0464\1\u046e\1\u0462\2\u0466\1\u046e\1\u0467\1\uffff\1\u046a"+
            "\1\u046e\1\u046c\1\u0463\1\u046e\1\u0464\1\u046e\1\u0462\1\u046d"+
            "\1\u0465\1\u046e\1\uffff\1\u0469\1\u046e\26\uffff\1\u0470",
            "\1\u0472\12\uffff\1\u047e\57\uffff\1\u0477\1\u047a\1\u047d"+
            "\2\uffff\1\u0472\2\u047d\1\u0476\2\uffff\1\u0474\1\u047d\2\u0475"+
            "\1\u0473\1\u047d\1\u0471\2\u0475\1\u047d\1\u0476\1\uffff\1\u0479"+
            "\1\u047d\1\u047b\1\u0472\1\u047d\1\u0473\1\u047d\1\u0471\1\u047c"+
            "\1\u0474\1\u047d\1\uffff\1\u0478\1\u047d\26\uffff\1\u047f",
            "\1\u0480",
            "\1\u0481",
            "\1\u0482",
            "\1\12\12\uffff\1\4\6\uffff\1\u0484\36\uffff\1\12\13\uffff\1"+
            "\4\3\uffff\2\4\2\uffff\1\u0483\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u0485\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\u0496\11\uffff\1\u048f\2\uffff\1\u048e\6\uffff\1\u0499\4"+
            "\uffff\1\u0490\1\uffff\1\u0494\4\uffff\1\u0491\5\uffff\1\u0490"+
            "\1\uffff\1\u0494\3\uffff\1\u0492\16\uffff\1\u049a\22\uffff\1"+
            "\u0493\6\uffff\1\u049b\1\u049c\1\u049d\33\uffff\1\u04a0\6\uffff"+
            "\1\u04a1\1\uffff\1\u049f\3\uffff\1\u049e\2\uffff\1\u0498\2\uffff"+
            "\1\u0498\7\uffff\1\u0497\1\uffff\1\u049e\1\u0498\4\uffff\1\u0495",
            "\1\u04a8\14\uffff\1\u04ac\6\uffff\1\u04ab\4\uffff\1\u04a2\1"+
            "\uffff\1\u04a6\4\uffff\1\u04a3\5\uffff\1\u04a2\1\uffff\1\u04a6"+
            "\3\uffff\1\u04a4\16\uffff\1\u04ad\22\uffff\1\u04a5\6\uffff\1"+
            "\u04ae\1\u04af\1\u04b0\33\uffff\1\u04b3\6\uffff\1\u04b4\1\uffff"+
            "\1\u04b2\3\uffff\1\u04b1\2\uffff\1\u04aa\2\uffff\1\u04aa\7\uffff"+
            "\1\u04a9\1\uffff\1\u04b1\1\u04aa\4\uffff\1\u04a7",
            "\1\u04ba\14\uffff\1\u04be\6\uffff\1\u04bd\6\uffff\1\u04b8\4"+
            "\uffff\1\u04b5\7\uffff\1\u04b8\3\uffff\1\u04b6\16\uffff\1\u04bf"+
            "\22\uffff\1\u04b7\6\uffff\1\u04c0\1\u04c1\1\u04c2\33\uffff\1"+
            "\u04c5\6\uffff\1\u04c6\1\uffff\1\u04c4\3\uffff\1\u04c3\2\uffff"+
            "\1\u04bc\2\uffff\1\u04bc\7\uffff\1\u04bb\1\uffff\1\u04c3\1\u04bc"+
            "\4\uffff\1\u04b9",
            "\1\u04cb\14\uffff\1\u04cf\6\uffff\1\u04ce\6\uffff\1\u04c9\14"+
            "\uffff\1\u04c9\3\uffff\1\u04c7\16\uffff\1\u04d0\22\uffff\1\u04c8"+
            "\6\uffff\1\u04d1\1\u04d2\1\u04d3\33\uffff\1\u04d6\6\uffff\1"+
            "\u04d7\1\uffff\1\u04d5\3\uffff\1\u04d4\2\uffff\1\u04cd\2\uffff"+
            "\1\u04cd\7\uffff\1\u04cc\1\uffff\1\u04d4\1\u04cd\4\uffff\1\u04ca",
            "\1\u04db\14\uffff\1\u04df\6\uffff\1\u04de\6\uffff\1\u04d9\14"+
            "\uffff\1\u04d9\22\uffff\1\u04e0\22\uffff\1\u04d8\6\uffff\1\u04e1"+
            "\1\u04e2\1\u04e3\33\uffff\1\u04e6\6\uffff\1\u04e7\1\uffff\1"+
            "\u04e5\3\uffff\1\u04e4\2\uffff\1\u04dd\2\uffff\1\u04dd\7\uffff"+
            "\1\u04dc\1\uffff\1\u04e4\1\u04dd\4\uffff\1\u04da",
            "\1\u04ea\14\uffff\1\u04ee\6\uffff\1\u04ed\6\uffff\1\u04e8\14"+
            "\uffff\1\u04e8\22\uffff\1\u04ef\31\uffff\1\u04f0\1\u04f1\1\u04f2"+
            "\33\uffff\1\u04f5\6\uffff\1\u04f6\1\uffff\1\u04f4\3\uffff\1"+
            "\u04f3\2\uffff\1\u04ec\2\uffff\1\u04ec\7\uffff\1\u04eb\1\uffff"+
            "\1\u04f3\1\u04ec\4\uffff\1\u04e9",
            "\1\u04f8\14\uffff\1\u04fc\6\uffff\1\u04fb\46\uffff\1\u04fd"+
            "\31\uffff\1\u04fe\1\u04ff\1\u0500\33\uffff\1\u0503\6\uffff\1"+
            "\u0504\1\uffff\1\u0502\3\uffff\1\u0501\2\uffff\1\u04fa\2\uffff"+
            "\1\u04fa\7\uffff\1\u04f9\1\uffff\1\u0501\1\u04fa\4\uffff\1\u04f7",
            "\1\u0505\u0082\uffff\1\u0507\2\uffff\1\u0507\7\uffff\1\u0506"+
            "\2\uffff\1\u0507",
            "\1\u050e\21\uffff\1\u050a\50\uffff\1\u0513\1\u0516\1\u0519"+
            "\1\u0508\1\uffff\1\u050e\2\u0519\1\u0512\1\uffff\1\u0509\1\u0510"+
            "\1\u0519\1\u050c\1\u0511\1\u050f\1\u0519\1\u050d\2\u0511\1\u0519"+
            "\1\u0512\1\uffff\1\u0515\1\u0519\1\u0517\1\u050e\1\u0519\1\u050f"+
            "\1\u0519\1\u050d\1\u0518\1\u0510\1\u0519\1\uffff\1\u0514\1\u0519"+
            "\30\uffff\1\u051a\50\uffff\1\u050b",
            "\1\u0521\21\uffff\1\u051d\50\uffff\1\u0526\1\u0529\1\u052c"+
            "\1\u051b\1\uffff\1\u0521\2\u052c\1\u0525\1\uffff\1\u051c\1\u0523"+
            "\1\u052c\1\u051f\1\u0524\1\u0522\1\u052c\1\u0520\2\u0524\1\u052c"+
            "\1\u0525\1\uffff\1\u0528\1\u052c\1\u052a\1\u0521\1\u052c\1\u0522"+
            "\1\u052c\1\u0520\1\u052b\1\u0523\1\u052c\1\uffff\1\u0527\1\u052c"+
            "\30\uffff\1\u052d\50\uffff\1\u051e",
            "\1\u0534\21\uffff\1\u0530\50\uffff\1\u0539\1\u053c\1\u053f"+
            "\1\u052e\1\uffff\1\u0534\2\u053f\1\u0538\1\uffff\1\u052f\1\u0536"+
            "\1\u053f\1\u0532\1\u0537\1\u0535\1\u053f\1\u0533\2\u0537\1\u053f"+
            "\1\u0538\1\uffff\1\u053b\1\u053f\1\u053d\1\u0534\1\u053f\1\u0535"+
            "\1\u053f\1\u0533\1\u053e\1\u0536\1\u053f\1\uffff\1\u053a\1\u053f"+
            "\30\uffff\1\u0540\50\uffff\1\u0531",
            "\1\u0542\14\uffff\1\u0541\6\uffff\1\u0545\100\uffff\1\u0546"+
            "\55\uffff\1\u0544\2\uffff\1\u0544\7\uffff\1\u0543\2\uffff\1"+
            "\u0544",
            "\1\u054a\15\uffff\1\u0547\42\uffff\1\u0549\11\uffff\1\u054b"+
            "\2\uffff\1\u0555\6\uffff\1\u0554\4\uffff\1\u054c\1\uffff\1\u0550"+
            "\4\uffff\1\u054d\5\uffff\1\u054c\1\uffff\1\u0550\3\uffff\1\u054e"+
            "\16\uffff\1\u0556\22\uffff\1\u054f\6\uffff\1\u0557\1\u0558\1"+
            "\u0559\23\uffff\1\u0551\7\uffff\1\u055c\6\uffff\1\u055d\1\uffff"+
            "\1\u055b\3\uffff\1\u055a\2\uffff\1\u0553\2\uffff\1\u0553\7\uffff"+
            "\1\u0552\1\uffff\1\u055a\1\u0553\4\uffff\1\u0548",
            "\1\u055f\72\uffff\1\u0564\1\u0567\1\u056a\2\uffff\1\u055f\2"+
            "\u056a\1\u0563\2\uffff\1\u0561\1\u056a\2\u0562\1\u0560\1\u056a"+
            "\1\u055e\2\u0562\1\u056a\1\u0563\1\uffff\1\u0566\1\u056a\1\u0568"+
            "\1\u055f\1\u056a\1\u0560\1\u056a\1\u055e\1\u0569\1\u0561\1\u056a"+
            "\1\uffff\1\u0565\1\u056a\30\uffff\1\u056b",
            "\1\u056d\72\uffff\1\u0572\1\u0575\1\u0578\2\uffff\1\u056d\2"+
            "\u0578\1\u0571\2\uffff\1\u056f\1\u0578\2\u0570\1\u056e\1\u0578"+
            "\1\u056c\2\u0570\1\u0578\1\u0571\1\uffff\1\u0574\1\u0578\1\u0576"+
            "\1\u056d\1\u0578\1\u056e\1\u0578\1\u056c\1\u0577\1\u056f\1\u0578"+
            "\1\uffff\1\u0573\1\u0578\30\uffff\1\u0579",
            "\1\u057b\72\uffff\1\u0580\1\u0583\1\u0586\2\uffff\1\u057b\2"+
            "\u0586\1\u057f\2\uffff\1\u057d\1\u0586\2\u057e\1\u057c\1\u0586"+
            "\1\u057a\2\u057e\1\u0586\1\u057f\1\uffff\1\u0582\1\u0586\1\u0584"+
            "\1\u057b\1\u0586\1\u057c\1\u0586\1\u057a\1\u0585\1\u057d\1\u0586"+
            "\1\uffff\1\u0581\1\u0586\30\uffff\1\u0587",
            "\1\u0589\72\uffff\1\u058e\1\u0591\1\u0594\2\uffff\1\u0589\2"+
            "\u0594\1\u058d\2\uffff\1\u058b\1\u0594\2\u058c\1\u058a\1\u0594"+
            "\1\u0588\2\u058c\1\u0594\1\u058d\1\uffff\1\u0590\1\u0594\1\u0592"+
            "\1\u0589\1\u0594\1\u058a\1\u0594\1\u0588\1\u0593\1\u058b\1\u0594"+
            "\1\uffff\1\u058f\1\u0594\30\uffff\1\u0595",
            "\1\u0597\72\uffff\1\u059c\1\u059f\1\u05a2\2\uffff\1\u0597\2"+
            "\u05a2\1\u059b\2\uffff\1\u0599\1\u05a2\2\u059a\1\u0598\1\u05a2"+
            "\1\u0596\2\u059a\1\u05a2\1\u059b\1\uffff\1\u059e\1\u05a2\1\u05a0"+
            "\1\u0597\1\u05a2\1\u0598\1\u05a2\1\u0596\1\u05a1\1\u0599\1\u05a2"+
            "\1\uffff\1\u059d\1\u05a2\30\uffff\1\u05a3",
            "\1\u05a4",
            "\1\u05a5",
            "\1\u05a6",
            "\1\12\12\uffff\1\4\6\uffff\1\u05a7\36\uffff\1\12\13\uffff\1"+
            "\4\3\uffff\2\4\2\uffff\1\u05ae\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u05a8\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u05b9\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05b2\2\uffff\2\4\2\uffff\1\u05b3\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u05ba\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u05c5\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05be\2\uffff\2\4\2\uffff\1\u05bf\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u05c6\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u05d1\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05ca\2\uffff\2\4\2\uffff\1\u05cb\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u05d2\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u05dd\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05d6\2\uffff\2\4\2\uffff\1\u05d7\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u05de\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u05e9\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05e2\2\uffff\2\4\2\uffff\1\u05e3\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u05ea\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u05f5\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05ee\2\uffff\2\4\2\uffff\1\u05ef\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u05f6\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\u0602\11\uffff\1\u05fb\2\uffff\1\u05fa\6\uffff\1\u0605\4"+
            "\uffff\1\u05fc\1\uffff\1\u0600\4\uffff\1\u05fd\5\uffff\1\u05fc"+
            "\1\uffff\1\u0600\3\uffff\1\u05fe\16\uffff\1\u0606\22\uffff\1"+
            "\u05ff\6\uffff\1\u0607\1\u0608\1\u0609\33\uffff\1\u060c\6\uffff"+
            "\1\u060d\1\uffff\1\u060b\3\uffff\1\u060a\2\uffff\1\u0604\2\uffff"+
            "\1\u0604\7\uffff\1\u0603\1\uffff\1\u060a\1\u0604\4\uffff\1\u0601",
            "\1\u0614\14\uffff\1\u0618\6\uffff\1\u0617\4\uffff\1\u060e\1"+
            "\uffff\1\u0612\4\uffff\1\u060f\5\uffff\1\u060e\1\uffff\1\u0612"+
            "\3\uffff\1\u0610\16\uffff\1\u0619\22\uffff\1\u0611\6\uffff\1"+
            "\u061a\1\u061b\1\u061c\33\uffff\1\u061f\6\uffff\1\u0620\1\uffff"+
            "\1\u061e\3\uffff\1\u061d\2\uffff\1\u0616\2\uffff\1\u0616\7\uffff"+
            "\1\u0615\1\uffff\1\u061d\1\u0616\4\uffff\1\u0613",
            "\1\u0626\14\uffff\1\u062a\6\uffff\1\u0629\6\uffff\1\u0624\4"+
            "\uffff\1\u0621\7\uffff\1\u0624\3\uffff\1\u0622\16\uffff\1\u062b"+
            "\22\uffff\1\u0623\6\uffff\1\u062c\1\u062d\1\u062e\33\uffff\1"+
            "\u0631\6\uffff\1\u0632\1\uffff\1\u0630\3\uffff\1\u062f\2\uffff"+
            "\1\u0628\2\uffff\1\u0628\7\uffff\1\u0627\1\uffff\1\u062f\1\u0628"+
            "\4\uffff\1\u0625",
            "\1\u0637\14\uffff\1\u063b\6\uffff\1\u063a\6\uffff\1\u0635\14"+
            "\uffff\1\u0635\3\uffff\1\u0633\16\uffff\1\u063c\22\uffff\1\u0634"+
            "\6\uffff\1\u063d\1\u063e\1\u063f\33\uffff\1\u0642\6\uffff\1"+
            "\u0643\1\uffff\1\u0641\3\uffff\1\u0640\2\uffff\1\u0639\2\uffff"+
            "\1\u0639\7\uffff\1\u0638\1\uffff\1\u0640\1\u0639\4\uffff\1\u0636",
            "\1\u0647\14\uffff\1\u064b\6\uffff\1\u064a\6\uffff\1\u0645\14"+
            "\uffff\1\u0645\22\uffff\1\u064c\22\uffff\1\u0644\6\uffff\1\u064d"+
            "\1\u064e\1\u064f\33\uffff\1\u0652\6\uffff\1\u0653\1\uffff\1"+
            "\u0651\3\uffff\1\u0650\2\uffff\1\u0649\2\uffff\1\u0649\7\uffff"+
            "\1\u0648\1\uffff\1\u0650\1\u0649\4\uffff\1\u0646",
            "\1\u0656\14\uffff\1\u065a\6\uffff\1\u0659\6\uffff\1\u0654\14"+
            "\uffff\1\u0654\22\uffff\1\u065b\31\uffff\1\u065c\1\u065d\1\u065e"+
            "\33\uffff\1\u0661\6\uffff\1\u0662\1\uffff\1\u0660\3\uffff\1"+
            "\u065f\2\uffff\1\u0658\2\uffff\1\u0658\7\uffff\1\u0657\1\uffff"+
            "\1\u065f\1\u0658\4\uffff\1\u0655",
            "\1\u0664\14\uffff\1\u0668\6\uffff\1\u0667\46\uffff\1\u0669"+
            "\31\uffff\1\u066a\1\u066b\1\u066c\33\uffff\1\u066f\6\uffff\1"+
            "\u0670\1\uffff\1\u066e\3\uffff\1\u066d\2\uffff\1\u0666\2\uffff"+
            "\1\u0666\7\uffff\1\u0665\1\uffff\1\u066d\1\u0666\4\uffff\1\u0663",
            "\1\u0671\u0082\uffff\1\u0673\2\uffff\1\u0673\7\uffff\1\u0672"+
            "\2\uffff\1\u0673",
            "\1\u067a\12\uffff\1\u0686\6\uffff\1\u0676\50\uffff\1\u067f"+
            "\1\u0682\1\u0685\1\u0674\1\uffff\1\u067a\2\u0685\1\u067e\1\uffff"+
            "\1\u0675\1\u067c\1\u0685\1\u0678\1\u067d\1\u067b\1\u0685\1\u0679"+
            "\2\u067d\1\u0685\1\u067e\1\uffff\1\u0681\1\u0685\1\u0683\1\u067a"+
            "\1\u0685\1\u067b\1\u0685\1\u0679\1\u0684\1\u067c\1\u0685\1\uffff"+
            "\1\u0680\1\u0685\26\uffff\1\u0687\52\uffff\1\u0677",
            "\1\u068e\12\uffff\1\u069a\6\uffff\1\u068a\50\uffff\1\u0693"+
            "\1\u0696\1\u0699\1\u0688\1\uffff\1\u068e\2\u0699\1\u0692\1\uffff"+
            "\1\u0689\1\u0690\1\u0699\1\u068c\1\u0691\1\u068f\1\u0699\1\u068d"+
            "\2\u0691\1\u0699\1\u0692\1\uffff\1\u0695\1\u0699\1\u0697\1\u068e"+
            "\1\u0699\1\u068f\1\u0699\1\u068d\1\u0698\1\u0690\1\u0699\1\uffff"+
            "\1\u0694\1\u0699\26\uffff\1\u069b\52\uffff\1\u068b",
            "\1\u06a2\12\uffff\1\u06ae\6\uffff\1\u069e\50\uffff\1\u06a7"+
            "\1\u06aa\1\u06ad\1\u069c\1\uffff\1\u06a2\2\u06ad\1\u06a6\1\uffff"+
            "\1\u069d\1\u06a4\1\u06ad\1\u06a0\1\u06a5\1\u06a3\1\u06ad\1\u06a1"+
            "\2\u06a5\1\u06ad\1\u06a6\1\uffff\1\u06a9\1\u06ad\1\u06ab\1\u06a2"+
            "\1\u06ad\1\u06a3\1\u06ad\1\u06a1\1\u06ac\1\u06a4\1\u06ad\1\uffff"+
            "\1\u06a8\1\u06ad\26\uffff\1\u06af\52\uffff\1\u069f",
            "\1\u06b1\14\uffff\1\u06b0\6\uffff\1\u06b4\100\uffff\1\u06b5"+
            "\55\uffff\1\u06b3\2\uffff\1\u06b3\7\uffff\1\u06b2\2\uffff\1"+
            "\u06b3",
            "\1\u06b9\15\uffff\1\u06b6\42\uffff\1\u06b8\11\uffff\1\u06ba"+
            "\2\uffff\1\u06c4\6\uffff\1\u06c3\4\uffff\1\u06bb\1\uffff\1\u06bf"+
            "\4\uffff\1\u06bc\5\uffff\1\u06bb\1\uffff\1\u06bf\3\uffff\1\u06bd"+
            "\16\uffff\1\u06c5\22\uffff\1\u06be\6\uffff\1\u06c6\1\u06c7\1"+
            "\u06c8\23\uffff\1\u06c0\7\uffff\1\u06cb\6\uffff\1\u06cc\1\uffff"+
            "\1\u06ca\3\uffff\1\u06c9\2\uffff\1\u06c2\2\uffff\1\u06c2\7\uffff"+
            "\1\u06c1\1\uffff\1\u06c9\1\u06c2\4\uffff\1\u06b7",
            "\1\u06ce\12\uffff\1\u06da\57\uffff\1\u06d3\1\u06d6\1\u06d9"+
            "\2\uffff\1\u06ce\2\u06d9\1\u06d2\2\uffff\1\u06d0\1\u06d9\2\u06d1"+
            "\1\u06cf\1\u06d9\1\u06cd\2\u06d1\1\u06d9\1\u06d2\1\uffff\1\u06d5"+
            "\1\u06d9\1\u06d7\1\u06ce\1\u06d9\1\u06cf\1\u06d9\1\u06cd\1\u06d8"+
            "\1\u06d0\1\u06d9\1\uffff\1\u06d4\1\u06d9\26\uffff\1\u06db",
            "\1\u06dd\12\uffff\1\u06e9\57\uffff\1\u06e2\1\u06e5\1\u06e8"+
            "\2\uffff\1\u06dd\2\u06e8\1\u06e1\2\uffff\1\u06df\1\u06e8\2\u06e0"+
            "\1\u06de\1\u06e8\1\u06dc\2\u06e0\1\u06e8\1\u06e1\1\uffff\1\u06e4"+
            "\1\u06e8\1\u06e6\1\u06dd\1\u06e8\1\u06de\1\u06e8\1\u06dc\1\u06e7"+
            "\1\u06df\1\u06e8\1\uffff\1\u06e3\1\u06e8\26\uffff\1\u06ea",
            "\1\u06ec\12\uffff\1\u06f8\57\uffff\1\u06f1\1\u06f4\1\u06f7"+
            "\2\uffff\1\u06ec\2\u06f7\1\u06f0\2\uffff\1\u06ee\1\u06f7\2\u06ef"+
            "\1\u06ed\1\u06f7\1\u06eb\2\u06ef\1\u06f7\1\u06f0\1\uffff\1\u06f3"+
            "\1\u06f7\1\u06f5\1\u06ec\1\u06f7\1\u06ed\1\u06f7\1\u06eb\1\u06f6"+
            "\1\u06ee\1\u06f7\1\uffff\1\u06f2\1\u06f7\26\uffff\1\u06f9",
            "\1\u06fb\12\uffff\1\u0707\57\uffff\1\u0700\1\u0703\1\u0706"+
            "\2\uffff\1\u06fb\2\u0706\1\u06ff\2\uffff\1\u06fd\1\u0706\2\u06fe"+
            "\1\u06fc\1\u0706\1\u06fa\2\u06fe\1\u0706\1\u06ff\1\uffff\1\u0702"+
            "\1\u0706\1\u0704\1\u06fb\1\u0706\1\u06fc\1\u0706\1\u06fa\1\u0705"+
            "\1\u06fd\1\u0706\1\uffff\1\u0701\1\u0706\26\uffff\1\u0708",
            "\1\u070a\12\uffff\1\u0716\57\uffff\1\u070f\1\u0712\1\u0715"+
            "\2\uffff\1\u070a\2\u0715\1\u070e\2\uffff\1\u070c\1\u0715\2\u070d"+
            "\1\u070b\1\u0715\1\u0709\2\u070d\1\u0715\1\u070e\1\uffff\1\u0711"+
            "\1\u0715\1\u0713\1\u070a\1\u0715\1\u070b\1\u0715\1\u0709\1\u0714"+
            "\1\u070c\1\u0715\1\uffff\1\u0710\1\u0715\26\uffff\1\u0717",
            "\1\u0718",
            "\1\u0719",
            "\1\u071a",
            "\1\12\12\uffff\1\4\6\uffff\1\u071c\36\uffff\1\12\13\uffff\1"+
            "\4\3\uffff\2\4\2\uffff\1\u071b\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u071d\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\u072e\11\uffff\1\u0727\2\uffff\1\u0726\6\uffff\1\u0731\4"+
            "\uffff\1\u0728\1\uffff\1\u072c\4\uffff\1\u0729\5\uffff\1\u0728"+
            "\1\uffff\1\u072c\3\uffff\1\u072a\16\uffff\1\u0732\22\uffff\1"+
            "\u072b\6\uffff\1\u0733\1\u0734\1\u0735\33\uffff\1\u0738\6\uffff"+
            "\1\u0739\1\uffff\1\u0737\3\uffff\1\u0736\2\uffff\1\u0730\2\uffff"+
            "\1\u0730\7\uffff\1\u072f\1\uffff\1\u0736\1\u0730\4\uffff\1\u072d",
            "\1\u0740\14\uffff\1\u0744\6\uffff\1\u0743\4\uffff\1\u073a\1"+
            "\uffff\1\u073e\4\uffff\1\u073b\5\uffff\1\u073a\1\uffff\1\u073e"+
            "\3\uffff\1\u073c\16\uffff\1\u0745\22\uffff\1\u073d\6\uffff\1"+
            "\u0746\1\u0747\1\u0748\33\uffff\1\u074b\6\uffff\1\u074c\1\uffff"+
            "\1\u074a\3\uffff\1\u0749\2\uffff\1\u0742\2\uffff\1\u0742\7\uffff"+
            "\1\u0741\1\uffff\1\u0749\1\u0742\4\uffff\1\u073f",
            "\1\u0752\14\uffff\1\u0756\6\uffff\1\u0755\6\uffff\1\u0750\4"+
            "\uffff\1\u074d\7\uffff\1\u0750\3\uffff\1\u074e\16\uffff\1\u0757"+
            "\22\uffff\1\u074f\6\uffff\1\u0758\1\u0759\1\u075a\33\uffff\1"+
            "\u075d\6\uffff\1\u075e\1\uffff\1\u075c\3\uffff\1\u075b\2\uffff"+
            "\1\u0754\2\uffff\1\u0754\7\uffff\1\u0753\1\uffff\1\u075b\1\u0754"+
            "\4\uffff\1\u0751",
            "\1\u0763\14\uffff\1\u0767\6\uffff\1\u0766\6\uffff\1\u0761\14"+
            "\uffff\1\u0761\3\uffff\1\u075f\16\uffff\1\u0768\22\uffff\1\u0760"+
            "\6\uffff\1\u0769\1\u076a\1\u076b\33\uffff\1\u076e\6\uffff\1"+
            "\u076f\1\uffff\1\u076d\3\uffff\1\u076c\2\uffff\1\u0765\2\uffff"+
            "\1\u0765\7\uffff\1\u0764\1\uffff\1\u076c\1\u0765\4\uffff\1\u0762",
            "\1\u0773\14\uffff\1\u0777\6\uffff\1\u0776\6\uffff\1\u0771\14"+
            "\uffff\1\u0771\22\uffff\1\u0778\22\uffff\1\u0770\6\uffff\1\u0779"+
            "\1\u077a\1\u077b\33\uffff\1\u077e\6\uffff\1\u077f\1\uffff\1"+
            "\u077d\3\uffff\1\u077c\2\uffff\1\u0775\2\uffff\1\u0775\7\uffff"+
            "\1\u0774\1\uffff\1\u077c\1\u0775\4\uffff\1\u0772",
            "\1\u0782\14\uffff\1\u0786\6\uffff\1\u0785\6\uffff\1\u0780\14"+
            "\uffff\1\u0780\22\uffff\1\u0787\31\uffff\1\u0788\1\u0789\1\u078a"+
            "\33\uffff\1\u078d\6\uffff\1\u078e\1\uffff\1\u078c\3\uffff\1"+
            "\u078b\2\uffff\1\u0784\2\uffff\1\u0784\7\uffff\1\u0783\1\uffff"+
            "\1\u078b\1\u0784\4\uffff\1\u0781",
            "\1\u0790\14\uffff\1\u0794\6\uffff\1\u0793\46\uffff\1\u0795"+
            "\31\uffff\1\u0796\1\u0797\1\u0798\33\uffff\1\u079b\6\uffff\1"+
            "\u079c\1\uffff\1\u079a\3\uffff\1\u0799\2\uffff\1\u0792\2\uffff"+
            "\1\u0792\7\uffff\1\u0791\1\uffff\1\u0799\1\u0792\4\uffff\1\u078f",
            "\1\u079d\u0082\uffff\1\u079f\2\uffff\1\u079f\7\uffff\1\u079e"+
            "\2\uffff\1\u079f",
            "\1\u07a6\21\uffff\1\u07a2\50\uffff\1\u07ab\1\u07ae\1\u07b1"+
            "\1\u07a0\1\uffff\1\u07a6\2\u07b1\1\u07aa\1\uffff\1\u07a1\1\u07a8"+
            "\1\u07b1\1\u07a4\1\u07a9\1\u07a7\1\u07b1\1\u07a5\2\u07a9\1\u07b1"+
            "\1\u07aa\1\uffff\1\u07ad\1\u07b1\1\u07af\1\u07a6\1\u07b1\1\u07a7"+
            "\1\u07b1\1\u07a5\1\u07b0\1\u07a8\1\u07b1\1\uffff\1\u07ac\1\u07b1"+
            "\30\uffff\1\u07b2\50\uffff\1\u07a3",
            "\1\u07b9\21\uffff\1\u07b5\50\uffff\1\u07be\1\u07c1\1\u07c4"+
            "\1\u07b3\1\uffff\1\u07b9\2\u07c4\1\u07bd\1\uffff\1\u07b4\1\u07bb"+
            "\1\u07c4\1\u07b7\1\u07bc\1\u07ba\1\u07c4\1\u07b8\2\u07bc\1\u07c4"+
            "\1\u07bd\1\uffff\1\u07c0\1\u07c4\1\u07c2\1\u07b9\1\u07c4\1\u07ba"+
            "\1\u07c4\1\u07b8\1\u07c3\1\u07bb\1\u07c4\1\uffff\1\u07bf\1\u07c4"+
            "\30\uffff\1\u07c5\50\uffff\1\u07b6",
            "\1\u07cc\21\uffff\1\u07c8\50\uffff\1\u07d1\1\u07d4\1\u07d7"+
            "\1\u07c6\1\uffff\1\u07cc\2\u07d7\1\u07d0\1\uffff\1\u07c7\1\u07ce"+
            "\1\u07d7\1\u07ca\1\u07cf\1\u07cd\1\u07d7\1\u07cb\2\u07cf\1\u07d7"+
            "\1\u07d0\1\uffff\1\u07d3\1\u07d7\1\u07d5\1\u07cc\1\u07d7\1\u07cd"+
            "\1\u07d7\1\u07cb\1\u07d6\1\u07ce\1\u07d7\1\uffff\1\u07d2\1\u07d7"+
            "\30\uffff\1\u07d8\50\uffff\1\u07c9",
            "\1\u07da\14\uffff\1\u07d9\6\uffff\1\u07dd\100\uffff\1\u07de"+
            "\55\uffff\1\u07dc\2\uffff\1\u07dc\7\uffff\1\u07db\2\uffff\1"+
            "\u07dc",
            "\1\u07e2\15\uffff\1\u07df\42\uffff\1\u07e1\11\uffff\1\u07e3"+
            "\2\uffff\1\u07ed\6\uffff\1\u07ec\4\uffff\1\u07e4\1\uffff\1\u07e8"+
            "\4\uffff\1\u07e5\5\uffff\1\u07e4\1\uffff\1\u07e8\3\uffff\1\u07e6"+
            "\16\uffff\1\u07ee\22\uffff\1\u07e7\6\uffff\1\u07ef\1\u07f0\1"+
            "\u07f1\23\uffff\1\u07e9\7\uffff\1\u07f4\6\uffff\1\u07f5\1\uffff"+
            "\1\u07f3\3\uffff\1\u07f2\2\uffff\1\u07eb\2\uffff\1\u07eb\7\uffff"+
            "\1\u07ea\1\uffff\1\u07f2\1\u07eb\4\uffff\1\u07e0",
            "\1\u07f7\72\uffff\1\u07fc\1\u07ff\1\u0802\2\uffff\1\u07f7\2"+
            "\u0802\1\u07fb\2\uffff\1\u07f9\1\u0802\2\u07fa\1\u07f8\1\u0802"+
            "\1\u07f6\2\u07fa\1\u0802\1\u07fb\1\uffff\1\u07fe\1\u0802\1\u0800"+
            "\1\u07f7\1\u0802\1\u07f8\1\u0802\1\u07f6\1\u0801\1\u07f9\1\u0802"+
            "\1\uffff\1\u07fd\1\u0802\30\uffff\1\u0803",
            "\1\u0805\72\uffff\1\u080a\1\u080d\1\u0810\2\uffff\1\u0805\2"+
            "\u0810\1\u0809\2\uffff\1\u0807\1\u0810\2\u0808\1\u0806\1\u0810"+
            "\1\u0804\2\u0808\1\u0810\1\u0809\1\uffff\1\u080c\1\u0810\1\u080e"+
            "\1\u0805\1\u0810\1\u0806\1\u0810\1\u0804\1\u080f\1\u0807\1\u0810"+
            "\1\uffff\1\u080b\1\u0810\30\uffff\1\u0811",
            "\1\u0813\72\uffff\1\u0818\1\u081b\1\u081e\2\uffff\1\u0813\2"+
            "\u081e\1\u0817\2\uffff\1\u0815\1\u081e\2\u0816\1\u0814\1\u081e"+
            "\1\u0812\2\u0816\1\u081e\1\u0817\1\uffff\1\u081a\1\u081e\1\u081c"+
            "\1\u0813\1\u081e\1\u0814\1\u081e\1\u0812\1\u081d\1\u0815\1\u081e"+
            "\1\uffff\1\u0819\1\u081e\30\uffff\1\u081f",
            "\1\u0821\72\uffff\1\u0826\1\u0829\1\u082c\2\uffff\1\u0821\2"+
            "\u082c\1\u0825\2\uffff\1\u0823\1\u082c\2\u0824\1\u0822\1\u082c"+
            "\1\u0820\2\u0824\1\u082c\1\u0825\1\uffff\1\u0828\1\u082c\1\u082a"+
            "\1\u0821\1\u082c\1\u0822\1\u082c\1\u0820\1\u082b\1\u0823\1\u082c"+
            "\1\uffff\1\u0827\1\u082c\30\uffff\1\u082d",
            "\1\u082f\72\uffff\1\u0834\1\u0837\1\u083a\2\uffff\1\u082f\2"+
            "\u083a\1\u0833\2\uffff\1\u0831\1\u083a\2\u0832\1\u0830\1\u083a"+
            "\1\u082e\2\u0832\1\u083a\1\u0833\1\uffff\1\u0836\1\u083a\1\u0838"+
            "\1\u082f\1\u083a\1\u0830\1\u083a\1\u082e\1\u0839\1\u0831\1\u083a"+
            "\1\uffff\1\u0835\1\u083a\30\uffff\1\u083b",
            "\1\u083c",
            "\1\u083d",
            "\1\u083e",
            "\1\12\12\uffff\1\4\6\uffff\1\u083f\36\uffff\1\12\13\uffff\1"+
            "\4\3\uffff\2\4\2\uffff\1\u0846\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u0840\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u0851\36\uffff\1\12\13\uffff\1"+
            "\4\1\u084a\2\uffff\2\4\2\uffff\1\u084b\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u0852\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u085d\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0856\2\uffff\2\4\2\uffff\1\u0857\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u085e\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u0869\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0862\2\uffff\2\4\2\uffff\1\u0863\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u086a\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u0875\36\uffff\1\12\13\uffff\1"+
            "\4\1\u086e\2\uffff\2\4\2\uffff\1\u086f\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u0876\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u0881\36\uffff\1\12\13\uffff\1"+
            "\4\1\u087a\2\uffff\2\4\2\uffff\1\u087b\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u0882\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u088d\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0886\2\uffff\2\4\2\uffff\1\u0887\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\40\uffff\1\12\4\uffff\1\u088e\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA62_eot = DFA.unpackEncodedString(DFA62_eotS);
    static final short[] DFA62_eof = DFA.unpackEncodedString(DFA62_eofS);
    static final char[] DFA62_min = DFA.unpackEncodedStringToUnsignedChars(DFA62_minS);
    static final char[] DFA62_max = DFA.unpackEncodedStringToUnsignedChars(DFA62_maxS);
    static final short[] DFA62_accept = DFA.unpackEncodedString(DFA62_acceptS);
    static final short[] DFA62_special = DFA.unpackEncodedString(DFA62_specialS);
    static final short[][] DFA62_transition;

    static {
        int numStates = DFA62_transitionS.length;
        DFA62_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA62_transition[i] = DFA.unpackEncodedString(DFA62_transitionS[i]);
        }
    }

    class DFA62 extends DFA {

        public DFA62(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 62;
            this.eot = DFA62_eot;
            this.eof = DFA62_eof;
            this.min = DFA62_min;
            this.max = DFA62_max;
            this.accept = DFA62_accept;
            this.special = DFA62_special;
            this.transition = DFA62_transition;
        }
        public String getDescription() {
            return "494:32: ( static_type_wrapper )?";
        }
    }
    static final String DFA80_eotS =
        "\153\uffff";
    static final String DFA80_eofS =
        "\56\uffff\1\1\74\uffff";
    static final String DFA80_minS =
        "\1\6\14\uffff\1\6\12\uffff\1\6\25\uffff\1\6\74\uffff";
    static final String DFA80_maxS =
        "\1\u00cd\14\uffff\1\u00cd\12\uffff\1\u00a7\25\uffff\1\u00cd\74\uffff";
    static final String DFA80_acceptS =
        "\1\uffff\1\1\53\uffff\1\2\75\uffff";
    static final String DFA80_specialS =
        "\153\uffff}>";
    static final String[] DFA80_transitionS = {
            "\1\1\60\uffff\1\1\11\uffff\1\1\2\uffff\1\15\6\uffff\1\1\4\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\16\uffff\1\1\22\uffff\1\1\6\uffff\3\1\33\uffff\1\1\6\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\7\uffff"+
            "\1\1\1\uffff\2\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\15\uffff\1\1\42\uffff\1\30\11\uffff\1\1\2\uffff\1\1\6"+
            "\uffff\1\1\4\uffff\1\1\1\uffff\1\1\4\uffff\1\1\5\uffff\1\1\1"+
            "\uffff\1\1\3\uffff\1\1\16\uffff\1\1\22\uffff\1\1\6\uffff\3\1"+
            "\1\uffff\1\55\21\uffff\1\1\7\uffff\1\1\6\uffff\1\1\1\uffff\1"+
            "\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\7\uffff\1\1\1\uffff\2"+
            "\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\21\uffff\1\1\50\uffff\4\1\1\uffff\4\1\1\uffff\14\1\1\uffff"+
            "\13\1\1\uffff\2\1\26\uffff\1\56\52\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\11\uffff\2\1\6\uffff\1\1\36\uffff\1\1\11\uffff\4\1\1\uffff"+
            "\4\1\1\55\33\1\14\uffff\1\1\11\uffff\3\1\2\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\3\1\30\uffff\1\1\2\uffff\1\1\6\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\7\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "587:1: expression : ( classical_expr_wrp | struct_init );";
        }
    }
    static final String DFA81_eotS =
        "\u043d\uffff";
    static final String DFA81_eofS =
        "\u043d\uffff";
    static final String DFA81_minS =
        "\1\20\6\uffff\1\6\10\67\3\uffff\1\67\1\6\5\uffff\3\104\1\6\7\67"+
        "\3\uffff\1\67\5\uffff\3\104\6\67\3\uffff\1\67\1\6\5\uffff\3\104"+
        "\5\67\3\uffff\1\67\1\6\5\uffff\3\104\4\67\3\uffff\1\67\1\6\5\uffff"+
        "\3\104\3\67\3\uffff\1\67\1\6\5\uffff\3\104\2\67\3\uffff\1\67\1\6"+
        "\5\uffff\3\104\1\67\3\uffff\1\67\1\6\5\uffff\3\104\3\uffff\1\24"+
        "\3\30\3\67\2\6\7\67\3\6\1\67\6\6\3\104\3\67\u0386\uffff";
    static final String DFA81_maxS =
        "\1\u00cd\6\uffff\10\u00cd\1\u00c8\3\uffff\1\u00c8\1\u00cd\5\uffff"+
        "\3\104\7\u00cd\1\u00c8\3\uffff\1\u00c8\5\uffff\3\104\5\u00cd\1\u00c8"+
        "\3\uffff\1\u00c8\1\u00cd\5\uffff\3\104\4\u00cd\1\u00c8\3\uffff\1"+
        "\u00c8\1\u00cd\5\uffff\3\104\3\u00cd\1\u00c8\3\uffff\1\u00c8\1\u00cd"+
        "\5\uffff\3\104\2\u00cd\1\u00c8\3\uffff\1\u00c8\1\u00cd\5\uffff\3"+
        "\104\1\u00cd\1\u00c8\3\uffff\1\u00c8\1\u00cd\5\uffff\3\104\1\u00c8"+
        "\3\uffff\1\u00c8\1\u00cd\5\uffff\3\104\3\uffff\1\u00cd\5\u00c8\2"+
        "\u00cd\1\u00a7\7\u00cd\1\174\2\u00a7\1\u00c8\1\u00cd\5\174\3\104"+
        "\3\u00c8\u0386\uffff";
    static final String DFA81_acceptS =
        "\1\uffff\1\2\16\uffff\3\1\2\uffff\5\1\13\uffff\3\1\1\uffff\5\1\11"+
        "\uffff\3\1\2\uffff\5\1\10\uffff\3\1\2\uffff\5\1\7\uffff\3\1\2\uffff"+
        "\5\1\6\uffff\3\1\2\uffff\5\1\5\uffff\3\1\2\uffff\5\1\4\uffff\3\1"+
        "\2\uffff\5\1\3\uffff\3\1\40\uffff\u0386\1";
    static final String DFA81_specialS =
        "\u043d\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\1\1\7\45\uffff\1\1\111\uffff\1\1\40\uffff\1\1\27\uffff\1"+
            "\1\2\uffff\1\1\7\uffff\1\1\2\uffff\1\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\60\uffff\1\20\11\uffff\1\11\2\uffff\1\24\6\uffff\1\23"+
            "\4\uffff\1\12\1\uffff\1\16\4\uffff\1\13\5\uffff\1\12\1\uffff"+
            "\1\16\3\uffff\1\14\16\uffff\1\25\22\uffff\1\15\6\uffff\1\26"+
            "\1\27\1\30\33\uffff\1\33\6\uffff\1\34\1\uffff\1\32\3\uffff\1"+
            "\31\2\uffff\1\22\2\uffff\1\22\7\uffff\1\21\1\uffff\1\31\1\22"+
            "\4\uffff\1\17",
            "\1\45\11\uffff\1\36\2\uffff\1\35\6\uffff\1\50\4\uffff\1\37"+
            "\1\uffff\1\43\4\uffff\1\40\5\uffff\1\37\1\uffff\1\43\3\uffff"+
            "\1\41\16\uffff\1\51\22\uffff\1\42\6\uffff\1\52\1\53\1\54\33"+
            "\uffff\1\57\6\uffff\1\60\1\uffff\1\56\3\uffff\1\55\2\uffff\1"+
            "\47\2\uffff\1\47\7\uffff\1\46\1\uffff\1\55\1\47\4\uffff\1\44",
            "\1\67\14\uffff\1\73\6\uffff\1\72\4\uffff\1\61\1\uffff\1\65"+
            "\4\uffff\1\62\5\uffff\1\61\1\uffff\1\65\3\uffff\1\63\16\uffff"+
            "\1\74\22\uffff\1\64\6\uffff\1\75\1\76\1\77\33\uffff\1\102\6"+
            "\uffff\1\103\1\uffff\1\101\3\uffff\1\100\2\uffff\1\71\2\uffff"+
            "\1\71\7\uffff\1\70\1\uffff\1\100\1\71\4\uffff\1\66",
            "\1\111\14\uffff\1\115\6\uffff\1\114\6\uffff\1\107\4\uffff\1"+
            "\104\7\uffff\1\107\3\uffff\1\105\16\uffff\1\116\22\uffff\1\106"+
            "\6\uffff\1\117\1\120\1\121\33\uffff\1\124\6\uffff\1\125\1\uffff"+
            "\1\123\3\uffff\1\122\2\uffff\1\113\2\uffff\1\113\7\uffff\1\112"+
            "\1\uffff\1\122\1\113\4\uffff\1\110",
            "\1\132\14\uffff\1\136\6\uffff\1\135\6\uffff\1\130\14\uffff"+
            "\1\130\3\uffff\1\126\16\uffff\1\137\22\uffff\1\127\6\uffff\1"+
            "\140\1\141\1\142\33\uffff\1\145\6\uffff\1\146\1\uffff\1\144"+
            "\3\uffff\1\143\2\uffff\1\134\2\uffff\1\134\7\uffff\1\133\1\uffff"+
            "\1\143\1\134\4\uffff\1\131",
            "\1\152\14\uffff\1\156\6\uffff\1\155\6\uffff\1\150\14\uffff"+
            "\1\150\22\uffff\1\157\22\uffff\1\147\6\uffff\1\160\1\161\1\162"+
            "\33\uffff\1\165\6\uffff\1\166\1\uffff\1\164\3\uffff\1\163\2"+
            "\uffff\1\154\2\uffff\1\154\7\uffff\1\153\1\uffff\1\163\1\154"+
            "\4\uffff\1\151",
            "\1\171\14\uffff\1\175\6\uffff\1\174\6\uffff\1\167\14\uffff"+
            "\1\167\22\uffff\1\176\31\uffff\1\177\1\u0080\1\u0081\33\uffff"+
            "\1\u0084\6\uffff\1\u0085\1\uffff\1\u0083\3\uffff\1\u0082\2\uffff"+
            "\1\173\2\uffff\1\173\7\uffff\1\172\1\uffff\1\u0082\1\173\4\uffff"+
            "\1\170",
            "\1\u0087\14\uffff\1\u008b\6\uffff\1\u008a\46\uffff\1\u008c"+
            "\31\uffff\1\u008d\1\u008e\1\u008f\33\uffff\1\u0092\6\uffff\1"+
            "\u0093\1\uffff\1\u0091\3\uffff\1\u0090\2\uffff\1\u0089\2\uffff"+
            "\1\u0089\7\uffff\1\u0088\1\uffff\1\u0090\1\u0089\4\uffff\1\u0086",
            "\1\u0094\u0082\uffff\1\u0096\2\uffff\1\u0096\7\uffff\1\u0095"+
            "\2\uffff\1\u0096",
            "",
            "",
            "",
            "\1\u0098\14\uffff\1\u0097\6\uffff\1\u009b\100\uffff\1\u009c"+
            "\55\uffff\1\u009a\2\uffff\1\u009a\7\uffff\1\u0099\2\uffff\1"+
            "\u009a",
            "\1\u00a0\15\uffff\1\u009d\42\uffff\1\u009f\11\uffff\1\u00a1"+
            "\2\uffff\1\u00ab\6\uffff\1\u00aa\4\uffff\1\u00a2\1\uffff\1\u00a6"+
            "\4\uffff\1\u00a3\5\uffff\1\u00a2\1\uffff\1\u00a6\3\uffff\1\u00a4"+
            "\16\uffff\1\u00ac\22\uffff\1\u00a5\6\uffff\1\u00ad\1\u00ae\1"+
            "\u00af\23\uffff\1\u00a7\7\uffff\1\u00b2\6\uffff\1\u00b3\1\uffff"+
            "\1\u00b1\3\uffff\1\u00b0\2\uffff\1\u00a9\2\uffff\1\u00a9\7\uffff"+
            "\1\u00a8\1\uffff\1\u00b0\1\u00a9\4\uffff\1\u009e",
            "",
            "",
            "",
            "",
            "",
            "\1\u00b4",
            "\1\u00b5",
            "\1\u00b6",
            "\1\u00ba\15\uffff\1\u00b7\42\uffff\1\u00b9\11\uffff\1\u00bb"+
            "\2\uffff\1\u00c5\6\uffff\1\u00c4\4\uffff\1\u00bc\1\uffff\1\u00c0"+
            "\4\uffff\1\u00bd\5\uffff\1\u00bc\1\uffff\1\u00c0\3\uffff\1\u00be"+
            "\16\uffff\1\u00c6\22\uffff\1\u00bf\6\uffff\1\u00c7\1\u00c8\1"+
            "\u00c9\23\uffff\1\u00c1\7\uffff\1\u00cc\6\uffff\1\u00cd\1\uffff"+
            "\1\u00cb\3\uffff\1\u00ca\2\uffff\1\u00c3\2\uffff\1\u00c3\7\uffff"+
            "\1\u00c2\1\uffff\1\u00ca\1\u00c3\4\uffff\1\u00b8",
            "\1\u00d4\14\uffff\1\u00d8\6\uffff\1\u00d7\4\uffff\1\u00ce\1"+
            "\uffff\1\u00d2\4\uffff\1\u00cf\5\uffff\1\u00ce\1\uffff\1\u00d2"+
            "\3\uffff\1\u00d0\16\uffff\1\u00d9\22\uffff\1\u00d1\6\uffff\1"+
            "\u00da\1\u00db\1\u00dc\33\uffff\1\u00df\6\uffff\1\u00e0\1\uffff"+
            "\1\u00de\3\uffff\1\u00dd\2\uffff\1\u00d6\2\uffff\1\u00d6\7\uffff"+
            "\1\u00d5\1\uffff\1\u00dd\1\u00d6\4\uffff\1\u00d3",
            "\1\u00e6\14\uffff\1\u00ea\6\uffff\1\u00e9\6\uffff\1\u00e4\4"+
            "\uffff\1\u00e1\7\uffff\1\u00e4\3\uffff\1\u00e2\16\uffff\1\u00eb"+
            "\22\uffff\1\u00e3\6\uffff\1\u00ec\1\u00ed\1\u00ee\33\uffff\1"+
            "\u00f1\6\uffff\1\u00f2\1\uffff\1\u00f0\3\uffff\1\u00ef\2\uffff"+
            "\1\u00e8\2\uffff\1\u00e8\7\uffff\1\u00e7\1\uffff\1\u00ef\1\u00e8"+
            "\4\uffff\1\u00e5",
            "\1\u00f7\14\uffff\1\u00fb\6\uffff\1\u00fa\6\uffff\1\u00f5\14"+
            "\uffff\1\u00f5\3\uffff\1\u00f3\16\uffff\1\u00fc\22\uffff\1\u00f4"+
            "\6\uffff\1\u00fd\1\u00fe\1\u00ff\33\uffff\1\u0102\6\uffff\1"+
            "\u0103\1\uffff\1\u0101\3\uffff\1\u0100\2\uffff\1\u00f9\2\uffff"+
            "\1\u00f9\7\uffff\1\u00f8\1\uffff\1\u0100\1\u00f9\4\uffff\1\u00f6",
            "\1\u0107\14\uffff\1\u010b\6\uffff\1\u010a\6\uffff\1\u0105\14"+
            "\uffff\1\u0105\22\uffff\1\u010c\22\uffff\1\u0104\6\uffff\1\u010d"+
            "\1\u010e\1\u010f\33\uffff\1\u0112\6\uffff\1\u0113\1\uffff\1"+
            "\u0111\3\uffff\1\u0110\2\uffff\1\u0109\2\uffff\1\u0109\7\uffff"+
            "\1\u0108\1\uffff\1\u0110\1\u0109\4\uffff\1\u0106",
            "\1\u0116\14\uffff\1\u011a\6\uffff\1\u0119\6\uffff\1\u0114\14"+
            "\uffff\1\u0114\22\uffff\1\u011b\31\uffff\1\u011c\1\u011d\1\u011e"+
            "\33\uffff\1\u0121\6\uffff\1\u0122\1\uffff\1\u0120\3\uffff\1"+
            "\u011f\2\uffff\1\u0118\2\uffff\1\u0118\7\uffff\1\u0117\1\uffff"+
            "\1\u011f\1\u0118\4\uffff\1\u0115",
            "\1\u0124\14\uffff\1\u0128\6\uffff\1\u0127\46\uffff\1\u0129"+
            "\31\uffff\1\u012a\1\u012b\1\u012c\33\uffff\1\u012f\6\uffff\1"+
            "\u0130\1\uffff\1\u012e\3\uffff\1\u012d\2\uffff\1\u0126\2\uffff"+
            "\1\u0126\7\uffff\1\u0125\1\uffff\1\u012d\1\u0126\4\uffff\1\u0123",
            "\1\u0131\u0082\uffff\1\u0133\2\uffff\1\u0133\7\uffff\1\u0132"+
            "\2\uffff\1\u0133",
            "",
            "",
            "",
            "\1\u0135\14\uffff\1\u0134\6\uffff\1\u0138\100\uffff\1\u0139"+
            "\55\uffff\1\u0137\2\uffff\1\u0137\7\uffff\1\u0136\2\uffff\1"+
            "\u0137",
            "",
            "",
            "",
            "",
            "",
            "\1\u013a",
            "\1\u013b",
            "\1\u013c",
            "\1\u0142\14\uffff\1\u0146\6\uffff\1\u0145\6\uffff\1\u0140\4"+
            "\uffff\1\u013d\7\uffff\1\u0140\3\uffff\1\u013e\16\uffff\1\u0147"+
            "\22\uffff\1\u013f\6\uffff\1\u0148\1\u0149\1\u014a\33\uffff\1"+
            "\u014d\6\uffff\1\u014e\1\uffff\1\u014c\3\uffff\1\u014b\2\uffff"+
            "\1\u0144\2\uffff\1\u0144\7\uffff\1\u0143\1\uffff\1\u014b\1\u0144"+
            "\4\uffff\1\u0141",
            "\1\u0153\14\uffff\1\u0157\6\uffff\1\u0156\6\uffff\1\u0151\14"+
            "\uffff\1\u0151\3\uffff\1\u014f\16\uffff\1\u0158\22\uffff\1\u0150"+
            "\6\uffff\1\u0159\1\u015a\1\u015b\33\uffff\1\u015e\6\uffff\1"+
            "\u015f\1\uffff\1\u015d\3\uffff\1\u015c\2\uffff\1\u0155\2\uffff"+
            "\1\u0155\7\uffff\1\u0154\1\uffff\1\u015c\1\u0155\4\uffff\1\u0152",
            "\1\u0163\14\uffff\1\u0167\6\uffff\1\u0166\6\uffff\1\u0161\14"+
            "\uffff\1\u0161\22\uffff\1\u0168\22\uffff\1\u0160\6\uffff\1\u0169"+
            "\1\u016a\1\u016b\33\uffff\1\u016e\6\uffff\1\u016f\1\uffff\1"+
            "\u016d\3\uffff\1\u016c\2\uffff\1\u0165\2\uffff\1\u0165\7\uffff"+
            "\1\u0164\1\uffff\1\u016c\1\u0165\4\uffff\1\u0162",
            "\1\u0172\14\uffff\1\u0176\6\uffff\1\u0175\6\uffff\1\u0170\14"+
            "\uffff\1\u0170\22\uffff\1\u0177\31\uffff\1\u0178\1\u0179\1\u017a"+
            "\33\uffff\1\u017d\6\uffff\1\u017e\1\uffff\1\u017c\3\uffff\1"+
            "\u017b\2\uffff\1\u0174\2\uffff\1\u0174\7\uffff\1\u0173\1\uffff"+
            "\1\u017b\1\u0174\4\uffff\1\u0171",
            "\1\u0180\14\uffff\1\u0184\6\uffff\1\u0183\46\uffff\1\u0185"+
            "\31\uffff\1\u0186\1\u0187\1\u0188\33\uffff\1\u018b\6\uffff\1"+
            "\u018c\1\uffff\1\u018a\3\uffff\1\u0189\2\uffff\1\u0182\2\uffff"+
            "\1\u0182\7\uffff\1\u0181\1\uffff\1\u0189\1\u0182\4\uffff\1\u017f",
            "\1\u018d\u0082\uffff\1\u018f\2\uffff\1\u018f\7\uffff\1\u018e"+
            "\2\uffff\1\u018f",
            "",
            "",
            "",
            "\1\u0191\14\uffff\1\u0190\6\uffff\1\u0194\100\uffff\1\u0195"+
            "\55\uffff\1\u0193\2\uffff\1\u0193\7\uffff\1\u0192\2\uffff\1"+
            "\u0193",
            "\1\u0199\15\uffff\1\u0196\42\uffff\1\u0198\11\uffff\1\u019a"+
            "\2\uffff\1\u01a4\6\uffff\1\u01a3\4\uffff\1\u019b\1\uffff\1\u019f"+
            "\4\uffff\1\u019c\5\uffff\1\u019b\1\uffff\1\u019f\3\uffff\1\u019d"+
            "\16\uffff\1\u01a5\22\uffff\1\u019e\6\uffff\1\u01a6\1\u01a7\1"+
            "\u01a8\23\uffff\1\u01a0\7\uffff\1\u01ab\6\uffff\1\u01ac\1\uffff"+
            "\1\u01aa\3\uffff\1\u01a9\2\uffff\1\u01a2\2\uffff\1\u01a2\7\uffff"+
            "\1\u01a1\1\uffff\1\u01a9\1\u01a2\4\uffff\1\u0197",
            "",
            "",
            "",
            "",
            "",
            "\1\u01ad",
            "\1\u01ae",
            "\1\u01af",
            "\1\u01b4\14\uffff\1\u01b8\6\uffff\1\u01b7\6\uffff\1\u01b2\14"+
            "\uffff\1\u01b2\3\uffff\1\u01b0\16\uffff\1\u01b9\22\uffff\1\u01b1"+
            "\6\uffff\1\u01ba\1\u01bb\1\u01bc\33\uffff\1\u01bf\6\uffff\1"+
            "\u01c0\1\uffff\1\u01be\3\uffff\1\u01bd\2\uffff\1\u01b6\2\uffff"+
            "\1\u01b6\7\uffff\1\u01b5\1\uffff\1\u01bd\1\u01b6\4\uffff\1\u01b3",
            "\1\u01c4\14\uffff\1\u01c8\6\uffff\1\u01c7\6\uffff\1\u01c2\14"+
            "\uffff\1\u01c2\22\uffff\1\u01c9\22\uffff\1\u01c1\6\uffff\1\u01ca"+
            "\1\u01cb\1\u01cc\33\uffff\1\u01cf\6\uffff\1\u01d0\1\uffff\1"+
            "\u01ce\3\uffff\1\u01cd\2\uffff\1\u01c6\2\uffff\1\u01c6\7\uffff"+
            "\1\u01c5\1\uffff\1\u01cd\1\u01c6\4\uffff\1\u01c3",
            "\1\u01d3\14\uffff\1\u01d7\6\uffff\1\u01d6\6\uffff\1\u01d1\14"+
            "\uffff\1\u01d1\22\uffff\1\u01d8\31\uffff\1\u01d9\1\u01da\1\u01db"+
            "\33\uffff\1\u01de\6\uffff\1\u01df\1\uffff\1\u01dd\3\uffff\1"+
            "\u01dc\2\uffff\1\u01d5\2\uffff\1\u01d5\7\uffff\1\u01d4\1\uffff"+
            "\1\u01dc\1\u01d5\4\uffff\1\u01d2",
            "\1\u01e1\14\uffff\1\u01e5\6\uffff\1\u01e4\46\uffff\1\u01e6"+
            "\31\uffff\1\u01e7\1\u01e8\1\u01e9\33\uffff\1\u01ec\6\uffff\1"+
            "\u01ed\1\uffff\1\u01eb\3\uffff\1\u01ea\2\uffff\1\u01e3\2\uffff"+
            "\1\u01e3\7\uffff\1\u01e2\1\uffff\1\u01ea\1\u01e3\4\uffff\1\u01e0",
            "\1\u01ee\u0082\uffff\1\u01f0\2\uffff\1\u01f0\7\uffff\1\u01ef"+
            "\2\uffff\1\u01f0",
            "",
            "",
            "",
            "\1\u01f2\14\uffff\1\u01f1\6\uffff\1\u01f5\100\uffff\1\u01f6"+
            "\55\uffff\1\u01f4\2\uffff\1\u01f4\7\uffff\1\u01f3\2\uffff\1"+
            "\u01f4",
            "\1\u01fa\15\uffff\1\u01f7\42\uffff\1\u01f9\11\uffff\1\u01fb"+
            "\2\uffff\1\u0205\6\uffff\1\u0204\4\uffff\1\u01fc\1\uffff\1\u0200"+
            "\4\uffff\1\u01fd\5\uffff\1\u01fc\1\uffff\1\u0200\3\uffff\1\u01fe"+
            "\16\uffff\1\u0206\22\uffff\1\u01ff\6\uffff\1\u0207\1\u0208\1"+
            "\u0209\23\uffff\1\u0201\7\uffff\1\u020c\6\uffff\1\u020d\1\uffff"+
            "\1\u020b\3\uffff\1\u020a\2\uffff\1\u0203\2\uffff\1\u0203\7\uffff"+
            "\1\u0202\1\uffff\1\u020a\1\u0203\4\uffff\1\u01f8",
            "",
            "",
            "",
            "",
            "",
            "\1\u020e",
            "\1\u020f",
            "\1\u0210",
            "\1\u0214\14\uffff\1\u0218\6\uffff\1\u0217\6\uffff\1\u0212\14"+
            "\uffff\1\u0212\22\uffff\1\u0219\22\uffff\1\u0211\6\uffff\1\u021a"+
            "\1\u021b\1\u021c\33\uffff\1\u021f\6\uffff\1\u0220\1\uffff\1"+
            "\u021e\3\uffff\1\u021d\2\uffff\1\u0216\2\uffff\1\u0216\7\uffff"+
            "\1\u0215\1\uffff\1\u021d\1\u0216\4\uffff\1\u0213",
            "\1\u0223\14\uffff\1\u0227\6\uffff\1\u0226\6\uffff\1\u0221\14"+
            "\uffff\1\u0221\22\uffff\1\u0228\31\uffff\1\u0229\1\u022a\1\u022b"+
            "\33\uffff\1\u022e\6\uffff\1\u022f\1\uffff\1\u022d\3\uffff\1"+
            "\u022c\2\uffff\1\u0225\2\uffff\1\u0225\7\uffff\1\u0224\1\uffff"+
            "\1\u022c\1\u0225\4\uffff\1\u0222",
            "\1\u0231\14\uffff\1\u0235\6\uffff\1\u0234\46\uffff\1\u0236"+
            "\31\uffff\1\u0237\1\u0238\1\u0239\33\uffff\1\u023c\6\uffff\1"+
            "\u023d\1\uffff\1\u023b\3\uffff\1\u023a\2\uffff\1\u0233\2\uffff"+
            "\1\u0233\7\uffff\1\u0232\1\uffff\1\u023a\1\u0233\4\uffff\1\u0230",
            "\1\u023e\u0082\uffff\1\u0240\2\uffff\1\u0240\7\uffff\1\u023f"+
            "\2\uffff\1\u0240",
            "",
            "",
            "",
            "\1\u0242\14\uffff\1\u0241\6\uffff\1\u0245\100\uffff\1\u0246"+
            "\55\uffff\1\u0244\2\uffff\1\u0244\7\uffff\1\u0243\2\uffff\1"+
            "\u0244",
            "\1\u024a\15\uffff\1\u0247\42\uffff\1\u0249\11\uffff\1\u024b"+
            "\2\uffff\1\u0255\6\uffff\1\u0254\4\uffff\1\u024c\1\uffff\1\u0250"+
            "\4\uffff\1\u024d\5\uffff\1\u024c\1\uffff\1\u0250\3\uffff\1\u024e"+
            "\16\uffff\1\u0256\22\uffff\1\u024f\6\uffff\1\u0257\1\u0258\1"+
            "\u0259\23\uffff\1\u0251\7\uffff\1\u025c\6\uffff\1\u025d\1\uffff"+
            "\1\u025b\3\uffff\1\u025a\2\uffff\1\u0253\2\uffff\1\u0253\7\uffff"+
            "\1\u0252\1\uffff\1\u025a\1\u0253\4\uffff\1\u0248",
            "",
            "",
            "",
            "",
            "",
            "\1\u025e",
            "\1\u025f",
            "\1\u0260",
            "\1\u0263\14\uffff\1\u0267\6\uffff\1\u0266\6\uffff\1\u0261\14"+
            "\uffff\1\u0261\22\uffff\1\u0268\31\uffff\1\u0269\1\u026a\1\u026b"+
            "\33\uffff\1\u026e\6\uffff\1\u026f\1\uffff\1\u026d\3\uffff\1"+
            "\u026c\2\uffff\1\u0265\2\uffff\1\u0265\7\uffff\1\u0264\1\uffff"+
            "\1\u026c\1\u0265\4\uffff\1\u0262",
            "\1\u0271\14\uffff\1\u0275\6\uffff\1\u0274\46\uffff\1\u0276"+
            "\31\uffff\1\u0277\1\u0278\1\u0279\33\uffff\1\u027c\6\uffff\1"+
            "\u027d\1\uffff\1\u027b\3\uffff\1\u027a\2\uffff\1\u0273\2\uffff"+
            "\1\u0273\7\uffff\1\u0272\1\uffff\1\u027a\1\u0273\4\uffff\1\u0270",
            "\1\u027e\u0082\uffff\1\u0280\2\uffff\1\u0280\7\uffff\1\u027f"+
            "\2\uffff\1\u0280",
            "",
            "",
            "",
            "\1\u0282\14\uffff\1\u0281\6\uffff\1\u0285\100\uffff\1\u0286"+
            "\55\uffff\1\u0284\2\uffff\1\u0284\7\uffff\1\u0283\2\uffff\1"+
            "\u0284",
            "\1\u028a\15\uffff\1\u0287\42\uffff\1\u0289\11\uffff\1\u028b"+
            "\2\uffff\1\u0295\6\uffff\1\u0294\4\uffff\1\u028c\1\uffff\1\u0290"+
            "\4\uffff\1\u028d\5\uffff\1\u028c\1\uffff\1\u0290\3\uffff\1\u028e"+
            "\16\uffff\1\u0296\22\uffff\1\u028f\6\uffff\1\u0297\1\u0298\1"+
            "\u0299\23\uffff\1\u0291\7\uffff\1\u029c\6\uffff\1\u029d\1\uffff"+
            "\1\u029b\3\uffff\1\u029a\2\uffff\1\u0293\2\uffff\1\u0293\7\uffff"+
            "\1\u0292\1\uffff\1\u029a\1\u0293\4\uffff\1\u0288",
            "",
            "",
            "",
            "",
            "",
            "\1\u029e",
            "\1\u029f",
            "\1\u02a0",
            "\1\u02a2\14\uffff\1\u02a6\6\uffff\1\u02a5\46\uffff\1\u02a7"+
            "\31\uffff\1\u02a8\1\u02a9\1\u02aa\33\uffff\1\u02ad\6\uffff\1"+
            "\u02ae\1\uffff\1\u02ac\3\uffff\1\u02ab\2\uffff\1\u02a4\2\uffff"+
            "\1\u02a4\7\uffff\1\u02a3\1\uffff\1\u02ab\1\u02a4\4\uffff\1\u02a1",
            "\1\u02af\u0082\uffff\1\u02b1\2\uffff\1\u02b1\7\uffff\1\u02b0"+
            "\2\uffff\1\u02b1",
            "",
            "",
            "",
            "\1\u02b3\14\uffff\1\u02b2\6\uffff\1\u02b6\100\uffff\1\u02b7"+
            "\55\uffff\1\u02b5\2\uffff\1\u02b5\7\uffff\1\u02b4\2\uffff\1"+
            "\u02b5",
            "\1\u02bb\15\uffff\1\u02b8\42\uffff\1\u02ba\11\uffff\1\u02bc"+
            "\2\uffff\1\u02c6\6\uffff\1\u02c5\4\uffff\1\u02bd\1\uffff\1\u02c1"+
            "\4\uffff\1\u02be\5\uffff\1\u02bd\1\uffff\1\u02c1\3\uffff\1\u02bf"+
            "\16\uffff\1\u02c7\22\uffff\1\u02c0\6\uffff\1\u02c8\1\u02c9\1"+
            "\u02ca\23\uffff\1\u02c2\7\uffff\1\u02cd\6\uffff\1\u02ce\1\uffff"+
            "\1\u02cc\3\uffff\1\u02cb\2\uffff\1\u02c4\2\uffff\1\u02c4\7\uffff"+
            "\1\u02c3\1\uffff\1\u02cb\1\u02c4\4\uffff\1\u02b9",
            "",
            "",
            "",
            "",
            "",
            "\1\u02cf",
            "\1\u02d0",
            "\1\u02d1",
            "\1\u02d2\u0082\uffff\1\u02d4\2\uffff\1\u02d4\7\uffff\1\u02d3"+
            "\2\uffff\1\u02d4",
            "",
            "",
            "",
            "\1\u02d6\14\uffff\1\u02d5\6\uffff\1\u02d9\100\uffff\1\u02da"+
            "\55\uffff\1\u02d8\2\uffff\1\u02d8\7\uffff\1\u02d7\2\uffff\1"+
            "\u02d8",
            "\1\u02de\15\uffff\1\u02db\42\uffff\1\u02dd\11\uffff\1\u02df"+
            "\2\uffff\1\u02e9\6\uffff\1\u02e8\4\uffff\1\u02e0\1\uffff\1\u02e4"+
            "\4\uffff\1\u02e1\5\uffff\1\u02e0\1\uffff\1\u02e4\3\uffff\1\u02e2"+
            "\16\uffff\1\u02ea\22\uffff\1\u02e3\6\uffff\1\u02eb\1\u02ec\1"+
            "\u02ed\23\uffff\1\u02e5\7\uffff\1\u02f0\6\uffff\1\u02f1\1\uffff"+
            "\1\u02ef\3\uffff\1\u02ee\2\uffff\1\u02e7\2\uffff\1\u02e7\7\uffff"+
            "\1\u02e6\1\uffff\1\u02ee\1\u02e7\4\uffff\1\u02dc",
            "",
            "",
            "",
            "",
            "",
            "\1\u02f2",
            "\1\u02f3",
            "\1\u02f4",
            "",
            "",
            "",
            "\1\u02f5\42\uffff\1\u02f7\152\uffff\1\u02f7\52\uffff\1\u02f6",
            "\1\u02fa\36\uffff\1\u02fc\14\uffff\1\u02f8\6\uffff\1\u02f9"+
            "\133\uffff\1\u02fb\22\uffff\1\u02fd\2\uffff\1\u02fd\12\uffff"+
            "\1\u02fd",
            "\1\u0300\36\uffff\1\u0302\14\uffff\1\u02fe\6\uffff\1\u02ff"+
            "\133\uffff\1\u0301\22\uffff\1\u0303\2\uffff\1\u0303\12\uffff"+
            "\1\u0303",
            "\1\u0306\36\uffff\1\u0308\14\uffff\1\u0304\6\uffff\1\u0305"+
            "\133\uffff\1\u0307\22\uffff\1\u0309\2\uffff\1\u0309\12\uffff"+
            "\1\u0309",
            "\1\u030b\14\uffff\1\u030a\6\uffff\1\u030e\100\uffff\1\u030f"+
            "\55\uffff\1\u030d\2\uffff\1\u030d\7\uffff\1\u030c\2\uffff\1"+
            "\u030d",
            "\1\u0310\u0082\uffff\1\u0311\2\uffff\1\u0311\12\uffff\1\u0311",
            "\1\u0313\152\uffff\1\u0313\52\uffff\1\u0312",
            "\1\u0317\60\uffff\1\u0314\23\uffff\1\u0315\2\uffff\1\u0316"+
            "\55\uffff\1\u0318\45\uffff\1\u0319\27\uffff\1\u031b\2\uffff"+
            "\1\u031b\7\uffff\1\u031a\2\uffff\1\u031b\4\uffff\1\u0319",
            "\1\u031e\21\uffff\1\u0321\50\uffff\1\u0329\1\u032c\1\u032f"+
            "\1\u0320\1\uffff\1\u0324\2\u032f\1\u0328\1\uffff\1\u031c\1\u0326"+
            "\1\u032f\1\u031d\1\u0327\1\u0325\1\u032f\1\u0323\2\u0327\1\u032f"+
            "\1\u0328\1\uffff\1\u032b\1\u032f\1\u032d\1\u0324\1\u032f\1\u0325"+
            "\1\u032f\1\u0323\1\u032e\1\u0326\1\u032f\1\uffff\1\u032a\1\u032f"+
            "\26\uffff\1\u031f\52\uffff\1\u0322",
            "\1\u0338\11\uffff\1\u0331\2\uffff\1\u0330\6\uffff\1\u033b\4"+
            "\uffff\1\u0332\1\uffff\1\u0336\4\uffff\1\u0333\5\uffff\1\u0332"+
            "\1\uffff\1\u0336\3\uffff\1\u0334\16\uffff\1\u033c\22\uffff\1"+
            "\u0335\6\uffff\1\u033d\1\u033e\1\u033f\33\uffff\1\u0342\6\uffff"+
            "\1\u0343\1\uffff\1\u0341\3\uffff\1\u0340\2\uffff\1\u033a\2\uffff"+
            "\1\u033a\7\uffff\1\u0339\1\uffff\1\u0340\1\u033a\4\uffff\1\u0337",
            "\1\u034a\14\uffff\1\u034e\6\uffff\1\u034d\4\uffff\1\u0344\1"+
            "\uffff\1\u0348\4\uffff\1\u0345\5\uffff\1\u0344\1\uffff\1\u0348"+
            "\3\uffff\1\u0346\16\uffff\1\u034f\22\uffff\1\u0347\6\uffff\1"+
            "\u0350\1\u0351\1\u0352\33\uffff\1\u0355\6\uffff\1\u0356\1\uffff"+
            "\1\u0354\3\uffff\1\u0353\2\uffff\1\u034c\2\uffff\1\u034c\7\uffff"+
            "\1\u034b\1\uffff\1\u0353\1\u034c\4\uffff\1\u0349",
            "\1\u035c\14\uffff\1\u0360\6\uffff\1\u035f\6\uffff\1\u035a\4"+
            "\uffff\1\u0357\7\uffff\1\u035a\3\uffff\1\u0358\16\uffff\1\u0361"+
            "\22\uffff\1\u0359\6\uffff\1\u0362\1\u0363\1\u0364\33\uffff\1"+
            "\u0367\6\uffff\1\u0368\1\uffff\1\u0366\3\uffff\1\u0365\2\uffff"+
            "\1\u035e\2\uffff\1\u035e\7\uffff\1\u035d\1\uffff\1\u0365\1\u035e"+
            "\4\uffff\1\u035b",
            "\1\u036d\14\uffff\1\u0371\6\uffff\1\u0370\6\uffff\1\u036b\14"+
            "\uffff\1\u036b\3\uffff\1\u0369\16\uffff\1\u0372\22\uffff\1\u036a"+
            "\6\uffff\1\u0373\1\u0374\1\u0375\33\uffff\1\u0378\6\uffff\1"+
            "\u0379\1\uffff\1\u0377\3\uffff\1\u0376\2\uffff\1\u036f\2\uffff"+
            "\1\u036f\7\uffff\1\u036e\1\uffff\1\u0376\1\u036f\4\uffff\1\u036c",
            "\1\u037d\14\uffff\1\u0381\6\uffff\1\u0380\6\uffff\1\u037b\14"+
            "\uffff\1\u037b\22\uffff\1\u0382\22\uffff\1\u037a\6\uffff\1\u0383"+
            "\1\u0384\1\u0385\33\uffff\1\u0388\6\uffff\1\u0389\1\uffff\1"+
            "\u0387\3\uffff\1\u0386\2\uffff\1\u037f\2\uffff\1\u037f\7\uffff"+
            "\1\u037e\1\uffff\1\u0386\1\u037f\4\uffff\1\u037c",
            "\1\u038c\14\uffff\1\u0390\6\uffff\1\u038f\6\uffff\1\u038a\14"+
            "\uffff\1\u038a\22\uffff\1\u0391\31\uffff\1\u0392\1\u0393\1\u0394"+
            "\33\uffff\1\u0397\6\uffff\1\u0398\1\uffff\1\u0396\3\uffff\1"+
            "\u0395\2\uffff\1\u038e\2\uffff\1\u038e\7\uffff\1\u038d\1\uffff"+
            "\1\u0395\1\u038e\4\uffff\1\u038b",
            "\1\u039a\14\uffff\1\u039e\6\uffff\1\u039d\46\uffff\1\u039f"+
            "\31\uffff\1\u03a0\1\u03a1\1\u03a2\33\uffff\1\u03a5\6\uffff\1"+
            "\u03a6\1\uffff\1\u03a4\3\uffff\1\u03a3\2\uffff\1\u039c\2\uffff"+
            "\1\u039c\7\uffff\1\u039b\1\uffff\1\u03a3\1\u039c\4\uffff\1\u0399",
            "\1\u03a9\104\uffff\1\u03a7\2\uffff\1\u03a8\55\uffff\1\u03aa",
            "\1\u03b1\21\uffff\1\u03ad\50\uffff\1\u03b6\1\u03b9\1\u03bc"+
            "\1\u03ab\1\uffff\1\u03b1\2\u03bc\1\u03b5\1\uffff\1\u03ac\1\u03b3"+
            "\1\u03bc\1\u03af\1\u03b4\1\u03b2\1\u03bc\1\u03b0\2\u03b4\1\u03bc"+
            "\1\u03b5\1\uffff\1\u03b8\1\u03bc\1\u03ba\1\u03b1\1\u03bc\1\u03b2"+
            "\1\u03bc\1\u03b0\1\u03bb\1\u03b3\1\u03bc\1\uffff\1\u03b7\1\u03bc"+
            "\26\uffff\1\u03bd\52\uffff\1\u03ae",
            "\1\u03c4\21\uffff\1\u03c0\50\uffff\1\u03c9\1\u03cc\1\u03cf"+
            "\1\u03be\1\uffff\1\u03c4\2\u03cf\1\u03c8\1\uffff\1\u03bf\1\u03c6"+
            "\1\u03cf\1\u03c2\1\u03c7\1\u03c5\1\u03cf\1\u03c3\2\u03c7\1\u03cf"+
            "\1\u03c8\1\uffff\1\u03cb\1\u03cf\1\u03cd\1\u03c4\1\u03cf\1\u03c5"+
            "\1\u03cf\1\u03c3\1\u03ce\1\u03c6\1\u03cf\1\uffff\1\u03ca\1\u03cf"+
            "\26\uffff\1\u03d0\52\uffff\1\u03c1",
            "\1\u03d2\14\uffff\1\u03d1\6\uffff\1\u03d5\100\uffff\1\u03d6"+
            "\55\uffff\1\u03d4\2\uffff\1\u03d4\7\uffff\1\u03d3\2\uffff\1"+
            "\u03d4",
            "\1\u03da\15\uffff\1\u03d7\42\uffff\1\u03d9\11\uffff\1\u03db"+
            "\2\uffff\1\u03e5\6\uffff\1\u03e4\4\uffff\1\u03dc\1\uffff\1\u03e0"+
            "\4\uffff\1\u03dd\5\uffff\1\u03dc\1\uffff\1\u03e0\3\uffff\1\u03de"+
            "\16\uffff\1\u03e6\22\uffff\1\u03df\6\uffff\1\u03e7\1\u03e8\1"+
            "\u03e9\23\uffff\1\u03e1\7\uffff\1\u03ec\6\uffff\1\u03ed\1\uffff"+
            "\1\u03eb\3\uffff\1\u03ea\2\uffff\1\u03e3\2\uffff\1\u03e3\7\uffff"+
            "\1\u03e2\1\uffff\1\u03ea\1\u03e3\4\uffff\1\u03d8",
            "\1\u03ef\72\uffff\1\u03f4\1\u03f7\1\u03fa\2\uffff\1\u03ef\2"+
            "\u03fa\1\u03f3\2\uffff\1\u03f1\1\u03fa\2\u03f2\1\u03f0\1\u03fa"+
            "\1\u03ee\2\u03f2\1\u03fa\1\u03f3\1\uffff\1\u03f6\1\u03fa\1\u03f8"+
            "\1\u03ef\1\u03fa\1\u03f0\1\u03fa\1\u03ee\1\u03f9\1\u03f1\1\u03fa"+
            "\1\uffff\1\u03f5\1\u03fa\26\uffff\1\u03fb",
            "\1\u03fd\72\uffff\1\u0402\1\u0405\1\u0408\2\uffff\1\u03fd\2"+
            "\u0408\1\u0401\2\uffff\1\u03ff\1\u0408\2\u0400\1\u03fe\1\u0408"+
            "\1\u03fc\2\u0400\1\u0408\1\u0401\1\uffff\1\u0404\1\u0408\1\u0406"+
            "\1\u03fd\1\u0408\1\u03fe\1\u0408\1\u03fc\1\u0407\1\u03ff\1\u0408"+
            "\1\uffff\1\u0403\1\u0408\26\uffff\1\u0409",
            "\1\u040b\72\uffff\1\u0410\1\u0413\1\u0416\2\uffff\1\u040b\2"+
            "\u0416\1\u040f\2\uffff\1\u040d\1\u0416\2\u040e\1\u040c\1\u0416"+
            "\1\u040a\2\u040e\1\u0416\1\u040f\1\uffff\1\u0412\1\u0416\1\u0414"+
            "\1\u040b\1\u0416\1\u040c\1\u0416\1\u040a\1\u0415\1\u040d\1\u0416"+
            "\1\uffff\1\u0411\1\u0416\26\uffff\1\u0417",
            "\1\u0419\72\uffff\1\u041e\1\u0421\1\u0424\2\uffff\1\u0419\2"+
            "\u0424\1\u041d\2\uffff\1\u041b\1\u0424\2\u041c\1\u041a\1\u0424"+
            "\1\u0418\2\u041c\1\u0424\1\u041d\1\uffff\1\u0420\1\u0424\1\u0422"+
            "\1\u0419\1\u0424\1\u041a\1\u0424\1\u0418\1\u0423\1\u041b\1\u0424"+
            "\1\uffff\1\u041f\1\u0424\26\uffff\1\u0425",
            "\1\u0427\72\uffff\1\u042c\1\u042f\1\u0432\2\uffff\1\u0427\2"+
            "\u0432\1\u042b\2\uffff\1\u0429\1\u0432\2\u042a\1\u0428\1\u0432"+
            "\1\u0426\2\u042a\1\u0432\1\u042b\1\uffff\1\u042e\1\u0432\1\u0430"+
            "\1\u0427\1\u0432\1\u0428\1\u0432\1\u0426\1\u0431\1\u0429\1\u0432"+
            "\1\uffff\1\u042d\1\u0432\26\uffff\1\u0433",
            "\1\u0434",
            "\1\u0435",
            "\1\u0436",
            "\1\u0437\u0082\uffff\1\u0438\2\uffff\1\u0438\12\uffff\1\u0438",
            "\1\u0439\u0082\uffff\1\u043a\2\uffff\1\u043a\12\uffff\1\u043a",
            "\1\u043b\u0082\uffff\1\u043c\2\uffff\1\u043c\12\uffff\1\u043c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "()* loopback of 596:23: ( COMMA classical_expr_wrp )*";
        }
    }
    static final String DFA84_eotS =
        "\u00a9\uffff";
    static final String DFA84_eofS =
        "\57\uffff\1\2\171\uffff";
    static final String DFA84_minS =
        "\2\6\26\uffff\1\6\1\uffff\2\6\23\uffff\2\6\2\uffff\1\6\20\uffff"+
        "\1\176\7\uffff\1\176\134\uffff";
    static final String DFA84_maxS =
        "\2\u00cd\26\uffff\1\u00a7\1\uffff\1\u00cd\1\174\23\uffff\2\u00cd"+
        "\2\uffff\1\u00cd\20\uffff\1\176\7\uffff\1\176\134\uffff";
    static final String DFA84_acceptS =
        "\2\uffff\1\2\23\uffff\1\3\1\1\63\uffff\1\4\57\uffff\1\2\25\uffff"+
        "\1\2\25\uffff\2\2";
    static final String DFA84_specialS =
        "\u00a9\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\2\60\uffff\1\2\11\uffff\1\2\2\uffff\1\1\5\uffff\1\26\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\33\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\15\uffff\1\2\42\uffff\1\30\11\uffff\1\2\2\uffff\1\2\6"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\1\uffff\1\27\21\uffff\1\33\7\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff"+
            "\2\2\4\uffff\1\32",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\21\uffff\1\2\50\uffff\3\2\1\63\1\uffff\4\2\1\uffff\1\60"+
            "\13\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\57\52\uffff\1\2",
            "",
            "\1\2\60\uffff\1\2\14\uffff\1\113\6\uffff\1\104\2\uffff\1\2"+
            "\55\uffff\1\2\45\uffff\1\2\27\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\2\uffff\1\2\4\uffff\1\2",
            "\1\2\75\uffff\1\113\6\uffff\1\114\2\uffff\1\2\55\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\11\uffff\2\2\6\uffff\1\2\36\uffff\1\2\11\uffff\4\2\1\uffff"+
            "\4\2\1\27\33\2\14\uffff\1\2\11\uffff\3\2\2\uffff\1\2\3\uffff"+
            "\1\2\6\uffff\3\2\23\uffff\1\2\4\uffff\1\2\2\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\60\uffff\1\2\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\173\6\uffff\1\2\6\uffff\3\2\33"+
            "\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2"+
            "\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "\1\u0091\60\uffff\1\2\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\6\uffff"+
            "\3\2\33\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00a7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00a8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "605:19: ( struct_init | classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )";
        }
    }
    static final String DFA89_eotS =
        "\162\uffff";
    static final String DFA89_eofS =
        "\162\uffff";
    static final String DFA89_minS =
        "\1\67\1\6\3\uffff\2\6\7\uffff\1\67\6\uffff\1\67\1\6\16\uffff\1\6"+
        "\114\uffff";
    static final String DFA89_maxS =
        "\1\u00cd\1\u00c5\3\uffff\2\u00cd\7\uffff\1\u00cd\6\uffff\1\u00c8"+
        "\1\u00a7\16\uffff\1\u00c5\114\uffff";
    static final String DFA89_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\75\uffff\2\1\22\uffff\1\1\21\uffff\1\1"+
        "\11\uffff";
    static final String DFA89_specialS =
        "\162\uffff}>";
    static final String[] DFA89_transitionS = {
            "\1\1\152\uffff\1\4\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\4",
            "\1\4\12\uffff\1\2\6\uffff\1\2\52\uffff\1\2\1\5\2\uffff\2\2"+
            "\2\uffff\1\6\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\33\uffff\1"+
            "\2\45\uffff\1\2\35\uffff\1\2",
            "",
            "",
            "",
            "\1\16\60\uffff\1\26\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\6\uffff\3"+
            "\2\23\uffff\1\4\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff"+
            "\1\25",
            "\1\2\60\uffff\1\2\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\45\6\uffff\1\2\6\uffff\3\2\33\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\6\uffff\3\2\23\uffff\1\4\7\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\2\2\4\uffff\1\102",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\23\uffff\1\4\60\uffff\1\4\75\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\2\uffff\1\2",
            "\1\2\12\uffff\1\2\6\uffff\1\2\50\uffff\4\2\1\uffff\4\2\1\uffff"+
            "\1\126\13\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\150\52\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\4\12\uffff\1\150\6\uffff\1\150\52\uffff\1\150\1\4\2\uffff"+
            "\2\150\2\uffff\1\150\1\uffff\1\150\3\uffff\1\150\3\uffff\1\150"+
            "\3\uffff\1\150\2\uffff\1\150\1\uffff\1\150\3\uffff\1\150\2\uffff"+
            "\1\150\33\uffff\1\150\45\uffff\1\150\35\uffff\1\150",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "629:4: ( object_name | func_pointer1 )";
        }
    }
    static final String DFA101_eotS =
        "\u00b8\uffff";
    static final String DFA101_eofS =
        "\u00b8\uffff";
    static final String DFA101_minS =
        "\1\67\1\6\23\uffff\1\67\2\6\7\uffff\1\6\14\uffff\3\6\1\176\1\67"+
        "\1\6\1\uffff\1\6\2\uffff\3\6\21\uffff\1\176\1\67\1\6\153\uffff";
    static final String DFA101_maxS =
        "\2\u00cd\23\uffff\2\u00cd\1\u00a7\7\uffff\1\174\14\uffff\1\u00cd"+
        "\1\174\1\u00a7\1\176\1\67\1\174\1\uffff\1\174\2\uffff\3\u00cd\21"+
        "\uffff\1\176\1\67\1\174\153\uffff";
    static final String DFA101_acceptS =
        "\2\uffff\1\2\57\uffff\1\1\6\uffff\1\1\23\uffff\16\1\20\uffff\11"+
        "\1\25\uffff\1\1\24\uffff\2\1\24\uffff\4\1";
    static final String DFA101_specialS =
        "\u00b8\uffff}>";
    static final String[] DFA101_transitionS = {
            "\1\2\11\uffff\1\2\2\uffff\1\1\6\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\6\uffff\3\2\33\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff"+
            "\2\2\4\uffff\1\2",
            "\1\2\15\uffff\1\25\42\uffff\1\27\11\uffff\1\2\2\uffff\1\2\6"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\23\uffff\1\37\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1"+
            "\26",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\55\152\uffff\1\55\52\uffff\1\54",
            "\1\61\60\uffff\1\56\23\uffff\1\57\2\uffff\1\60\55\uffff\1\62"+
            "\45\uffff\1\63\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\63",
            "\1\70\21\uffff\1\2\50\uffff\4\2\1\uffff\4\2\1\uffff\1\66\2"+
            "\2\1\67\10\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\71\52\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\114\104\uffff\1\112\2\uffff\1\113\55\uffff\1\115",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\121\60\uffff\1\116\23\uffff\1\117\2\uffff\1\120\55\uffff"+
            "\1\122\45\uffff\1\116\52\uffff\1\116",
            "\1\125\104\uffff\1\123\2\uffff\1\124\55\uffff\1\126",
            "\1\131\21\uffff\1\2\50\uffff\4\2\1\uffff\4\2\1\uffff\1\127"+
            "\2\2\1\130\10\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\132\52\uffff"+
            "\1\2",
            "\1\153",
            "\1\154",
            "\1\156\165\uffff\1\155",
            "",
            "\1\161\104\uffff\1\157\2\uffff\1\160\55\uffff\1\162",
            "",
            "",
            "\1\2\60\uffff\1\2\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\163\6\uffff\1\2\6\uffff\3\2\33"+
            "\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2"+
            "\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\60\uffff\1\u0089\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\33\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\u009f\60\uffff\1\2\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\11\uffff\1\u009e\10\uffff\1\2\6\uffff"+
            "\3\2\33\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00b4",
            "\1\u00b5",
            "\1\u00b7\165\uffff\1\u00b6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "712:14: ( type_convertion )?";
        }
    }
    static final String DFA111_eotS =
        "\u00a4\uffff";
    static final String DFA111_eofS =
        "\1\2\31\uffff\1\2\26\uffff\1\116\162\uffff";
    static final String DFA111_minS =
        "\2\6\30\uffff\1\6\24\uffff\3\6\162\uffff";
    static final String DFA111_maxS =
        "\2\u00cd\30\uffff\1\u00cd\24\uffff\3\u00cd\162\uffff";
    static final String DFA111_acceptS =
        "\2\uffff\1\2\113\uffff\1\1\1\uffff\1\1\24\uffff\1\1\30\uffff\3\1"+
        "\3\uffff\1\1\11\uffff\1\1\3\uffff\3\1\17\uffff";
    static final String DFA111_specialS =
        "\u00a4\uffff}>";
    static final String[] DFA111_transitionS = {
            "\1\2\11\uffff\2\2\45\uffff\1\2\11\uffff\3\2\2\uffff\4\2\2\uffff"+
            "\2\2\1\1\10\2\1\uffff\13\2\1\uffff\2\2\26\uffff\3\2\2\uffff"+
            "\1\2\40\uffff\1\2\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\2\60\uffff\1\32\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\33\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\57\11\uffff\1\2\1\60\6\uffff\1\2\36\uffff\1\2\11\uffff\4"+
            "\2\1\uffff\4\2\1\uffff\10\2\1\61\3\2\1\uffff\13\2\1\uffff\2"+
            "\2\26\uffff\3\2\2\uffff\1\2\40\uffff\1\2\4\uffff\1\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\120\12\uffff\1\116\45\uffff\1\2\11\uffff\1\2\2\uffff\1\2"+
            "\6\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\116\3\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff"+
            "\3\2\33\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\21\uffff\1\2\36\uffff\1\145\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\2\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\23\uffff\1\2\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1"+
            "\2",
            "\1\177\11\uffff\1\u008e\1\116\45\uffff\1\u008e\11\uffff\1\u0084"+
            "\2\116\1\2\1\uffff\1\u0093\3\116\1\uffff\1\2\4\116\1\u0080\1"+
            "\116\1\176\4\116\1\2\3\116\1\u0093\1\116\1\u0080\1\116\1\176"+
            "\3\116\1\2\2\116\14\uffff\1\2\11\uffff\1\116\2\u008e\2\uffff"+
            "\1\116\3\uffff\1\2\6\uffff\3\2\23\uffff\1\u0093\7\uffff\1\2"+
            "\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\u0093\2\uffff"+
            "\1\u0093\7\uffff\1\u0092\1\uffff\1\2\1\u0093\4\uffff\1\u0094",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA111_eot = DFA.unpackEncodedString(DFA111_eotS);
    static final short[] DFA111_eof = DFA.unpackEncodedString(DFA111_eofS);
    static final char[] DFA111_min = DFA.unpackEncodedStringToUnsignedChars(DFA111_minS);
    static final char[] DFA111_max = DFA.unpackEncodedStringToUnsignedChars(DFA111_maxS);
    static final short[] DFA111_accept = DFA.unpackEncodedString(DFA111_acceptS);
    static final short[] DFA111_special = DFA.unpackEncodedString(DFA111_specialS);
    static final short[][] DFA111_transition;

    static {
        int numStates = DFA111_transitionS.length;
        DFA111_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA111_transition[i] = DFA.unpackEncodedString(DFA111_transitionS[i]);
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = DFA111_eot;
            this.eof = DFA111_eof;
            this.min = DFA111_min;
            this.max = DFA111_max;
            this.accept = DFA111_accept;
            this.special = DFA111_special;
            this.transition = DFA111_transition;
        }
        public String getDescription() {
            return "740:29: ( generic )?";
        }
    }
    static final String DFA115_eotS =
        "\u01c3\uffff";
    static final String DFA115_eofS =
        "\43\uffff\1\4\23\uffff\1\4\127\uffff\1\4\u0133\uffff";
    static final String DFA115_minS =
        "\1\6\1\uffff\2\6\24\uffff\1\6\7\uffff\4\6\20\uffff\4\6\20\uffff"+
        "\1\6\25\uffff\1\6\25\uffff\1\6\24\uffff\3\6\3\uffff\2\6\u0132\uffff";
    static final String DFA115_maxS =
        "\1\u00cd\1\uffff\1\u00cd\1\u00a7\24\uffff\1\u00a7\7\uffff\4\u00cd"+
        "\20\uffff\4\u00cd\20\uffff\1\u00a7\25\uffff\1\u00a7\25\uffff\1\u00cd"+
        "\24\uffff\3\u00cd\3\uffff\1\u00cd\1\u00c8\u0132\uffff";
    static final String DFA115_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\u008c\uffff\3\1\36\uffff\1\1\25\uffff\1"+
        "\1\25\uffff\1\1\24\uffff\3\1\3\uffff\5\1\36\uffff\3\1\20\uffff\3"+
        "\1\51\uffff\24\1\1\uffff\23\1\2\uffff\22\1\3\uffff\4\1\45\uffff";
    static final String DFA115_specialS =
        "\u01c3\uffff}>";
    static final String[] DFA115_transitionS = {
            "\1\4\15\uffff\1\1\42\uffff\1\3\11\uffff\1\4\2\uffff\1\4\6\uffff"+
            "\1\4\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff"+
            "\1\4\3\uffff\1\4\16\uffff\1\4\22\uffff\1\4\6\uffff\3\4\23\uffff"+
            "\1\1\7\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\2",
            "",
            "\1\1\60\uffff\1\30\23\uffff\1\1\2\uffff\1\1\55\uffff\1\1\45"+
            "\uffff\1\1\27\uffff\1\4\2\uffff\1\4\7\uffff\1\4\2\uffff\1\4"+
            "\4\uffff\1\1",
            "\1\42\21\uffff\1\4\50\uffff\4\4\1\uffff\4\4\1\uffff\1\40\2"+
            "\4\1\41\10\4\1\uffff\13\4\1\uffff\2\4\26\uffff\1\43\52\uffff"+
            "\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\66\21\uffff\1\4\50\uffff\4\4\1\uffff\4\4\1\uffff\1\64\2"+
            "\4\1\65\10\4\1\uffff\13\4\1\uffff\2\4\26\uffff\1\67\52\uffff"+
            "\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\4\60\uffff\1\4\11\uffff\1\4\2\uffff\1\4\6\uffff\1\4\4\uffff"+
            "\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4\3\uffff"+
            "\1\4\16\uffff\1\4\13\uffff\1\110\6\uffff\1\4\6\uffff\3\4\33"+
            "\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2"+
            "\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\4\60\uffff\1\136\11\uffff\1\4\2\uffff\1\4\6\uffff\1\4\4"+
            "\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4\3"+
            "\uffff\1\4\16\uffff\1\4\22\uffff\1\4\6\uffff\3\4\33\uffff\1"+
            "\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1"+
            "\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\164\60\uffff\1\4\11\uffff\1\4\2\uffff\1\4\6\uffff\1\4\4"+
            "\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4\3"+
            "\uffff\1\4\16\uffff\1\4\11\uffff\1\1\10\uffff\1\4\6\uffff\3"+
            "\4\33\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\u0089\11\uffff\2\4\6\uffff\1\4\36\uffff\1\u0091\11\uffff"+
            "\1\u008a\2\4\1\u0093\1\uffff\4\4\1\uffff\1\u0093\4\4\1\u008b"+
            "\1\4\1\u008f\4\4\1\1\5\4\1\u008b\1\4\1\u008f\3\4\1\1\2\4\14"+
            "\uffff\1\u0093\11\uffff\3\4\2\uffff\1\4\3\uffff\1\1\6\uffff"+
            "\3\u0093\23\uffff\1\4\4\uffff\1\4\2\uffff\1\u0093\6\uffff\1"+
            "\u0093\1\uffff\1\u0093\3\uffff\1\u0093\2\uffff\1\u0093\2\uffff"+
            "\1\u0093\7\uffff\1\u0092\1\uffff\2\u0093\4\uffff\1\u0090",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\4\60\uffff\1\4\11\uffff\1\4\2\uffff\1\4\6\uffff\1\4\4\uffff"+
            "\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4\3\uffff"+
            "\1\4\16\uffff\1\4\13\uffff\1\u00b2\6\uffff\1\4\6\uffff\3\4\33"+
            "\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2"+
            "\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\4\60\uffff\1\u00c8\11\uffff\1\4\2\uffff\1\4\6\uffff\1\4"+
            "\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4"+
            "\3\uffff\1\4\16\uffff\1\4\22\uffff\1\4\6\uffff\3\4\33\uffff"+
            "\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff"+
            "\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\u00de\60\uffff\1\4\11\uffff\1\4\2\uffff\1\4\6\uffff\1\4"+
            "\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4"+
            "\3\uffff\1\4\16\uffff\1\4\11\uffff\1\u0093\10\uffff\1\4\6\uffff"+
            "\3\4\33\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\u00f3\11\uffff\2\4\6\uffff\1\4\36\uffff\1\u00fb\11\uffff"+
            "\1\u00f4\2\4\1\u00fd\1\uffff\4\4\1\uffff\1\u00fd\4\4\1\u00f5"+
            "\1\4\1\u00f9\4\4\1\u0093\5\4\1\u00f5\1\4\1\u00f9\3\4\1\u0093"+
            "\2\4\14\uffff\1\u00fd\11\uffff\3\4\2\uffff\1\4\3\uffff\1\u0093"+
            "\6\uffff\3\u00fd\23\uffff\1\4\4\uffff\1\4\2\uffff\1\u00fd\6"+
            "\uffff\1\u00fd\1\uffff\1\u00fd\3\uffff\1\u00fd\2\uffff\1\u00fd"+
            "\2\uffff\1\u00fd\7\uffff\1\u00fc\1\uffff\2\u00fd\4\uffff\1\u00fa",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u011d\21\uffff\1\4\50\uffff\3\4\2\uffff\4\4\1\uffff\3\4"+
            "\1\u011c\10\4\1\uffff\13\4\1\uffff\2\4\26\uffff\1\u011e\52\uffff"+
            "\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u012f\12\uffff\1\u0130\6\uffff\1\4\50\uffff\4\4\1\uffff"+
            "\4\4\1\uffff\10\4\1\u0131\3\4\1\uffff\13\4\1\uffff\2\4\26\uffff"+
            "\1\4\52\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00fd\60\uffff\1\4\11\uffff\1\4\2\uffff\1\4\6\uffff\1\4"+
            "\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4"+
            "\3\uffff\1\4\16\uffff\1\4\11\uffff\1\u00fd\10\uffff\1\4\6\uffff"+
            "\3\4\33\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\4\60\uffff\1\u0163\11\uffff\1\u015c\2\uffff\1\u015b\6\uffff"+
            "\1\u0166\4\uffff\1\u015d\1\uffff\1\u0161\4\uffff\1\u015e\5\uffff"+
            "\1\u015d\1\uffff\1\u0161\3\uffff\1\u015f\16\uffff\1\u0167\22"+
            "\uffff\1\u0160\6\uffff\1\u0168\1\u0169\1\u016a\33\uffff\1\u016d"+
            "\6\uffff\1\u016e\1\uffff\1\u016c\3\uffff\1\u016b\2\uffff\1\u0165"+
            "\2\uffff\1\u0165\7\uffff\1\u0164\1\uffff\1\u016b\1\u0165\4\uffff"+
            "\1\u0162",
            "\1\4\60\uffff\1\u0176\11\uffff\1\4\2\uffff\1\u017a\6\uffff"+
            "\1\u0179\4\uffff\1\u0170\1\uffff\1\u0174\4\uffff\1\u0171\5\uffff"+
            "\1\u0170\1\uffff\1\u0174\3\uffff\1\u0172\16\uffff\1\u017b\22"+
            "\uffff\1\u0173\6\uffff\1\u017c\1\u017d\1\u017e\33\uffff\1\u0181"+
            "\6\uffff\1\u0182\1\uffff\1\u0180\3\uffff\1\u017f\2\uffff\1\u0178"+
            "\2\uffff\1\u0178\7\uffff\1\u0177\1\uffff\1\u017f\1\u0178\4\uffff"+
            "\1\u0175",
            "\1\4\60\uffff\1\u018a\11\uffff\1\4\2\uffff\1\u018e\6\uffff"+
            "\1\u018d\4\uffff\1\4\1\uffff\1\u0188\4\uffff\1\u0185\5\uffff"+
            "\1\4\1\uffff\1\u0188\3\uffff\1\u0186\16\uffff\1\u018f\22\uffff"+
            "\1\u0187\6\uffff\1\u0190\1\u0191\1\u0192\33\uffff\1\u0195\6"+
            "\uffff\1\u0196\1\uffff\1\u0194\3\uffff\1\u0193\2\uffff\1\u018c"+
            "\2\uffff\1\u018c\7\uffff\1\u018b\1\uffff\1\u0193\1\u018c\4\uffff"+
            "\1\u0189",
            "",
            "",
            "",
            "\1\4\11\uffff\2\4\45\uffff\1\u019b\11\uffff\3\4\1\u019d\1\uffff"+
            "\4\4\1\uffff\1\u019d\13\4\1\uffff\13\4\1\uffff\2\4\14\uffff"+
            "\1\u019d\11\uffff\3\4\2\uffff\1\4\12\uffff\3\u019d\23\uffff"+
            "\1\4\7\uffff\1\u019d\6\uffff\1\u019d\1\uffff\1\u019d\3\uffff"+
            "\1\u019d\2\uffff\1\u019d\2\uffff\1\u019d\7\uffff\1\u019c\1\uffff"+
            "\2\u019d\4\uffff\1\u019a",
            "\1\4\60\uffff\1\u019d\14\uffff\1\4\6\uffff\1\4\156\uffff\1"+
            "\u019d\2\uffff\1\u019d\7\uffff\1\u019d\2\uffff\1\u019d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }
        public String getDescription() {
            return "747:1: l_br_end : ( type_convertion_internal_wrapper R_BR classical_expr_wrp -> ^( TYPE_CONVERTION2 type_convertion_internal_wrapper classical_expr_wrp ) | classical_expr_wrp R_BR ( id_part_end )? );";
        }
    }
    static final String DFA159_eotS =
        "\110\uffff";
    static final String DFA159_eofS =
        "\110\uffff";
    static final String DFA159_minS =
        "\1\20\1\6\24\uffff\1\6\2\uffff\2\20\55\uffff";
    static final String DFA159_maxS =
        "\2\u00cd\24\uffff\1\u00cd\2\uffff\2\u00cd\55\uffff";
    static final String DFA159_acceptS =
        "\2\uffff\1\1\3\uffff\1\2\37\uffff\1\1\10\uffff\1\1\14\uffff\1\1"+
        "\13\uffff";
    static final String DFA159_specialS =
        "\110\uffff}>";
    static final String[] DFA159_transitionS = {
            "\1\2\1\6\11\uffff\1\6\33\uffff\1\1\14\uffff\1\2\5\uffff\1\6"+
            "\5\uffff\1\6\14\uffff\1\6\43\uffff\1\6\40\uffff\1\6\10\uffff"+
            "\1\6\4\uffff\1\6\11\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\6",
            "\1\6\11\uffff\2\2\11\uffff\1\2\33\uffff\1\26\14\uffff\1\2\5"+
            "\uffff\1\2\1\6\2\uffff\1\6\1\uffff\1\2\14\uffff\1\2\43\uffff"+
            "\1\2\40\uffff\1\2\10\uffff\1\2\4\uffff\1\2\11\uffff\1\32\2\uffff"+
            "\1\32\7\uffff\1\31\2\uffff\1\32\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\11\uffff\2\2\11\uffff\1\46\33\uffff\1\2\14\uffff\1\46"+
            "\5\uffff\1\46\1\2\2\uffff\1\2\1\uffff\1\46\14\uffff\1\46\43"+
            "\uffff\1\46\40\uffff\1\46\10\uffff\1\46\4\uffff\1\46\11\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff\1\2\4\uffff\1\46",
            "",
            "",
            "\1\57\1\46\11\uffff\1\57\33\uffff\1\57\14\uffff\1\57\5\uffff"+
            "\1\57\5\uffff\1\57\14\uffff\1\57\43\uffff\1\57\40\uffff\1\57"+
            "\10\uffff\1\57\4\uffff\1\57\11\uffff\1\57\2\uffff\1\57\7\uffff"+
            "\1\57\2\uffff\1\57\4\uffff\1\57",
            "\1\74\1\57\11\uffff\1\74\33\uffff\1\74\14\uffff\1\74\5\uffff"+
            "\1\74\5\uffff\1\74\14\uffff\1\74\43\uffff\1\74\40\uffff\1\74"+
            "\10\uffff\1\74\4\uffff\1\74\11\uffff\1\74\2\uffff\1\74\7\uffff"+
            "\1\74\2\uffff\1\74\4\uffff\1\74",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "955:49: ( method_params )?";
        }
    }
    static final String DFA186_eotS =
        "\110\uffff";
    static final String DFA186_eofS =
        "\110\uffff";
    static final String DFA186_minS =
        "\1\20\7\uffff\1\6\11\uffff\1\6\2\20\63\uffff";
    static final String DFA186_maxS =
        "\1\u00cd\7\uffff\1\u00cd\11\uffff\3\u00cd\63\uffff";
    static final String DFA186_acceptS =
        "\1\uffff\1\2\10\uffff\1\1\24\uffff\1\1\16\uffff\1\1\14\uffff\1\1"+
        "\14\uffff";
    static final String DFA186_specialS =
        "\110\uffff}>";
    static final String[] DFA186_transitionS = {
            "\1\12\1\1\11\uffff\1\1\33\uffff\1\10\14\uffff\1\12\5\uffff\1"+
            "\1\5\uffff\1\1\14\uffff\1\1\43\uffff\1\1\40\uffff\1\1\10\uffff"+
            "\1\1\4\uffff\1\1\11\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff"+
            "\1\12\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\11\uffff\2\12\11\uffff\1\12\33\uffff\1\22\14\uffff\1\12"+
            "\5\uffff\1\12\1\1\2\uffff\1\1\1\uffff\1\12\14\uffff\1\12\43"+
            "\uffff\1\12\40\uffff\1\12\10\uffff\1\12\4\uffff\1\12\11\uffff"+
            "\1\24\2\uffff\1\24\7\uffff\1\23\2\uffff\1\24\4\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\37\11\uffff\1\12\1\37\11\uffff\1\37\33\uffff\1\37\14\uffff"+
            "\1\37\5\uffff\2\37\2\uffff\1\37\1\uffff\1\37\14\uffff\1\37\43"+
            "\uffff\1\37\40\uffff\1\37\10\uffff\1\37\4\uffff\1\37\11\uffff"+
            "\1\37\2\uffff\1\37\7\uffff\1\37\2\uffff\1\37\4\uffff\1\37",
            "\2\56\11\uffff\1\56\33\uffff\1\56\14\uffff\1\56\5\uffff\1\56"+
            "\5\uffff\1\56\14\uffff\1\56\43\uffff\1\56\40\uffff\1\56\10\uffff"+
            "\1\56\4\uffff\1\56\11\uffff\1\56\2\uffff\1\56\7\uffff\1\56\2"+
            "\uffff\1\56\4\uffff\1\56",
            "\2\73\11\uffff\1\73\33\uffff\1\73\14\uffff\1\73\5\uffff\1\73"+
            "\5\uffff\1\73\14\uffff\1\73\43\uffff\1\73\40\uffff\1\73\10\uffff"+
            "\1\73\4\uffff\1\73\11\uffff\1\73\2\uffff\1\73\7\uffff\1\73\2"+
            "\uffff\1\73\4\uffff\1\73",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA186_eot = DFA.unpackEncodedString(DFA186_eotS);
    static final short[] DFA186_eof = DFA.unpackEncodedString(DFA186_eofS);
    static final char[] DFA186_min = DFA.unpackEncodedStringToUnsignedChars(DFA186_minS);
    static final char[] DFA186_max = DFA.unpackEncodedStringToUnsignedChars(DFA186_maxS);
    static final short[] DFA186_accept = DFA.unpackEncodedString(DFA186_acceptS);
    static final short[] DFA186_special = DFA.unpackEncodedString(DFA186_specialS);
    static final short[][] DFA186_transition;

    static {
        int numStates = DFA186_transitionS.length;
        DFA186_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA186_transition[i] = DFA.unpackEncodedString(DFA186_transitionS[i]);
        }
    }

    class DFA186 extends DFA {

        public DFA186(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 186;
            this.eot = DFA186_eot;
            this.eof = DFA186_eof;
            this.min = DFA186_min;
            this.max = DFA186_max;
            this.accept = DFA186_accept;
            this.special = DFA186_special;
            this.transition = DFA186_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1013:4: ( method_param_wrapper )+";
        }
    }
 

    public static final BitSet FOLLOW_code_internal_in_code451 = new BitSet(new long[]{0x0080000008100002L,0x0000000000000000L,0x0000600400010100L,0x0000000000002802L});
    public static final BitSet FOLLOW_operator_wrapper_in_code_internal465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_in_operator_wrapper482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_wrapper_in_operator500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_operator506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_wrapper_in_operator511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_operator518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_operator524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_operator529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_in_operator534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_extern571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_extern574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_L_FBR_in_extern577 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xDFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000007FFFL});
    public static final BitSet FOLLOW_set_in_extern579 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_extern584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_implementation615 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_implementation618 = new BitSet(new long[]{0x0080000000010000L,0x0000000020010010L,0x0010080400010100L,0x0000000000002802L});
    public static final BitSet FOLLOW_category_in_implementation621 = new BitSet(new long[]{0x0080000000010000L,0x0000000020010000L,0x0010080400010100L,0x0000000000002802L});
    public static final BitSet FOLLOW_super_class_in_implementation624 = new BitSet(new long[]{0x0080000000000000L,0x0000000020010000L,0x0010080400010100L,0x0000000000002802L});
    public static final BitSet FOLLOW_implementation_body_in_implementation629 = new BitSet(new long[]{0x0080000000000000L,0x0000000020010000L,0x0010080400010100L,0x0000000000002802L});
    public static final BitSet FOLLOW_171_in_implementation634 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_category649 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_category652 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_category655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_in_implementation_body679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_implementation_body685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_wrapper_in_implementation_body697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_implementation_body703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives719 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_synthesize732 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize735 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000100L,0x0000000000000002L});
    public static final BitSet FOLLOW_L_EQ_in_synthesize738 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize740 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synthesize745 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize747 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000100L,0x0000000000000002L});
    public static final BitSet FOLLOW_L_EQ_in_synthesize750 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize752 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_synthesize758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_typedef770 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_typedef774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_typedef778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_rename_wrapper_in_typedef782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_rename_in_type_rename_wrapper796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_rename815 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_type_rename817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_type_rename819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_in_static_section_wrapper831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_section853 = new BitSet(new long[]{0x0080000008100000L,0x0000000000000400L,0x0000000400010002L,0x0000000000002040L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_section855 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000400L,0x0000000400010002L,0x0000000000002040L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_static_section858 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000400L,0x0000000400000002L,0x0000000000002040L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_static_section861 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000400L,0x0000000400000002L,0x0000000000002040L});
    public static final BitSet FOLLOW_static_section2_in_static_section864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_section_in_static_section2873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper2_in_static_section2880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section3_in_static_section2887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_inline_section899 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_inline_section901 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_field_type_in_inline_section904 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_inline_section906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000410L,0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_inline_section909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_inline_section913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_inline_section917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_static_section3928 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_static_section3930 = new BitSet(new long[]{0x0000000000000000L,0x0000002452222998L,0x0000000000000002L});
    public static final BitSet FOLLOW_indexed_in_static_section3932 = new BitSet(new long[]{0x0000000000000000L,0x0000002452222998L,0x0000000000000002L});
    public static final BitSet FOLLOW_static_end_in_static_section3936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper3_in_static_end948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_in_static_end954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_internal_in_field_end965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_field_end_internal983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_end_internal986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method3_in_implementation_method_wrapper3998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body3_in_implementation_method31016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0100000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method31019 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0100000000000000L});
    public static final BitSet FOLLOW_attribute_in_implementation_method31024 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method31029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_attribute1042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_attribute1045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_attribute1048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_188_in_attribute1051 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute1054 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute1057 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_attribute1060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method21072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method21077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_in_field_type_started_wrapper1089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_field_type_started1108 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_field_type_started1110 = new BitSet(new long[]{0x0000000000000000L,0x0000002452222198L,0x0000000000000002L});
    public static final BitSet FOLLOW_classic_method_declaration_wrapper_in_field_type_started1113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_wrapper_in_field_type_started1117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_classic_method_declaration1166 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_wrapper_in_classic_method_declaration1171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_in_implementation_method_wrapper1184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method2_in_implementation_method_wrapper21201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_implementation_method1218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method1220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method1225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_block_wrapper1238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block1260 = new BitSet(new long[]{0x0080000008100240L,0x20040008A0850C12L,0xA6EA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_block_internal_full_in_block1266 = new BitSet(new long[]{0x0080000008100240L,0x20040008A0850C12L,0xA6EA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_block_in_block1270 = new BitSet(new long[]{0x0080000008100240L,0x20040008A0850C12L,0xA6EA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_R_FBR_in_block1278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block_case1293 = new BitSet(new long[]{0x0080000008100240L,0x20040008A0850C12L,0xE6EA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_block_internal_full_in_block_case1299 = new BitSet(new long[]{0x0080000008100240L,0x20040008A0850C12L,0xE6EA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_block_in_block_case1303 = new BitSet(new long[]{0x0080000008100240L,0x20040008A0850C12L,0xE6EA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_default_stmt_in_block_case1312 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_block_case1317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_full1329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_in_block_internal1340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_wrapper_in_block_internal1350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expression_wrapper_in_block_internal1362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_wrapper_in_block_internal1369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_wrapper_in_block_internal1374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_wrapper_in_block_internal1384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_operators_in_block_internal1404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_variable_in_block_internal1409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_variable_in_block_internal1416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_started_in_block_internal1423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_type_started_in_block_internal1430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_wrapper_in_block_internal1443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_block_internal1448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_operator_in_goto_wrapper1460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_goto_operator1477 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_goto_operator1479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_goto_operator1481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_in_variable_init_wrapper1492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_variable_init1510 = new BitSet(new long[]{0x0080000000010000L,0x0000000000000000L,0x2400000400000002L,0x0000000000002120L});
    public static final BitSet FOLLOW_full_expr2_in_variable_init1514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_variable_init1517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_variable_init1522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_types_in_known_type_started1534 = new BitSet(new long[]{0x0080000000000040L,0x0000000000000000L,0x2400000400000000L,0x0000000000002120L});
    public static final BitSet FOLLOW_ASTERISK_in_known_type_started1536 = new BitSet(new long[]{0x0080000000000040L,0x0000000000000000L,0x2400000400000000L,0x0000000000002120L});
    public static final BitSet FOLLOW_full_expr2_in_known_type_started1539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_in_typeof_started1551 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_typeof_started1553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_variable1566 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_struct_variable1568 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_struct_variable1570 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_struct_variable1573 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_struct_variable1575 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_enum_variable1605 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_enum_variable1607 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_enum_variable1609 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_enum_variable1612 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_enum_variable1614 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_const_expression_wrapper1625 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_const_expression_in_const_expression_wrapper1627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_const_expression1646 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_const_expression1648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper1657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_throw_stmt1674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_throw_stmt1677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_try_stmt1688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_in_try_stmt1691 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000120000000000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt1694 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000120000000000L});
    public static final BitSet FOLLOW_172_in_try_stmt1698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_in_try_stmt1701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_catch_stmt1715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_catch_stmt1718 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1723 = new BitSet(new long[]{0x0080000000000040L});
    public static final BitSet FOLLOW_ASTERISK_in_catch_stmt1726 = new BitSet(new long[]{0x0080000000000040L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1729 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_168_in_catch_stmt1734 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_catch_stmt1738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_in_catch_stmt1741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_switch_stmt_wrapper1754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_switch_stmt1771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_switch_stmt1774 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_switch_expr_in_switch_stmt1777 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_switch_stmt1779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_switch_body_wrapper_in_switch_stmt1785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_switch_body_wrapper1798 = new BitSet(new long[]{0x0080000008100240L,0x20040008A0850812L,0xEEEA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_switch_body_in_switch_body_wrapper1800 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_switch_body_wrapper1802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_switch_body1821 = new BitSet(new long[]{0x0080000008100242L,0x00040008A0850812L,0xEEEA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_switch_internal_in_switch_body1826 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x4800000000000000L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_switch_expr1839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_wrapper_in_switch_internal1856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_wrapper_in_switch_internal1862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_case_stmt_wrapper1871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_case_stmt1888 = new BitSet(new long[]{0x0080000000000000L,0x0004000000000000L,0x0080000000007000L,0x0000000000000080L});
    public static final BitSet FOLLOW_case_expr_wrapper_in_case_stmt1891 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_case_stmt1894 = new BitSet(new long[]{0x0080000008100242L,0x00040008A0850C12L,0xA6EA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_case_body_wrapper_in_case_stmt1899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_body_in_case_body_wrapper1913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_case_body1932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_case_body1939 = new BitSet(new long[]{0x0080000008100242L,0x00040008A0850812L,0xA6EA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_case_expr_in_case_expr_wrapper1955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_case_expr1977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_case_expr1984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_case_in_block_break1995 = new BitSet(new long[]{0x0000000000000202L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_single_operators_in_block_break1997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_default_stmt_wrapper2009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_default_stmt2026 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_default_stmt2029 = new BitSet(new long[]{0x0080000008100242L,0x00040008A0850C12L,0xA6EA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_default_body_wrapper_in_default_stmt2034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_body_in_default_body_wrapper2047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_default_body2067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_default_body2073 = new BitSet(new long[]{0x0080000008100242L,0x00040008A0850812L,0xA6EA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_SINGLE_OP_in_single_operators2088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_wrapper_in_single_operators2095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_break_wrapper2107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_WORD_in_break_stmt2125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_break_stmt2128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_do_stmt2138 = new BitSet(new long[]{0x0080000008100240L,0x00040008A0850C12L,0xA6EA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_if_stmt_block_in_do_stmt2141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_do_stmt2144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_do_stmt2147 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_expression_in_do_stmt2150 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_do_stmt2152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper2161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_while_stmt2180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_while_stmt2183 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_while_expr_in_while_stmt2186 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_while_stmt2188 = new BitSet(new long[]{0x0080000008100240L,0x00040008A0850C12L,0xA6EA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_while_stmt2191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_while_expr2204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper2223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_for_stmt2240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_for_stmt2243 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007022L,0x00000000000021A0L});
    public static final BitSet FOLLOW_for_stmt_expr_wrapper_in_for_stmt2246 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_for_stmt2248 = new BitSet(new long[]{0x0080000008100240L,0x00040008A0850C12L,0xA6EA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_if_stmt_block_in_for_stmt2251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_expr_in_for_stmt_expr_wrapper2263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_for_stmt_expr2282 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000400000002L,0x0000000000002120L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr2_in_for_stmt_expr2290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_for_stmt_int12324 = new BitSet(new long[]{0x0080000000000000L,0x0004000000000810L,0x248A040000007000L,0x00000000000021A0L});
    public static final BitSet FOLLOW_object_wrapped2_in_for_stmt_int12326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22346 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007022L,0x00000000000021A0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22351 = new BitSet(new long[]{0x0080000000000042L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_return_stmt2366 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007022L,0x00000000000021A0L});
    public static final BitSet FOLLOW_expression_in_return_stmt2368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_return_stmt2371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_if_stmt_wrapper2392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_if_stmt2408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_if_stmt2411 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_if_expr_in_if_stmt2414 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_if_stmt2416 = new BitSet(new long[]{0x0080000008100240L,0x00040008A0850C12L,0xA6EA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_if_stmt2419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_if_expr2432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_else_stmt2451 = new BitSet(new long[]{0x0080000008100240L,0x00040008A0850C12L,0xA6EA040400017132L,0x00000000000067BFL});
    public static final BitSet FOLLOW_if_stmt_block_in_else_stmt2454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_if_stmt_block2480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_if_stmt_block2486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_in_static_start_wrapper2498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_start2516 = new BitSet(new long[]{0x0080000000100000L,0x0000000000000000L,0x2400000400000000L,0x0000000000002120L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_start2518 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000400000000L,0x0000000000002120L});
    public static final BitSet FOLLOW_static_type_wrapper_in_static_start2521 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000400000000L,0x0000000000002120L});
    public static final BitSet FOLLOW_full_expr2_in_static_start2524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_type_in_static_type_wrapper2536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_static_type2555 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASTERISK_in_static_type2557 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_id_part_end_internal_in_id_part_end2569 = new BitSet(new long[]{0x0000000001000002L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_DOT_in_id_part_end_internal2584 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_167_in_id_part_end_internal2588 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_id_part_in_id_part_end_internal2591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_internal_in_id_part2629 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000810L});
    public static final BitSet FOLLOW_function_brackets_wrapper_in_id_part2631 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_index_wrapper_in_id_part2634 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_id_part_in_object_name2647 = new BitSet(new long[]{0x0000000001000002L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_name2649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_method_call_wrapper2663 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000810L,0x2400000000001000L,0x0000000000000120L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper2665 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_method_call_wrapper2667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper22690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_in_method_call22709 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_method_name_in_method_call22711 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_method_call_message_list_wrapper_in_method_call22715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_internal_in_object_wrapper2726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_in_object_wrapper_internal2745 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000800L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_object_wrapper_internal2768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_message32780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_type_convertion2799 = new BitSet(new long[]{0x0080000000100000L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_type_convertion_internal_wrapper_in_type_convertion2801 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_type_convertion2803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_convertion_internal_wrapper2812 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_type_convertion_internal_in_type_convertion_internal_wrapper2815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_type_convertion_internal2833 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_type_internal_in_type_convertion_internal2836 = new BitSet(new long[]{0x0000000000000042L,0x0000000000004000L});
    public static final BitSet FOLLOW_generic_in_type_convertion_internal2838 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASTERISK_in_type_convertion_internal2841 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ID_in_method_name2852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_method_name2865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2899 = new BitSet(new long[]{0x0080000000010002L});
    public static final BitSet FOLLOW_method_call_message_wrapper_in_method_call_message_list2901 = new BitSet(new long[]{0x0080000000010002L});
    public static final BitSet FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_method_call_message_first2929 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_message_wrapper_in_method_call_message_first2932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_in_method_call_message_wrapper2942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_in_method_call_message2961 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_incomplete_prefix_in_method_call_message2965 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_message_wrapper_in_method_call_message2968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_message_in_message_wrapper2978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_message2996 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_message2999 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_expression_in_message3001 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expression3017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_in_expression3022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_in_full_expr_wrapper3033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr3050 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr3053 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr3055 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr23066 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr23069 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000400000000L,0x0000000000002120L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr23071 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_expr_assign_in_expr_assign_wrapper3082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_wrapper_in_expr_assign3101 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850C12L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_struct_init_in_expr_assign3104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_assign3108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_wrapper_in_expr_assign3112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer2_in_expr_assign3117 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_method_call_wrapper_in_expr_assign3119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_in_array_init_wrapper3131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array_init3150 = new BitSet(new long[]{0x0080000000000040L,0x20040008A0850C12L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init3153 = new BitSet(new long[]{0x0000000000020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array_init3156 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850C12L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init3158 = new BitSet(new long[]{0x0000000000020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array_init3164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_wrapper_in_classical_expr_wrp33176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_classical_expr_wrp33182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_in_classical_expr_wrp3195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_classical_expr3212 = new BitSet(new long[]{0x0000000000000002L,0x0000002552222188L});
    public static final BitSet FOLLOW_expr_question_wrapper_in_classical_expr3215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr3219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr2_in_classical_expr_wrp23231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_classical_expr23249 = new BitSet(new long[]{0x0000000000000002L,0x0000002452222188L});
    public static final BitSet FOLLOW_func_pointer1_in_classical_expr23253 = new BitSet(new long[]{0x0000000000000002L,0x0000002452222188L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr23256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_question_in_expr_question_wrapper3266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_QUESTION_in_expr_question3283 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question3285 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_expr_question3287 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question3289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_in_assign_wrapper3298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_in_simple_expr_wrapper3372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_or_in_simple_expr3390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_and_wrapper_in_expr_or_or3407 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_L_OR_OR_in_expr_or_or3410 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_or_or3412 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_expr_and_and_in_expr_and_and_wrapper3423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_wrapper_in_expr_and_and3440 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_L_AND_AND_in_expr_and_and3443 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_and_and3445 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_expr_or_in_expr_or_wrapper3456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_xor_wrapper_in_expr_or3474 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_L_OR_in_expr_or3477 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_or3479 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_expr_xor_in_expr_xor_wrapper3490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_wrapper_in_expr_xor3507 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_L_XOR_in_expr_xor3510 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_xor3512 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_expr_and_in_expr_and_wrapper3524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eq_wrapper_in_expr_and3542 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_L_AND_in_expr_and3545 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_and3547 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eq_in_expr_eq_wrapper3559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_cond_wrapper_in_expr_eq3577 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400200L});
    public static final BitSet FOLLOW_set_in_expr_eq3580 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_eq3588 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400200L});
    public static final BitSet FOLLOW_expr_cond_in_expr_cond_wrapper3599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mov_wrapper_in_expr_cond3616 = new BitSet(new long[]{0x0000000000000002L,0x000000000018C000L});
    public static final BitSet FOLLOW_set_in_expr_cond3619 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_cond3635 = new BitSet(new long[]{0x0000000000000002L,0x000000000018C000L});
    public static final BitSet FOLLOW_expr_mov_in_expr_mov_wrapper3646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_add_wrapper_in_expr_mov3664 = new BitSet(new long[]{0x0000000000000002L,0x0000000200001000L});
    public static final BitSet FOLLOW_set_in_expr_mov3667 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_mov3675 = new BitSet(new long[]{0x0000000000000002L,0x0000000200001000L});
    public static final BitSet FOLLOW_expr_add_in_expr_add_wrapper3687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mult_wrapper_in_expr_add3704 = new BitSet(new long[]{0x0000000000000002L,0x0000000020010000L});
    public static final BitSet FOLLOW_set_in_expr_add3707 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_add3715 = new BitSet(new long[]{0x0000000000000002L,0x0000000020010000L});
    public static final BitSet FOLLOW_expr_mult_in_expr_mult_wrapper3726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_unname_wrapper_in_expr_mult3743 = new BitSet(new long[]{0x0000000000000042L,0x0000000008000040L});
    public static final BitSet FOLLOW_set_in_expr_mult3746 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_expr_unname_wrapper_in_expr_mult3758 = new BitSet(new long[]{0x0000000000000042L,0x0000000008000040L});
    public static final BitSet FOLLOW_expr_unname_in_expr_unname_wrapper3770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_expr_unname3791 = new BitSet(new long[]{0x0080000000000000L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_type_convertion_in_expr_unname3793 = new BitSet(new long[]{0x0080000000000000L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_expr_addr_in_expr_unname3798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_AND_in_expr_addr3808 = new BitSet(new long[]{0x0080000000000000L,0x00040008A0850810L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_expr_sign_in_expr_addr3811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_wrapper_in_expr_sign3830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_in_expr_not_wrapper3840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_NOT_in_expr_not3859 = new BitSet(new long[]{0x0080000000000000L,0x0004000880040810L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_expr_not2_in_expr_not3862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_TILDA_in_expr_not23872 = new BitSet(new long[]{0x0080000000000000L,0x0004000080040810L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_expr_size_of_in_expr_not23875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_expr_size_of3885 = new BitSet(new long[]{0x0080000000000000L,0x0004000080040810L,0x248A040000007000L,0x00000000000021A0L});
    public static final BitSet FOLLOW_expr_xcrement_in_expr_size_of3888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped1_in_expr_xcrement3907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped2_in_object_wrapped13917 = new BitSet(new long[]{0x0000000000000002L,0x0000000080040000L});
    public static final BitSet FOLLOW_205_in_object_wrapped23938 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_object_name_in_object_wrapped23941 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L});
    public static final BitSet FOLLOW_generic_in_object_wrapped23943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapped23949 = new BitSet(new long[]{0x0000000001000002L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_object_wrapped23957 = new BitSet(new long[]{0x0080000000100040L,0x00040008A0850812L,0x248A040400007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_l_br_end_in_object_wrapped23959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_wrapper_in_object_wrapped23972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_started_in_object_wrapped23977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_internal_wrapper_in_l_br_end3986 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_l_br_end3988 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_l_br_end3990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_l_br_end4005 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_l_br_end4007 = new BitSet(new long[]{0x0000000001000002L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_id_part_end_in_l_br_end4009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_brackets_in_function_brackets_wrapper4023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_function_brackets4042 = new BitSet(new long[]{0x0080000000000040L,0x10040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets4045 = new BitSet(new long[]{0x0000000000020000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_function_brackets4048 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets4050 = new BitSet(new long[]{0x0000000000020000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_function_brackets4056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_in_index_wrapper4066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index4083 = new BitSet(new long[]{0x0080000000000040L,0x40040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_index_number_wrapper_in_index4085 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index4088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_number_wrapper4097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_struct_init4114 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_init4117 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_struct_init4120 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_struct_init4123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init4126 = new BitSet(new long[]{0x0080000001000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init4132 = new BitSet(new long[]{0x0000000000020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init4135 = new BitSet(new long[]{0x0080000001000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init4138 = new BitSet(new long[]{0x0000000000020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init4144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init24158 = new BitSet(new long[]{0x0080000001000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init24164 = new BitSet(new long[]{0x0000000000020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init24167 = new BitSet(new long[]{0x0080000001000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init24170 = new BitSet(new long[]{0x0000000000020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init24176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_var_in_struct_init_line4189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_expression_in_struct_init_line4194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_expression4207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_method4218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_struct_init_var4230 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_id_part_in_struct_init_var4232 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_EQ_in_struct_init_var4237 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850C12L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_in_q_brackets_in_struct_init_var4241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_struct_init_var4245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_wrapper_in_a_started4257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_wrapper_in_a_started4262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_wrapper_in_a_started4267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_typeof4277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_typeof4280 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_typeof4283 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_typeof4286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_in_a_selector_wrapper4297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_a_selector4314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_a_selector4316 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_selector4318 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_selector4320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_in_a_protocol_wrapper4330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_a_protocol4348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_a_protocol4350 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_protocol4352 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_protocol4354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_in_a_encode_wrapper4364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_a_encode4380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_a_encode4382 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_encode4384 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_encode4386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_value_in_a_selector_value_wrapper4397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sel_id_in_a_selector_value4416 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4420 = new BitSet(new long[]{0x0080000000000002L,0x0000000000000000L,0x2400000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_sel_id_in_a_selector_value4424 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4427 = new BitSet(new long[]{0x0080000000000002L,0x0000000000000000L,0x2400000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ID_in_sel_id4440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_sel_id4445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_const_expr_wrapper4457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_const_expr4476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_const_expr4480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL2_in_const_expr4484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_const_expr4488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_const_expr4492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_string_literal34502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_brackets4512 = new BitSet(new long[]{0x0080000000000040L,0x10040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_expression_in_method_brackets4516 = new BitSet(new long[]{0x0000000000020000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_brackets4520 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_brackets4523 = new BitSet(new long[]{0x0000000000020000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_brackets4529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14539 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000010L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer14545 = new BitSet(new long[]{0x0080000000000040L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14547 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14550 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer14553 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer14556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24569 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer24572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24574 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer24577 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer24583 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer_params4599 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4602 = new BitSet(new long[]{0x0000000000020040L,0x1000000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4605 = new BitSet(new long[]{0x0000000000020040L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_func_pointer_params4609 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4612 = new BitSet(new long[]{0x0000000000020040L,0x1000000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4615 = new BitSet(new long[]{0x0000000000020040L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer_params4620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_start4631 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_method_brackets_in_method_start4633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_in_q_brackets4644 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850C12L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_q_brackets_source_in_in_q_brackets4647 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_in_q_brackets4649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_source_in_q_brackets_source4661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_br_source_in_q_brackets_source4666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4679 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4686 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_q_source4702 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_source4706 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_expression_in_q_source4709 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_ID_in_simple_method_call4726 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_method_brackets_in_simple_method_call4728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index_brackets4744 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x248A040000007020L,0x00000000000021A0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_brackets4747 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index_brackets4749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper4763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_interface_declaration4781 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_interface_declaration4784 = new BitSet(new long[]{0x0080000008010000L,0x0000000020010410L,0x0001080400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_interface_category_in_interface_declaration4787 = new BitSet(new long[]{0x0080000008010000L,0x0000000020010400L,0x0001080400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_super_class_in_interface_declaration4791 = new BitSet(new long[]{0x0080000008000000L,0x0000000020010400L,0x0001080400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_annotated_block_in_interface_declaration4798 = new BitSet(new long[]{0x0080000008000000L,0x0000000020010400L,0x0001080400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_interface_methods_in_interface_declaration4802 = new BitSet(new long[]{0x0080000008000000L,0x0000000020010400L,0x0001080400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_interface_fields_in_interface_declaration4806 = new BitSet(new long[]{0x0080000008000000L,0x0000000020010400L,0x0001080400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_171_in_interface_declaration4815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_annotated_block4826 = new BitSet(new long[]{0x0080000000000000L,0x2000000000000000L,0x0004800400000000L,0x0000000000003000L});
    public static final BitSet FOLLOW_annotated_block_internal_in_annotated_block4831 = new BitSet(new long[]{0x0080000000000000L,0x2000000000000000L,0x0004800400000000L,0x0000000000003000L});
    public static final BitSet FOLLOW_R_FBR_in_annotated_block4836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_annotation_in_annotated_block_internal4849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_public_block_internal_in_annotated_block_internal4856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_field_declaration_in_public_block_internal4891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_declaration_in_public_block_internal4896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_simple_field_declaration4908 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_simple_field_declaration4910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_field_declaration4913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_union_declaration4926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_L_FBR_in_union_declaration4929 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_simple_field_declaration_in_union_declaration4935 = new BitSet(new long[]{0x0080000000000000L,0x2000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_R_FBR_in_union_declaration4940 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_union_declaration4943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_union_declaration4946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_super_class4960 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_super_class4963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_interface_category4983 = new BitSet(new long[]{0x0080000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_ID_in_interface_category4986 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_interface_category4990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_field_wrapper_in_interface_fields5019 = new BitSet(new long[]{0x0080000000000002L,0x0000000000000000L,0x0001000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_interface_field_in_interface_field_wrapper5030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_prefix_in_interface_field5049 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_interface_field_declaration_in_interface_field5052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_interface_field_declaration5063 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_interface_field_declaration5065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_field_declaration5067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_property_prefix5078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_property_prefix5080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_property_in_property_prefix5082 = new BitSet(new long[]{0x0000000000020000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_property_prefix5085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_property_in_property_prefix5087 = new BitSet(new long[]{0x0000000000020000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_property_prefix5091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_declaration_in_interface_methods5124 = new BitSet(new long[]{0x0000000008000002L,0x0000000020010000L});
    public static final BitSet FOLLOW_interface_method_in_interface_methods5128 = new BitSet(new long[]{0x0000000008000002L,0x0000000020010000L});
    public static final BitSet FOLLOW_method_header_in_interface_method5142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_method_header5161 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_method_header5163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_header_body5173 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000010L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_method_type_in_method_header_body5176 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_method_header_body5180 = new BitSet(new long[]{0x0080000000030002L,0x0000000000000010L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_method_params_in_method_header_body5183 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_va_args_wrapper_in_method_header_body5186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_va_args_in_va_args_wrapper5196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_va_args5213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_168_in_va_args5216 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_va_args5219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_type_in_method_header_body25230 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_method_header_body25232 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body25235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body35245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper5254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_type_internal_in_method_type5285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type_internal5303 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400010000L,0x0000000000002000L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_type_internal5305 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_type_internal_in_method_type_internal5308 = new BitSet(new long[]{0x0000000000000040L,0x1000000000004000L});
    public static final BitSet FOLLOW_generic_in_method_type_internal5310 = new BitSet(new long[]{0x0000000000000040L,0x1000000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type_internal5313 = new BitSet(new long[]{0x0000000000000040L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type_internal5316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type_internal5322 = new BitSet(new long[]{0x0080000000100040L,0x1000000000004800L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_type_internal5324 = new BitSet(new long[]{0x0080000000000040L,0x1000000000004800L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_known_types_in_method_type_internal5327 = new BitSet(new long[]{0x0080000000000040L,0x1000000000004800L});
    public static final BitSet FOLLOW_ID_in_method_type_internal5330 = new BitSet(new long[]{0x0080000000000040L,0x1000000000004800L});
    public static final BitSet FOLLOW_L_KBR_in_method_type_internal5334 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_method_type_internal5336 = new BitSet(new long[]{0x0000000000000040L,0x1000000000004800L});
    public static final BitSet FOLLOW_generic_in_method_type_internal5340 = new BitSet(new long[]{0x0000000000000040L,0x1000000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type_internal5343 = new BitSet(new long[]{0x0000000000000040L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type_internal5346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal1_in_type_internal5387 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_L_KBR_in_type_internal5390 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_type_internal5393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_LESS_in_generic5432 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_generic_internal_wrapper_in_generic5434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_L_MORE_in_generic5436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generic_internal_in_generic_internal_wrapper5446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_generic_internal5464 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal5466 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_COMMA_in_generic_internal5470 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_generic_internal5473 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal5476 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_L_BR_in_method_params25488 = new BitSet(new long[]{0x0080000008100000L,0x1000000000000000L,0x0000000400010000L,0x0000000000002000L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25492 = new BitSet(new long[]{0x0000000000020000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_params25495 = new BitSet(new long[]{0x0080000008100000L,0x0000000000000000L,0x0000000400010000L,0x0000000000002000L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25497 = new BitSet(new long[]{0x0000000000020000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_params25503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param2_in_method_param_wrapper25514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_param25532 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000000L,0x0000000400010000L,0x0000000000002000L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_method_param25535 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400010000L,0x0000000000002000L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_param25538 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_205_in_method_param25541 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_field_type_in_method_param25544 = new BitSet(new long[]{0x0080000000000002L,0x0000000000000800L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_method_param25546 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_index_wrapper_in_method_param25549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_indexed5559 = new BitSet(new long[]{0x0000000000000000L,0x4004000000000000L});
    public static final BitSet FOLLOW_NUMBER_in_indexed5561 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_indexed5564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_wrapper_in_method_params5574 = new BitSet(new long[]{0x0080000000010002L,0x0000000000000010L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_method_param_in_method_param_wrapper5586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_in_method_param5606 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000010L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_COLON_in_method_param5611 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000010L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_method_type_in_method_param5614 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_method_param5617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5629 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_prefix5631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_incomplete_prefix5650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5693 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000400L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_struct_declaration5699 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_typedef_struct_body_in_typedef_struct_declaration5704 = new BitSet(new long[]{0x0080000000000000L,0x2000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_struct_declaration5708 = new BitSet(new long[]{0x0080000000000002L,0x0000000000000000L,0x2400000000000002L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5711 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_struct_declaration5714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_struct_field5757 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_struct_field5759 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_struct_field5763 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_struct_field5766 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_field5770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_enum_declaration5806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_typedef_declaration5826 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000400L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_typedef_declaration5828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_declaration5831 = new BitSet(new long[]{0x0080000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5834 = new BitSet(new long[]{0x0000000000020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_typedef_declaration5838 = new BitSet(new long[]{0x0080000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5841 = new BitSet(new long[]{0x0000000000020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_declaration5845 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000002L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_typedef_declaration5848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_declaration5851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_declaration_element5880 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_EQ_in_typedef_declaration_element5884 = new BitSet(new long[]{0x0080000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_set_in_typedef_declaration_element5887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_typedef_declaration_element5899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_EQ_in_typedef_declaration_element5901 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_NUMBER_in_typedef_declaration_element5903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper5917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_wrapper_in_field_declaration5934 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_field_type_in_field_declaration5937 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_field_declaration5939 = new BitSet(new long[]{0x0000000000000000L,0x0000002452222188L,0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration5941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_field_declaration_end5952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration_end5955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_in_type_start_wrapper5965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_start5982 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000400000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_field_type_in_type_start5985 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x2400000000000000L,0x0000000000000120L});
    public static final BitSet FOLLOW_name_in_type_start5987 = new BitSet(new long[]{0x0000000000000000L,0x0000002452222998L,0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_type_start5990 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_type_start5992 = new BitSet(new long[]{0x0000000000000000L,0x0000002452222198L,0x0000000000000002L});
    public static final BitSet FOLLOW_type_end_in_type_start5996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration4_in_type_end6004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration4_in_type_end6017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_field_declaration46039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration46042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_declaration46055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_wrapper_in_method_declaration46060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_in_field_modifier_wrapper6072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_field_modifier6090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_internal_in_field_type6102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_field_type_internal6121 = new BitSet(new long[]{0x0000000000000042L,0x0000000000004000L});
    public static final BitSet FOLLOW_generic_in_field_type_internal6123 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASTERISK_in_field_type_internal6126 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_name_internal_in_name6139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name_internal6160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_name_internal6167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_name_internal6174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string_value6185 = new BitSet(new long[]{0x0000000000000002L});

}