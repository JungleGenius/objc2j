// $ANTLR 3.4 Objcm.g 2012-10-03 20:40:46

package ru.andremoniy.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcmParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ASSIGN", "ASTERISK", "BLOCK", "BREAK", "BREAK_WORD", "BR_STMT", "CASE_BODY", "CASE_EXPR", "CASE_STMT", "CATEGORY", "CLASSICAL_EXPR", "CLASSICAL_EXPR_2", "COLON", "COMMA", "CONST_PREFIX", "DEFAULT_BODY", "DEFAULT_STMT", "DIGIT", "DOT", "ENCODE", "ENUM", "ENUM_PREFIX", "ESC", "EXPR", "EXPR_ADD", "EXPR_AND", "EXPR_AND_AND", "EXPR_ASSIGN", "EXPR_COND", "EXPR_EQ", "EXPR_FULL", "EXPR_MOV", "EXPR_MULT", "EXPR_NOT", "EXPR_OR", "EXPR_OR_OR", "EXPR_QUESTION", "EXPR_TYPE", "EXPR_XOR", "EXTERN", "FIELD", "FIELD_ACCESS", "FIELD_TYPE_STARTED", "FOR_IN_STMT", "FUNCTION", "GENERIC", "ID", "IF_BLOCK", "IF_EXPR", "IF_STMT", "IMPLEMENTATION", "INCOMPLETE_PREFIX", "INTERFACE", "LETTER", "L_AND", "L_AND_AND", "L_AND_EQ", "L_BR", "L_DIV", "L_DIV_EQ", "L_EQ", "L_EQ_EQ", "L_FBR", "L_KBR", "L_LEFT", "L_LEFT_EQ", "L_LESS", "L_LESS_EQ", "L_MINUS", "L_MINUS_EQ", "L_MINUS_MINUS", "L_MORE", "L_MORE_EQ", "L_MULT_EQ", "L_NEQ", "L_NOT", "L_OR", "L_OR_EQ", "L_OR_OR", "L_PERC", "L_PERC_EQ", "L_PLUS", "L_PLUS_EQ", "L_PLUS_PLUS", "L_QUESTION", "L_RIGHT", "L_RIGHT_EQ", "L_TILDA", "L_XOR", "L_XOR_EQ", "MESSAGE", "METHOD", "METHOD_CALL", "METHOD_MSG", "METHOD_NAME", "MODIFIER", "MSG_LIST", "MULTI_COMMENT", "M_IMPORT", "M_TYPE_START", "NAME", "NOT", "NUMBER", "OBJECT", "OP", "OPER", "OPERATOR", "PARAM", "PREFIX", "PREPROCESSOR_DECLARATION", "PROTOCOL", "RETURN_STMT", "R_BR", "R_FBR", "R_KBR", "SELECTOR", "SELECTOR_VALUE", "SEMICOLON", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_OP", "SIZEOF", "STATIC", "STATIC_METHOD", "STATIC_PREFIX", "STATIC_START", "STATIC_TYPE", "STRING_LITERAL", "STRING_LITERAL2", "STRING_LITERAL3", "STRUCT_FIELD", "STRUCT_PREFIX", "SUPER_CLASS", "SWITCH", "SWITCH_BODY", "SWITCH_EXPRESSION", "THROW_EXCEPTION", "THROW_STMT", "TYPE", "TYPEDEF", "TYPEDEF_ELEMENT", "TYPEDEF_STRUCT", "TYPE_CONVERTION", "VALUE", "VARIABLE_INIT", "VA_ARGS", "VOID", "WHILE_EXPR", "WHILE_STMT", "WS", "'\"C\"'", "'->'", "'...'", "'@catch'", "'@encode'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@private'", "'@protocol'", "'@public'", "'@selector'", "'@synthesize'", "'@throw'", "'@try'", "'Nil'", "'__attribute__'", "'__typeof__'", "'case'", "'constructor'", "'default'", "'do'", "'else'", "'extern'", "'for'", "'if'", "'in'", "'inline'", "'nil'", "'return'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'while'"
    };

    public static final int EOF=-1;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int ASSIGN=4;
    public static final int ASTERISK=5;
    public static final int BLOCK=6;
    public static final int BREAK=7;
    public static final int BREAK_WORD=8;
    public static final int BR_STMT=9;
    public static final int CASE_BODY=10;
    public static final int CASE_EXPR=11;
    public static final int CASE_STMT=12;
    public static final int CATEGORY=13;
    public static final int CLASSICAL_EXPR=14;
    public static final int CLASSICAL_EXPR_2=15;
    public static final int COLON=16;
    public static final int COMMA=17;
    public static final int CONST_PREFIX=18;
    public static final int DEFAULT_BODY=19;
    public static final int DEFAULT_STMT=20;
    public static final int DIGIT=21;
    public static final int DOT=22;
    public static final int ENCODE=23;
    public static final int ENUM=24;
    public static final int ENUM_PREFIX=25;
    public static final int ESC=26;
    public static final int EXPR=27;
    public static final int EXPR_ADD=28;
    public static final int EXPR_AND=29;
    public static final int EXPR_AND_AND=30;
    public static final int EXPR_ASSIGN=31;
    public static final int EXPR_COND=32;
    public static final int EXPR_EQ=33;
    public static final int EXPR_FULL=34;
    public static final int EXPR_MOV=35;
    public static final int EXPR_MULT=36;
    public static final int EXPR_NOT=37;
    public static final int EXPR_OR=38;
    public static final int EXPR_OR_OR=39;
    public static final int EXPR_QUESTION=40;
    public static final int EXPR_TYPE=41;
    public static final int EXPR_XOR=42;
    public static final int EXTERN=43;
    public static final int FIELD=44;
    public static final int FIELD_ACCESS=45;
    public static final int FIELD_TYPE_STARTED=46;
    public static final int FOR_IN_STMT=47;
    public static final int FUNCTION=48;
    public static final int GENERIC=49;
    public static final int ID=50;
    public static final int IF_BLOCK=51;
    public static final int IF_EXPR=52;
    public static final int IF_STMT=53;
    public static final int IMPLEMENTATION=54;
    public static final int INCOMPLETE_PREFIX=55;
    public static final int INTERFACE=56;
    public static final int LETTER=57;
    public static final int L_AND=58;
    public static final int L_AND_AND=59;
    public static final int L_AND_EQ=60;
    public static final int L_BR=61;
    public static final int L_DIV=62;
    public static final int L_DIV_EQ=63;
    public static final int L_EQ=64;
    public static final int L_EQ_EQ=65;
    public static final int L_FBR=66;
    public static final int L_KBR=67;
    public static final int L_LEFT=68;
    public static final int L_LEFT_EQ=69;
    public static final int L_LESS=70;
    public static final int L_LESS_EQ=71;
    public static final int L_MINUS=72;
    public static final int L_MINUS_EQ=73;
    public static final int L_MINUS_MINUS=74;
    public static final int L_MORE=75;
    public static final int L_MORE_EQ=76;
    public static final int L_MULT_EQ=77;
    public static final int L_NEQ=78;
    public static final int L_NOT=79;
    public static final int L_OR=80;
    public static final int L_OR_EQ=81;
    public static final int L_OR_OR=82;
    public static final int L_PERC=83;
    public static final int L_PERC_EQ=84;
    public static final int L_PLUS=85;
    public static final int L_PLUS_EQ=86;
    public static final int L_PLUS_PLUS=87;
    public static final int L_QUESTION=88;
    public static final int L_RIGHT=89;
    public static final int L_RIGHT_EQ=90;
    public static final int L_TILDA=91;
    public static final int L_XOR=92;
    public static final int L_XOR_EQ=93;
    public static final int MESSAGE=94;
    public static final int METHOD=95;
    public static final int METHOD_CALL=96;
    public static final int METHOD_MSG=97;
    public static final int METHOD_NAME=98;
    public static final int MODIFIER=99;
    public static final int MSG_LIST=100;
    public static final int MULTI_COMMENT=101;
    public static final int M_IMPORT=102;
    public static final int M_TYPE_START=103;
    public static final int NAME=104;
    public static final int NOT=105;
    public static final int NUMBER=106;
    public static final int OBJECT=107;
    public static final int OP=108;
    public static final int OPER=109;
    public static final int OPERATOR=110;
    public static final int PARAM=111;
    public static final int PREFIX=112;
    public static final int PREPROCESSOR_DECLARATION=113;
    public static final int PROTOCOL=114;
    public static final int RETURN_STMT=115;
    public static final int R_BR=116;
    public static final int R_FBR=117;
    public static final int R_KBR=118;
    public static final int SELECTOR=119;
    public static final int SELECTOR_VALUE=120;
    public static final int SEMICOLON=121;
    public static final int SIMPLE_EXPR=122;
    public static final int SINGLE_COMMENT=123;
    public static final int SINGLE_OP=124;
    public static final int SIZEOF=125;
    public static final int STATIC=126;
    public static final int STATIC_METHOD=127;
    public static final int STATIC_PREFIX=128;
    public static final int STATIC_START=129;
    public static final int STATIC_TYPE=130;
    public static final int STRING_LITERAL=131;
    public static final int STRING_LITERAL2=132;
    public static final int STRING_LITERAL3=133;
    public static final int STRUCT_FIELD=134;
    public static final int STRUCT_PREFIX=135;
    public static final int SUPER_CLASS=136;
    public static final int SWITCH=137;
    public static final int SWITCH_BODY=138;
    public static final int SWITCH_EXPRESSION=139;
    public static final int THROW_EXCEPTION=140;
    public static final int THROW_STMT=141;
    public static final int TYPE=142;
    public static final int TYPEDEF=143;
    public static final int TYPEDEF_ELEMENT=144;
    public static final int TYPEDEF_STRUCT=145;
    public static final int TYPE_CONVERTION=146;
    public static final int VALUE=147;
    public static final int VARIABLE_INIT=148;
    public static final int VA_ARGS=149;
    public static final int VOID=150;
    public static final int WHILE_EXPR=151;
    public static final int WHILE_STMT=152;
    public static final int WS=153;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcmParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcmParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcmParser.tokenNames; }
    public String getGrammarFileName() { return "Objcm.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // Objcm.g:108:1: code : ( code_internal )+ ;
    public final ObjcmParser.code_return code() throws RecognitionException {
        ObjcmParser.code_return retval = new ObjcmParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.code_internal_return code_internal1 =null;



        try {
            // Objcm.g:108:6: ( ( code_internal )+ )
            // Objcm.g:109:3: ( code_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:109:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CONST_PREFIX||LA1_0==ID||LA1_0==STATIC_PREFIX||LA1_0==STRUCT_PREFIX||LA1_0==VOID||(LA1_0 >= 161 && LA1_0 <= 162)||LA1_0==178) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // Objcm.g:109:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code403);
            	    code_internal1=code_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // Objcm.g:113:1: code_internal : ( operator_wrapper | implementation_wrapper );
    public final ObjcmParser.code_internal_return code_internal() throws RecognitionException {
        ObjcmParser.code_internal_return retval = new ObjcmParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_wrapper_return operator_wrapper2 =null;

        ObjcmParser.implementation_wrapper_return implementation_wrapper3 =null;



        try {
            // Objcm.g:114:2: ( operator_wrapper | implementation_wrapper )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==CONST_PREFIX||LA2_0==ID||LA2_0==STATIC_PREFIX||LA2_0==STRUCT_PREFIX||LA2_0==VOID||LA2_0==162||LA2_0==178) ) {
                alt2=1;
            }
            else if ( (LA2_0==161) ) {
                alt2=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }
            switch (alt2) {
                case 1 :
                    // Objcm.g:114:4: operator_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_operator_wrapper_in_code_internal417);
                    operator_wrapper2=operator_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, operator_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:115:5: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal423);
                    implementation_wrapper3=implementation_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_wrapper3.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class operator_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator_wrapper"
    // Objcm.g:118:1: operator_wrapper : operator -> ^( OPERATOR operator ) ;
    public final ObjcmParser.operator_wrapper_return operator_wrapper() throws RecognitionException {
        ObjcmParser.operator_wrapper_return retval = new ObjcmParser.operator_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_return operator4 =null;


        RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
        try {
            // Objcm.g:119:2: ( operator -> ^( OPERATOR operator ) )
            // Objcm.g:119:4: operator
            {
            pushFollow(FOLLOW_operator_in_operator_wrapper434);
            operator4=operator();

            state._fsp--;

            stream_operator.add(operator4.getTree());

            // AST REWRITE
            // elements: operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 119:13: -> ^( OPERATOR operator )
            {
                // Objcm.g:119:16: ^( OPERATOR operator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OPERATOR, "OPERATOR")
                , root_1);

                adaptor.addChild(root_1, stream_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_wrapper"


    public static class operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator"
    // Objcm.g:121:1: operator : ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration );
    public final ObjcmParser.operator_return operator() throws RecognitionException {
        ObjcmParser.operator_return retval = new ObjcmParser.operator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_wrapper_return extern_wrapper5 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper6 =null;

        ObjcmParser.type_start_wrapper_return type_start_wrapper7 =null;

        ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper8 =null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration9 =null;



        try {
            // Objcm.g:122:2: ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration )
            int alt3=5;
            switch ( input.LA(1) ) {
            case 178:
                {
                alt3=1;
                }
                break;
            case STATIC_PREFIX:
                {
                alt3=2;
                }
                break;
            case CONST_PREFIX:
            case ID:
            case VOID:
                {
                alt3=3;
                }
                break;
            case 162:
                {
                alt3=4;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt3=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }

            switch (alt3) {
                case 1 :
                    // Objcm.g:122:4: extern_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_wrapper_in_operator452);
                    extern_wrapper5=extern_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, extern_wrapper5.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:123:4: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_operator458);
                    static_section_wrapper6=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper6.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:124:4: type_start_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_start_wrapper_in_operator463);
                    type_start_wrapper7=type_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, type_start_wrapper7.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:125:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_operator470);
                    interface_declaration_wrapper8=interface_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_declaration_wrapper8.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:126:4: typedef_struct_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_in_operator476);
                    typedef_struct_declaration9=typedef_struct_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration9.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // Objcm.g:133:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcmParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcmParser.extern_wrapper_return retval = new ObjcmParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_return extern10 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // Objcm.g:134:3: ( extern -> ^( EXTERN ) )
            // Objcm.g:134:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper495);
            extern10=extern();

            state._fsp--;

            stream_extern.add(extern10.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 134:12: -> ^( EXTERN )
            {
                // Objcm.g:134:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // Objcm.g:137:2: extern : 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR ;
    public final ObjcmParser.extern_return extern() throws RecognitionException {
        ObjcmParser.extern_return retval = new ObjcmParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal11=null;
        Token string_literal12=null;
        Token L_FBR13=null;
        Token set14=null;
        Token R_FBR15=null;

        Object string_literal11_tree=null;
        Object string_literal12_tree=null;
        Object L_FBR13_tree=null;
        Object set14_tree=null;
        Object R_FBR15_tree=null;

        try {
            // Objcm.g:137:9: ( 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR )
            // Objcm.g:137:11: 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR
            {
            root_0 = (Object)adaptor.nil();


            string_literal11=(Token)match(input,178,FOLLOW_178_in_extern514); 
            string_literal11_tree = 
            (Object)adaptor.create(string_literal11)
            ;
            adaptor.addChild(root_0, string_literal11_tree);


            string_literal12=(Token)match(input,154,FOLLOW_154_in_extern517); 
            string_literal12_tree = 
            (Object)adaptor.create(string_literal12)
            ;
            adaptor.addChild(root_0, string_literal12_tree);


            L_FBR13=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_extern520); 
            L_FBR13_tree = 
            (Object)adaptor.create(L_FBR13)
            ;
            adaptor.addChild(root_0, L_FBR13_tree);


            set14=(Token)input.LT(1);

            if ( (input.LA(1) >= ASSIGN && input.LA(1) <= R_BR)||(input.LA(1) >= R_KBR && input.LA(1) <= 189) ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set14)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            R_FBR15=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_extern527); 
            R_FBR15_tree = 
            (Object)adaptor.create(R_FBR15)
            ;
            adaptor.addChild(root_0, R_FBR15_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // Objcm.g:139:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcmParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcmParser.implementation_wrapper_return retval = new ObjcmParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_return implementation16 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // Objcm.g:140:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // Objcm.g:140:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper539);
            implementation16=implementation();

            state._fsp--;

            stream_implementation.add(implementation16.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 140:20: -> ^( IMPLEMENTATION implementation )
            {
                // Objcm.g:140:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // Objcm.g:142:1: implementation : '@implementation' name ( category )? ( super_class )? ( implementation_body )+ '@end' ( SEMICOLON )? ;
    public final ObjcmParser.implementation_return implementation() throws RecognitionException {
        ObjcmParser.implementation_return retval = new ObjcmParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal17=null;
        Token string_literal22=null;
        Token SEMICOLON23=null;
        ObjcmParser.name_return name18 =null;

        ObjcmParser.category_return category19 =null;

        ObjcmParser.super_class_return super_class20 =null;

        ObjcmParser.implementation_body_return implementation_body21 =null;


        Object string_literal17_tree=null;
        Object string_literal22_tree=null;
        Object SEMICOLON23_tree=null;

        try {
            // Objcm.g:143:2: ( '@implementation' name ( category )? ( super_class )? ( implementation_body )+ '@end' ( SEMICOLON )? )
            // Objcm.g:143:4: '@implementation' name ( category )? ( super_class )? ( implementation_body )+ '@end' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal17=(Token)match(input,161,FOLLOW_161_in_implementation558); 
            string_literal17_tree = 
            (Object)adaptor.create(string_literal17)
            ;
            adaptor.addChild(root_0, string_literal17_tree);


            pushFollow(FOLLOW_name_in_implementation561);
            name18=name();

            state._fsp--;

            adaptor.addChild(root_0, name18.getTree());

            // Objcm.g:143:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==L_BR) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // Objcm.g:143:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation564);
                    category19=category();

                    state._fsp--;

                    adaptor.addChild(root_0, category19.getTree());

                    }
                    break;

            }


            // Objcm.g:143:39: ( super_class )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==COLON) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // Objcm.g:143:39: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_implementation567);
                    super_class20=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class20.getTree());

                    }
                    break;

            }


            // Objcm.g:144:3: ( implementation_body )+
            int cnt6=0;
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==ID||LA6_0==L_MINUS||LA6_0==L_PLUS||LA6_0==STATIC_PREFIX||LA6_0==STRUCT_PREFIX||LA6_0==VOID||LA6_0==167||LA6_0==178||LA6_0==186) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // Objcm.g:144:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation572);
            	    implementation_body21=implementation_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, implementation_body21.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt6 >= 1 ) break loop6;
                        EarlyExitException eee =
                            new EarlyExitException(6, input);
                        throw eee;
                }
                cnt6++;
            } while (true);


            string_literal22=(Token)match(input,159,FOLLOW_159_in_implementation577); 
            string_literal22_tree = 
            (Object)adaptor.create(string_literal22)
            ;
            adaptor.addChild(root_0, string_literal22_tree);


            // Objcm.g:145:11: ( SEMICOLON )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==SEMICOLON) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // Objcm.g:145:11: SEMICOLON
                    {
                    SEMICOLON23=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation580); 
                    SEMICOLON23_tree = 
                    (Object)adaptor.create(SEMICOLON23)
                    ;
                    adaptor.addChild(root_0, SEMICOLON23_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // Objcm.g:148:1: category : L_BR name R_BR -> ^( CATEGORY name ) ;
    public final ObjcmParser.category_return category() throws RecognitionException {
        ObjcmParser.category_return retval = new ObjcmParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR24=null;
        Token R_BR26=null;
        ObjcmParser.name_return name25 =null;


        Object L_BR24_tree=null;
        Object R_BR26_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // Objcm.g:148:9: ( L_BR name R_BR -> ^( CATEGORY name ) )
            // Objcm.g:148:11: L_BR name R_BR
            {
            L_BR24=(Token)match(input,L_BR,FOLLOW_L_BR_in_category592);  
            stream_L_BR.add(L_BR24);


            pushFollow(FOLLOW_name_in_category595);
            name25=name();

            state._fsp--;

            stream_name.add(name25.getTree());

            R_BR26=(Token)match(input,R_BR,FOLLOW_R_BR_in_category598);  
            stream_R_BR.add(R_BR26);


            // AST REWRITE
            // elements: name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 148:28: -> ^( CATEGORY name )
            {
                // Objcm.g:148:31: ^( CATEGORY name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // Objcm.g:150:1: implementation_body : ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper );
    public final ObjcmParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcmParser.implementation_body_return retval = new ObjcmParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.directives_return directives27 =null;

        ObjcmParser.typedef_return typedef28 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper29 =null;

        ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper30 =null;

        ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper31 =null;

        ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper32 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper33 =null;



        try {
            // Objcm.g:151:2: ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper )
            int alt8=7;
            switch ( input.LA(1) ) {
            case 167:
                {
                alt8=1;
                }
                break;
            case 186:
                {
                alt8=2;
                }
                break;
            case STATIC_PREFIX:
                {
                alt8=3;
                }
                break;
            case L_MINUS:
            case L_PLUS:
                {
                alt8=4;
                }
                break;
            case ID:
            case VOID:
                {
                alt8=5;
                }
                break;
            case 178:
                {
                alt8=6;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt8=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }

            switch (alt8) {
                case 1 :
                    // Objcm.g:151:4: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body616);
                    directives27=directives();

                    state._fsp--;

                    adaptor.addChild(root_0, directives27.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:152:5: typedef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_in_implementation_body622);
                    typedef28=typedef();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef28.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:153:5: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_implementation_body628);
                    static_section_wrapper29=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper29.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:154:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body634);
                    implementation_method_wrapper30=implementation_method_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper30.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:156:4: field_type_started_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_type_started_wrapper_in_implementation_body640);
                    field_type_started_wrapper31=field_type_started_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_type_started_wrapper31.getTree());

                    }
                    break;
                case 6 :
                    // Objcm.g:157:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_implementation_body646);
                    field_declaration_wrapper32=field_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_wrapper32.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:158:4: typedef_struct_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body651);
                    typedef_struct_declaration_wrapper33=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // Objcm.g:161:1: directives : synthesize ;
    public final ObjcmParser.directives_return directives() throws RecognitionException {
        ObjcmParser.directives_return retval = new ObjcmParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.synthesize_return synthesize34 =null;



        try {
            // Objcm.g:162:2: ( synthesize )
            // Objcm.g:162:4: synthesize
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_synthesize_in_directives662);
            synthesize34=synthesize();

            state._fsp--;

            adaptor.addChild(root_0, synthesize34.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // Objcm.g:165:1: synthesize : '@synthesize' ID SEMICOLON ;
    public final ObjcmParser.synthesize_return synthesize() throws RecognitionException {
        ObjcmParser.synthesize_return retval = new ObjcmParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal35=null;
        Token ID36=null;
        Token SEMICOLON37=null;

        Object string_literal35_tree=null;
        Object ID36_tree=null;
        Object SEMICOLON37_tree=null;

        try {
            // Objcm.g:166:2: ( '@synthesize' ID SEMICOLON )
            // Objcm.g:166:4: '@synthesize' ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal35=(Token)match(input,167,FOLLOW_167_in_synthesize675); 
            string_literal35_tree = 
            (Object)adaptor.create(string_literal35)
            ;
            adaptor.addChild(root_0, string_literal35_tree);


            ID36=(Token)match(input,ID,FOLLOW_ID_in_synthesize678); 
            ID36_tree = 
            (Object)adaptor.create(ID36)
            ;
            adaptor.addChild(root_0, ID36_tree);


            SEMICOLON37=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synthesize681); 
            SEMICOLON37_tree = 
            (Object)adaptor.create(SEMICOLON37)
            ;
            adaptor.addChild(root_0, SEMICOLON37_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class typedef_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef"
    // Objcm.g:169:1: typedef : 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper ) ;
    public final ObjcmParser.typedef_return typedef() throws RecognitionException {
        ObjcmParser.typedef_return retval = new ObjcmParser.typedef_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal38=null;
        ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper39 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper40 =null;


        Object string_literal38_tree=null;

        try {
            // Objcm.g:169:9: ( 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper ) )
            // Objcm.g:169:11: 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            string_literal38=(Token)match(input,186,FOLLOW_186_in_typedef693); 
            string_literal38_tree = 
            (Object)adaptor.create(string_literal38)
            ;
            adaptor.addChild(root_0, string_literal38_tree);


            // Objcm.g:169:22: ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==ENUM_PREFIX) ) {
                alt9=1;
            }
            else if ( (LA9_0==STRUCT_PREFIX) ) {
                alt9=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // Objcm.g:169:23: typedef_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_typedef697);
                    typedef_declaration_wrapper39=typedef_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_declaration_wrapper39.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:169:53: typedef_struct_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_typedef701);
                    typedef_struct_declaration_wrapper40=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper40.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef"


    public static class static_section_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section_wrapper"
    // Objcm.g:172:1: static_section_wrapper : static_section -> ^( STATIC static_section ) ;
    public final ObjcmParser.static_section_wrapper_return static_section_wrapper() throws RecognitionException {
        ObjcmParser.static_section_wrapper_return retval = new ObjcmParser.static_section_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_section_return static_section41 =null;


        RewriteRuleSubtreeStream stream_static_section=new RewriteRuleSubtreeStream(adaptor,"rule static_section");
        try {
            // Objcm.g:173:2: ( static_section -> ^( STATIC static_section ) )
            // Objcm.g:173:4: static_section
            {
            pushFollow(FOLLOW_static_section_in_static_section_wrapper716);
            static_section41=static_section();

            state._fsp--;

            stream_static_section.add(static_section41.getTree());

            // AST REWRITE
            // elements: static_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 173:19: -> ^( STATIC static_section )
            {
                // Objcm.g:173:22: ^( STATIC static_section )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC, "STATIC")
                , root_1);

                adaptor.addChild(root_1, stream_static_section.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section_wrapper"


    public static class static_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section"
    // Objcm.g:175:1: static_section : STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 ;
    public final ObjcmParser.static_section_return static_section() throws RecognitionException {
        ObjcmParser.static_section_return retval = new ObjcmParser.static_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX42=null;
        Token CONST_PREFIX43=null;
        Token STRUCT_PREFIX44=null;
        Token ENUM_PREFIX45=null;
        ObjcmParser.static_section2_return static_section246 =null;


        Object STATIC_PREFIX42_tree=null;
        Object CONST_PREFIX43_tree=null;
        Object STRUCT_PREFIX44_tree=null;
        Object ENUM_PREFIX45_tree=null;

        try {
            // Objcm.g:176:2: ( STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 )
            // Objcm.g:176:4: STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX42=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_section736); 
            STATIC_PREFIX42_tree = 
            (Object)adaptor.create(STATIC_PREFIX42)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX42_tree);


            // Objcm.g:176:18: ( CONST_PREFIX )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==CONST_PREFIX) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // Objcm.g:176:18: CONST_PREFIX
                    {
                    CONST_PREFIX43=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_section738); 
                    CONST_PREFIX43_tree = 
                    (Object)adaptor.create(CONST_PREFIX43)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX43_tree);


                    }
                    break;

            }


            // Objcm.g:176:32: ( STRUCT_PREFIX )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==STRUCT_PREFIX) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // Objcm.g:176:32: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX44=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_static_section741); 
                    STRUCT_PREFIX44_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX44)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX44_tree);


                    }
                    break;

            }


            // Objcm.g:176:47: ( ENUM_PREFIX )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ENUM_PREFIX) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // Objcm.g:176:47: ENUM_PREFIX
                    {
                    ENUM_PREFIX45=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_static_section744); 
                    ENUM_PREFIX45_tree = 
                    (Object)adaptor.create(ENUM_PREFIX45)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX45_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_static_section2_in_static_section747);
            static_section246=static_section2();

            state._fsp--;

            adaptor.addChild(root_0, static_section246.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section"


    public static class static_section2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section2"
    // Objcm.g:178:1: static_section2 : ( inline_section | implementation_method_wrapper2 | static_section3 );
    public final ObjcmParser.static_section2_return static_section2() throws RecognitionException {
        ObjcmParser.static_section2_return retval = new ObjcmParser.static_section2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.inline_section_return inline_section47 =null;

        ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper248 =null;

        ObjcmParser.static_section3_return static_section349 =null;



        try {
            // Objcm.g:179:2: ( inline_section | implementation_method_wrapper2 | static_section3 )
            int alt13=3;
            switch ( input.LA(1) ) {
            case 182:
                {
                alt13=1;
                }
                break;
            case L_FBR:
            case SEMICOLON:
                {
                alt13=2;
                }
                break;
            case ID:
            case VOID:
                {
                alt13=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }

            switch (alt13) {
                case 1 :
                    // Objcm.g:179:4: inline_section
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_inline_section_in_static_section2756);
                    inline_section47=inline_section();

                    state._fsp--;

                    adaptor.addChild(root_0, inline_section47.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:180:5: implementation_method_wrapper2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper2_in_static_section2763);
                    implementation_method_wrapper248=implementation_method_wrapper2();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper248.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:181:5: static_section3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section3_in_static_section2770);
                    static_section349=static_section3();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section349.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section2"


    public static class inline_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_section"
    // Objcm.g:184:1: inline_section : 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) ;
    public final ObjcmParser.inline_section_return inline_section() throws RecognitionException {
        ObjcmParser.inline_section_return retval = new ObjcmParser.inline_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal50=null;
        Token SEMICOLON55=null;
        ObjcmParser.field_type_return field_type51 =null;

        ObjcmParser.name_return name52 =null;

        ObjcmParser.method_params2_return method_params253 =null;

        ObjcmParser.block_wrapper_return block_wrapper54 =null;


        Object string_literal50_tree=null;
        Object SEMICOLON55_tree=null;

        try {
            // Objcm.g:185:2: ( 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) )
            // Objcm.g:185:4: 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON )
            {
            root_0 = (Object)adaptor.nil();


            string_literal50=(Token)match(input,182,FOLLOW_182_in_inline_section782); 
            string_literal50_tree = 
            (Object)adaptor.create(string_literal50)
            ;
            adaptor.addChild(root_0, string_literal50_tree);


            pushFollow(FOLLOW_field_type_in_inline_section785);
            field_type51=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type51.getTree());

            pushFollow(FOLLOW_name_in_inline_section787);
            name52=name();

            state._fsp--;

            adaptor.addChild(root_0, name52.getTree());

            // Objcm.g:185:31: ( method_params2 )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==L_BR) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // Objcm.g:185:31: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_inline_section790);
                    method_params253=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params253.getTree());

                    }
                    break;

            }


            // Objcm.g:185:47: ( block_wrapper | SEMICOLON )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==L_FBR) ) {
                alt15=1;
            }
            else if ( (LA15_0==SEMICOLON) ) {
                alt15=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;

            }
            switch (alt15) {
                case 1 :
                    // Objcm.g:185:48: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_inline_section794);
                    block_wrapper54=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper54.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:185:64: SEMICOLON
                    {
                    SEMICOLON55=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inline_section798); 
                    SEMICOLON55_tree = 
                    (Object)adaptor.create(SEMICOLON55)
                    ;
                    adaptor.addChild(root_0, SEMICOLON55_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_section"


    public static class static_section3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section3"
    // Objcm.g:187:1: static_section3 : field_type name ( indexed )* static_end ;
    public final ObjcmParser.static_section3_return static_section3() throws RecognitionException {
        ObjcmParser.static_section3_return retval = new ObjcmParser.static_section3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type56 =null;

        ObjcmParser.name_return name57 =null;

        ObjcmParser.indexed_return indexed58 =null;

        ObjcmParser.static_end_return static_end59 =null;



        try {
            // Objcm.g:188:2: ( field_type name ( indexed )* static_end )
            // Objcm.g:188:4: field_type name ( indexed )* static_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_static_section3809);
            field_type56=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type56.getTree());

            pushFollow(FOLLOW_name_in_static_section3811);
            name57=name();

            state._fsp--;

            adaptor.addChild(root_0, name57.getTree());

            // Objcm.g:188:20: ( indexed )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==L_KBR) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // Objcm.g:188:20: indexed
            	    {
            	    pushFollow(FOLLOW_indexed_in_static_section3813);
            	    indexed58=indexed();

            	    state._fsp--;

            	    adaptor.addChild(root_0, indexed58.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            pushFollow(FOLLOW_static_end_in_static_section3817);
            static_end59=static_end();

            state._fsp--;

            adaptor.addChild(root_0, static_end59.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section3"


    public static class static_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_end"
    // Objcm.g:191:1: static_end : ( implementation_method_wrapper3 | field_end );
    public final ObjcmParser.static_end_return static_end() throws RecognitionException {
        ObjcmParser.static_end_return retval = new ObjcmParser.static_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper360 =null;

        ObjcmParser.field_end_return field_end61 =null;



        try {
            // Objcm.g:192:2: ( implementation_method_wrapper3 | field_end )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==L_BR) ) {
                alt17=1;
            }
            else if ( (LA17_0==L_EQ||LA17_0==SEMICOLON) ) {
                alt17=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // Objcm.g:192:4: implementation_method_wrapper3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper3_in_static_end829);
                    implementation_method_wrapper360=implementation_method_wrapper3();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper360.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:193:5: field_end
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_end_in_static_end835);
                    field_end61=field_end();

                    state._fsp--;

                    adaptor.addChild(root_0, field_end61.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_end"


    public static class field_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end"
    // Objcm.g:195:1: field_end : field_end_internal -> ^( FIELD field_end_internal ) ;
    public final ObjcmParser.field_end_return field_end() throws RecognitionException {
        ObjcmParser.field_end_return retval = new ObjcmParser.field_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_end_internal_return field_end_internal62 =null;


        RewriteRuleSubtreeStream stream_field_end_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_end_internal");
        try {
            // Objcm.g:196:2: ( field_end_internal -> ^( FIELD field_end_internal ) )
            // Objcm.g:196:4: field_end_internal
            {
            pushFollow(FOLLOW_field_end_internal_in_field_end846);
            field_end_internal62=field_end_internal();

            state._fsp--;

            stream_field_end_internal.add(field_end_internal62.getTree());

            // AST REWRITE
            // elements: field_end_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 196:23: -> ^( FIELD field_end_internal )
            {
                // Objcm.g:196:26: ^( FIELD field_end_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_end_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end"


    public static class field_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end_internal"
    // Objcm.g:198:1: field_end_internal : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_end_internal_return field_end_internal() throws RecognitionException {
        ObjcmParser.field_end_internal_return retval = new ObjcmParser.field_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON64=null;
        ObjcmParser.value_set_return value_set63 =null;


        Object SEMICOLON64_tree=null;

        try {
            // Objcm.g:199:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:199:4: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:199:4: ( value_set )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==L_EQ) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // Objcm.g:199:4: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_end_internal864);
                    value_set63=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set63.getTree());

                    }
                    break;

            }


            SEMICOLON64=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_end_internal867); 
            SEMICOLON64_tree = 
            (Object)adaptor.create(SEMICOLON64)
            ;
            adaptor.addChild(root_0, SEMICOLON64_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end_internal"


    public static class implementation_method_wrapper3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper3"
    // Objcm.g:201:1: implementation_method_wrapper3 : implementation_method3 -> ^( METHOD implementation_method3 ) ;
    public final ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper3() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper3_return retval = new ObjcmParser.implementation_method_wrapper3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method3_return implementation_method365 =null;


        RewriteRuleSubtreeStream stream_implementation_method3=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method3");
        try {
            // Objcm.g:202:2: ( implementation_method3 -> ^( METHOD implementation_method3 ) )
            // Objcm.g:202:4: implementation_method3
            {
            pushFollow(FOLLOW_implementation_method3_in_implementation_method_wrapper3879);
            implementation_method365=implementation_method3();

            state._fsp--;

            stream_implementation_method3.add(implementation_method365.getTree());

            // AST REWRITE
            // elements: implementation_method3
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 202:27: -> ^( METHOD implementation_method3 )
            {
                // Objcm.g:202:30: ^( METHOD implementation_method3 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method3.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper3"


    public static class implementation_method3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method3"
    // Objcm.g:204:1: implementation_method3 : method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? ;
    public final ObjcmParser.implementation_method3_return implementation_method3() throws RecognitionException {
        ObjcmParser.implementation_method3_return retval = new ObjcmParser.implementation_method3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON67=null;
        ObjcmParser.method_header_body3_return method_header_body366 =null;

        ObjcmParser.attribute_return attribute68 =null;

        ObjcmParser.block_wrapper_return block_wrapper69 =null;


        Object SEMICOLON67_tree=null;

        try {
            // Objcm.g:205:2: ( method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? )
            // Objcm.g:205:4: method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body3_in_implementation_method3897);
            method_header_body366=method_header_body3();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body366.getTree());

            // Objcm.g:205:25: ( SEMICOLON )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==SEMICOLON) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // Objcm.g:205:25: SEMICOLON
                    {
                    SEMICOLON67=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method3900); 
                    SEMICOLON67_tree = 
                    (Object)adaptor.create(SEMICOLON67)
                    ;
                    adaptor.addChild(root_0, SEMICOLON67_tree);


                    }
                    break;

            }


            // Objcm.g:206:3: ( attribute )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==171) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // Objcm.g:206:3: attribute
                    {
                    pushFollow(FOLLOW_attribute_in_implementation_method3905);
                    attribute68=attribute();

                    state._fsp--;

                    adaptor.addChild(root_0, attribute68.getTree());

                    }
                    break;

            }


            // Objcm.g:207:3: ( block_wrapper )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==L_FBR) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // Objcm.g:207:3: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_implementation_method3910);
                    block_wrapper69=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper69.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method3"


    public static class attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute"
    // Objcm.g:210:1: attribute : '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON ;
    public final ObjcmParser.attribute_return attribute() throws RecognitionException {
        ObjcmParser.attribute_return retval = new ObjcmParser.attribute_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal70=null;
        Token L_BR71=null;
        Token L_BR72=null;
        Token string_literal73=null;
        Token R_BR74=null;
        Token R_BR75=null;
        Token SEMICOLON76=null;

        Object string_literal70_tree=null;
        Object L_BR71_tree=null;
        Object L_BR72_tree=null;
        Object string_literal73_tree=null;
        Object R_BR74_tree=null;
        Object R_BR75_tree=null;
        Object SEMICOLON76_tree=null;

        try {
            // Objcm.g:211:2: ( '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON )
            // Objcm.g:211:4: '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal70=(Token)match(input,171,FOLLOW_171_in_attribute923); 
            string_literal70_tree = 
            (Object)adaptor.create(string_literal70)
            ;
            adaptor.addChild(root_0, string_literal70_tree);


            L_BR71=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute926); 
            L_BR71_tree = 
            (Object)adaptor.create(L_BR71)
            ;
            adaptor.addChild(root_0, L_BR71_tree);


            L_BR72=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute929); 
            L_BR72_tree = 
            (Object)adaptor.create(L_BR72)
            ;
            adaptor.addChild(root_0, L_BR72_tree);


            string_literal73=(Token)match(input,174,FOLLOW_174_in_attribute932); 
            string_literal73_tree = 
            (Object)adaptor.create(string_literal73)
            ;
            adaptor.addChild(root_0, string_literal73_tree);


            R_BR74=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute935); 
            R_BR74_tree = 
            (Object)adaptor.create(R_BR74)
            ;
            adaptor.addChild(root_0, R_BR74_tree);


            R_BR75=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute938); 
            R_BR75_tree = 
            (Object)adaptor.create(R_BR75)
            ;
            adaptor.addChild(root_0, R_BR75_tree);


            SEMICOLON76=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_attribute941); 
            SEMICOLON76_tree = 
            (Object)adaptor.create(SEMICOLON76)
            ;
            adaptor.addChild(root_0, SEMICOLON76_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute"


    public static class implementation_method2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method2"
    // Objcm.g:213:1: implementation_method2 : ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method2_return implementation_method2() throws RecognitionException {
        ObjcmParser.implementation_method2_return retval = new ObjcmParser.implementation_method2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON77=null;
        ObjcmParser.block_wrapper_return block_wrapper78 =null;


        Object SEMICOLON77_tree=null;

        try {
            // Objcm.g:214:2: ( ( SEMICOLON )? block_wrapper )
            // Objcm.g:214:5: ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:214:5: ( SEMICOLON )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==SEMICOLON) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // Objcm.g:214:5: SEMICOLON
                    {
                    SEMICOLON77=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method2953); 
                    SEMICOLON77_tree = 
                    (Object)adaptor.create(SEMICOLON77)
                    ;
                    adaptor.addChild(root_0, SEMICOLON77_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method2958);
            block_wrapper78=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper78.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method2"


    public static class field_type_started_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started_wrapper"
    // Objcm.g:218:1: field_type_started_wrapper : field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) ;
    public final ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper() throws RecognitionException {
        ObjcmParser.field_type_started_wrapper_return retval = new ObjcmParser.field_type_started_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_started_return field_type_started79 =null;


        RewriteRuleSubtreeStream stream_field_type_started=new RewriteRuleSubtreeStream(adaptor,"rule field_type_started");
        try {
            // Objcm.g:219:2: ( field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) )
            // Objcm.g:219:4: field_type_started
            {
            pushFollow(FOLLOW_field_type_started_in_field_type_started_wrapper970);
            field_type_started79=field_type_started();

            state._fsp--;

            stream_field_type_started.add(field_type_started79.getTree());

            // AST REWRITE
            // elements: field_type_started
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 219:23: -> ^( FIELD_TYPE_STARTED field_type_started )
            {
                // Objcm.g:219:26: ^( FIELD_TYPE_STARTED field_type_started )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_TYPE_STARTED, "FIELD_TYPE_STARTED")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_started.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started_wrapper"


    public static class field_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started"
    // Objcm.g:221:1: field_type_started : field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) ;
    public final ObjcmParser.field_type_started_return field_type_started() throws RecognitionException {
        ObjcmParser.field_type_started_return retval = new ObjcmParser.field_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type80 =null;

        ObjcmParser.name_return name81 =null;

        ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper82 =null;

        ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper83 =null;



        try {
            // Objcm.g:222:2: ( field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) )
            // Objcm.g:222:4: field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_field_type_started989);
            field_type80=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type80.getTree());

            pushFollow(FOLLOW_name_in_field_type_started991);
            name81=name();

            state._fsp--;

            adaptor.addChild(root_0, name81.getTree());

            // Objcm.g:222:20: ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==L_BR) ) {
                alt23=1;
            }
            else if ( (LA23_0==L_EQ||LA23_0==SEMICOLON) ) {
                alt23=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }
            switch (alt23) {
                case 1 :
                    // Objcm.g:222:21: classic_method_declaration_wrapper
                    {
                    pushFollow(FOLLOW_classic_method_declaration_wrapper_in_field_type_started994);
                    classic_method_declaration_wrapper82=classic_method_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, classic_method_declaration_wrapper82.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:222:58: field_declaration_end_wrapper
                    {
                    pushFollow(FOLLOW_field_declaration_end_wrapper_in_field_type_started998);
                    field_declaration_end_wrapper83=field_declaration_end_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_end_wrapper83.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started"


    public static class field_declaration_end_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end_wrapper"
    // Objcm.g:224:1: field_declaration_end_wrapper : field_declaration_end -> ^( FIELD field_declaration_end ) ;
    public final ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_end_wrapper_return retval = new ObjcmParser.field_declaration_end_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_end_return field_declaration_end84 =null;


        RewriteRuleSubtreeStream stream_field_declaration_end=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_end");
        try {
            // Objcm.g:225:2: ( field_declaration_end -> ^( FIELD field_declaration_end ) )
            // Objcm.g:225:4: field_declaration_end
            {
            pushFollow(FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1009);
            field_declaration_end84=field_declaration_end();

            state._fsp--;

            stream_field_declaration_end.add(field_declaration_end84.getTree());

            // AST REWRITE
            // elements: field_declaration_end
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 225:26: -> ^( FIELD field_declaration_end )
            {
                // Objcm.g:225:29: ^( FIELD field_declaration_end )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_end.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end_wrapper"


    public static class classic_method_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration_wrapper"
    // Objcm.g:227:1: classic_method_declaration_wrapper : classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) ;
    public final ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper() throws RecognitionException {
        ObjcmParser.classic_method_declaration_wrapper_return retval = new ObjcmParser.classic_method_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classic_method_declaration_return classic_method_declaration85 =null;


        RewriteRuleSubtreeStream stream_classic_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classic_method_declaration");
        try {
            // Objcm.g:228:2: ( classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) )
            // Objcm.g:228:4: classic_method_declaration
            {
            pushFollow(FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1027);
            classic_method_declaration85=classic_method_declaration();

            state._fsp--;

            stream_classic_method_declaration.add(classic_method_declaration85.getTree());

            // AST REWRITE
            // elements: classic_method_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 228:31: -> ^( STATIC_METHOD classic_method_declaration )
            {
                // Objcm.g:228:34: ^( STATIC_METHOD classic_method_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_classic_method_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration_wrapper"


    public static class classic_method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration"
    // Objcm.g:230:1: classic_method_declaration : method_params2 block_wrapper ;
    public final ObjcmParser.classic_method_declaration_return classic_method_declaration() throws RecognitionException {
        ObjcmParser.classic_method_declaration_return retval = new ObjcmParser.classic_method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params286 =null;

        ObjcmParser.block_wrapper_return block_wrapper87 =null;



        try {
            // Objcm.g:232:2: ( method_params2 block_wrapper )
            // Objcm.g:232:4: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_classic_method_declaration1047);
            method_params286=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params286.getTree());

            pushFollow(FOLLOW_block_wrapper_in_classic_method_declaration1052);
            block_wrapper87=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper87.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // Objcm.g:236:1: implementation_method_wrapper : implementation_method -> ^( METHOD implementation_method ) ;
    public final ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper_return retval = new ObjcmParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_return implementation_method88 =null;


        RewriteRuleSubtreeStream stream_implementation_method=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method");
        try {
            // Objcm.g:237:2: ( implementation_method -> ^( METHOD implementation_method ) )
            // Objcm.g:237:4: implementation_method
            {
            pushFollow(FOLLOW_implementation_method_in_implementation_method_wrapper1065);
            implementation_method88=implementation_method();

            state._fsp--;

            stream_implementation_method.add(implementation_method88.getTree());

            // AST REWRITE
            // elements: implementation_method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 237:26: -> ^( METHOD implementation_method )
            {
                // Objcm.g:237:29: ^( METHOD implementation_method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class implementation_method_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper2"
    // Objcm.g:239:1: implementation_method_wrapper2 : implementation_method2 -> ^( METHOD implementation_method2 ) ;
    public final ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper2() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper2_return retval = new ObjcmParser.implementation_method_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method2_return implementation_method289 =null;


        RewriteRuleSubtreeStream stream_implementation_method2=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method2");
        try {
            // Objcm.g:240:2: ( implementation_method2 -> ^( METHOD implementation_method2 ) )
            // Objcm.g:240:4: implementation_method2
            {
            pushFollow(FOLLOW_implementation_method2_in_implementation_method_wrapper21082);
            implementation_method289=implementation_method2();

            state._fsp--;

            stream_implementation_method2.add(implementation_method289.getTree());

            // AST REWRITE
            // elements: implementation_method2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 240:27: -> ^( METHOD implementation_method2 )
            {
                // Objcm.g:240:30: ^( METHOD implementation_method2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper2"


    public static class implementation_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method"
    // Objcm.g:242:1: implementation_method : method_header_body ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method_return implementation_method() throws RecognitionException {
        ObjcmParser.implementation_method_return retval = new ObjcmParser.implementation_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON91=null;
        ObjcmParser.method_header_body_return method_header_body90 =null;

        ObjcmParser.block_wrapper_return block_wrapper92 =null;


        Object SEMICOLON91_tree=null;

        try {
            // Objcm.g:243:2: ( method_header_body ( SEMICOLON )? block_wrapper )
            // Objcm.g:243:4: method_header_body ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_implementation_method1099);
            method_header_body90=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body90.getTree());

            // Objcm.g:243:23: ( SEMICOLON )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==SEMICOLON) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // Objcm.g:243:23: SEMICOLON
                    {
                    SEMICOLON91=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method1101); 
                    SEMICOLON91_tree = 
                    (Object)adaptor.create(SEMICOLON91)
                    ;
                    adaptor.addChild(root_0, SEMICOLON91_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method1106);
            block_wrapper92=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper92.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method"


    public static class block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_wrapper"
    // Objcm.g:247:1: block_wrapper : block -> ^( BLOCK block ) ;
    public final ObjcmParser.block_wrapper_return block_wrapper() throws RecognitionException {
        ObjcmParser.block_wrapper_return retval = new ObjcmParser.block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_return block93 =null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // Objcm.g:248:2: ( block -> ^( BLOCK block ) )
            // Objcm.g:248:4: block
            {
            pushFollow(FOLLOW_block_in_block_wrapper1119);
            block93=block();

            state._fsp--;

            stream_block.add(block93.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 248:10: -> ^( BLOCK block )
            {
                // Objcm.g:248:13: ^( BLOCK block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK, "BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_wrapper"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // Objcm.g:250:1: block : L_FBR ( block_internal_full | block )* R_FBR ;
    public final ObjcmParser.block_return block() throws RecognitionException {
        ObjcmParser.block_return retval = new ObjcmParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR94=null;
        Token R_FBR97=null;
        ObjcmParser.block_internal_full_return block_internal_full95 =null;

        ObjcmParser.block_return block96 =null;


        Object L_FBR94_tree=null;
        Object R_FBR97_tree=null;

        try {
            // Objcm.g:250:7: ( L_FBR ( block_internal_full | block )* R_FBR )
            // Objcm.g:251:3: L_FBR ( block_internal_full | block )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR94=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block1141); 
            L_FBR94_tree = 
            (Object)adaptor.create(L_FBR94)
            ;
            adaptor.addChild(root_0, L_FBR94_tree);


            // Objcm.g:252:4: ( block_internal_full | block )*
            loop25:
            do {
                int alt25=3;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==ASTERISK||LA25_0==BREAK_WORD||LA25_0==CONST_PREFIX||LA25_0==ENUM_PREFIX||LA25_0==ID||LA25_0==L_AND||LA25_0==L_BR||LA25_0==L_KBR||LA25_0==L_MINUS||LA25_0==L_MINUS_MINUS||LA25_0==L_NOT||LA25_0==L_PLUS||LA25_0==L_PLUS_PLUS||LA25_0==L_TILDA||LA25_0==NUMBER||LA25_0==SEMICOLON||(LA25_0 >= SINGLE_OP && LA25_0 <= SIZEOF)||LA25_0==STATIC_PREFIX||(LA25_0 >= STRING_LITERAL && LA25_0 <= STRING_LITERAL3)||LA25_0==STRUCT_PREFIX||LA25_0==VOID||LA25_0==158||LA25_0==164||LA25_0==166||(LA25_0 >= 168 && LA25_0 <= 170)||LA25_0==172||(LA25_0 >= 176 && LA25_0 <= 177)||(LA25_0 >= 179 && LA25_0 <= 181)||(LA25_0 >= 183 && LA25_0 <= 185)||(LA25_0 >= 188 && LA25_0 <= 189)) ) {
                    alt25=1;
                }
                else if ( (LA25_0==L_FBR) ) {
                    alt25=2;
                }


                switch (alt25) {
            	case 1 :
            	    // Objcm.g:252:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block1147);
            	    block_internal_full95=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full95.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:252:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block1151);
            	    block96=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block96.getTree());

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);


            R_FBR97=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block1159); 
            R_FBR97_tree = 
            (Object)adaptor.create(R_FBR97)
            ;
            adaptor.addChild(root_0, R_FBR97_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_case_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_case"
    // Objcm.g:256:1: block_case : L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR ;
    public final ObjcmParser.block_case_return block_case() throws RecognitionException {
        ObjcmParser.block_case_return retval = new ObjcmParser.block_case_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR98=null;
        Token R_FBR102=null;
        ObjcmParser.block_internal_full_return block_internal_full99 =null;

        ObjcmParser.block_return block100 =null;

        ObjcmParser.default_stmt_return default_stmt101 =null;


        Object L_FBR98_tree=null;
        Object R_FBR102_tree=null;

        try {
            // Objcm.g:257:2: ( L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR )
            // Objcm.g:258:3: L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR98=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block_case1174); 
            L_FBR98_tree = 
            (Object)adaptor.create(L_FBR98)
            ;
            adaptor.addChild(root_0, L_FBR98_tree);


            // Objcm.g:259:4: ( block_internal_full | block )*
            loop26:
            do {
                int alt26=3;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==ASTERISK||LA26_0==BREAK_WORD||LA26_0==CONST_PREFIX||LA26_0==ENUM_PREFIX||LA26_0==ID||LA26_0==L_AND||LA26_0==L_BR||LA26_0==L_KBR||LA26_0==L_MINUS||LA26_0==L_MINUS_MINUS||LA26_0==L_NOT||LA26_0==L_PLUS||LA26_0==L_PLUS_PLUS||LA26_0==L_TILDA||LA26_0==NUMBER||LA26_0==SEMICOLON||(LA26_0 >= SINGLE_OP && LA26_0 <= SIZEOF)||LA26_0==STATIC_PREFIX||(LA26_0 >= STRING_LITERAL && LA26_0 <= STRING_LITERAL3)||LA26_0==STRUCT_PREFIX||LA26_0==VOID||LA26_0==158||LA26_0==164||LA26_0==166||(LA26_0 >= 168 && LA26_0 <= 170)||LA26_0==172||(LA26_0 >= 176 && LA26_0 <= 177)||(LA26_0 >= 179 && LA26_0 <= 181)||(LA26_0 >= 183 && LA26_0 <= 185)||(LA26_0 >= 188 && LA26_0 <= 189)) ) {
                    alt26=1;
                }
                else if ( (LA26_0==L_FBR) ) {
                    alt26=2;
                }


                switch (alt26) {
            	case 1 :
            	    // Objcm.g:259:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block_case1180);
            	    block_internal_full99=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full99.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:259:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block_case1184);
            	    block100=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block100.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            // Objcm.g:260:4: ( default_stmt )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==175) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // Objcm.g:260:4: default_stmt
                    {
                    pushFollow(FOLLOW_default_stmt_in_block_case1193);
                    default_stmt101=default_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt101.getTree());

                    }
                    break;

            }


            R_FBR102=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block_case1198); 
            R_FBR102_tree = 
            (Object)adaptor.create(R_FBR102)
            ;
            adaptor.addChild(root_0, R_FBR102_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_case"


    public static class block_internal_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_full"
    // Objcm.g:264:1: block_internal_full : block_internal ;
    public final ObjcmParser.block_internal_full_return block_internal_full() throws RecognitionException {
        ObjcmParser.block_internal_full_return retval = new ObjcmParser.block_internal_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_return block_internal103 =null;



        try {
            // Objcm.g:265:2: ( block_internal )
            // Objcm.g:265:4: block_internal
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_internal_in_block_internal_full1210);
            block_internal103=block_internal();

            state._fsp--;

            adaptor.addChild(root_0, block_internal103.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_full"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // Objcm.g:268:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON );
    public final ObjcmParser.block_internal_return block_internal() throws RecognitionException {
        ObjcmParser.block_internal_return retval = new ObjcmParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON107=null;
        Token SEMICOLON110=null;
        Token SEMICOLON120=null;
        Token SEMICOLON122=null;
        Token SEMICOLON124=null;
        Token SEMICOLON126=null;
        Token SEMICOLON127=null;
        ObjcmParser.try_stmt_return try_stmt104 =null;

        ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper105 =null;

        ObjcmParser.static_start_wrapper_return static_start_wrapper106 =null;

        ObjcmParser.do_stmt_return do_stmt108 =null;

        ObjcmParser.const_expression_return const_expression109 =null;

        ObjcmParser.variable_init_wrapper_return variable_init_wrapper111 =null;

        ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper112 =null;

        ObjcmParser.else_stmt_return else_stmt113 =null;

        ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper114 =null;

        ObjcmParser.return_stmt_return return_stmt115 =null;

        ObjcmParser.for_stmt_return for_stmt116 =null;

        ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper117 =null;

        ObjcmParser.single_operators_return single_operators118 =null;

        ObjcmParser.struct_variable_return struct_variable119 =null;

        ObjcmParser.enum_variable_return enum_variable121 =null;

        ObjcmParser.typeof_started_return typeof_started123 =null;

        ObjcmParser.known_type_started_return known_type_started125 =null;


        Object SEMICOLON107_tree=null;
        Object SEMICOLON110_tree=null;
        Object SEMICOLON120_tree=null;
        Object SEMICOLON122_tree=null;
        Object SEMICOLON124_tree=null;
        Object SEMICOLON126_tree=null;
        Object SEMICOLON127_tree=null;

        try {
            // Objcm.g:269:2: ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON )
            int alt28=18;
            alt28 = dfa28.predict(input);
            switch (alt28) {
                case 1 :
                    // Objcm.g:269:4: try_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_in_block_internal1221);
                    try_stmt104=try_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, try_stmt104.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:270:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1226);
                    throw_stmt_wrapper105=throw_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, throw_stmt_wrapper105.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:271:4: static_start_wrapper SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_start_wrapper_in_block_internal1231);
                    static_start_wrapper106=static_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_start_wrapper106.getTree());

                    SEMICOLON107=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1233); 
                    SEMICOLON107_tree = 
                    (Object)adaptor.create(SEMICOLON107)
                    ;
                    adaptor.addChild(root_0, SEMICOLON107_tree);


                    }
                    break;
                case 4 :
                    // Objcm.g:272:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1238);
                    do_stmt108=do_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, do_stmt108.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:273:4: const_expression SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expression_in_block_internal1243);
                    const_expression109=const_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expression109.getTree());

                    SEMICOLON110=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1245); 
                    SEMICOLON110_tree = 
                    (Object)adaptor.create(SEMICOLON110)
                    ;
                    adaptor.addChild(root_0, SEMICOLON110_tree);


                    }
                    break;
                case 6 :
                    // Objcm.g:274:4: variable_init_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_init_wrapper_in_block_internal1250);
                    variable_init_wrapper111=variable_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, variable_init_wrapper111.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:275:4: if_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_wrapper_in_block_internal1255);
                    if_stmt_wrapper112=if_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, if_stmt_wrapper112.getTree());

                    }
                    break;
                case 8 :
                    // Objcm.g:276:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1260);
                    else_stmt113=else_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, else_stmt113.getTree());

                    }
                    break;
                case 9 :
                    // Objcm.g:277:4: switch_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_wrapper_in_block_internal1265);
                    switch_stmt_wrapper114=switch_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, switch_stmt_wrapper114.getTree());

                    }
                    break;
                case 10 :
                    // Objcm.g:278:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1270);
                    return_stmt115=return_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, return_stmt115.getTree());

                    }
                    break;
                case 11 :
                    // Objcm.g:279:4: for_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_in_block_internal1275);
                    for_stmt116=for_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt116.getTree());

                    }
                    break;
                case 12 :
                    // Objcm.g:280:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1280);
                    while_stmt_wrapper117=while_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, while_stmt_wrapper117.getTree());

                    }
                    break;
                case 13 :
                    // Objcm.g:281:4: single_operators
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_operators_in_block_internal1285);
                    single_operators118=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators118.getTree());

                    }
                    break;
                case 14 :
                    // Objcm.g:282:4: struct_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_variable_in_block_internal1290);
                    struct_variable119=struct_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_variable119.getTree());

                    SEMICOLON120=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1292); 
                    SEMICOLON120_tree = 
                    (Object)adaptor.create(SEMICOLON120)
                    ;
                    adaptor.addChild(root_0, SEMICOLON120_tree);


                    }
                    break;
                case 15 :
                    // Objcm.g:283:4: enum_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_enum_variable_in_block_internal1297);
                    enum_variable121=enum_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, enum_variable121.getTree());

                    SEMICOLON122=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1299); 
                    SEMICOLON122_tree = 
                    (Object)adaptor.create(SEMICOLON122)
                    ;
                    adaptor.addChild(root_0, SEMICOLON122_tree);


                    }
                    break;
                case 16 :
                    // Objcm.g:284:4: typeof_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typeof_started_in_block_internal1304);
                    typeof_started123=typeof_started();

                    state._fsp--;

                    adaptor.addChild(root_0, typeof_started123.getTree());

                    SEMICOLON124=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1306); 
                    SEMICOLON124_tree = 
                    (Object)adaptor.create(SEMICOLON124)
                    ;
                    adaptor.addChild(root_0, SEMICOLON124_tree);


                    }
                    break;
                case 17 :
                    // Objcm.g:285:4: known_type_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_known_type_started_in_block_internal1311);
                    known_type_started125=known_type_started();

                    state._fsp--;

                    adaptor.addChild(root_0, known_type_started125.getTree());

                    SEMICOLON126=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1313); 
                    SEMICOLON126_tree = 
                    (Object)adaptor.create(SEMICOLON126)
                    ;
                    adaptor.addChild(root_0, SEMICOLON126_tree);


                    }
                    break;
                case 18 :
                    // Objcm.g:286:4: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    SEMICOLON127=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1318); 
                    SEMICOLON127_tree = 
                    (Object)adaptor.create(SEMICOLON127)
                    ;
                    adaptor.addChild(root_0, SEMICOLON127_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class variable_init_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init_wrapper"
    // Objcm.g:289:1: variable_init_wrapper : variable_init -> ^( VARIABLE_INIT variable_init ) ;
    public final ObjcmParser.variable_init_wrapper_return variable_init_wrapper() throws RecognitionException {
        ObjcmParser.variable_init_wrapper_return retval = new ObjcmParser.variable_init_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.variable_init_return variable_init128 =null;


        RewriteRuleSubtreeStream stream_variable_init=new RewriteRuleSubtreeStream(adaptor,"rule variable_init");
        try {
            // Objcm.g:290:2: ( variable_init -> ^( VARIABLE_INIT variable_init ) )
            // Objcm.g:290:4: variable_init
            {
            pushFollow(FOLLOW_variable_init_in_variable_init_wrapper1330);
            variable_init128=variable_init();

            state._fsp--;

            stream_variable_init.add(variable_init128.getTree());

            // AST REWRITE
            // elements: variable_init
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 290:18: -> ^( VARIABLE_INIT variable_init )
            {
                // Objcm.g:290:21: ^( VARIABLE_INIT variable_init )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_INIT, "VARIABLE_INIT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_init.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init_wrapper"


    public static class variable_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init"
    // Objcm.g:292:1: variable_init : full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) ;
    public final ObjcmParser.variable_init_return variable_init() throws RecognitionException {
        ObjcmParser.variable_init_return retval = new ObjcmParser.variable_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON131=null;
        Token COLON132=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper129 =null;

        ObjcmParser.full_expr2_return full_expr2130 =null;


        Object SEMICOLON131_tree=null;
        Object COLON132_tree=null;

        try {
            // Objcm.g:293:2: ( full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) )
            // Objcm.g:293:4: full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_full_expr_wrapper_in_variable_init1348);
            full_expr_wrapper129=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper129.getTree());

            // Objcm.g:293:22: ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==ID||LA30_0==SEMICOLON||LA30_0==VOID||LA30_0==181) ) {
                alt30=1;
            }
            else if ( (LA30_0==COLON) ) {
                alt30=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;

            }
            switch (alt30) {
                case 1 :
                    // Objcm.g:293:23: ( ( full_expr2 )? SEMICOLON )
                    {
                    // Objcm.g:293:23: ( ( full_expr2 )? SEMICOLON )
                    // Objcm.g:293:24: ( full_expr2 )? SEMICOLON
                    {
                    // Objcm.g:293:24: ( full_expr2 )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==ID||LA29_0==VOID||LA29_0==181) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // Objcm.g:293:24: full_expr2
                            {
                            pushFollow(FOLLOW_full_expr2_in_variable_init1352);
                            full_expr2130=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2130.getTree());

                            }
                            break;

                    }


                    SEMICOLON131=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_variable_init1355); 
                    SEMICOLON131_tree = 
                    (Object)adaptor.create(SEMICOLON131)
                    ;
                    adaptor.addChild(root_0, SEMICOLON131_tree);


                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:293:49: COLON
                    {
                    COLON132=(Token)match(input,COLON,FOLLOW_COLON_in_variable_init1360); 
                    COLON132_tree = 
                    (Object)adaptor.create(COLON132)
                    ;
                    adaptor.addChild(root_0, COLON132_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init"


    public static class known_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_type_started"
    // Objcm.g:295:1: known_type_started : known_types ( ASTERISK )* full_expr2 ;
    public final ObjcmParser.known_type_started_return known_type_started() throws RecognitionException {
        ObjcmParser.known_type_started_return retval = new ObjcmParser.known_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK134=null;
        ObjcmParser.known_types_return known_types133 =null;

        ObjcmParser.full_expr2_return full_expr2135 =null;


        Object ASTERISK134_tree=null;

        try {
            // Objcm.g:296:2: ( known_types ( ASTERISK )* full_expr2 )
            // Objcm.g:296:4: known_types ( ASTERISK )* full_expr2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_known_types_in_known_type_started1372);
            known_types133=known_types();

            state._fsp--;

            adaptor.addChild(root_0, known_types133.getTree());

            // Objcm.g:296:16: ( ASTERISK )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==ASTERISK) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // Objcm.g:296:16: ASTERISK
            	    {
            	    ASTERISK134=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_known_type_started1374); 
            	    ASTERISK134_tree = 
            	    (Object)adaptor.create(ASTERISK134)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK134_tree);


            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            pushFollow(FOLLOW_full_expr2_in_known_type_started1377);
            full_expr2135=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2135.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_type_started"


    public static class typeof_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof_started"
    // Objcm.g:298:1: typeof_started : typeof full_expr_wrapper ;
    public final ObjcmParser.typeof_started_return typeof_started() throws RecognitionException {
        ObjcmParser.typeof_started_return retval = new ObjcmParser.typeof_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typeof_return typeof136 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper137 =null;



        try {
            // Objcm.g:299:2: ( typeof full_expr_wrapper )
            // Objcm.g:299:4: typeof full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typeof_in_typeof_started1389);
            typeof136=typeof();

            state._fsp--;

            adaptor.addChild(root_0, typeof136.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_typeof_started1391);
            full_expr_wrapper137=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper137.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof_started"


    public static class struct_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_variable"
    // Objcm.g:302:1: struct_variable : STRUCT_PREFIX full_expr_wrapper ;
    public final ObjcmParser.struct_variable_return struct_variable() throws RecognitionException {
        ObjcmParser.struct_variable_return retval = new ObjcmParser.struct_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX138=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper139 =null;


        Object STRUCT_PREFIX138_tree=null;

        try {
            // Objcm.g:303:2: ( STRUCT_PREFIX full_expr_wrapper )
            // Objcm.g:303:4: STRUCT_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX138=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_variable1404); 
            STRUCT_PREFIX138_tree = 
            (Object)adaptor.create(STRUCT_PREFIX138)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX138_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_struct_variable1406);
            full_expr_wrapper139=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper139.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_variable"


    public static class enum_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_variable"
    // Objcm.g:305:1: enum_variable : ENUM_PREFIX full_expr_wrapper ;
    public final ObjcmParser.enum_variable_return enum_variable() throws RecognitionException {
        ObjcmParser.enum_variable_return retval = new ObjcmParser.enum_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX140=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper141 =null;


        Object ENUM_PREFIX140_tree=null;

        try {
            // Objcm.g:306:2: ( ENUM_PREFIX full_expr_wrapper )
            // Objcm.g:306:4: ENUM_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX140=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_enum_variable1415); 
            ENUM_PREFIX140_tree = 
            (Object)adaptor.create(ENUM_PREFIX140)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX140_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_enum_variable1417);
            full_expr_wrapper141=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper141.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_variable"


    public static class const_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expression"
    // Objcm.g:308:1: const_expression : CONST_PREFIX full_expr_wrapper ;
    public final ObjcmParser.const_expression_return const_expression() throws RecognitionException {
        ObjcmParser.const_expression_return retval = new ObjcmParser.const_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX142=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper143 =null;


        Object CONST_PREFIX142_tree=null;

        try {
            // Objcm.g:309:2: ( CONST_PREFIX full_expr_wrapper )
            // Objcm.g:309:4: CONST_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            CONST_PREFIX142=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_const_expression1428); 
            CONST_PREFIX142_tree = 
            (Object)adaptor.create(CONST_PREFIX142)
            ;
            adaptor.addChild(root_0, CONST_PREFIX142_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_const_expression1430);
            full_expr_wrapper143=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper143.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expression"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // Objcm.g:311:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcmParser.throw_stmt_wrapper_return retval = new ObjcmParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.throw_stmt_return throw_stmt144 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // Objcm.g:312:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // Objcm.g:312:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper1439);
            throw_stmt144=throw_stmt();

            state._fsp--;

            stream_throw_stmt.add(throw_stmt144.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 312:15: -> ^( THROW_STMT throw_stmt )
            {
                // Objcm.g:312:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // Objcm.g:314:1: throw_stmt : '@throw' SEMICOLON ;
    public final ObjcmParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcmParser.throw_stmt_return retval = new ObjcmParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal145=null;
        Token SEMICOLON146=null;

        Object string_literal145_tree=null;
        Object SEMICOLON146_tree=null;

        try {
            // Objcm.g:315:2: ( '@throw' SEMICOLON )
            // Objcm.g:315:4: '@throw' SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal145=(Token)match(input,168,FOLLOW_168_in_throw_stmt1456); 
            string_literal145_tree = 
            (Object)adaptor.create(string_literal145)
            ;
            adaptor.addChild(root_0, string_literal145_tree);


            SEMICOLON146=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_throw_stmt1459); 
            SEMICOLON146_tree = 
            (Object)adaptor.create(SEMICOLON146)
            ;
            adaptor.addChild(root_0, SEMICOLON146_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class try_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt"
    // Objcm.g:318:1: try_stmt : '@try' block ( catch_stmt )* ( '@finally' block )? ;
    public final ObjcmParser.try_stmt_return try_stmt() throws RecognitionException {
        ObjcmParser.try_stmt_return retval = new ObjcmParser.try_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal147=null;
        Token string_literal150=null;
        ObjcmParser.block_return block148 =null;

        ObjcmParser.catch_stmt_return catch_stmt149 =null;

        ObjcmParser.block_return block151 =null;


        Object string_literal147_tree=null;
        Object string_literal150_tree=null;

        try {
            // Objcm.g:318:9: ( '@try' block ( catch_stmt )* ( '@finally' block )? )
            // Objcm.g:318:11: '@try' block ( catch_stmt )* ( '@finally' block )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal147=(Token)match(input,169,FOLLOW_169_in_try_stmt1470); 
            string_literal147_tree = 
            (Object)adaptor.create(string_literal147)
            ;
            adaptor.addChild(root_0, string_literal147_tree);


            pushFollow(FOLLOW_block_in_try_stmt1473);
            block148=block();

            state._fsp--;

            adaptor.addChild(root_0, block148.getTree());

            // Objcm.g:318:26: ( catch_stmt )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==157) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // Objcm.g:318:26: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt1476);
            	    catch_stmt149=catch_stmt();

            	    state._fsp--;

            	    adaptor.addChild(root_0, catch_stmt149.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            // Objcm.g:318:38: ( '@finally' block )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==160) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // Objcm.g:318:39: '@finally' block
                    {
                    string_literal150=(Token)match(input,160,FOLLOW_160_in_try_stmt1480); 
                    string_literal150_tree = 
                    (Object)adaptor.create(string_literal150)
                    ;
                    adaptor.addChild(root_0, string_literal150_tree);


                    pushFollow(FOLLOW_block_in_try_stmt1483);
                    block151=block();

                    state._fsp--;

                    adaptor.addChild(root_0, block151.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // Objcm.g:321:1: catch_stmt : '@catch' L_BR ID ( ASTERISK )* ID R_BR block ;
    public final ObjcmParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcmParser.catch_stmt_return retval = new ObjcmParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal152=null;
        Token L_BR153=null;
        Token ID154=null;
        Token ASTERISK155=null;
        Token ID156=null;
        Token R_BR157=null;
        ObjcmParser.block_return block158 =null;


        Object string_literal152_tree=null;
        Object L_BR153_tree=null;
        Object ID154_tree=null;
        Object ASTERISK155_tree=null;
        Object ID156_tree=null;
        Object R_BR157_tree=null;

        try {
            // Objcm.g:322:2: ( '@catch' L_BR ID ( ASTERISK )* ID R_BR block )
            // Objcm.g:322:4: '@catch' L_BR ID ( ASTERISK )* ID R_BR block
            {
            root_0 = (Object)adaptor.nil();


            string_literal152=(Token)match(input,157,FOLLOW_157_in_catch_stmt1497); 
            string_literal152_tree = 
            (Object)adaptor.create(string_literal152)
            ;
            adaptor.addChild(root_0, string_literal152_tree);


            L_BR153=(Token)match(input,L_BR,FOLLOW_L_BR_in_catch_stmt1500); 
            L_BR153_tree = 
            (Object)adaptor.create(L_BR153)
            ;
            adaptor.addChild(root_0, L_BR153_tree);


            ID154=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1503); 
            ID154_tree = 
            (Object)adaptor.create(ID154)
            ;
            adaptor.addChild(root_0, ID154_tree);


            // Objcm.g:322:24: ( ASTERISK )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==ASTERISK) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // Objcm.g:322:24: ASTERISK
            	    {
            	    ASTERISK155=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_catch_stmt1506); 
            	    ASTERISK155_tree = 
            	    (Object)adaptor.create(ASTERISK155)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK155_tree);


            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            ID156=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1509); 
            ID156_tree = 
            (Object)adaptor.create(ID156)
            ;
            adaptor.addChild(root_0, ID156_tree);


            R_BR157=(Token)match(input,R_BR,FOLLOW_R_BR_in_catch_stmt1512); 
            R_BR157_tree = 
            (Object)adaptor.create(R_BR157)
            ;
            adaptor.addChild(root_0, R_BR157_tree);


            pushFollow(FOLLOW_block_in_catch_stmt1515);
            block158=block();

            state._fsp--;

            adaptor.addChild(root_0, block158.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class switch_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt_wrapper"
    // Objcm.g:325:1: switch_stmt_wrapper : switch_stmt -> ^( SWITCH switch_stmt ) ;
    public final ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper() throws RecognitionException {
        ObjcmParser.switch_stmt_wrapper_return retval = new ObjcmParser.switch_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.switch_stmt_return switch_stmt159 =null;


        RewriteRuleSubtreeStream stream_switch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule switch_stmt");
        try {
            // Objcm.g:326:2: ( switch_stmt -> ^( SWITCH switch_stmt ) )
            // Objcm.g:326:4: switch_stmt
            {
            pushFollow(FOLLOW_switch_stmt_in_switch_stmt_wrapper1528);
            switch_stmt159=switch_stmt();

            state._fsp--;

            stream_switch_stmt.add(switch_stmt159.getTree());

            // AST REWRITE
            // elements: switch_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 326:16: -> ^( SWITCH switch_stmt )
            {
                // Objcm.g:326:19: ^( SWITCH switch_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH, "SWITCH")
                , root_1);

                adaptor.addChild(root_1, stream_switch_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt_wrapper"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // Objcm.g:328:1: switch_stmt : 'switch' L_BR switch_expr R_BR switch_body_wrapper ;
    public final ObjcmParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcmParser.switch_stmt_return retval = new ObjcmParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal160=null;
        Token L_BR161=null;
        Token R_BR163=null;
        ObjcmParser.switch_expr_return switch_expr162 =null;

        ObjcmParser.switch_body_wrapper_return switch_body_wrapper164 =null;


        Object string_literal160_tree=null;
        Object L_BR161_tree=null;
        Object R_BR163_tree=null;

        try {
            // Objcm.g:329:2: ( 'switch' L_BR switch_expr R_BR switch_body_wrapper )
            // Objcm.g:329:4: 'switch' L_BR switch_expr R_BR switch_body_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal160=(Token)match(input,185,FOLLOW_185_in_switch_stmt1545); 
            string_literal160_tree = 
            (Object)adaptor.create(string_literal160)
            ;
            adaptor.addChild(root_0, string_literal160_tree);


            L_BR161=(Token)match(input,L_BR,FOLLOW_L_BR_in_switch_stmt1548); 
            L_BR161_tree = 
            (Object)adaptor.create(L_BR161)
            ;
            adaptor.addChild(root_0, L_BR161_tree);


            pushFollow(FOLLOW_switch_expr_in_switch_stmt1551);
            switch_expr162=switch_expr();

            state._fsp--;

            adaptor.addChild(root_0, switch_expr162.getTree());

            R_BR163=(Token)match(input,R_BR,FOLLOW_R_BR_in_switch_stmt1553); 
            R_BR163_tree = 
            (Object)adaptor.create(R_BR163)
            ;
            adaptor.addChild(root_0, R_BR163_tree);


            pushFollow(FOLLOW_switch_body_wrapper_in_switch_stmt1559);
            switch_body_wrapper164=switch_body_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, switch_body_wrapper164.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body_wrapper"
    // Objcm.g:333:1: switch_body_wrapper : L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) ;
    public final ObjcmParser.switch_body_wrapper_return switch_body_wrapper() throws RecognitionException {
        ObjcmParser.switch_body_wrapper_return retval = new ObjcmParser.switch_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR165=null;
        Token R_FBR167=null;
        ObjcmParser.switch_body_return switch_body166 =null;


        Object L_FBR165_tree=null;
        Object R_FBR167_tree=null;
        RewriteRuleTokenStream stream_R_FBR=new RewriteRuleTokenStream(adaptor,"token R_FBR");
        RewriteRuleTokenStream stream_L_FBR=new RewriteRuleTokenStream(adaptor,"token L_FBR");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // Objcm.g:334:2: ( L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) )
            // Objcm.g:334:4: L_FBR switch_body R_FBR
            {
            L_FBR165=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_switch_body_wrapper1572);  
            stream_L_FBR.add(L_FBR165);


            pushFollow(FOLLOW_switch_body_in_switch_body_wrapper1574);
            switch_body166=switch_body();

            state._fsp--;

            stream_switch_body.add(switch_body166.getTree());

            R_FBR167=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_switch_body_wrapper1576);  
            stream_R_FBR.add(R_FBR167);


            // AST REWRITE
            // elements: switch_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 334:28: -> ^( SWITCH_BODY switch_body )
            {
                // Objcm.g:334:31: ^( SWITCH_BODY switch_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_BODY, "SWITCH_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_switch_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body_wrapper"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // Objcm.g:336:1: switch_body : ( block_internal_full )* ( switch_internal )* ;
    public final ObjcmParser.switch_body_return switch_body() throws RecognitionException {
        ObjcmParser.switch_body_return retval = new ObjcmParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_full_return block_internal_full168 =null;

        ObjcmParser.switch_internal_return switch_internal169 =null;



        try {
            // Objcm.g:337:2: ( ( block_internal_full )* ( switch_internal )* )
            // Objcm.g:337:4: ( block_internal_full )* ( switch_internal )*
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:337:4: ( block_internal_full )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==ASTERISK||LA35_0==BREAK_WORD||LA35_0==CONST_PREFIX||LA35_0==ENUM_PREFIX||LA35_0==ID||LA35_0==L_AND||LA35_0==L_BR||LA35_0==L_KBR||LA35_0==L_MINUS||LA35_0==L_MINUS_MINUS||LA35_0==L_NOT||LA35_0==L_PLUS||LA35_0==L_PLUS_PLUS||LA35_0==L_TILDA||LA35_0==NUMBER||LA35_0==SEMICOLON||(LA35_0 >= SINGLE_OP && LA35_0 <= SIZEOF)||LA35_0==STATIC_PREFIX||(LA35_0 >= STRING_LITERAL && LA35_0 <= STRING_LITERAL3)||LA35_0==STRUCT_PREFIX||LA35_0==VOID||LA35_0==158||LA35_0==164||LA35_0==166||(LA35_0 >= 168 && LA35_0 <= 170)||LA35_0==172||(LA35_0 >= 176 && LA35_0 <= 177)||(LA35_0 >= 179 && LA35_0 <= 181)||(LA35_0 >= 183 && LA35_0 <= 185)||(LA35_0 >= 188 && LA35_0 <= 189)) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // Objcm.g:337:4: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_switch_body1595);
            	    block_internal_full168=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full168.getTree());

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            // Objcm.g:338:3: ( switch_internal )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==173||LA36_0==175) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // Objcm.g:338:3: switch_internal
            	    {
            	    pushFollow(FOLLOW_switch_internal_in_switch_body1600);
            	    switch_internal169=switch_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, switch_internal169.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class switch_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_expr"
    // Objcm.g:341:1: switch_expr : classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) ;
    public final ObjcmParser.switch_expr_return switch_expr() throws RecognitionException {
        ObjcmParser.switch_expr_return retval = new ObjcmParser.switch_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp170 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:342:2: ( classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) )
            // Objcm.g:342:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_switch_expr1613);
            classical_expr_wrp170=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp170.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 342:23: -> ^( SWITCH_EXPRESSION classical_expr_wrp )
            {
                // Objcm.g:342:26: ^( SWITCH_EXPRESSION classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_EXPRESSION, "SWITCH_EXPRESSION")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_expr"


    public static class switch_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_internal"
    // Objcm.g:344:1: switch_internal : ( case_stmt_wrapper | default_stmt_wrapper );
    public final ObjcmParser.switch_internal_return switch_internal() throws RecognitionException {
        ObjcmParser.switch_internal_return retval = new ObjcmParser.switch_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper171 =null;

        ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper172 =null;



        try {
            // Objcm.g:345:2: ( case_stmt_wrapper | default_stmt_wrapper )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==173) ) {
                alt37=1;
            }
            else if ( (LA37_0==175) ) {
                alt37=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // Objcm.g:345:4: case_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_wrapper_in_switch_internal1630);
                    case_stmt_wrapper171=case_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_stmt_wrapper171.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:346:5: default_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_wrapper_in_switch_internal1636);
                    default_stmt_wrapper172=default_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt_wrapper172.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_internal"


    public static class case_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt_wrapper"
    // Objcm.g:348:1: case_stmt_wrapper : case_stmt -> ^( CASE_STMT case_stmt ) ;
    public final ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper() throws RecognitionException {
        ObjcmParser.case_stmt_wrapper_return retval = new ObjcmParser.case_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_return case_stmt173 =null;


        RewriteRuleSubtreeStream stream_case_stmt=new RewriteRuleSubtreeStream(adaptor,"rule case_stmt");
        try {
            // Objcm.g:349:2: ( case_stmt -> ^( CASE_STMT case_stmt ) )
            // Objcm.g:349:4: case_stmt
            {
            pushFollow(FOLLOW_case_stmt_in_case_stmt_wrapper1645);
            case_stmt173=case_stmt();

            state._fsp--;

            stream_case_stmt.add(case_stmt173.getTree());

            // AST REWRITE
            // elements: case_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 349:14: -> ^( CASE_STMT case_stmt )
            {
                // Objcm.g:349:17: ^( CASE_STMT case_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_case_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt_wrapper"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // Objcm.g:351:1: case_stmt : 'case' case_expr_wrapper COLON ( case_body_wrapper )? ;
    public final ObjcmParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcmParser.case_stmt_return retval = new ObjcmParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal174=null;
        Token COLON176=null;
        ObjcmParser.case_expr_wrapper_return case_expr_wrapper175 =null;

        ObjcmParser.case_body_wrapper_return case_body_wrapper177 =null;


        Object string_literal174_tree=null;
        Object COLON176_tree=null;

        try {
            // Objcm.g:352:2: ( 'case' case_expr_wrapper COLON ( case_body_wrapper )? )
            // Objcm.g:352:4: 'case' case_expr_wrapper COLON ( case_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal174=(Token)match(input,173,FOLLOW_173_in_case_stmt1662); 
            string_literal174_tree = 
            (Object)adaptor.create(string_literal174)
            ;
            adaptor.addChild(root_0, string_literal174_tree);


            pushFollow(FOLLOW_case_expr_wrapper_in_case_stmt1665);
            case_expr_wrapper175=case_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, case_expr_wrapper175.getTree());

            COLON176=(Token)match(input,COLON,FOLLOW_COLON_in_case_stmt1668); 
            COLON176_tree = 
            (Object)adaptor.create(COLON176)
            ;
            adaptor.addChild(root_0, COLON176_tree);


            // Objcm.g:353:3: ( case_body_wrapper )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==ASTERISK||LA38_0==BREAK_WORD||LA38_0==CONST_PREFIX||LA38_0==ENUM_PREFIX||LA38_0==ID||LA38_0==L_AND||LA38_0==L_BR||(LA38_0 >= L_FBR && LA38_0 <= L_KBR)||LA38_0==L_MINUS||LA38_0==L_MINUS_MINUS||LA38_0==L_NOT||LA38_0==L_PLUS||LA38_0==L_PLUS_PLUS||LA38_0==L_TILDA||LA38_0==NUMBER||LA38_0==SEMICOLON||(LA38_0 >= SINGLE_OP && LA38_0 <= SIZEOF)||LA38_0==STATIC_PREFIX||(LA38_0 >= STRING_LITERAL && LA38_0 <= STRING_LITERAL3)||LA38_0==STRUCT_PREFIX||LA38_0==VOID||LA38_0==158||LA38_0==164||LA38_0==166||(LA38_0 >= 168 && LA38_0 <= 170)||LA38_0==172||(LA38_0 >= 176 && LA38_0 <= 177)||(LA38_0 >= 179 && LA38_0 <= 181)||(LA38_0 >= 183 && LA38_0 <= 185)||(LA38_0 >= 188 && LA38_0 <= 189)) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // Objcm.g:353:3: case_body_wrapper
                    {
                    pushFollow(FOLLOW_case_body_wrapper_in_case_stmt1673);
                    case_body_wrapper177=case_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_body_wrapper177.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class case_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body_wrapper"
    // Objcm.g:356:1: case_body_wrapper : case_body -> ^( CASE_BODY case_body ) ;
    public final ObjcmParser.case_body_wrapper_return case_body_wrapper() throws RecognitionException {
        ObjcmParser.case_body_wrapper_return retval = new ObjcmParser.case_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_body_return case_body178 =null;


        RewriteRuleSubtreeStream stream_case_body=new RewriteRuleSubtreeStream(adaptor,"rule case_body");
        try {
            // Objcm.g:357:2: ( case_body -> ^( CASE_BODY case_body ) )
            // Objcm.g:357:4: case_body
            {
            pushFollow(FOLLOW_case_body_in_case_body_wrapper1687);
            case_body178=case_body();

            state._fsp--;

            stream_case_body.add(case_body178.getTree());

            // AST REWRITE
            // elements: case_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 357:14: -> ^( CASE_BODY case_body )
            {
                // Objcm.g:357:17: ^( CASE_BODY case_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_BODY, "CASE_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_case_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body_wrapper"


    public static class case_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body"
    // Objcm.g:359:1: case_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.case_body_return case_body() throws RecognitionException {
        ObjcmParser.case_body_return retval = new ObjcmParser.case_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break179 =null;

        ObjcmParser.block_internal_full_return block_internal_full180 =null;



        try {
            // Objcm.g:360:2: ( block_break | ( block_internal_full )+ )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==L_FBR) ) {
                alt40=1;
            }
            else if ( (LA40_0==ASTERISK||LA40_0==BREAK_WORD||LA40_0==CONST_PREFIX||LA40_0==ENUM_PREFIX||LA40_0==ID||LA40_0==L_AND||LA40_0==L_BR||LA40_0==L_KBR||LA40_0==L_MINUS||LA40_0==L_MINUS_MINUS||LA40_0==L_NOT||LA40_0==L_PLUS||LA40_0==L_PLUS_PLUS||LA40_0==L_TILDA||LA40_0==NUMBER||LA40_0==SEMICOLON||(LA40_0 >= SINGLE_OP && LA40_0 <= SIZEOF)||LA40_0==STATIC_PREFIX||(LA40_0 >= STRING_LITERAL && LA40_0 <= STRING_LITERAL3)||LA40_0==STRUCT_PREFIX||LA40_0==VOID||LA40_0==158||LA40_0==164||LA40_0==166||(LA40_0 >= 168 && LA40_0 <= 170)||LA40_0==172||(LA40_0 >= 176 && LA40_0 <= 177)||(LA40_0 >= 179 && LA40_0 <= 181)||(LA40_0 >= 183 && LA40_0 <= 185)||(LA40_0 >= 188 && LA40_0 <= 189)) ) {
                alt40=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // Objcm.g:360:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_case_body1706);
                    block_break179=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break179.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:361:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:361:5: ( block_internal_full )+
                    int cnt39=0;
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==ASTERISK||LA39_0==BREAK_WORD||LA39_0==CONST_PREFIX||LA39_0==ENUM_PREFIX||LA39_0==ID||LA39_0==L_AND||LA39_0==L_BR||LA39_0==L_KBR||LA39_0==L_MINUS||LA39_0==L_MINUS_MINUS||LA39_0==L_NOT||LA39_0==L_PLUS||LA39_0==L_PLUS_PLUS||LA39_0==L_TILDA||LA39_0==NUMBER||LA39_0==SEMICOLON||(LA39_0 >= SINGLE_OP && LA39_0 <= SIZEOF)||LA39_0==STATIC_PREFIX||(LA39_0 >= STRING_LITERAL && LA39_0 <= STRING_LITERAL3)||LA39_0==STRUCT_PREFIX||LA39_0==VOID||LA39_0==158||LA39_0==164||LA39_0==166||(LA39_0 >= 168 && LA39_0 <= 170)||LA39_0==172||(LA39_0 >= 176 && LA39_0 <= 177)||(LA39_0 >= 179 && LA39_0 <= 181)||(LA39_0 >= 183 && LA39_0 <= 185)||(LA39_0 >= 188 && LA39_0 <= 189)) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    // Objcm.g:361:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_case_body1713);
                    	    block_internal_full180=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full180.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt39 >= 1 ) break loop39;
                                EarlyExitException eee =
                                    new EarlyExitException(39, input);
                                throw eee;
                        }
                        cnt39++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body"


    public static class case_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr_wrapper"
    // Objcm.g:364:1: case_expr_wrapper : case_expr -> ^( CASE_EXPR case_expr ) ;
    public final ObjcmParser.case_expr_wrapper_return case_expr_wrapper() throws RecognitionException {
        ObjcmParser.case_expr_wrapper_return retval = new ObjcmParser.case_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_expr_return case_expr181 =null;


        RewriteRuleSubtreeStream stream_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule case_expr");
        try {
            // Objcm.g:365:2: ( case_expr -> ^( CASE_EXPR case_expr ) )
            // Objcm.g:365:4: case_expr
            {
            pushFollow(FOLLOW_case_expr_in_case_expr_wrapper1729);
            case_expr181=case_expr();

            state._fsp--;

            stream_case_expr.add(case_expr181.getTree());

            // AST REWRITE
            // elements: case_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 365:14: -> ^( CASE_EXPR case_expr )
            {
                // Objcm.g:365:17: ^( CASE_EXPR case_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_EXPR, "CASE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_case_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr_wrapper"


    public static class case_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr"
    // Objcm.g:367:1: case_expr : ( const_expr | ID );
    public final ObjcmParser.case_expr_return case_expr() throws RecognitionException {
        ObjcmParser.case_expr_return retval = new ObjcmParser.case_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID183=null;
        ObjcmParser.const_expr_return const_expr182 =null;


        Object ID183_tree=null;

        try {
            // Objcm.g:368:2: ( const_expr | ID )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==NUMBER||(LA41_0 >= STRING_LITERAL && LA41_0 <= STRING_LITERAL3)||LA41_0==170||LA41_0==183) ) {
                alt41=1;
            }
            else if ( (LA41_0==ID) ) {
                alt41=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }
            switch (alt41) {
                case 1 :
                    // Objcm.g:368:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_case_expr1751);
                    const_expr182=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr182.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:369:5: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID183=(Token)match(input,ID,FOLLOW_ID_in_case_expr1758); 
                    ID183_tree = 
                    (Object)adaptor.create(ID183)
                    ;
                    adaptor.addChild(root_0, ID183_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr"


    public static class block_break_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_break"
    // Objcm.g:371:1: block_break : block_case ( single_operators )? ;
    public final ObjcmParser.block_break_return block_break() throws RecognitionException {
        ObjcmParser.block_break_return retval = new ObjcmParser.block_break_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_case_return block_case184 =null;

        ObjcmParser.single_operators_return single_operators185 =null;



        try {
            // Objcm.g:372:2: ( block_case ( single_operators )? )
            // Objcm.g:372:4: block_case ( single_operators )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_case_in_block_break1769);
            block_case184=block_case();

            state._fsp--;

            adaptor.addChild(root_0, block_case184.getTree());

            // Objcm.g:372:15: ( single_operators )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==BREAK_WORD||LA42_0==SINGLE_OP) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // Objcm.g:372:15: single_operators
                    {
                    pushFollow(FOLLOW_single_operators_in_block_break1771);
                    single_operators185=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators185.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_break"


    public static class default_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt_wrapper"
    // Objcm.g:375:1: default_stmt_wrapper : default_stmt -> ^( DEFAULT_STMT default_stmt ) ;
    public final ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper() throws RecognitionException {
        ObjcmParser.default_stmt_wrapper_return retval = new ObjcmParser.default_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_stmt_return default_stmt186 =null;


        RewriteRuleSubtreeStream stream_default_stmt=new RewriteRuleSubtreeStream(adaptor,"rule default_stmt");
        try {
            // Objcm.g:376:2: ( default_stmt -> ^( DEFAULT_STMT default_stmt ) )
            // Objcm.g:376:4: default_stmt
            {
            pushFollow(FOLLOW_default_stmt_in_default_stmt_wrapper1783);
            default_stmt186=default_stmt();

            state._fsp--;

            stream_default_stmt.add(default_stmt186.getTree());

            // AST REWRITE
            // elements: default_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 376:17: -> ^( DEFAULT_STMT default_stmt )
            {
                // Objcm.g:376:20: ^( DEFAULT_STMT default_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_default_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt_wrapper"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // Objcm.g:378:1: default_stmt : 'default' COLON ( default_body_wrapper )? ;
    public final ObjcmParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcmParser.default_stmt_return retval = new ObjcmParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal187=null;
        Token COLON188=null;
        ObjcmParser.default_body_wrapper_return default_body_wrapper189 =null;


        Object string_literal187_tree=null;
        Object COLON188_tree=null;

        try {
            // Objcm.g:379:2: ( 'default' COLON ( default_body_wrapper )? )
            // Objcm.g:379:4: 'default' COLON ( default_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal187=(Token)match(input,175,FOLLOW_175_in_default_stmt1800); 
            string_literal187_tree = 
            (Object)adaptor.create(string_literal187)
            ;
            adaptor.addChild(root_0, string_literal187_tree);


            COLON188=(Token)match(input,COLON,FOLLOW_COLON_in_default_stmt1803); 
            COLON188_tree = 
            (Object)adaptor.create(COLON188)
            ;
            adaptor.addChild(root_0, COLON188_tree);


            // Objcm.g:380:3: ( default_body_wrapper )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==ASTERISK||LA43_0==BREAK_WORD||LA43_0==CONST_PREFIX||LA43_0==ENUM_PREFIX||LA43_0==ID||LA43_0==L_AND||LA43_0==L_BR||(LA43_0 >= L_FBR && LA43_0 <= L_KBR)||LA43_0==L_MINUS||LA43_0==L_MINUS_MINUS||LA43_0==L_NOT||LA43_0==L_PLUS||LA43_0==L_PLUS_PLUS||LA43_0==L_TILDA||LA43_0==NUMBER||LA43_0==SEMICOLON||(LA43_0 >= SINGLE_OP && LA43_0 <= SIZEOF)||LA43_0==STATIC_PREFIX||(LA43_0 >= STRING_LITERAL && LA43_0 <= STRING_LITERAL3)||LA43_0==STRUCT_PREFIX||LA43_0==VOID||LA43_0==158||LA43_0==164||LA43_0==166||(LA43_0 >= 168 && LA43_0 <= 170)||LA43_0==172||(LA43_0 >= 176 && LA43_0 <= 177)||(LA43_0 >= 179 && LA43_0 <= 181)||(LA43_0 >= 183 && LA43_0 <= 185)||(LA43_0 >= 188 && LA43_0 <= 189)) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // Objcm.g:380:3: default_body_wrapper
                    {
                    pushFollow(FOLLOW_default_body_wrapper_in_default_stmt1808);
                    default_body_wrapper189=default_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_body_wrapper189.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class default_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body_wrapper"
    // Objcm.g:383:1: default_body_wrapper : default_body -> ^( DEFAULT_BODY default_body ) ;
    public final ObjcmParser.default_body_wrapper_return default_body_wrapper() throws RecognitionException {
        ObjcmParser.default_body_wrapper_return retval = new ObjcmParser.default_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_body_return default_body190 =null;


        RewriteRuleSubtreeStream stream_default_body=new RewriteRuleSubtreeStream(adaptor,"rule default_body");
        try {
            // Objcm.g:384:2: ( default_body -> ^( DEFAULT_BODY default_body ) )
            // Objcm.g:384:4: default_body
            {
            pushFollow(FOLLOW_default_body_in_default_body_wrapper1821);
            default_body190=default_body();

            state._fsp--;

            stream_default_body.add(default_body190.getTree());

            // AST REWRITE
            // elements: default_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 384:17: -> ^( DEFAULT_BODY default_body )
            {
                // Objcm.g:384:20: ^( DEFAULT_BODY default_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_BODY, "DEFAULT_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_default_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body_wrapper"


    public static class default_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body"
    // Objcm.g:387:1: default_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.default_body_return default_body() throws RecognitionException {
        ObjcmParser.default_body_return retval = new ObjcmParser.default_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break191 =null;

        ObjcmParser.block_internal_full_return block_internal_full192 =null;



        try {
            // Objcm.g:388:2: ( block_break | ( block_internal_full )+ )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==L_FBR) ) {
                alt45=1;
            }
            else if ( (LA45_0==ASTERISK||LA45_0==BREAK_WORD||LA45_0==CONST_PREFIX||LA45_0==ENUM_PREFIX||LA45_0==ID||LA45_0==L_AND||LA45_0==L_BR||LA45_0==L_KBR||LA45_0==L_MINUS||LA45_0==L_MINUS_MINUS||LA45_0==L_NOT||LA45_0==L_PLUS||LA45_0==L_PLUS_PLUS||LA45_0==L_TILDA||LA45_0==NUMBER||LA45_0==SEMICOLON||(LA45_0 >= SINGLE_OP && LA45_0 <= SIZEOF)||LA45_0==STATIC_PREFIX||(LA45_0 >= STRING_LITERAL && LA45_0 <= STRING_LITERAL3)||LA45_0==STRUCT_PREFIX||LA45_0==VOID||LA45_0==158||LA45_0==164||LA45_0==166||(LA45_0 >= 168 && LA45_0 <= 170)||LA45_0==172||(LA45_0 >= 176 && LA45_0 <= 177)||(LA45_0 >= 179 && LA45_0 <= 181)||(LA45_0 >= 183 && LA45_0 <= 185)||(LA45_0 >= 188 && LA45_0 <= 189)) ) {
                alt45=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }
            switch (alt45) {
                case 1 :
                    // Objcm.g:388:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_default_body1841);
                    block_break191=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break191.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:389:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:389:5: ( block_internal_full )+
                    int cnt44=0;
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==ASTERISK||LA44_0==BREAK_WORD||LA44_0==CONST_PREFIX||LA44_0==ENUM_PREFIX||LA44_0==ID||LA44_0==L_AND||LA44_0==L_BR||LA44_0==L_KBR||LA44_0==L_MINUS||LA44_0==L_MINUS_MINUS||LA44_0==L_NOT||LA44_0==L_PLUS||LA44_0==L_PLUS_PLUS||LA44_0==L_TILDA||LA44_0==NUMBER||LA44_0==SEMICOLON||(LA44_0 >= SINGLE_OP && LA44_0 <= SIZEOF)||LA44_0==STATIC_PREFIX||(LA44_0 >= STRING_LITERAL && LA44_0 <= STRING_LITERAL3)||LA44_0==STRUCT_PREFIX||LA44_0==VOID||LA44_0==158||LA44_0==164||LA44_0==166||(LA44_0 >= 168 && LA44_0 <= 170)||LA44_0==172||(LA44_0 >= 176 && LA44_0 <= 177)||(LA44_0 >= 179 && LA44_0 <= 181)||(LA44_0 >= 183 && LA44_0 <= 185)||(LA44_0 >= 188 && LA44_0 <= 189)) ) {
                            alt44=1;
                        }


                        switch (alt44) {
                    	case 1 :
                    	    // Objcm.g:389:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_default_body1847);
                    	    block_internal_full192=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full192.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt44 >= 1 ) break loop44;
                                EarlyExitException eee =
                                    new EarlyExitException(44, input);
                                throw eee;
                        }
                        cnt44++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body"


    public static class single_operators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_operators"
    // Objcm.g:392:1: single_operators : ( SINGLE_OP | break_wrapper );
    public final ObjcmParser.single_operators_return single_operators() throws RecognitionException {
        ObjcmParser.single_operators_return retval = new ObjcmParser.single_operators_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_OP193=null;
        ObjcmParser.break_wrapper_return break_wrapper194 =null;


        Object SINGLE_OP193_tree=null;

        try {
            // Objcm.g:393:2: ( SINGLE_OP | break_wrapper )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==SINGLE_OP) ) {
                alt46=1;
            }
            else if ( (LA46_0==BREAK_WORD) ) {
                alt46=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // Objcm.g:393:4: SINGLE_OP
                    {
                    root_0 = (Object)adaptor.nil();


                    SINGLE_OP193=(Token)match(input,SINGLE_OP,FOLLOW_SINGLE_OP_in_single_operators1862); 
                    SINGLE_OP193_tree = 
                    (Object)adaptor.create(SINGLE_OP193)
                    ;
                    adaptor.addChild(root_0, SINGLE_OP193_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:394:5: break_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_wrapper_in_single_operators1869);
                    break_wrapper194=break_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, break_wrapper194.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_operators"


    public static class break_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_wrapper"
    // Objcm.g:397:1: break_wrapper : break_stmt -> ^( BREAK break_stmt ) ;
    public final ObjcmParser.break_wrapper_return break_wrapper() throws RecognitionException {
        ObjcmParser.break_wrapper_return retval = new ObjcmParser.break_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.break_stmt_return break_stmt195 =null;


        RewriteRuleSubtreeStream stream_break_stmt=new RewriteRuleSubtreeStream(adaptor,"rule break_stmt");
        try {
            // Objcm.g:398:2: ( break_stmt -> ^( BREAK break_stmt ) )
            // Objcm.g:398:4: break_stmt
            {
            pushFollow(FOLLOW_break_stmt_in_break_wrapper1881);
            break_stmt195=break_stmt();

            state._fsp--;

            stream_break_stmt.add(break_stmt195.getTree());

            // AST REWRITE
            // elements: break_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 398:15: -> ^( BREAK break_stmt )
            {
                // Objcm.g:398:18: ^( BREAK break_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK, "BREAK")
                , root_1);

                adaptor.addChild(root_1, stream_break_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_wrapper"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // Objcm.g:400:1: break_stmt : BREAK_WORD SEMICOLON ;
    public final ObjcmParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcmParser.break_stmt_return retval = new ObjcmParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BREAK_WORD196=null;
        Token SEMICOLON197=null;

        Object BREAK_WORD196_tree=null;
        Object SEMICOLON197_tree=null;

        try {
            // Objcm.g:401:2: ( BREAK_WORD SEMICOLON )
            // Objcm.g:401:4: BREAK_WORD SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            BREAK_WORD196=(Token)match(input,BREAK_WORD,FOLLOW_BREAK_WORD_in_break_stmt1899); 
            BREAK_WORD196_tree = 
            (Object)adaptor.create(BREAK_WORD196)
            ;
            adaptor.addChild(root_0, BREAK_WORD196_tree);


            SEMICOLON197=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_break_stmt1902); 
            SEMICOLON197_tree = 
            (Object)adaptor.create(SEMICOLON197)
            ;
            adaptor.addChild(root_0, SEMICOLON197_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // Objcm.g:403:1: do_stmt : 'do' if_stmt_block 'while' L_BR expression R_BR ;
    public final ObjcmParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcmParser.do_stmt_return retval = new ObjcmParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal198=null;
        Token string_literal200=null;
        Token L_BR201=null;
        Token R_BR203=null;
        ObjcmParser.if_stmt_block_return if_stmt_block199 =null;

        ObjcmParser.expression_return expression202 =null;


        Object string_literal198_tree=null;
        Object string_literal200_tree=null;
        Object L_BR201_tree=null;
        Object R_BR203_tree=null;

        try {
            // Objcm.g:403:9: ( 'do' if_stmt_block 'while' L_BR expression R_BR )
            // Objcm.g:403:11: 'do' if_stmt_block 'while' L_BR expression R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal198=(Token)match(input,176,FOLLOW_176_in_do_stmt1912); 
            string_literal198_tree = 
            (Object)adaptor.create(string_literal198)
            ;
            adaptor.addChild(root_0, string_literal198_tree);


            pushFollow(FOLLOW_if_stmt_block_in_do_stmt1915);
            if_stmt_block199=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block199.getTree());

            string_literal200=(Token)match(input,189,FOLLOW_189_in_do_stmt1918); 
            string_literal200_tree = 
            (Object)adaptor.create(string_literal200)
            ;
            adaptor.addChild(root_0, string_literal200_tree);


            L_BR201=(Token)match(input,L_BR,FOLLOW_L_BR_in_do_stmt1921); 
            L_BR201_tree = 
            (Object)adaptor.create(L_BR201)
            ;
            adaptor.addChild(root_0, L_BR201_tree);


            pushFollow(FOLLOW_expression_in_do_stmt1924);
            expression202=expression();

            state._fsp--;

            adaptor.addChild(root_0, expression202.getTree());

            R_BR203=(Token)match(input,R_BR,FOLLOW_R_BR_in_do_stmt1926); 
            R_BR203_tree = 
            (Object)adaptor.create(R_BR203)
            ;
            adaptor.addChild(root_0, R_BR203_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // Objcm.g:405:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcmParser.while_stmt_wrapper_return retval = new ObjcmParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.while_stmt_return while_stmt204 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // Objcm.g:406:2: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // Objcm.g:406:4: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper1935);
            while_stmt204=while_stmt();

            state._fsp--;

            stream_while_stmt.add(while_stmt204.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 406:15: -> ^( WHILE_STMT while_stmt )
            {
                // Objcm.g:406:18: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // Objcm.g:409:1: while_stmt : 'while' L_BR while_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcmParser.while_stmt_return retval = new ObjcmParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal205=null;
        Token L_BR206=null;
        Token R_BR208=null;
        ObjcmParser.while_expr_return while_expr207 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper209 =null;


        Object string_literal205_tree=null;
        Object L_BR206_tree=null;
        Object R_BR208_tree=null;

        try {
            // Objcm.g:410:2: ( 'while' L_BR while_expr R_BR if_stmt_block_wrapper )
            // Objcm.g:410:4: 'while' L_BR while_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal205=(Token)match(input,189,FOLLOW_189_in_while_stmt1954); 
            string_literal205_tree = 
            (Object)adaptor.create(string_literal205)
            ;
            adaptor.addChild(root_0, string_literal205_tree);


            L_BR206=(Token)match(input,L_BR,FOLLOW_L_BR_in_while_stmt1957); 
            L_BR206_tree = 
            (Object)adaptor.create(L_BR206)
            ;
            adaptor.addChild(root_0, L_BR206_tree);


            pushFollow(FOLLOW_while_expr_in_while_stmt1960);
            while_expr207=while_expr();

            state._fsp--;

            adaptor.addChild(root_0, while_expr207.getTree());

            R_BR208=(Token)match(input,R_BR,FOLLOW_R_BR_in_while_stmt1962); 
            R_BR208_tree = 
            (Object)adaptor.create(R_BR208)
            ;
            adaptor.addChild(root_0, R_BR208_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_while_stmt1965);
            if_stmt_block_wrapper209=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper209.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class while_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_expr"
    // Objcm.g:412:1: while_expr : classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.while_expr_return while_expr() throws RecognitionException {
        ObjcmParser.while_expr_return retval = new ObjcmParser.while_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp210 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:413:2: ( classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) )
            // Objcm.g:413:5: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_while_expr1978);
            classical_expr_wrp210=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp210.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 413:24: -> ^( WHILE_EXPR classical_expr_wrp )
            {
                // Objcm.g:413:27: ^( WHILE_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_EXPR, "WHILE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_expr"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // Objcm.g:415:1: for_stmt : 'for' L_BR for_stmt_expr R_BR if_stmt_block ;
    public final ObjcmParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcmParser.for_stmt_return retval = new ObjcmParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal211=null;
        Token L_BR212=null;
        Token R_BR214=null;
        ObjcmParser.for_stmt_expr_return for_stmt_expr213 =null;

        ObjcmParser.if_stmt_block_return if_stmt_block215 =null;


        Object string_literal211_tree=null;
        Object L_BR212_tree=null;
        Object R_BR214_tree=null;

        try {
            // Objcm.g:415:9: ( 'for' L_BR for_stmt_expr R_BR if_stmt_block )
            // Objcm.g:415:11: 'for' L_BR for_stmt_expr R_BR if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal211=(Token)match(input,179,FOLLOW_179_in_for_stmt1995); 
            string_literal211_tree = 
            (Object)adaptor.create(string_literal211)
            ;
            adaptor.addChild(root_0, string_literal211_tree);


            L_BR212=(Token)match(input,L_BR,FOLLOW_L_BR_in_for_stmt1998); 
            L_BR212_tree = 
            (Object)adaptor.create(L_BR212)
            ;
            adaptor.addChild(root_0, L_BR212_tree);


            pushFollow(FOLLOW_for_stmt_expr_in_for_stmt2001);
            for_stmt_expr213=for_stmt_expr();

            state._fsp--;

            adaptor.addChild(root_0, for_stmt_expr213.getTree());

            R_BR214=(Token)match(input,R_BR,FOLLOW_R_BR_in_for_stmt2003); 
            R_BR214_tree = 
            (Object)adaptor.create(R_BR214)
            ;
            adaptor.addChild(root_0, R_BR214_tree);


            pushFollow(FOLLOW_if_stmt_block_in_for_stmt2006);
            if_stmt_block215=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block215.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr"
    // Objcm.g:418:1: for_stmt_expr : ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 );
    public final ObjcmParser.for_stmt_expr_return for_stmt_expr() throws RecognitionException {
        ObjcmParser.for_stmt_expr_return retval = new ObjcmParser.for_stmt_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper216 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1217 =null;

        ObjcmParser.full_expr2_return full_expr2218 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1219 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2220 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2221 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2222 =null;



        try {
            // Objcm.g:419:2: ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==ASTERISK||LA49_0==ID||LA49_0==L_AND||LA49_0==L_BR||LA49_0==L_KBR||LA49_0==L_MINUS||LA49_0==L_MINUS_MINUS||LA49_0==L_NOT||LA49_0==L_PLUS||LA49_0==L_PLUS_PLUS||LA49_0==L_TILDA||LA49_0==NUMBER||LA49_0==SIZEOF||(LA49_0 >= STRING_LITERAL && LA49_0 <= STRING_LITERAL3)||LA49_0==158||LA49_0==164||LA49_0==166||LA49_0==170||LA49_0==181||LA49_0==183||LA49_0==188) ) {
                alt49=1;
            }
            else if ( (LA49_0==SEMICOLON) ) {
                alt49=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;

            }
            switch (alt49) {
                case 1 :
                    // Objcm.g:419:4: full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_full_expr_wrapper_in_for_stmt_expr2018);
                    full_expr_wrapper216=full_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, full_expr_wrapper216.getTree());

                    // Objcm.g:419:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    int alt48=3;
                    alt48 = dfa48.predict(input);
                    switch (alt48) {
                        case 1 :
                            // Objcm.g:419:23: for_stmt_int1
                            {
                            pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2021);
                            for_stmt_int1217=for_stmt_int1();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int1217.getTree());

                            }
                            break;
                        case 2 :
                            // Objcm.g:419:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            {
                            // Objcm.g:419:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            // Objcm.g:419:40: full_expr2 ( for_stmt_int1 | for_stmt_int2 )
                            {
                            pushFollow(FOLLOW_full_expr2_in_for_stmt_expr2026);
                            full_expr2218=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2218.getTree());

                            // Objcm.g:419:51: ( for_stmt_int1 | for_stmt_int2 )
                            int alt47=2;
                            int LA47_0 = input.LA(1);

                            if ( (LA47_0==181) ) {
                                alt47=1;
                            }
                            else if ( (LA47_0==SEMICOLON) ) {
                                alt47=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 47, 0, input);

                                throw nvae;

                            }
                            switch (alt47) {
                                case 1 :
                                    // Objcm.g:419:52: for_stmt_int1
                                    {
                                    pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2029);
                                    for_stmt_int1219=for_stmt_int1();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int1219.getTree());

                                    }
                                    break;
                                case 2 :
                                    // Objcm.g:419:68: for_stmt_int2
                                    {
                                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2033);
                                    for_stmt_int2220=for_stmt_int2();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int2220.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            // Objcm.g:419:86: for_stmt_int2
                            {
                            pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2039);
                            for_stmt_int2221=for_stmt_int2();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int2221.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:420:4: for_stmt_int2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2045);
                    for_stmt_int2222=for_stmt_int2();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_int2222.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr"


    public static class for_stmt_int1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int1"
    // Objcm.g:423:1: for_stmt_int1 : 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) ;
    public final ObjcmParser.for_stmt_int1_return for_stmt_int1() throws RecognitionException {
        ObjcmParser.for_stmt_int1_return retval = new ObjcmParser.for_stmt_int1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal223=null;
        ObjcmParser.object_wrapped2_return object_wrapped2224 =null;


        Object string_literal223_tree=null;
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleSubtreeStream stream_object_wrapped2=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapped2");
        try {
            // Objcm.g:424:2: ( 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) )
            // Objcm.g:424:4: 'in' object_wrapped2
            {
            string_literal223=(Token)match(input,181,FOLLOW_181_in_for_stmt_int12060);  
            stream_181.add(string_literal223);


            pushFollow(FOLLOW_object_wrapped2_in_for_stmt_int12062);
            object_wrapped2224=object_wrapped2();

            state._fsp--;

            stream_object_wrapped2.add(object_wrapped2224.getTree());

            // AST REWRITE
            // elements: object_wrapped2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 424:26: -> ^( FOR_IN_STMT object_wrapped2 )
            {
                // Objcm.g:424:29: ^( FOR_IN_STMT object_wrapped2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapped2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int1"


    public static class for_stmt_int2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int2"
    // Objcm.g:426:1: for_stmt_int2 : SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? ;
    public final ObjcmParser.for_stmt_int2_return for_stmt_int2() throws RecognitionException {
        ObjcmParser.for_stmt_int2_return retval = new ObjcmParser.for_stmt_int2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON225=null;
        Token SEMICOLON227=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp226 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp228 =null;


        Object SEMICOLON225_tree=null;
        Object SEMICOLON227_tree=null;

        try {
            // Objcm.g:427:2: ( SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? )
            // Objcm.g:427:4: SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )?
            {
            root_0 = (Object)adaptor.nil();


            SEMICOLON225=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22082); 
            SEMICOLON225_tree = 
            (Object)adaptor.create(SEMICOLON225)
            ;
            adaptor.addChild(root_0, SEMICOLON225_tree);


            // Objcm.g:427:14: ( classical_expr_wrp )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==ASTERISK||LA50_0==ID||LA50_0==L_AND||LA50_0==L_BR||LA50_0==L_KBR||LA50_0==L_MINUS||LA50_0==L_MINUS_MINUS||LA50_0==L_NOT||LA50_0==L_PLUS||LA50_0==L_PLUS_PLUS||LA50_0==L_TILDA||LA50_0==NUMBER||LA50_0==SIZEOF||(LA50_0 >= STRING_LITERAL && LA50_0 <= STRING_LITERAL3)||LA50_0==158||LA50_0==164||LA50_0==166||LA50_0==170||LA50_0==181||LA50_0==183||LA50_0==188) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // Objcm.g:427:14: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22084);
                    classical_expr_wrp226=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp226.getTree());

                    }
                    break;

            }


            SEMICOLON227=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22087); 
            SEMICOLON227_tree = 
            (Object)adaptor.create(SEMICOLON227)
            ;
            adaptor.addChild(root_0, SEMICOLON227_tree);


            // Objcm.g:427:44: ( classical_expr_wrp )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==ASTERISK||LA51_0==ID||LA51_0==L_AND||LA51_0==L_BR||LA51_0==L_KBR||LA51_0==L_MINUS||LA51_0==L_MINUS_MINUS||LA51_0==L_NOT||LA51_0==L_PLUS||LA51_0==L_PLUS_PLUS||LA51_0==L_TILDA||LA51_0==NUMBER||LA51_0==SIZEOF||(LA51_0 >= STRING_LITERAL && LA51_0 <= STRING_LITERAL3)||LA51_0==158||LA51_0==164||LA51_0==166||LA51_0==170||LA51_0==181||LA51_0==183||LA51_0==188) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // Objcm.g:427:44: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22089);
                    classical_expr_wrp228=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp228.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int2"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // Objcm.g:434:1: return_stmt : 'return' ( classical_expr_wrp )? SEMICOLON -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON ) ;
    public final ObjcmParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcmParser.return_stmt_return retval = new ObjcmParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal229=null;
        Token SEMICOLON231=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp230 =null;


        Object string_literal229_tree=null;
        Object SEMICOLON231_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:435:2: ( 'return' ( classical_expr_wrp )? SEMICOLON -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON ) )
            // Objcm.g:435:4: 'return' ( classical_expr_wrp )? SEMICOLON
            {
            string_literal229=(Token)match(input,184,FOLLOW_184_in_return_stmt2106);  
            stream_184.add(string_literal229);


            // Objcm.g:435:13: ( classical_expr_wrp )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==ASTERISK||LA52_0==ID||LA52_0==L_AND||LA52_0==L_BR||LA52_0==L_KBR||LA52_0==L_MINUS||LA52_0==L_MINUS_MINUS||LA52_0==L_NOT||LA52_0==L_PLUS||LA52_0==L_PLUS_PLUS||LA52_0==L_TILDA||LA52_0==NUMBER||LA52_0==SIZEOF||(LA52_0 >= STRING_LITERAL && LA52_0 <= STRING_LITERAL3)||LA52_0==158||LA52_0==164||LA52_0==166||LA52_0==170||LA52_0==181||LA52_0==183||LA52_0==188) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // Objcm.g:435:13: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_return_stmt2108);
                    classical_expr_wrp230=classical_expr_wrp();

                    state._fsp--;

                    stream_classical_expr_wrp.add(classical_expr_wrp230.getTree());

                    }
                    break;

            }


            SEMICOLON231=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_return_stmt2111);  
            stream_SEMICOLON.add(SEMICOLON231);


            // AST REWRITE
            // elements: classical_expr_wrp, SEMICOLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 435:43: -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON )
            {
                // Objcm.g:435:46: ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                // Objcm.g:435:60: ( classical_expr_wrp )?
                if ( stream_classical_expr_wrp.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                }
                stream_classical_expr_wrp.reset();

                adaptor.addChild(root_1, 
                stream_SEMICOLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class if_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_wrapper"
    // Objcm.g:437:1: if_stmt_wrapper : if_stmt -> ^( IF_STMT if_stmt ) ;
    public final ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_wrapper_return retval = new ObjcmParser.if_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_return if_stmt232 =null;


        RewriteRuleSubtreeStream stream_if_stmt=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt");
        try {
            // Objcm.g:438:2: ( if_stmt -> ^( IF_STMT if_stmt ) )
            // Objcm.g:438:4: if_stmt
            {
            pushFollow(FOLLOW_if_stmt_in_if_stmt_wrapper2132);
            if_stmt232=if_stmt();

            state._fsp--;

            stream_if_stmt.add(if_stmt232.getTree());

            // AST REWRITE
            // elements: if_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 438:12: -> ^( IF_STMT if_stmt )
            {
                // Objcm.g:438:15: ^( IF_STMT if_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_wrapper"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // Objcm.g:440:1: if_stmt : 'if' L_BR if_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcmParser.if_stmt_return retval = new ObjcmParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal233=null;
        Token L_BR234=null;
        Token R_BR236=null;
        ObjcmParser.if_expr_return if_expr235 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper237 =null;


        Object string_literal233_tree=null;
        Object L_BR234_tree=null;
        Object R_BR236_tree=null;

        try {
            // Objcm.g:440:9: ( 'if' L_BR if_expr R_BR if_stmt_block_wrapper )
            // Objcm.g:440:11: 'if' L_BR if_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal233=(Token)match(input,180,FOLLOW_180_in_if_stmt2148); 
            string_literal233_tree = 
            (Object)adaptor.create(string_literal233)
            ;
            adaptor.addChild(root_0, string_literal233_tree);


            L_BR234=(Token)match(input,L_BR,FOLLOW_L_BR_in_if_stmt2151); 
            L_BR234_tree = 
            (Object)adaptor.create(L_BR234)
            ;
            adaptor.addChild(root_0, L_BR234_tree);


            pushFollow(FOLLOW_if_expr_in_if_stmt2154);
            if_expr235=if_expr();

            state._fsp--;

            adaptor.addChild(root_0, if_expr235.getTree());

            R_BR236=(Token)match(input,R_BR,FOLLOW_R_BR_in_if_stmt2156); 
            R_BR236_tree = 
            (Object)adaptor.create(R_BR236)
            ;
            adaptor.addChild(root_0, R_BR236_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_if_stmt2159);
            if_stmt_block_wrapper237=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper237.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class if_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_expr"
    // Objcm.g:443:1: if_expr : classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.if_expr_return if_expr() throws RecognitionException {
        ObjcmParser.if_expr_return retval = new ObjcmParser.if_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp238 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:443:9: ( classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) )
            // Objcm.g:443:12: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_if_expr2172);
            classical_expr_wrp238=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp238.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 443:31: -> ^( IF_EXPR classical_expr_wrp )
            {
                // Objcm.g:443:34: ^( IF_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_EXPR, "IF_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_expr"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // Objcm.g:445:1: else_stmt : 'else' if_stmt_block ;
    public final ObjcmParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcmParser.else_stmt_return retval = new ObjcmParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal239=null;
        ObjcmParser.if_stmt_block_return if_stmt_block240 =null;


        Object string_literal239_tree=null;

        try {
            // Objcm.g:446:2: ( 'else' if_stmt_block )
            // Objcm.g:446:4: 'else' if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal239=(Token)match(input,177,FOLLOW_177_in_else_stmt2191); 
            string_literal239_tree = 
            (Object)adaptor.create(string_literal239)
            ;
            adaptor.addChild(root_0, string_literal239_tree);


            pushFollow(FOLLOW_if_stmt_block_in_else_stmt2194);
            if_stmt_block240=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block240.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class if_stmt_block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block_wrapper"
    // Objcm.g:448:1: if_stmt_block_wrapper : if_stmt_block -> ^( IF_BLOCK if_stmt_block ) ;
    public final ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_block_wrapper_return retval = new ObjcmParser.if_stmt_block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_block_return if_stmt_block241 =null;


        RewriteRuleSubtreeStream stream_if_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt_block");
        try {
            // Objcm.g:449:2: ( if_stmt_block -> ^( IF_BLOCK if_stmt_block ) )
            // Objcm.g:449:4: if_stmt_block
            {
            pushFollow(FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2203);
            if_stmt_block241=if_stmt_block();

            state._fsp--;

            stream_if_stmt_block.add(if_stmt_block241.getTree());

            // AST REWRITE
            // elements: if_stmt_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 449:18: -> ^( IF_BLOCK if_stmt_block )
            {
                // Objcm.g:449:21: ^( IF_BLOCK if_stmt_block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_BLOCK, "IF_BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block_wrapper"


    public static class if_stmt_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block"
    // Objcm.g:451:1: if_stmt_block : ( block_wrapper | block_internal );
    public final ObjcmParser.if_stmt_block_return if_stmt_block() throws RecognitionException {
        ObjcmParser.if_stmt_block_return retval = new ObjcmParser.if_stmt_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_wrapper_return block_wrapper242 =null;

        ObjcmParser.block_internal_return block_internal243 =null;



        try {
            // Objcm.g:452:2: ( block_wrapper | block_internal )
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==L_FBR) ) {
                alt53=1;
            }
            else if ( (LA53_0==ASTERISK||LA53_0==BREAK_WORD||LA53_0==CONST_PREFIX||LA53_0==ENUM_PREFIX||LA53_0==ID||LA53_0==L_AND||LA53_0==L_BR||LA53_0==L_KBR||LA53_0==L_MINUS||LA53_0==L_MINUS_MINUS||LA53_0==L_NOT||LA53_0==L_PLUS||LA53_0==L_PLUS_PLUS||LA53_0==L_TILDA||LA53_0==NUMBER||LA53_0==SEMICOLON||(LA53_0 >= SINGLE_OP && LA53_0 <= SIZEOF)||LA53_0==STATIC_PREFIX||(LA53_0 >= STRING_LITERAL && LA53_0 <= STRING_LITERAL3)||LA53_0==STRUCT_PREFIX||LA53_0==VOID||LA53_0==158||LA53_0==164||LA53_0==166||(LA53_0 >= 168 && LA53_0 <= 170)||LA53_0==172||(LA53_0 >= 176 && LA53_0 <= 177)||(LA53_0 >= 179 && LA53_0 <= 181)||(LA53_0 >= 183 && LA53_0 <= 185)||(LA53_0 >= 188 && LA53_0 <= 189)) ) {
                alt53=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;

            }
            switch (alt53) {
                case 1 :
                    // Objcm.g:452:4: block_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_wrapper_in_if_stmt_block2220);
                    block_wrapper242=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper242.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:453:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_if_stmt_block2226);
                    block_internal243=block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, block_internal243.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block"


    public static class static_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start_wrapper"
    // Objcm.g:456:1: static_start_wrapper : static_start -> ^( STATIC_START static_start ) ;
    public final ObjcmParser.static_start_wrapper_return static_start_wrapper() throws RecognitionException {
        ObjcmParser.static_start_wrapper_return retval = new ObjcmParser.static_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_start_return static_start244 =null;


        RewriteRuleSubtreeStream stream_static_start=new RewriteRuleSubtreeStream(adaptor,"rule static_start");
        try {
            // Objcm.g:457:2: ( static_start -> ^( STATIC_START static_start ) )
            // Objcm.g:457:4: static_start
            {
            pushFollow(FOLLOW_static_start_in_static_start_wrapper2238);
            static_start244=static_start();

            state._fsp--;

            stream_static_start.add(static_start244.getTree());

            // AST REWRITE
            // elements: static_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 457:17: -> ^( STATIC_START static_start )
            {
                // Objcm.g:457:20: ^( STATIC_START static_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_START, "STATIC_START")
                , root_1);

                adaptor.addChild(root_1, stream_static_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start_wrapper"


    public static class static_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start"
    // Objcm.g:459:1: static_start : STATIC_PREFIX ( CONST_PREFIX )? static_type_wrapper full_expr2 ;
    public final ObjcmParser.static_start_return static_start() throws RecognitionException {
        ObjcmParser.static_start_return retval = new ObjcmParser.static_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX245=null;
        Token CONST_PREFIX246=null;
        ObjcmParser.static_type_wrapper_return static_type_wrapper247 =null;

        ObjcmParser.full_expr2_return full_expr2248 =null;


        Object STATIC_PREFIX245_tree=null;
        Object CONST_PREFIX246_tree=null;

        try {
            // Objcm.g:460:2: ( STATIC_PREFIX ( CONST_PREFIX )? static_type_wrapper full_expr2 )
            // Objcm.g:460:4: STATIC_PREFIX ( CONST_PREFIX )? static_type_wrapper full_expr2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX245=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_start2256); 
            STATIC_PREFIX245_tree = 
            (Object)adaptor.create(STATIC_PREFIX245)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX245_tree);


            // Objcm.g:460:18: ( CONST_PREFIX )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==CONST_PREFIX) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // Objcm.g:460:18: CONST_PREFIX
                    {
                    CONST_PREFIX246=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_start2258); 
                    CONST_PREFIX246_tree = 
                    (Object)adaptor.create(CONST_PREFIX246)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX246_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_static_type_wrapper_in_static_start2261);
            static_type_wrapper247=static_type_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, static_type_wrapper247.getTree());

            pushFollow(FOLLOW_full_expr2_in_static_start2263);
            full_expr2248=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2248.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start"


    public static class static_type_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type_wrapper"
    // Objcm.g:463:1: static_type_wrapper : static_type -> ^( STATIC_TYPE static_type ) ;
    public final ObjcmParser.static_type_wrapper_return static_type_wrapper() throws RecognitionException {
        ObjcmParser.static_type_wrapper_return retval = new ObjcmParser.static_type_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_type_return static_type249 =null;


        RewriteRuleSubtreeStream stream_static_type=new RewriteRuleSubtreeStream(adaptor,"rule static_type");
        try {
            // Objcm.g:464:2: ( static_type -> ^( STATIC_TYPE static_type ) )
            // Objcm.g:464:4: static_type
            {
            pushFollow(FOLLOW_static_type_in_static_type_wrapper2275);
            static_type249=static_type();

            state._fsp--;

            stream_static_type.add(static_type249.getTree());

            // AST REWRITE
            // elements: static_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 464:16: -> ^( STATIC_TYPE static_type )
            {
                // Objcm.g:464:19: ^( STATIC_TYPE static_type )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_TYPE, "STATIC_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_static_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type_wrapper"


    public static class static_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type"
    // Objcm.g:466:1: static_type : ( object_name ( ASTERISK )* )? ;
    public final ObjcmParser.static_type_return static_type() throws RecognitionException {
        ObjcmParser.static_type_return retval = new ObjcmParser.static_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK251=null;
        ObjcmParser.object_name_return object_name250 =null;


        Object ASTERISK251_tree=null;

        try {
            // Objcm.g:467:2: ( ( object_name ( ASTERISK )* )? )
            // Objcm.g:467:4: ( object_name ( ASTERISK )* )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:467:4: ( object_name ( ASTERISK )* )?
            int alt56=2;
            alt56 = dfa56.predict(input);
            switch (alt56) {
                case 1 :
                    // Objcm.g:467:5: object_name ( ASTERISK )*
                    {
                    pushFollow(FOLLOW_object_name_in_static_type2295);
                    object_name250=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name250.getTree());

                    // Objcm.g:467:17: ( ASTERISK )*
                    loop55:
                    do {
                        int alt55=2;
                        int LA55_0 = input.LA(1);

                        if ( (LA55_0==ASTERISK) ) {
                            alt55=1;
                        }


                        switch (alt55) {
                    	case 1 :
                    	    // Objcm.g:467:17: ASTERISK
                    	    {
                    	    ASTERISK251=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_static_type2297); 
                    	    ASTERISK251_tree = 
                    	    (Object)adaptor.create(ASTERISK251)
                    	    ;
                    	    adaptor.addChild(root_0, ASTERISK251_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop55;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type"


    public static class id_part_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end"
    // Objcm.g:469:1: id_part_end : ( id_part_end_internal )+ ;
    public final ObjcmParser.id_part_end_return id_part_end() throws RecognitionException {
        ObjcmParser.id_part_end_return retval = new ObjcmParser.id_part_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_end_internal_return id_part_end_internal252 =null;



        try {
            // Objcm.g:470:2: ( ( id_part_end_internal )+ )
            // Objcm.g:470:4: ( id_part_end_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:470:4: ( id_part_end_internal )+
            int cnt57=0;
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==DOT||LA57_0==155) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // Objcm.g:470:4: id_part_end_internal
            	    {
            	    pushFollow(FOLLOW_id_part_end_internal_in_id_part_end2311);
            	    id_part_end_internal252=id_part_end_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part_end_internal252.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt57 >= 1 ) break loop57;
                        EarlyExitException eee =
                            new EarlyExitException(57, input);
                        throw eee;
                }
                cnt57++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end"


    public static class id_part_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end_internal"
    // Objcm.g:473:1: id_part_end_internal : ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) ;
    public final ObjcmParser.id_part_end_internal_return id_part_end_internal() throws RecognitionException {
        ObjcmParser.id_part_end_internal_return retval = new ObjcmParser.id_part_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT253=null;
        Token string_literal254=null;
        ObjcmParser.id_part_return id_part255 =null;


        Object DOT253_tree=null;
        Object string_literal254_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleSubtreeStream stream_id_part=new RewriteRuleSubtreeStream(adaptor,"rule id_part");
        try {
            // Objcm.g:474:2: ( ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) )
            // Objcm.g:474:4: ( DOT | '->' ) id_part
            {
            // Objcm.g:474:4: ( DOT | '->' )
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==DOT) ) {
                alt58=1;
            }
            else if ( (LA58_0==155) ) {
                alt58=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }
            switch (alt58) {
                case 1 :
                    // Objcm.g:474:5: DOT
                    {
                    DOT253=(Token)match(input,DOT,FOLLOW_DOT_in_id_part_end_internal2326);  
                    stream_DOT.add(DOT253);


                    }
                    break;
                case 2 :
                    // Objcm.g:474:11: '->'
                    {
                    string_literal254=(Token)match(input,155,FOLLOW_155_in_id_part_end_internal2330);  
                    stream_155.add(string_literal254);


                    }
                    break;

            }


            pushFollow(FOLLOW_id_part_in_id_part_end_internal2333);
            id_part255=id_part();

            state._fsp--;

            stream_id_part.add(id_part255.getTree());

            // AST REWRITE
            // elements: id_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 474:25: -> ^( FIELD_ACCESS id_part )
            {
                // Objcm.g:474:28: ^( FIELD_ACCESS id_part )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_ACCESS, "FIELD_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_id_part.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end_internal"


    public static class known_types_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_types"
    // Objcm.g:477:1: known_types : ( 'unsigned' | VOID );
    public final ObjcmParser.known_types_return known_types() throws RecognitionException {
        ObjcmParser.known_types_return retval = new ObjcmParser.known_types_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set256=null;

        Object set256_tree=null;

        try {
            // Objcm.g:478:2: ( 'unsigned' | VOID )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set256=(Token)input.LT(1);

            if ( input.LA(1)==VOID||input.LA(1)==188 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set256)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_types"


    public static class id_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part"
    // Objcm.g:482:1: id_part : name_internal ( function_brackets_wrapper )? ( index )* ;
    public final ObjcmParser.id_part_return id_part() throws RecognitionException {
        ObjcmParser.id_part_return retval = new ObjcmParser.id_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal257 =null;

        ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper258 =null;

        ObjcmParser.index_return index259 =null;



        try {
            // Objcm.g:482:9: ( name_internal ( function_brackets_wrapper )? ( index )* )
            // Objcm.g:482:12: name_internal ( function_brackets_wrapper )? ( index )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_internal_in_id_part2371);
            name_internal257=name_internal();

            state._fsp--;

            adaptor.addChild(root_0, name_internal257.getTree());

            // Objcm.g:482:26: ( function_brackets_wrapper )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==L_BR) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // Objcm.g:482:26: function_brackets_wrapper
                    {
                    pushFollow(FOLLOW_function_brackets_wrapper_in_id_part2373);
                    function_brackets_wrapper258=function_brackets_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, function_brackets_wrapper258.getTree());

                    }
                    break;

            }


            // Objcm.g:482:53: ( index )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==L_KBR) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // Objcm.g:482:53: index
            	    {
            	    pushFollow(FOLLOW_index_in_id_part2376);
            	    index259=index();

            	    state._fsp--;

            	    adaptor.addChild(root_0, index259.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part"


    public static class object_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_name"
    // Objcm.g:485:1: object_name : id_part ( id_part_end )? ;
    public final ObjcmParser.object_name_return object_name() throws RecognitionException {
        ObjcmParser.object_name_return retval = new ObjcmParser.object_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_return id_part260 =null;

        ObjcmParser.id_part_end_return id_part_end261 =null;



        try {
            // Objcm.g:486:2: ( id_part ( id_part_end )? )
            // Objcm.g:486:4: id_part ( id_part_end )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_id_part_in_object_name2389);
            id_part260=id_part();

            state._fsp--;

            adaptor.addChild(root_0, id_part260.getTree());

            // Objcm.g:486:12: ( id_part_end )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==DOT||LA61_0==155) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // Objcm.g:486:12: id_part_end
                    {
                    pushFollow(FOLLOW_id_part_end_in_object_name2391);
                    id_part_end261=id_part_end();

                    state._fsp--;

                    adaptor.addChild(root_0, id_part_end261.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_name"


    public static class method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper"
    // Objcm.g:489:1: method_call_wrapper : L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper_return method_call_wrapper() throws RecognitionException {
        ObjcmParser.method_call_wrapper_return retval = new ObjcmParser.method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR262=null;
        Token R_KBR264=null;
        ObjcmParser.method_call2_return method_call2263 =null;


        Object L_KBR262_tree=null;
        Object R_KBR264_tree=null;
        RewriteRuleTokenStream stream_R_KBR=new RewriteRuleTokenStream(adaptor,"token R_KBR");
        RewriteRuleTokenStream stream_L_KBR=new RewriteRuleTokenStream(adaptor,"token L_KBR");
        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // Objcm.g:490:2: ( L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) )
            // Objcm.g:490:4: L_KBR method_call2 R_KBR
            {
            L_KBR262=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_method_call_wrapper2405);  
            stream_L_KBR.add(L_KBR262);


            pushFollow(FOLLOW_method_call2_in_method_call_wrapper2407);
            method_call2263=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2263.getTree());

            R_KBR264=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_method_call_wrapper2409);  
            stream_R_KBR.add(R_KBR264);


            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 490:29: -> ^( METHOD_CALL method_call2 )
            {
                // Objcm.g:490:32: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper"


    public static class method_call_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper2"
    // Objcm.g:493:1: method_call_wrapper2 : method_call2 -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper2_return method_call_wrapper2() throws RecognitionException {
        ObjcmParser.method_call_wrapper2_return retval = new ObjcmParser.method_call_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call2_return method_call2265 =null;


        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // Objcm.g:494:2: ( method_call2 -> ^( METHOD_CALL method_call2 ) )
            // Objcm.g:494:4: method_call2
            {
            pushFollow(FOLLOW_method_call2_in_method_call_wrapper22432);
            method_call2265=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2265.getTree());

            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 494:17: -> ^( METHOD_CALL method_call2 )
            {
                // Objcm.g:494:20: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper2"


    public static class method_call2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call2"
    // Objcm.g:496:1: method_call2 : object_wrapper method_name ( method_call_message_list_wrapper )? ;
    public final ObjcmParser.method_call2_return method_call2() throws RecognitionException {
        ObjcmParser.method_call2_return retval = new ObjcmParser.method_call2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_return object_wrapper266 =null;

        ObjcmParser.method_name_return method_name267 =null;

        ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper268 =null;



        try {
            // Objcm.g:497:2: ( object_wrapper method_name ( method_call_message_list_wrapper )? )
            // Objcm.g:497:4: object_wrapper method_name ( method_call_message_list_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapper_in_method_call22451);
            object_wrapper266=object_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapper266.getTree());

            pushFollow(FOLLOW_method_name_in_method_call22453);
            method_name267=method_name();

            state._fsp--;

            adaptor.addChild(root_0, method_name267.getTree());

            // Objcm.g:497:31: ( method_call_message_list_wrapper )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==COLON) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // Objcm.g:497:33: method_call_message_list_wrapper
                    {
                    pushFollow(FOLLOW_method_call_message_list_wrapper_in_method_call22457);
                    method_call_message_list_wrapper268=method_call_message_list_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_message_list_wrapper268.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call2"


    public static class object_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper"
    // Objcm.g:499:1: object_wrapper : object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) ;
    public final ObjcmParser.object_wrapper_return object_wrapper() throws RecognitionException {
        ObjcmParser.object_wrapper_return retval = new ObjcmParser.object_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_internal_return object_wrapper_internal269 =null;


        RewriteRuleSubtreeStream stream_object_wrapper_internal=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapper_internal");
        try {
            // Objcm.g:500:2: ( object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) )
            // Objcm.g:500:4: object_wrapper_internal
            {
            pushFollow(FOLLOW_object_wrapper_internal_in_object_wrapper2468);
            object_wrapper_internal269=object_wrapper_internal();

            state._fsp--;

            stream_object_wrapper_internal.add(object_wrapper_internal269.getTree());

            // AST REWRITE
            // elements: object_wrapper_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 500:28: -> ^( OBJECT object_wrapper_internal )
            {
                // Objcm.g:500:31: ^( OBJECT object_wrapper_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT, "OBJECT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapper_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper"


    public static class object_wrapper_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper_internal"
    // Objcm.g:502:1: object_wrapper_internal : ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL );
    public final ObjcmParser.object_wrapper_internal_return object_wrapper_internal() throws RecognitionException {
        ObjcmParser.object_wrapper_internal_return retval = new ObjcmParser.object_wrapper_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL275=null;
        ObjcmParser.type_convertion_return type_convertion270 =null;

        ObjcmParser.object_name_return object_name271 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper272 =null;

        ObjcmParser.object_name_return object_name273 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper274 =null;


        Object STRING_LITERAL275_tree=null;

        try {
            // Objcm.g:504:2: ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL )
            int alt64=4;
            switch ( input.LA(1) ) {
            case L_BR:
                {
                alt64=1;
                }
                break;
            case ID:
            case 181:
                {
                alt64=2;
                }
                break;
            case L_KBR:
                {
                alt64=3;
                }
                break;
            case STRING_LITERAL:
                {
                alt64=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }

            switch (alt64) {
                case 1 :
                    // Objcm.g:504:4: type_convertion ( object_name | method_call_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_convertion_in_object_wrapper_internal2487);
                    type_convertion270=type_convertion();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion270.getTree());

                    // Objcm.g:504:20: ( object_name | method_call_wrapper )
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==ID||LA63_0==181) ) {
                        alt63=1;
                    }
                    else if ( (LA63_0==L_KBR) ) {
                        alt63=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 63, 0, input);

                        throw nvae;

                    }
                    switch (alt63) {
                        case 1 :
                            // Objcm.g:504:21: object_name
                            {
                            pushFollow(FOLLOW_object_name_in_object_wrapper_internal2490);
                            object_name271=object_name();

                            state._fsp--;

                            adaptor.addChild(root_0, object_name271.getTree());

                            }
                            break;
                        case 2 :
                            // Objcm.g:504:35: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2494);
                            method_call_wrapper272=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper272.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:505:4: object_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_name_in_object_wrapper_internal2500);
                    object_name273=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name273.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:506:4: method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2505);
                    method_call_wrapper274=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper274.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:507:4: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL275=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_object_wrapper_internal2510); 
                    STRING_LITERAL275_tree = 
                    (Object)adaptor.create(STRING_LITERAL275)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL275_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper_internal"


    public static class method_message3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_message3"
    // Objcm.g:510:1: method_message3 : classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) ;
    public final ObjcmParser.method_message3_return method_message3() throws RecognitionException {
        ObjcmParser.method_message3_return retval = new ObjcmParser.method_message3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp276 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:511:2: ( classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) )
            // Objcm.g:511:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_method_message32522);
            classical_expr_wrp276=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp276.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 511:23: -> ^( MESSAGE classical_expr_wrp )
            {
                // Objcm.g:511:26: ^( MESSAGE classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_message3"


    public static class type_convertion_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion"
    // Objcm.g:513:1: type_convertion : L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE_CONVERTION type_internal ( generic )? ) ;
    public final ObjcmParser.type_convertion_return type_convertion() throws RecognitionException {
        ObjcmParser.type_convertion_return retval = new ObjcmParser.type_convertion_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR277=null;
        Token string_literal278=null;
        Token string_literal279=null;
        Token ASTERISK282=null;
        Token R_BR283=null;
        ObjcmParser.type_internal_return type_internal280 =null;

        ObjcmParser.generic_return generic281 =null;


        Object L_BR277_tree=null;
        Object string_literal278_tree=null;
        Object string_literal279_tree=null;
        Object ASTERISK282_tree=null;
        Object R_BR283_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        RewriteRuleSubtreeStream stream_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_internal");
        try {
            // Objcm.g:514:2: ( L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE_CONVERTION type_internal ( generic )? ) )
            // Objcm.g:514:4: L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR
            {
            L_BR277=(Token)match(input,L_BR,FOLLOW_L_BR_in_type_convertion2541);  
            stream_L_BR.add(L_BR277);


            // Objcm.g:514:9: ( 'const' )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==CONST_PREFIX) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // Objcm.g:514:9: 'const'
                    {
                    string_literal278=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_convertion2543);  
                    stream_CONST_PREFIX.add(string_literal278);


                    }
                    break;

            }


            // Objcm.g:514:18: ( 'unsigned' )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==188) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // Objcm.g:514:18: 'unsigned'
                    {
                    string_literal279=(Token)match(input,188,FOLLOW_188_in_type_convertion2546);  
                    stream_188.add(string_literal279);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_type_convertion2549);
            type_internal280=type_internal();

            state._fsp--;

            stream_type_internal.add(type_internal280.getTree());

            // Objcm.g:514:44: ( generic )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==L_LESS) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // Objcm.g:514:44: generic
                    {
                    pushFollow(FOLLOW_generic_in_type_convertion2551);
                    generic281=generic();

                    state._fsp--;

                    stream_generic.add(generic281.getTree());

                    }
                    break;

            }


            // Objcm.g:514:53: ( ASTERISK )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==ASTERISK) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // Objcm.g:514:53: ASTERISK
            	    {
            	    ASTERISK282=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_type_convertion2554);  
            	    stream_ASTERISK.add(ASTERISK282);


            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            R_BR283=(Token)match(input,R_BR,FOLLOW_R_BR_in_type_convertion2557);  
            stream_R_BR.add(R_BR283);


            // AST REWRITE
            // elements: type_internal, generic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 514:69: -> ^( TYPE_CONVERTION type_internal ( generic )? )
            {
                // Objcm.g:514:72: ^( TYPE_CONVERTION type_internal ( generic )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CONVERTION, "TYPE_CONVERTION")
                , root_1);

                adaptor.addChild(root_1, stream_type_internal.nextTree());

                // Objcm.g:514:104: ( generic )?
                if ( stream_generic.hasNext() ) {
                    adaptor.addChild(root_1, stream_generic.nextTree());

                }
                stream_generic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // Objcm.g:516:1: method_name : ID -> ^( METHOD_NAME ID ) ;
    public final ObjcmParser.method_name_return method_name() throws RecognitionException {
        ObjcmParser.method_name_return retval = new ObjcmParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID284=null;

        Object ID284_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:517:2: ( ID -> ^( METHOD_NAME ID ) )
            // Objcm.g:517:4: ID
            {
            ID284=(Token)match(input,ID,FOLLOW_ID_in_method_name2578);  
            stream_ID.add(ID284);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 517:7: -> ^( METHOD_NAME ID )
            {
                // Objcm.g:517:10: ^( METHOD_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_call_message_list_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list_wrapper"
    // Objcm.g:519:1: method_call_message_list_wrapper : method_call_message_list -> ^( MSG_LIST method_call_message_list ) ;
    public final ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_list_wrapper_return retval = new ObjcmParser.method_call_message_list_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_list_return method_call_message_list285 =null;


        RewriteRuleSubtreeStream stream_method_call_message_list=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_list");
        try {
            // Objcm.g:520:2: ( method_call_message_list -> ^( MSG_LIST method_call_message_list ) )
            // Objcm.g:520:4: method_call_message_list
            {
            pushFollow(FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2595);
            method_call_message_list285=method_call_message_list();

            state._fsp--;

            stream_method_call_message_list.add(method_call_message_list285.getTree());

            // AST REWRITE
            // elements: method_call_message_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:29: -> ^( MSG_LIST method_call_message_list )
            {
                // Objcm.g:520:32: ^( MSG_LIST method_call_message_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MSG_LIST, "MSG_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list_wrapper"


    public static class method_call_message_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list"
    // Objcm.g:522:1: method_call_message_list : method_call_message_first_wrapper ( method_call_message_wrapper )* ;
    public final ObjcmParser.method_call_message_list_return method_call_message_list() throws RecognitionException {
        ObjcmParser.method_call_message_list_return retval = new ObjcmParser.method_call_message_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper286 =null;

        ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper287 =null;



        try {
            // Objcm.g:523:2: ( method_call_message_first_wrapper ( method_call_message_wrapper )* )
            // Objcm.g:523:4: method_call_message_first_wrapper ( method_call_message_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2612);
            method_call_message_first_wrapper286=method_call_message_first_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_call_message_first_wrapper286.getTree());

            // Objcm.g:523:38: ( method_call_message_wrapper )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==COLON||LA69_0==ID) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // Objcm.g:523:38: method_call_message_wrapper
            	    {
            	    pushFollow(FOLLOW_method_call_message_wrapper_in_method_call_message_list2614);
            	    method_call_message_wrapper287=method_call_message_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_call_message_wrapper287.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list"


    public static class method_call_message_first_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first_wrapper"
    // Objcm.g:525:1: method_call_message_first_wrapper : method_call_message_first -> ^( METHOD_MSG method_call_message_first ) ;
    public final ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_first_wrapper_return retval = new ObjcmParser.method_call_message_first_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_return method_call_message_first288 =null;


        RewriteRuleSubtreeStream stream_method_call_message_first=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_first");
        try {
            // Objcm.g:526:2: ( method_call_message_first -> ^( METHOD_MSG method_call_message_first ) )
            // Objcm.g:526:4: method_call_message_first
            {
            pushFollow(FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2625);
            method_call_message_first288=method_call_message_first();

            state._fsp--;

            stream_method_call_message_first.add(method_call_message_first288.getTree());

            // AST REWRITE
            // elements: method_call_message_first
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 526:30: -> ^( METHOD_MSG method_call_message_first )
            {
                // Objcm.g:526:33: ^( METHOD_MSG method_call_message_first )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_first.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first_wrapper"


    public static class method_call_message_first_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first"
    // Objcm.g:528:1: method_call_message_first : COLON message ;
    public final ObjcmParser.method_call_message_first_return method_call_message_first() throws RecognitionException {
        ObjcmParser.method_call_message_first_return retval = new ObjcmParser.method_call_message_first_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON289=null;
        ObjcmParser.message_return message290 =null;


        Object COLON289_tree=null;

        try {
            // Objcm.g:529:2: ( COLON message )
            // Objcm.g:529:4: COLON message
            {
            root_0 = (Object)adaptor.nil();


            COLON289=(Token)match(input,COLON,FOLLOW_COLON_in_method_call_message_first2642); 
            COLON289_tree = 
            (Object)adaptor.create(COLON289)
            ;
            adaptor.addChild(root_0, COLON289_tree);


            pushFollow(FOLLOW_message_in_method_call_message_first2645);
            message290=message();

            state._fsp--;

            adaptor.addChild(root_0, message290.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first"


    public static class method_call_message_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_wrapper"
    // Objcm.g:531:1: method_call_message_wrapper : method_call_message -> ^( METHOD_MSG method_call_message ) ;
    public final ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_wrapper_return retval = new ObjcmParser.method_call_message_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_return method_call_message291 =null;


        RewriteRuleSubtreeStream stream_method_call_message=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message");
        try {
            // Objcm.g:532:2: ( method_call_message -> ^( METHOD_MSG method_call_message ) )
            // Objcm.g:532:4: method_call_message
            {
            pushFollow(FOLLOW_method_call_message_in_method_call_message_wrapper2655);
            method_call_message291=method_call_message();

            state._fsp--;

            stream_method_call_message.add(method_call_message291.getTree());

            // AST REWRITE
            // elements: method_call_message
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 532:24: -> ^( METHOD_MSG method_call_message )
            {
                // Objcm.g:532:27: ^( METHOD_MSG method_call_message )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_wrapper"


    public static class method_call_message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message"
    // Objcm.g:534:1: method_call_message : ( prefix | incomplete_prefix ) message ;
    public final ObjcmParser.method_call_message_return method_call_message() throws RecognitionException {
        ObjcmParser.method_call_message_return retval = new ObjcmParser.method_call_message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.prefix_return prefix292 =null;

        ObjcmParser.incomplete_prefix_return incomplete_prefix293 =null;

        ObjcmParser.message_return message294 =null;



        try {
            // Objcm.g:535:2: ( ( prefix | incomplete_prefix ) message )
            // Objcm.g:535:4: ( prefix | incomplete_prefix ) message
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:535:4: ( prefix | incomplete_prefix )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==ID) ) {
                alt70=1;
            }
            else if ( (LA70_0==COLON) ) {
                alt70=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;

            }
            switch (alt70) {
                case 1 :
                    // Objcm.g:535:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_call_message2674);
                    prefix292=prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, prefix292.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:535:14: incomplete_prefix
                    {
                    pushFollow(FOLLOW_incomplete_prefix_in_method_call_message2678);
                    incomplete_prefix293=incomplete_prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, incomplete_prefix293.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_message_in_method_call_message2682);
            message294=message();

            state._fsp--;

            adaptor.addChild(root_0, message294.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message"


    public static class message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "message"
    // Objcm.g:537:1: message : msg_expr ( COMMA msg_expr )* -> ^( MESSAGE msg_expr ( COMMA msg_expr )* ) ;
    public final ObjcmParser.message_return message() throws RecognitionException {
        ObjcmParser.message_return retval = new ObjcmParser.message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA296=null;
        ObjcmParser.msg_expr_return msg_expr295 =null;

        ObjcmParser.msg_expr_return msg_expr297 =null;


        Object COMMA296_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_msg_expr=new RewriteRuleSubtreeStream(adaptor,"rule msg_expr");
        try {
            // Objcm.g:537:9: ( msg_expr ( COMMA msg_expr )* -> ^( MESSAGE msg_expr ( COMMA msg_expr )* ) )
            // Objcm.g:537:11: msg_expr ( COMMA msg_expr )*
            {
            pushFollow(FOLLOW_msg_expr_in_message2691);
            msg_expr295=msg_expr();

            state._fsp--;

            stream_msg_expr.add(msg_expr295.getTree());

            // Objcm.g:537:20: ( COMMA msg_expr )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // Objcm.g:537:21: COMMA msg_expr
            	    {
            	    COMMA296=(Token)match(input,COMMA,FOLLOW_COMMA_in_message2694);  
            	    stream_COMMA.add(COMMA296);


            	    pushFollow(FOLLOW_msg_expr_in_message2696);
            	    msg_expr297=msg_expr();

            	    state._fsp--;

            	    stream_msg_expr.add(msg_expr297.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            // AST REWRITE
            // elements: COMMA, msg_expr, msg_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 537:38: -> ^( MESSAGE msg_expr ( COMMA msg_expr )* )
            {
                // Objcm.g:537:41: ^( MESSAGE msg_expr ( COMMA msg_expr )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_msg_expr.nextTree());

                // Objcm.g:537:60: ( COMMA msg_expr )*
                while ( stream_COMMA.hasNext()||stream_msg_expr.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_COMMA.nextNode()
                    );

                    adaptor.addChild(root_1, stream_msg_expr.nextTree());

                }
                stream_COMMA.reset();
                stream_msg_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "message"


    public static class msg_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "msg_expr"
    // Objcm.g:541:1: msg_expr : classical_expr_wrp ;
    public final ObjcmParser.msg_expr_return msg_expr() throws RecognitionException {
        ObjcmParser.msg_expr_return retval = new ObjcmParser.msg_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp298 =null;



        try {
            // Objcm.g:542:2: ( classical_expr_wrp )
            // Objcm.g:542:5: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_msg_expr2730);
            classical_expr_wrp298=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp298.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "msg_expr"


    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // Objcm.g:549:1: expression : ( classical_expr_wrp | struct_init );
    public final ObjcmParser.expression_return expression() throws RecognitionException {
        ObjcmParser.expression_return retval = new ObjcmParser.expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp299 =null;

        ObjcmParser.struct_init_return struct_init300 =null;



        try {
            // Objcm.g:550:2: ( classical_expr_wrp | struct_init )
            int alt72=2;
            alt72 = dfa72.predict(input);
            switch (alt72) {
                case 1 :
                    // Objcm.g:550:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_expression2746);
                    classical_expr_wrp299=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp299.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:551:4: struct_init
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_in_expression2751);
                    struct_init300=struct_init();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init300.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class full_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr_wrapper"
    // Objcm.g:554:1: full_expr_wrapper : full_expr -> ^( EXPR_FULL full_expr ) ;
    public final ObjcmParser.full_expr_wrapper_return full_expr_wrapper() throws RecognitionException {
        ObjcmParser.full_expr_wrapper_return retval = new ObjcmParser.full_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_return full_expr301 =null;


        RewriteRuleSubtreeStream stream_full_expr=new RewriteRuleSubtreeStream(adaptor,"rule full_expr");
        try {
            // Objcm.g:555:2: ( full_expr -> ^( EXPR_FULL full_expr ) )
            // Objcm.g:555:4: full_expr
            {
            pushFollow(FOLLOW_full_expr_in_full_expr_wrapper2762);
            full_expr301=full_expr();

            state._fsp--;

            stream_full_expr.add(full_expr301.getTree());

            // AST REWRITE
            // elements: full_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 555:14: -> ^( EXPR_FULL full_expr )
            {
                // Objcm.g:555:17: ^( EXPR_FULL full_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_FULL, "EXPR_FULL")
                , root_1);

                adaptor.addChild(root_1, stream_full_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr_wrapper"


    public static class full_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr"
    // Objcm.g:557:1: full_expr : classical_expr_wrp ( COMMA classical_expr_wrp )* ;
    public final ObjcmParser.full_expr_return full_expr() throws RecognitionException {
        ObjcmParser.full_expr_return retval = new ObjcmParser.full_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA303=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp302 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp304 =null;


        Object COMMA303_tree=null;

        try {
            // Objcm.g:558:2: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )
            // Objcm.g:558:4: classical_expr_wrp ( COMMA classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_full_expr2779);
            classical_expr_wrp302=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp302.getTree());

            // Objcm.g:558:23: ( COMMA classical_expr_wrp )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // Objcm.g:558:24: COMMA classical_expr_wrp
            	    {
            	    COMMA303=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr2782); 
            	    COMMA303_tree = 
            	    (Object)adaptor.create(COMMA303)
            	    ;
            	    adaptor.addChild(root_0, COMMA303_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_full_expr2784);
            	    classical_expr_wrp304=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp304.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr"


    public static class full_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr2"
    // Objcm.g:560:1: full_expr2 : classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* ;
    public final ObjcmParser.full_expr2_return full_expr2() throws RecognitionException {
        ObjcmParser.full_expr2_return retval = new ObjcmParser.full_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA306=null;
        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2305 =null;

        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2307 =null;


        Object COMMA306_tree=null;

        try {
            // Objcm.g:561:2: ( classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* )
            // Objcm.g:561:4: classical_expr_wrp2 ( COMMA classical_expr_wrp2 )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr22795);
            classical_expr_wrp2305=classical_expr_wrp2();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp2305.getTree());

            // Objcm.g:561:24: ( COMMA classical_expr_wrp2 )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==COMMA) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // Objcm.g:561:25: COMMA classical_expr_wrp2
            	    {
            	    COMMA306=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr22798); 
            	    COMMA306_tree = 
            	    (Object)adaptor.create(COMMA306)
            	    ;
            	    adaptor.addChild(root_0, COMMA306_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr22800);
            	    classical_expr_wrp2307=classical_expr_wrp2();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp2307.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr2"


    public static class expr_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign_wrapper"
    // Objcm.g:563:1: expr_assign_wrapper : expr_assign -> ^( EXPR_ASSIGN expr_assign ) ;
    public final ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper() throws RecognitionException {
        ObjcmParser.expr_assign_wrapper_return retval = new ObjcmParser.expr_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_assign_return expr_assign308 =null;


        RewriteRuleSubtreeStream stream_expr_assign=new RewriteRuleSubtreeStream(adaptor,"rule expr_assign");
        try {
            // Objcm.g:564:2: ( expr_assign -> ^( EXPR_ASSIGN expr_assign ) )
            // Objcm.g:564:4: expr_assign
            {
            pushFollow(FOLLOW_expr_assign_in_expr_assign_wrapper2811);
            expr_assign308=expr_assign();

            state._fsp--;

            stream_expr_assign.add(expr_assign308.getTree());

            // AST REWRITE
            // elements: expr_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 564:16: -> ^( EXPR_ASSIGN expr_assign )
            {
                // Objcm.g:564:19: ^( EXPR_ASSIGN expr_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ASSIGN, "EXPR_ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_expr_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign_wrapper"


    public static class expr_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign"
    // Objcm.g:566:1: expr_assign : assign_wrapper ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) ) ;
    public final ObjcmParser.expr_assign_return expr_assign() throws RecognitionException {
        ObjcmParser.expr_assign_return retval = new ObjcmParser.expr_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_wrapper_return assign_wrapper309 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp310 =null;

        ObjcmParser.array_init_return array_init311 =null;

        ObjcmParser.func_pointer2_return func_pointer2312 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper313 =null;



        try {
            // Objcm.g:567:2: ( assign_wrapper ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) ) )
            // Objcm.g:567:4: assign_wrapper ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_assign_wrapper_in_expr_assign2830);
            assign_wrapper309=assign_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, assign_wrapper309.getTree());

            // Objcm.g:567:19: ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) )
            int alt76=3;
            alt76 = dfa76.predict(input);
            switch (alt76) {
                case 1 :
                    // Objcm.g:567:20: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_expr_assign2833);
                    classical_expr_wrp310=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp310.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:567:41: array_init
                    {
                    pushFollow(FOLLOW_array_init_in_expr_assign2837);
                    array_init311=array_init();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init311.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:567:54: ( func_pointer2 ( method_call_wrapper )? )
                    {
                    // Objcm.g:567:54: ( func_pointer2 ( method_call_wrapper )? )
                    // Objcm.g:567:55: func_pointer2 ( method_call_wrapper )?
                    {
                    pushFollow(FOLLOW_func_pointer2_in_expr_assign2842);
                    func_pointer2312=func_pointer2();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer2312.getTree());

                    // Objcm.g:567:69: ( method_call_wrapper )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==L_KBR) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // Objcm.g:567:69: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_expr_assign2844);
                            method_call_wrapper313=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper313.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // Objcm.g:569:1: array_init : L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR ;
    public final ObjcmParser.array_init_return array_init() throws RecognitionException {
        ObjcmParser.array_init_return retval = new ObjcmParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR314=null;
        Token COMMA316=null;
        Token R_FBR318=null;
        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3315 =null;

        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3317 =null;


        Object L_FBR314_tree=null;
        Object COMMA316_tree=null;
        Object R_FBR318_tree=null;

        try {
            // Objcm.g:570:2: ( L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR )
            // Objcm.g:570:4: L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR314=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array_init2857); 
            L_FBR314_tree = 
            (Object)adaptor.create(L_FBR314)
            ;
            adaptor.addChild(root_0, L_FBR314_tree);


            // Objcm.g:570:10: ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==ASTERISK||LA78_0==ID||LA78_0==L_AND||LA78_0==L_BR||(LA78_0 >= L_FBR && LA78_0 <= L_KBR)||LA78_0==L_MINUS||LA78_0==L_MINUS_MINUS||LA78_0==L_NOT||LA78_0==L_PLUS||LA78_0==L_PLUS_PLUS||LA78_0==L_TILDA||LA78_0==NUMBER||LA78_0==SIZEOF||(LA78_0 >= STRING_LITERAL && LA78_0 <= STRING_LITERAL3)||LA78_0==158||LA78_0==164||LA78_0==166||LA78_0==170||LA78_0==181||LA78_0==183||LA78_0==188) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // Objcm.g:570:11: classical_expr_wrp3 ( COMMA classical_expr_wrp3 )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init2860);
                    classical_expr_wrp3315=classical_expr_wrp3();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp3315.getTree());

                    // Objcm.g:570:31: ( COMMA classical_expr_wrp3 )*
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( (LA77_0==COMMA) ) {
                            alt77=1;
                        }


                        switch (alt77) {
                    	case 1 :
                    	    // Objcm.g:570:32: COMMA classical_expr_wrp3
                    	    {
                    	    COMMA316=(Token)match(input,COMMA,FOLLOW_COMMA_in_array_init2863); 
                    	    COMMA316_tree = 
                    	    (Object)adaptor.create(COMMA316)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA316_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init2865);
                    	    classical_expr_wrp3317=classical_expr_wrp3();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp3317.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop77;
                        }
                    } while (true);


                    }
                    break;

            }


            R_FBR318=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array_init2871); 
            R_FBR318_tree = 
            (Object)adaptor.create(R_FBR318)
            ;
            adaptor.addChild(root_0, R_FBR318_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class classical_expr_wrp3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp3"
    // Objcm.g:573:1: classical_expr_wrp3 : ( array_init | classical_expr_wrp );
    public final ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3() throws RecognitionException {
        ObjcmParser.classical_expr_wrp3_return retval = new ObjcmParser.classical_expr_wrp3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.array_init_return array_init319 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp320 =null;



        try {
            // Objcm.g:574:2: ( array_init | classical_expr_wrp )
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==L_FBR) ) {
                alt79=1;
            }
            else if ( (LA79_0==ASTERISK||LA79_0==ID||LA79_0==L_AND||LA79_0==L_BR||LA79_0==L_KBR||LA79_0==L_MINUS||LA79_0==L_MINUS_MINUS||LA79_0==L_NOT||LA79_0==L_PLUS||LA79_0==L_PLUS_PLUS||LA79_0==L_TILDA||LA79_0==NUMBER||LA79_0==SIZEOF||(LA79_0 >= STRING_LITERAL && LA79_0 <= STRING_LITERAL3)||LA79_0==158||LA79_0==164||LA79_0==166||LA79_0==170||LA79_0==181||LA79_0==183||LA79_0==188) ) {
                alt79=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }
            switch (alt79) {
                case 1 :
                    // Objcm.g:574:4: array_init
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_init_in_classical_expr_wrp32883);
                    array_init319=array_init();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init319.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:575:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_classical_expr_wrp32889);
                    classical_expr_wrp320=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp320.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp3"


    public static class classical_expr_wrp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp"
    // Objcm.g:578:1: classical_expr_wrp : classical_expr -> ^( CLASSICAL_EXPR classical_expr ) ;
    public final ObjcmParser.classical_expr_wrp_return classical_expr_wrp() throws RecognitionException {
        ObjcmParser.classical_expr_wrp_return retval = new ObjcmParser.classical_expr_wrp_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_return classical_expr321 =null;


        RewriteRuleSubtreeStream stream_classical_expr=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr");
        try {
            // Objcm.g:579:2: ( classical_expr -> ^( CLASSICAL_EXPR classical_expr ) )
            // Objcm.g:579:4: classical_expr
            {
            pushFollow(FOLLOW_classical_expr_in_classical_expr_wrp2902);
            classical_expr321=classical_expr();

            state._fsp--;

            stream_classical_expr.add(classical_expr321.getTree());

            // AST REWRITE
            // elements: classical_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 579:19: -> ^( CLASSICAL_EXPR classical_expr )
            {
                // Objcm.g:579:22: ^( CLASSICAL_EXPR classical_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR, "CLASSICAL_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp"


    public static class classical_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr"
    // Objcm.g:581:1: classical_expr : simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr_return classical_expr() throws RecognitionException {
        ObjcmParser.classical_expr_return retval = new ObjcmParser.classical_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper322 =null;

        ObjcmParser.expr_question_wrapper_return expr_question_wrapper323 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper324 =null;



        try {
            // Objcm.g:582:2: ( simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? )
            // Objcm.g:582:4: simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_simple_expr_wrapper_in_classical_expr2919);
            simple_expr_wrapper322=simple_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, simple_expr_wrapper322.getTree());

            // Objcm.g:582:24: ( expr_question_wrapper | expr_assign_wrapper )?
            int alt80=3;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==L_QUESTION) ) {
                alt80=1;
            }
            else if ( (LA80_0==L_AND_EQ||(LA80_0 >= L_DIV_EQ && LA80_0 <= L_EQ)||LA80_0==L_LEFT_EQ||LA80_0==L_MINUS_EQ||LA80_0==L_MULT_EQ||LA80_0==L_OR_EQ||LA80_0==L_PERC_EQ||LA80_0==L_PLUS_EQ||LA80_0==L_RIGHT_EQ||LA80_0==L_XOR_EQ) ) {
                alt80=2;
            }
            switch (alt80) {
                case 1 :
                    // Objcm.g:582:25: expr_question_wrapper
                    {
                    pushFollow(FOLLOW_expr_question_wrapper_in_classical_expr2922);
                    expr_question_wrapper323=expr_question_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_question_wrapper323.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:582:49: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr2926);
                    expr_assign_wrapper324=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper324.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr"


    public static class classical_expr_wrp2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp2"
    // Objcm.g:584:1: classical_expr_wrp2 : classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) ;
    public final ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2() throws RecognitionException {
        ObjcmParser.classical_expr_wrp2_return retval = new ObjcmParser.classical_expr_wrp2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr2_return classical_expr2325 =null;


        RewriteRuleSubtreeStream stream_classical_expr2=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr2");
        try {
            // Objcm.g:585:2: ( classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) )
            // Objcm.g:585:4: classical_expr2
            {
            pushFollow(FOLLOW_classical_expr2_in_classical_expr_wrp22938);
            classical_expr2325=classical_expr2();

            state._fsp--;

            stream_classical_expr2.add(classical_expr2325.getTree());

            // AST REWRITE
            // elements: classical_expr2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 585:20: -> ^( CLASSICAL_EXPR_2 classical_expr2 )
            {
                // Objcm.g:585:23: ^( CLASSICAL_EXPR_2 classical_expr2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR_2, "CLASSICAL_EXPR_2")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp2"


    public static class classical_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr2"
    // Objcm.g:587:1: classical_expr2 : ( object_name | func_pointer1 ) ( expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr2_return classical_expr2() throws RecognitionException {
        ObjcmParser.classical_expr2_return retval = new ObjcmParser.classical_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_name_return object_name326 =null;

        ObjcmParser.func_pointer1_return func_pointer1327 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper328 =null;



        try {
            // Objcm.g:588:2: ( ( object_name | func_pointer1 ) ( expr_assign_wrapper )? )
            // Objcm.g:588:4: ( object_name | func_pointer1 ) ( expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:588:4: ( object_name | func_pointer1 )
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    // Objcm.g:588:5: object_name
                    {
                    pushFollow(FOLLOW_object_name_in_classical_expr22956);
                    object_name326=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name326.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:588:19: func_pointer1
                    {
                    pushFollow(FOLLOW_func_pointer1_in_classical_expr22960);
                    func_pointer1327=func_pointer1();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer1327.getTree());

                    }
                    break;

            }


            // Objcm.g:588:34: ( expr_assign_wrapper )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==L_AND_EQ||(LA82_0 >= L_DIV_EQ && LA82_0 <= L_EQ)||LA82_0==L_LEFT_EQ||LA82_0==L_MINUS_EQ||LA82_0==L_MULT_EQ||LA82_0==L_OR_EQ||LA82_0==L_PERC_EQ||LA82_0==L_PLUS_EQ||LA82_0==L_RIGHT_EQ||LA82_0==L_XOR_EQ) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // Objcm.g:588:34: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr22963);
                    expr_assign_wrapper328=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper328.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr2"


    public static class expr_question_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question_wrapper"
    // Objcm.g:590:1: expr_question_wrapper : expr_question -> ^( EXPR_QUESTION expr_question ) ;
    public final ObjcmParser.expr_question_wrapper_return expr_question_wrapper() throws RecognitionException {
        ObjcmParser.expr_question_wrapper_return retval = new ObjcmParser.expr_question_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_question_return expr_question329 =null;


        RewriteRuleSubtreeStream stream_expr_question=new RewriteRuleSubtreeStream(adaptor,"rule expr_question");
        try {
            // Objcm.g:591:2: ( expr_question -> ^( EXPR_QUESTION expr_question ) )
            // Objcm.g:591:4: expr_question
            {
            pushFollow(FOLLOW_expr_question_in_expr_question_wrapper2973);
            expr_question329=expr_question();

            state._fsp--;

            stream_expr_question.add(expr_question329.getTree());

            // AST REWRITE
            // elements: expr_question
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 591:18: -> ^( EXPR_QUESTION expr_question )
            {
                // Objcm.g:591:21: ^( EXPR_QUESTION expr_question )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_QUESTION, "EXPR_QUESTION")
                , root_1);

                adaptor.addChild(root_1, stream_expr_question.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question_wrapper"


    public static class expr_question_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question"
    // Objcm.g:593:1: expr_question : L_QUESTION classical_expr_wrp COLON classical_expr_wrp ;
    public final ObjcmParser.expr_question_return expr_question() throws RecognitionException {
        ObjcmParser.expr_question_return retval = new ObjcmParser.expr_question_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_QUESTION330=null;
        Token COLON332=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp331 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp333 =null;


        Object L_QUESTION330_tree=null;
        Object COLON332_tree=null;

        try {
            // Objcm.g:594:2: ( L_QUESTION classical_expr_wrp COLON classical_expr_wrp )
            // Objcm.g:594:4: L_QUESTION classical_expr_wrp COLON classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            L_QUESTION330=(Token)match(input,L_QUESTION,FOLLOW_L_QUESTION_in_expr_question2990); 
            L_QUESTION330_tree = 
            (Object)adaptor.create(L_QUESTION330)
            ;
            adaptor.addChild(root_0, L_QUESTION330_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question2992);
            classical_expr_wrp331=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp331.getTree());

            COLON332=(Token)match(input,COLON,FOLLOW_COLON_in_expr_question2994); 
            COLON332_tree = 
            (Object)adaptor.create(COLON332)
            ;
            adaptor.addChild(root_0, COLON332_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question2996);
            classical_expr_wrp333=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp333.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question"


    public static class assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign_wrapper"
    // Objcm.g:596:1: assign_wrapper : assign -> ^( ASSIGN assign ) ;
    public final ObjcmParser.assign_wrapper_return assign_wrapper() throws RecognitionException {
        ObjcmParser.assign_wrapper_return retval = new ObjcmParser.assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_return assign334 =null;


        RewriteRuleSubtreeStream stream_assign=new RewriteRuleSubtreeStream(adaptor,"rule assign");
        try {
            // Objcm.g:597:2: ( assign -> ^( ASSIGN assign ) )
            // Objcm.g:597:4: assign
            {
            pushFollow(FOLLOW_assign_in_assign_wrapper3005);
            assign334=assign();

            state._fsp--;

            stream_assign.add(assign334.getTree());

            // AST REWRITE
            // elements: assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 597:11: -> ^( ASSIGN assign )
            {
                // Objcm.g:597:14: ^( ASSIGN assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ASSIGN, "ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign_wrapper"


    public static class assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign"
    // Objcm.g:599:1: assign : ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ );
    public final ObjcmParser.assign_return assign() throws RecognitionException {
        ObjcmParser.assign_return retval = new ObjcmParser.assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set335=null;

        Object set335_tree=null;

        try {
            // Objcm.g:600:2: ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set335=(Token)input.LT(1);

            if ( input.LA(1)==L_AND_EQ||(input.LA(1) >= L_DIV_EQ && input.LA(1) <= L_EQ)||input.LA(1)==L_LEFT_EQ||input.LA(1)==L_MINUS_EQ||input.LA(1)==L_MULT_EQ||input.LA(1)==L_OR_EQ||input.LA(1)==L_PERC_EQ||input.LA(1)==L_PLUS_EQ||input.LA(1)==L_RIGHT_EQ||input.LA(1)==L_XOR_EQ ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set335)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign"


    public static class simple_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr_wrapper"
    // Objcm.g:604:1: simple_expr_wrapper : simple_expr -> ^( SIMPLE_EXPR simple_expr ) ;
    public final ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper() throws RecognitionException {
        ObjcmParser.simple_expr_wrapper_return retval = new ObjcmParser.simple_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_return simple_expr336 =null;


        RewriteRuleSubtreeStream stream_simple_expr=new RewriteRuleSubtreeStream(adaptor,"rule simple_expr");
        try {
            // Objcm.g:605:2: ( simple_expr -> ^( SIMPLE_EXPR simple_expr ) )
            // Objcm.g:605:4: simple_expr
            {
            pushFollow(FOLLOW_simple_expr_in_simple_expr_wrapper3078);
            simple_expr336=simple_expr();

            state._fsp--;

            stream_simple_expr.add(simple_expr336.getTree());

            // AST REWRITE
            // elements: simple_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 605:16: -> ^( SIMPLE_EXPR simple_expr )
            {
                // Objcm.g:605:19: ^( SIMPLE_EXPR simple_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SIMPLE_EXPR, "SIMPLE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr_wrapper"


    public static class simple_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr"
    // Objcm.g:607:1: simple_expr : expr_or_or -> ^( EXPR_OR_OR expr_or_or ) ;
    public final ObjcmParser.simple_expr_return simple_expr() throws RecognitionException {
        ObjcmParser.simple_expr_return retval = new ObjcmParser.simple_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_or_return expr_or_or337 =null;


        RewriteRuleSubtreeStream stream_expr_or_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or_or");
        try {
            // Objcm.g:608:2: ( expr_or_or -> ^( EXPR_OR_OR expr_or_or ) )
            // Objcm.g:608:4: expr_or_or
            {
            pushFollow(FOLLOW_expr_or_or_in_simple_expr3096);
            expr_or_or337=expr_or_or();

            state._fsp--;

            stream_expr_or_or.add(expr_or_or337.getTree());

            // AST REWRITE
            // elements: expr_or_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 608:15: -> ^( EXPR_OR_OR expr_or_or )
            {
                // Objcm.g:608:18: ^( EXPR_OR_OR expr_or_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR_OR, "EXPR_OR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr"


    public static class expr_or_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_or"
    // Objcm.g:610:1: expr_or_or : expr_and_and_wrapper ( L_OR_OR classical_expr_wrp )* ;
    public final ObjcmParser.expr_or_or_return expr_or_or() throws RecognitionException {
        ObjcmParser.expr_or_or_return retval = new ObjcmParser.expr_or_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR_OR339=null;
        ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper338 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp340 =null;


        Object L_OR_OR339_tree=null;

        try {
            // Objcm.g:611:2: ( expr_and_and_wrapper ( L_OR_OR classical_expr_wrp )* )
            // Objcm.g:611:4: expr_and_and_wrapper ( L_OR_OR classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_and_wrapper_in_expr_or_or3113);
            expr_and_and_wrapper338=expr_and_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_and_wrapper338.getTree());

            // Objcm.g:611:25: ( L_OR_OR classical_expr_wrp )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==L_OR_OR) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // Objcm.g:611:26: L_OR_OR classical_expr_wrp
            	    {
            	    L_OR_OR339=(Token)match(input,L_OR_OR,FOLLOW_L_OR_OR_in_expr_or_or3116); 
            	    L_OR_OR339_tree = 
            	    (Object)adaptor.create(L_OR_OR339)
            	    ;
            	    adaptor.addChild(root_0, L_OR_OR339_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_or_or3118);
            	    classical_expr_wrp340=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp340.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_or"


    public static class expr_and_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and_wrapper"
    // Objcm.g:613:1: expr_and_and_wrapper : expr_and_and -> ^( EXPR_AND_AND expr_and_and ) ;
    public final ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_and_wrapper_return retval = new ObjcmParser.expr_and_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_and_return expr_and_and341 =null;


        RewriteRuleSubtreeStream stream_expr_and_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and_and");
        try {
            // Objcm.g:614:2: ( expr_and_and -> ^( EXPR_AND_AND expr_and_and ) )
            // Objcm.g:614:4: expr_and_and
            {
            pushFollow(FOLLOW_expr_and_and_in_expr_and_and_wrapper3129);
            expr_and_and341=expr_and_and();

            state._fsp--;

            stream_expr_and_and.add(expr_and_and341.getTree());

            // AST REWRITE
            // elements: expr_and_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 614:17: -> ^( EXPR_AND_AND expr_and_and )
            {
                // Objcm.g:614:20: ^( EXPR_AND_AND expr_and_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND_AND, "EXPR_AND_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and_wrapper"


    public static class expr_and_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and"
    // Objcm.g:616:1: expr_and_and : expr_or_wrapper ( L_AND_AND classical_expr_wrp )* ;
    public final ObjcmParser.expr_and_and_return expr_and_and() throws RecognitionException {
        ObjcmParser.expr_and_and_return retval = new ObjcmParser.expr_and_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND_AND343=null;
        ObjcmParser.expr_or_wrapper_return expr_or_wrapper342 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp344 =null;


        Object L_AND_AND343_tree=null;

        try {
            // Objcm.g:617:2: ( expr_or_wrapper ( L_AND_AND classical_expr_wrp )* )
            // Objcm.g:617:4: expr_or_wrapper ( L_AND_AND classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_or_wrapper_in_expr_and_and3146);
            expr_or_wrapper342=expr_or_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_or_wrapper342.getTree());

            // Objcm.g:617:20: ( L_AND_AND classical_expr_wrp )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==L_AND_AND) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // Objcm.g:617:21: L_AND_AND classical_expr_wrp
            	    {
            	    L_AND_AND343=(Token)match(input,L_AND_AND,FOLLOW_L_AND_AND_in_expr_and_and3149); 
            	    L_AND_AND343_tree = 
            	    (Object)adaptor.create(L_AND_AND343)
            	    ;
            	    adaptor.addChild(root_0, L_AND_AND343_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_and_and3151);
            	    classical_expr_wrp344=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp344.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and"


    public static class expr_or_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_wrapper"
    // Objcm.g:619:1: expr_or_wrapper : expr_or -> ^( EXPR_OR expr_or ) ;
    public final ObjcmParser.expr_or_wrapper_return expr_or_wrapper() throws RecognitionException {
        ObjcmParser.expr_or_wrapper_return retval = new ObjcmParser.expr_or_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_return expr_or345 =null;


        RewriteRuleSubtreeStream stream_expr_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or");
        try {
            // Objcm.g:620:2: ( expr_or -> ^( EXPR_OR expr_or ) )
            // Objcm.g:620:4: expr_or
            {
            pushFollow(FOLLOW_expr_or_in_expr_or_wrapper3162);
            expr_or345=expr_or();

            state._fsp--;

            stream_expr_or.add(expr_or345.getTree());

            // AST REWRITE
            // elements: expr_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 620:12: -> ^( EXPR_OR expr_or )
            {
                // Objcm.g:620:15: ^( EXPR_OR expr_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR, "EXPR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_wrapper"


    public static class expr_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or"
    // Objcm.g:622:1: expr_or : expr_xor_wrapper ( L_OR classical_expr_wrp )* ;
    public final ObjcmParser.expr_or_return expr_or() throws RecognitionException {
        ObjcmParser.expr_or_return retval = new ObjcmParser.expr_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR347=null;
        ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper346 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp348 =null;


        Object L_OR347_tree=null;

        try {
            // Objcm.g:623:2: ( expr_xor_wrapper ( L_OR classical_expr_wrp )* )
            // Objcm.g:623:4: expr_xor_wrapper ( L_OR classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_xor_wrapper_in_expr_or3180);
            expr_xor_wrapper346=expr_xor_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_xor_wrapper346.getTree());

            // Objcm.g:623:21: ( L_OR classical_expr_wrp )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==L_OR) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // Objcm.g:623:22: L_OR classical_expr_wrp
            	    {
            	    L_OR347=(Token)match(input,L_OR,FOLLOW_L_OR_in_expr_or3183); 
            	    L_OR347_tree = 
            	    (Object)adaptor.create(L_OR347)
            	    ;
            	    adaptor.addChild(root_0, L_OR347_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_or3185);
            	    classical_expr_wrp348=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp348.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or"


    public static class expr_xor_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor_wrapper"
    // Objcm.g:625:1: expr_xor_wrapper : expr_xor -> ^( EXPR_XOR expr_xor ) ;
    public final ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper() throws RecognitionException {
        ObjcmParser.expr_xor_wrapper_return retval = new ObjcmParser.expr_xor_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_xor_return expr_xor349 =null;


        RewriteRuleSubtreeStream stream_expr_xor=new RewriteRuleSubtreeStream(adaptor,"rule expr_xor");
        try {
            // Objcm.g:626:2: ( expr_xor -> ^( EXPR_XOR expr_xor ) )
            // Objcm.g:626:4: expr_xor
            {
            pushFollow(FOLLOW_expr_xor_in_expr_xor_wrapper3196);
            expr_xor349=expr_xor();

            state._fsp--;

            stream_expr_xor.add(expr_xor349.getTree());

            // AST REWRITE
            // elements: expr_xor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 626:13: -> ^( EXPR_XOR expr_xor )
            {
                // Objcm.g:626:16: ^( EXPR_XOR expr_xor )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_XOR, "EXPR_XOR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_xor.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor_wrapper"


    public static class expr_xor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor"
    // Objcm.g:628:1: expr_xor : expr_and_wrapper ( L_XOR classical_expr_wrp )* ;
    public final ObjcmParser.expr_xor_return expr_xor() throws RecognitionException {
        ObjcmParser.expr_xor_return retval = new ObjcmParser.expr_xor_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_XOR351=null;
        ObjcmParser.expr_and_wrapper_return expr_and_wrapper350 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp352 =null;


        Object L_XOR351_tree=null;

        try {
            // Objcm.g:629:2: ( expr_and_wrapper ( L_XOR classical_expr_wrp )* )
            // Objcm.g:629:4: expr_and_wrapper ( L_XOR classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_wrapper_in_expr_xor3213);
            expr_and_wrapper350=expr_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_wrapper350.getTree());

            // Objcm.g:629:21: ( L_XOR classical_expr_wrp )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==L_XOR) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // Objcm.g:629:22: L_XOR classical_expr_wrp
            	    {
            	    L_XOR351=(Token)match(input,L_XOR,FOLLOW_L_XOR_in_expr_xor3216); 
            	    L_XOR351_tree = 
            	    (Object)adaptor.create(L_XOR351)
            	    ;
            	    adaptor.addChild(root_0, L_XOR351_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_xor3218);
            	    classical_expr_wrp352=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp352.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor"


    public static class expr_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_wrapper"
    // Objcm.g:631:1: expr_and_wrapper : expr_and -> ^( EXPR_AND expr_and ) ;
    public final ObjcmParser.expr_and_wrapper_return expr_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_wrapper_return retval = new ObjcmParser.expr_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_return expr_and353 =null;


        RewriteRuleSubtreeStream stream_expr_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and");
        try {
            // Objcm.g:632:2: ( expr_and -> ^( EXPR_AND expr_and ) )
            // Objcm.g:632:4: expr_and
            {
            pushFollow(FOLLOW_expr_and_in_expr_and_wrapper3230);
            expr_and353=expr_and();

            state._fsp--;

            stream_expr_and.add(expr_and353.getTree());

            // AST REWRITE
            // elements: expr_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 632:13: -> ^( EXPR_AND expr_and )
            {
                // Objcm.g:632:16: ^( EXPR_AND expr_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND, "EXPR_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_wrapper"


    public static class expr_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and"
    // Objcm.g:634:1: expr_and : expr_eq_wrapper ( L_AND classical_expr_wrp )* ;
    public final ObjcmParser.expr_and_return expr_and() throws RecognitionException {
        ObjcmParser.expr_and_return retval = new ObjcmParser.expr_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND355=null;
        ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper354 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp356 =null;


        Object L_AND355_tree=null;

        try {
            // Objcm.g:635:2: ( expr_eq_wrapper ( L_AND classical_expr_wrp )* )
            // Objcm.g:635:4: expr_eq_wrapper ( L_AND classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_eq_wrapper_in_expr_and3248);
            expr_eq_wrapper354=expr_eq_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_eq_wrapper354.getTree());

            // Objcm.g:635:20: ( L_AND classical_expr_wrp )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==L_AND) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // Objcm.g:635:21: L_AND classical_expr_wrp
            	    {
            	    L_AND355=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_and3251); 
            	    L_AND355_tree = 
            	    (Object)adaptor.create(L_AND355)
            	    ;
            	    adaptor.addChild(root_0, L_AND355_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_and3253);
            	    classical_expr_wrp356=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp356.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and"


    public static class expr_eq_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq_wrapper"
    // Objcm.g:637:1: expr_eq_wrapper : expr_eq -> ^( EXPR_EQ expr_eq ) ;
    public final ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper() throws RecognitionException {
        ObjcmParser.expr_eq_wrapper_return retval = new ObjcmParser.expr_eq_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_eq_return expr_eq357 =null;


        RewriteRuleSubtreeStream stream_expr_eq=new RewriteRuleSubtreeStream(adaptor,"rule expr_eq");
        try {
            // Objcm.g:638:2: ( expr_eq -> ^( EXPR_EQ expr_eq ) )
            // Objcm.g:638:4: expr_eq
            {
            pushFollow(FOLLOW_expr_eq_in_expr_eq_wrapper3265);
            expr_eq357=expr_eq();

            state._fsp--;

            stream_expr_eq.add(expr_eq357.getTree());

            // AST REWRITE
            // elements: expr_eq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 638:12: -> ^( EXPR_EQ expr_eq )
            {
                // Objcm.g:638:15: ^( EXPR_EQ expr_eq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_EQ, "EXPR_EQ")
                , root_1);

                adaptor.addChild(root_1, stream_expr_eq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq_wrapper"


    public static class expr_eq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq"
    // Objcm.g:640:1: expr_eq : expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_eq_return expr_eq() throws RecognitionException {
        ObjcmParser.expr_eq_return retval = new ObjcmParser.expr_eq_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set359=null;
        ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper358 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp360 =null;


        Object set359_tree=null;

        try {
            // Objcm.g:641:2: ( expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) classical_expr_wrp )* )
            // Objcm.g:641:4: expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_cond_wrapper_in_expr_eq3283);
            expr_cond_wrapper358=expr_cond_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_cond_wrapper358.getTree());

            // Objcm.g:641:22: ( ( L_EQ_EQ | L_NEQ ) classical_expr_wrp )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==L_EQ_EQ||LA88_0==L_NEQ) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // Objcm.g:641:23: ( L_EQ_EQ | L_NEQ ) classical_expr_wrp
            	    {
            	    set359=(Token)input.LT(1);

            	    if ( input.LA(1)==L_EQ_EQ||input.LA(1)==L_NEQ ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set359)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_eq3294);
            	    classical_expr_wrp360=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp360.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq"


    public static class expr_cond_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond_wrapper"
    // Objcm.g:643:1: expr_cond_wrapper : expr_cond -> ^( EXPR_COND expr_cond ) ;
    public final ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper() throws RecognitionException {
        ObjcmParser.expr_cond_wrapper_return retval = new ObjcmParser.expr_cond_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_cond_return expr_cond361 =null;


        RewriteRuleSubtreeStream stream_expr_cond=new RewriteRuleSubtreeStream(adaptor,"rule expr_cond");
        try {
            // Objcm.g:644:2: ( expr_cond -> ^( EXPR_COND expr_cond ) )
            // Objcm.g:644:4: expr_cond
            {
            pushFollow(FOLLOW_expr_cond_in_expr_cond_wrapper3305);
            expr_cond361=expr_cond();

            state._fsp--;

            stream_expr_cond.add(expr_cond361.getTree());

            // AST REWRITE
            // elements: expr_cond
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 644:14: -> ^( EXPR_COND expr_cond )
            {
                // Objcm.g:644:17: ^( EXPR_COND expr_cond )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_COND, "EXPR_COND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_cond.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond_wrapper"


    public static class expr_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond"
    // Objcm.g:646:1: expr_cond : expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_cond_return expr_cond() throws RecognitionException {
        ObjcmParser.expr_cond_return retval = new ObjcmParser.expr_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set363=null;
        ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper362 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp364 =null;


        Object set363_tree=null;

        try {
            // Objcm.g:647:2: ( expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp )* )
            // Objcm.g:647:4: expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mov_wrapper_in_expr_cond3322);
            expr_mov_wrapper362=expr_mov_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mov_wrapper362.getTree());

            // Objcm.g:647:21: ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( ((LA89_0 >= L_LESS && LA89_0 <= L_LESS_EQ)||(LA89_0 >= L_MORE && LA89_0 <= L_MORE_EQ)) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // Objcm.g:647:22: ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp
            	    {
            	    set363=(Token)input.LT(1);

            	    if ( (input.LA(1) >= L_LESS && input.LA(1) <= L_LESS_EQ)||(input.LA(1) >= L_MORE && input.LA(1) <= L_MORE_EQ) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set363)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_cond3341);
            	    classical_expr_wrp364=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp364.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond"


    public static class expr_mov_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov_wrapper"
    // Objcm.g:649:1: expr_mov_wrapper : expr_mov -> ^( EXPR_MOV expr_mov ) ;
    public final ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper() throws RecognitionException {
        ObjcmParser.expr_mov_wrapper_return retval = new ObjcmParser.expr_mov_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mov_return expr_mov365 =null;


        RewriteRuleSubtreeStream stream_expr_mov=new RewriteRuleSubtreeStream(adaptor,"rule expr_mov");
        try {
            // Objcm.g:650:2: ( expr_mov -> ^( EXPR_MOV expr_mov ) )
            // Objcm.g:650:4: expr_mov
            {
            pushFollow(FOLLOW_expr_mov_in_expr_mov_wrapper3352);
            expr_mov365=expr_mov();

            state._fsp--;

            stream_expr_mov.add(expr_mov365.getTree());

            // AST REWRITE
            // elements: expr_mov
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 650:13: -> ^( EXPR_MOV expr_mov )
            {
                // Objcm.g:650:16: ^( EXPR_MOV expr_mov )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MOV, "EXPR_MOV")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mov.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov_wrapper"


    public static class expr_mov_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov"
    // Objcm.g:652:1: expr_mov : expr_add_wrapper ( ( L_LEFT | L_RIGHT ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_mov_return expr_mov() throws RecognitionException {
        ObjcmParser.expr_mov_return retval = new ObjcmParser.expr_mov_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set367=null;
        ObjcmParser.expr_add_wrapper_return expr_add_wrapper366 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp368 =null;


        Object set367_tree=null;

        try {
            // Objcm.g:653:2: ( expr_add_wrapper ( ( L_LEFT | L_RIGHT ) classical_expr_wrp )* )
            // Objcm.g:653:4: expr_add_wrapper ( ( L_LEFT | L_RIGHT ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_add_wrapper_in_expr_mov3370);
            expr_add_wrapper366=expr_add_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_add_wrapper366.getTree());

            // Objcm.g:653:21: ( ( L_LEFT | L_RIGHT ) classical_expr_wrp )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==L_LEFT||LA90_0==L_RIGHT) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // Objcm.g:653:22: ( L_LEFT | L_RIGHT ) classical_expr_wrp
            	    {
            	    set367=(Token)input.LT(1);

            	    if ( input.LA(1)==L_LEFT||input.LA(1)==L_RIGHT ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set367)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_mov3381);
            	    classical_expr_wrp368=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp368.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov"


    public static class expr_add_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add_wrapper"
    // Objcm.g:655:1: expr_add_wrapper : expr_add -> ^( EXPR_ADD expr_add ) ;
    public final ObjcmParser.expr_add_wrapper_return expr_add_wrapper() throws RecognitionException {
        ObjcmParser.expr_add_wrapper_return retval = new ObjcmParser.expr_add_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_add_return expr_add369 =null;


        RewriteRuleSubtreeStream stream_expr_add=new RewriteRuleSubtreeStream(adaptor,"rule expr_add");
        try {
            // Objcm.g:656:2: ( expr_add -> ^( EXPR_ADD expr_add ) )
            // Objcm.g:656:4: expr_add
            {
            pushFollow(FOLLOW_expr_add_in_expr_add_wrapper3393);
            expr_add369=expr_add();

            state._fsp--;

            stream_expr_add.add(expr_add369.getTree());

            // AST REWRITE
            // elements: expr_add
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 656:13: -> ^( EXPR_ADD expr_add )
            {
                // Objcm.g:656:16: ^( EXPR_ADD expr_add )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ADD, "EXPR_ADD")
                , root_1);

                adaptor.addChild(root_1, stream_expr_add.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add_wrapper"


    public static class expr_add_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add"
    // Objcm.g:658:1: expr_add : expr_mult_wrapper ( ( L_PLUS | L_MINUS ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_add_return expr_add() throws RecognitionException {
        ObjcmParser.expr_add_return retval = new ObjcmParser.expr_add_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set371=null;
        ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper370 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp372 =null;


        Object set371_tree=null;

        try {
            // Objcm.g:659:2: ( expr_mult_wrapper ( ( L_PLUS | L_MINUS ) classical_expr_wrp )* )
            // Objcm.g:659:4: expr_mult_wrapper ( ( L_PLUS | L_MINUS ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mult_wrapper_in_expr_add3410);
            expr_mult_wrapper370=expr_mult_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mult_wrapper370.getTree());

            // Objcm.g:659:22: ( ( L_PLUS | L_MINUS ) classical_expr_wrp )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==L_MINUS||LA91_0==L_PLUS) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // Objcm.g:659:23: ( L_PLUS | L_MINUS ) classical_expr_wrp
            	    {
            	    set371=(Token)input.LT(1);

            	    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set371)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_add3421);
            	    classical_expr_wrp372=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp372.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add"


    public static class expr_mult_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult_wrapper"
    // Objcm.g:661:1: expr_mult_wrapper : expr_mult -> ^( EXPR_MULT expr_mult ) ;
    public final ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper() throws RecognitionException {
        ObjcmParser.expr_mult_wrapper_return retval = new ObjcmParser.expr_mult_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mult_return expr_mult373 =null;


        RewriteRuleSubtreeStream stream_expr_mult=new RewriteRuleSubtreeStream(adaptor,"rule expr_mult");
        try {
            // Objcm.g:662:2: ( expr_mult -> ^( EXPR_MULT expr_mult ) )
            // Objcm.g:662:4: expr_mult
            {
            pushFollow(FOLLOW_expr_mult_in_expr_mult_wrapper3432);
            expr_mult373=expr_mult();

            state._fsp--;

            stream_expr_mult.add(expr_mult373.getTree());

            // AST REWRITE
            // elements: expr_mult
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 662:14: -> ^( EXPR_MULT expr_mult )
            {
                // Objcm.g:662:17: ^( EXPR_MULT expr_mult )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MULT, "EXPR_MULT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mult.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult_wrapper"


    public static class expr_mult_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult"
    // Objcm.g:664:1: expr_mult : expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_mult_return expr_mult() throws RecognitionException {
        ObjcmParser.expr_mult_return retval = new ObjcmParser.expr_mult_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set375=null;
        ObjcmParser.expr_type_wrapper_return expr_type_wrapper374 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp376 =null;


        Object set375_tree=null;

        try {
            // Objcm.g:665:2: ( expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp )* )
            // Objcm.g:665:4: expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_type_wrapper_in_expr_mult3449);
            expr_type_wrapper374=expr_type_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_type_wrapper374.getTree());

            // Objcm.g:665:22: ( ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==ASTERISK||LA92_0==L_DIV||LA92_0==L_PERC) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // Objcm.g:665:23: ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp
            	    {
            	    set375=(Token)input.LT(1);

            	    if ( input.LA(1)==ASTERISK||input.LA(1)==L_DIV||input.LA(1)==L_PERC ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set375)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_mult3464);
            	    classical_expr_wrp376=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp376.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult"


    public static class expr_type_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_type_wrapper"
    // Objcm.g:667:1: expr_type_wrapper : expr_type -> ^( EXPR_TYPE expr_type ) ;
    public final ObjcmParser.expr_type_wrapper_return expr_type_wrapper() throws RecognitionException {
        ObjcmParser.expr_type_wrapper_return retval = new ObjcmParser.expr_type_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_type_return expr_type377 =null;


        RewriteRuleSubtreeStream stream_expr_type=new RewriteRuleSubtreeStream(adaptor,"rule expr_type");
        try {
            // Objcm.g:668:2: ( expr_type -> ^( EXPR_TYPE expr_type ) )
            // Objcm.g:668:4: expr_type
            {
            pushFollow(FOLLOW_expr_type_in_expr_type_wrapper3476);
            expr_type377=expr_type();

            state._fsp--;

            stream_expr_type.add(expr_type377.getTree());

            // AST REWRITE
            // elements: expr_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 668:14: -> ^( EXPR_TYPE expr_type )
            {
                // Objcm.g:668:17: ^( EXPR_TYPE expr_type )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_TYPE, "EXPR_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_expr_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_type_wrapper"


    public static class expr_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_type"
    // Objcm.g:670:1: expr_type : ( type_convertion )? expr_unname ;
    public final ObjcmParser.expr_type_return expr_type() throws RecognitionException {
        ObjcmParser.expr_type_return retval = new ObjcmParser.expr_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_convertion_return type_convertion378 =null;

        ObjcmParser.expr_unname_return expr_unname379 =null;



        try {
            // Objcm.g:671:2: ( ( type_convertion )? expr_unname )
            // Objcm.g:671:4: ( type_convertion )? expr_unname
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:671:4: ( type_convertion )?
            int alt93=2;
            alt93 = dfa93.predict(input);
            switch (alt93) {
                case 1 :
                    // Objcm.g:671:4: type_convertion
                    {
                    pushFollow(FOLLOW_type_convertion_in_expr_type3493);
                    type_convertion378=type_convertion();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion378.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_expr_unname_in_expr_type3496);
            expr_unname379=expr_unname();

            state._fsp--;

            adaptor.addChild(root_0, expr_unname379.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_type"


    public static class expr_unname_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_unname"
    // Objcm.g:673:1: expr_unname : ( ASTERISK ( type_convertion )? )? expr_addr ;
    public final ObjcmParser.expr_unname_return expr_unname() throws RecognitionException {
        ObjcmParser.expr_unname_return retval = new ObjcmParser.expr_unname_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK380=null;
        ObjcmParser.type_convertion_return type_convertion381 =null;

        ObjcmParser.expr_addr_return expr_addr382 =null;


        Object ASTERISK380_tree=null;

        try {
            // Objcm.g:674:2: ( ( ASTERISK ( type_convertion )? )? expr_addr )
            // Objcm.g:674:4: ( ASTERISK ( type_convertion )? )? expr_addr
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:674:4: ( ASTERISK ( type_convertion )? )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==ASTERISK) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // Objcm.g:674:5: ASTERISK ( type_convertion )?
                    {
                    ASTERISK380=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_expr_unname3507); 
                    ASTERISK380_tree = 
                    (Object)adaptor.create(ASTERISK380)
                    ;
                    adaptor.addChild(root_0, ASTERISK380_tree);


                    // Objcm.g:674:14: ( type_convertion )?
                    int alt94=2;
                    alt94 = dfa94.predict(input);
                    switch (alt94) {
                        case 1 :
                            // Objcm.g:674:14: type_convertion
                            {
                            pushFollow(FOLLOW_type_convertion_in_expr_unname3509);
                            type_convertion381=type_convertion();

                            state._fsp--;

                            adaptor.addChild(root_0, type_convertion381.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_addr_in_expr_unname3514);
            expr_addr382=expr_addr();

            state._fsp--;

            adaptor.addChild(root_0, expr_addr382.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_unname"


    public static class expr_addr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_addr"
    // Objcm.g:676:1: expr_addr : ( L_AND )? expr_sign ;
    public final ObjcmParser.expr_addr_return expr_addr() throws RecognitionException {
        ObjcmParser.expr_addr_return retval = new ObjcmParser.expr_addr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND383=null;
        ObjcmParser.expr_sign_return expr_sign384 =null;


        Object L_AND383_tree=null;

        try {
            // Objcm.g:677:2: ( ( L_AND )? expr_sign )
            // Objcm.g:677:4: ( L_AND )? expr_sign
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:677:4: ( L_AND )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==L_AND) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // Objcm.g:677:4: L_AND
                    {
                    L_AND383=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_addr3524); 
                    L_AND383_tree = 
                    (Object)adaptor.create(L_AND383)
                    ;
                    adaptor.addChild(root_0, L_AND383_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_sign_in_expr_addr3527);
            expr_sign384=expr_sign();

            state._fsp--;

            adaptor.addChild(root_0, expr_sign384.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_addr"


    public static class expr_sign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_sign"
    // Objcm.g:679:1: expr_sign : ( L_MINUS | L_PLUS )? expr_not_wrapper ;
    public final ObjcmParser.expr_sign_return expr_sign() throws RecognitionException {
        ObjcmParser.expr_sign_return retval = new ObjcmParser.expr_sign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set385=null;
        ObjcmParser.expr_not_wrapper_return expr_not_wrapper386 =null;


        Object set385_tree=null;

        try {
            // Objcm.g:680:2: ( ( L_MINUS | L_PLUS )? expr_not_wrapper )
            // Objcm.g:680:4: ( L_MINUS | L_PLUS )? expr_not_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:680:4: ( L_MINUS | L_PLUS )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==L_MINUS||LA97_0==L_PLUS) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // Objcm.g:
                    {
                    set385=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set385)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not_wrapper_in_expr_sign3546);
            expr_not_wrapper386=expr_not_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_not_wrapper386.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_sign"


    public static class expr_not_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not_wrapper"
    // Objcm.g:682:1: expr_not_wrapper : expr_not -> ^( EXPR_NOT expr_not ) ;
    public final ObjcmParser.expr_not_wrapper_return expr_not_wrapper() throws RecognitionException {
        ObjcmParser.expr_not_wrapper_return retval = new ObjcmParser.expr_not_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_not_return expr_not387 =null;


        RewriteRuleSubtreeStream stream_expr_not=new RewriteRuleSubtreeStream(adaptor,"rule expr_not");
        try {
            // Objcm.g:683:2: ( expr_not -> ^( EXPR_NOT expr_not ) )
            // Objcm.g:683:4: expr_not
            {
            pushFollow(FOLLOW_expr_not_in_expr_not_wrapper3556);
            expr_not387=expr_not();

            state._fsp--;

            stream_expr_not.add(expr_not387.getTree());

            // AST REWRITE
            // elements: expr_not
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 683:13: -> ^( EXPR_NOT expr_not )
            {
                // Objcm.g:683:16: ^( EXPR_NOT expr_not )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_not.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not_wrapper"


    public static class expr_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not"
    // Objcm.g:685:1: expr_not : ( L_NOT )? expr_not2 ;
    public final ObjcmParser.expr_not_return expr_not() throws RecognitionException {
        ObjcmParser.expr_not_return retval = new ObjcmParser.expr_not_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_NOT388=null;
        ObjcmParser.expr_not2_return expr_not2389 =null;


        Object L_NOT388_tree=null;

        try {
            // Objcm.g:686:2: ( ( L_NOT )? expr_not2 )
            // Objcm.g:686:4: ( L_NOT )? expr_not2
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:686:4: ( L_NOT )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==L_NOT) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // Objcm.g:686:4: L_NOT
                    {
                    L_NOT388=(Token)match(input,L_NOT,FOLLOW_L_NOT_in_expr_not3575); 
                    L_NOT388_tree = 
                    (Object)adaptor.create(L_NOT388)
                    ;
                    adaptor.addChild(root_0, L_NOT388_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not2_in_expr_not3578);
            expr_not2389=expr_not2();

            state._fsp--;

            adaptor.addChild(root_0, expr_not2389.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not"


    public static class expr_not2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not2"
    // Objcm.g:688:1: expr_not2 : ( L_TILDA )? expr_size_of ;
    public final ObjcmParser.expr_not2_return expr_not2() throws RecognitionException {
        ObjcmParser.expr_not2_return retval = new ObjcmParser.expr_not2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_TILDA390=null;
        ObjcmParser.expr_size_of_return expr_size_of391 =null;


        Object L_TILDA390_tree=null;

        try {
            // Objcm.g:689:2: ( ( L_TILDA )? expr_size_of )
            // Objcm.g:689:4: ( L_TILDA )? expr_size_of
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:689:4: ( L_TILDA )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==L_TILDA) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // Objcm.g:689:4: L_TILDA
                    {
                    L_TILDA390=(Token)match(input,L_TILDA,FOLLOW_L_TILDA_in_expr_not23587); 
                    L_TILDA390_tree = 
                    (Object)adaptor.create(L_TILDA390)
                    ;
                    adaptor.addChild(root_0, L_TILDA390_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_size_of_in_expr_not23590);
            expr_size_of391=expr_size_of();

            state._fsp--;

            adaptor.addChild(root_0, expr_size_of391.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not2"


    public static class expr_size_of_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_size_of"
    // Objcm.g:691:1: expr_size_of : ( SIZEOF )? expr_xcrement ;
    public final ObjcmParser.expr_size_of_return expr_size_of() throws RecognitionException {
        ObjcmParser.expr_size_of_return retval = new ObjcmParser.expr_size_of_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SIZEOF392=null;
        ObjcmParser.expr_xcrement_return expr_xcrement393 =null;


        Object SIZEOF392_tree=null;

        try {
            // Objcm.g:692:2: ( ( SIZEOF )? expr_xcrement )
            // Objcm.g:692:4: ( SIZEOF )? expr_xcrement
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:692:4: ( SIZEOF )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==SIZEOF) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // Objcm.g:692:4: SIZEOF
                    {
                    SIZEOF392=(Token)match(input,SIZEOF,FOLLOW_SIZEOF_in_expr_size_of3600); 
                    SIZEOF392_tree = 
                    (Object)adaptor.create(SIZEOF392)
                    ;
                    adaptor.addChild(root_0, SIZEOF392_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_xcrement_in_expr_size_of3603);
            expr_xcrement393=expr_xcrement();

            state._fsp--;

            adaptor.addChild(root_0, expr_xcrement393.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_size_of"


    public static class expr_xcrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xcrement"
    // Objcm.g:694:1: expr_xcrement : ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 ;
    public final ObjcmParser.expr_xcrement_return expr_xcrement() throws RecognitionException {
        ObjcmParser.expr_xcrement_return retval = new ObjcmParser.expr_xcrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set394=null;
        ObjcmParser.object_wrapped1_return object_wrapped1395 =null;


        Object set394_tree=null;

        try {
            // Objcm.g:695:2: ( ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 )
            // Objcm.g:695:4: ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:695:4: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==L_MINUS_MINUS||LA101_0==L_PLUS_PLUS) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // Objcm.g:
                    {
                    set394=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set394)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_object_wrapped1_in_expr_xcrement3622);
            object_wrapped1395=object_wrapped1();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped1395.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xcrement"


    public static class object_wrapped1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped1"
    // Objcm.g:697:1: object_wrapped1 : object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? ;
    public final ObjcmParser.object_wrapped1_return object_wrapped1() throws RecognitionException {
        ObjcmParser.object_wrapped1_return retval = new ObjcmParser.object_wrapped1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set397=null;
        ObjcmParser.object_wrapped2_return object_wrapped2396 =null;


        Object set397_tree=null;

        try {
            // Objcm.g:698:2: ( object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? )
            // Objcm.g:698:4: object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapped2_in_object_wrapped13632);
            object_wrapped2396=object_wrapped2();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped2396.getTree());

            // Objcm.g:698:20: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==L_MINUS_MINUS||LA102_0==L_PLUS_PLUS) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // Objcm.g:
                    {
                    set397=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set397)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped1"


    public static class object_wrapped2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped2"
    // Objcm.g:701:1: object_wrapped2 : ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR classical_expr_wrp R_BR ( id_part_end )? | const_expr | a_started );
    public final ObjcmParser.object_wrapped2_return object_wrapped2() throws RecognitionException {
        ObjcmParser.object_wrapped2_return retval = new ObjcmParser.object_wrapped2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal398=null;
        Token L_BR403=null;
        Token R_BR405=null;
        ObjcmParser.object_name_return object_name399 =null;

        ObjcmParser.generic_return generic400 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper401 =null;

        ObjcmParser.id_part_end_return id_part_end402 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp404 =null;

        ObjcmParser.id_part_end_return id_part_end406 =null;

        ObjcmParser.const_expr_return const_expr407 =null;

        ObjcmParser.a_started_return a_started408 =null;


        Object string_literal398_tree=null;
        Object L_BR403_tree=null;
        Object R_BR405_tree=null;

        try {
            // Objcm.g:702:2: ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR classical_expr_wrp R_BR ( id_part_end )? | const_expr | a_started )
            int alt107=5;
            switch ( input.LA(1) ) {
            case ID:
            case 181:
            case 188:
                {
                alt107=1;
                }
                break;
            case L_KBR:
                {
                alt107=2;
                }
                break;
            case L_BR:
                {
                alt107=3;
                }
                break;
            case NUMBER:
            case STRING_LITERAL:
            case STRING_LITERAL2:
            case STRING_LITERAL3:
            case 170:
            case 183:
                {
                alt107=4;
                }
                break;
            case 158:
            case 164:
            case 166:
                {
                alt107=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }

            switch (alt107) {
                case 1 :
                    // Objcm.g:702:5: ( 'unsigned' )? object_name ( generic )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:702:5: ( 'unsigned' )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==188) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // Objcm.g:702:5: 'unsigned'
                            {
                            string_literal398=(Token)match(input,188,FOLLOW_188_in_object_wrapped23653); 
                            string_literal398_tree = 
                            (Object)adaptor.create(string_literal398)
                            ;
                            adaptor.addChild(root_0, string_literal398_tree);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_object_name_in_object_wrapped23656);
                    object_name399=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name399.getTree());

                    // Objcm.g:702:29: ( generic )?
                    int alt104=2;
                    alt104 = dfa104.predict(input);
                    switch (alt104) {
                        case 1 :
                            // Objcm.g:702:29: generic
                            {
                            pushFollow(FOLLOW_generic_in_object_wrapped23658);
                            generic400=generic();

                            state._fsp--;

                            adaptor.addChild(root_0, generic400.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:703:4: method_call_wrapper ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapped23664);
                    method_call_wrapper401=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper401.getTree());

                    // Objcm.g:703:24: ( id_part_end )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==DOT||LA105_0==155) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // Objcm.g:703:24: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23666);
                            id_part_end402=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end402.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // Objcm.g:704:4: L_BR classical_expr_wrp R_BR ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR403=(Token)match(input,L_BR,FOLLOW_L_BR_in_object_wrapped23672); 
                    L_BR403_tree = 
                    (Object)adaptor.create(L_BR403)
                    ;
                    adaptor.addChild(root_0, L_BR403_tree);


                    pushFollow(FOLLOW_classical_expr_wrp_in_object_wrapped23674);
                    classical_expr_wrp404=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp404.getTree());

                    R_BR405=(Token)match(input,R_BR,FOLLOW_R_BR_in_object_wrapped23676); 
                    R_BR405_tree = 
                    (Object)adaptor.create(R_BR405)
                    ;
                    adaptor.addChild(root_0, R_BR405_tree);


                    // Objcm.g:704:33: ( id_part_end )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==DOT||LA106_0==155) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // Objcm.g:704:33: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23678);
                            id_part_end406=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end406.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // Objcm.g:705:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_object_wrapped23684);
                    const_expr407=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr407.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:706:4: a_started
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_started_in_object_wrapped23689);
                    a_started408=a_started();

                    state._fsp--;

                    adaptor.addChild(root_0, a_started408.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped2"


    public static class function_brackets_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets_wrapper"
    // Objcm.g:709:1: function_brackets_wrapper : function_brackets -> ^( FUNCTION function_brackets ) ;
    public final ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper() throws RecognitionException {
        ObjcmParser.function_brackets_wrapper_return retval = new ObjcmParser.function_brackets_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.function_brackets_return function_brackets409 =null;


        RewriteRuleSubtreeStream stream_function_brackets=new RewriteRuleSubtreeStream(adaptor,"rule function_brackets");
        try {
            // Objcm.g:710:2: ( function_brackets -> ^( FUNCTION function_brackets ) )
            // Objcm.g:710:4: function_brackets
            {
            pushFollow(FOLLOW_function_brackets_in_function_brackets_wrapper3701);
            function_brackets409=function_brackets();

            state._fsp--;

            stream_function_brackets.add(function_brackets409.getTree());

            // AST REWRITE
            // elements: function_brackets
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 710:22: -> ^( FUNCTION function_brackets )
            {
                // Objcm.g:710:25: ^( FUNCTION function_brackets )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNCTION, "FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_function_brackets.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets_wrapper"


    public static class function_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets"
    // Objcm.g:712:1: function_brackets : L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.function_brackets_return function_brackets() throws RecognitionException {
        ObjcmParser.function_brackets_return retval = new ObjcmParser.function_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR410=null;
        Token COMMA412=null;
        Token R_BR414=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp411 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp413 =null;


        Object L_BR410_tree=null;
        Object COMMA412_tree=null;
        Object R_BR414_tree=null;

        try {
            // Objcm.g:713:2: ( L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR )
            // Objcm.g:713:4: L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR410=(Token)match(input,L_BR,FOLLOW_L_BR_in_function_brackets3720); 
            L_BR410_tree = 
            (Object)adaptor.create(L_BR410)
            ;
            adaptor.addChild(root_0, L_BR410_tree);


            // Objcm.g:713:9: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==ASTERISK||LA109_0==ID||LA109_0==L_AND||LA109_0==L_BR||LA109_0==L_KBR||LA109_0==L_MINUS||LA109_0==L_MINUS_MINUS||LA109_0==L_NOT||LA109_0==L_PLUS||LA109_0==L_PLUS_PLUS||LA109_0==L_TILDA||LA109_0==NUMBER||LA109_0==SIZEOF||(LA109_0 >= STRING_LITERAL && LA109_0 <= STRING_LITERAL3)||LA109_0==158||LA109_0==164||LA109_0==166||LA109_0==170||LA109_0==181||LA109_0==183||LA109_0==188) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // Objcm.g:713:10: classical_expr_wrp ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets3723);
                    classical_expr_wrp411=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp411.getTree());

                    // Objcm.g:713:29: ( COMMA classical_expr_wrp )*
                    loop108:
                    do {
                        int alt108=2;
                        int LA108_0 = input.LA(1);

                        if ( (LA108_0==COMMA) ) {
                            alt108=1;
                        }


                        switch (alt108) {
                    	case 1 :
                    	    // Objcm.g:713:30: COMMA classical_expr_wrp
                    	    {
                    	    COMMA412=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_brackets3726); 
                    	    COMMA412_tree = 
                    	    (Object)adaptor.create(COMMA412)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA412_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets3728);
                    	    classical_expr_wrp413=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp413.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop108;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR414=(Token)match(input,R_BR,FOLLOW_R_BR_in_function_brackets3734); 
            R_BR414_tree = 
            (Object)adaptor.create(R_BR414)
            ;
            adaptor.addChild(root_0, R_BR414_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets"


    public static class index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index"
    // Objcm.g:715:1: index : L_KBR ( classical_expr_wrp )? R_KBR ;
    public final ObjcmParser.index_return index() throws RecognitionException {
        ObjcmParser.index_return retval = new ObjcmParser.index_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR415=null;
        Token R_KBR417=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp416 =null;


        Object L_KBR415_tree=null;
        Object R_KBR417_tree=null;

        try {
            // Objcm.g:715:7: ( L_KBR ( classical_expr_wrp )? R_KBR )
            // Objcm.g:715:9: L_KBR ( classical_expr_wrp )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR415=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index3744); 
            L_KBR415_tree = 
            (Object)adaptor.create(L_KBR415)
            ;
            adaptor.addChild(root_0, L_KBR415_tree);


            // Objcm.g:715:15: ( classical_expr_wrp )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==ASTERISK||LA110_0==ID||LA110_0==L_AND||LA110_0==L_BR||LA110_0==L_KBR||LA110_0==L_MINUS||LA110_0==L_MINUS_MINUS||LA110_0==L_NOT||LA110_0==L_PLUS||LA110_0==L_PLUS_PLUS||LA110_0==L_TILDA||LA110_0==NUMBER||LA110_0==SIZEOF||(LA110_0 >= STRING_LITERAL && LA110_0 <= STRING_LITERAL3)||LA110_0==158||LA110_0==164||LA110_0==166||LA110_0==170||LA110_0==181||LA110_0==183||LA110_0==188) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // Objcm.g:715:15: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_index3746);
                    classical_expr_wrp416=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp416.getTree());

                    }
                    break;

            }


            R_KBR417=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index3749); 
            R_KBR417_tree = 
            (Object)adaptor.create(R_KBR417)
            ;
            adaptor.addChild(root_0, R_KBR417_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index"


    public static class struct_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init"
    // Objcm.g:717:1: struct_init : L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init_return struct_init() throws RecognitionException {
        ObjcmParser.struct_init_return retval = new ObjcmParser.struct_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR418=null;
        Token STRUCT_PREFIX419=null;
        Token ID420=null;
        Token R_BR421=null;
        Token L_FBR422=null;
        Token COMMA424=null;
        Token R_FBR426=null;
        ObjcmParser.struct_init_line_return struct_init_line423 =null;

        ObjcmParser.struct_init_line_return struct_init_line425 =null;


        Object L_BR418_tree=null;
        Object STRUCT_PREFIX419_tree=null;
        Object ID420_tree=null;
        Object R_BR421_tree=null;
        Object L_FBR422_tree=null;
        Object COMMA424_tree=null;
        Object R_FBR426_tree=null;

        try {
            // Objcm.g:718:2: ( L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // Objcm.g:718:4: L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_BR418=(Token)match(input,L_BR,FOLLOW_L_BR_in_struct_init3759); 
            L_BR418_tree = 
            (Object)adaptor.create(L_BR418)
            ;
            adaptor.addChild(root_0, L_BR418_tree);


            // Objcm.g:718:10: ( STRUCT_PREFIX )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==STRUCT_PREFIX) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // Objcm.g:718:10: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX419=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_init3762); 
                    STRUCT_PREFIX419_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX419)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX419_tree);


                    }
                    break;

            }


            ID420=(Token)match(input,ID,FOLLOW_ID_in_struct_init3765); 
            ID420_tree = 
            (Object)adaptor.create(ID420)
            ;
            adaptor.addChild(root_0, ID420_tree);


            R_BR421=(Token)match(input,R_BR,FOLLOW_R_BR_in_struct_init3768); 
            R_BR421_tree = 
            (Object)adaptor.create(R_BR421)
            ;
            adaptor.addChild(root_0, R_BR421_tree);


            L_FBR422=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init3771); 
            L_FBR422_tree = 
            (Object)adaptor.create(L_FBR422)
            ;
            adaptor.addChild(root_0, L_FBR422_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init3777);
            struct_init_line423=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line423.getTree());

            // Objcm.g:719:21: ( COMMA struct_init_line )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==COMMA) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // Objcm.g:719:22: COMMA struct_init_line
            	    {
            	    COMMA424=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init3780); 
            	    COMMA424_tree = 
            	    (Object)adaptor.create(COMMA424)
            	    ;
            	    adaptor.addChild(root_0, COMMA424_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init3783);
            	    struct_init_line425=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line425.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            R_FBR426=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init3789); 
            R_FBR426_tree = 
            (Object)adaptor.create(R_FBR426)
            ;
            adaptor.addChild(root_0, R_FBR426_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init"


    public static class struct_init2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init2"
    // Objcm.g:723:1: struct_init2 : L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init2_return struct_init2() throws RecognitionException {
        ObjcmParser.struct_init2_return retval = new ObjcmParser.struct_init2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR427=null;
        Token COMMA429=null;
        Token R_FBR431=null;
        ObjcmParser.struct_init_line_return struct_init_line428 =null;

        ObjcmParser.struct_init_line_return struct_init_line430 =null;


        Object L_FBR427_tree=null;
        Object COMMA429_tree=null;
        Object R_FBR431_tree=null;

        try {
            // Objcm.g:724:2: ( L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // Objcm.g:724:4: L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR427=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init23803); 
            L_FBR427_tree = 
            (Object)adaptor.create(L_FBR427)
            ;
            adaptor.addChild(root_0, L_FBR427_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init23809);
            struct_init_line428=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line428.getTree());

            // Objcm.g:725:21: ( COMMA struct_init_line )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==COMMA) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // Objcm.g:725:22: COMMA struct_init_line
            	    {
            	    COMMA429=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init23812); 
            	    COMMA429_tree = 
            	    (Object)adaptor.create(COMMA429)
            	    ;
            	    adaptor.addChild(root_0, COMMA429_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init23815);
            	    struct_init_line430=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line430.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            R_FBR431=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init23821); 
            R_FBR431_tree = 
            (Object)adaptor.create(R_FBR431)
            ;
            adaptor.addChild(root_0, R_FBR431_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init2"


    public static class struct_init_line_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_line"
    // Objcm.g:729:1: struct_init_line : ( struct_init_var | struct_init_expression );
    public final ObjcmParser.struct_init_line_return struct_init_line() throws RecognitionException {
        ObjcmParser.struct_init_line_return retval = new ObjcmParser.struct_init_line_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_init_var_return struct_init_var432 =null;

        ObjcmParser.struct_init_expression_return struct_init_expression433 =null;



        try {
            // Objcm.g:730:2: ( struct_init_var | struct_init_expression )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==DOT) ) {
                alt114=1;
            }
            else if ( (LA114_0==ASTERISK||LA114_0==ID||LA114_0==L_AND||LA114_0==L_BR||LA114_0==L_KBR||LA114_0==L_MINUS||LA114_0==L_MINUS_MINUS||LA114_0==L_NOT||LA114_0==L_PLUS||LA114_0==L_PLUS_PLUS||LA114_0==L_TILDA||LA114_0==NUMBER||LA114_0==SIZEOF||(LA114_0 >= STRING_LITERAL && LA114_0 <= STRING_LITERAL3)||LA114_0==158||LA114_0==164||LA114_0==166||LA114_0==170||LA114_0==181||LA114_0==183||LA114_0==188) ) {
                alt114=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }
            switch (alt114) {
                case 1 :
                    // Objcm.g:730:4: struct_init_var
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_var_in_struct_init_line3834);
                    struct_init_var432=struct_init_var();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_var432.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:731:4: struct_init_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_expression_in_struct_init_line3839);
                    struct_init_expression433=struct_init_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_expression433.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_line"


    public static class struct_init_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_expression"
    // Objcm.g:734:1: struct_init_expression : classical_expr_wrp ;
    public final ObjcmParser.struct_init_expression_return struct_init_expression() throws RecognitionException {
        ObjcmParser.struct_init_expression_return retval = new ObjcmParser.struct_init_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp434 =null;



        try {
            // Objcm.g:735:2: ( classical_expr_wrp )
            // Objcm.g:735:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_expression3852);
            classical_expr_wrp434=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp434.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_expression"


    public static class struct_init_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_method"
    // Objcm.g:737:1: struct_init_method : classical_expr_wrp ;
    public final ObjcmParser.struct_init_method_return struct_init_method() throws RecognitionException {
        ObjcmParser.struct_init_method_return retval = new ObjcmParser.struct_init_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp435 =null;



        try {
            // Objcm.g:738:2: ( classical_expr_wrp )
            // Objcm.g:738:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_method3863);
            classical_expr_wrp435=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp435.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_method"


    public static class struct_init_var_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_var"
    // Objcm.g:740:1: struct_init_var : ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) ;
    public final ObjcmParser.struct_init_var_return struct_init_var() throws RecognitionException {
        ObjcmParser.struct_init_var_return retval = new ObjcmParser.struct_init_var_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT436=null;
        Token L_EQ438=null;
        ObjcmParser.id_part_return id_part437 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets439 =null;

        ObjcmParser.expression_return expression440 =null;


        Object DOT436_tree=null;
        Object L_EQ438_tree=null;

        try {
            // Objcm.g:741:2: ( ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) )
            // Objcm.g:741:4: ( DOT id_part )+ L_EQ ( in_q_brackets | expression )
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:741:4: ( DOT id_part )+
            int cnt115=0;
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==DOT) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // Objcm.g:741:5: DOT id_part
            	    {
            	    DOT436=(Token)match(input,DOT,FOLLOW_DOT_in_struct_init_var3875); 
            	    DOT436_tree = 
            	    (Object)adaptor.create(DOT436)
            	    ;
            	    adaptor.addChild(root_0, DOT436_tree);


            	    pushFollow(FOLLOW_id_part_in_struct_init_var3877);
            	    id_part437=id_part();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part437.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt115 >= 1 ) break loop115;
                        EarlyExitException eee =
                            new EarlyExitException(115, input);
                        throw eee;
                }
                cnt115++;
            } while (true);


            L_EQ438=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_struct_init_var3882); 
            L_EQ438_tree = 
            (Object)adaptor.create(L_EQ438)
            ;
            adaptor.addChild(root_0, L_EQ438_tree);


            // Objcm.g:741:26: ( in_q_brackets | expression )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==L_FBR) ) {
                alt116=1;
            }
            else if ( (LA116_0==ASTERISK||LA116_0==ID||LA116_0==L_AND||LA116_0==L_BR||LA116_0==L_KBR||LA116_0==L_MINUS||LA116_0==L_MINUS_MINUS||LA116_0==L_NOT||LA116_0==L_PLUS||LA116_0==L_PLUS_PLUS||LA116_0==L_TILDA||LA116_0==NUMBER||LA116_0==SIZEOF||(LA116_0 >= STRING_LITERAL && LA116_0 <= STRING_LITERAL3)||LA116_0==158||LA116_0==164||LA116_0==166||LA116_0==170||LA116_0==181||LA116_0==183||LA116_0==188) ) {
                alt116=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }
            switch (alt116) {
                case 1 :
                    // Objcm.g:741:27: in_q_brackets
                    {
                    pushFollow(FOLLOW_in_q_brackets_in_struct_init_var3886);
                    in_q_brackets439=in_q_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, in_q_brackets439.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:741:43: expression
                    {
                    pushFollow(FOLLOW_expression_in_struct_init_var3890);
                    expression440=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression440.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_var"


    public static class a_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_started"
    // Objcm.g:743:1: a_started : ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper );
    public final ObjcmParser.a_started_return a_started() throws RecognitionException {
        ObjcmParser.a_started_return retval = new ObjcmParser.a_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_wrapper_return a_selector_wrapper441 =null;

        ObjcmParser.a_encode_wrapper_return a_encode_wrapper442 =null;

        ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper443 =null;



        try {
            // Objcm.g:744:2: ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper )
            int alt117=3;
            switch ( input.LA(1) ) {
            case 166:
                {
                alt117=1;
                }
                break;
            case 158:
                {
                alt117=2;
                }
                break;
            case 164:
                {
                alt117=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }

            switch (alt117) {
                case 1 :
                    // Objcm.g:744:4: a_selector_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_selector_wrapper_in_a_started3902);
                    a_selector_wrapper441=a_selector_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_selector_wrapper441.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:745:4: a_encode_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_encode_wrapper_in_a_started3907);
                    a_encode_wrapper442=a_encode_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_encode_wrapper442.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:746:4: a_protocol_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_protocol_wrapper_in_a_started3912);
                    a_protocol_wrapper443=a_protocol_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_protocol_wrapper443.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_started"


    public static class typeof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof"
    // Objcm.g:749:1: typeof : '__typeof__' L_BR ID R_BR ;
    public final ObjcmParser.typeof_return typeof() throws RecognitionException {
        ObjcmParser.typeof_return retval = new ObjcmParser.typeof_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal444=null;
        Token L_BR445=null;
        Token ID446=null;
        Token R_BR447=null;

        Object string_literal444_tree=null;
        Object L_BR445_tree=null;
        Object ID446_tree=null;
        Object R_BR447_tree=null;

        try {
            // Objcm.g:749:8: ( '__typeof__' L_BR ID R_BR )
            // Objcm.g:749:10: '__typeof__' L_BR ID R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal444=(Token)match(input,172,FOLLOW_172_in_typeof3922); 
            string_literal444_tree = 
            (Object)adaptor.create(string_literal444)
            ;
            adaptor.addChild(root_0, string_literal444_tree);


            L_BR445=(Token)match(input,L_BR,FOLLOW_L_BR_in_typeof3925); 
            L_BR445_tree = 
            (Object)adaptor.create(L_BR445)
            ;
            adaptor.addChild(root_0, L_BR445_tree);


            ID446=(Token)match(input,ID,FOLLOW_ID_in_typeof3928); 
            ID446_tree = 
            (Object)adaptor.create(ID446)
            ;
            adaptor.addChild(root_0, ID446_tree);


            R_BR447=(Token)match(input,R_BR,FOLLOW_R_BR_in_typeof3931); 
            R_BR447_tree = 
            (Object)adaptor.create(R_BR447)
            ;
            adaptor.addChild(root_0, R_BR447_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof"


    public static class a_selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_wrapper"
    // Objcm.g:751:1: a_selector_wrapper : a_selector -> ^( SELECTOR a_selector ) ;
    public final ObjcmParser.a_selector_wrapper_return a_selector_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_wrapper_return retval = new ObjcmParser.a_selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_return a_selector448 =null;


        RewriteRuleSubtreeStream stream_a_selector=new RewriteRuleSubtreeStream(adaptor,"rule a_selector");
        try {
            // Objcm.g:752:2: ( a_selector -> ^( SELECTOR a_selector ) )
            // Objcm.g:752:4: a_selector
            {
            pushFollow(FOLLOW_a_selector_in_a_selector_wrapper3942);
            a_selector448=a_selector();

            state._fsp--;

            stream_a_selector.add(a_selector448.getTree());

            // AST REWRITE
            // elements: a_selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 752:15: -> ^( SELECTOR a_selector )
            {
                // Objcm.g:752:18: ^( SELECTOR a_selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR, "SELECTOR")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_wrapper"


    public static class a_selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector"
    // Objcm.g:754:1: a_selector : '@selector' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_selector_return a_selector() throws RecognitionException {
        ObjcmParser.a_selector_return retval = new ObjcmParser.a_selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal449=null;
        Token L_BR450=null;
        Token R_BR452=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper451 =null;


        Object string_literal449_tree=null;
        Object L_BR450_tree=null;
        Object R_BR452_tree=null;

        try {
            // Objcm.g:754:11: ( '@selector' L_BR a_selector_value_wrapper R_BR )
            // Objcm.g:754:13: '@selector' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal449=(Token)match(input,166,FOLLOW_166_in_a_selector3959); 
            string_literal449_tree = 
            (Object)adaptor.create(string_literal449)
            ;
            adaptor.addChild(root_0, string_literal449_tree);


            L_BR450=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_selector3961); 
            L_BR450_tree = 
            (Object)adaptor.create(L_BR450)
            ;
            adaptor.addChild(root_0, L_BR450_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_selector3963);
            a_selector_value_wrapper451=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper451.getTree());

            R_BR452=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_selector3965); 
            R_BR452_tree = 
            (Object)adaptor.create(R_BR452)
            ;
            adaptor.addChild(root_0, R_BR452_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector"


    public static class a_protocol_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol_wrapper"
    // Objcm.g:756:1: a_protocol_wrapper : a_protocol -> ^( PROTOCOL a_protocol ) ;
    public final ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper() throws RecognitionException {
        ObjcmParser.a_protocol_wrapper_return retval = new ObjcmParser.a_protocol_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_protocol_return a_protocol453 =null;


        RewriteRuleSubtreeStream stream_a_protocol=new RewriteRuleSubtreeStream(adaptor,"rule a_protocol");
        try {
            // Objcm.g:757:2: ( a_protocol -> ^( PROTOCOL a_protocol ) )
            // Objcm.g:757:4: a_protocol
            {
            pushFollow(FOLLOW_a_protocol_in_a_protocol_wrapper3975);
            a_protocol453=a_protocol();

            state._fsp--;

            stream_a_protocol.add(a_protocol453.getTree());

            // AST REWRITE
            // elements: a_protocol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 757:15: -> ^( PROTOCOL a_protocol )
            {
                // Objcm.g:757:18: ^( PROTOCOL a_protocol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_a_protocol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol_wrapper"


    public static class a_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol"
    // Objcm.g:759:1: a_protocol : '@protocol' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_protocol_return a_protocol() throws RecognitionException {
        ObjcmParser.a_protocol_return retval = new ObjcmParser.a_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal454=null;
        Token L_BR455=null;
        Token R_BR457=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper456 =null;


        Object string_literal454_tree=null;
        Object L_BR455_tree=null;
        Object R_BR457_tree=null;

        try {
            // Objcm.g:760:2: ( '@protocol' L_BR a_selector_value_wrapper R_BR )
            // Objcm.g:760:4: '@protocol' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal454=(Token)match(input,164,FOLLOW_164_in_a_protocol3993); 
            string_literal454_tree = 
            (Object)adaptor.create(string_literal454)
            ;
            adaptor.addChild(root_0, string_literal454_tree);


            L_BR455=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_protocol3995); 
            L_BR455_tree = 
            (Object)adaptor.create(L_BR455)
            ;
            adaptor.addChild(root_0, L_BR455_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_protocol3997);
            a_selector_value_wrapper456=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper456.getTree());

            R_BR457=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_protocol3999); 
            R_BR457_tree = 
            (Object)adaptor.create(R_BR457)
            ;
            adaptor.addChild(root_0, R_BR457_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol"


    public static class a_encode_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode_wrapper"
    // Objcm.g:762:1: a_encode_wrapper : a_encode -> ^( ENCODE a_encode ) ;
    public final ObjcmParser.a_encode_wrapper_return a_encode_wrapper() throws RecognitionException {
        ObjcmParser.a_encode_wrapper_return retval = new ObjcmParser.a_encode_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_encode_return a_encode458 =null;


        RewriteRuleSubtreeStream stream_a_encode=new RewriteRuleSubtreeStream(adaptor,"rule a_encode");
        try {
            // Objcm.g:763:2: ( a_encode -> ^( ENCODE a_encode ) )
            // Objcm.g:763:4: a_encode
            {
            pushFollow(FOLLOW_a_encode_in_a_encode_wrapper4009);
            a_encode458=a_encode();

            state._fsp--;

            stream_a_encode.add(a_encode458.getTree());

            // AST REWRITE
            // elements: a_encode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 763:13: -> ^( ENCODE a_encode )
            {
                // Objcm.g:763:16: ^( ENCODE a_encode )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENCODE, "ENCODE")
                , root_1);

                adaptor.addChild(root_1, stream_a_encode.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode_wrapper"


    public static class a_selector_value_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value_wrapper"
    // Objcm.g:765:1: a_selector_value_wrapper : a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) ;
    public final ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_value_wrapper_return retval = new ObjcmParser.a_selector_value_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_value_return a_selector_value459 =null;


        RewriteRuleSubtreeStream stream_a_selector_value=new RewriteRuleSubtreeStream(adaptor,"rule a_selector_value");
        try {
            // Objcm.g:766:2: ( a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) )
            // Objcm.g:766:4: a_selector_value
            {
            pushFollow(FOLLOW_a_selector_value_in_a_selector_value_wrapper4026);
            a_selector_value459=a_selector_value();

            state._fsp--;

            stream_a_selector_value.add(a_selector_value459.getTree());

            // AST REWRITE
            // elements: a_selector_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 766:21: -> ^( SELECTOR_VALUE a_selector_value )
            {
                // Objcm.g:766:24: ^( SELECTOR_VALUE a_selector_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR_VALUE, "SELECTOR_VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value_wrapper"


    public static class a_selector_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value"
    // Objcm.g:768:1: a_selector_value : ID ( COLON ( ID COLON )* )? ;
    public final ObjcmParser.a_selector_value_return a_selector_value() throws RecognitionException {
        ObjcmParser.a_selector_value_return retval = new ObjcmParser.a_selector_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID460=null;
        Token COLON461=null;
        Token ID462=null;
        Token COLON463=null;

        Object ID460_tree=null;
        Object COLON461_tree=null;
        Object ID462_tree=null;
        Object COLON463_tree=null;

        try {
            // Objcm.g:769:2: ( ID ( COLON ( ID COLON )* )? )
            // Objcm.g:769:5: ID ( COLON ( ID COLON )* )?
            {
            root_0 = (Object)adaptor.nil();


            ID460=(Token)match(input,ID,FOLLOW_ID_in_a_selector_value4045); 
            ID460_tree = 
            (Object)adaptor.create(ID460)
            ;
            adaptor.addChild(root_0, ID460_tree);


            // Objcm.g:769:9: ( COLON ( ID COLON )* )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==COLON) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // Objcm.g:769:10: COLON ( ID COLON )*
                    {
                    COLON461=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4049); 
                    COLON461_tree = 
                    (Object)adaptor.create(COLON461)
                    ;
                    adaptor.addChild(root_0, COLON461_tree);


                    // Objcm.g:769:17: ( ID COLON )*
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( (LA118_0==ID) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    // Objcm.g:769:18: ID COLON
                    	    {
                    	    ID462=(Token)match(input,ID,FOLLOW_ID_in_a_selector_value4053); 
                    	    ID462_tree = 
                    	    (Object)adaptor.create(ID462)
                    	    ;
                    	    adaptor.addChild(root_0, ID462_tree);


                    	    COLON463=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4056); 
                    	    COLON463_tree = 
                    	    (Object)adaptor.create(COLON463)
                    	    ;
                    	    adaptor.addChild(root_0, COLON463_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop118;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value"


    public static class a_encode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode"
    // Objcm.g:771:1: a_encode : '@encode' L_BR (~ ( R_BR ) )+ R_BR ;
    public final ObjcmParser.a_encode_return a_encode() throws RecognitionException {
        ObjcmParser.a_encode_return retval = new ObjcmParser.a_encode_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal464=null;
        Token L_BR465=null;
        Token set466=null;
        Token R_BR467=null;

        Object string_literal464_tree=null;
        Object L_BR465_tree=null;
        Object set466_tree=null;
        Object R_BR467_tree=null;

        try {
            // Objcm.g:771:9: ( '@encode' L_BR (~ ( R_BR ) )+ R_BR )
            // Objcm.g:771:11: '@encode' L_BR (~ ( R_BR ) )+ R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal464=(Token)match(input,158,FOLLOW_158_in_a_encode4067); 
            string_literal464_tree = 
            (Object)adaptor.create(string_literal464)
            ;
            adaptor.addChild(root_0, string_literal464_tree);


            L_BR465=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_encode4069); 
            L_BR465_tree = 
            (Object)adaptor.create(L_BR465)
            ;
            adaptor.addChild(root_0, L_BR465_tree);


            // Objcm.g:771:26: (~ ( R_BR ) )+
            int cnt120=0;
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( ((LA120_0 >= ASSIGN && LA120_0 <= RETURN_STMT)||(LA120_0 >= R_FBR && LA120_0 <= 189)) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // Objcm.g:
            	    {
            	    set466=(Token)input.LT(1);

            	    if ( (input.LA(1) >= ASSIGN && input.LA(1) <= RETURN_STMT)||(input.LA(1) >= R_FBR && input.LA(1) <= 189) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set466)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt120 >= 1 ) break loop120;
                        EarlyExitException eee =
                            new EarlyExitException(120, input);
                        throw eee;
                }
                cnt120++;
            } while (true);


            R_BR467=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_encode4077); 
            R_BR467_tree = 
            (Object)adaptor.create(R_BR467)
            ;
            adaptor.addChild(root_0, R_BR467_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode"


    public static class const_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // Objcm.g:773:1: const_expr : ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt );
    public final ObjcmParser.const_expr_return const_expr() throws RecognitionException {
        ObjcmParser.const_expr_return retval = new ObjcmParser.const_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NUMBER468=null;
        Token STRING_LITERAL469=null;
        Token STRING_LITERAL2470=null;
        Token STRING_LITERAL3471=null;
        ObjcmParser.null_stmt_return null_stmt472 =null;


        Object NUMBER468_tree=null;
        Object STRING_LITERAL469_tree=null;
        Object STRING_LITERAL2470_tree=null;
        Object STRING_LITERAL3471_tree=null;

        try {
            // Objcm.g:774:2: ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt )
            int alt121=5;
            switch ( input.LA(1) ) {
            case NUMBER:
                {
                alt121=1;
                }
                break;
            case STRING_LITERAL:
                {
                alt121=2;
                }
                break;
            case STRING_LITERAL2:
                {
                alt121=3;
                }
                break;
            case STRING_LITERAL3:
                {
                alt121=4;
                }
                break;
            case 170:
            case 183:
                {
                alt121=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;

            }

            switch (alt121) {
                case 1 :
                    // Objcm.g:774:5: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER468=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_const_expr4088); 
                    NUMBER468_tree = 
                    (Object)adaptor.create(NUMBER468)
                    ;
                    adaptor.addChild(root_0, NUMBER468_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:774:14: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL469=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_const_expr4092); 
                    STRING_LITERAL469_tree = 
                    (Object)adaptor.create(STRING_LITERAL469)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL469_tree);


                    }
                    break;
                case 3 :
                    // Objcm.g:774:31: STRING_LITERAL2
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL2470=(Token)match(input,STRING_LITERAL2,FOLLOW_STRING_LITERAL2_in_const_expr4096); 
                    STRING_LITERAL2470_tree = 
                    (Object)adaptor.create(STRING_LITERAL2470)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL2470_tree);


                    }
                    break;
                case 4 :
                    // Objcm.g:774:49: STRING_LITERAL3
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL3471=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_const_expr4100); 
                    STRING_LITERAL3471_tree = 
                    (Object)adaptor.create(STRING_LITERAL3471)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL3471_tree);


                    }
                    break;
                case 5 :
                    // Objcm.g:774:67: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_const_expr4104);
                    null_stmt472=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt472.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class string_literal3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_literal3"
    // Objcm.g:776:1: string_literal3 : STRING_LITERAL3 ;
    public final ObjcmParser.string_literal3_return string_literal3() throws RecognitionException {
        ObjcmParser.string_literal3_return retval = new ObjcmParser.string_literal3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL3473=null;

        Object STRING_LITERAL3473_tree=null;

        try {
            // Objcm.g:777:2: ( STRING_LITERAL3 )
            // Objcm.g:777:4: STRING_LITERAL3
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL3473=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_string_literal34114); 
            STRING_LITERAL3473_tree = 
            (Object)adaptor.create(STRING_LITERAL3473)
            ;
            adaptor.addChild(root_0, STRING_LITERAL3473_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_literal3"


    public static class method_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_brackets"
    // Objcm.g:779:1: method_brackets : L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.method_brackets_return method_brackets() throws RecognitionException {
        ObjcmParser.method_brackets_return retval = new ObjcmParser.method_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR474=null;
        Token COMMA476=null;
        Token R_BR478=null;
        ObjcmParser.expression_return expression475 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp477 =null;


        Object L_BR474_tree=null;
        Object COMMA476_tree=null;
        Object R_BR478_tree=null;

        try {
            // Objcm.g:780:2: ( L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR )
            // Objcm.g:780:4: L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR474=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_brackets4124); 
            L_BR474_tree = 
            (Object)adaptor.create(L_BR474)
            ;
            adaptor.addChild(root_0, L_BR474_tree);


            // Objcm.g:780:10: ( expression ( COMMA classical_expr_wrp )* )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==ASTERISK||LA123_0==ID||LA123_0==L_AND||LA123_0==L_BR||LA123_0==L_KBR||LA123_0==L_MINUS||LA123_0==L_MINUS_MINUS||LA123_0==L_NOT||LA123_0==L_PLUS||LA123_0==L_PLUS_PLUS||LA123_0==L_TILDA||LA123_0==NUMBER||LA123_0==SIZEOF||(LA123_0 >= STRING_LITERAL && LA123_0 <= STRING_LITERAL3)||LA123_0==158||LA123_0==164||LA123_0==166||LA123_0==170||LA123_0==181||LA123_0==183||LA123_0==188) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // Objcm.g:780:11: expression ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_expression_in_method_brackets4128);
                    expression475=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression475.getTree());

                    // Objcm.g:780:23: ( COMMA classical_expr_wrp )*
                    loop122:
                    do {
                        int alt122=2;
                        int LA122_0 = input.LA(1);

                        if ( (LA122_0==COMMA) ) {
                            alt122=1;
                        }


                        switch (alt122) {
                    	case 1 :
                    	    // Objcm.g:780:24: COMMA classical_expr_wrp
                    	    {
                    	    COMMA476=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_brackets4132); 
                    	    COMMA476_tree = 
                    	    (Object)adaptor.create(COMMA476)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA476_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_method_brackets4135);
                    	    classical_expr_wrp477=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp477.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop122;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR478=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_brackets4141); 
            R_BR478_tree = 
            (Object)adaptor.create(R_BR478)
            ;
            adaptor.addChild(root_0, R_BR478_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_brackets"


    public static class func_pointer1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer1"
    // Objcm.g:782:1: func_pointer1 : type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? ;
    public final ObjcmParser.func_pointer1_return func_pointer1() throws RecognitionException {
        ObjcmParser.func_pointer1_return retval = new ObjcmParser.func_pointer1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK480=null;
        Token L_BR481=null;
        Token ASTERISK482=null;
        Token R_BR484=null;
        ObjcmParser.type_internal_return type_internal479 =null;

        ObjcmParser.type_internal_return type_internal483 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params485 =null;


        Object ASTERISK480_tree=null;
        Object L_BR481_tree=null;
        Object ASTERISK482_tree=null;
        Object R_BR484_tree=null;

        try {
            // Objcm.g:783:2: ( type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? )
            // Objcm.g:783:4: type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_func_pointer14151);
            type_internal479=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal479.getTree());

            // Objcm.g:783:19: ( ASTERISK )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==ASTERISK) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // Objcm.g:783:19: ASTERISK
                    {
                    ASTERISK480=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14154); 
                    ASTERISK480_tree = 
                    (Object)adaptor.create(ASTERISK480)
                    ;
                    adaptor.addChild(root_0, ASTERISK480_tree);


                    }
                    break;

            }


            L_BR481=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer14157); 
            L_BR481_tree = 
            (Object)adaptor.create(L_BR481)
            ;
            adaptor.addChild(root_0, L_BR481_tree);


            // Objcm.g:783:34: ( ASTERISK )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==ASTERISK) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // Objcm.g:783:34: ASTERISK
                    {
                    ASTERISK482=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14159); 
                    ASTERISK482_tree = 
                    (Object)adaptor.create(ASTERISK482)
                    ;
                    adaptor.addChild(root_0, ASTERISK482_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_func_pointer14162);
            type_internal483=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal483.getTree());

            R_BR484=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer14165); 
            R_BR484_tree = 
            (Object)adaptor.create(R_BR484)
            ;
            adaptor.addChild(root_0, R_BR484_tree);


            // Objcm.g:783:65: ( func_pointer_params )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==L_BR) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // Objcm.g:783:65: func_pointer_params
                    {
                    pushFollow(FOLLOW_func_pointer_params_in_func_pointer14168);
                    func_pointer_params485=func_pointer_params();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer_params485.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer1"


    public static class func_pointer2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer2"
    // Objcm.g:786:1: func_pointer2 : L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR ;
    public final ObjcmParser.func_pointer2_return func_pointer2() throws RecognitionException {
        ObjcmParser.func_pointer2_return retval = new ObjcmParser.func_pointer2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR486=null;
        Token L_BR488=null;
        Token ASTERISK489=null;
        Token R_BR490=null;
        Token R_BR492=null;
        ObjcmParser.type_internal_return type_internal487 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params491 =null;


        Object L_BR486_tree=null;
        Object L_BR488_tree=null;
        Object ASTERISK489_tree=null;
        Object R_BR490_tree=null;
        Object R_BR492_tree=null;

        try {
            // Objcm.g:787:2: ( L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR )
            // Objcm.g:787:4: L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR486=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24181); 
            L_BR486_tree = 
            (Object)adaptor.create(L_BR486)
            ;
            adaptor.addChild(root_0, L_BR486_tree);


            pushFollow(FOLLOW_type_internal_in_func_pointer24184);
            type_internal487=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal487.getTree());

            L_BR488=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24186); 
            L_BR488_tree = 
            (Object)adaptor.create(L_BR488)
            ;
            adaptor.addChild(root_0, L_BR488_tree);


            ASTERISK489=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer24189); 
            ASTERISK489_tree = 
            (Object)adaptor.create(ASTERISK489)
            ;
            adaptor.addChild(root_0, ASTERISK489_tree);


            R_BR490=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24192); 
            R_BR490_tree = 
            (Object)adaptor.create(R_BR490)
            ;
            adaptor.addChild(root_0, R_BR490_tree);


            pushFollow(FOLLOW_func_pointer_params_in_func_pointer24195);
            func_pointer_params491=func_pointer_params();

            state._fsp--;

            adaptor.addChild(root_0, func_pointer_params491.getTree());

            R_BR492=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24198); 
            R_BR492_tree = 
            (Object)adaptor.create(R_BR492)
            ;
            adaptor.addChild(root_0, R_BR492_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer2"


    public static class func_pointer_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_params"
    // Objcm.g:790:1: func_pointer_params : L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR ;
    public final ObjcmParser.func_pointer_params_return func_pointer_params() throws RecognitionException {
        ObjcmParser.func_pointer_params_return retval = new ObjcmParser.func_pointer_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR493=null;
        Token ID494=null;
        Token ASTERISK495=null;
        Token COMMA496=null;
        Token ID497=null;
        Token ASTERISK498=null;
        Token R_BR499=null;

        Object L_BR493_tree=null;
        Object ID494_tree=null;
        Object ASTERISK495_tree=null;
        Object COMMA496_tree=null;
        Object ID497_tree=null;
        Object ASTERISK498_tree=null;
        Object R_BR499_tree=null;

        try {
            // Objcm.g:791:2: ( L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR )
            // Objcm.g:791:4: L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR493=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer_params4211); 
            L_BR493_tree = 
            (Object)adaptor.create(L_BR493)
            ;
            adaptor.addChild(root_0, L_BR493_tree);


            ID494=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4214); 
            ID494_tree = 
            (Object)adaptor.create(ID494)
            ;
            adaptor.addChild(root_0, ID494_tree);


            // Objcm.g:791:14: ( ASTERISK )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==ASTERISK) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // Objcm.g:791:14: ASTERISK
            	    {
            	    ASTERISK495=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4217); 
            	    ASTERISK495_tree = 
            	    (Object)adaptor.create(ASTERISK495)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK495_tree);


            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            // Objcm.g:791:24: ( COMMA ID ( ASTERISK )* )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==COMMA) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // Objcm.g:791:25: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA496=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_pointer_params4221); 
            	    COMMA496_tree = 
            	    (Object)adaptor.create(COMMA496)
            	    ;
            	    adaptor.addChild(root_0, COMMA496_tree);


            	    ID497=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4224); 
            	    ID497_tree = 
            	    (Object)adaptor.create(ID497)
            	    ;
            	    adaptor.addChild(root_0, ID497_tree);


            	    // Objcm.g:791:36: ( ASTERISK )*
            	    loop128:
            	    do {
            	        int alt128=2;
            	        int LA128_0 = input.LA(1);

            	        if ( (LA128_0==ASTERISK) ) {
            	            alt128=1;
            	        }


            	        switch (alt128) {
            	    	case 1 :
            	    	    // Objcm.g:791:36: ASTERISK
            	    	    {
            	    	    ASTERISK498=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4227); 
            	    	    ASTERISK498_tree = 
            	    	    (Object)adaptor.create(ASTERISK498)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK498_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop128;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            R_BR499=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer_params4232); 
            R_BR499_tree = 
            (Object)adaptor.create(R_BR499)
            ;
            adaptor.addChild(root_0, R_BR499_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_params"


    public static class in_brackets_end1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_brackets_end1"
    // Objcm.g:793:1: in_brackets_end1 : ( L_BR expression R_BR | method_start ( index_brackets )? | ( L_PLUS_PLUS | L_MINUS_MINUS ) method_start | const_expr );
    public final ObjcmParser.in_brackets_end1_return in_brackets_end1() throws RecognitionException {
        ObjcmParser.in_brackets_end1_return retval = new ObjcmParser.in_brackets_end1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR500=null;
        Token R_BR502=null;
        Token set505=null;
        ObjcmParser.expression_return expression501 =null;

        ObjcmParser.method_start_return method_start503 =null;

        ObjcmParser.index_brackets_return index_brackets504 =null;

        ObjcmParser.method_start_return method_start506 =null;

        ObjcmParser.const_expr_return const_expr507 =null;


        Object L_BR500_tree=null;
        Object R_BR502_tree=null;
        Object set505_tree=null;

        try {
            // Objcm.g:794:2: ( L_BR expression R_BR | method_start ( index_brackets )? | ( L_PLUS_PLUS | L_MINUS_MINUS ) method_start | const_expr )
            int alt131=4;
            switch ( input.LA(1) ) {
            case L_BR:
                {
                alt131=1;
                }
                break;
            case ID:
                {
                alt131=2;
                }
                break;
            case L_MINUS_MINUS:
            case L_PLUS_PLUS:
                {
                alt131=3;
                }
                break;
            case NUMBER:
            case STRING_LITERAL:
            case STRING_LITERAL2:
            case STRING_LITERAL3:
            case 170:
            case 183:
                {
                alt131=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }

            switch (alt131) {
                case 1 :
                    // Objcm.g:794:4: L_BR expression R_BR
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR500=(Token)match(input,L_BR,FOLLOW_L_BR_in_in_brackets_end14242); 
                    L_BR500_tree = 
                    (Object)adaptor.create(L_BR500)
                    ;
                    adaptor.addChild(root_0, L_BR500_tree);


                    pushFollow(FOLLOW_expression_in_in_brackets_end14245);
                    expression501=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression501.getTree());

                    R_BR502=(Token)match(input,R_BR,FOLLOW_R_BR_in_in_brackets_end14248); 
                    R_BR502_tree = 
                    (Object)adaptor.create(R_BR502)
                    ;
                    adaptor.addChild(root_0, R_BR502_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:795:4: method_start ( index_brackets )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_start_in_in_brackets_end14253);
                    method_start503=method_start();

                    state._fsp--;

                    adaptor.addChild(root_0, method_start503.getTree());

                    // Objcm.g:795:17: ( index_brackets )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==L_KBR) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // Objcm.g:795:17: index_brackets
                            {
                            pushFollow(FOLLOW_index_brackets_in_in_brackets_end14255);
                            index_brackets504=index_brackets();

                            state._fsp--;

                            adaptor.addChild(root_0, index_brackets504.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // Objcm.g:796:4: ( L_PLUS_PLUS | L_MINUS_MINUS ) method_start
                    {
                    root_0 = (Object)adaptor.nil();


                    set505=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set505)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_method_start_in_in_brackets_end14269);
                    method_start506=method_start();

                    state._fsp--;

                    adaptor.addChild(root_0, method_start506.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:797:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_in_brackets_end14274);
                    const_expr507=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr507.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_brackets_end1"


    public static class in_brackets_end2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_brackets_end2"
    // Objcm.g:800:1: in_brackets_end2 : ( L_BR expression R_BR | const_expr );
    public final ObjcmParser.in_brackets_end2_return in_brackets_end2() throws RecognitionException {
        ObjcmParser.in_brackets_end2_return retval = new ObjcmParser.in_brackets_end2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR508=null;
        Token R_BR510=null;
        ObjcmParser.expression_return expression509 =null;

        ObjcmParser.const_expr_return const_expr511 =null;


        Object L_BR508_tree=null;
        Object R_BR510_tree=null;

        try {
            // Objcm.g:801:2: ( L_BR expression R_BR | const_expr )
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==L_BR) ) {
                alt132=1;
            }
            else if ( (LA132_0==NUMBER||(LA132_0 >= STRING_LITERAL && LA132_0 <= STRING_LITERAL3)||LA132_0==170||LA132_0==183) ) {
                alt132=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;

            }
            switch (alt132) {
                case 1 :
                    // Objcm.g:801:4: L_BR expression R_BR
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR508=(Token)match(input,L_BR,FOLLOW_L_BR_in_in_brackets_end24286); 
                    L_BR508_tree = 
                    (Object)adaptor.create(L_BR508)
                    ;
                    adaptor.addChild(root_0, L_BR508_tree);


                    pushFollow(FOLLOW_expression_in_in_brackets_end24289);
                    expression509=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression509.getTree());

                    R_BR510=(Token)match(input,R_BR,FOLLOW_R_BR_in_in_brackets_end24292); 
                    R_BR510_tree = 
                    (Object)adaptor.create(R_BR510)
                    ;
                    adaptor.addChild(root_0, R_BR510_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:802:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_in_brackets_end24297);
                    const_expr511=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr511.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_brackets_end2"


    public static class method_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_start"
    // Objcm.g:805:1: method_start : ID ( method_brackets )? ;
    public final ObjcmParser.method_start_return method_start() throws RecognitionException {
        ObjcmParser.method_start_return retval = new ObjcmParser.method_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID512=null;
        ObjcmParser.method_brackets_return method_brackets513 =null;


        Object ID512_tree=null;

        try {
            // Objcm.g:806:2: ( ID ( method_brackets )? )
            // Objcm.g:806:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID512=(Token)match(input,ID,FOLLOW_ID_in_method_start4310); 
            ID512_tree = 
            (Object)adaptor.create(ID512)
            ;
            adaptor.addChild(root_0, ID512_tree);


            // Objcm.g:806:7: ( method_brackets )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==L_BR) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // Objcm.g:806:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_method_start4312);
                    method_brackets513=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets513.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_start"


    public static class in_q_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_q_brackets"
    // Objcm.g:808:1: in_q_brackets : L_FBR q_brackets_source R_FBR ;
    public final ObjcmParser.in_q_brackets_return in_q_brackets() throws RecognitionException {
        ObjcmParser.in_q_brackets_return retval = new ObjcmParser.in_q_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR514=null;
        Token R_FBR516=null;
        ObjcmParser.q_brackets_source_return q_brackets_source515 =null;


        Object L_FBR514_tree=null;
        Object R_FBR516_tree=null;

        try {
            // Objcm.g:809:2: ( L_FBR q_brackets_source R_FBR )
            // Objcm.g:809:4: L_FBR q_brackets_source R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR514=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_in_q_brackets4323); 
            L_FBR514_tree = 
            (Object)adaptor.create(L_FBR514)
            ;
            adaptor.addChild(root_0, L_FBR514_tree);


            pushFollow(FOLLOW_q_brackets_source_in_in_q_brackets4326);
            q_brackets_source515=q_brackets_source();

            state._fsp--;

            adaptor.addChild(root_0, q_brackets_source515.getTree());

            R_FBR516=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_in_q_brackets4328); 
            R_FBR516_tree = 
            (Object)adaptor.create(R_FBR516)
            ;
            adaptor.addChild(root_0, R_FBR516_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_q_brackets"


    public static class q_brackets_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_brackets_source"
    // Objcm.g:812:1: q_brackets_source : ( q_source | q_br_source );
    public final ObjcmParser.q_brackets_source_return q_brackets_source() throws RecognitionException {
        ObjcmParser.q_brackets_source_return retval = new ObjcmParser.q_brackets_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.q_source_return q_source517 =null;

        ObjcmParser.q_br_source_return q_br_source518 =null;



        try {
            // Objcm.g:813:2: ( q_source | q_br_source )
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==ASTERISK||LA134_0==ID||LA134_0==L_AND||LA134_0==L_BR||LA134_0==L_KBR||LA134_0==L_MINUS||LA134_0==L_MINUS_MINUS||LA134_0==L_NOT||LA134_0==L_PLUS||LA134_0==L_PLUS_PLUS||LA134_0==L_TILDA||LA134_0==NUMBER||LA134_0==R_FBR||LA134_0==SIZEOF||(LA134_0 >= STRING_LITERAL && LA134_0 <= STRING_LITERAL3)||LA134_0==158||LA134_0==164||LA134_0==166||LA134_0==170||LA134_0==181||LA134_0==183||LA134_0==188) ) {
                alt134=1;
            }
            else if ( (LA134_0==L_FBR) ) {
                alt134=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;

            }
            switch (alt134) {
                case 1 :
                    // Objcm.g:813:4: q_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_source_in_q_brackets_source4340);
                    q_source517=q_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_source517.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:814:4: q_br_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_br_source_in_q_brackets_source4345);
                    q_br_source518=q_br_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_br_source518.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_brackets_source"


    public static class q_br_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_br_source"
    // Objcm.g:817:1: q_br_source : in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? ;
    public final ObjcmParser.q_br_source_return q_br_source() throws RecognitionException {
        ObjcmParser.q_br_source_return retval = new ObjcmParser.q_br_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA520=null;
        Token COMMA522=null;
        ObjcmParser.in_q_brackets_return in_q_brackets519 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets521 =null;


        Object COMMA520_tree=null;
        Object COMMA522_tree=null;

        try {
            // Objcm.g:818:2: ( in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? )
            // Objcm.g:818:4: in_q_brackets ( COMMA in_q_brackets )* ( COMMA )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_in_q_brackets_in_q_br_source4358);
            in_q_brackets519=in_q_brackets();

            state._fsp--;

            adaptor.addChild(root_0, in_q_brackets519.getTree());

            // Objcm.g:818:19: ( COMMA in_q_brackets )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==COMMA) ) {
                    int LA135_1 = input.LA(2);

                    if ( (LA135_1==L_FBR) ) {
                        alt135=1;
                    }


                }


                switch (alt135) {
            	case 1 :
            	    // Objcm.g:818:20: COMMA in_q_brackets
            	    {
            	    COMMA520=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4362); 
            	    COMMA520_tree = 
            	    (Object)adaptor.create(COMMA520)
            	    ;
            	    adaptor.addChild(root_0, COMMA520_tree);


            	    pushFollow(FOLLOW_in_q_brackets_in_q_br_source4365);
            	    in_q_brackets521=in_q_brackets();

            	    state._fsp--;

            	    adaptor.addChild(root_0, in_q_brackets521.getTree());

            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            // Objcm.g:818:43: ( COMMA )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==COMMA) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // Objcm.g:818:43: COMMA
                    {
                    COMMA522=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4369); 
                    COMMA522_tree = 
                    (Object)adaptor.create(COMMA522)
                    ;
                    adaptor.addChild(root_0, COMMA522_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_br_source"


    public static class q_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_source"
    // Objcm.g:821:1: q_source : ( expression ( COMMA expression )* )? ;
    public final ObjcmParser.q_source_return q_source() throws RecognitionException {
        ObjcmParser.q_source_return retval = new ObjcmParser.q_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA524=null;
        ObjcmParser.expression_return expression523 =null;

        ObjcmParser.expression_return expression525 =null;


        Object COMMA524_tree=null;

        try {
            // Objcm.g:821:9: ( ( expression ( COMMA expression )* )? )
            // Objcm.g:821:11: ( expression ( COMMA expression )* )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:821:11: ( expression ( COMMA expression )* )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==ASTERISK||LA138_0==ID||LA138_0==L_AND||LA138_0==L_BR||LA138_0==L_KBR||LA138_0==L_MINUS||LA138_0==L_MINUS_MINUS||LA138_0==L_NOT||LA138_0==L_PLUS||LA138_0==L_PLUS_PLUS||LA138_0==L_TILDA||LA138_0==NUMBER||LA138_0==SIZEOF||(LA138_0 >= STRING_LITERAL && LA138_0 <= STRING_LITERAL3)||LA138_0==158||LA138_0==164||LA138_0==166||LA138_0==170||LA138_0==181||LA138_0==183||LA138_0==188) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // Objcm.g:821:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_q_source4381);
                    expression523=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression523.getTree());

                    // Objcm.g:821:24: ( COMMA expression )*
                    loop137:
                    do {
                        int alt137=2;
                        int LA137_0 = input.LA(1);

                        if ( (LA137_0==COMMA) ) {
                            alt137=1;
                        }


                        switch (alt137) {
                    	case 1 :
                    	    // Objcm.g:821:25: COMMA expression
                    	    {
                    	    COMMA524=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_source4385); 
                    	    COMMA524_tree = 
                    	    (Object)adaptor.create(COMMA524)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA524_tree);


                    	    pushFollow(FOLLOW_expression_in_q_source4388);
                    	    expression525=expression();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, expression525.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop137;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_source"


    public static class simple_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_method_call"
    // Objcm.g:824:1: simple_method_call : ID ( method_brackets )? ;
    public final ObjcmParser.simple_method_call_return simple_method_call() throws RecognitionException {
        ObjcmParser.simple_method_call_return retval = new ObjcmParser.simple_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID526=null;
        ObjcmParser.method_brackets_return method_brackets527 =null;


        Object ID526_tree=null;

        try {
            // Objcm.g:825:2: ( ID ( method_brackets )? )
            // Objcm.g:825:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID526=(Token)match(input,ID,FOLLOW_ID_in_simple_method_call4405); 
            ID526_tree = 
            (Object)adaptor.create(ID526)
            ;
            adaptor.addChild(root_0, ID526_tree);


            // Objcm.g:825:7: ( method_brackets )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==L_BR) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // Objcm.g:825:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_simple_method_call4407);
                    method_brackets527=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets527.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_method_call"


    public static class index_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_brackets"
    // Objcm.g:827:1: index_brackets : L_KBR classical_expr_wrp R_KBR ;
    public final ObjcmParser.index_brackets_return index_brackets() throws RecognitionException {
        ObjcmParser.index_brackets_return retval = new ObjcmParser.index_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR528=null;
        Token R_KBR530=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp529 =null;


        Object L_KBR528_tree=null;
        Object R_KBR530_tree=null;

        try {
            // Objcm.g:828:2: ( L_KBR classical_expr_wrp R_KBR )
            // Objcm.g:828:4: L_KBR classical_expr_wrp R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR528=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index_brackets4423); 
            L_KBR528_tree = 
            (Object)adaptor.create(L_KBR528)
            ;
            adaptor.addChild(root_0, L_KBR528_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_index_brackets4426);
            classical_expr_wrp529=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp529.getTree());

            R_KBR530=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index_brackets4428); 
            R_KBR530_tree = 
            (Object)adaptor.create(R_KBR530)
            ;
            adaptor.addChild(root_0, R_KBR530_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_brackets"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // Objcm.g:835:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcmParser.interface_declaration_wrapper_return retval = new ObjcmParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_declaration_return interface_declaration531 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // Objcm.g:836:2: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // Objcm.g:836:4: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper4442);
            interface_declaration531=interface_declaration();

            state._fsp--;

            stream_interface_declaration.add(interface_declaration531.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 836:26: -> ^( INTERFACE interface_declaration )
            {
                // Objcm.g:836:29: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // Objcm.g:838:1: interface_declaration : '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods )+ '@end' ;
    public final ObjcmParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcmParser.interface_declaration_return retval = new ObjcmParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal532=null;
        Token string_literal538=null;
        ObjcmParser.name_return name533 =null;

        ObjcmParser.interface_category_return interface_category534 =null;

        ObjcmParser.super_class_return super_class535 =null;

        ObjcmParser.annotated_block_return annotated_block536 =null;

        ObjcmParser.interface_methods_return interface_methods537 =null;


        Object string_literal532_tree=null;
        Object string_literal538_tree=null;

        try {
            // Objcm.g:839:2: ( '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods )+ '@end' )
            // Objcm.g:839:4: '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods )+ '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal532=(Token)match(input,162,FOLLOW_162_in_interface_declaration4460); 
            string_literal532_tree = 
            (Object)adaptor.create(string_literal532)
            ;
            adaptor.addChild(root_0, string_literal532_tree);


            pushFollow(FOLLOW_name_in_interface_declaration4463);
            name533=name();

            state._fsp--;

            adaptor.addChild(root_0, name533.getTree());

            // Objcm.g:839:24: ( interface_category )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==L_BR) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // Objcm.g:839:24: interface_category
                    {
                    pushFollow(FOLLOW_interface_category_in_interface_declaration4466);
                    interface_category534=interface_category();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_category534.getTree());

                    }
                    break;

            }


            // Objcm.g:839:44: ( super_class )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==COLON) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // Objcm.g:839:45: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_interface_declaration4470);
                    super_class535=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class535.getTree());

                    }
                    break;

            }


            // Objcm.g:840:3: ( annotated_block | interface_methods )+
            int cnt142=0;
            loop142:
            do {
                int alt142=3;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==L_FBR) ) {
                    alt142=1;
                }
                else if ( (LA142_0==ENUM_PREFIX||LA142_0==L_MINUS||LA142_0==L_PLUS) ) {
                    alt142=2;
                }


                switch (alt142) {
            	case 1 :
            	    // Objcm.g:840:4: annotated_block
            	    {
            	    pushFollow(FOLLOW_annotated_block_in_interface_declaration4477);
            	    annotated_block536=annotated_block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block536.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:840:22: interface_methods
            	    {
            	    pushFollow(FOLLOW_interface_methods_in_interface_declaration4481);
            	    interface_methods537=interface_methods();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_methods537.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt142 >= 1 ) break loop142;
                        EarlyExitException eee =
                            new EarlyExitException(142, input);
                        throw eee;
                }
                cnt142++;
            } while (true);


            string_literal538=(Token)match(input,159,FOLLOW_159_in_interface_declaration4490); 
            string_literal538_tree = 
            (Object)adaptor.create(string_literal538)
            ;
            adaptor.addChild(root_0, string_literal538_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class annotated_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block"
    // Objcm.g:844:1: annotated_block : L_FBR ( annotated_block_internal )* R_FBR ;
    public final ObjcmParser.annotated_block_return annotated_block() throws RecognitionException {
        ObjcmParser.annotated_block_return retval = new ObjcmParser.annotated_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR539=null;
        Token R_FBR541=null;
        ObjcmParser.annotated_block_internal_return annotated_block_internal540 =null;


        Object L_FBR539_tree=null;
        Object R_FBR541_tree=null;

        try {
            // Objcm.g:845:2: ( L_FBR ( annotated_block_internal )* R_FBR )
            // Objcm.g:845:4: L_FBR ( annotated_block_internal )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR539=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_annotated_block4501); 
            L_FBR539_tree = 
            (Object)adaptor.create(L_FBR539)
            ;
            adaptor.addChild(root_0, L_FBR539_tree);


            // Objcm.g:846:3: ( annotated_block_internal )*
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==ID||LA143_0==VOID||LA143_0==163||LA143_0==165||LA143_0==187) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // Objcm.g:846:3: annotated_block_internal
            	    {
            	    pushFollow(FOLLOW_annotated_block_internal_in_annotated_block4506);
            	    annotated_block_internal540=annotated_block_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block_internal540.getTree());

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            R_FBR541=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_annotated_block4511); 
            R_FBR541_tree = 
            (Object)adaptor.create(R_FBR541)
            ;
            adaptor.addChild(root_0, R_FBR541_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block"


    public static class annotated_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block_internal"
    // Objcm.g:850:1: annotated_block_internal : ( block_annotation | public_block_internal );
    public final ObjcmParser.annotated_block_internal_return annotated_block_internal() throws RecognitionException {
        ObjcmParser.annotated_block_internal_return retval = new ObjcmParser.annotated_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_annotation_return block_annotation542 =null;

        ObjcmParser.public_block_internal_return public_block_internal543 =null;



        try {
            // Objcm.g:851:2: ( block_annotation | public_block_internal )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==163||LA144_0==165) ) {
                alt144=1;
            }
            else if ( (LA144_0==ID||LA144_0==VOID||LA144_0==187) ) {
                alt144=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;

            }
            switch (alt144) {
                case 1 :
                    // Objcm.g:851:4: block_annotation
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_annotation_in_annotated_block_internal4524);
                    block_annotation542=block_annotation();

                    state._fsp--;

                    adaptor.addChild(root_0, block_annotation542.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:852:5: public_block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_public_block_internal_in_annotated_block_internal4531);
                    public_block_internal543=public_block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, public_block_internal543.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block_internal"


    public static class block_annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_annotation"
    // Objcm.g:855:1: block_annotation : ( '@public' | '@private' );
    public final ObjcmParser.block_annotation_return block_annotation() throws RecognitionException {
        ObjcmParser.block_annotation_return retval = new ObjcmParser.block_annotation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set544=null;

        Object set544_tree=null;

        try {
            // Objcm.g:856:2: ( '@public' | '@private' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set544=(Token)input.LT(1);

            if ( input.LA(1)==163||input.LA(1)==165 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set544)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_annotation"


    public static class public_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "public_block_internal"
    // Objcm.g:860:1: public_block_internal : ( simple_field_declaration | union_declaration );
    public final ObjcmParser.public_block_internal_return public_block_internal() throws RecognitionException {
        ObjcmParser.public_block_internal_return retval = new ObjcmParser.public_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_field_declaration_return simple_field_declaration545 =null;

        ObjcmParser.union_declaration_return union_declaration546 =null;



        try {
            // Objcm.g:861:2: ( simple_field_declaration | union_declaration )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==ID||LA145_0==VOID) ) {
                alt145=1;
            }
            else if ( (LA145_0==187) ) {
                alt145=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;

            }
            switch (alt145) {
                case 1 :
                    // Objcm.g:861:4: simple_field_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_field_declaration_in_public_block_internal4566);
                    simple_field_declaration545=simple_field_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, simple_field_declaration545.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:862:4: union_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_union_declaration_in_public_block_internal4571);
                    union_declaration546=union_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, union_declaration546.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "public_block_internal"


    public static class simple_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_field_declaration"
    // Objcm.g:865:1: simple_field_declaration : field_type name SEMICOLON ;
    public final ObjcmParser.simple_field_declaration_return simple_field_declaration() throws RecognitionException {
        ObjcmParser.simple_field_declaration_return retval = new ObjcmParser.simple_field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON549=null;
        ObjcmParser.field_type_return field_type547 =null;

        ObjcmParser.name_return name548 =null;


        Object SEMICOLON549_tree=null;

        try {
            // Objcm.g:866:2: ( field_type name SEMICOLON )
            // Objcm.g:866:4: field_type name SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_simple_field_declaration4583);
            field_type547=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type547.getTree());

            pushFollow(FOLLOW_name_in_simple_field_declaration4585);
            name548=name();

            state._fsp--;

            adaptor.addChild(root_0, name548.getTree());

            SEMICOLON549=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_field_declaration4588); 
            SEMICOLON549_tree = 
            (Object)adaptor.create(SEMICOLON549)
            ;
            adaptor.addChild(root_0, SEMICOLON549_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_field_declaration"


    public static class union_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_declaration"
    // Objcm.g:869:1: union_declaration : 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON ;
    public final ObjcmParser.union_declaration_return union_declaration() throws RecognitionException {
        ObjcmParser.union_declaration_return retval = new ObjcmParser.union_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal550=null;
        Token L_FBR551=null;
        Token R_FBR553=null;
        Token ID554=null;
        Token SEMICOLON555=null;
        ObjcmParser.simple_field_declaration_return simple_field_declaration552 =null;


        Object string_literal550_tree=null;
        Object L_FBR551_tree=null;
        Object R_FBR553_tree=null;
        Object ID554_tree=null;
        Object SEMICOLON555_tree=null;

        try {
            // Objcm.g:870:2: ( 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON )
            // Objcm.g:870:4: 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal550=(Token)match(input,187,FOLLOW_187_in_union_declaration4601); 
            string_literal550_tree = 
            (Object)adaptor.create(string_literal550)
            ;
            adaptor.addChild(root_0, string_literal550_tree);


            L_FBR551=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_union_declaration4604); 
            L_FBR551_tree = 
            (Object)adaptor.create(L_FBR551)
            ;
            adaptor.addChild(root_0, L_FBR551_tree);


            // Objcm.g:871:4: ( simple_field_declaration )+
            int cnt146=0;
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==ID||LA146_0==VOID) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    // Objcm.g:871:4: simple_field_declaration
            	    {
            	    pushFollow(FOLLOW_simple_field_declaration_in_union_declaration4610);
            	    simple_field_declaration552=simple_field_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_field_declaration552.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt146 >= 1 ) break loop146;
                        EarlyExitException eee =
                            new EarlyExitException(146, input);
                        throw eee;
                }
                cnt146++;
            } while (true);


            R_FBR553=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_union_declaration4615); 
            R_FBR553_tree = 
            (Object)adaptor.create(R_FBR553)
            ;
            adaptor.addChild(root_0, R_FBR553_tree);


            ID554=(Token)match(input,ID,FOLLOW_ID_in_union_declaration4618); 
            ID554_tree = 
            (Object)adaptor.create(ID554)
            ;
            adaptor.addChild(root_0, ID554_tree);


            SEMICOLON555=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_union_declaration4621); 
            SEMICOLON555_tree = 
            (Object)adaptor.create(SEMICOLON555)
            ;
            adaptor.addChild(root_0, SEMICOLON555_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_declaration"


    public static class super_class_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "super_class"
    // Objcm.g:875:1: super_class : COLON ID -> ^( SUPER_CLASS ID ) ;
    public final ObjcmParser.super_class_return super_class() throws RecognitionException {
        ObjcmParser.super_class_return retval = new ObjcmParser.super_class_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON556=null;
        Token ID557=null;

        Object COLON556_tree=null;
        Object ID557_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:876:2: ( COLON ID -> ^( SUPER_CLASS ID ) )
            // Objcm.g:876:4: COLON ID
            {
            COLON556=(Token)match(input,COLON,FOLLOW_COLON_in_super_class4635);  
            stream_COLON.add(COLON556);


            ID557=(Token)match(input,ID,FOLLOW_ID_in_super_class4638);  
            stream_ID.add(ID557);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 876:15: -> ^( SUPER_CLASS ID )
            {
                // Objcm.g:876:18: ^( SUPER_CLASS ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPER_CLASS, "SUPER_CLASS")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "super_class"


    public static class interface_category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_category"
    // Objcm.g:878:1: interface_category : L_BR ID R_BR -> ^( CATEGORY L_BR ID R_BR ) ;
    public final ObjcmParser.interface_category_return interface_category() throws RecognitionException {
        ObjcmParser.interface_category_return retval = new ObjcmParser.interface_category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR558=null;
        Token ID559=null;
        Token R_BR560=null;

        Object L_BR558_tree=null;
        Object ID559_tree=null;
        Object R_BR560_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");

        try {
            // Objcm.g:879:2: ( L_BR ID R_BR -> ^( CATEGORY L_BR ID R_BR ) )
            // Objcm.g:879:4: L_BR ID R_BR
            {
            L_BR558=(Token)match(input,L_BR,FOLLOW_L_BR_in_interface_category4658);  
            stream_L_BR.add(L_BR558);


            ID559=(Token)match(input,ID,FOLLOW_ID_in_interface_category4661);  
            stream_ID.add(ID559);


            R_BR560=(Token)match(input,R_BR,FOLLOW_R_BR_in_interface_category4664);  
            stream_R_BR.add(R_BR560);


            // AST REWRITE
            // elements: R_BR, ID, L_BR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 879:19: -> ^( CATEGORY L_BR ID R_BR )
            {
                // Objcm.g:879:22: ^( CATEGORY L_BR ID R_BR )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_L_BR.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_R_BR.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_category"


    public static class interface_methods_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_methods"
    // Objcm.g:881:1: interface_methods : ( enum_declaration | interface_method )+ ;
    public final ObjcmParser.interface_methods_return interface_methods() throws RecognitionException {
        ObjcmParser.interface_methods_return retval = new ObjcmParser.interface_methods_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.enum_declaration_return enum_declaration561 =null;

        ObjcmParser.interface_method_return interface_method562 =null;



        try {
            // Objcm.g:882:2: ( ( enum_declaration | interface_method )+ )
            // Objcm.g:882:4: ( enum_declaration | interface_method )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:882:4: ( enum_declaration | interface_method )+
            int cnt147=0;
            loop147:
            do {
                int alt147=3;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==ENUM_PREFIX) ) {
                    alt147=1;
                }
                else if ( (LA147_0==L_MINUS||LA147_0==L_PLUS) ) {
                    alt147=2;
                }


                switch (alt147) {
            	case 1 :
            	    // Objcm.g:882:5: enum_declaration
            	    {
            	    pushFollow(FOLLOW_enum_declaration_in_interface_methods4693);
            	    enum_declaration561=enum_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, enum_declaration561.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:882:24: interface_method
            	    {
            	    pushFollow(FOLLOW_interface_method_in_interface_methods4697);
            	    interface_method562=interface_method();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_method562.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt147 >= 1 ) break loop147;
                        EarlyExitException eee =
                            new EarlyExitException(147, input);
                        throw eee;
                }
                cnt147++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_methods"


    public static class interface_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_method"
    // Objcm.g:884:1: interface_method : method_header -> ^( METHOD method_header ) ;
    public final ObjcmParser.interface_method_return interface_method() throws RecognitionException {
        ObjcmParser.interface_method_return retval = new ObjcmParser.interface_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_header_return method_header563 =null;


        RewriteRuleSubtreeStream stream_method_header=new RewriteRuleSubtreeStream(adaptor,"rule method_header");
        try {
            // Objcm.g:885:2: ( method_header -> ^( METHOD method_header ) )
            // Objcm.g:885:4: method_header
            {
            pushFollow(FOLLOW_method_header_in_interface_method4709);
            method_header563=method_header();

            state._fsp--;

            stream_method_header.add(method_header563.getTree());

            // AST REWRITE
            // elements: method_header
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 885:18: -> ^( METHOD method_header )
            {
                // Objcm.g:885:21: ^( METHOD method_header )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_method_header.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_method"


    public static class method_header_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header"
    // Objcm.g:887:1: method_header : method_header_body ( SEMICOLON )? ;
    public final ObjcmParser.method_header_return method_header() throws RecognitionException {
        ObjcmParser.method_header_return retval = new ObjcmParser.method_header_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON565=null;
        ObjcmParser.method_header_body_return method_header_body564 =null;


        Object SEMICOLON565_tree=null;

        try {
            // Objcm.g:888:2: ( method_header_body ( SEMICOLON )? )
            // Objcm.g:888:4: method_header_body ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_method_header4728);
            method_header_body564=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body564.getTree());

            // Objcm.g:888:23: ( SEMICOLON )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==SEMICOLON) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // Objcm.g:888:23: SEMICOLON
                    {
                    SEMICOLON565=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_method_header4730); 
                    SEMICOLON565_tree = 
                    (Object)adaptor.create(SEMICOLON565)
                    ;
                    adaptor.addChild(root_0, SEMICOLON565_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header"


    public static class method_header_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body"
    // Objcm.g:890:1: method_header_body : method_modifier_wrapper method_type name ( method_params )? ( va_args_wrapper )? ;
    public final ObjcmParser.method_header_body_return method_header_body() throws RecognitionException {
        ObjcmParser.method_header_body_return retval = new ObjcmParser.method_header_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper566 =null;

        ObjcmParser.method_type_return method_type567 =null;

        ObjcmParser.name_return name568 =null;

        ObjcmParser.method_params_return method_params569 =null;

        ObjcmParser.va_args_wrapper_return va_args_wrapper570 =null;



        try {
            // Objcm.g:891:2: ( method_modifier_wrapper method_type name ( method_params )? ( va_args_wrapper )? )
            // Objcm.g:891:4: method_modifier_wrapper method_type name ( method_params )? ( va_args_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_header_body4740);
            method_modifier_wrapper566=method_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_modifier_wrapper566.getTree());

            pushFollow(FOLLOW_method_type_in_method_header_body4743);
            method_type567=method_type();

            state._fsp--;

            adaptor.addChild(root_0, method_type567.getTree());

            pushFollow(FOLLOW_name_in_method_header_body4746);
            name568=name();

            state._fsp--;

            adaptor.addChild(root_0, name568.getTree());

            // Objcm.g:891:48: ( method_params )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==COLON||LA149_0==ID||LA149_0==L_BR||LA149_0==181) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // Objcm.g:891:48: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_header_body4749);
                    method_params569=method_params();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params569.getTree());

                    }
                    break;

            }


            // Objcm.g:891:63: ( va_args_wrapper )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==COMMA) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // Objcm.g:891:63: va_args_wrapper
                    {
                    pushFollow(FOLLOW_va_args_wrapper_in_method_header_body4752);
                    va_args_wrapper570=va_args_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, va_args_wrapper570.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body"


    public static class va_args_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args_wrapper"
    // Objcm.g:893:1: va_args_wrapper : va_args -> ^( VA_ARGS va_args ) ;
    public final ObjcmParser.va_args_wrapper_return va_args_wrapper() throws RecognitionException {
        ObjcmParser.va_args_wrapper_return retval = new ObjcmParser.va_args_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.va_args_return va_args571 =null;


        RewriteRuleSubtreeStream stream_va_args=new RewriteRuleSubtreeStream(adaptor,"rule va_args");
        try {
            // Objcm.g:894:2: ( va_args -> ^( VA_ARGS va_args ) )
            // Objcm.g:894:4: va_args
            {
            pushFollow(FOLLOW_va_args_in_va_args_wrapper4762);
            va_args571=va_args();

            state._fsp--;

            stream_va_args.add(va_args571.getTree());

            // AST REWRITE
            // elements: va_args
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 894:12: -> ^( VA_ARGS va_args )
            {
                // Objcm.g:894:15: ^( VA_ARGS va_args )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VA_ARGS, "VA_ARGS")
                , root_1);

                adaptor.addChild(root_1, stream_va_args.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args_wrapper"


    public static class va_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args"
    // Objcm.g:896:1: va_args : COMMA '...' ( SEMICOLON )? ;
    public final ObjcmParser.va_args_return va_args() throws RecognitionException {
        ObjcmParser.va_args_return retval = new ObjcmParser.va_args_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA572=null;
        Token string_literal573=null;
        Token SEMICOLON574=null;

        Object COMMA572_tree=null;
        Object string_literal573_tree=null;
        Object SEMICOLON574_tree=null;

        try {
            // Objcm.g:896:9: ( COMMA '...' ( SEMICOLON )? )
            // Objcm.g:896:11: COMMA '...' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            COMMA572=(Token)match(input,COMMA,FOLLOW_COMMA_in_va_args4779); 
            COMMA572_tree = 
            (Object)adaptor.create(COMMA572)
            ;
            adaptor.addChild(root_0, COMMA572_tree);


            string_literal573=(Token)match(input,156,FOLLOW_156_in_va_args4782); 
            string_literal573_tree = 
            (Object)adaptor.create(string_literal573)
            ;
            adaptor.addChild(root_0, string_literal573_tree);


            // Objcm.g:896:25: ( SEMICOLON )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==SEMICOLON) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // Objcm.g:896:25: SEMICOLON
                    {
                    SEMICOLON574=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_va_args4785); 
                    SEMICOLON574_tree = 
                    (Object)adaptor.create(SEMICOLON574)
                    ;
                    adaptor.addChild(root_0, SEMICOLON574_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args"


    public static class method_header_body2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body2"
    // Objcm.g:898:1: method_header_body2 : method_type name ( method_params2 )? ;
    public final ObjcmParser.method_header_body2_return method_header_body2() throws RecognitionException {
        ObjcmParser.method_header_body2_return retval = new ObjcmParser.method_header_body2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_type_return method_type575 =null;

        ObjcmParser.name_return name576 =null;

        ObjcmParser.method_params2_return method_params2577 =null;



        try {
            // Objcm.g:899:2: ( method_type name ( method_params2 )? )
            // Objcm.g:899:4: method_type name ( method_params2 )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_type_in_method_header_body24796);
            method_type575=method_type();

            state._fsp--;

            adaptor.addChild(root_0, method_type575.getTree());

            pushFollow(FOLLOW_name_in_method_header_body24798);
            name576=name();

            state._fsp--;

            adaptor.addChild(root_0, name576.getTree());

            // Objcm.g:899:22: ( method_params2 )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==L_BR) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // Objcm.g:899:22: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_method_header_body24801);
                    method_params2577=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params2577.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body2"


    public static class method_header_body3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body3"
    // Objcm.g:901:1: method_header_body3 : method_params2 ;
    public final ObjcmParser.method_header_body3_return method_header_body3() throws RecognitionException {
        ObjcmParser.method_header_body3_return retval = new ObjcmParser.method_header_body3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2578 =null;



        try {
            // Objcm.g:902:2: ( method_params2 )
            // Objcm.g:902:4: method_params2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_header_body34811);
            method_params2578=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2578.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body3"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // Objcm.g:904:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcmParser.method_modifier_wrapper_return retval = new ObjcmParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_return method_modifier579 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // Objcm.g:905:2: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // Objcm.g:905:4: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper4820);
            method_modifier579=method_modifier();

            state._fsp--;

            stream_method_modifier.add(method_modifier579.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 905:20: -> ^( MODIFIER method_modifier )
            {
                // Objcm.g:905:23: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // Objcm.g:907:1: method_modifier : ( '+' | '-' );
    public final ObjcmParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcmParser.method_modifier_return retval = new ObjcmParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set580=null;

        Object set580_tree=null;

        try {
            // Objcm.g:908:2: ( '+' | '-' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set580=(Token)input.LT(1);

            if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set580)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_type"
    // Objcm.g:910:1: method_type : ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE type_internal ) | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR -> ^( TYPE ( ID )+ ) );
    public final ObjcmParser.method_type_return method_type() throws RecognitionException {
        ObjcmParser.method_type_return retval = new ObjcmParser.method_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR581=null;
        Token STRUCT_PREFIX582=null;
        Token ASTERISK585=null;
        Token R_BR586=null;
        Token L_BR587=null;
        Token CONST_PREFIX588=null;
        Token ID590=null;
        Token ASTERISK592=null;
        Token R_BR593=null;
        ObjcmParser.type_internal_return type_internal583 =null;

        ObjcmParser.generic_return generic584 =null;

        ObjcmParser.known_types_return known_types589 =null;

        ObjcmParser.generic_return generic591 =null;


        Object L_BR581_tree=null;
        Object STRUCT_PREFIX582_tree=null;
        Object ASTERISK585_tree=null;
        Object R_BR586_tree=null;
        Object L_BR587_tree=null;
        Object CONST_PREFIX588_tree=null;
        Object ID590_tree=null;
        Object ASTERISK592_tree=null;
        Object R_BR593_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_STRUCT_PREFIX=new RewriteRuleTokenStream(adaptor,"token STRUCT_PREFIX");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        RewriteRuleSubtreeStream stream_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_internal");
        RewriteRuleSubtreeStream stream_known_types=new RewriteRuleSubtreeStream(adaptor,"rule known_types");
        try {
            // Objcm.g:911:2: ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE type_internal ) | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR -> ^( TYPE ( ID )+ ) )
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==L_BR) ) {
                switch ( input.LA(2) ) {
                case STRUCT_PREFIX:
                    {
                    alt161=1;
                    }
                    break;
                case VOID:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        alt161=1;
                        }
                        break;
                    case L_LESS:
                        {
                        int LA161_11 = input.LA(4);

                        if ( (LA161_11==ID) ) {
                            alt161=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 161, 11, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA161_12 = input.LA(4);

                        if ( (LA161_12==R_BR) ) {
                            alt161=1;
                        }
                        else if ( (LA161_12==ASTERISK) ) {
                            alt161=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 161, 12, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt161=1;
                        }
                        break;
                    case ID:
                        {
                        alt161=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 161, 3, input);

                        throw nvae;

                    }

                    }
                    break;
                case ASTERISK:
                case CONST_PREFIX:
                case L_LESS:
                case R_BR:
                case 188:
                    {
                    alt161=2;
                    }
                    break;
                case ID:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        alt161=1;
                        }
                        break;
                    case L_LESS:
                        {
                        int LA161_16 = input.LA(4);

                        if ( (LA161_16==ID) ) {
                            alt161=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 161, 16, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA161_17 = input.LA(4);

                        if ( (LA161_17==R_BR) ) {
                            alt161=1;
                        }
                        else if ( (LA161_17==ASTERISK) ) {
                            alt161=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 161, 17, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt161=1;
                        }
                        break;
                    case ID:
                        {
                        alt161=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 161, 5, input);

                        throw nvae;

                    }

                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 161, 1, input);

                    throw nvae;

                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;

            }
            switch (alt161) {
                case 1 :
                    // Objcm.g:911:4: L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR581=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type4852);  
                    stream_L_BR.add(L_BR581);


                    // Objcm.g:911:10: ( STRUCT_PREFIX )?
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==STRUCT_PREFIX) ) {
                        alt153=1;
                    }
                    switch (alt153) {
                        case 1 :
                            // Objcm.g:911:10: STRUCT_PREFIX
                            {
                            STRUCT_PREFIX582=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_type4855);  
                            stream_STRUCT_PREFIX.add(STRUCT_PREFIX582);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_internal_in_method_type4858);
                    type_internal583=type_internal();

                    state._fsp--;

                    stream_type_internal.add(type_internal583.getTree());

                    // Objcm.g:911:40: ( generic )?
                    int alt154=2;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==L_LESS) ) {
                        alt154=1;
                    }
                    switch (alt154) {
                        case 1 :
                            // Objcm.g:911:40: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type4861);
                            generic584=generic();

                            state._fsp--;

                            stream_generic.add(generic584.getTree());

                            }
                            break;

                    }


                    // Objcm.g:911:49: ( ASTERISK )*
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);

                        if ( (LA155_0==ASTERISK) ) {
                            alt155=1;
                        }


                        switch (alt155) {
                    	case 1 :
                    	    // Objcm.g:911:49: ASTERISK
                    	    {
                    	    ASTERISK585=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type4864);  
                    	    stream_ASTERISK.add(ASTERISK585);


                    	    }
                    	    break;

                    	default :
                    	    break loop155;
                        }
                    } while (true);


                    R_BR586=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type4867);  
                    stream_R_BR.add(R_BR586);


                    // AST REWRITE
                    // elements: type_internal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 911:64: -> ^( TYPE type_internal )
                    {
                        // Objcm.g:911:67: ^( TYPE type_internal )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE, "TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_internal.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:912:5: L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR587=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type4881);  
                    stream_L_BR.add(L_BR587);


                    // Objcm.g:912:11: ( CONST_PREFIX )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==CONST_PREFIX) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // Objcm.g:912:11: CONST_PREFIX
                            {
                            CONST_PREFIX588=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_type4884);  
                            stream_CONST_PREFIX.add(CONST_PREFIX588);


                            }
                            break;

                    }


                    // Objcm.g:912:25: ( known_types )?
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==VOID||LA157_0==188) ) {
                        alt157=1;
                    }
                    switch (alt157) {
                        case 1 :
                            // Objcm.g:912:25: known_types
                            {
                            pushFollow(FOLLOW_known_types_in_method_type4887);
                            known_types589=known_types();

                            state._fsp--;

                            stream_known_types.add(known_types589.getTree());

                            }
                            break;

                    }


                    // Objcm.g:912:38: ( ID )*
                    loop158:
                    do {
                        int alt158=2;
                        int LA158_0 = input.LA(1);

                        if ( (LA158_0==ID) ) {
                            alt158=1;
                        }


                        switch (alt158) {
                    	case 1 :
                    	    // Objcm.g:912:38: ID
                    	    {
                    	    ID590=(Token)match(input,ID,FOLLOW_ID_in_method_type4890);  
                    	    stream_ID.add(ID590);


                    	    }
                    	    break;

                    	default :
                    	    break loop158;
                        }
                    } while (true);


                    // Objcm.g:912:42: ( generic )?
                    int alt159=2;
                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==L_LESS) ) {
                        alt159=1;
                    }
                    switch (alt159) {
                        case 1 :
                            // Objcm.g:912:42: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type4893);
                            generic591=generic();

                            state._fsp--;

                            stream_generic.add(generic591.getTree());

                            }
                            break;

                    }


                    // Objcm.g:912:51: ( ASTERISK )*
                    loop160:
                    do {
                        int alt160=2;
                        int LA160_0 = input.LA(1);

                        if ( (LA160_0==ASTERISK) ) {
                            alt160=1;
                        }


                        switch (alt160) {
                    	case 1 :
                    	    // Objcm.g:912:51: ASTERISK
                    	    {
                    	    ASTERISK592=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type4896);  
                    	    stream_ASTERISK.add(ASTERISK592);


                    	    }
                    	    break;

                    	default :
                    	    break loop160;
                        }
                    } while (true);


                    R_BR593=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type4899);  
                    stream_R_BR.add(R_BR593);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 912:66: -> ^( TYPE ( ID )+ )
                    {
                        // Objcm.g:912:69: ^( TYPE ( ID )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE, "TYPE")
                        , root_1);

                        if ( !(stream_ID.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_ID.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_ID.nextNode()
                            );

                        }
                        stream_ID.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_type"


    public static class type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal"
    // Objcm.g:915:1: type_internal : type_internal1 ( L_KBR R_KBR )? ;
    public final ObjcmParser.type_internal_return type_internal() throws RecognitionException {
        ObjcmParser.type_internal_return retval = new ObjcmParser.type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR595=null;
        Token R_KBR596=null;
        ObjcmParser.type_internal1_return type_internal1594 =null;


        Object L_KBR595_tree=null;
        Object R_KBR596_tree=null;

        try {
            // Objcm.g:916:2: ( type_internal1 ( L_KBR R_KBR )? )
            // Objcm.g:916:4: type_internal1 ( L_KBR R_KBR )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal1_in_type_internal4924);
            type_internal1594=type_internal1();

            state._fsp--;

            adaptor.addChild(root_0, type_internal1594.getTree());

            // Objcm.g:916:19: ( L_KBR R_KBR )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==L_KBR) ) {
                int LA162_1 = input.LA(2);

                if ( (LA162_1==R_KBR) ) {
                    alt162=1;
                }
            }
            switch (alt162) {
                case 1 :
                    // Objcm.g:916:20: L_KBR R_KBR
                    {
                    L_KBR595=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_type_internal4927); 
                    L_KBR595_tree = 
                    (Object)adaptor.create(L_KBR595)
                    ;
                    adaptor.addChild(root_0, L_KBR595_tree);


                    R_KBR596=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_type_internal4930); 
                    R_KBR596_tree = 
                    (Object)adaptor.create(R_KBR596)
                    ;
                    adaptor.addChild(root_0, R_KBR596_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal"


    public static class type_internal1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal1"
    // Objcm.g:919:1: type_internal1 : ( VOID | ID );
    public final ObjcmParser.type_internal1_return type_internal1() throws RecognitionException {
        ObjcmParser.type_internal1_return retval = new ObjcmParser.type_internal1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set597=null;

        Object set597_tree=null;

        try {
            // Objcm.g:920:2: ( VOID | ID )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set597=(Token)input.LT(1);

            if ( input.LA(1)==ID||input.LA(1)==VOID ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set597)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal1"


    public static class generic_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic"
    // Objcm.g:924:1: generic : L_LESS generic_internal L_MORE -> ^( GENERIC generic_internal ) ;
    public final ObjcmParser.generic_return generic() throws RecognitionException {
        ObjcmParser.generic_return retval = new ObjcmParser.generic_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_LESS598=null;
        Token L_MORE600=null;
        ObjcmParser.generic_internal_return generic_internal599 =null;


        Object L_LESS598_tree=null;
        Object L_MORE600_tree=null;
        RewriteRuleTokenStream stream_L_MORE=new RewriteRuleTokenStream(adaptor,"token L_MORE");
        RewriteRuleTokenStream stream_L_LESS=new RewriteRuleTokenStream(adaptor,"token L_LESS");
        RewriteRuleSubtreeStream stream_generic_internal=new RewriteRuleSubtreeStream(adaptor,"rule generic_internal");
        try {
            // Objcm.g:924:8: ( L_LESS generic_internal L_MORE -> ^( GENERIC generic_internal ) )
            // Objcm.g:924:10: L_LESS generic_internal L_MORE
            {
            L_LESS598=(Token)match(input,L_LESS,FOLLOW_L_LESS_in_generic4963);  
            stream_L_LESS.add(L_LESS598);


            pushFollow(FOLLOW_generic_internal_in_generic4965);
            generic_internal599=generic_internal();

            state._fsp--;

            stream_generic_internal.add(generic_internal599.getTree());

            L_MORE600=(Token)match(input,L_MORE,FOLLOW_L_MORE_in_generic4967);  
            stream_L_MORE.add(L_MORE600);


            // AST REWRITE
            // elements: generic_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 924:41: -> ^( GENERIC generic_internal )
            {
                // Objcm.g:924:44: ^( GENERIC generic_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GENERIC, "GENERIC")
                , root_1);

                adaptor.addChild(root_1, stream_generic_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic"


    public static class generic_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic_internal"
    // Objcm.g:926:1: generic_internal : ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* ;
    public final ObjcmParser.generic_internal_return generic_internal() throws RecognitionException {
        ObjcmParser.generic_internal_return retval = new ObjcmParser.generic_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID601=null;
        Token ASTERISK602=null;
        Token COMMA603=null;
        Token ID604=null;
        Token ASTERISK605=null;

        Object ID601_tree=null;
        Object ASTERISK602_tree=null;
        Object COMMA603_tree=null;
        Object ID604_tree=null;
        Object ASTERISK605_tree=null;

        try {
            // Objcm.g:927:2: ( ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* )
            // Objcm.g:927:5: ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )*
            {
            root_0 = (Object)adaptor.nil();


            ID601=(Token)match(input,ID,FOLLOW_ID_in_generic_internal4986); 
            ID601_tree = 
            (Object)adaptor.create(ID601)
            ;
            adaptor.addChild(root_0, ID601_tree);


            // Objcm.g:927:9: ( ASTERISK )*
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==ASTERISK) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // Objcm.g:927:9: ASTERISK
            	    {
            	    ASTERISK602=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal4989); 
            	    ASTERISK602_tree = 
            	    (Object)adaptor.create(ASTERISK602)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK602_tree);


            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);


            // Objcm.g:927:19: ( COMMA ID ( ASTERISK )* )*
            loop165:
            do {
                int alt165=2;
                int LA165_0 = input.LA(1);

                if ( (LA165_0==COMMA) ) {
                    alt165=1;
                }


                switch (alt165) {
            	case 1 :
            	    // Objcm.g:927:20: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA603=(Token)match(input,COMMA,FOLLOW_COMMA_in_generic_internal4993); 
            	    COMMA603_tree = 
            	    (Object)adaptor.create(COMMA603)
            	    ;
            	    adaptor.addChild(root_0, COMMA603_tree);


            	    ID604=(Token)match(input,ID,FOLLOW_ID_in_generic_internal4996); 
            	    ID604_tree = 
            	    (Object)adaptor.create(ID604)
            	    ;
            	    adaptor.addChild(root_0, ID604_tree);


            	    // Objcm.g:927:31: ( ASTERISK )*
            	    loop164:
            	    do {
            	        int alt164=2;
            	        int LA164_0 = input.LA(1);

            	        if ( (LA164_0==ASTERISK) ) {
            	            alt164=1;
            	        }


            	        switch (alt164) {
            	    	case 1 :
            	    	    // Objcm.g:927:31: ASTERISK
            	    	    {
            	    	    ASTERISK605=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal4999); 
            	    	    ASTERISK605_tree = 
            	    	    (Object)adaptor.create(ASTERISK605)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK605_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop164;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop165;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic_internal"


    public static class method_params2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params2"
    // Objcm.g:929:1: method_params2 : L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR ;
    public final ObjcmParser.method_params2_return method_params2() throws RecognitionException {
        ObjcmParser.method_params2_return retval = new ObjcmParser.method_params2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR606=null;
        Token COMMA608=null;
        Token R_BR610=null;
        ObjcmParser.method_param_wrapper2_return method_param_wrapper2607 =null;

        ObjcmParser.method_param_wrapper2_return method_param_wrapper2609 =null;


        Object L_BR606_tree=null;
        Object COMMA608_tree=null;
        Object R_BR610_tree=null;

        try {
            // Objcm.g:930:2: ( L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR )
            // Objcm.g:930:4: L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR606=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_params25011); 
            L_BR606_tree = 
            (Object)adaptor.create(L_BR606)
            ;
            adaptor.addChild(root_0, L_BR606_tree);


            pushFollow(FOLLOW_method_param_wrapper2_in_method_params25014);
            method_param_wrapper2607=method_param_wrapper2();

            state._fsp--;

            adaptor.addChild(root_0, method_param_wrapper2607.getTree());

            // Objcm.g:930:33: ( COMMA method_param_wrapper2 )*
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==COMMA) ) {
                    alt166=1;
                }


                switch (alt166) {
            	case 1 :
            	    // Objcm.g:930:34: COMMA method_param_wrapper2
            	    {
            	    COMMA608=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_params25018); 
            	    COMMA608_tree = 
            	    (Object)adaptor.create(COMMA608)
            	    ;
            	    adaptor.addChild(root_0, COMMA608_tree);


            	    pushFollow(FOLLOW_method_param_wrapper2_in_method_params25021);
            	    method_param_wrapper2609=method_param_wrapper2();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_param_wrapper2609.getTree());

            	    }
            	    break;

            	default :
            	    break loop166;
                }
            } while (true);


            R_BR610=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_params25025); 
            R_BR610_tree = 
            (Object)adaptor.create(R_BR610)
            ;
            adaptor.addChild(root_0, R_BR610_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params2"


    public static class method_param_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_wrapper2"
    // Objcm.g:933:1: method_param_wrapper2 : method_param2 -> ^( PARAM method_param2 ) ;
    public final ObjcmParser.method_param_wrapper2_return method_param_wrapper2() throws RecognitionException {
        ObjcmParser.method_param_wrapper2_return retval = new ObjcmParser.method_param_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param2_return method_param2611 =null;


        RewriteRuleSubtreeStream stream_method_param2=new RewriteRuleSubtreeStream(adaptor,"rule method_param2");
        try {
            // Objcm.g:934:2: ( method_param2 -> ^( PARAM method_param2 ) )
            // Objcm.g:934:4: method_param2
            {
            pushFollow(FOLLOW_method_param2_in_method_param_wrapper25036);
            method_param2611=method_param2();

            state._fsp--;

            stream_method_param2.add(method_param2611.getTree());

            // AST REWRITE
            // elements: method_param2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 934:18: -> ^( PARAM method_param2 )
            {
                // Objcm.g:934:21: ^( PARAM method_param2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM, "PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_method_param2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_wrapper2"


    public static class method_param2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param2"
    // Objcm.g:936:1: method_param2 : ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )? ;
    public final ObjcmParser.method_param2_return method_param2() throws RecognitionException {
        ObjcmParser.method_param2_return retval = new ObjcmParser.method_param2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX612=null;
        Token ENUM_PREFIX613=null;
        Token STRUCT_PREFIX614=null;
        Token string_literal615=null;
        ObjcmParser.field_type_return field_type616 =null;

        ObjcmParser.name_return name617 =null;

        ObjcmParser.indexed_return indexed618 =null;


        Object CONST_PREFIX612_tree=null;
        Object ENUM_PREFIX613_tree=null;
        Object STRUCT_PREFIX614_tree=null;
        Object string_literal615_tree=null;

        try {
            // Objcm.g:937:2: ( ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )? )
            // Objcm.g:937:4: ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:937:4: ( CONST_PREFIX )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==CONST_PREFIX) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // Objcm.g:937:4: CONST_PREFIX
                    {
                    CONST_PREFIX612=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_param25054); 
                    CONST_PREFIX612_tree = 
                    (Object)adaptor.create(CONST_PREFIX612)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX612_tree);


                    }
                    break;

            }


            // Objcm.g:937:18: ( ENUM_PREFIX )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==ENUM_PREFIX) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // Objcm.g:937:18: ENUM_PREFIX
                    {
                    ENUM_PREFIX613=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_method_param25057); 
                    ENUM_PREFIX613_tree = 
                    (Object)adaptor.create(ENUM_PREFIX613)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX613_tree);


                    }
                    break;

            }


            // Objcm.g:937:31: ( STRUCT_PREFIX )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==STRUCT_PREFIX) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // Objcm.g:937:31: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX614=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_param25060); 
                    STRUCT_PREFIX614_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX614)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX614_tree);


                    }
                    break;

            }


            // Objcm.g:937:46: ( 'unsigned' )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==188) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // Objcm.g:937:46: 'unsigned'
                    {
                    string_literal615=(Token)match(input,188,FOLLOW_188_in_method_param25063); 
                    string_literal615_tree = 
                    (Object)adaptor.create(string_literal615)
                    ;
                    adaptor.addChild(root_0, string_literal615_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_method_param25066);
            field_type616=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type616.getTree());

            // Objcm.g:937:69: ( name )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==ID||LA171_0==181) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // Objcm.g:937:69: name
                    {
                    pushFollow(FOLLOW_name_in_method_param25068);
                    name617=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name617.getTree());

                    }
                    break;

            }


            // Objcm.g:937:75: ( indexed )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==L_KBR) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // Objcm.g:937:75: indexed
                    {
                    pushFollow(FOLLOW_indexed_in_method_param25071);
                    indexed618=indexed();

                    state._fsp--;

                    adaptor.addChild(root_0, indexed618.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param2"


    public static class indexed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexed"
    // Objcm.g:939:1: indexed : L_KBR ( NUMBER )? R_KBR ;
    public final ObjcmParser.indexed_return indexed() throws RecognitionException {
        ObjcmParser.indexed_return retval = new ObjcmParser.indexed_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR619=null;
        Token NUMBER620=null;
        Token R_KBR621=null;

        Object L_KBR619_tree=null;
        Object NUMBER620_tree=null;
        Object R_KBR621_tree=null;

        try {
            // Objcm.g:939:9: ( L_KBR ( NUMBER )? R_KBR )
            // Objcm.g:939:11: L_KBR ( NUMBER )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR619=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_indexed5081); 
            L_KBR619_tree = 
            (Object)adaptor.create(L_KBR619)
            ;
            adaptor.addChild(root_0, L_KBR619_tree);


            // Objcm.g:939:17: ( NUMBER )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==NUMBER) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // Objcm.g:939:17: NUMBER
                    {
                    NUMBER620=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_indexed5083); 
                    NUMBER620_tree = 
                    (Object)adaptor.create(NUMBER620)
                    ;
                    adaptor.addChild(root_0, NUMBER620_tree);


                    }
                    break;

            }


            R_KBR621=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_indexed5086); 
            R_KBR621_tree = 
            (Object)adaptor.create(R_KBR621)
            ;
            adaptor.addChild(root_0, R_KBR621_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexed"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // Objcm.g:941:1: method_params : ( method_param )+ -> ( ^( PARAM method_param ) )+ ;
    public final ObjcmParser.method_params_return method_params() throws RecognitionException {
        ObjcmParser.method_params_return retval = new ObjcmParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param_return method_param622 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // Objcm.g:942:2: ( ( method_param )+ -> ( ^( PARAM method_param ) )+ )
            // Objcm.g:942:4: ( method_param )+
            {
            // Objcm.g:942:4: ( method_param )+
            int cnt174=0;
            loop174:
            do {
                int alt174=2;
                int LA174_0 = input.LA(1);

                if ( (LA174_0==COLON||LA174_0==ID||LA174_0==L_BR||LA174_0==181) ) {
                    alt174=1;
                }


                switch (alt174) {
            	case 1 :
            	    // Objcm.g:942:4: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params5096);
            	    method_param622=method_param();

            	    state._fsp--;

            	    stream_method_param.add(method_param622.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt174 >= 1 ) break loop174;
                        EarlyExitException eee =
                            new EarlyExitException(174, input);
                        throw eee;
                }
                cnt174++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 942:18: -> ( ^( PARAM method_param ) )+
            {
                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    // Objcm.g:942:21: ^( PARAM method_param )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(PARAM, "PARAM")
                    , root_1);

                    adaptor.addChild(root_1, stream_method_param.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_method_param.reset();

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // Objcm.g:944:1: method_param : ( ( prefix )? | COLON ) ( method_type )? name ;
    public final ObjcmParser.method_param_return method_param() throws RecognitionException {
        ObjcmParser.method_param_return retval = new ObjcmParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON624=null;
        ObjcmParser.prefix_return prefix623 =null;

        ObjcmParser.method_type_return method_type625 =null;

        ObjcmParser.name_return name626 =null;


        Object COLON624_tree=null;

        try {
            // Objcm.g:945:2: ( ( ( prefix )? | COLON ) ( method_type )? name )
            // Objcm.g:945:4: ( ( prefix )? | COLON ) ( method_type )? name
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:945:4: ( ( prefix )? | COLON )
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==ID||LA176_0==L_BR||LA176_0==181) ) {
                alt176=1;
            }
            else if ( (LA176_0==COLON) ) {
                alt176=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;

            }
            switch (alt176) {
                case 1 :
                    // Objcm.g:945:5: ( prefix )?
                    {
                    // Objcm.g:945:5: ( prefix )?
                    int alt175=2;
                    int LA175_0 = input.LA(1);

                    if ( (LA175_0==ID) ) {
                        int LA175_1 = input.LA(2);

                        if ( (LA175_1==COLON) ) {
                            alt175=1;
                        }
                    }
                    switch (alt175) {
                        case 1 :
                            // Objcm.g:945:5: prefix
                            {
                            pushFollow(FOLLOW_prefix_in_method_param5118);
                            prefix623=prefix();

                            state._fsp--;

                            adaptor.addChild(root_0, prefix623.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:945:15: COLON
                    {
                    COLON624=(Token)match(input,COLON,FOLLOW_COLON_in_method_param5123); 
                    COLON624_tree = 
                    (Object)adaptor.create(COLON624)
                    ;
                    adaptor.addChild(root_0, COLON624_tree);


                    }
                    break;

            }


            // Objcm.g:945:22: ( method_type )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==L_BR) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // Objcm.g:945:22: method_type
                    {
                    pushFollow(FOLLOW_method_type_in_method_param5126);
                    method_type625=method_type();

                    state._fsp--;

                    adaptor.addChild(root_0, method_type625.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_name_in_method_param5129);
            name626=name();

            state._fsp--;

            adaptor.addChild(root_0, name626.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // Objcm.g:948:1: prefix : ID COLON -> ^( PREFIX ID COLON ) ;
    public final ObjcmParser.prefix_return prefix() throws RecognitionException {
        ObjcmParser.prefix_return retval = new ObjcmParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID627=null;
        Token COLON628=null;

        Object ID627_tree=null;
        Object COLON628_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:948:8: ( ID COLON -> ^( PREFIX ID COLON ) )
            // Objcm.g:948:10: ID COLON
            {
            ID627=(Token)match(input,ID,FOLLOW_ID_in_prefix5141);  
            stream_ID.add(ID627);


            COLON628=(Token)match(input,COLON,FOLLOW_COLON_in_prefix5143);  
            stream_COLON.add(COLON628);


            // AST REWRITE
            // elements: ID, COLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 948:19: -> ^( PREFIX ID COLON )
            {
                // Objcm.g:948:22: ^( PREFIX ID COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PREFIX, "PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class incomplete_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "incomplete_prefix"
    // Objcm.g:950:1: incomplete_prefix : COLON -> ^( INCOMPLETE_PREFIX COLON ) ;
    public final ObjcmParser.incomplete_prefix_return incomplete_prefix() throws RecognitionException {
        ObjcmParser.incomplete_prefix_return retval = new ObjcmParser.incomplete_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON629=null;

        Object COLON629_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");

        try {
            // Objcm.g:951:2: ( COLON -> ^( INCOMPLETE_PREFIX COLON ) )
            // Objcm.g:951:4: COLON
            {
            COLON629=(Token)match(input,COLON,FOLLOW_COLON_in_incomplete_prefix5162);  
            stream_COLON.add(COLON629);


            // AST REWRITE
            // elements: COLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 951:10: -> ^( INCOMPLETE_PREFIX COLON )
            {
                // Objcm.g:951:13: ^( INCOMPLETE_PREFIX COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INCOMPLETE_PREFIX, "INCOMPLETE_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "incomplete_prefix"


    public static class typedef_struct_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_wrapper"
    // Objcm.g:958:1: typedef_struct_declaration_wrapper : typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) ;
    public final ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration630 =null;


        RewriteRuleSubtreeStream stream_typedef_struct_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_struct_declaration");
        try {
            // Objcm.g:959:2: ( typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) )
            // Objcm.g:959:4: typedef_struct_declaration
            {
            pushFollow(FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5184);
            typedef_struct_declaration630=typedef_struct_declaration();

            state._fsp--;

            stream_typedef_struct_declaration.add(typedef_struct_declaration630.getTree());

            // AST REWRITE
            // elements: typedef_struct_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 959:31: -> ^( TYPEDEF_STRUCT typedef_struct_declaration )
            {
                // Objcm.g:959:34: ^( TYPEDEF_STRUCT typedef_struct_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_STRUCT, "TYPEDEF_STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_struct_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_wrapper"


    public static class typedef_struct_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration"
    // Objcm.g:962:1: typedef_struct_declaration : STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? ;
    public final ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_return retval = new ObjcmParser.typedef_struct_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX631=null;
        Token L_FBR633=null;
        Token R_FBR635=null;
        Token SEMICOLON637=null;
        ObjcmParser.name_return name632 =null;

        ObjcmParser.typedef_struct_body_return typedef_struct_body634 =null;

        ObjcmParser.name_return name636 =null;


        Object STRUCT_PREFIX631_tree=null;
        Object L_FBR633_tree=null;
        Object R_FBR635_tree=null;
        Object SEMICOLON637_tree=null;

        try {
            // Objcm.g:963:2: ( STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? )
            // Objcm.g:963:4: STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX631=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5204); 
            STRUCT_PREFIX631_tree = 
            (Object)adaptor.create(STRUCT_PREFIX631)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX631_tree);


            // Objcm.g:963:18: ( name )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==ID||LA178_0==181) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // Objcm.g:963:18: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5206);
                    name632=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name632.getTree());

                    }
                    break;

            }


            L_FBR633=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_struct_declaration5210); 
            L_FBR633_tree = 
            (Object)adaptor.create(L_FBR633)
            ;
            adaptor.addChild(root_0, L_FBR633_tree);


            // Objcm.g:965:3: ( typedef_struct_body )+
            int cnt179=0;
            loop179:
            do {
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==ID||LA179_0==VOID) ) {
                    alt179=1;
                }


                switch (alt179) {
            	case 1 :
            	    // Objcm.g:965:3: typedef_struct_body
            	    {
            	    pushFollow(FOLLOW_typedef_struct_body_in_typedef_struct_declaration5215);
            	    typedef_struct_body634=typedef_struct_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_struct_body634.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt179 >= 1 ) break loop179;
                        EarlyExitException eee =
                            new EarlyExitException(179, input);
                        throw eee;
                }
                cnt179++;
            } while (true);


            R_FBR635=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_struct_declaration5219); 
            R_FBR635_tree = 
            (Object)adaptor.create(R_FBR635)
            ;
            adaptor.addChild(root_0, R_FBR635_tree);


            // Objcm.g:966:9: ( name )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==ID) ) {
                int LA180_1 = input.LA(2);

                if ( (LA180_1==EOF||LA180_1==CONST_PREFIX||LA180_1==L_MINUS||LA180_1==L_PLUS||LA180_1==SEMICOLON||LA180_1==STATIC_PREFIX||LA180_1==STRUCT_PREFIX||LA180_1==VOID||LA180_1==159||(LA180_1 >= 161 && LA180_1 <= 162)||LA180_1==167||LA180_1==178||LA180_1==186) ) {
                    alt180=1;
                }
                else if ( (LA180_1==ID) ) {
                    int LA180_21 = input.LA(3);

                    if ( (LA180_21==ASTERISK||LA180_21==ID||LA180_21==L_KBR||LA180_21==L_LESS||LA180_21==181) ) {
                        alt180=1;
                    }
                }
            }
            else if ( (LA180_0==181) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // Objcm.g:966:9: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5222);
                    name636=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name636.getTree());

                    }
                    break;

            }


            // Objcm.g:966:15: ( SEMICOLON )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==SEMICOLON) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // Objcm.g:966:15: SEMICOLON
                    {
                    SEMICOLON637=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_struct_declaration5225); 
                    SEMICOLON637_tree = 
                    (Object)adaptor.create(SEMICOLON637)
                    ;
                    adaptor.addChild(root_0, SEMICOLON637_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration"


    public static class typedef_struct_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_body"
    // Objcm.g:969:1: typedef_struct_body : typedef_struct_declaration_element_wrapper ;
    public final ObjcmParser.typedef_struct_body_return typedef_struct_body() throws RecognitionException {
        ObjcmParser.typedef_struct_body_return retval = new ObjcmParser.typedef_struct_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper638 =null;



        try {
            // Objcm.g:970:2: ( typedef_struct_declaration_element_wrapper )
            // Objcm.g:970:4: typedef_struct_declaration_element_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5238);
            typedef_struct_declaration_element_wrapper638=typedef_struct_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_struct_declaration_element_wrapper638.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_body"


    public static class typedef_struct_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_element_wrapper"
    // Objcm.g:973:1: typedef_struct_declaration_element_wrapper : struct_field -> ^( STRUCT_FIELD struct_field ) ;
    public final ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_element_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_field_return struct_field639 =null;


        RewriteRuleSubtreeStream stream_struct_field=new RewriteRuleSubtreeStream(adaptor,"rule struct_field");
        try {
            // Objcm.g:974:2: ( struct_field -> ^( STRUCT_FIELD struct_field ) )
            // Objcm.g:974:4: struct_field
            {
            pushFollow(FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5250);
            struct_field639=struct_field();

            state._fsp--;

            stream_struct_field.add(struct_field639.getTree());

            // AST REWRITE
            // elements: struct_field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 974:17: -> ^( STRUCT_FIELD struct_field )
            {
                // Objcm.g:974:20: ^( STRUCT_FIELD struct_field )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT_FIELD, "STRUCT_FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_struct_field.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_element_wrapper"


    public static class struct_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_field"
    // Objcm.g:976:1: struct_field : field_type name ( COMMA name )* SEMICOLON ;
    public final ObjcmParser.struct_field_return struct_field() throws RecognitionException {
        ObjcmParser.struct_field_return retval = new ObjcmParser.struct_field_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA642=null;
        Token SEMICOLON644=null;
        ObjcmParser.field_type_return field_type640 =null;

        ObjcmParser.name_return name641 =null;

        ObjcmParser.name_return name643 =null;


        Object COMMA642_tree=null;
        Object SEMICOLON644_tree=null;

        try {
            // Objcm.g:977:2: ( field_type name ( COMMA name )* SEMICOLON )
            // Objcm.g:977:4: field_type name ( COMMA name )* SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_struct_field5268);
            field_type640=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type640.getTree());

            pushFollow(FOLLOW_name_in_struct_field5270);
            name641=name();

            state._fsp--;

            adaptor.addChild(root_0, name641.getTree());

            // Objcm.g:977:21: ( COMMA name )*
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==COMMA) ) {
                    alt182=1;
                }


                switch (alt182) {
            	case 1 :
            	    // Objcm.g:977:22: COMMA name
            	    {
            	    COMMA642=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_field5274); 
            	    COMMA642_tree = 
            	    (Object)adaptor.create(COMMA642)
            	    ;
            	    adaptor.addChild(root_0, COMMA642_tree);


            	    pushFollow(FOLLOW_name_in_struct_field5277);
            	    name643=name();

            	    state._fsp--;

            	    adaptor.addChild(root_0, name643.getTree());

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);


            SEMICOLON644=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_field5281); 
            SEMICOLON644_tree = 
            (Object)adaptor.create(SEMICOLON644)
            ;
            adaptor.addChild(root_0, SEMICOLON644_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_field"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // Objcm.g:984:1: typedef_declaration_wrapper : typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_wrapper_return retval = new ObjcmParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration645 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // Objcm.g:985:2: ( typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // Objcm.g:985:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5297);
            typedef_declaration645=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration645.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 985:24: -> ^( TYPEDEF typedef_declaration )
            {
                // Objcm.g:985:27: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class enum_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_declaration"
    // Objcm.g:988:1: enum_declaration : typedef_declaration -> ^( ENUM typedef_declaration ) ;
    public final ObjcmParser.enum_declaration_return enum_declaration() throws RecognitionException {
        ObjcmParser.enum_declaration_return retval = new ObjcmParser.enum_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration646 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // Objcm.g:989:2: ( typedef_declaration -> ^( ENUM typedef_declaration ) )
            // Objcm.g:989:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_enum_declaration5317);
            typedef_declaration646=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration646.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 989:24: -> ^( ENUM typedef_declaration )
            {
                // Objcm.g:989:27: ^( ENUM typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_declaration"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // Objcm.g:991:1: typedef_declaration : ENUM_PREFIX L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON ;
    public final ObjcmParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcmParser.typedef_declaration_return retval = new ObjcmParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX647=null;
        Token L_FBR648=null;
        Token COMMA650=null;
        Token R_FBR652=null;
        Token SEMICOLON654=null;
        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper649 =null;

        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper651 =null;

        ObjcmParser.name_return name653 =null;


        Object ENUM_PREFIX647_tree=null;
        Object L_FBR648_tree=null;
        Object COMMA650_tree=null;
        Object R_FBR652_tree=null;
        Object SEMICOLON654_tree=null;

        try {
            // Objcm.g:992:2: ( ENUM_PREFIX L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON )
            // Objcm.g:992:5: ENUM_PREFIX L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX647=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_typedef_declaration5337); 
            ENUM_PREFIX647_tree = 
            (Object)adaptor.create(ENUM_PREFIX647)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX647_tree);


            L_FBR648=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_declaration5339); 
            L_FBR648_tree = 
            (Object)adaptor.create(L_FBR648)
            ;
            adaptor.addChild(root_0, L_FBR648_tree);


            pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5342);
            typedef_declaration_element_wrapper649=typedef_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_declaration_element_wrapper649.getTree());

            // Objcm.g:992:61: ( COMMA typedef_declaration_element_wrapper )*
            loop183:
            do {
                int alt183=2;
                int LA183_0 = input.LA(1);

                if ( (LA183_0==COMMA) ) {
                    alt183=1;
                }


                switch (alt183) {
            	case 1 :
            	    // Objcm.g:992:62: COMMA typedef_declaration_element_wrapper
            	    {
            	    COMMA650=(Token)match(input,COMMA,FOLLOW_COMMA_in_typedef_declaration5346); 
            	    COMMA650_tree = 
            	    (Object)adaptor.create(COMMA650)
            	    ;
            	    adaptor.addChild(root_0, COMMA650_tree);


            	    pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5349);
            	    typedef_declaration_element_wrapper651=typedef_declaration_element_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_declaration_element_wrapper651.getTree());

            	    }
            	    break;

            	default :
            	    break loop183;
                }
            } while (true);


            R_FBR652=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_declaration5353); 
            R_FBR652_tree = 
            (Object)adaptor.create(R_FBR652)
            ;
            adaptor.addChild(root_0, R_FBR652_tree);


            // Objcm.g:992:114: ( name )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==ID||LA184_0==181) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // Objcm.g:992:114: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_declaration5356);
                    name653=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name653.getTree());

                    }
                    break;

            }


            SEMICOLON654=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_declaration5359); 
            SEMICOLON654_tree = 
            (Object)adaptor.create(SEMICOLON654)
            ;
            adaptor.addChild(root_0, SEMICOLON654_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class typedef_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element_wrapper"
    // Objcm.g:994:1: typedef_declaration_element_wrapper : typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) ;
    public final ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_wrapper_return retval = new ObjcmParser.typedef_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_element_return typedef_declaration_element655 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration_element=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration_element");
        try {
            // Objcm.g:995:2: ( typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) )
            // Objcm.g:995:4: typedef_declaration_element
            {
            pushFollow(FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5369);
            typedef_declaration_element655=typedef_declaration_element();

            state._fsp--;

            stream_typedef_declaration_element.add(typedef_declaration_element655.getTree());

            // AST REWRITE
            // elements: typedef_declaration_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 995:32: -> ^( TYPEDEF_ELEMENT typedef_declaration_element )
            {
                // Objcm.g:995:35: ^( TYPEDEF_ELEMENT typedef_declaration_element )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_ELEMENT, "TYPEDEF_ELEMENT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration_element.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element_wrapper"


    public static class typedef_declaration_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element"
    // Objcm.g:998:1: typedef_declaration_element : ID ( L_EQ ( ID | NUMBER ) )? ;
    public final ObjcmParser.typedef_declaration_element_return typedef_declaration_element() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_return retval = new ObjcmParser.typedef_declaration_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID656=null;
        Token L_EQ657=null;
        Token set658=null;

        Object ID656_tree=null;
        Object L_EQ657_tree=null;
        Object set658_tree=null;

        try {
            // Objcm.g:999:2: ( ID ( L_EQ ( ID | NUMBER ) )? )
            // Objcm.g:999:4: ID ( L_EQ ( ID | NUMBER ) )?
            {
            root_0 = (Object)adaptor.nil();


            ID656=(Token)match(input,ID,FOLLOW_ID_in_typedef_declaration_element5388); 
            ID656_tree = 
            (Object)adaptor.create(ID656)
            ;
            adaptor.addChild(root_0, ID656_tree);


            // Objcm.g:999:8: ( L_EQ ( ID | NUMBER ) )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==L_EQ) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // Objcm.g:999:9: L_EQ ( ID | NUMBER )
                    {
                    L_EQ657=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_typedef_declaration_element5392); 
                    L_EQ657_tree = 
                    (Object)adaptor.create(L_EQ657)
                    ;
                    adaptor.addChild(root_0, L_EQ657_tree);


                    set658=(Token)input.LT(1);

                    if ( input.LA(1)==ID||input.LA(1)==NUMBER ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set658)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // Objcm.g:1006:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_wrapper_return retval = new ObjcmParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_return field_declaration659 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // Objcm.g:1007:2: ( field_declaration -> ^( FIELD field_declaration ) )
            // Objcm.g:1007:4: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper5416);
            field_declaration659=field_declaration();

            state._fsp--;

            stream_field_declaration.add(field_declaration659.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1007:22: -> ^( FIELD field_declaration )
            {
                // Objcm.g:1007:25: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // Objcm.g:1009:1: field_declaration : field_modifier_wrapper field_type name field_declaration_end ;
    public final ObjcmParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcmParser.field_declaration_return retval = new ObjcmParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper660 =null;

        ObjcmParser.field_type_return field_type661 =null;

        ObjcmParser.name_return name662 =null;

        ObjcmParser.field_declaration_end_return field_declaration_end663 =null;



        try {
            // Objcm.g:1010:2: ( field_modifier_wrapper field_type name field_declaration_end )
            // Objcm.g:1010:4: field_modifier_wrapper field_type name field_declaration_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_modifier_wrapper_in_field_declaration5433);
            field_modifier_wrapper660=field_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, field_modifier_wrapper660.getTree());

            pushFollow(FOLLOW_field_type_in_field_declaration5436);
            field_type661=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type661.getTree());

            pushFollow(FOLLOW_name_in_field_declaration5438);
            name662=name();

            state._fsp--;

            adaptor.addChild(root_0, name662.getTree());

            pushFollow(FOLLOW_field_declaration_end_in_field_declaration5440);
            field_declaration_end663=field_declaration_end();

            state._fsp--;

            adaptor.addChild(root_0, field_declaration_end663.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end"
    // Objcm.g:1012:1: field_declaration_end : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_declaration_end_return field_declaration_end() throws RecognitionException {
        ObjcmParser.field_declaration_end_return retval = new ObjcmParser.field_declaration_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON665=null;
        ObjcmParser.value_set_return value_set664 =null;


        Object SEMICOLON665_tree=null;

        try {
            // Objcm.g:1013:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:1013:5: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1013:5: ( value_set )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==L_EQ) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // Objcm.g:1013:5: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_declaration_end5451);
                    value_set664=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set664.getTree());

                    }
                    break;

            }


            SEMICOLON665=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration_end5454); 
            SEMICOLON665_tree = 
            (Object)adaptor.create(SEMICOLON665)
            ;
            adaptor.addChild(root_0, SEMICOLON665_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end"


    public static class type_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start_wrapper"
    // Objcm.g:1015:1: type_start_wrapper : type_start -> ^( M_TYPE_START type_start ) ;
    public final ObjcmParser.type_start_wrapper_return type_start_wrapper() throws RecognitionException {
        ObjcmParser.type_start_wrapper_return retval = new ObjcmParser.type_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_start_return type_start666 =null;


        RewriteRuleSubtreeStream stream_type_start=new RewriteRuleSubtreeStream(adaptor,"rule type_start");
        try {
            // Objcm.g:1016:2: ( type_start -> ^( M_TYPE_START type_start ) )
            // Objcm.g:1016:4: type_start
            {
            pushFollow(FOLLOW_type_start_in_type_start_wrapper5464);
            type_start666=type_start();

            state._fsp--;

            stream_type_start.add(type_start666.getTree());

            // AST REWRITE
            // elements: type_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1016:15: -> ^( M_TYPE_START type_start )
            {
                // Objcm.g:1016:18: ^( M_TYPE_START type_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(M_TYPE_START, "M_TYPE_START")
                , root_1);

                adaptor.addChild(root_1, stream_type_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start_wrapper"


    public static class type_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start"
    // Objcm.g:1018:1: type_start : ( CONST_PREFIX )? field_type name type_end ;
    public final ObjcmParser.type_start_return type_start() throws RecognitionException {
        ObjcmParser.type_start_return retval = new ObjcmParser.type_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX667=null;
        ObjcmParser.field_type_return field_type668 =null;

        ObjcmParser.name_return name669 =null;

        ObjcmParser.type_end_return type_end670 =null;


        Object CONST_PREFIX667_tree=null;

        try {
            // Objcm.g:1019:2: ( ( CONST_PREFIX )? field_type name type_end )
            // Objcm.g:1019:4: ( CONST_PREFIX )? field_type name type_end
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1019:4: ( CONST_PREFIX )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==CONST_PREFIX) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // Objcm.g:1019:4: CONST_PREFIX
                    {
                    CONST_PREFIX667=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_start5481); 
                    CONST_PREFIX667_tree = 
                    (Object)adaptor.create(CONST_PREFIX667)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX667_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_type_start5484);
            field_type668=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type668.getTree());

            pushFollow(FOLLOW_name_in_type_start5486);
            name669=name();

            state._fsp--;

            adaptor.addChild(root_0, name669.getTree());

            pushFollow(FOLLOW_type_end_in_type_start5488);
            type_end670=type_end();

            state._fsp--;

            adaptor.addChild(root_0, type_end670.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start"


    public static class type_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_end"
    // Objcm.g:1021:1: type_end : ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) );
    public final ObjcmParser.type_end_return type_end() throws RecognitionException {
        ObjcmParser.type_end_return retval = new ObjcmParser.type_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration4_return field_declaration4671 =null;

        ObjcmParser.method_declaration4_return method_declaration4672 =null;


        RewriteRuleSubtreeStream stream_field_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration4");
        RewriteRuleSubtreeStream stream_method_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration4");
        try {
            // Objcm.g:1021:9: ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) )
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==L_EQ||LA188_0==SEMICOLON) ) {
                alt188=1;
            }
            else if ( (LA188_0==L_BR) ) {
                alt188=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;

            }
            switch (alt188) {
                case 1 :
                    // Objcm.g:1021:11: field_declaration4
                    {
                    pushFollow(FOLLOW_field_declaration4_in_type_end5496);
                    field_declaration4671=field_declaration4();

                    state._fsp--;

                    stream_field_declaration4.add(field_declaration4671.getTree());

                    // AST REWRITE
                    // elements: field_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1021:30: -> ^( FIELD field_declaration4 )
                    {
                        // Objcm.g:1021:33: ^( FIELD field_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD, "FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_field_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:1022:4: method_declaration4
                    {
                    pushFollow(FOLLOW_method_declaration4_in_type_end5509);
                    method_declaration4672=method_declaration4();

                    state._fsp--;

                    stream_method_declaration4.add(method_declaration4672.getTree());

                    // AST REWRITE
                    // elements: method_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1022:24: -> ^( STATIC_METHOD method_declaration4 )
                    {
                        // Objcm.g:1022:27: ^( STATIC_METHOD method_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_end"


    public static class field_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration4"
    // Objcm.g:1025:1: field_declaration4 : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_declaration4_return field_declaration4() throws RecognitionException {
        ObjcmParser.field_declaration4_return retval = new ObjcmParser.field_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON674=null;
        ObjcmParser.value_set_return value_set673 =null;


        Object SEMICOLON674_tree=null;

        try {
            // Objcm.g:1026:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:1026:5: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1026:5: ( value_set )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==L_EQ) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // Objcm.g:1026:5: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_declaration45531);
                    value_set673=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set673.getTree());

                    }
                    break;

            }


            SEMICOLON674=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration45534); 
            SEMICOLON674_tree = 
            (Object)adaptor.create(SEMICOLON674)
            ;
            adaptor.addChild(root_0, SEMICOLON674_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration4"


    public static class method_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration4"
    // Objcm.g:1029:1: method_declaration4 : method_params2 block_wrapper ;
    public final ObjcmParser.method_declaration4_return method_declaration4() throws RecognitionException {
        ObjcmParser.method_declaration4_return retval = new ObjcmParser.method_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2675 =null;

        ObjcmParser.block_wrapper_return block_wrapper676 =null;



        try {
            // Objcm.g:1030:2: ( method_params2 block_wrapper )
            // Objcm.g:1030:5: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_declaration45547);
            method_params2675=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2675.getTree());

            pushFollow(FOLLOW_block_wrapper_in_method_declaration45552);
            block_wrapper676=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper676.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration4"


    public static class field_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier_wrapper"
    // Objcm.g:1034:1: field_modifier_wrapper : field_modifier -> ^( MODIFIER field_modifier ) ;
    public final ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper() throws RecognitionException {
        ObjcmParser.field_modifier_wrapper_return retval = new ObjcmParser.field_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_return field_modifier677 =null;


        RewriteRuleSubtreeStream stream_field_modifier=new RewriteRuleSubtreeStream(adaptor,"rule field_modifier");
        try {
            // Objcm.g:1035:2: ( field_modifier -> ^( MODIFIER field_modifier ) )
            // Objcm.g:1035:4: field_modifier
            {
            pushFollow(FOLLOW_field_modifier_in_field_modifier_wrapper5564);
            field_modifier677=field_modifier();

            state._fsp--;

            stream_field_modifier.add(field_modifier677.getTree());

            // AST REWRITE
            // elements: field_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1035:19: -> ^( MODIFIER field_modifier )
            {
                // Objcm.g:1035:22: ^( MODIFIER field_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_field_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier_wrapper"


    public static class field_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier"
    // Objcm.g:1037:1: field_modifier : 'extern' ;
    public final ObjcmParser.field_modifier_return field_modifier() throws RecognitionException {
        ObjcmParser.field_modifier_return retval = new ObjcmParser.field_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal678=null;

        Object string_literal678_tree=null;

        try {
            // Objcm.g:1038:2: ( 'extern' )
            // Objcm.g:1038:4: 'extern'
            {
            root_0 = (Object)adaptor.nil();


            string_literal678=(Token)match(input,178,FOLLOW_178_in_field_modifier5582); 
            string_literal678_tree = 
            (Object)adaptor.create(string_literal678)
            ;
            adaptor.addChild(root_0, string_literal678_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier"


    public static class field_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type"
    // Objcm.g:1041:1: field_type : field_type_internal -> ^( TYPE field_type_internal ) ;
    public final ObjcmParser.field_type_return field_type() throws RecognitionException {
        ObjcmParser.field_type_return retval = new ObjcmParser.field_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_internal_return field_type_internal679 =null;


        RewriteRuleSubtreeStream stream_field_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_type_internal");
        try {
            // Objcm.g:1042:2: ( field_type_internal -> ^( TYPE field_type_internal ) )
            // Objcm.g:1042:5: field_type_internal
            {
            pushFollow(FOLLOW_field_type_internal_in_field_type5594);
            field_type_internal679=field_type_internal();

            state._fsp--;

            stream_field_type_internal.add(field_type_internal679.getTree());

            // AST REWRITE
            // elements: field_type_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1042:25: -> ^( TYPE field_type_internal )
            {
                // Objcm.g:1042:28: ^( TYPE field_type_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE, "TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type"


    public static class field_type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_internal"
    // Objcm.g:1044:1: field_type_internal : type_internal ( generic )? ( ASTERISK )* ;
    public final ObjcmParser.field_type_internal_return field_type_internal() throws RecognitionException {
        ObjcmParser.field_type_internal_return retval = new ObjcmParser.field_type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK682=null;
        ObjcmParser.type_internal_return type_internal680 =null;

        ObjcmParser.generic_return generic681 =null;


        Object ASTERISK682_tree=null;

        try {
            // Objcm.g:1045:2: ( type_internal ( generic )? ( ASTERISK )* )
            // Objcm.g:1045:4: type_internal ( generic )? ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_field_type_internal5613);
            type_internal680=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal680.getTree());

            // Objcm.g:1045:19: ( generic )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==L_LESS) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // Objcm.g:1045:19: generic
                    {
                    pushFollow(FOLLOW_generic_in_field_type_internal5616);
                    generic681=generic();

                    state._fsp--;

                    adaptor.addChild(root_0, generic681.getTree());

                    }
                    break;

            }


            // Objcm.g:1045:28: ( ASTERISK )*
            loop191:
            do {
                int alt191=2;
                int LA191_0 = input.LA(1);

                if ( (LA191_0==ASTERISK) ) {
                    alt191=1;
                }


                switch (alt191) {
            	case 1 :
            	    // Objcm.g:1045:28: ASTERISK
            	    {
            	    ASTERISK682=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_field_type_internal5619); 
            	    ASTERISK682_tree = 
            	    (Object)adaptor.create(ASTERISK682)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK682_tree);


            	    }
            	    break;

            	default :
            	    break loop191;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_internal"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // Objcm.g:1051:1: name : name_internal -> ^( NAME name_internal ) ;
    public final ObjcmParser.name_return name() throws RecognitionException {
        ObjcmParser.name_return retval = new ObjcmParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal683 =null;


        RewriteRuleSubtreeStream stream_name_internal=new RewriteRuleSubtreeStream(adaptor,"rule name_internal");
        try {
            // Objcm.g:1052:2: ( name_internal -> ^( NAME name_internal ) )
            // Objcm.g:1052:4: name_internal
            {
            pushFollow(FOLLOW_name_internal_in_name5633);
            name_internal683=name_internal();

            state._fsp--;

            stream_name_internal.add(name_internal683.getTree());

            // AST REWRITE
            // elements: name_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1052:18: -> ^( NAME name_internal )
            {
                // Objcm.g:1052:21: ^( NAME name_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, stream_name_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_internal"
    // Objcm.g:1055:1: name_internal : ( ID | 'in' );
    public final ObjcmParser.name_internal_return name_internal() throws RecognitionException {
        ObjcmParser.name_internal_return retval = new ObjcmParser.name_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set684=null;

        Object set684_tree=null;

        try {
            // Objcm.g:1056:2: ( ID | 'in' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set684=(Token)input.LT(1);

            if ( input.LA(1)==ID||input.LA(1)==181 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set684)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_internal"


    public static class value_set_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value_set"
    // Objcm.g:1060:1: value_set : L_EQ value -> ^( VALUE value ) ;
    public final ObjcmParser.value_set_return value_set() throws RecognitionException {
        ObjcmParser.value_set_return retval = new ObjcmParser.value_set_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_EQ685=null;
        ObjcmParser.value_return value686 =null;


        Object L_EQ685_tree=null;
        RewriteRuleTokenStream stream_L_EQ=new RewriteRuleTokenStream(adaptor,"token L_EQ");
        RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
        try {
            // Objcm.g:1061:2: ( L_EQ value -> ^( VALUE value ) )
            // Objcm.g:1061:4: L_EQ value
            {
            L_EQ685=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_value_set5673);  
            stream_L_EQ.add(L_EQ685);


            pushFollow(FOLLOW_value_in_value_set5676);
            value686=value();

            state._fsp--;

            stream_value.add(value686.getTree());

            // AST REWRITE
            // elements: value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1061:16: -> ^( VALUE value )
            {
                // Objcm.g:1061:19: ^( VALUE value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VALUE, "VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "value_set"


    public static class value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value"
    // Objcm.g:1063:1: value : ( ID | string_value | null_stmt | array | NUMBER | struct_init2 );
    public final ObjcmParser.value_return value() throws RecognitionException {
        ObjcmParser.value_return retval = new ObjcmParser.value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID687=null;
        Token NUMBER691=null;
        ObjcmParser.string_value_return string_value688 =null;

        ObjcmParser.null_stmt_return null_stmt689 =null;

        ObjcmParser.array_return array690 =null;

        ObjcmParser.struct_init2_return struct_init2692 =null;


        Object ID687_tree=null;
        Object NUMBER691_tree=null;

        try {
            // Objcm.g:1063:7: ( ID | string_value | null_stmt | array | NUMBER | struct_init2 )
            int alt192=6;
            alt192 = dfa192.predict(input);
            switch (alt192) {
                case 1 :
                    // Objcm.g:1063:9: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID687=(Token)match(input,ID,FOLLOW_ID_in_value5692); 
                    ID687_tree = 
                    (Object)adaptor.create(ID687)
                    ;
                    adaptor.addChild(root_0, ID687_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:1063:14: string_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_string_value_in_value5696);
                    string_value688=string_value();

                    state._fsp--;

                    adaptor.addChild(root_0, string_value688.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:1063:29: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_value5700);
                    null_stmt689=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt689.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:1063:41: array
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_in_value5704);
                    array690=array();

                    state._fsp--;

                    adaptor.addChild(root_0, array690.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:1063:49: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER691=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_value5708); 
                    NUMBER691_tree = 
                    (Object)adaptor.create(NUMBER691)
                    ;
                    adaptor.addChild(root_0, NUMBER691_tree);


                    }
                    break;
                case 6 :
                    // Objcm.g:1063:58: struct_init2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init2_in_value5712);
                    struct_init2692=struct_init2();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init2692.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "value"


    public static class string_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_value"
    // Objcm.g:1065:1: string_value : STRING_LITERAL ;
    public final ObjcmParser.string_value_return string_value() throws RecognitionException {
        ObjcmParser.string_value_return retval = new ObjcmParser.string_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL693=null;

        Object STRING_LITERAL693_tree=null;

        try {
            // Objcm.g:1066:2: ( STRING_LITERAL )
            // Objcm.g:1066:4: STRING_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL693=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string_value5722); 
            STRING_LITERAL693_tree = 
            (Object)adaptor.create(STRING_LITERAL693)
            ;
            adaptor.addChild(root_0, STRING_LITERAL693_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_value"


    public static class null_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_stmt"
    // Objcm.g:1068:1: null_stmt : ( 'nil' | 'Nil' );
    public final ObjcmParser.null_stmt_return null_stmt() throws RecognitionException {
        ObjcmParser.null_stmt_return retval = new ObjcmParser.null_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set694=null;

        Object set694_tree=null;

        try {
            // Objcm.g:1068:11: ( 'nil' | 'Nil' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set694=(Token)input.LT(1);

            if ( input.LA(1)==170||input.LA(1)==183 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set694)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_stmt"


    public static class array_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array"
    // Objcm.g:1070:1: array : L_FBR value ( COMMA value )* R_FBR ;
    public final ObjcmParser.array_return array() throws RecognitionException {
        ObjcmParser.array_return retval = new ObjcmParser.array_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR695=null;
        Token COMMA697=null;
        Token R_FBR699=null;
        ObjcmParser.value_return value696 =null;

        ObjcmParser.value_return value698 =null;


        Object L_FBR695_tree=null;
        Object COMMA697_tree=null;
        Object R_FBR699_tree=null;

        try {
            // Objcm.g:1070:7: ( L_FBR value ( COMMA value )* R_FBR )
            // Objcm.g:1070:9: L_FBR value ( COMMA value )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR695=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array5743); 
            L_FBR695_tree = 
            (Object)adaptor.create(L_FBR695)
            ;
            adaptor.addChild(root_0, L_FBR695_tree);


            pushFollow(FOLLOW_value_in_array5746);
            value696=value();

            state._fsp--;

            adaptor.addChild(root_0, value696.getTree());

            // Objcm.g:1070:23: ( COMMA value )*
            loop193:
            do {
                int alt193=2;
                int LA193_0 = input.LA(1);

                if ( (LA193_0==COMMA) ) {
                    alt193=1;
                }


                switch (alt193) {
            	case 1 :
            	    // Objcm.g:1070:24: COMMA value
            	    {
            	    COMMA697=(Token)match(input,COMMA,FOLLOW_COMMA_in_array5750); 
            	    COMMA697_tree = 
            	    (Object)adaptor.create(COMMA697)
            	    ;
            	    adaptor.addChild(root_0, COMMA697_tree);


            	    pushFollow(FOLLOW_value_in_array5753);
            	    value698=value();

            	    state._fsp--;

            	    adaptor.addChild(root_0, value698.getTree());

            	    }
            	    break;

            	default :
            	    break loop193;
                }
            } while (true);


            R_FBR699=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array5757); 
            R_FBR699_tree = 
            (Object)adaptor.create(R_FBR699)
            ;
            adaptor.addChild(root_0, R_FBR699_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array"

    // Delegated rules


    protected DFA28 dfa28 = new DFA28(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA192 dfa192 = new DFA192(this);
    static final String DFA28_eotS =
        "\u0116\uffff";
    static final String DFA28_eofS =
        "\u0116\uffff";
    static final String DFA28_minS =
        "\1\5\15\uffff\1\5\27\uffff\1\5\1\uffff\1\5\1\uffff\2\5\2\62\2\uffff"+
        "\1\5\12\uffff\2\5\6\uffff\2\5\2\62\15\uffff\2\5\u00c0\uffff";
    static final String DFA28_maxS =
        "\1\u00bd\15\uffff\1\u00b5\27\uffff\1\u00b5\1\uffff\1\u00b5\1\uffff"+
        "\2\u00bc\2\u00b5\2\uffff\1\u00bc\12\uffff\2\u00bc\6\uffff\2\u00bc"+
        "\2\u00b5\15\uffff\2\u00bc\u00c0\uffff";
    static final String DFA28_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\22\uffff\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\uffff\1\16\1\17\1\20\1\21\1\22\32\uffff\1\6\30\uffff"+
        "\1\6\1\uffff\25\6\1\uffff\27\6\22\uffff\24\6\11\uffff\1\6\11\uffff"+
        "\1\6\1\uffff\76\6\11\uffff\1\6\11\uffff\1\6\1\uffff";
    static final String DFA28_specialS =
        "\u0116\uffff}>";
    static final String[] DFA28_transitionS = {
            "\1\6\2\uffff\1\37\11\uffff\1\5\6\uffff\1\42\30\uffff\1\6\7\uffff"+
            "\1\6\2\uffff\1\6\5\uffff\1\6\4\uffff\1\6\1\uffff\1\6\4\uffff"+
            "\1\6\5\uffff\1\6\1\uffff\1\6\3\uffff\1\6\16\uffff\1\6\16\uffff"+
            "\1\45\2\uffff\1\37\1\6\2\uffff\1\3\2\uffff\3\6\1\uffff\1\41"+
            "\16\uffff\1\44\7\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1"+
            "\2\1\1\1\6\1\uffff\1\43\3\uffff\1\4\1\32\1\uffff\1\35\1\31\1"+
            "\6\1\uffff\1\6\1\34\1\33\2\uffff\1\16\1\36",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\44\54\uffff\1\46\143\uffff\1\44\36\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\60\12\uffff\1\100\1\74\4\uffff\1\54\33\uffff\1\6\7\uffff"+
            "\2\6\1\73\1\52\1\100\2\73\1\6\1\uffff\1\53\1\6\1\73\3\6\1\73"+
            "\3\6\1\73\1\6\1\uffff\1\6\1\73\1\6\1\100\1\73\1\6\1\73\3\6\1"+
            "\73\1\uffff\1\6\1\73\33\uffff\1\100\34\uffff\1\6\4\uffff\1\55"+
            "\31\uffff\1\6",
            "",
            "\1\100\12\uffff\1\131\1\125\4\uffff\1\105\33\uffff\1\100\7"+
            "\uffff\2\100\1\124\1\103\1\100\2\124\1\100\1\uffff\1\104\1\100"+
            "\1\124\3\100\1\124\3\100\1\124\1\100\1\uffff\1\100\1\124\2\100"+
            "\1\124\1\100\1\124\3\100\1\124\1\uffff\1\100\1\124\33\uffff"+
            "\1\131\34\uffff\1\100\4\uffff\1\106\31\uffff\1\100",
            "",
            "\1\134\54\uffff\1\144\7\uffff\1\135\2\uffff\1\133\5\uffff\1"+
            "\145\4\uffff\1\136\1\uffff\1\142\4\uffff\1\137\5\uffff\1\136"+
            "\1\uffff\1\142\3\uffff\1\140\16\uffff\1\146\11\uffff\1\156\10"+
            "\uffff\1\141\5\uffff\1\147\1\150\1\151\20\uffff\1\44\7\uffff"+
            "\1\154\5\uffff\1\155\1\uffff\1\153\3\uffff\1\152\12\uffff\1"+
            "\157\1\uffff\1\152\4\uffff\1\143",
            "\1\163\54\uffff\1\173\7\uffff\1\164\2\uffff\1\162\5\uffff\1"+
            "\174\4\uffff\1\165\1\uffff\1\171\4\uffff\1\166\5\uffff\1\165"+
            "\1\uffff\1\171\3\uffff\1\167\16\uffff\1\175\13\uffff\1\161\6"+
            "\uffff\1\170\5\uffff\1\176\1\177\1\u0080\30\uffff\1\u0083\5"+
            "\uffff\1\u0084\1\uffff\1\u0082\3\uffff\1\u0081\12\uffff\1\173"+
            "\1\uffff\1\u0081\4\uffff\1\172",
            "\1\u0085\u0082\uffff\1\u0085",
            "\1\u0086\u0082\uffff\1\u0086",
            "",
            "",
            "\1\131\54\uffff\1\131\7\uffff\1\131\2\uffff\1\u0087\5\uffff"+
            "\1\131\4\uffff\1\131\1\uffff\1\131\4\uffff\1\131\5\uffff\1\131"+
            "\1\uffff\1\131\3\uffff\1\131\16\uffff\1\131\22\uffff\1\131\5"+
            "\uffff\3\131\30\uffff\1\131\5\uffff\1\131\1\uffff\1\131\3\uffff"+
            "\1\131\12\uffff\1\131\1\uffff\1\131\4\uffff\1\131",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u009b\54\uffff\1\u00a3\7\uffff\1\u009c\2\uffff\1\u009a\4"+
            "\uffff\1\u00ad\1\u00a4\4\uffff\1\u009d\1\uffff\1\u00a1\4\uffff"+
            "\1\u009e\5\uffff\1\u009d\1\uffff\1\u00a1\3\uffff\1\u009f\16"+
            "\uffff\1\u00a5\22\uffff\1\u00a0\5\uffff\1\u00a6\1\u00a7\1\u00a8"+
            "\30\uffff\1\u00ab\5\uffff\1\u00ac\1\uffff\1\u00aa\3\uffff\1"+
            "\u00a9\12\uffff\1\u00a3\1\uffff\1\u00a9\4\uffff\1\u00a2",
            "\1\131\54\uffff\1\u00b7\7\uffff\1\131\2\uffff\1\131\5\uffff"+
            "\1\131\4\uffff\1\131\1\uffff\1\131\4\uffff\1\131\5\uffff\1\131"+
            "\1\uffff\1\131\3\uffff\1\131\16\uffff\1\131\22\uffff\1\131\5"+
            "\uffff\3\131\20\uffff\1\44\7\uffff\1\131\5\uffff\1\131\1\uffff"+
            "\1\131\3\uffff\1\131\12\uffff\1\u00c1\1\uffff\1\131\4\uffff"+
            "\1\131",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c4\54\uffff\1\u00cc\7\uffff\1\u00c5\2\uffff\1\u00c3\5"+
            "\uffff\1\u00cd\4\uffff\1\u00c6\1\uffff\1\u00ca\4\uffff\1\u00c7"+
            "\5\uffff\1\u00c6\1\uffff\1\u00ca\3\uffff\1\u00c8\16\uffff\1"+
            "\u00ce\11\uffff\1\u00d6\10\uffff\1\u00c9\5\uffff\1\u00cf\1\u00d0"+
            "\1\u00d1\30\uffff\1\u00d4\5\uffff\1\u00d5\1\uffff\1\u00d3\3"+
            "\uffff\1\u00d2\12\uffff\1\u00cc\1\uffff\1\u00d2\4\uffff\1\u00cb",
            "\1\u00d8\54\uffff\1\u00e0\7\uffff\1\u00d9\2\uffff\1\u00d7\5"+
            "\uffff\1\u00e1\4\uffff\1\u00da\1\uffff\1\u00de\4\uffff\1\u00db"+
            "\5\uffff\1\u00da\1\uffff\1\u00de\3\uffff\1\u00dc\16\uffff\1"+
            "\u00e2\13\uffff\1\u00ea\6\uffff\1\u00dd\5\uffff\1\u00e3\1\u00e4"+
            "\1\u00e5\30\uffff\1\u00e8\5\uffff\1\u00e9\1\uffff\1\u00e7\3"+
            "\uffff\1\u00e6\12\uffff\1\u00e0\1\uffff\1\u00e6\4\uffff\1\u00df",
            "\1\u00eb\u0082\uffff\1\u00eb",
            "\1\u00ec\u0082\uffff\1\u00ec",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ee\54\uffff\1\u00f6\7\uffff\1\u00ef\2\uffff\1\u00ed\4"+
            "\uffff\1\u0100\1\u00f7\4\uffff\1\u00f0\1\uffff\1\u00f4\4\uffff"+
            "\1\u00f1\5\uffff\1\u00f0\1\uffff\1\u00f4\3\uffff\1\u00f2\16"+
            "\uffff\1\u00f8\22\uffff\1\u00f3\5\uffff\1\u00f9\1\u00fa\1\u00fb"+
            "\30\uffff\1\u00fe\5\uffff\1\u00ff\1\uffff\1\u00fd\3\uffff\1"+
            "\u00fc\12\uffff\1\u00f6\1\uffff\1\u00fc\4\uffff\1\u00f5",
            "\1\131\54\uffff\1\u010a\7\uffff\1\131\2\uffff\1\131\5\uffff"+
            "\1\131\4\uffff\1\131\1\uffff\1\131\4\uffff\1\131\5\uffff\1\131"+
            "\1\uffff\1\131\3\uffff\1\131\16\uffff\1\131\22\uffff\1\131\5"+
            "\uffff\3\131\20\uffff\1\44\7\uffff\1\131\5\uffff\1\131\1\uffff"+
            "\1\131\3\uffff\1\131\12\uffff\1\u0114\1\uffff\1\131\4\uffff"+
            "\1\131",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_specialS);
    static final short[][] DFA28_transition;

    static {
        int numStates = DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_transitionS[i]);
        }
    }

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;
        }
        public String getDescription() {
            return "268:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON );";
        }
    }
    static final String DFA48_eotS =
        "\u019a\uffff";
    static final String DFA48_eofS =
        "\u019a\uffff";
    static final String DFA48_minS =
        "\1\62\1\21\4\uffff\1\26\2\5\16\uffff\2\5\16\uffff\2\5\1\62\1\5\20"+
        "\uffff\1\5\10\62\1\5\1\62\5\5\3\75\u014c\uffff";
    static final String DFA48_maxS =
        "\1\u00b5\1\u00bc\4\uffff\3\u00bc\16\uffff\2\u00bc\16\uffff\1\u00bc"+
        "\1\u009b\1\u00b5\1\166\20\uffff\10\u00bc\1\u00b5\1\u009b\1\u00b5"+
        "\5\164\3\75\u014c\uffff";
    static final String DFA48_acceptS =
        "\2\uffff\1\2\1\uffff\1\3\1\1\111\uffff\23\1\1\uffff\1\1\10\uffff"+
        "\2\1\1\uffff\1\1\7\uffff\3\1\10\uffff\1\1\12\uffff\4\1\20\uffff"+
        "\4\1\17\uffff\u0093\1\1\uffff\22\1\1\uffff\16\1\1\uffff\16\1\1\uffff"+
        "\16\1\1\uffff\16\1\1\uffff\3\1";
    static final String DFA48_specialS =
        "\u019a\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\2\106\uffff\1\4\34\uffff\1\2\36\uffff\1\1",
            "\1\2\4\uffff\1\2\33\uffff\1\5\11\uffff\1\2\1\10\1\uffff\2\2"+
            "\2\uffff\1\7\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\14\uffff\1"+
            "\5\16\uffff\1\2\11\uffff\3\5\25\uffff\1\2\2\uffff\1\5\5\uffff"+
            "\1\5\1\uffff\1\5\3\uffff\1\5\12\uffff\1\6\1\uffff\1\5\4\uffff"+
            "\1\5",
            "",
            "",
            "",
            "",
            "\1\5\33\uffff\1\2\12\uffff\1\27\5\uffff\1\30\2\uffff\1\5\43"+
            "\uffff\1\2\11\uffff\1\5\16\uffff\3\2\25\uffff\1\5\2\uffff\1"+
            "\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\2\54\uffff\1\50\7\uffff\1\2\2\uffff\1\47\5\uffff\1\51\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\13\uffff\1\2\6\uffff\1\2\5\uffff\1\52"+
            "\2\2\30\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\50\1\uffff\1\2\4\uffff\1\2",
            "\1\74\54\uffff\1\104\7\uffff\1\75\2\uffff\1\73\5\uffff\1\105"+
            "\4\uffff\1\76\1\uffff\1\102\4\uffff\1\77\5\uffff\1\76\1\uffff"+
            "\1\102\3\uffff\1\100\16\uffff\1\106\11\uffff\1\2\10\uffff\1"+
            "\101\5\uffff\1\107\1\110\1\111\30\uffff\1\114\5\uffff\1\115"+
            "\1\uffff\1\113\3\uffff\1\112\12\uffff\1\104\1\uffff\1\112\4"+
            "\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\120\54\uffff\1\130\7\uffff\1\121\2\uffff\1\117\5\uffff\1"+
            "\131\4\uffff\1\122\1\uffff\1\126\4\uffff\1\123\5\uffff\1\122"+
            "\1\uffff\1\126\3\uffff\1\124\16\uffff\1\132\11\uffff\1\5\10"+
            "\uffff\1\125\5\uffff\1\133\1\134\1\135\30\uffff\1\140\5\uffff"+
            "\1\141\1\uffff\1\137\3\uffff\1\136\12\uffff\1\130\1\uffff\1"+
            "\136\4\uffff\1\127",
            "\1\5\54\uffff\1\154\7\uffff\1\5\2\uffff\1\143\5\uffff\1\155"+
            "\4\uffff\1\5\1\uffff\1\5\4\uffff\1\5\5\uffff\1\5\1\uffff\1\5"+
            "\3\uffff\1\5\16\uffff\1\5\13\uffff\1\5\6\uffff\1\5\5\uffff\1"+
            "\157\2\5\30\uffff\1\5\5\uffff\1\5\1\uffff\1\5\3\uffff\1\5\12"+
            "\uffff\1\154\1\uffff\1\5\4\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\14\uffff\1\167\37\uffff\1\171\7\uffff\1\2\2\uffff\1\2"+
            "\5\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2"+
            "\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3"+
            "\2\20\uffff\1\u0082\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\170",
            "\1\2\20\uffff\1\u008f\33\uffff\1\5\7\uffff\3\2\1\u008d\4\2"+
            "\1\uffff\1\u008e\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff\1\2"+
            "\44\uffff\1\u0090",
            "\1\u00a2\12\uffff\1\u00a1\5\uffff\1\u00a3\77\uffff\1\u00a4"+
            "\61\uffff\1\u00a2",
            "\1\2\54\uffff\1\5\7\uffff\3\2\1\uffff\4\2\2\uffff\13\2\1\uffff"+
            "\13\2\1\uffff\2\2\30\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00b8\14\uffff\1\u00b4\37\uffff\1\u00b6\7\uffff\1\u00b9"+
            "\2\uffff\1\u00b7\5\uffff\1\u00c1\4\uffff\1\u00ba\1\uffff\1\u00be"+
            "\4\uffff\1\u00bb\5\uffff\1\u00ba\1\uffff\1\u00be\3\uffff\1\u00bc"+
            "\16\uffff\1\u00c2\22\uffff\1\u00bd\5\uffff\1\u00c3\1\u00c4\1"+
            "\u00c5\20\uffff\1\u00bf\7\uffff\1\u00c8\5\uffff\1\u00c9\1\uffff"+
            "\1\u00c7\3\uffff\1\u00c6\12\uffff\1\u00c0\1\uffff\1\u00c6\4"+
            "\uffff\1\u00b5",
            "\1\u00d2\7\uffff\1\u00cb\2\uffff\1\u00ca\5\uffff\1\u00d3\4"+
            "\uffff\1\u00cc\1\uffff\1\u00d0\4\uffff\1\u00cd\5\uffff\1\u00cc"+
            "\1\uffff\1\u00d0\3\uffff\1\u00ce\16\uffff\1\u00d4\22\uffff\1"+
            "\u00cf\5\uffff\1\u00d5\1\u00d6\1\u00d7\30\uffff\1\u00da\5\uffff"+
            "\1\u00db\1\uffff\1\u00d9\3\uffff\1\u00d8\12\uffff\1\u00d2\1"+
            "\uffff\1\u00d8\4\uffff\1\u00d1",
            "\1\u00e2\12\uffff\1\u00e4\5\uffff\1\u00e3\4\uffff\1\u00dc\1"+
            "\uffff\1\u00e0\4\uffff\1\u00dd\5\uffff\1\u00dc\1\uffff\1\u00e0"+
            "\3\uffff\1\u00de\16\uffff\1\u00e5\22\uffff\1\u00df\5\uffff\1"+
            "\u00e6\1\u00e7\1\u00e8\30\uffff\1\u00eb\5\uffff\1\u00ec\1\uffff"+
            "\1\u00ea\3\uffff\1\u00e9\12\uffff\1\u00e2\1\uffff\1\u00e9\4"+
            "\uffff\1\u00e1",
            "\1\u00f2\12\uffff\1\u00f4\5\uffff\1\u00f3\6\uffff\1\u00f0\4"+
            "\uffff\1\u00ed\7\uffff\1\u00f0\3\uffff\1\u00ee\16\uffff\1\u00f5"+
            "\22\uffff\1\u00ef\5\uffff\1\u00f6\1\u00f7\1\u00f8\30\uffff\1"+
            "\u00fb\5\uffff\1\u00fc\1\uffff\1\u00fa\3\uffff\1\u00f9\12\uffff"+
            "\1\u00f2\1\uffff\1\u00f9\4\uffff\1\u00f1",
            "\1\u0101\12\uffff\1\u0103\5\uffff\1\u0102\6\uffff\1\u00ff\14"+
            "\uffff\1\u00ff\3\uffff\1\u00fd\16\uffff\1\u0104\22\uffff\1\u00fe"+
            "\5\uffff\1\u0105\1\u0106\1\u0107\30\uffff\1\u010a\5\uffff\1"+
            "\u010b\1\uffff\1\u0109\3\uffff\1\u0108\12\uffff\1\u0101\1\uffff"+
            "\1\u0108\4\uffff\1\u0100",
            "\1\u010f\12\uffff\1\u0111\5\uffff\1\u0110\6\uffff\1\u010d\14"+
            "\uffff\1\u010d\22\uffff\1\u0112\22\uffff\1\u010c\5\uffff\1\u0113"+
            "\1\u0114\1\u0115\30\uffff\1\u0118\5\uffff\1\u0119\1\uffff\1"+
            "\u0117\3\uffff\1\u0116\12\uffff\1\u010f\1\uffff\1\u0116\4\uffff"+
            "\1\u010e",
            "\1\u011c\12\uffff\1\u011e\5\uffff\1\u011d\6\uffff\1\u011a\14"+
            "\uffff\1\u011a\22\uffff\1\u011f\30\uffff\1\u0120\1\u0121\1\u0122"+
            "\30\uffff\1\u0125\5\uffff\1\u0126\1\uffff\1\u0124\3\uffff\1"+
            "\u0123\12\uffff\1\u011c\1\uffff\1\u0123\4\uffff\1\u011b",
            "\1\u0128\12\uffff\1\u012a\5\uffff\1\u0129\46\uffff\1\u012b"+
            "\30\uffff\1\u012c\1\u012d\1\u012e\30\uffff\1\u0131\5\uffff\1"+
            "\u0132\1\uffff\1\u0130\3\uffff\1\u012f\12\uffff\1\u0128\1\uffff"+
            "\1\u012f\4\uffff\1\u0127",
            "\1\u0133\u0082\uffff\1\u0133",
            "\1\u013a\13\uffff\1\2\4\uffff\1\u0136\43\uffff\1\u013f\1\u0142"+
            "\1\u0145\1\u0134\1\u013a\2\u0145\1\u013e\1\uffff\1\u0135\1\u013c"+
            "\1\u0145\1\u0138\1\u013d\1\u013b\1\u0145\1\u0139\2\u013d\1\u0145"+
            "\1\u013e\1\uffff\1\u0141\1\u0145\1\u0143\1\u013a\1\u0145\1\u013b"+
            "\1\u0145\1\u0139\1\u0144\1\u013c\1\u0145\1\uffff\1\u0140\1\u0145"+
            "\26\uffff\1\u0146\46\uffff\1\u0137",
            "\1\u0149\12\uffff\1\u0148\5\uffff\1\u014a\77\uffff\1\u014b"+
            "\61\uffff\1\u0149",
            "\1\u014d\13\uffff\1\2\50\uffff\1\u0152\1\u0155\1\u0158\1\uffff"+
            "\1\u014d\2\u0158\1\u0151\2\uffff\1\u014f\1\u0158\2\u0150\1\u014e"+
            "\1\u0158\1\u014c\2\u0150\1\u0158\1\u0151\1\uffff\1\u0154\1\u0158"+
            "\1\u0156\1\u014d\1\u0158\1\u014e\1\u0158\1\u014c\1\u0157\1\u014f"+
            "\1\u0158\1\uffff\1\u0153\1\u0158\26\uffff\1\u0159",
            "\1\u015c\13\uffff\1\2\50\uffff\1\u0161\1\u0164\1\u0167\1\uffff"+
            "\1\u015c\2\u0167\1\u0160\2\uffff\1\u015e\1\u0167\2\u015f\1\u015d"+
            "\1\u0167\1\u015b\2\u015f\1\u0167\1\u0160\1\uffff\1\u0163\1\u0167"+
            "\1\u0165\1\u015c\1\u0167\1\u015d\1\u0167\1\u015b\1\u0166\1\u015e"+
            "\1\u0167\1\uffff\1\u0162\1\u0167\26\uffff\1\u0168",
            "\1\u016b\13\uffff\1\2\50\uffff\1\u0170\1\u0173\1\u0176\1\uffff"+
            "\1\u016b\2\u0176\1\u016f\2\uffff\1\u016d\1\u0176\2\u016e\1\u016c"+
            "\1\u0176\1\u016a\2\u016e\1\u0176\1\u016f\1\uffff\1\u0172\1\u0176"+
            "\1\u0174\1\u016b\1\u0176\1\u016c\1\u0176\1\u016a\1\u0175\1\u016d"+
            "\1\u0176\1\uffff\1\u0171\1\u0176\26\uffff\1\u0177",
            "\1\u017a\13\uffff\1\2\50\uffff\1\u017f\1\u0182\1\u0185\1\uffff"+
            "\1\u017a\2\u0185\1\u017e\2\uffff\1\u017c\1\u0185\2\u017d\1\u017b"+
            "\1\u0185\1\u0179\2\u017d\1\u0185\1\u017e\1\uffff\1\u0181\1\u0185"+
            "\1\u0183\1\u017a\1\u0185\1\u017b\1\u0185\1\u0179\1\u0184\1\u017c"+
            "\1\u0185\1\uffff\1\u0180\1\u0185\26\uffff\1\u0186",
            "\1\u0189\13\uffff\1\2\50\uffff\1\u018e\1\u0191\1\u0194\1\uffff"+
            "\1\u0189\2\u0194\1\u018d\2\uffff\1\u018b\1\u0194\2\u018c\1\u018a"+
            "\1\u0194\1\u0188\2\u018c\1\u0194\1\u018d\1\uffff\1\u0190\1\u0194"+
            "\1\u0192\1\u0189\1\u0194\1\u018a\1\u0194\1\u0188\1\u0193\1\u018b"+
            "\1\u0194\1\uffff\1\u018f\1\u0194\26\uffff\1\u0195",
            "\1\u0197",
            "\1\u0198",
            "\1\u0199",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "419:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )";
        }
    }
    static final String DFA56_eotS =
        "\u046c\uffff";
    static final String DFA56_eofS =
        "\u046c\uffff";
    static final String DFA56_minS =
        "\1\62\2\5\1\uffff\2\5\2\62\1\5\6\uffff\2\5\2\62\7\uffff\1\5\10\62"+
        "\1\5\1\62\5\5\3\75\2\5\1\uffff\2\5\10\62\1\5\1\62\5\5\3\75\2\5\5"+
        "\uffff\1\5\10\62\1\5\1\62\5\5\3\75\2\5\10\62\1\5\1\62\5\5\3\75\3"+
        "\5\u03f7\uffff";
    static final String DFA56_maxS =
        "\3\u00b5\1\uffff\2\u00bc\3\u00b5\6\uffff\2\u00bc\2\u00b5\7\uffff"+
        "\10\u00bc\1\u00b5\1\u009b\1\u00b5\5\164\3\75\1\u00b5\1\u009b\1\uffff"+
        "\1\u00b5\10\u00bc\1\u00b5\1\u009b\1\u00b5\5\166\3\75\2\u00b5\5\uffff"+
        "\10\u00bc\1\u00b5\1\u009b\1\u00b5\5\164\3\75\1\u00b5\10\u00bc\1"+
        "\u00b5\1\u009b\1\u00b5\5\166\3\75\3\u00b5\u03f7\uffff";
    static final String DFA56_acceptS =
        "\3\uffff\1\2\5\uffff\1\1\153\uffff\51\1\1\uffff\u00c1\1\7\uffff"+
        "\25\1\1\uffff\2\1\3\uffff\1\1\3\uffff\u00e2\1\4\uffff\2\1\3\uffff"+
        "\2\1\4\uffff\2\1\3\uffff\u00e9\1\7\uffff\u00e2\1\4\uffff\1\1\3\uffff"+
        "\2\1\4\uffff\2\1\3\uffff\2\1\4\uffff\2\1\3\uffff";
    static final String DFA56_specialS =
        "\u046c\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\1\143\uffff\1\3\36\uffff\1\2",
            "\1\10\13\uffff\1\3\4\uffff\1\6\33\uffff\1\11\11\uffff\1\3\1"+
            "\4\1\uffff\2\3\2\uffff\1\5\1\uffff\1\3\3\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff\1"+
            "\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\7\31\uffff\1\11",
            "\1\11\13\uffff\1\3\4\uffff\1\21\33\uffff\1\11\11\uffff\1\3"+
            "\1\17\1\uffff\2\3\2\uffff\1\20\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\22\31\uffff\1\11",
            "",
            "\1\33\54\uffff\1\43\7\uffff\1\34\2\uffff\1\32\5\uffff\1\44"+
            "\4\uffff\1\35\1\uffff\1\41\4\uffff\1\36\5\uffff\1\35\1\uffff"+
            "\1\41\3\uffff\1\37\16\uffff\1\45\11\uffff\1\55\10\uffff\1\40"+
            "\5\uffff\1\46\1\47\1\50\20\uffff\1\3\7\uffff\1\53\5\uffff\1"+
            "\54\1\uffff\1\52\3\uffff\1\51\12\uffff\1\56\1\uffff\1\51\4\uffff"+
            "\1\42",
            "\1\62\54\uffff\1\72\7\uffff\1\63\2\uffff\1\61\5\uffff\1\73"+
            "\4\uffff\1\64\1\uffff\1\70\4\uffff\1\65\5\uffff\1\64\1\uffff"+
            "\1\70\3\uffff\1\66\16\uffff\1\74\13\uffff\1\60\6\uffff\1\67"+
            "\5\uffff\1\75\1\76\1\77\30\uffff\1\102\5\uffff\1\103\1\uffff"+
            "\1\101\3\uffff\1\100\12\uffff\1\72\1\uffff\1\100\4\uffff\1\71",
            "\1\104\u0082\uffff\1\104",
            "\1\105\u0082\uffff\1\105",
            "\1\11\54\uffff\1\11\12\uffff\1\3\130\uffff\1\11\36\uffff\1"+
            "\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\114\54\uffff\1\124\7\uffff\1\115\2\uffff\1\113\5\uffff\1"+
            "\125\4\uffff\1\116\1\uffff\1\122\4\uffff\1\117\5\uffff\1\116"+
            "\1\uffff\1\122\3\uffff\1\120\16\uffff\1\126\11\uffff\1\136\10"+
            "\uffff\1\121\5\uffff\1\127\1\130\1\131\30\uffff\1\134\5\uffff"+
            "\1\135\1\uffff\1\133\3\uffff\1\132\12\uffff\1\124\1\uffff\1"+
            "\132\4\uffff\1\123",
            "\1\140\54\uffff\1\150\7\uffff\1\141\2\uffff\1\137\5\uffff\1"+
            "\151\4\uffff\1\142\1\uffff\1\146\4\uffff\1\143\5\uffff\1\142"+
            "\1\uffff\1\146\3\uffff\1\144\16\uffff\1\152\13\uffff\1\162\6"+
            "\uffff\1\145\5\uffff\1\153\1\154\1\155\30\uffff\1\160\5\uffff"+
            "\1\161\1\uffff\1\157\3\uffff\1\156\12\uffff\1\150\1\uffff\1"+
            "\156\4\uffff\1\147",
            "\1\163\u0082\uffff\1\163",
            "\1\164\u0082\uffff\1\164",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\171\14\uffff\1\165\37\uffff\1\167\7\uffff\1\172\2\uffff"+
            "\1\170\5\uffff\1\u0082\4\uffff\1\173\1\uffff\1\177\4\uffff\1"+
            "\174\5\uffff\1\173\1\uffff\1\177\3\uffff\1\175\16\uffff\1\u0083"+
            "\22\uffff\1\176\5\uffff\1\u0084\1\u0085\1\u0086\20\uffff\1\u0080"+
            "\7\uffff\1\u0089\5\uffff\1\u008a\1\uffff\1\u0088\3\uffff\1\u0087"+
            "\12\uffff\1\u0081\1\uffff\1\u0087\4\uffff\1\166",
            "\1\u0093\7\uffff\1\u008c\2\uffff\1\u008b\5\uffff\1\u0094\4"+
            "\uffff\1\u008d\1\uffff\1\u0091\4\uffff\1\u008e\5\uffff\1\u008d"+
            "\1\uffff\1\u0091\3\uffff\1\u008f\16\uffff\1\u0095\22\uffff\1"+
            "\u0090\5\uffff\1\u0096\1\u0097\1\u0098\20\uffff\1\3\7\uffff"+
            "\1\u009b\5\uffff\1\u009c\1\uffff\1\u009a\3\uffff\1\u0099\12"+
            "\uffff\1\u009d\1\uffff\1\u0099\4\uffff\1\u0092",
            "\1\u00a5\12\uffff\1\u00a7\5\uffff\1\u00a6\4\uffff\1\u009f\1"+
            "\uffff\1\u00a3\4\uffff\1\u00a0\5\uffff\1\u009f\1\uffff\1\u00a3"+
            "\3\uffff\1\u00a1\16\uffff\1\u00a8\22\uffff\1\u00a2\5\uffff\1"+
            "\u00a9\1\u00aa\1\u00ab\30\uffff\1\u00ae\5\uffff\1\u00af\1\uffff"+
            "\1\u00ad\3\uffff\1\u00ac\12\uffff\1\u00a5\1\uffff\1\u00ac\4"+
            "\uffff\1\u00a4",
            "\1\u00b5\12\uffff\1\u00b7\5\uffff\1\u00b6\6\uffff\1\u00b3\4"+
            "\uffff\1\u00b0\7\uffff\1\u00b3\3\uffff\1\u00b1\16\uffff\1\u00b8"+
            "\22\uffff\1\u00b2\5\uffff\1\u00b9\1\u00ba\1\u00bb\30\uffff\1"+
            "\u00be\5\uffff\1\u00bf\1\uffff\1\u00bd\3\uffff\1\u00bc\12\uffff"+
            "\1\u00b5\1\uffff\1\u00bc\4\uffff\1\u00b4",
            "\1\u00c4\12\uffff\1\u00c6\5\uffff\1\u00c5\6\uffff\1\u00c2\14"+
            "\uffff\1\u00c2\3\uffff\1\u00c0\16\uffff\1\u00c7\22\uffff\1\u00c1"+
            "\5\uffff\1\u00c8\1\u00c9\1\u00ca\30\uffff\1\u00cd\5\uffff\1"+
            "\u00ce\1\uffff\1\u00cc\3\uffff\1\u00cb\12\uffff\1\u00c4\1\uffff"+
            "\1\u00cb\4\uffff\1\u00c3",
            "\1\u00d2\12\uffff\1\u00d4\5\uffff\1\u00d3\6\uffff\1\u00d0\14"+
            "\uffff\1\u00d0\22\uffff\1\u00d5\22\uffff\1\u00cf\5\uffff\1\u00d6"+
            "\1\u00d7\1\u00d8\30\uffff\1\u00db\5\uffff\1\u00dc\1\uffff\1"+
            "\u00da\3\uffff\1\u00d9\12\uffff\1\u00d2\1\uffff\1\u00d9\4\uffff"+
            "\1\u00d1",
            "\1\u00df\12\uffff\1\u00e1\5\uffff\1\u00e0\6\uffff\1\u00dd\14"+
            "\uffff\1\u00dd\22\uffff\1\u00e2\30\uffff\1\u00e3\1\u00e4\1\u00e5"+
            "\30\uffff\1\u00e8\5\uffff\1\u00e9\1\uffff\1\u00e7\3\uffff\1"+
            "\u00e6\12\uffff\1\u00df\1\uffff\1\u00e6\4\uffff\1\u00de",
            "\1\u00eb\12\uffff\1\u00ed\5\uffff\1\u00ec\46\uffff\1\u00ee"+
            "\30\uffff\1\u00ef\1\u00f0\1\u00f1\30\uffff\1\u00f4\5\uffff\1"+
            "\u00f5\1\uffff\1\u00f3\3\uffff\1\u00f2\12\uffff\1\u00eb\1\uffff"+
            "\1\u00f2\4\uffff\1\u00ea",
            "\1\u00f6\u0082\uffff\1\u00f6",
            "\1\u00fd\13\uffff\1\u0109\4\uffff\1\u00f9\43\uffff\1\u0102"+
            "\1\u0105\1\u0108\1\u00f7\1\u00fd\2\u0108\1\u0101\1\uffff\1\u00f8"+
            "\1\u00ff\1\u0108\1\u00fb\1\u0100\1\u00fe\1\u0108\1\u00fc\2\u0100"+
            "\1\u0108\1\u0101\1\uffff\1\u0104\1\u0108\1\u0106\1\u00fd\1\u0108"+
            "\1\u00fe\1\u0108\1\u00fc\1\u0107\1\u00ff\1\u0108\1\uffff\1\u0103"+
            "\1\u0108\26\uffff\1\u010a\46\uffff\1\u00fa",
            "\1\u010c\12\uffff\1\u010b\5\uffff\1\u010d\77\uffff\1\u010e"+
            "\61\uffff\1\u010c",
            "\1\u0110\13\uffff\1\u011c\50\uffff\1\u0115\1\u0118\1\u011b"+
            "\1\uffff\1\u0110\2\u011b\1\u0114\2\uffff\1\u0112\1\u011b\2\u0113"+
            "\1\u0111\1\u011b\1\u010f\2\u0113\1\u011b\1\u0114\1\uffff\1\u0117"+
            "\1\u011b\1\u0119\1\u0110\1\u011b\1\u0111\1\u011b\1\u010f\1\u011a"+
            "\1\u0112\1\u011b\1\uffff\1\u0116\1\u011b\26\uffff\1\u011d",
            "\1\u011f\13\uffff\1\u012b\50\uffff\1\u0124\1\u0127\1\u012a"+
            "\1\uffff\1\u011f\2\u012a\1\u0123\2\uffff\1\u0121\1\u012a\2\u0122"+
            "\1\u0120\1\u012a\1\u011e\2\u0122\1\u012a\1\u0123\1\uffff\1\u0126"+
            "\1\u012a\1\u0128\1\u011f\1\u012a\1\u0120\1\u012a\1\u011e\1\u0129"+
            "\1\u0121\1\u012a\1\uffff\1\u0125\1\u012a\26\uffff\1\u012c",
            "\1\u012e\13\uffff\1\u013a\50\uffff\1\u0133\1\u0136\1\u0139"+
            "\1\uffff\1\u012e\2\u0139\1\u0132\2\uffff\1\u0130\1\u0139\2\u0131"+
            "\1\u012f\1\u0139\1\u012d\2\u0131\1\u0139\1\u0132\1\uffff\1\u0135"+
            "\1\u0139\1\u0137\1\u012e\1\u0139\1\u012f\1\u0139\1\u012d\1\u0138"+
            "\1\u0130\1\u0139\1\uffff\1\u0134\1\u0139\26\uffff\1\u013b",
            "\1\u013d\13\uffff\1\u0149\50\uffff\1\u0142\1\u0145\1\u0148"+
            "\1\uffff\1\u013d\2\u0148\1\u0141\2\uffff\1\u013f\1\u0148\2\u0140"+
            "\1\u013e\1\u0148\1\u013c\2\u0140\1\u0148\1\u0141\1\uffff\1\u0144"+
            "\1\u0148\1\u0146\1\u013d\1\u0148\1\u013e\1\u0148\1\u013c\1\u0147"+
            "\1\u013f\1\u0148\1\uffff\1\u0143\1\u0148\26\uffff\1\u014a",
            "\1\u014c\13\uffff\1\u0158\50\uffff\1\u0151\1\u0154\1\u0157"+
            "\1\uffff\1\u014c\2\u0157\1\u0150\2\uffff\1\u014e\1\u0157\2\u014f"+
            "\1\u014d\1\u0157\1\u014b\2\u014f\1\u0157\1\u0150\1\uffff\1\u0153"+
            "\1\u0157\1\u0155\1\u014c\1\u0157\1\u014d\1\u0157\1\u014b\1\u0156"+
            "\1\u014e\1\u0157\1\uffff\1\u0152\1\u0157\26\uffff\1\u0159",
            "\1\u015a",
            "\1\u015b",
            "\1\u015c",
            "\1\11\13\uffff\1\3\4\uffff\1\u015e\33\uffff\1\11\11\uffff\1"+
            "\3\2\uffff\2\3\2\uffff\1\u015d\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u015f\31\uffff\1\11",
            "\1\u016d\13\uffff\1\u0179\4\uffff\1\u0169\43\uffff\1\u0172"+
            "\1\u0175\1\u0178\1\u0167\1\u016d\2\u0178\1\u0171\1\uffff\1\u0168"+
            "\1\u016f\1\u0178\1\u016b\1\u0170\1\u016e\1\u0178\1\u016c\2\u0170"+
            "\1\u0178\1\u0171\1\uffff\1\u0174\1\u0178\1\u0176\1\u016d\1\u0178"+
            "\1\u016e\1\u0178\1\u016c\1\u0177\1\u016f\1\u0178\1\uffff\1\u0173"+
            "\1\u0178\26\uffff\1\u017a\46\uffff\1\u016a",
            "",
            "\1\u017b\13\uffff\1\3\4\uffff\1\u017d\33\uffff\1\11\11\uffff"+
            "\2\3\1\uffff\2\3\2\uffff\1\u0182\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u017e\31\uffff\1\11",
            "\1\u018a\14\uffff\1\u0186\37\uffff\1\u0188\7\uffff\1\u018b"+
            "\2\uffff\1\u0189\5\uffff\1\u0193\4\uffff\1\u018c\1\uffff\1\u0190"+
            "\4\uffff\1\u018d\5\uffff\1\u018c\1\uffff\1\u0190\3\uffff\1\u018e"+
            "\16\uffff\1\u0194\22\uffff\1\u018f\5\uffff\1\u0195\1\u0196\1"+
            "\u0197\20\uffff\1\u0191\7\uffff\1\u019a\5\uffff\1\u019b\1\uffff"+
            "\1\u0199\3\uffff\1\u0198\12\uffff\1\u0192\1\uffff\1\u0198\4"+
            "\uffff\1\u0187",
            "\1\u01a4\7\uffff\1\u019d\2\uffff\1\u019c\5\uffff\1\u01a5\4"+
            "\uffff\1\u019e\1\uffff\1\u01a2\4\uffff\1\u019f\5\uffff\1\u019e"+
            "\1\uffff\1\u01a2\3\uffff\1\u01a0\16\uffff\1\u01a6\22\uffff\1"+
            "\u01a1\5\uffff\1\u01a7\1\u01a8\1\u01a9\30\uffff\1\u01ac\5\uffff"+
            "\1\u01ad\1\uffff\1\u01ab\3\uffff\1\u01aa\12\uffff\1\u01a4\1"+
            "\uffff\1\u01aa\4\uffff\1\u01a3",
            "\1\u01b4\12\uffff\1\u01b6\5\uffff\1\u01b5\4\uffff\1\u01ae\1"+
            "\uffff\1\u01b2\4\uffff\1\u01af\5\uffff\1\u01ae\1\uffff\1\u01b2"+
            "\3\uffff\1\u01b0\16\uffff\1\u01b7\22\uffff\1\u01b1\5\uffff\1"+
            "\u01b8\1\u01b9\1\u01ba\30\uffff\1\u01bd\5\uffff\1\u01be\1\uffff"+
            "\1\u01bc\3\uffff\1\u01bb\12\uffff\1\u01b4\1\uffff\1\u01bb\4"+
            "\uffff\1\u01b3",
            "\1\u01c4\12\uffff\1\u01c6\5\uffff\1\u01c5\6\uffff\1\u01c2\4"+
            "\uffff\1\u01bf\7\uffff\1\u01c2\3\uffff\1\u01c0\16\uffff\1\u01c7"+
            "\22\uffff\1\u01c1\5\uffff\1\u01c8\1\u01c9\1\u01ca\30\uffff\1"+
            "\u01cd\5\uffff\1\u01ce\1\uffff\1\u01cc\3\uffff\1\u01cb\12\uffff"+
            "\1\u01c4\1\uffff\1\u01cb\4\uffff\1\u01c3",
            "\1\u01d3\12\uffff\1\u01d5\5\uffff\1\u01d4\6\uffff\1\u01d1\14"+
            "\uffff\1\u01d1\3\uffff\1\u01cf\16\uffff\1\u01d6\22\uffff\1\u01d0"+
            "\5\uffff\1\u01d7\1\u01d8\1\u01d9\30\uffff\1\u01dc\5\uffff\1"+
            "\u01dd\1\uffff\1\u01db\3\uffff\1\u01da\12\uffff\1\u01d3\1\uffff"+
            "\1\u01da\4\uffff\1\u01d2",
            "\1\u01e1\12\uffff\1\u01e3\5\uffff\1\u01e2\6\uffff\1\u01df\14"+
            "\uffff\1\u01df\22\uffff\1\u01e4\22\uffff\1\u01de\5\uffff\1\u01e5"+
            "\1\u01e6\1\u01e7\30\uffff\1\u01ea\5\uffff\1\u01eb\1\uffff\1"+
            "\u01e9\3\uffff\1\u01e8\12\uffff\1\u01e1\1\uffff\1\u01e8\4\uffff"+
            "\1\u01e0",
            "\1\u01ee\12\uffff\1\u01f0\5\uffff\1\u01ef\6\uffff\1\u01ec\14"+
            "\uffff\1\u01ec\22\uffff\1\u01f1\30\uffff\1\u01f2\1\u01f3\1\u01f4"+
            "\30\uffff\1\u01f7\5\uffff\1\u01f8\1\uffff\1\u01f6\3\uffff\1"+
            "\u01f5\12\uffff\1\u01ee\1\uffff\1\u01f5\4\uffff\1\u01ed",
            "\1\u01fa\12\uffff\1\u01fc\5\uffff\1\u01fb\46\uffff\1\u01fd"+
            "\30\uffff\1\u01fe\1\u01ff\1\u0200\30\uffff\1\u0203\5\uffff\1"+
            "\u0204\1\uffff\1\u0202\3\uffff\1\u0201\12\uffff\1\u01fa\1\uffff"+
            "\1\u0201\4\uffff\1\u01f9",
            "\1\u0205\u0082\uffff\1\u0205",
            "\1\u020c\20\uffff\1\u0208\43\uffff\1\u0211\1\u0214\1\u0217"+
            "\1\u0206\1\u020c\2\u0217\1\u0210\1\uffff\1\u0207\1\u020e\1\u0217"+
            "\1\u020a\1\u020f\1\u020d\1\u0217\1\u020b\2\u020f\1\u0217\1\u0210"+
            "\1\uffff\1\u0213\1\u0217\1\u0215\1\u020c\1\u0217\1\u020d\1\u0217"+
            "\1\u020b\1\u0216\1\u020e\1\u0217\1\uffff\1\u0212\1\u0217\30"+
            "\uffff\1\u0218\44\uffff\1\u0209",
            "\1\u021a\12\uffff\1\u0219\5\uffff\1\u021b\77\uffff\1\u021c"+
            "\61\uffff\1\u021a",
            "\1\u021e\64\uffff\1\u0223\1\u0226\1\u0229\1\uffff\1\u021e\2"+
            "\u0229\1\u0222\2\uffff\1\u0220\1\u0229\2\u0221\1\u021f\1\u0229"+
            "\1\u021d\2\u0221\1\u0229\1\u0222\1\uffff\1\u0225\1\u0229\1\u0227"+
            "\1\u021e\1\u0229\1\u021f\1\u0229\1\u021d\1\u0228\1\u0220\1\u0229"+
            "\1\uffff\1\u0224\1\u0229\30\uffff\1\u022a",
            "\1\u022c\64\uffff\1\u0231\1\u0234\1\u0237\1\uffff\1\u022c\2"+
            "\u0237\1\u0230\2\uffff\1\u022e\1\u0237\2\u022f\1\u022d\1\u0237"+
            "\1\u022b\2\u022f\1\u0237\1\u0230\1\uffff\1\u0233\1\u0237\1\u0235"+
            "\1\u022c\1\u0237\1\u022d\1\u0237\1\u022b\1\u0236\1\u022e\1\u0237"+
            "\1\uffff\1\u0232\1\u0237\30\uffff\1\u0238",
            "\1\u023a\64\uffff\1\u023f\1\u0242\1\u0245\1\uffff\1\u023a\2"+
            "\u0245\1\u023e\2\uffff\1\u023c\1\u0245\2\u023d\1\u023b\1\u0245"+
            "\1\u0239\2\u023d\1\u0245\1\u023e\1\uffff\1\u0241\1\u0245\1\u0243"+
            "\1\u023a\1\u0245\1\u023b\1\u0245\1\u0239\1\u0244\1\u023c\1\u0245"+
            "\1\uffff\1\u0240\1\u0245\30\uffff\1\u0246",
            "\1\u0248\64\uffff\1\u024d\1\u0250\1\u0253\1\uffff\1\u0248\2"+
            "\u0253\1\u024c\2\uffff\1\u024a\1\u0253\2\u024b\1\u0249\1\u0253"+
            "\1\u0247\2\u024b\1\u0253\1\u024c\1\uffff\1\u024f\1\u0253\1\u0251"+
            "\1\u0248\1\u0253\1\u0249\1\u0253\1\u0247\1\u0252\1\u024a\1\u0253"+
            "\1\uffff\1\u024e\1\u0253\30\uffff\1\u0254",
            "\1\u0256\64\uffff\1\u025b\1\u025e\1\u0261\1\uffff\1\u0256\2"+
            "\u0261\1\u025a\2\uffff\1\u0258\1\u0261\2\u0259\1\u0257\1\u0261"+
            "\1\u0255\2\u0259\1\u0261\1\u025a\1\uffff\1\u025d\1\u0261\1\u025f"+
            "\1\u0256\1\u0261\1\u0257\1\u0261\1\u0255\1\u0260\1\u0258\1\u0261"+
            "\1\uffff\1\u025c\1\u0261\30\uffff\1\u0262",
            "\1\u0263",
            "\1\u0264",
            "\1\u0265",
            "\1\11\13\uffff\1\3\4\uffff\1\u026c\33\uffff\1\11\11\uffff\1"+
            "\3\1\u0266\1\uffff\2\3\2\uffff\1\u0267\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u026d\31"+
            "\uffff\1\11",
            "\1\11\13\uffff\1\3\4\uffff\1\u0277\33\uffff\1\11\11\uffff\1"+
            "\3\1\u0271\1\uffff\2\3\2\uffff\1\u0272\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u0278\31"+
            "\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\u0280\14\uffff\1\u027c\37\uffff\1\u027e\7\uffff\1\u0281"+
            "\2\uffff\1\u027f\5\uffff\1\u0289\4\uffff\1\u0282\1\uffff\1\u0286"+
            "\4\uffff\1\u0283\5\uffff\1\u0282\1\uffff\1\u0286\3\uffff\1\u0284"+
            "\16\uffff\1\u028a\22\uffff\1\u0285\5\uffff\1\u028b\1\u028c\1"+
            "\u028d\20\uffff\1\u0287\7\uffff\1\u0290\5\uffff\1\u0291\1\uffff"+
            "\1\u028f\3\uffff\1\u028e\12\uffff\1\u0288\1\uffff\1\u028e\4"+
            "\uffff\1\u027d",
            "\1\u029a\7\uffff\1\u0293\2\uffff\1\u0292\5\uffff\1\u029b\4"+
            "\uffff\1\u0294\1\uffff\1\u0298\4\uffff\1\u0295\5\uffff\1\u0294"+
            "\1\uffff\1\u0298\3\uffff\1\u0296\16\uffff\1\u029c\22\uffff\1"+
            "\u0297\5\uffff\1\u029d\1\u029e\1\u029f\30\uffff\1\u02a2\5\uffff"+
            "\1\u02a3\1\uffff\1\u02a1\3\uffff\1\u02a0\12\uffff\1\u029a\1"+
            "\uffff\1\u02a0\4\uffff\1\u0299",
            "\1\u02aa\12\uffff\1\u02ac\5\uffff\1\u02ab\4\uffff\1\u02a4\1"+
            "\uffff\1\u02a8\4\uffff\1\u02a5\5\uffff\1\u02a4\1\uffff\1\u02a8"+
            "\3\uffff\1\u02a6\16\uffff\1\u02ad\22\uffff\1\u02a7\5\uffff\1"+
            "\u02ae\1\u02af\1\u02b0\30\uffff\1\u02b3\5\uffff\1\u02b4\1\uffff"+
            "\1\u02b2\3\uffff\1\u02b1\12\uffff\1\u02aa\1\uffff\1\u02b1\4"+
            "\uffff\1\u02a9",
            "\1\u02ba\12\uffff\1\u02bc\5\uffff\1\u02bb\6\uffff\1\u02b8\4"+
            "\uffff\1\u02b5\7\uffff\1\u02b8\3\uffff\1\u02b6\16\uffff\1\u02bd"+
            "\22\uffff\1\u02b7\5\uffff\1\u02be\1\u02bf\1\u02c0\30\uffff\1"+
            "\u02c3\5\uffff\1\u02c4\1\uffff\1\u02c2\3\uffff\1\u02c1\12\uffff"+
            "\1\u02ba\1\uffff\1\u02c1\4\uffff\1\u02b9",
            "\1\u02c9\12\uffff\1\u02cb\5\uffff\1\u02ca\6\uffff\1\u02c7\14"+
            "\uffff\1\u02c7\3\uffff\1\u02c5\16\uffff\1\u02cc\22\uffff\1\u02c6"+
            "\5\uffff\1\u02cd\1\u02ce\1\u02cf\30\uffff\1\u02d2\5\uffff\1"+
            "\u02d3\1\uffff\1\u02d1\3\uffff\1\u02d0\12\uffff\1\u02c9\1\uffff"+
            "\1\u02d0\4\uffff\1\u02c8",
            "\1\u02d7\12\uffff\1\u02d9\5\uffff\1\u02d8\6\uffff\1\u02d5\14"+
            "\uffff\1\u02d5\22\uffff\1\u02da\22\uffff\1\u02d4\5\uffff\1\u02db"+
            "\1\u02dc\1\u02dd\30\uffff\1\u02e0\5\uffff\1\u02e1\1\uffff\1"+
            "\u02df\3\uffff\1\u02de\12\uffff\1\u02d7\1\uffff\1\u02de\4\uffff"+
            "\1\u02d6",
            "\1\u02e4\12\uffff\1\u02e6\5\uffff\1\u02e5\6\uffff\1\u02e2\14"+
            "\uffff\1\u02e2\22\uffff\1\u02e7\30\uffff\1\u02e8\1\u02e9\1\u02ea"+
            "\30\uffff\1\u02ed\5\uffff\1\u02ee\1\uffff\1\u02ec\3\uffff\1"+
            "\u02eb\12\uffff\1\u02e4\1\uffff\1\u02eb\4\uffff\1\u02e3",
            "\1\u02f0\12\uffff\1\u02f2\5\uffff\1\u02f1\46\uffff\1\u02f3"+
            "\30\uffff\1\u02f4\1\u02f5\1\u02f6\30\uffff\1\u02f9\5\uffff\1"+
            "\u02fa\1\uffff\1\u02f8\3\uffff\1\u02f7\12\uffff\1\u02f0\1\uffff"+
            "\1\u02f7\4\uffff\1\u02ef",
            "\1\u02fb\u0082\uffff\1\u02fb",
            "\1\u0302\13\uffff\1\u030e\4\uffff\1\u02fe\43\uffff\1\u0307"+
            "\1\u030a\1\u030d\1\u02fc\1\u0302\2\u030d\1\u0306\1\uffff\1\u02fd"+
            "\1\u0304\1\u030d\1\u0300\1\u0305\1\u0303\1\u030d\1\u0301\2\u0305"+
            "\1\u030d\1\u0306\1\uffff\1\u0309\1\u030d\1\u030b\1\u0302\1\u030d"+
            "\1\u0303\1\u030d\1\u0301\1\u030c\1\u0304\1\u030d\1\uffff\1\u0308"+
            "\1\u030d\26\uffff\1\u030f\46\uffff\1\u02ff",
            "\1\u0311\12\uffff\1\u0310\5\uffff\1\u0312\77\uffff\1\u0313"+
            "\61\uffff\1\u0311",
            "\1\u0315\13\uffff\1\u0321\50\uffff\1\u031a\1\u031d\1\u0320"+
            "\1\uffff\1\u0315\2\u0320\1\u0319\2\uffff\1\u0317\1\u0320\2\u0318"+
            "\1\u0316\1\u0320\1\u0314\2\u0318\1\u0320\1\u0319\1\uffff\1\u031c"+
            "\1\u0320\1\u031e\1\u0315\1\u0320\1\u0316\1\u0320\1\u0314\1\u031f"+
            "\1\u0317\1\u0320\1\uffff\1\u031b\1\u0320\26\uffff\1\u0322",
            "\1\u0324\13\uffff\1\u0330\50\uffff\1\u0329\1\u032c\1\u032f"+
            "\1\uffff\1\u0324\2\u032f\1\u0328\2\uffff\1\u0326\1\u032f\2\u0327"+
            "\1\u0325\1\u032f\1\u0323\2\u0327\1\u032f\1\u0328\1\uffff\1\u032b"+
            "\1\u032f\1\u032d\1\u0324\1\u032f\1\u0325\1\u032f\1\u0323\1\u032e"+
            "\1\u0326\1\u032f\1\uffff\1\u032a\1\u032f\26\uffff\1\u0331",
            "\1\u0333\13\uffff\1\u033f\50\uffff\1\u0338\1\u033b\1\u033e"+
            "\1\uffff\1\u0333\2\u033e\1\u0337\2\uffff\1\u0335\1\u033e\2\u0336"+
            "\1\u0334\1\u033e\1\u0332\2\u0336\1\u033e\1\u0337\1\uffff\1\u033a"+
            "\1\u033e\1\u033c\1\u0333\1\u033e\1\u0334\1\u033e\1\u0332\1\u033d"+
            "\1\u0335\1\u033e\1\uffff\1\u0339\1\u033e\26\uffff\1\u0340",
            "\1\u0342\13\uffff\1\u034e\50\uffff\1\u0347\1\u034a\1\u034d"+
            "\1\uffff\1\u0342\2\u034d\1\u0346\2\uffff\1\u0344\1\u034d\2\u0345"+
            "\1\u0343\1\u034d\1\u0341\2\u0345\1\u034d\1\u0346\1\uffff\1\u0349"+
            "\1\u034d\1\u034b\1\u0342\1\u034d\1\u0343\1\u034d\1\u0341\1\u034c"+
            "\1\u0344\1\u034d\1\uffff\1\u0348\1\u034d\26\uffff\1\u034f",
            "\1\u0351\13\uffff\1\u035d\50\uffff\1\u0356\1\u0359\1\u035c"+
            "\1\uffff\1\u0351\2\u035c\1\u0355\2\uffff\1\u0353\1\u035c\2\u0354"+
            "\1\u0352\1\u035c\1\u0350\2\u0354\1\u035c\1\u0355\1\uffff\1\u0358"+
            "\1\u035c\1\u035a\1\u0351\1\u035c\1\u0352\1\u035c\1\u0350\1\u035b"+
            "\1\u0353\1\u035c\1\uffff\1\u0357\1\u035c\26\uffff\1\u035e",
            "\1\u035f",
            "\1\u0360",
            "\1\u0361",
            "\1\11\13\uffff\1\3\4\uffff\1\u0363\33\uffff\1\11\11\uffff\1"+
            "\3\2\uffff\2\3\2\uffff\1\u0362\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u0364\31\uffff\1\11",
            "\1\u0370\14\uffff\1\u036c\37\uffff\1\u036e\7\uffff\1\u0371"+
            "\2\uffff\1\u036f\5\uffff\1\u0379\4\uffff\1\u0372\1\uffff\1\u0376"+
            "\4\uffff\1\u0373\5\uffff\1\u0372\1\uffff\1\u0376\3\uffff\1\u0374"+
            "\16\uffff\1\u037a\22\uffff\1\u0375\5\uffff\1\u037b\1\u037c\1"+
            "\u037d\20\uffff\1\u0377\7\uffff\1\u0380\5\uffff\1\u0381\1\uffff"+
            "\1\u037f\3\uffff\1\u037e\12\uffff\1\u0378\1\uffff\1\u037e\4"+
            "\uffff\1\u036d",
            "\1\u038a\7\uffff\1\u0383\2\uffff\1\u0382\5\uffff\1\u038b\4"+
            "\uffff\1\u0384\1\uffff\1\u0388\4\uffff\1\u0385\5\uffff\1\u0384"+
            "\1\uffff\1\u0388\3\uffff\1\u0386\16\uffff\1\u038c\22\uffff\1"+
            "\u0387\5\uffff\1\u038d\1\u038e\1\u038f\30\uffff\1\u0392\5\uffff"+
            "\1\u0393\1\uffff\1\u0391\3\uffff\1\u0390\12\uffff\1\u038a\1"+
            "\uffff\1\u0390\4\uffff\1\u0389",
            "\1\u039a\12\uffff\1\u039c\5\uffff\1\u039b\4\uffff\1\u0394\1"+
            "\uffff\1\u0398\4\uffff\1\u0395\5\uffff\1\u0394\1\uffff\1\u0398"+
            "\3\uffff\1\u0396\16\uffff\1\u039d\22\uffff\1\u0397\5\uffff\1"+
            "\u039e\1\u039f\1\u03a0\30\uffff\1\u03a3\5\uffff\1\u03a4\1\uffff"+
            "\1\u03a2\3\uffff\1\u03a1\12\uffff\1\u039a\1\uffff\1\u03a1\4"+
            "\uffff\1\u0399",
            "\1\u03aa\12\uffff\1\u03ac\5\uffff\1\u03ab\6\uffff\1\u03a8\4"+
            "\uffff\1\u03a5\7\uffff\1\u03a8\3\uffff\1\u03a6\16\uffff\1\u03ad"+
            "\22\uffff\1\u03a7\5\uffff\1\u03ae\1\u03af\1\u03b0\30\uffff\1"+
            "\u03b3\5\uffff\1\u03b4\1\uffff\1\u03b2\3\uffff\1\u03b1\12\uffff"+
            "\1\u03aa\1\uffff\1\u03b1\4\uffff\1\u03a9",
            "\1\u03b9\12\uffff\1\u03bb\5\uffff\1\u03ba\6\uffff\1\u03b7\14"+
            "\uffff\1\u03b7\3\uffff\1\u03b5\16\uffff\1\u03bc\22\uffff\1\u03b6"+
            "\5\uffff\1\u03bd\1\u03be\1\u03bf\30\uffff\1\u03c2\5\uffff\1"+
            "\u03c3\1\uffff\1\u03c1\3\uffff\1\u03c0\12\uffff\1\u03b9\1\uffff"+
            "\1\u03c0\4\uffff\1\u03b8",
            "\1\u03c7\12\uffff\1\u03c9\5\uffff\1\u03c8\6\uffff\1\u03c5\14"+
            "\uffff\1\u03c5\22\uffff\1\u03ca\22\uffff\1\u03c4\5\uffff\1\u03cb"+
            "\1\u03cc\1\u03cd\30\uffff\1\u03d0\5\uffff\1\u03d1\1\uffff\1"+
            "\u03cf\3\uffff\1\u03ce\12\uffff\1\u03c7\1\uffff\1\u03ce\4\uffff"+
            "\1\u03c6",
            "\1\u03d4\12\uffff\1\u03d6\5\uffff\1\u03d5\6\uffff\1\u03d2\14"+
            "\uffff\1\u03d2\22\uffff\1\u03d7\30\uffff\1\u03d8\1\u03d9\1\u03da"+
            "\30\uffff\1\u03dd\5\uffff\1\u03de\1\uffff\1\u03dc\3\uffff\1"+
            "\u03db\12\uffff\1\u03d4\1\uffff\1\u03db\4\uffff\1\u03d3",
            "\1\u03e0\12\uffff\1\u03e2\5\uffff\1\u03e1\46\uffff\1\u03e3"+
            "\30\uffff\1\u03e4\1\u03e5\1\u03e6\30\uffff\1\u03e9\5\uffff\1"+
            "\u03ea\1\uffff\1\u03e8\3\uffff\1\u03e7\12\uffff\1\u03e0\1\uffff"+
            "\1\u03e7\4\uffff\1\u03df",
            "\1\u03eb\u0082\uffff\1\u03eb",
            "\1\u03f2\20\uffff\1\u03ee\43\uffff\1\u03f7\1\u03fa\1\u03fd"+
            "\1\u03ec\1\u03f2\2\u03fd\1\u03f6\1\uffff\1\u03ed\1\u03f4\1\u03fd"+
            "\1\u03f0\1\u03f5\1\u03f3\1\u03fd\1\u03f1\2\u03f5\1\u03fd\1\u03f6"+
            "\1\uffff\1\u03f9\1\u03fd\1\u03fb\1\u03f2\1\u03fd\1\u03f3\1\u03fd"+
            "\1\u03f1\1\u03fc\1\u03f4\1\u03fd\1\uffff\1\u03f8\1\u03fd\30"+
            "\uffff\1\u03fe\44\uffff\1\u03ef",
            "\1\u0400\12\uffff\1\u03ff\5\uffff\1\u0401\77\uffff\1\u0402"+
            "\61\uffff\1\u0400",
            "\1\u0404\64\uffff\1\u0409\1\u040c\1\u040f\1\uffff\1\u0404\2"+
            "\u040f\1\u0408\2\uffff\1\u0406\1\u040f\2\u0407\1\u0405\1\u040f"+
            "\1\u0403\2\u0407\1\u040f\1\u0408\1\uffff\1\u040b\1\u040f\1\u040d"+
            "\1\u0404\1\u040f\1\u0405\1\u040f\1\u0403\1\u040e\1\u0406\1\u040f"+
            "\1\uffff\1\u040a\1\u040f\30\uffff\1\u0410",
            "\1\u0412\64\uffff\1\u0417\1\u041a\1\u041d\1\uffff\1\u0412\2"+
            "\u041d\1\u0416\2\uffff\1\u0414\1\u041d\2\u0415\1\u0413\1\u041d"+
            "\1\u0411\2\u0415\1\u041d\1\u0416\1\uffff\1\u0419\1\u041d\1\u041b"+
            "\1\u0412\1\u041d\1\u0413\1\u041d\1\u0411\1\u041c\1\u0414\1\u041d"+
            "\1\uffff\1\u0418\1\u041d\30\uffff\1\u041e",
            "\1\u0420\64\uffff\1\u0425\1\u0428\1\u042b\1\uffff\1\u0420\2"+
            "\u042b\1\u0424\2\uffff\1\u0422\1\u042b\2\u0423\1\u0421\1\u042b"+
            "\1\u041f\2\u0423\1\u042b\1\u0424\1\uffff\1\u0427\1\u042b\1\u0429"+
            "\1\u0420\1\u042b\1\u0421\1\u042b\1\u041f\1\u042a\1\u0422\1\u042b"+
            "\1\uffff\1\u0426\1\u042b\30\uffff\1\u042c",
            "\1\u042e\64\uffff\1\u0433\1\u0436\1\u0439\1\uffff\1\u042e\2"+
            "\u0439\1\u0432\2\uffff\1\u0430\1\u0439\2\u0431\1\u042f\1\u0439"+
            "\1\u042d\2\u0431\1\u0439\1\u0432\1\uffff\1\u0435\1\u0439\1\u0437"+
            "\1\u042e\1\u0439\1\u042f\1\u0439\1\u042d\1\u0438\1\u0430\1\u0439"+
            "\1\uffff\1\u0434\1\u0439\30\uffff\1\u043a",
            "\1\u043c\64\uffff\1\u0441\1\u0444\1\u0447\1\uffff\1\u043c\2"+
            "\u0447\1\u0440\2\uffff\1\u043e\1\u0447\2\u043f\1\u043d\1\u0447"+
            "\1\u043b\2\u043f\1\u0447\1\u0440\1\uffff\1\u0443\1\u0447\1\u0445"+
            "\1\u043c\1\u0447\1\u043d\1\u0447\1\u043b\1\u0446\1\u043e\1\u0447"+
            "\1\uffff\1\u0442\1\u0447\30\uffff\1\u0448",
            "\1\u0449",
            "\1\u044a",
            "\1\u044b",
            "\1\11\13\uffff\1\3\4\uffff\1\u044c\33\uffff\1\11\11\uffff\1"+
            "\3\2\uffff\2\3\2\uffff\1\u0452\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u044d\31\uffff\1\11",
            "\1\11\13\uffff\1\3\4\uffff\1\u045c\33\uffff\1\11\11\uffff\1"+
            "\3\1\u0456\1\uffff\2\3\2\uffff\1\u0457\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u045d\31"+
            "\uffff\1\11",
            "\1\11\13\uffff\1\3\4\uffff\1\u0467\33\uffff\1\11\11\uffff\1"+
            "\3\1\u0461\1\uffff\2\3\2\uffff\1\u0462\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u0468\31"+
            "\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "467:4: ( object_name ( ASTERISK )* )?";
        }
    }
    static final String DFA72_eotS =
        "\142\uffff";
    static final String DFA72_eofS =
        "\142\uffff";
    static final String DFA72_minS =
        "\2\5\24\uffff\1\5\24\uffff\1\5\66\uffff";
    static final String DFA72_maxS =
        "\2\u00bc\24\uffff\1\u009b\24\uffff\1\u00bc\66\uffff";
    static final String DFA72_acceptS =
        "\2\uffff\1\1\47\uffff\1\2\67\uffff";
    static final String DFA72_specialS =
        "\142\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\2\54\uffff\1\2\7\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "\1\2\14\uffff\1\2\37\uffff\1\26\7\uffff\1\2\2\uffff\1\2\5\uffff"+
            "\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\1\uffff"+
            "\1\52\16\uffff\1\2\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\20\uffff\1\2\43\uffff\10\2\1\uffff\14\2\1\uffff\13\2\1"+
            "\uffff\2\2\26\uffff\1\53\46\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\13\uffff\1\2\4\uffff\1\2\33\uffff\1\2\7\uffff\10\2\1\52"+
            "\33\2\14\uffff\1\2\11\uffff\2\2\7\uffff\1\2\5\uffff\3\2\25\uffff"+
            "\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "549:1: expression : ( classical_expr_wrp | struct_init );";
        }
    }
    static final String DFA76_eotS =
        "\155\uffff";
    static final String DFA76_eofS =
        "\155\uffff";
    static final String DFA76_minS =
        "\2\5\25\uffff\1\5\10\uffff\1\5\12\uffff\1\5\3\uffff\1\5\17\uffff"+
        "\1\166\55\uffff";
    static final String DFA76_maxS =
        "\2\u00bc\25\uffff\1\u009b\10\uffff\1\164\12\uffff\1\u00bc\3\uffff"+
        "\1\u00bc\17\uffff\1\166\55\uffff";
    static final String DFA76_acceptS =
        "\2\uffff\1\1\21\uffff\1\2\56\uffff\1\3\1\1\23\uffff\1\1\23\uffff"+
        "\1\1";
    static final String DFA76_specialS =
        "\155\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\2\54\uffff\1\2\7\uffff\1\2\2\uffff\1\1\4\uffff\1\24\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1"+
            "\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\2\14\uffff\1\2\37\uffff\1\27\7\uffff\1\2\2\uffff\1\2\5\uffff"+
            "\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\20\uffff"+
            "\1\40\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\20\uffff\1\2\43\uffff\3\2\1\57\4\2\1\uffff\1\53\13\2\1"+
            "\uffff\13\2\1\uffff\2\2\26\uffff\1\2\46\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\67\uffff\1\103\5\uffff\1\77\2\uffff\1\2\55\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\54\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\104\6\uffff\1\2\5\uffff\3\2\30"+
            "\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "\1\130\54\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\5\uffff\3\2\30\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\154",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "567:19: ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) )";
        }
    }
    static final String DFA81_eotS =
        "\150\uffff";
    static final String DFA81_eofS =
        "\150\uffff";
    static final String DFA81_minS =
        "\1\62\1\5\2\uffff\2\5\10\uffff\1\62\7\uffff\1\5\14\uffff\1\5\104"+
        "\uffff";
    static final String DFA81_maxS =
        "\2\u00b5\2\uffff\2\u00bc\10\uffff\1\u00bc\7\uffff\1\u009b\14\uffff"+
        "\1\u00b5\104\uffff";
    static final String DFA81_acceptS =
        "\2\uffff\1\1\1\2\73\uffff\1\1\14\uffff\1\1\21\uffff\1\1\11\uffff";
    static final String DFA81_specialS =
        "\150\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\1\143\uffff\1\3\36\uffff\1\2",
            "\1\3\13\uffff\1\2\4\uffff\1\2\45\uffff\1\2\1\4\1\uffff\2\2"+
            "\2\uffff\1\5\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\33\uffff\1"+
            "\2\41\uffff\1\2\31\uffff\1\2",
            "",
            "",
            "\1\16\54\uffff\1\26\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\5\uffff\3\2\20\uffff"+
            "\1\3\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\54\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\43\6\uffff\1\2\5\uffff\3\2\30\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\77\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\5\uffff\3\2\20\uffff\1\3\7\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\13\uffff\1\2\4\uffff\1\2\43\uffff\10\2\1\uffff\1\114\13"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\136\46\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\13\uffff\1\136\4\uffff\1\136\45\uffff\1\136\1\3\1\uffff"+
            "\2\136\2\uffff\1\136\1\uffff\1\136\3\uffff\1\136\3\uffff\1\136"+
            "\3\uffff\1\136\2\uffff\1\136\1\uffff\1\136\3\uffff\1\136\2\uffff"+
            "\1\136\33\uffff\1\136\41\uffff\1\136\31\uffff\1\136",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "588:4: ( object_name | func_pointer1 )";
        }
    }
    static final String DFA93_eotS =
        "\u00b9\uffff";
    static final String DFA93_eofS =
        "\60\uffff\1\2\u0088\uffff";
    static final String DFA93_minS =
        "\2\5\23\uffff\1\62\1\5\23\uffff\1\5\2\uffff\4\5\u0088\uffff";
    static final String DFA93_maxS =
        "\2\u00bc\23\uffff\1\u00b5\1\u009b\23\uffff\1\u009b\2\uffff\4\u00bc"+
        "\u0088\uffff";
    static final String DFA93_acceptS =
        "\2\uffff\1\2\21\uffff\1\1\54\uffff\4\1\20\uffff\1\1\23\uffff\1\1"+
        "\24\uffff\1\1\22\uffff\3\1\3\uffff\1\1\1\uffff\1\1\32\uffff\1\1"+
        "\4\uffff";
    static final String DFA93_specialS =
        "\u00b9\uffff}>";
    static final String[] DFA93_transitionS = {
            "\1\2\54\uffff\1\2\7\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "\1\2\14\uffff\1\24\37\uffff\1\26\7\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2"+
            "\20\uffff\1\24\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\52\143\uffff\1\24\36\uffff\1\2",
            "\1\57\20\uffff\1\2\43\uffff\10\2\1\uffff\1\55\2\2\1\56\10\2"+
            "\1\uffff\13\2\1\uffff\2\2\26\uffff\1\60\46\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\20\uffff\1\2\43\uffff\10\2\1\uffff\1\101\2\2\1\102\10"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\104\46\uffff\1\2",
            "",
            "",
            "\1\2\54\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\125\6\uffff\1\2\5\uffff\3\2\30"+
            "\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2",
            "\1\2\54\uffff\1\151\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "\1\176\54\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\11\uffff\1\24\10\uffff\1\2\5\uffff\3\2\30"+
            "\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2",
            "\1\u0091\12\uffff\2\2\4\uffff\1\2\33\uffff\1\u0099\7\uffff"+
            "\1\u0092\2\2\1\u0099\4\2\1\uffff\1\u0099\4\2\1\u0093\1\2\1\u0097"+
            "\4\2\1\u0093\5\2\1\u0093\1\2\1\u0097\3\2\1\u0093\2\2\14\uffff"+
            "\1\u0099\11\uffff\3\2\2\uffff\1\2\3\uffff\1\u0093\5\uffff\3"+
            "\u0099\20\uffff\1\2\4\uffff\1\2\2\uffff\1\u0099\5\uffff\1\u0099"+
            "\1\uffff\1\u0099\3\uffff\1\u0099\12\uffff\1\u00b4\1\uffff\1"+
            "\u0099\4\uffff\1\u0093",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "671:4: ( type_convertion )?";
        }
    }
    static final String DFA94_eotS =
        "\u00b7\uffff";
    static final String DFA94_eofS =
        "\57\uffff\1\2\u0087\uffff";
    static final String DFA94_minS =
        "\1\62\1\5\22\uffff\1\62\1\5\23\uffff\1\5\2\uffff\4\5\u0087\uffff";
    static final String DFA94_maxS =
        "\2\u00bc\22\uffff\1\u00b5\1\u009b\23\uffff\1\u009b\2\uffff\4\u00bc"+
        "\u0087\uffff";
    static final String DFA94_acceptS =
        "\2\uffff\1\2\20\uffff\1\1\54\uffff\4\1\20\uffff\1\1\23\uffff\1\1"+
        "\24\uffff\1\1\22\uffff\2\1\3\uffff\1\1\1\uffff\1\1\32\uffff\1\1"+
        "\4\uffff";
    static final String DFA94_specialS =
        "\u00b7\uffff}>";
    static final String[] DFA94_transitionS = {
            "\1\2\7\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1\2\5\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\14\uffff\1\23\37\uffff\1\25\7\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2"+
            "\20\uffff\1\23\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51\143\uffff\1\23\36\uffff\1\2",
            "\1\56\20\uffff\1\2\43\uffff\10\2\1\uffff\1\54\2\2\1\55\10\2"+
            "\1\uffff\13\2\1\uffff\2\2\26\uffff\1\57\46\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\102\20\uffff\1\2\43\uffff\10\2\1\uffff\1\100\2\2\1\101\10"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\103\46\uffff\1\2",
            "",
            "",
            "\1\2\54\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\124\6\uffff\1\2\5\uffff\3\2\30"+
            "\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2",
            "\1\2\54\uffff\1\150\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "\1\175\54\uffff\1\2\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\11\uffff\1\23\10\uffff\1\2\5\uffff\3\2\30"+
            "\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2",
            "\1\2\12\uffff\2\2\4\uffff\1\2\33\uffff\1\u0097\7\uffff\1\u0090"+
            "\2\2\1\u0097\4\2\1\uffff\1\u0097\4\2\1\u0091\1\2\1\u0095\4\2"+
            "\1\u0091\5\2\1\u0091\1\2\1\u0095\3\2\1\u0091\2\2\14\uffff\1"+
            "\u0097\11\uffff\3\2\2\uffff\1\2\3\uffff\1\u0091\5\uffff\3\u0097"+
            "\20\uffff\1\2\4\uffff\1\2\2\uffff\1\u0097\5\uffff\1\u0097\1"+
            "\uffff\1\u0097\3\uffff\1\u0097\12\uffff\1\u00b2\1\uffff\1\u0097"+
            "\4\uffff\1\u0091",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "674:14: ( type_convertion )?";
        }
    }
    static final String DFA104_eotS =
        "\u009d\uffff";
    static final String DFA104_eofS =
        "\1\2\30\uffff\1\2\25\uffff\1\113\155\uffff";
    static final String DFA104_minS =
        "\2\5\27\uffff\1\5\23\uffff\3\5\155\uffff";
    static final String DFA104_maxS =
        "\1\u00b5\1\u00bc\27\uffff\1\u00b5\23\uffff\3\u00bc\155\uffff";
    static final String DFA104_acceptS =
        "\2\uffff\1\2\110\uffff\1\1\1\uffff\1\1\22\uffff\1\1\27\uffff\3\1"+
        "\3\uffff\1\1\11\uffff\1\1\3\uffff\1\1\20\uffff";
    static final String DFA104_specialS =
        "\u009d\uffff}>";
    static final String[] DFA104_transitionS = {
            "\1\2\12\uffff\2\2\40\uffff\1\2\7\uffff\3\2\1\uffff\4\2\2\uffff"+
            "\2\2\1\1\10\2\1\uffff\13\2\1\uffff\2\2\26\uffff\3\2\2\uffff"+
            "\1\2\34\uffff\1\2\36\uffff\1\2",
            "\1\2\54\uffff\1\31\7\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\55\12\uffff\1\2\1\56\4\uffff\1\2\33\uffff\1\2\7\uffff\10"+
            "\2\1\uffff\10\2\1\57\3\2\1\uffff\13\2\1\uffff\2\2\26\uffff\3"+
            "\2\2\uffff\1\2\34\uffff\1\2\4\uffff\1\2\31\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\115\13\uffff\1\113\40\uffff\1\2\7\uffff\1\2\2\uffff\1\2"+
            "\5\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\113\3\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff"+
            "\3\2\30\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\20\uffff\1\2\33\uffff\1\140\7\uffff\1\2\2\uffff\1\2\4"+
            "\uffff\2\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2"+
            "\20\uffff\1\2\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\171\12\uffff\1\u0088\1\113\40\uffff\1\u0088\7\uffff\1\176"+
            "\2\113\1\2\1\u008c\3\113\1\uffff\1\2\4\113\1\172\1\113\1\170"+
            "\4\113\1\2\3\113\1\u008c\1\113\1\172\1\113\1\170\3\113\1\2\2"+
            "\113\14\uffff\1\2\11\uffff\1\113\2\u0088\2\uffff\1\113\3\uffff"+
            "\1\2\5\uffff\3\2\20\uffff\1\u008c\7\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\12\uffff\1\u008c\1\uffff\1\2\4\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "702:29: ( generic )?";
        }
    }
    static final String DFA192_eotS =
        "\u00b5\uffff";
    static final String DFA192_eofS =
        "\u00b5\uffff";
    static final String DFA192_minS =
        "\1\62\3\uffff\1\5\1\uffff\3\5\1\uffff\1\5\21\uffff\1\5\23\uffff"+
        "\1\5\16\uffff\1\5\16\uffff\1\5\146\uffff";
    static final String DFA192_maxS =
        "\1\u00b7\3\uffff\1\u00bc\1\uffff\1\u009b\2\165\1\uffff\1\165\21"+
        "\uffff\1\u00bc\23\uffff\1\u00bc\16\uffff\1\u00bc\16\uffff\1\u00bc"+
        "\146\uffff";
    static final String DFA192_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\uffff\1\5\3\uffff\1\4\1\uffff\1\6\21\uffff"+
        "\1\4\23\uffff\1\4\16\uffff\1\4\16\uffff\1\4\15\uffff\3\4\1\uffff"+
        "\1\4\21\uffff\3\4\1\uffff\1\4\21\uffff\3\4\1\uffff\1\4\21\uffff"+
        "\3\4\1\uffff\1\4\21\uffff";
    static final String DFA192_specialS =
        "\u00b5\uffff}>";
    static final String[] DFA192_transitionS = {
            "\1\1\17\uffff\1\4\47\uffff\1\5\30\uffff\1\2\46\uffff\1\3\14"+
            "\uffff\1\3",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\33\uffff\1\6\7\uffff\1\13\2\uffff\1\13"+
            "\4\uffff\1\11\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\12\22\uffff"+
            "\1\13\5\uffff\1\7\2\13\30\uffff\1\13\5\uffff\1\13\1\uffff\1"+
            "\13\3\uffff\1\10\12\uffff\1\13\1\uffff\1\10\4\uffff\1\13",
            "",
            "\1\13\13\uffff\1\34\4\uffff\1\13\43\uffff\10\13\1\uffff\14"+
            "\13\1\uffff\13\13\1\uffff\2\13\27\uffff\1\35\45\uffff\1\13",
            "\1\13\13\uffff\1\60\50\uffff\3\13\1\uffff\4\13\2\uffff\13\13"+
            "\1\uffff\13\13\1\uffff\2\13\27\uffff\1\61",
            "\1\13\13\uffff\1\77\50\uffff\3\13\1\uffff\4\13\2\uffff\13\13"+
            "\1\uffff\13\13\1\uffff\2\13\27\uffff\1\100",
            "",
            "\1\13\13\uffff\1\116\50\uffff\3\13\1\uffff\4\13\2\uffff\13"+
            "\13\1\uffff\13\13\1\uffff\2\13\27\uffff\1\117",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\33\uffff\1\135\7\uffff\1\13\2\uffff\1\13"+
            "\4\uffff\1\117\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\141\22\uffff"+
            "\1\13\5\uffff\1\136\2\13\30\uffff\1\13\5\uffff\1\13\1\uffff"+
            "\1\13\3\uffff\1\137\12\uffff\1\13\1\uffff\1\137\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\33\uffff\1\163\7\uffff\1\13\2\uffff\1\13"+
            "\4\uffff\1\117\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\167\22\uffff"+
            "\1\13\5\uffff\1\164\2\13\30\uffff\1\13\5\uffff\1\13\1\uffff"+
            "\1\13\3\uffff\1\165\12\uffff\1\13\1\uffff\1\165\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\33\uffff\1\u0089\7\uffff\1\13\2\uffff\1"+
            "\13\4\uffff\1\117\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13"+
            "\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\u008d\22"+
            "\uffff\1\13\5\uffff\1\u008a\2\13\30\uffff\1\13\5\uffff\1\13"+
            "\1\uffff\1\13\3\uffff\1\u008b\12\uffff\1\13\1\uffff\1\u008b"+
            "\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\20\uffff\1\13\33\uffff\1\u009f\7\uffff\1\13\2\uffff\1"+
            "\13\4\uffff\1\117\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13"+
            "\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\u00a3\22"+
            "\uffff\1\13\5\uffff\1\u00a0\2\13\30\uffff\1\13\5\uffff\1\13"+
            "\1\uffff\1\13\3\uffff\1\u00a1\12\uffff\1\13\1\uffff\1\u00a1"+
            "\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA192_eot = DFA.unpackEncodedString(DFA192_eotS);
    static final short[] DFA192_eof = DFA.unpackEncodedString(DFA192_eofS);
    static final char[] DFA192_min = DFA.unpackEncodedStringToUnsignedChars(DFA192_minS);
    static final char[] DFA192_max = DFA.unpackEncodedStringToUnsignedChars(DFA192_maxS);
    static final short[] DFA192_accept = DFA.unpackEncodedString(DFA192_acceptS);
    static final short[] DFA192_special = DFA.unpackEncodedString(DFA192_specialS);
    static final short[][] DFA192_transition;

    static {
        int numStates = DFA192_transitionS.length;
        DFA192_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA192_transition[i] = DFA.unpackEncodedString(DFA192_transitionS[i]);
        }
    }

    class DFA192 extends DFA {

        public DFA192(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 192;
            this.eot = DFA192_eot;
            this.eof = DFA192_eof;
            this.min = DFA192_min;
            this.max = DFA192_max;
            this.accept = DFA192_accept;
            this.special = DFA192_special;
            this.transition = DFA192_transition;
        }
        public String getDescription() {
            return "1063:1: value : ( ID | string_value | null_stmt | array | NUMBER | struct_init2 );";
        }
    }
 

    public static final BitSet FOLLOW_code_internal_in_code403 = new BitSet(new long[]{0x0004000000040002L,0x0000000000000000L,0x0004000600400081L});
    public static final BitSet FOLLOW_operator_wrapper_in_code_internal417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_in_operator_wrapper434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_wrapper_in_operator452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_operator458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_wrapper_in_operator463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_operator470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_operator476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_extern514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_154_in_extern517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_L_FBR_in_extern520 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFDFFFFFFFFFFFFFL,0x3FFFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_extern522 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_extern527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_implementation558 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_implementation561 = new BitSet(new long[]{0x2004000000010000L,0x0000000000200100L,0x0404008000400081L});
    public static final BitSet FOLLOW_category_in_implementation564 = new BitSet(new long[]{0x0004000000010000L,0x0000000000200100L,0x0404008000400081L});
    public static final BitSet FOLLOW_super_class_in_implementation567 = new BitSet(new long[]{0x0004000000000000L,0x0000000000200100L,0x0404008000400081L});
    public static final BitSet FOLLOW_implementation_body_in_implementation572 = new BitSet(new long[]{0x0004000000000000L,0x0000000000200100L,0x0404008080400081L});
    public static final BitSet FOLLOW_159_in_implementation577 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_category592 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_category595 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_category598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_in_implementation_body622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_implementation_body628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_wrapper_in_implementation_body640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_implementation_body646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_synthesize675 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize678 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synthesize681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_typedef693 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_typedef697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_typedef701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_in_static_section_wrapper716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_section736 = new BitSet(new long[]{0x0004000002040000L,0x0200000000000004L,0x0040000000400080L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_section738 = new BitSet(new long[]{0x0004000002000000L,0x0200000000000004L,0x0040000000400080L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_static_section741 = new BitSet(new long[]{0x0004000002000000L,0x0200000000000004L,0x0040000000400000L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_static_section744 = new BitSet(new long[]{0x0004000000000000L,0x0200000000000004L,0x0040000000400000L});
    public static final BitSet FOLLOW_static_section2_in_static_section747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_section_in_static_section2756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper2_in_static_section2763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section3_in_static_section2770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_inline_section782 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_field_type_in_inline_section785 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_inline_section787 = new BitSet(new long[]{0x2000000000000000L,0x0200000000000004L});
    public static final BitSet FOLLOW_method_params2_in_inline_section790 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000004L});
    public static final BitSet FOLLOW_block_wrapper_in_inline_section794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_inline_section798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_static_section3809 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_static_section3811 = new BitSet(new long[]{0x2000000000000000L,0x0200000000000009L});
    public static final BitSet FOLLOW_indexed_in_static_section3813 = new BitSet(new long[]{0x2000000000000000L,0x0200000000000009L});
    public static final BitSet FOLLOW_static_end_in_static_section3817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper3_in_static_end829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_in_static_end835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_internal_in_field_end846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_end_internal864 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_end_internal867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method3_in_implementation_method_wrapper3879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body3_in_implementation_method3897 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000004L,0x0000080000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method3900 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L,0x0000080000000000L});
    public static final BitSet FOLLOW_attribute_in_implementation_method3905 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method3910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_attribute923 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_attribute926 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_attribute929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_174_in_attribute932 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute935 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute938 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_attribute941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method2953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method2958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_in_field_type_started_wrapper970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_field_type_started989 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_field_type_started991 = new BitSet(new long[]{0x2000000000000000L,0x0200000000000001L});
    public static final BitSet FOLLOW_classic_method_declaration_wrapper_in_field_type_started994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_wrapper_in_field_type_started998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_classic_method_declaration1047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_wrapper_in_classic_method_declaration1052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_in_implementation_method_wrapper1065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method2_in_implementation_method_wrapper21082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_implementation_method1099 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000004L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method1101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method1106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_block_wrapper1119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block1141 = new BitSet(new long[]{0x2404000002040120L,0x3220040008A0850CL,0x33BB1750404000B9L});
    public static final BitSet FOLLOW_block_internal_full_in_block1147 = new BitSet(new long[]{0x2404000002040120L,0x3220040008A0850CL,0x33BB1750404000B9L});
    public static final BitSet FOLLOW_block_in_block1151 = new BitSet(new long[]{0x2404000002040120L,0x3220040008A0850CL,0x33BB1750404000B9L});
    public static final BitSet FOLLOW_R_FBR_in_block1159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block_case1174 = new BitSet(new long[]{0x2404000002040120L,0x3220040008A0850CL,0x33BB9750404000B9L});
    public static final BitSet FOLLOW_block_internal_full_in_block_case1180 = new BitSet(new long[]{0x2404000002040120L,0x3220040008A0850CL,0x33BB9750404000B9L});
    public static final BitSet FOLLOW_block_in_block_case1184 = new BitSet(new long[]{0x2404000002040120L,0x3220040008A0850CL,0x33BB9750404000B9L});
    public static final BitSet FOLLOW_default_stmt_in_block_case1193 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_block_case1198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_full1210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_in_block_internal1221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_wrapper_in_block_internal1231 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expression_in_block_internal1243 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_wrapper_in_block_internal1250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_wrapper_in_block_internal1255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_wrapper_in_block_internal1265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_block_internal1275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_operators_in_block_internal1285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_variable_in_block_internal1290 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_variable_in_block_internal1297 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_started_in_block_internal1304 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_type_started_in_block_internal1311 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_in_variable_init_wrapper1330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_variable_init1348 = new BitSet(new long[]{0x0004000000010000L,0x0200000000000000L,0x0020000000400000L});
    public static final BitSet FOLLOW_full_expr2_in_variable_init1352 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_variable_init1355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_variable_init1360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_types_in_known_type_started1372 = new BitSet(new long[]{0x0004000000000020L,0x0000000000000000L,0x0020000000400000L});
    public static final BitSet FOLLOW_ASTERISK_in_known_type_started1374 = new BitSet(new long[]{0x0004000000000020L,0x0000000000000000L,0x0020000000400000L});
    public static final BitSet FOLLOW_full_expr2_in_known_type_started1377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_in_typeof_started1389 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_typeof_started1391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_variable1404 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_struct_variable1406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_enum_variable1415 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_enum_variable1417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_const_expression1428 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_const_expression1430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper1439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_throw_stmt1456 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_throw_stmt1459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_try_stmt1470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_try_stmt1473 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt1476 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_160_in_try_stmt1480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_try_stmt1483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_catch_stmt1497 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_catch_stmt1500 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1503 = new BitSet(new long[]{0x0004000000000020L});
    public static final BitSet FOLLOW_ASTERISK_in_catch_stmt1506 = new BitSet(new long[]{0x0004000000000020L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1509 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_catch_stmt1512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_catch_stmt1515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_switch_stmt_wrapper1528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_switch_stmt1545 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_switch_stmt1548 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_switch_expr_in_switch_stmt1551 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_switch_stmt1553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_switch_body_wrapper_in_switch_stmt1559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_switch_body_wrapper1572 = new BitSet(new long[]{0x2404000002040120L,0x3220040008A08508L,0x33BBB750404000B9L});
    public static final BitSet FOLLOW_switch_body_in_switch_body_wrapper1574 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_switch_body_wrapper1576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_switch_body1595 = new BitSet(new long[]{0x2404000002040122L,0x3200040008A08508L,0x33BBB750404000B9L});
    public static final BitSet FOLLOW_switch_internal_in_switch_body1600 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000A00000000000L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_switch_expr1613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_wrapper_in_switch_internal1630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_wrapper_in_switch_internal1636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_case_stmt_wrapper1645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_case_stmt1662 = new BitSet(new long[]{0x0004000000000000L,0x0000040000000000L,0x0080040000000038L});
    public static final BitSet FOLLOW_case_expr_wrapper_in_case_stmt1665 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_case_stmt1668 = new BitSet(new long[]{0x2404000002040122L,0x3200040008A0850CL,0x33BB1750404000B9L});
    public static final BitSet FOLLOW_case_body_wrapper_in_case_stmt1673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_body_in_case_body_wrapper1687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_case_body1706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_case_body1713 = new BitSet(new long[]{0x2404000002040122L,0x3200040008A08508L,0x33BB1750404000B9L});
    public static final BitSet FOLLOW_case_expr_in_case_expr_wrapper1729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_case_expr1751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_case_expr1758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_case_in_block_break1769 = new BitSet(new long[]{0x0000000000000102L,0x1000000000000000L});
    public static final BitSet FOLLOW_single_operators_in_block_break1771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_default_stmt_wrapper1783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_default_stmt1800 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_default_stmt1803 = new BitSet(new long[]{0x2404000002040122L,0x3200040008A0850CL,0x33BB1750404000B9L});
    public static final BitSet FOLLOW_default_body_wrapper_in_default_stmt1808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_body_in_default_body_wrapper1821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_default_body1841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_default_body1847 = new BitSet(new long[]{0x2404000002040122L,0x3200040008A08508L,0x33BB1750404000B9L});
    public static final BitSet FOLLOW_SINGLE_OP_in_single_operators1862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_wrapper_in_single_operators1869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_break_wrapper1881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_WORD_in_break_stmt1899 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_break_stmt1902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_do_stmt1912 = new BitSet(new long[]{0x2404000002040120L,0x3200040008A0850CL,0x33BB1750404000B9L});
    public static final BitSet FOLLOW_if_stmt_block_in_do_stmt1915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_189_in_do_stmt1918 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_do_stmt1921 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_expression_in_do_stmt1924 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_do_stmt1926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper1935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_while_stmt1954 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_while_stmt1957 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_while_expr_in_while_stmt1960 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_while_stmt1962 = new BitSet(new long[]{0x2404000002040120L,0x3200040008A0850CL,0x33BB1750404000B9L});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_while_stmt1965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_while_expr1978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_for_stmt1995 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_for_stmt1998 = new BitSet(new long[]{0x2404000000000020L,0x2200040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_for_stmt_expr_in_for_stmt2001 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_for_stmt2003 = new BitSet(new long[]{0x2404000002040120L,0x3200040008A0850CL,0x33BB1750404000B9L});
    public static final BitSet FOLLOW_if_stmt_block_in_for_stmt2006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_for_stmt_expr2018 = new BitSet(new long[]{0x0004000000000000L,0x0200000000000000L,0x0020000000400000L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr2_in_for_stmt_expr2026 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_for_stmt_int12060 = new BitSet(new long[]{0x2004000000000000L,0x0000040000000008L,0x10A0045040000038L});
    public static final BitSet FOLLOW_object_wrapped2_in_for_stmt_int12062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22082 = new BitSet(new long[]{0x2404000000000020L,0x2200040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22084 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22087 = new BitSet(new long[]{0x2404000000000022L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_return_stmt2106 = new BitSet(new long[]{0x2404000000000020L,0x2200040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_return_stmt2108 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_return_stmt2111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_if_stmt_wrapper2132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_if_stmt2148 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_if_stmt2151 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_if_expr_in_if_stmt2154 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_if_stmt2156 = new BitSet(new long[]{0x2404000002040120L,0x3200040008A0850CL,0x33BB1750404000B9L});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_if_stmt2159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_if_expr2172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_else_stmt2191 = new BitSet(new long[]{0x2404000002040120L,0x3200040008A0850CL,0x33BB1750404000B9L});
    public static final BitSet FOLLOW_if_stmt_block_in_else_stmt2194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_if_stmt_block2220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_if_stmt_block2226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_in_static_start_wrapper2238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_start2256 = new BitSet(new long[]{0x0004000000040000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_start2258 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_static_type_wrapper_in_static_start2261 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000400000L});
    public static final BitSet FOLLOW_full_expr2_in_static_start2263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_type_in_static_type_wrapper2275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_static_type2295 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASTERISK_in_static_type2297 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_id_part_end_internal_in_id_part_end2311 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_DOT_in_id_part_end_internal2326 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_155_in_id_part_end_internal2330 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_id_part_in_id_part_end_internal2333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_internal_in_id_part2371 = new BitSet(new long[]{0x2000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_function_brackets_wrapper_in_id_part2373 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_index_in_id_part2376 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_id_part_in_object_name2389 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_name2391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_method_call_wrapper2405 = new BitSet(new long[]{0x2004000000000000L,0x0000000000000008L,0x0020000000000008L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper2407 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_method_call_wrapper2409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper22432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_in_method_call22451 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_method_name_in_method_call22453 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_method_call_message_list_wrapper_in_method_call22457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_internal_in_object_wrapper2468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_in_object_wrapper_internal2487 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000008L,0x0020000000000000L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_object_wrapper_internal2510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_message32522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_type_convertion2541 = new BitSet(new long[]{0x0004000000040000L,0x0000000000000000L,0x1000000000400000L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_convertion2543 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x1000000000400000L});
    public static final BitSet FOLLOW_188_in_type_convertion2546 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_type_internal_in_type_convertion2549 = new BitSet(new long[]{0x0000000000000020L,0x0010000000000040L});
    public static final BitSet FOLLOW_generic_in_type_convertion2551 = new BitSet(new long[]{0x0000000000000020L,0x0010000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_type_convertion2554 = new BitSet(new long[]{0x0000000000000020L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_type_convertion2557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name2578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2612 = new BitSet(new long[]{0x0004000000010002L});
    public static final BitSet FOLLOW_method_call_message_wrapper_in_method_call_message_list2614 = new BitSet(new long[]{0x0004000000010002L});
    public static final BitSet FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_method_call_message_first2642 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_message_in_method_call_message_first2645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_in_method_call_message_wrapper2655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_in_method_call_message2674 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_incomplete_prefix_in_method_call_message2678 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_message_in_method_call_message2682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_msg_expr_in_message2691 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_message2694 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_msg_expr_in_message2696 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_msg_expr2730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expression2746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_in_expression2751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_in_full_expr_wrapper2762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr2779 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr2782 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr2784 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr22795 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr22798 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000400000L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr22800 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_expr_assign_in_expr_assign_wrapper2811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_wrapper_in_expr_assign2830 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A0850CL,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_assign2833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_in_expr_assign2837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer2_in_expr_assign2842 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_call_wrapper_in_expr_assign2844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array_init2857 = new BitSet(new long[]{0x2404000000000020L,0x2020040008A0850CL,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init2860 = new BitSet(new long[]{0x0000000000020000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array_init2863 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A0850CL,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init2865 = new BitSet(new long[]{0x0000000000020000L,0x0020000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array_init2871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_in_classical_expr_wrp32883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_classical_expr_wrp32889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_in_classical_expr_wrp2902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_classical_expr2919 = new BitSet(new long[]{0x9000000000000002L,0x0000000025522221L});
    public static final BitSet FOLLOW_expr_question_wrapper_in_classical_expr2922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr2926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr2_in_classical_expr_wrp22938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_classical_expr22956 = new BitSet(new long[]{0x9000000000000002L,0x0000000024522221L});
    public static final BitSet FOLLOW_func_pointer1_in_classical_expr22960 = new BitSet(new long[]{0x9000000000000002L,0x0000000024522221L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr22963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_question_in_expr_question_wrapper2973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_QUESTION_in_expr_question2990 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question2992 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_expr_question2994 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question2996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_in_assign_wrapper3005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_in_simple_expr_wrapper3078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_or_in_simple_expr3096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_and_wrapper_in_expr_or_or3113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_L_OR_OR_in_expr_or_or3116 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_or_or3118 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_expr_and_and_in_expr_and_and_wrapper3129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_wrapper_in_expr_and_and3146 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_L_AND_AND_in_expr_and_and3149 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_and_and3151 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_expr_or_in_expr_or_wrapper3162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_xor_wrapper_in_expr_or3180 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_L_OR_in_expr_or3183 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_or3185 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_expr_xor_in_expr_xor_wrapper3196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_wrapper_in_expr_xor3213 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_L_XOR_in_expr_xor3216 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_xor3218 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_expr_and_in_expr_and_wrapper3230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eq_wrapper_in_expr_and3248 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_L_AND_in_expr_and3251 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_and3253 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_expr_eq_in_expr_eq_wrapper3265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_cond_wrapper_in_expr_eq3283 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004002L});
    public static final BitSet FOLLOW_set_in_expr_eq3286 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_eq3294 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004002L});
    public static final BitSet FOLLOW_expr_cond_in_expr_cond_wrapper3305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mov_wrapper_in_expr_cond3322 = new BitSet(new long[]{0x0000000000000002L,0x00000000000018C0L});
    public static final BitSet FOLLOW_set_in_expr_cond3325 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_cond3341 = new BitSet(new long[]{0x0000000000000002L,0x00000000000018C0L});
    public static final BitSet FOLLOW_expr_mov_in_expr_mov_wrapper3352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_add_wrapper_in_expr_mov3370 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000010L});
    public static final BitSet FOLLOW_set_in_expr_mov3373 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_mov3381 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000010L});
    public static final BitSet FOLLOW_expr_add_in_expr_add_wrapper3393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mult_wrapper_in_expr_add3410 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200100L});
    public static final BitSet FOLLOW_set_in_expr_add3413 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_add3421 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200100L});
    public static final BitSet FOLLOW_expr_mult_in_expr_mult_wrapper3432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_type_wrapper_in_expr_mult3449 = new BitSet(new long[]{0x4000000000000022L,0x0000000000080000L});
    public static final BitSet FOLLOW_set_in_expr_mult3452 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_mult3464 = new BitSet(new long[]{0x4000000000000022L,0x0000000000080000L});
    public static final BitSet FOLLOW_expr_type_in_expr_type_wrapper3476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_in_expr_type3493 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_expr_unname_in_expr_type3496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_expr_unname3507 = new BitSet(new long[]{0x2404000000000000L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_type_convertion_in_expr_unname3509 = new BitSet(new long[]{0x2404000000000000L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_expr_addr_in_expr_unname3514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_AND_in_expr_addr3524 = new BitSet(new long[]{0x2004000000000000L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_expr_sign_in_expr_addr3527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_wrapper_in_expr_sign3546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_in_expr_not_wrapper3556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_NOT_in_expr_not3575 = new BitSet(new long[]{0x2004000000000000L,0x2000040008800408L,0x10A0045040000038L});
    public static final BitSet FOLLOW_expr_not2_in_expr_not3578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_TILDA_in_expr_not23587 = new BitSet(new long[]{0x2004000000000000L,0x2000040000800408L,0x10A0045040000038L});
    public static final BitSet FOLLOW_expr_size_of_in_expr_not23590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_expr_size_of3600 = new BitSet(new long[]{0x2004000000000000L,0x0000040000800408L,0x10A0045040000038L});
    public static final BitSet FOLLOW_expr_xcrement_in_expr_size_of3603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped1_in_expr_xcrement3622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped2_in_object_wrapped13632 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800400L});
    public static final BitSet FOLLOW_188_in_object_wrapped23653 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_object_name_in_object_wrapped23656 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_generic_in_object_wrapped23658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapped23664 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_object_wrapped23672 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_object_wrapped23674 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_object_wrapped23676 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_object_wrapped23684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_started_in_object_wrapped23689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_brackets_in_function_brackets_wrapper3701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_function_brackets3720 = new BitSet(new long[]{0x2404000000000020L,0x2010040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets3723 = new BitSet(new long[]{0x0000000000020000L,0x0010000000000000L});
    public static final BitSet FOLLOW_COMMA_in_function_brackets3726 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets3728 = new BitSet(new long[]{0x0000000000020000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_function_brackets3734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index3744 = new BitSet(new long[]{0x2404000000000020L,0x2040040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index3746 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index3749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_struct_init3759 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_init3762 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_ID_in_struct_init3765 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_struct_init3768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init3771 = new BitSet(new long[]{0x2404000000400020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init3777 = new BitSet(new long[]{0x0000000000020000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init3780 = new BitSet(new long[]{0x2404000000400020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init3783 = new BitSet(new long[]{0x0000000000020000L,0x0020000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init3789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init23803 = new BitSet(new long[]{0x2404000000400020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init23809 = new BitSet(new long[]{0x0000000000020000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init23812 = new BitSet(new long[]{0x2404000000400020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init23815 = new BitSet(new long[]{0x0000000000020000L,0x0020000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init23821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_var_in_struct_init_line3834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_expression_in_struct_init_line3839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_expression3852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_method3863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_struct_init_var3875 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_id_part_in_struct_init_var3877 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_EQ_in_struct_init_var3882 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A0850CL,0x10A0045040000038L});
    public static final BitSet FOLLOW_in_q_brackets_in_struct_init_var3886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_struct_init_var3890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_wrapper_in_a_started3902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_wrapper_in_a_started3907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_wrapper_in_a_started3912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_typeof3922 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_typeof3925 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_ID_in_typeof3928 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_typeof3931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_in_a_selector_wrapper3942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_a_selector3959 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_a_selector3961 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_selector3963 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_selector3965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_in_a_protocol_wrapper3975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_a_protocol3993 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_a_protocol3995 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_protocol3997 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_protocol3999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_in_a_encode_wrapper4009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_value_in_a_selector_value_wrapper4026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_a_selector_value4045 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4049 = new BitSet(new long[]{0x0004000000000002L});
    public static final BitSet FOLLOW_ID_in_a_selector_value4053 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4056 = new BitSet(new long[]{0x0004000000000002L});
    public static final BitSet FOLLOW_158_in_a_encode4067 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_a_encode4069 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFEFFFFFFFFFFFFFL,0x3FFFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_R_BR_in_a_encode4077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_const_expr4088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_const_expr4092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL2_in_const_expr4096 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_const_expr4100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_const_expr4104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_string_literal34114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_brackets4124 = new BitSet(new long[]{0x2404000000000020L,0x2010040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_expression_in_method_brackets4128 = new BitSet(new long[]{0x0000000000020000L,0x0010000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_brackets4132 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_brackets4135 = new BitSet(new long[]{0x0000000000020000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_brackets4141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14151 = new BitSet(new long[]{0x2000000000000020L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14154 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer14157 = new BitSet(new long[]{0x0004000000000020L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14159 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14162 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer14165 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer14168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24181 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer24184 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24186 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer24189 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24192 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer24195 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer_params4211 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4214 = new BitSet(new long[]{0x0000000000020020L,0x0010000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4217 = new BitSet(new long[]{0x0000000000020020L,0x0010000000000000L});
    public static final BitSet FOLLOW_COMMA_in_func_pointer_params4221 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4224 = new BitSet(new long[]{0x0000000000020020L,0x0010000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4227 = new BitSet(new long[]{0x0000000000020020L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer_params4232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_in_brackets_end14242 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_expression_in_in_brackets_end14245 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_in_brackets_end14248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_start_in_in_brackets_end14253 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_index_brackets_in_in_brackets_end14255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_in_brackets_end14261 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_method_start_in_in_brackets_end14269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_in_brackets_end14274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_in_brackets_end24286 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_expression_in_in_brackets_end24289 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_in_brackets_end24292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_in_brackets_end24297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_start4310 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_method_brackets_in_method_start4312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_in_q_brackets4323 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A0850CL,0x10A0045040000038L});
    public static final BitSet FOLLOW_q_brackets_source_in_in_q_brackets4326 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_in_q_brackets4328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_source_in_q_brackets_source4340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_br_source_in_q_brackets_source4345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4358 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4365 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_q_source4381 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_source4385 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_expression_in_q_source4388 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_ID_in_simple_method_call4405 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_method_brackets_in_simple_method_call4407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index_brackets4423 = new BitSet(new long[]{0x2404000000000020L,0x2000040008A08508L,0x10A0045040000038L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_brackets4426 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index_brackets4428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper4442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_interface_declaration4460 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_interface_declaration4463 = new BitSet(new long[]{0x2000000002010000L,0x0000000000200104L});
    public static final BitSet FOLLOW_interface_category_in_interface_declaration4466 = new BitSet(new long[]{0x0000000002010000L,0x0000000000200104L});
    public static final BitSet FOLLOW_super_class_in_interface_declaration4470 = new BitSet(new long[]{0x0000000002000000L,0x0000000000200104L});
    public static final BitSet FOLLOW_annotated_block_in_interface_declaration4477 = new BitSet(new long[]{0x0000000002000000L,0x0000000000200104L,0x0000000080000000L});
    public static final BitSet FOLLOW_interface_methods_in_interface_declaration4481 = new BitSet(new long[]{0x0000000002000000L,0x0000000000200104L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_interface_declaration4490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_annotated_block4501 = new BitSet(new long[]{0x0004000000000000L,0x0020000000000000L,0x0800002800400000L});
    public static final BitSet FOLLOW_annotated_block_internal_in_annotated_block4506 = new BitSet(new long[]{0x0004000000000000L,0x0020000000000000L,0x0800002800400000L});
    public static final BitSet FOLLOW_R_FBR_in_annotated_block4511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_annotation_in_annotated_block_internal4524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_public_block_internal_in_annotated_block_internal4531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_field_declaration_in_public_block_internal4566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_declaration_in_public_block_internal4571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_simple_field_declaration4583 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_simple_field_declaration4585 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_field_declaration4588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_union_declaration4601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_L_FBR_in_union_declaration4604 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_simple_field_declaration_in_union_declaration4610 = new BitSet(new long[]{0x0004000000000000L,0x0020000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_R_FBR_in_union_declaration4615 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_ID_in_union_declaration4618 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_union_declaration4621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_super_class4635 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_ID_in_super_class4638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_interface_category4658 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_ID_in_interface_category4661 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_interface_category4664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_declaration_in_interface_methods4693 = new BitSet(new long[]{0x0000000002000002L,0x0000000000200100L});
    public static final BitSet FOLLOW_interface_method_in_interface_methods4697 = new BitSet(new long[]{0x0000000002000002L,0x0000000000200100L});
    public static final BitSet FOLLOW_method_header_in_interface_method4709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_method_header4728 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_method_header4730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_header_body4740 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_method_type_in_method_header_body4743 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_method_header_body4746 = new BitSet(new long[]{0x2004000000030002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_method_params_in_method_header_body4749 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_va_args_wrapper_in_method_header_body4752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_va_args_in_va_args_wrapper4762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_va_args4779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_156_in_va_args4782 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_va_args4785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_type_in_method_header_body24796 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_method_header_body24798 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body24801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body34811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper4820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type4852 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000400080L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_type4855 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_type_internal_in_method_type4858 = new BitSet(new long[]{0x0000000000000020L,0x0010000000000040L});
    public static final BitSet FOLLOW_generic_in_method_type4861 = new BitSet(new long[]{0x0000000000000020L,0x0010000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type4864 = new BitSet(new long[]{0x0000000000000020L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type4867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type4881 = new BitSet(new long[]{0x0004000000040020L,0x0010000000000040L,0x1000000000400000L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_type4884 = new BitSet(new long[]{0x0004000000000020L,0x0010000000000040L,0x1000000000400000L});
    public static final BitSet FOLLOW_known_types_in_method_type4887 = new BitSet(new long[]{0x0004000000000020L,0x0010000000000040L});
    public static final BitSet FOLLOW_ID_in_method_type4890 = new BitSet(new long[]{0x0004000000000020L,0x0010000000000040L});
    public static final BitSet FOLLOW_generic_in_method_type4893 = new BitSet(new long[]{0x0000000000000020L,0x0010000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type4896 = new BitSet(new long[]{0x0000000000000020L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type4899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal1_in_type_internal4924 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_KBR_in_type_internal4927 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_type_internal4930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_LESS_in_generic4963 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_generic_internal_in_generic4965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_L_MORE_in_generic4967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_generic_internal4986 = new BitSet(new long[]{0x0000000000020022L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal4989 = new BitSet(new long[]{0x0000000000020022L});
    public static final BitSet FOLLOW_COMMA_in_generic_internal4993 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_ID_in_generic_internal4996 = new BitSet(new long[]{0x0000000000020022L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal4999 = new BitSet(new long[]{0x0000000000020022L});
    public static final BitSet FOLLOW_L_BR_in_method_params25011 = new BitSet(new long[]{0x0004000002040000L,0x0000000000000000L,0x1000000000400080L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25014 = new BitSet(new long[]{0x0000000000020000L,0x0010000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_params25018 = new BitSet(new long[]{0x0004000002040000L,0x0000000000000000L,0x1000000000400080L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25021 = new BitSet(new long[]{0x0000000000020000L,0x0010000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_params25025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param2_in_method_param_wrapper25036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_param25054 = new BitSet(new long[]{0x0004000002000000L,0x0000000000000000L,0x1000000000400080L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_method_param25057 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x1000000000400080L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_param25060 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x1000000000400000L});
    public static final BitSet FOLLOW_188_in_method_param25063 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_field_type_in_method_param25066 = new BitSet(new long[]{0x0004000000000002L,0x0000000000000008L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_method_param25068 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_indexed_in_method_param25071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_indexed5081 = new BitSet(new long[]{0x0000000000000000L,0x0040040000000000L});
    public static final BitSet FOLLOW_NUMBER_in_indexed5083 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_indexed5086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params5096 = new BitSet(new long[]{0x2004000000010002L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_prefix_in_method_param5118 = new BitSet(new long[]{0x2004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COLON_in_method_param5123 = new BitSet(new long[]{0x2004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_method_type_in_method_param5126 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_method_param5129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5141 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_prefix5143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_incomplete_prefix5162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5204 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000004L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_struct_declaration5210 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_typedef_struct_body_in_typedef_struct_declaration5215 = new BitSet(new long[]{0x0004000000000000L,0x0020000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_struct_declaration5219 = new BitSet(new long[]{0x0004000000000002L,0x0200000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5222 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_struct_declaration5225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_struct_field5268 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_struct_field5270 = new BitSet(new long[]{0x0000000000020000L,0x0200000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_field5274 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_struct_field5277 = new BitSet(new long[]{0x0000000000020000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_field5281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_enum_declaration5317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_typedef_declaration5337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_declaration5339 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5342 = new BitSet(new long[]{0x0000000000020000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COMMA_in_typedef_declaration5346 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5349 = new BitSet(new long[]{0x0000000000020000L,0x0020000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_declaration5353 = new BitSet(new long[]{0x0004000000000000L,0x0200000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_typedef_declaration5356 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_declaration5359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_declaration_element5388 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_EQ_in_typedef_declaration_element5392 = new BitSet(new long[]{0x0004000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_set_in_typedef_declaration_element5395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper5416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_wrapper_in_field_declaration5433 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_field_type_in_field_declaration5436 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_field_declaration5438 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000001L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration5440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_declaration_end5451 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration_end5454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_in_type_start_wrapper5464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_start5481 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_field_type_in_type_start5484 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_name_in_type_start5486 = new BitSet(new long[]{0x2000000000000000L,0x0200000000000001L});
    public static final BitSet FOLLOW_type_end_in_type_start5488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration4_in_type_end5496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration4_in_type_end5509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_declaration45531 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration45534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_declaration45547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_wrapper_in_method_declaration45552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_in_field_modifier_wrapper5564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_field_modifier5582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_internal_in_field_type5594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_field_type_internal5613 = new BitSet(new long[]{0x0000000000000022L,0x0000000000000040L});
    public static final BitSet FOLLOW_generic_in_field_type_internal5616 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASTERISK_in_field_type_internal5619 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_name_internal_in_name5633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_EQ_in_value_set5673 = new BitSet(new long[]{0x0004000000000000L,0x0000040000000004L,0x0080040000000008L});
    public static final BitSet FOLLOW_value_in_value_set5676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_value5692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_value_in_value5696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_value5700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_in_value5704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_value5708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init2_in_value5712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string_value5722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array5743 = new BitSet(new long[]{0x0004000000000000L,0x0000040000000004L,0x0080040000000008L});
    public static final BitSet FOLLOW_value_in_array5746 = new BitSet(new long[]{0x0000000000020000L,0x0020000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array5750 = new BitSet(new long[]{0x0004000000000000L,0x0000040000000004L,0x0080040000000008L});
    public static final BitSet FOLLOW_value_in_array5753 = new BitSet(new long[]{0x0000000000020000L,0x0020000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array5757 = new BitSet(new long[]{0x0000000000000002L});

}