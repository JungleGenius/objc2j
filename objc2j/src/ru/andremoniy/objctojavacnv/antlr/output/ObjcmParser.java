// $ANTLR 3.4 Objcm.g 2012-10-09 22:06:17

package ru.andremoniy.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcmParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ASSIGN", "ASTERISK", "BLOCK", "BREAK", "BREAK_WORD", "CASE_BODY", "CASE_EXPR", "CASE_STMT", "CATEGORY", "CLASSICAL_EXPR", "CLASSICAL_EXPR_2", "COLON", "COMMA", "CONST_PREFIX", "DEFAULT_BODY", "DEFAULT_STMT", "DIGIT", "DOT", "ENCODE", "ENUM", "ENUM_PREFIX", "ESC", "EXPR", "EXPR_ADD", "EXPR_AND", "EXPR_AND_AND", "EXPR_ASSIGN", "EXPR_COND", "EXPR_EQ", "EXPR_FULL", "EXPR_MOV", "EXPR_MULT", "EXPR_NOT", "EXPR_OR", "EXPR_OR_OR", "EXPR_QUESTION", "EXPR_TYPE", "EXPR_XOR", "EXTERN", "FIELD", "FIELD_ACCESS", "FIELD_TYPE_STARTED", "FOR_IN_STMT", "FOR_STMT", "FOR_STMT_EXPR", "FUNCTION", "GENERIC", "ID", "IF_BLOCK", "IF_EXPR", "IF_STMT", "IMPLEMENTATION", "INCOMPLETE_PREFIX", "INDEX", "INDEX_NUMBER", "INTERFACE", "LETTER", "L_AND", "L_AND_AND", "L_AND_EQ", "L_BR", "L_DIV", "L_DIV_EQ", "L_EQ", "L_EQ_EQ", "L_FBR", "L_KBR", "L_LEFT", "L_LEFT_EQ", "L_LESS", "L_LESS_EQ", "L_MINUS", "L_MINUS_EQ", "L_MINUS_MINUS", "L_MORE", "L_MORE_EQ", "L_MULT_EQ", "L_NEQ", "L_NOT", "L_OR", "L_OR_EQ", "L_OR_OR", "L_PERC", "L_PERC_EQ", "L_PLUS", "L_PLUS_EQ", "L_PLUS_PLUS", "L_QUESTION", "L_RIGHT", "L_RIGHT_EQ", "L_TILDA", "L_XOR", "L_XOR_EQ", "MESSAGE", "METHOD", "METHOD_CALL", "METHOD_MSG", "METHOD_NAME", "MODIFIER", "MSG_LIST", "MULTI_COMMENT", "M_IMPORT", "M_TYPE_START", "NAME", "NOT", "NUMBER", "OBJECT", "OP", "OPER", "OPERATOR", "PARAM", "PREFIX", "PREPROCESSOR_DECLARATION", "PROTOCOL", "RETURN_STMT", "R_BR", "R_FBR", "R_KBR", "SELECTOR", "SELECTOR_VALUE", "SEMICOLON", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_OP", "SIZEOF", "STATIC", "STATIC_METHOD", "STATIC_PREFIX", "STATIC_START", "STATIC_TYPE", "STRING_LITERAL", "STRING_LITERAL2", "STRING_LITERAL3", "STRUCT_FIELD", "STRUCT_PREFIX", "SUPER_CLASS", "SWITCH", "SWITCH_BODY", "SWITCH_EXPRESSION", "THROW_EXCEPTION", "THROW_STMT", "TYPE", "TYPEDEF", "TYPEDEF_ELEMENT", "TYPEDEF_STRUCT", "TYPE_CONVERTION", "VALUE", "VARIABLE_INIT", "VA_ARGS", "VOID", "WHILE_EXPR", "WHILE_STMT", "WS", "'\"C\"'", "'->'", "'...'", "'@catch'", "'@encode'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@private'", "'@protocol'", "'@public'", "'@selector'", "'@synthesize'", "'@throw'", "'@try'", "'Nil'", "'__attribute__'", "'__typeof__'", "'case'", "'constructor'", "'default'", "'do'", "'else'", "'extern'", "'for'", "'if'", "'in'", "'inline'", "'nil'", "'return'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'while'"
    };

    public static final int EOF=-1;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int ASSIGN=4;
    public static final int ASTERISK=5;
    public static final int BLOCK=6;
    public static final int BREAK=7;
    public static final int BREAK_WORD=8;
    public static final int CASE_BODY=9;
    public static final int CASE_EXPR=10;
    public static final int CASE_STMT=11;
    public static final int CATEGORY=12;
    public static final int CLASSICAL_EXPR=13;
    public static final int CLASSICAL_EXPR_2=14;
    public static final int COLON=15;
    public static final int COMMA=16;
    public static final int CONST_PREFIX=17;
    public static final int DEFAULT_BODY=18;
    public static final int DEFAULT_STMT=19;
    public static final int DIGIT=20;
    public static final int DOT=21;
    public static final int ENCODE=22;
    public static final int ENUM=23;
    public static final int ENUM_PREFIX=24;
    public static final int ESC=25;
    public static final int EXPR=26;
    public static final int EXPR_ADD=27;
    public static final int EXPR_AND=28;
    public static final int EXPR_AND_AND=29;
    public static final int EXPR_ASSIGN=30;
    public static final int EXPR_COND=31;
    public static final int EXPR_EQ=32;
    public static final int EXPR_FULL=33;
    public static final int EXPR_MOV=34;
    public static final int EXPR_MULT=35;
    public static final int EXPR_NOT=36;
    public static final int EXPR_OR=37;
    public static final int EXPR_OR_OR=38;
    public static final int EXPR_QUESTION=39;
    public static final int EXPR_TYPE=40;
    public static final int EXPR_XOR=41;
    public static final int EXTERN=42;
    public static final int FIELD=43;
    public static final int FIELD_ACCESS=44;
    public static final int FIELD_TYPE_STARTED=45;
    public static final int FOR_IN_STMT=46;
    public static final int FOR_STMT=47;
    public static final int FOR_STMT_EXPR=48;
    public static final int FUNCTION=49;
    public static final int GENERIC=50;
    public static final int ID=51;
    public static final int IF_BLOCK=52;
    public static final int IF_EXPR=53;
    public static final int IF_STMT=54;
    public static final int IMPLEMENTATION=55;
    public static final int INCOMPLETE_PREFIX=56;
    public static final int INDEX=57;
    public static final int INDEX_NUMBER=58;
    public static final int INTERFACE=59;
    public static final int LETTER=60;
    public static final int L_AND=61;
    public static final int L_AND_AND=62;
    public static final int L_AND_EQ=63;
    public static final int L_BR=64;
    public static final int L_DIV=65;
    public static final int L_DIV_EQ=66;
    public static final int L_EQ=67;
    public static final int L_EQ_EQ=68;
    public static final int L_FBR=69;
    public static final int L_KBR=70;
    public static final int L_LEFT=71;
    public static final int L_LEFT_EQ=72;
    public static final int L_LESS=73;
    public static final int L_LESS_EQ=74;
    public static final int L_MINUS=75;
    public static final int L_MINUS_EQ=76;
    public static final int L_MINUS_MINUS=77;
    public static final int L_MORE=78;
    public static final int L_MORE_EQ=79;
    public static final int L_MULT_EQ=80;
    public static final int L_NEQ=81;
    public static final int L_NOT=82;
    public static final int L_OR=83;
    public static final int L_OR_EQ=84;
    public static final int L_OR_OR=85;
    public static final int L_PERC=86;
    public static final int L_PERC_EQ=87;
    public static final int L_PLUS=88;
    public static final int L_PLUS_EQ=89;
    public static final int L_PLUS_PLUS=90;
    public static final int L_QUESTION=91;
    public static final int L_RIGHT=92;
    public static final int L_RIGHT_EQ=93;
    public static final int L_TILDA=94;
    public static final int L_XOR=95;
    public static final int L_XOR_EQ=96;
    public static final int MESSAGE=97;
    public static final int METHOD=98;
    public static final int METHOD_CALL=99;
    public static final int METHOD_MSG=100;
    public static final int METHOD_NAME=101;
    public static final int MODIFIER=102;
    public static final int MSG_LIST=103;
    public static final int MULTI_COMMENT=104;
    public static final int M_IMPORT=105;
    public static final int M_TYPE_START=106;
    public static final int NAME=107;
    public static final int NOT=108;
    public static final int NUMBER=109;
    public static final int OBJECT=110;
    public static final int OP=111;
    public static final int OPER=112;
    public static final int OPERATOR=113;
    public static final int PARAM=114;
    public static final int PREFIX=115;
    public static final int PREPROCESSOR_DECLARATION=116;
    public static final int PROTOCOL=117;
    public static final int RETURN_STMT=118;
    public static final int R_BR=119;
    public static final int R_FBR=120;
    public static final int R_KBR=121;
    public static final int SELECTOR=122;
    public static final int SELECTOR_VALUE=123;
    public static final int SEMICOLON=124;
    public static final int SIMPLE_EXPR=125;
    public static final int SINGLE_COMMENT=126;
    public static final int SINGLE_OP=127;
    public static final int SIZEOF=128;
    public static final int STATIC=129;
    public static final int STATIC_METHOD=130;
    public static final int STATIC_PREFIX=131;
    public static final int STATIC_START=132;
    public static final int STATIC_TYPE=133;
    public static final int STRING_LITERAL=134;
    public static final int STRING_LITERAL2=135;
    public static final int STRING_LITERAL3=136;
    public static final int STRUCT_FIELD=137;
    public static final int STRUCT_PREFIX=138;
    public static final int SUPER_CLASS=139;
    public static final int SWITCH=140;
    public static final int SWITCH_BODY=141;
    public static final int SWITCH_EXPRESSION=142;
    public static final int THROW_EXCEPTION=143;
    public static final int THROW_STMT=144;
    public static final int TYPE=145;
    public static final int TYPEDEF=146;
    public static final int TYPEDEF_ELEMENT=147;
    public static final int TYPEDEF_STRUCT=148;
    public static final int TYPE_CONVERTION=149;
    public static final int VALUE=150;
    public static final int VARIABLE_INIT=151;
    public static final int VA_ARGS=152;
    public static final int VOID=153;
    public static final int WHILE_EXPR=154;
    public static final int WHILE_STMT=155;
    public static final int WS=156;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcmParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcmParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcmParser.tokenNames; }
    public String getGrammarFileName() { return "Objcm.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // Objcm.g:111:1: code : ( code_internal )+ ;
    public final ObjcmParser.code_return code() throws RecognitionException {
        ObjcmParser.code_return retval = new ObjcmParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.code_internal_return code_internal1 =null;



        try {
            // Objcm.g:111:6: ( ( code_internal )+ )
            // Objcm.g:112:3: ( code_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:112:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CONST_PREFIX||LA1_0==ID||LA1_0==STATIC_PREFIX||LA1_0==STRUCT_PREFIX||LA1_0==VOID||(LA1_0 >= 164 && LA1_0 <= 165)||LA1_0==181) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // Objcm.g:112:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code415);
            	    code_internal1=code_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // Objcm.g:116:1: code_internal : ( operator_wrapper | implementation_wrapper );
    public final ObjcmParser.code_internal_return code_internal() throws RecognitionException {
        ObjcmParser.code_internal_return retval = new ObjcmParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_wrapper_return operator_wrapper2 =null;

        ObjcmParser.implementation_wrapper_return implementation_wrapper3 =null;



        try {
            // Objcm.g:117:2: ( operator_wrapper | implementation_wrapper )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==CONST_PREFIX||LA2_0==ID||LA2_0==STATIC_PREFIX||LA2_0==STRUCT_PREFIX||LA2_0==VOID||LA2_0==165||LA2_0==181) ) {
                alt2=1;
            }
            else if ( (LA2_0==164) ) {
                alt2=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }
            switch (alt2) {
                case 1 :
                    // Objcm.g:117:4: operator_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_operator_wrapper_in_code_internal429);
                    operator_wrapper2=operator_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, operator_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:118:5: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal435);
                    implementation_wrapper3=implementation_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_wrapper3.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class operator_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator_wrapper"
    // Objcm.g:121:1: operator_wrapper : operator -> ^( OPERATOR operator ) ;
    public final ObjcmParser.operator_wrapper_return operator_wrapper() throws RecognitionException {
        ObjcmParser.operator_wrapper_return retval = new ObjcmParser.operator_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_return operator4 =null;


        RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
        try {
            // Objcm.g:122:2: ( operator -> ^( OPERATOR operator ) )
            // Objcm.g:122:4: operator
            {
            pushFollow(FOLLOW_operator_in_operator_wrapper446);
            operator4=operator();

            state._fsp--;

            stream_operator.add(operator4.getTree());

            // AST REWRITE
            // elements: operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 122:13: -> ^( OPERATOR operator )
            {
                // Objcm.g:122:16: ^( OPERATOR operator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OPERATOR, "OPERATOR")
                , root_1);

                adaptor.addChild(root_1, stream_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_wrapper"


    public static class operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator"
    // Objcm.g:124:1: operator : ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration );
    public final ObjcmParser.operator_return operator() throws RecognitionException {
        ObjcmParser.operator_return retval = new ObjcmParser.operator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_wrapper_return extern_wrapper5 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper6 =null;

        ObjcmParser.type_start_wrapper_return type_start_wrapper7 =null;

        ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper8 =null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration9 =null;



        try {
            // Objcm.g:125:2: ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration )
            int alt3=5;
            switch ( input.LA(1) ) {
            case 181:
                {
                alt3=1;
                }
                break;
            case STATIC_PREFIX:
                {
                alt3=2;
                }
                break;
            case CONST_PREFIX:
            case ID:
            case VOID:
                {
                alt3=3;
                }
                break;
            case 165:
                {
                alt3=4;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt3=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }

            switch (alt3) {
                case 1 :
                    // Objcm.g:125:4: extern_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_wrapper_in_operator464);
                    extern_wrapper5=extern_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, extern_wrapper5.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:126:4: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_operator470);
                    static_section_wrapper6=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper6.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:127:4: type_start_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_start_wrapper_in_operator475);
                    type_start_wrapper7=type_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, type_start_wrapper7.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:128:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_operator482);
                    interface_declaration_wrapper8=interface_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_declaration_wrapper8.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:129:4: typedef_struct_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_in_operator488);
                    typedef_struct_declaration9=typedef_struct_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration9.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // Objcm.g:136:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcmParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcmParser.extern_wrapper_return retval = new ObjcmParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_return extern10 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // Objcm.g:137:3: ( extern -> ^( EXTERN ) )
            // Objcm.g:137:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper507);
            extern10=extern();

            state._fsp--;

            stream_extern.add(extern10.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 137:12: -> ^( EXTERN )
            {
                // Objcm.g:137:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // Objcm.g:140:2: extern : 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR ;
    public final ObjcmParser.extern_return extern() throws RecognitionException {
        ObjcmParser.extern_return retval = new ObjcmParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal11=null;
        Token string_literal12=null;
        Token L_FBR13=null;
        Token set14=null;
        Token R_FBR15=null;

        Object string_literal11_tree=null;
        Object string_literal12_tree=null;
        Object L_FBR13_tree=null;
        Object set14_tree=null;
        Object R_FBR15_tree=null;

        try {
            // Objcm.g:140:9: ( 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR )
            // Objcm.g:140:11: 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR
            {
            root_0 = (Object)adaptor.nil();


            string_literal11=(Token)match(input,181,FOLLOW_181_in_extern526); 
            string_literal11_tree = 
            (Object)adaptor.create(string_literal11)
            ;
            adaptor.addChild(root_0, string_literal11_tree);


            string_literal12=(Token)match(input,157,FOLLOW_157_in_extern529); 
            string_literal12_tree = 
            (Object)adaptor.create(string_literal12)
            ;
            adaptor.addChild(root_0, string_literal12_tree);


            L_FBR13=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_extern532); 
            L_FBR13_tree = 
            (Object)adaptor.create(L_FBR13)
            ;
            adaptor.addChild(root_0, L_FBR13_tree);


            set14=(Token)input.LT(1);

            if ( (input.LA(1) >= ASSIGN && input.LA(1) <= R_BR)||(input.LA(1) >= R_KBR && input.LA(1) <= 192) ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set14)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            R_FBR15=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_extern539); 
            R_FBR15_tree = 
            (Object)adaptor.create(R_FBR15)
            ;
            adaptor.addChild(root_0, R_FBR15_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // Objcm.g:142:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcmParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcmParser.implementation_wrapper_return retval = new ObjcmParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_return implementation16 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // Objcm.g:143:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // Objcm.g:143:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper551);
            implementation16=implementation();

            state._fsp--;

            stream_implementation.add(implementation16.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 143:20: -> ^( IMPLEMENTATION implementation )
            {
                // Objcm.g:143:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // Objcm.g:145:1: implementation : '@implementation' name ( category )? ( super_class )? ( implementation_body )+ '@end' ( SEMICOLON )? ;
    public final ObjcmParser.implementation_return implementation() throws RecognitionException {
        ObjcmParser.implementation_return retval = new ObjcmParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal17=null;
        Token string_literal22=null;
        Token SEMICOLON23=null;
        ObjcmParser.name_return name18 =null;

        ObjcmParser.category_return category19 =null;

        ObjcmParser.super_class_return super_class20 =null;

        ObjcmParser.implementation_body_return implementation_body21 =null;


        Object string_literal17_tree=null;
        Object string_literal22_tree=null;
        Object SEMICOLON23_tree=null;

        try {
            // Objcm.g:146:2: ( '@implementation' name ( category )? ( super_class )? ( implementation_body )+ '@end' ( SEMICOLON )? )
            // Objcm.g:146:4: '@implementation' name ( category )? ( super_class )? ( implementation_body )+ '@end' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal17=(Token)match(input,164,FOLLOW_164_in_implementation570); 
            string_literal17_tree = 
            (Object)adaptor.create(string_literal17)
            ;
            adaptor.addChild(root_0, string_literal17_tree);


            pushFollow(FOLLOW_name_in_implementation573);
            name18=name();

            state._fsp--;

            adaptor.addChild(root_0, name18.getTree());

            // Objcm.g:146:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==L_BR) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // Objcm.g:146:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation576);
                    category19=category();

                    state._fsp--;

                    adaptor.addChild(root_0, category19.getTree());

                    }
                    break;

            }


            // Objcm.g:146:39: ( super_class )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==COLON) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // Objcm.g:146:39: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_implementation579);
                    super_class20=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class20.getTree());

                    }
                    break;

            }


            // Objcm.g:147:3: ( implementation_body )+
            int cnt6=0;
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==ID||LA6_0==L_MINUS||LA6_0==L_PLUS||LA6_0==STATIC_PREFIX||LA6_0==STRUCT_PREFIX||LA6_0==VOID||LA6_0==170||LA6_0==181||LA6_0==189) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // Objcm.g:147:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation584);
            	    implementation_body21=implementation_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, implementation_body21.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt6 >= 1 ) break loop6;
                        EarlyExitException eee =
                            new EarlyExitException(6, input);
                        throw eee;
                }
                cnt6++;
            } while (true);


            string_literal22=(Token)match(input,162,FOLLOW_162_in_implementation589); 
            string_literal22_tree = 
            (Object)adaptor.create(string_literal22)
            ;
            adaptor.addChild(root_0, string_literal22_tree);


            // Objcm.g:148:11: ( SEMICOLON )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==SEMICOLON) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // Objcm.g:148:11: SEMICOLON
                    {
                    SEMICOLON23=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation592); 
                    SEMICOLON23_tree = 
                    (Object)adaptor.create(SEMICOLON23)
                    ;
                    adaptor.addChild(root_0, SEMICOLON23_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // Objcm.g:151:1: category : L_BR name R_BR -> ^( CATEGORY name ) ;
    public final ObjcmParser.category_return category() throws RecognitionException {
        ObjcmParser.category_return retval = new ObjcmParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR24=null;
        Token R_BR26=null;
        ObjcmParser.name_return name25 =null;


        Object L_BR24_tree=null;
        Object R_BR26_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // Objcm.g:151:9: ( L_BR name R_BR -> ^( CATEGORY name ) )
            // Objcm.g:151:11: L_BR name R_BR
            {
            L_BR24=(Token)match(input,L_BR,FOLLOW_L_BR_in_category604);  
            stream_L_BR.add(L_BR24);


            pushFollow(FOLLOW_name_in_category607);
            name25=name();

            state._fsp--;

            stream_name.add(name25.getTree());

            R_BR26=(Token)match(input,R_BR,FOLLOW_R_BR_in_category610);  
            stream_R_BR.add(R_BR26);


            // AST REWRITE
            // elements: name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 151:28: -> ^( CATEGORY name )
            {
                // Objcm.g:151:31: ^( CATEGORY name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // Objcm.g:153:1: implementation_body : ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper );
    public final ObjcmParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcmParser.implementation_body_return retval = new ObjcmParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.directives_return directives27 =null;

        ObjcmParser.typedef_return typedef28 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper29 =null;

        ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper30 =null;

        ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper31 =null;

        ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper32 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper33 =null;



        try {
            // Objcm.g:154:2: ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper )
            int alt8=7;
            switch ( input.LA(1) ) {
            case 170:
                {
                alt8=1;
                }
                break;
            case 189:
                {
                alt8=2;
                }
                break;
            case STATIC_PREFIX:
                {
                alt8=3;
                }
                break;
            case L_MINUS:
            case L_PLUS:
                {
                alt8=4;
                }
                break;
            case ID:
            case VOID:
                {
                alt8=5;
                }
                break;
            case 181:
                {
                alt8=6;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt8=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }

            switch (alt8) {
                case 1 :
                    // Objcm.g:154:4: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body628);
                    directives27=directives();

                    state._fsp--;

                    adaptor.addChild(root_0, directives27.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:155:5: typedef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_in_implementation_body634);
                    typedef28=typedef();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef28.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:156:5: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_implementation_body640);
                    static_section_wrapper29=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper29.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:157:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body646);
                    implementation_method_wrapper30=implementation_method_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper30.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:159:4: field_type_started_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_type_started_wrapper_in_implementation_body652);
                    field_type_started_wrapper31=field_type_started_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_type_started_wrapper31.getTree());

                    }
                    break;
                case 6 :
                    // Objcm.g:160:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_implementation_body658);
                    field_declaration_wrapper32=field_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_wrapper32.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:161:4: typedef_struct_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body663);
                    typedef_struct_declaration_wrapper33=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // Objcm.g:164:1: directives : synthesize ;
    public final ObjcmParser.directives_return directives() throws RecognitionException {
        ObjcmParser.directives_return retval = new ObjcmParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.synthesize_return synthesize34 =null;



        try {
            // Objcm.g:165:2: ( synthesize )
            // Objcm.g:165:4: synthesize
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_synthesize_in_directives674);
            synthesize34=synthesize();

            state._fsp--;

            adaptor.addChild(root_0, synthesize34.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // Objcm.g:168:1: synthesize : '@synthesize' ID SEMICOLON ;
    public final ObjcmParser.synthesize_return synthesize() throws RecognitionException {
        ObjcmParser.synthesize_return retval = new ObjcmParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal35=null;
        Token ID36=null;
        Token SEMICOLON37=null;

        Object string_literal35_tree=null;
        Object ID36_tree=null;
        Object SEMICOLON37_tree=null;

        try {
            // Objcm.g:169:2: ( '@synthesize' ID SEMICOLON )
            // Objcm.g:169:4: '@synthesize' ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal35=(Token)match(input,170,FOLLOW_170_in_synthesize687); 
            string_literal35_tree = 
            (Object)adaptor.create(string_literal35)
            ;
            adaptor.addChild(root_0, string_literal35_tree);


            ID36=(Token)match(input,ID,FOLLOW_ID_in_synthesize690); 
            ID36_tree = 
            (Object)adaptor.create(ID36)
            ;
            adaptor.addChild(root_0, ID36_tree);


            SEMICOLON37=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synthesize693); 
            SEMICOLON37_tree = 
            (Object)adaptor.create(SEMICOLON37)
            ;
            adaptor.addChild(root_0, SEMICOLON37_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class typedef_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef"
    // Objcm.g:172:1: typedef : 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper ) ;
    public final ObjcmParser.typedef_return typedef() throws RecognitionException {
        ObjcmParser.typedef_return retval = new ObjcmParser.typedef_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal38=null;
        ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper39 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper40 =null;


        Object string_literal38_tree=null;

        try {
            // Objcm.g:172:9: ( 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper ) )
            // Objcm.g:172:11: 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            string_literal38=(Token)match(input,189,FOLLOW_189_in_typedef705); 
            string_literal38_tree = 
            (Object)adaptor.create(string_literal38)
            ;
            adaptor.addChild(root_0, string_literal38_tree);


            // Objcm.g:172:22: ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==ENUM_PREFIX) ) {
                alt9=1;
            }
            else if ( (LA9_0==STRUCT_PREFIX) ) {
                alt9=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // Objcm.g:172:23: typedef_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_typedef709);
                    typedef_declaration_wrapper39=typedef_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_declaration_wrapper39.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:172:53: typedef_struct_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_typedef713);
                    typedef_struct_declaration_wrapper40=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper40.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef"


    public static class static_section_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section_wrapper"
    // Objcm.g:175:1: static_section_wrapper : static_section -> ^( STATIC static_section ) ;
    public final ObjcmParser.static_section_wrapper_return static_section_wrapper() throws RecognitionException {
        ObjcmParser.static_section_wrapper_return retval = new ObjcmParser.static_section_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_section_return static_section41 =null;


        RewriteRuleSubtreeStream stream_static_section=new RewriteRuleSubtreeStream(adaptor,"rule static_section");
        try {
            // Objcm.g:176:2: ( static_section -> ^( STATIC static_section ) )
            // Objcm.g:176:4: static_section
            {
            pushFollow(FOLLOW_static_section_in_static_section_wrapper728);
            static_section41=static_section();

            state._fsp--;

            stream_static_section.add(static_section41.getTree());

            // AST REWRITE
            // elements: static_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 176:19: -> ^( STATIC static_section )
            {
                // Objcm.g:176:22: ^( STATIC static_section )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC, "STATIC")
                , root_1);

                adaptor.addChild(root_1, stream_static_section.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section_wrapper"


    public static class static_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section"
    // Objcm.g:178:1: static_section : STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 ;
    public final ObjcmParser.static_section_return static_section() throws RecognitionException {
        ObjcmParser.static_section_return retval = new ObjcmParser.static_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX42=null;
        Token CONST_PREFIX43=null;
        Token STRUCT_PREFIX44=null;
        Token ENUM_PREFIX45=null;
        ObjcmParser.static_section2_return static_section246 =null;


        Object STATIC_PREFIX42_tree=null;
        Object CONST_PREFIX43_tree=null;
        Object STRUCT_PREFIX44_tree=null;
        Object ENUM_PREFIX45_tree=null;

        try {
            // Objcm.g:179:2: ( STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 )
            // Objcm.g:179:4: STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX42=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_section748); 
            STATIC_PREFIX42_tree = 
            (Object)adaptor.create(STATIC_PREFIX42)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX42_tree);


            // Objcm.g:179:18: ( CONST_PREFIX )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==CONST_PREFIX) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // Objcm.g:179:18: CONST_PREFIX
                    {
                    CONST_PREFIX43=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_section750); 
                    CONST_PREFIX43_tree = 
                    (Object)adaptor.create(CONST_PREFIX43)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX43_tree);


                    }
                    break;

            }


            // Objcm.g:179:32: ( STRUCT_PREFIX )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==STRUCT_PREFIX) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // Objcm.g:179:32: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX44=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_static_section753); 
                    STRUCT_PREFIX44_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX44)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX44_tree);


                    }
                    break;

            }


            // Objcm.g:179:47: ( ENUM_PREFIX )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ENUM_PREFIX) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // Objcm.g:179:47: ENUM_PREFIX
                    {
                    ENUM_PREFIX45=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_static_section756); 
                    ENUM_PREFIX45_tree = 
                    (Object)adaptor.create(ENUM_PREFIX45)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX45_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_static_section2_in_static_section759);
            static_section246=static_section2();

            state._fsp--;

            adaptor.addChild(root_0, static_section246.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section"


    public static class static_section2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section2"
    // Objcm.g:181:1: static_section2 : ( inline_section | implementation_method_wrapper2 | static_section3 );
    public final ObjcmParser.static_section2_return static_section2() throws RecognitionException {
        ObjcmParser.static_section2_return retval = new ObjcmParser.static_section2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.inline_section_return inline_section47 =null;

        ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper248 =null;

        ObjcmParser.static_section3_return static_section349 =null;



        try {
            // Objcm.g:182:2: ( inline_section | implementation_method_wrapper2 | static_section3 )
            int alt13=3;
            switch ( input.LA(1) ) {
            case 185:
                {
                alt13=1;
                }
                break;
            case L_FBR:
            case SEMICOLON:
                {
                alt13=2;
                }
                break;
            case ID:
            case VOID:
                {
                alt13=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }

            switch (alt13) {
                case 1 :
                    // Objcm.g:182:4: inline_section
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_inline_section_in_static_section2768);
                    inline_section47=inline_section();

                    state._fsp--;

                    adaptor.addChild(root_0, inline_section47.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:183:5: implementation_method_wrapper2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper2_in_static_section2775);
                    implementation_method_wrapper248=implementation_method_wrapper2();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper248.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:184:5: static_section3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section3_in_static_section2782);
                    static_section349=static_section3();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section349.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section2"


    public static class inline_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_section"
    // Objcm.g:187:1: inline_section : 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) ;
    public final ObjcmParser.inline_section_return inline_section() throws RecognitionException {
        ObjcmParser.inline_section_return retval = new ObjcmParser.inline_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal50=null;
        Token SEMICOLON55=null;
        ObjcmParser.field_type_return field_type51 =null;

        ObjcmParser.name_return name52 =null;

        ObjcmParser.method_params2_return method_params253 =null;

        ObjcmParser.block_wrapper_return block_wrapper54 =null;


        Object string_literal50_tree=null;
        Object SEMICOLON55_tree=null;

        try {
            // Objcm.g:188:2: ( 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) )
            // Objcm.g:188:4: 'inline' field_type name ( method_params2 )? ( block_wrapper | SEMICOLON )
            {
            root_0 = (Object)adaptor.nil();


            string_literal50=(Token)match(input,185,FOLLOW_185_in_inline_section794); 
            string_literal50_tree = 
            (Object)adaptor.create(string_literal50)
            ;
            adaptor.addChild(root_0, string_literal50_tree);


            pushFollow(FOLLOW_field_type_in_inline_section797);
            field_type51=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type51.getTree());

            pushFollow(FOLLOW_name_in_inline_section799);
            name52=name();

            state._fsp--;

            adaptor.addChild(root_0, name52.getTree());

            // Objcm.g:188:31: ( method_params2 )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==L_BR) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // Objcm.g:188:31: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_inline_section802);
                    method_params253=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params253.getTree());

                    }
                    break;

            }


            // Objcm.g:188:47: ( block_wrapper | SEMICOLON )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==L_FBR) ) {
                alt15=1;
            }
            else if ( (LA15_0==SEMICOLON) ) {
                alt15=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;

            }
            switch (alt15) {
                case 1 :
                    // Objcm.g:188:48: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_inline_section806);
                    block_wrapper54=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper54.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:188:64: SEMICOLON
                    {
                    SEMICOLON55=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inline_section810); 
                    SEMICOLON55_tree = 
                    (Object)adaptor.create(SEMICOLON55)
                    ;
                    adaptor.addChild(root_0, SEMICOLON55_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_section"


    public static class static_section3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section3"
    // Objcm.g:190:1: static_section3 : field_type name ( indexed )* static_end ;
    public final ObjcmParser.static_section3_return static_section3() throws RecognitionException {
        ObjcmParser.static_section3_return retval = new ObjcmParser.static_section3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type56 =null;

        ObjcmParser.name_return name57 =null;

        ObjcmParser.indexed_return indexed58 =null;

        ObjcmParser.static_end_return static_end59 =null;



        try {
            // Objcm.g:191:2: ( field_type name ( indexed )* static_end )
            // Objcm.g:191:4: field_type name ( indexed )* static_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_static_section3821);
            field_type56=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type56.getTree());

            pushFollow(FOLLOW_name_in_static_section3823);
            name57=name();

            state._fsp--;

            adaptor.addChild(root_0, name57.getTree());

            // Objcm.g:191:20: ( indexed )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==L_KBR) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // Objcm.g:191:20: indexed
            	    {
            	    pushFollow(FOLLOW_indexed_in_static_section3825);
            	    indexed58=indexed();

            	    state._fsp--;

            	    adaptor.addChild(root_0, indexed58.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            pushFollow(FOLLOW_static_end_in_static_section3829);
            static_end59=static_end();

            state._fsp--;

            adaptor.addChild(root_0, static_end59.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section3"


    public static class static_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_end"
    // Objcm.g:194:1: static_end : ( implementation_method_wrapper3 | field_end );
    public final ObjcmParser.static_end_return static_end() throws RecognitionException {
        ObjcmParser.static_end_return retval = new ObjcmParser.static_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper360 =null;

        ObjcmParser.field_end_return field_end61 =null;



        try {
            // Objcm.g:195:2: ( implementation_method_wrapper3 | field_end )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==L_BR) ) {
                alt17=1;
            }
            else if ( (LA17_0==L_EQ||LA17_0==SEMICOLON) ) {
                alt17=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // Objcm.g:195:4: implementation_method_wrapper3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper3_in_static_end841);
                    implementation_method_wrapper360=implementation_method_wrapper3();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper360.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:196:5: field_end
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_end_in_static_end847);
                    field_end61=field_end();

                    state._fsp--;

                    adaptor.addChild(root_0, field_end61.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_end"


    public static class field_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end"
    // Objcm.g:198:1: field_end : field_end_internal -> ^( FIELD field_end_internal ) ;
    public final ObjcmParser.field_end_return field_end() throws RecognitionException {
        ObjcmParser.field_end_return retval = new ObjcmParser.field_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_end_internal_return field_end_internal62 =null;


        RewriteRuleSubtreeStream stream_field_end_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_end_internal");
        try {
            // Objcm.g:199:2: ( field_end_internal -> ^( FIELD field_end_internal ) )
            // Objcm.g:199:4: field_end_internal
            {
            pushFollow(FOLLOW_field_end_internal_in_field_end858);
            field_end_internal62=field_end_internal();

            state._fsp--;

            stream_field_end_internal.add(field_end_internal62.getTree());

            // AST REWRITE
            // elements: field_end_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 199:23: -> ^( FIELD field_end_internal )
            {
                // Objcm.g:199:26: ^( FIELD field_end_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_end_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end"


    public static class field_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end_internal"
    // Objcm.g:201:1: field_end_internal : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_end_internal_return field_end_internal() throws RecognitionException {
        ObjcmParser.field_end_internal_return retval = new ObjcmParser.field_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON64=null;
        ObjcmParser.value_set_return value_set63 =null;


        Object SEMICOLON64_tree=null;

        try {
            // Objcm.g:202:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:202:4: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:202:4: ( value_set )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==L_EQ) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // Objcm.g:202:4: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_end_internal876);
                    value_set63=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set63.getTree());

                    }
                    break;

            }


            SEMICOLON64=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_end_internal879); 
            SEMICOLON64_tree = 
            (Object)adaptor.create(SEMICOLON64)
            ;
            adaptor.addChild(root_0, SEMICOLON64_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end_internal"


    public static class implementation_method_wrapper3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper3"
    // Objcm.g:204:1: implementation_method_wrapper3 : implementation_method3 -> ^( METHOD implementation_method3 ) ;
    public final ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper3() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper3_return retval = new ObjcmParser.implementation_method_wrapper3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method3_return implementation_method365 =null;


        RewriteRuleSubtreeStream stream_implementation_method3=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method3");
        try {
            // Objcm.g:205:2: ( implementation_method3 -> ^( METHOD implementation_method3 ) )
            // Objcm.g:205:4: implementation_method3
            {
            pushFollow(FOLLOW_implementation_method3_in_implementation_method_wrapper3891);
            implementation_method365=implementation_method3();

            state._fsp--;

            stream_implementation_method3.add(implementation_method365.getTree());

            // AST REWRITE
            // elements: implementation_method3
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 205:27: -> ^( METHOD implementation_method3 )
            {
                // Objcm.g:205:30: ^( METHOD implementation_method3 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method3.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper3"


    public static class implementation_method3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method3"
    // Objcm.g:207:1: implementation_method3 : method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? ;
    public final ObjcmParser.implementation_method3_return implementation_method3() throws RecognitionException {
        ObjcmParser.implementation_method3_return retval = new ObjcmParser.implementation_method3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON67=null;
        ObjcmParser.method_header_body3_return method_header_body366 =null;

        ObjcmParser.attribute_return attribute68 =null;

        ObjcmParser.block_wrapper_return block_wrapper69 =null;


        Object SEMICOLON67_tree=null;

        try {
            // Objcm.g:208:2: ( method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? )
            // Objcm.g:208:4: method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body3_in_implementation_method3909);
            method_header_body366=method_header_body3();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body366.getTree());

            // Objcm.g:208:25: ( SEMICOLON )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==SEMICOLON) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // Objcm.g:208:25: SEMICOLON
                    {
                    SEMICOLON67=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method3912); 
                    SEMICOLON67_tree = 
                    (Object)adaptor.create(SEMICOLON67)
                    ;
                    adaptor.addChild(root_0, SEMICOLON67_tree);


                    }
                    break;

            }


            // Objcm.g:209:3: ( attribute )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==174) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // Objcm.g:209:3: attribute
                    {
                    pushFollow(FOLLOW_attribute_in_implementation_method3917);
                    attribute68=attribute();

                    state._fsp--;

                    adaptor.addChild(root_0, attribute68.getTree());

                    }
                    break;

            }


            // Objcm.g:210:3: ( block_wrapper )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==L_FBR) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // Objcm.g:210:3: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_implementation_method3922);
                    block_wrapper69=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper69.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method3"


    public static class attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute"
    // Objcm.g:213:1: attribute : '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON ;
    public final ObjcmParser.attribute_return attribute() throws RecognitionException {
        ObjcmParser.attribute_return retval = new ObjcmParser.attribute_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal70=null;
        Token L_BR71=null;
        Token L_BR72=null;
        Token string_literal73=null;
        Token R_BR74=null;
        Token R_BR75=null;
        Token SEMICOLON76=null;

        Object string_literal70_tree=null;
        Object L_BR71_tree=null;
        Object L_BR72_tree=null;
        Object string_literal73_tree=null;
        Object R_BR74_tree=null;
        Object R_BR75_tree=null;
        Object SEMICOLON76_tree=null;

        try {
            // Objcm.g:214:2: ( '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON )
            // Objcm.g:214:4: '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal70=(Token)match(input,174,FOLLOW_174_in_attribute935); 
            string_literal70_tree = 
            (Object)adaptor.create(string_literal70)
            ;
            adaptor.addChild(root_0, string_literal70_tree);


            L_BR71=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute938); 
            L_BR71_tree = 
            (Object)adaptor.create(L_BR71)
            ;
            adaptor.addChild(root_0, L_BR71_tree);


            L_BR72=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute941); 
            L_BR72_tree = 
            (Object)adaptor.create(L_BR72)
            ;
            adaptor.addChild(root_0, L_BR72_tree);


            string_literal73=(Token)match(input,177,FOLLOW_177_in_attribute944); 
            string_literal73_tree = 
            (Object)adaptor.create(string_literal73)
            ;
            adaptor.addChild(root_0, string_literal73_tree);


            R_BR74=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute947); 
            R_BR74_tree = 
            (Object)adaptor.create(R_BR74)
            ;
            adaptor.addChild(root_0, R_BR74_tree);


            R_BR75=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute950); 
            R_BR75_tree = 
            (Object)adaptor.create(R_BR75)
            ;
            adaptor.addChild(root_0, R_BR75_tree);


            SEMICOLON76=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_attribute953); 
            SEMICOLON76_tree = 
            (Object)adaptor.create(SEMICOLON76)
            ;
            adaptor.addChild(root_0, SEMICOLON76_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute"


    public static class implementation_method2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method2"
    // Objcm.g:216:1: implementation_method2 : ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method2_return implementation_method2() throws RecognitionException {
        ObjcmParser.implementation_method2_return retval = new ObjcmParser.implementation_method2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON77=null;
        ObjcmParser.block_wrapper_return block_wrapper78 =null;


        Object SEMICOLON77_tree=null;

        try {
            // Objcm.g:217:2: ( ( SEMICOLON )? block_wrapper )
            // Objcm.g:217:5: ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:217:5: ( SEMICOLON )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==SEMICOLON) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // Objcm.g:217:5: SEMICOLON
                    {
                    SEMICOLON77=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method2965); 
                    SEMICOLON77_tree = 
                    (Object)adaptor.create(SEMICOLON77)
                    ;
                    adaptor.addChild(root_0, SEMICOLON77_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method2970);
            block_wrapper78=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper78.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method2"


    public static class field_type_started_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started_wrapper"
    // Objcm.g:221:1: field_type_started_wrapper : field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) ;
    public final ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper() throws RecognitionException {
        ObjcmParser.field_type_started_wrapper_return retval = new ObjcmParser.field_type_started_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_started_return field_type_started79 =null;


        RewriteRuleSubtreeStream stream_field_type_started=new RewriteRuleSubtreeStream(adaptor,"rule field_type_started");
        try {
            // Objcm.g:222:2: ( field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) )
            // Objcm.g:222:4: field_type_started
            {
            pushFollow(FOLLOW_field_type_started_in_field_type_started_wrapper982);
            field_type_started79=field_type_started();

            state._fsp--;

            stream_field_type_started.add(field_type_started79.getTree());

            // AST REWRITE
            // elements: field_type_started
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 222:23: -> ^( FIELD_TYPE_STARTED field_type_started )
            {
                // Objcm.g:222:26: ^( FIELD_TYPE_STARTED field_type_started )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_TYPE_STARTED, "FIELD_TYPE_STARTED")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_started.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started_wrapper"


    public static class field_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started"
    // Objcm.g:224:1: field_type_started : field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) ;
    public final ObjcmParser.field_type_started_return field_type_started() throws RecognitionException {
        ObjcmParser.field_type_started_return retval = new ObjcmParser.field_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type80 =null;

        ObjcmParser.name_return name81 =null;

        ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper82 =null;

        ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper83 =null;



        try {
            // Objcm.g:225:2: ( field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) )
            // Objcm.g:225:4: field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_field_type_started1001);
            field_type80=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type80.getTree());

            pushFollow(FOLLOW_name_in_field_type_started1003);
            name81=name();

            state._fsp--;

            adaptor.addChild(root_0, name81.getTree());

            // Objcm.g:225:20: ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==L_BR) ) {
                alt23=1;
            }
            else if ( (LA23_0==L_EQ||LA23_0==SEMICOLON) ) {
                alt23=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }
            switch (alt23) {
                case 1 :
                    // Objcm.g:225:21: classic_method_declaration_wrapper
                    {
                    pushFollow(FOLLOW_classic_method_declaration_wrapper_in_field_type_started1006);
                    classic_method_declaration_wrapper82=classic_method_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, classic_method_declaration_wrapper82.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:225:58: field_declaration_end_wrapper
                    {
                    pushFollow(FOLLOW_field_declaration_end_wrapper_in_field_type_started1010);
                    field_declaration_end_wrapper83=field_declaration_end_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_end_wrapper83.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started"


    public static class field_declaration_end_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end_wrapper"
    // Objcm.g:227:1: field_declaration_end_wrapper : field_declaration_end -> ^( FIELD field_declaration_end ) ;
    public final ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_end_wrapper_return retval = new ObjcmParser.field_declaration_end_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_end_return field_declaration_end84 =null;


        RewriteRuleSubtreeStream stream_field_declaration_end=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_end");
        try {
            // Objcm.g:228:2: ( field_declaration_end -> ^( FIELD field_declaration_end ) )
            // Objcm.g:228:4: field_declaration_end
            {
            pushFollow(FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1021);
            field_declaration_end84=field_declaration_end();

            state._fsp--;

            stream_field_declaration_end.add(field_declaration_end84.getTree());

            // AST REWRITE
            // elements: field_declaration_end
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 228:26: -> ^( FIELD field_declaration_end )
            {
                // Objcm.g:228:29: ^( FIELD field_declaration_end )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_end.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end_wrapper"


    public static class classic_method_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration_wrapper"
    // Objcm.g:230:1: classic_method_declaration_wrapper : classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) ;
    public final ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper() throws RecognitionException {
        ObjcmParser.classic_method_declaration_wrapper_return retval = new ObjcmParser.classic_method_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classic_method_declaration_return classic_method_declaration85 =null;


        RewriteRuleSubtreeStream stream_classic_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classic_method_declaration");
        try {
            // Objcm.g:231:2: ( classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) )
            // Objcm.g:231:4: classic_method_declaration
            {
            pushFollow(FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1039);
            classic_method_declaration85=classic_method_declaration();

            state._fsp--;

            stream_classic_method_declaration.add(classic_method_declaration85.getTree());

            // AST REWRITE
            // elements: classic_method_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 231:31: -> ^( STATIC_METHOD classic_method_declaration )
            {
                // Objcm.g:231:34: ^( STATIC_METHOD classic_method_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_classic_method_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration_wrapper"


    public static class classic_method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration"
    // Objcm.g:233:1: classic_method_declaration : method_params2 block_wrapper ;
    public final ObjcmParser.classic_method_declaration_return classic_method_declaration() throws RecognitionException {
        ObjcmParser.classic_method_declaration_return retval = new ObjcmParser.classic_method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params286 =null;

        ObjcmParser.block_wrapper_return block_wrapper87 =null;



        try {
            // Objcm.g:235:2: ( method_params2 block_wrapper )
            // Objcm.g:235:4: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_classic_method_declaration1059);
            method_params286=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params286.getTree());

            pushFollow(FOLLOW_block_wrapper_in_classic_method_declaration1064);
            block_wrapper87=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper87.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // Objcm.g:239:1: implementation_method_wrapper : implementation_method -> ^( METHOD implementation_method ) ;
    public final ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper_return retval = new ObjcmParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_return implementation_method88 =null;


        RewriteRuleSubtreeStream stream_implementation_method=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method");
        try {
            // Objcm.g:240:2: ( implementation_method -> ^( METHOD implementation_method ) )
            // Objcm.g:240:4: implementation_method
            {
            pushFollow(FOLLOW_implementation_method_in_implementation_method_wrapper1077);
            implementation_method88=implementation_method();

            state._fsp--;

            stream_implementation_method.add(implementation_method88.getTree());

            // AST REWRITE
            // elements: implementation_method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 240:26: -> ^( METHOD implementation_method )
            {
                // Objcm.g:240:29: ^( METHOD implementation_method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class implementation_method_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper2"
    // Objcm.g:242:1: implementation_method_wrapper2 : implementation_method2 -> ^( METHOD implementation_method2 ) ;
    public final ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper2() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper2_return retval = new ObjcmParser.implementation_method_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method2_return implementation_method289 =null;


        RewriteRuleSubtreeStream stream_implementation_method2=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method2");
        try {
            // Objcm.g:243:2: ( implementation_method2 -> ^( METHOD implementation_method2 ) )
            // Objcm.g:243:4: implementation_method2
            {
            pushFollow(FOLLOW_implementation_method2_in_implementation_method_wrapper21094);
            implementation_method289=implementation_method2();

            state._fsp--;

            stream_implementation_method2.add(implementation_method289.getTree());

            // AST REWRITE
            // elements: implementation_method2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 243:27: -> ^( METHOD implementation_method2 )
            {
                // Objcm.g:243:30: ^( METHOD implementation_method2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper2"


    public static class implementation_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method"
    // Objcm.g:245:1: implementation_method : method_header_body ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method_return implementation_method() throws RecognitionException {
        ObjcmParser.implementation_method_return retval = new ObjcmParser.implementation_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON91=null;
        ObjcmParser.method_header_body_return method_header_body90 =null;

        ObjcmParser.block_wrapper_return block_wrapper92 =null;


        Object SEMICOLON91_tree=null;

        try {
            // Objcm.g:246:2: ( method_header_body ( SEMICOLON )? block_wrapper )
            // Objcm.g:246:4: method_header_body ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_implementation_method1111);
            method_header_body90=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body90.getTree());

            // Objcm.g:246:23: ( SEMICOLON )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==SEMICOLON) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // Objcm.g:246:23: SEMICOLON
                    {
                    SEMICOLON91=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method1113); 
                    SEMICOLON91_tree = 
                    (Object)adaptor.create(SEMICOLON91)
                    ;
                    adaptor.addChild(root_0, SEMICOLON91_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method1118);
            block_wrapper92=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper92.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method"


    public static class block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_wrapper"
    // Objcm.g:250:1: block_wrapper : block -> ^( BLOCK block ) ;
    public final ObjcmParser.block_wrapper_return block_wrapper() throws RecognitionException {
        ObjcmParser.block_wrapper_return retval = new ObjcmParser.block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_return block93 =null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // Objcm.g:251:2: ( block -> ^( BLOCK block ) )
            // Objcm.g:251:4: block
            {
            pushFollow(FOLLOW_block_in_block_wrapper1131);
            block93=block();

            state._fsp--;

            stream_block.add(block93.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 251:10: -> ^( BLOCK block )
            {
                // Objcm.g:251:13: ^( BLOCK block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK, "BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_wrapper"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // Objcm.g:253:1: block : L_FBR ( block_internal_full | block )* R_FBR ;
    public final ObjcmParser.block_return block() throws RecognitionException {
        ObjcmParser.block_return retval = new ObjcmParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR94=null;
        Token R_FBR97=null;
        ObjcmParser.block_internal_full_return block_internal_full95 =null;

        ObjcmParser.block_return block96 =null;


        Object L_FBR94_tree=null;
        Object R_FBR97_tree=null;

        try {
            // Objcm.g:253:7: ( L_FBR ( block_internal_full | block )* R_FBR )
            // Objcm.g:254:3: L_FBR ( block_internal_full | block )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR94=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block1153); 
            L_FBR94_tree = 
            (Object)adaptor.create(L_FBR94)
            ;
            adaptor.addChild(root_0, L_FBR94_tree);


            // Objcm.g:255:4: ( block_internal_full | block )*
            loop25:
            do {
                int alt25=3;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==ASTERISK||LA25_0==BREAK_WORD||LA25_0==CONST_PREFIX||LA25_0==ENUM_PREFIX||LA25_0==ID||LA25_0==L_AND||LA25_0==L_BR||LA25_0==L_KBR||LA25_0==L_MINUS||LA25_0==L_MINUS_MINUS||LA25_0==L_NOT||LA25_0==L_PLUS||LA25_0==L_PLUS_PLUS||LA25_0==L_TILDA||LA25_0==NUMBER||LA25_0==SEMICOLON||(LA25_0 >= SINGLE_OP && LA25_0 <= SIZEOF)||LA25_0==STATIC_PREFIX||(LA25_0 >= STRING_LITERAL && LA25_0 <= STRING_LITERAL3)||LA25_0==STRUCT_PREFIX||LA25_0==VOID||LA25_0==161||LA25_0==167||LA25_0==169||(LA25_0 >= 171 && LA25_0 <= 173)||LA25_0==175||(LA25_0 >= 179 && LA25_0 <= 180)||(LA25_0 >= 182 && LA25_0 <= 184)||(LA25_0 >= 186 && LA25_0 <= 188)||(LA25_0 >= 191 && LA25_0 <= 192)) ) {
                    alt25=1;
                }
                else if ( (LA25_0==L_FBR) ) {
                    alt25=2;
                }


                switch (alt25) {
            	case 1 :
            	    // Objcm.g:255:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block1159);
            	    block_internal_full95=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full95.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:255:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block1163);
            	    block96=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block96.getTree());

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);


            R_FBR97=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block1171); 
            R_FBR97_tree = 
            (Object)adaptor.create(R_FBR97)
            ;
            adaptor.addChild(root_0, R_FBR97_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_case_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_case"
    // Objcm.g:259:1: block_case : L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR ;
    public final ObjcmParser.block_case_return block_case() throws RecognitionException {
        ObjcmParser.block_case_return retval = new ObjcmParser.block_case_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR98=null;
        Token R_FBR102=null;
        ObjcmParser.block_internal_full_return block_internal_full99 =null;

        ObjcmParser.block_return block100 =null;

        ObjcmParser.default_stmt_return default_stmt101 =null;


        Object L_FBR98_tree=null;
        Object R_FBR102_tree=null;

        try {
            // Objcm.g:260:2: ( L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR )
            // Objcm.g:261:3: L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR98=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block_case1186); 
            L_FBR98_tree = 
            (Object)adaptor.create(L_FBR98)
            ;
            adaptor.addChild(root_0, L_FBR98_tree);


            // Objcm.g:262:4: ( block_internal_full | block )*
            loop26:
            do {
                int alt26=3;
                int LA26_0 = input.LA(1);

                if ( (LA26_0==ASTERISK||LA26_0==BREAK_WORD||LA26_0==CONST_PREFIX||LA26_0==ENUM_PREFIX||LA26_0==ID||LA26_0==L_AND||LA26_0==L_BR||LA26_0==L_KBR||LA26_0==L_MINUS||LA26_0==L_MINUS_MINUS||LA26_0==L_NOT||LA26_0==L_PLUS||LA26_0==L_PLUS_PLUS||LA26_0==L_TILDA||LA26_0==NUMBER||LA26_0==SEMICOLON||(LA26_0 >= SINGLE_OP && LA26_0 <= SIZEOF)||LA26_0==STATIC_PREFIX||(LA26_0 >= STRING_LITERAL && LA26_0 <= STRING_LITERAL3)||LA26_0==STRUCT_PREFIX||LA26_0==VOID||LA26_0==161||LA26_0==167||LA26_0==169||(LA26_0 >= 171 && LA26_0 <= 173)||LA26_0==175||(LA26_0 >= 179 && LA26_0 <= 180)||(LA26_0 >= 182 && LA26_0 <= 184)||(LA26_0 >= 186 && LA26_0 <= 188)||(LA26_0 >= 191 && LA26_0 <= 192)) ) {
                    alt26=1;
                }
                else if ( (LA26_0==L_FBR) ) {
                    alt26=2;
                }


                switch (alt26) {
            	case 1 :
            	    // Objcm.g:262:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block_case1192);
            	    block_internal_full99=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full99.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:262:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block_case1196);
            	    block100=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block100.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            // Objcm.g:263:4: ( default_stmt )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==178) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // Objcm.g:263:4: default_stmt
                    {
                    pushFollow(FOLLOW_default_stmt_in_block_case1205);
                    default_stmt101=default_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt101.getTree());

                    }
                    break;

            }


            R_FBR102=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block_case1210); 
            R_FBR102_tree = 
            (Object)adaptor.create(R_FBR102)
            ;
            adaptor.addChild(root_0, R_FBR102_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_case"


    public static class block_internal_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_full"
    // Objcm.g:267:1: block_internal_full : block_internal ;
    public final ObjcmParser.block_internal_full_return block_internal_full() throws RecognitionException {
        ObjcmParser.block_internal_full_return retval = new ObjcmParser.block_internal_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_return block_internal103 =null;



        try {
            // Objcm.g:268:2: ( block_internal )
            // Objcm.g:268:4: block_internal
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_internal_in_block_internal_full1222);
            block_internal103=block_internal();

            state._fsp--;

            adaptor.addChild(root_0, block_internal103.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_full"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // Objcm.g:271:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON );
    public final ObjcmParser.block_internal_return block_internal() throws RecognitionException {
        ObjcmParser.block_internal_return retval = new ObjcmParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON107=null;
        Token SEMICOLON110=null;
        Token SEMICOLON120=null;
        Token SEMICOLON122=null;
        Token SEMICOLON124=null;
        Token SEMICOLON126=null;
        Token SEMICOLON127=null;
        ObjcmParser.try_stmt_return try_stmt104 =null;

        ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper105 =null;

        ObjcmParser.static_start_wrapper_return static_start_wrapper106 =null;

        ObjcmParser.do_stmt_return do_stmt108 =null;

        ObjcmParser.const_expression_return const_expression109 =null;

        ObjcmParser.variable_init_wrapper_return variable_init_wrapper111 =null;

        ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper112 =null;

        ObjcmParser.else_stmt_return else_stmt113 =null;

        ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper114 =null;

        ObjcmParser.return_stmt_return return_stmt115 =null;

        ObjcmParser.for_stmt_wrapper_return for_stmt_wrapper116 =null;

        ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper117 =null;

        ObjcmParser.single_operators_return single_operators118 =null;

        ObjcmParser.struct_variable_return struct_variable119 =null;

        ObjcmParser.enum_variable_return enum_variable121 =null;

        ObjcmParser.typeof_started_return typeof_started123 =null;

        ObjcmParser.known_type_started_return known_type_started125 =null;


        Object SEMICOLON107_tree=null;
        Object SEMICOLON110_tree=null;
        Object SEMICOLON120_tree=null;
        Object SEMICOLON122_tree=null;
        Object SEMICOLON124_tree=null;
        Object SEMICOLON126_tree=null;
        Object SEMICOLON127_tree=null;

        try {
            // Objcm.g:272:2: ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON )
            int alt28=18;
            alt28 = dfa28.predict(input);
            switch (alt28) {
                case 1 :
                    // Objcm.g:272:4: try_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_in_block_internal1233);
                    try_stmt104=try_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, try_stmt104.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:273:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1238);
                    throw_stmt_wrapper105=throw_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, throw_stmt_wrapper105.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:274:4: static_start_wrapper SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_start_wrapper_in_block_internal1243);
                    static_start_wrapper106=static_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_start_wrapper106.getTree());

                    SEMICOLON107=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1245); 
                    SEMICOLON107_tree = 
                    (Object)adaptor.create(SEMICOLON107)
                    ;
                    adaptor.addChild(root_0, SEMICOLON107_tree);


                    }
                    break;
                case 4 :
                    // Objcm.g:275:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1250);
                    do_stmt108=do_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, do_stmt108.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:276:4: const_expression SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expression_in_block_internal1255);
                    const_expression109=const_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expression109.getTree());

                    SEMICOLON110=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1257); 
                    SEMICOLON110_tree = 
                    (Object)adaptor.create(SEMICOLON110)
                    ;
                    adaptor.addChild(root_0, SEMICOLON110_tree);


                    }
                    break;
                case 6 :
                    // Objcm.g:277:4: variable_init_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_init_wrapper_in_block_internal1262);
                    variable_init_wrapper111=variable_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, variable_init_wrapper111.getTree());

                    }
                    break;
                case 7 :
                    // Objcm.g:278:4: if_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_wrapper_in_block_internal1267);
                    if_stmt_wrapper112=if_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, if_stmt_wrapper112.getTree());

                    }
                    break;
                case 8 :
                    // Objcm.g:279:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1272);
                    else_stmt113=else_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, else_stmt113.getTree());

                    }
                    break;
                case 9 :
                    // Objcm.g:280:4: switch_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_wrapper_in_block_internal1277);
                    switch_stmt_wrapper114=switch_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, switch_stmt_wrapper114.getTree());

                    }
                    break;
                case 10 :
                    // Objcm.g:281:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1282);
                    return_stmt115=return_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, return_stmt115.getTree());

                    }
                    break;
                case 11 :
                    // Objcm.g:282:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1287);
                    for_stmt_wrapper116=for_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_wrapper116.getTree());

                    }
                    break;
                case 12 :
                    // Objcm.g:283:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1292);
                    while_stmt_wrapper117=while_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, while_stmt_wrapper117.getTree());

                    }
                    break;
                case 13 :
                    // Objcm.g:284:4: single_operators
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_operators_in_block_internal1297);
                    single_operators118=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators118.getTree());

                    }
                    break;
                case 14 :
                    // Objcm.g:285:4: struct_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_variable_in_block_internal1302);
                    struct_variable119=struct_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_variable119.getTree());

                    SEMICOLON120=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1304); 
                    SEMICOLON120_tree = 
                    (Object)adaptor.create(SEMICOLON120)
                    ;
                    adaptor.addChild(root_0, SEMICOLON120_tree);


                    }
                    break;
                case 15 :
                    // Objcm.g:286:4: enum_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_enum_variable_in_block_internal1309);
                    enum_variable121=enum_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, enum_variable121.getTree());

                    SEMICOLON122=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1311); 
                    SEMICOLON122_tree = 
                    (Object)adaptor.create(SEMICOLON122)
                    ;
                    adaptor.addChild(root_0, SEMICOLON122_tree);


                    }
                    break;
                case 16 :
                    // Objcm.g:287:4: typeof_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typeof_started_in_block_internal1316);
                    typeof_started123=typeof_started();

                    state._fsp--;

                    adaptor.addChild(root_0, typeof_started123.getTree());

                    SEMICOLON124=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1318); 
                    SEMICOLON124_tree = 
                    (Object)adaptor.create(SEMICOLON124)
                    ;
                    adaptor.addChild(root_0, SEMICOLON124_tree);


                    }
                    break;
                case 17 :
                    // Objcm.g:288:4: known_type_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_known_type_started_in_block_internal1323);
                    known_type_started125=known_type_started();

                    state._fsp--;

                    adaptor.addChild(root_0, known_type_started125.getTree());

                    SEMICOLON126=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1325); 
                    SEMICOLON126_tree = 
                    (Object)adaptor.create(SEMICOLON126)
                    ;
                    adaptor.addChild(root_0, SEMICOLON126_tree);


                    }
                    break;
                case 18 :
                    // Objcm.g:289:4: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    SEMICOLON127=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1330); 
                    SEMICOLON127_tree = 
                    (Object)adaptor.create(SEMICOLON127)
                    ;
                    adaptor.addChild(root_0, SEMICOLON127_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class variable_init_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init_wrapper"
    // Objcm.g:292:1: variable_init_wrapper : variable_init -> ^( VARIABLE_INIT variable_init ) ;
    public final ObjcmParser.variable_init_wrapper_return variable_init_wrapper() throws RecognitionException {
        ObjcmParser.variable_init_wrapper_return retval = new ObjcmParser.variable_init_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.variable_init_return variable_init128 =null;


        RewriteRuleSubtreeStream stream_variable_init=new RewriteRuleSubtreeStream(adaptor,"rule variable_init");
        try {
            // Objcm.g:293:2: ( variable_init -> ^( VARIABLE_INIT variable_init ) )
            // Objcm.g:293:4: variable_init
            {
            pushFollow(FOLLOW_variable_init_in_variable_init_wrapper1342);
            variable_init128=variable_init();

            state._fsp--;

            stream_variable_init.add(variable_init128.getTree());

            // AST REWRITE
            // elements: variable_init
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 293:18: -> ^( VARIABLE_INIT variable_init )
            {
                // Objcm.g:293:21: ^( VARIABLE_INIT variable_init )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_INIT, "VARIABLE_INIT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_init.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init_wrapper"


    public static class variable_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init"
    // Objcm.g:295:1: variable_init : full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) ;
    public final ObjcmParser.variable_init_return variable_init() throws RecognitionException {
        ObjcmParser.variable_init_return retval = new ObjcmParser.variable_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON131=null;
        Token COLON132=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper129 =null;

        ObjcmParser.full_expr2_return full_expr2130 =null;


        Object SEMICOLON131_tree=null;
        Object COLON132_tree=null;

        try {
            // Objcm.g:296:2: ( full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) )
            // Objcm.g:296:4: full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_full_expr_wrapper_in_variable_init1360);
            full_expr_wrapper129=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper129.getTree());

            // Objcm.g:296:22: ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==ID||LA30_0==SEMICOLON||LA30_0==VOID||LA30_0==184) ) {
                alt30=1;
            }
            else if ( (LA30_0==COLON) ) {
                alt30=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;

            }
            switch (alt30) {
                case 1 :
                    // Objcm.g:296:23: ( ( full_expr2 )? SEMICOLON )
                    {
                    // Objcm.g:296:23: ( ( full_expr2 )? SEMICOLON )
                    // Objcm.g:296:24: ( full_expr2 )? SEMICOLON
                    {
                    // Objcm.g:296:24: ( full_expr2 )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==ID||LA29_0==VOID||LA29_0==184) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // Objcm.g:296:24: full_expr2
                            {
                            pushFollow(FOLLOW_full_expr2_in_variable_init1364);
                            full_expr2130=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2130.getTree());

                            }
                            break;

                    }


                    SEMICOLON131=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_variable_init1367); 
                    SEMICOLON131_tree = 
                    (Object)adaptor.create(SEMICOLON131)
                    ;
                    adaptor.addChild(root_0, SEMICOLON131_tree);


                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:296:49: COLON
                    {
                    COLON132=(Token)match(input,COLON,FOLLOW_COLON_in_variable_init1372); 
                    COLON132_tree = 
                    (Object)adaptor.create(COLON132)
                    ;
                    adaptor.addChild(root_0, COLON132_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init"


    public static class known_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_type_started"
    // Objcm.g:298:1: known_type_started : known_types ( ASTERISK )* full_expr2 ;
    public final ObjcmParser.known_type_started_return known_type_started() throws RecognitionException {
        ObjcmParser.known_type_started_return retval = new ObjcmParser.known_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK134=null;
        ObjcmParser.known_types_return known_types133 =null;

        ObjcmParser.full_expr2_return full_expr2135 =null;


        Object ASTERISK134_tree=null;

        try {
            // Objcm.g:299:2: ( known_types ( ASTERISK )* full_expr2 )
            // Objcm.g:299:4: known_types ( ASTERISK )* full_expr2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_known_types_in_known_type_started1384);
            known_types133=known_types();

            state._fsp--;

            adaptor.addChild(root_0, known_types133.getTree());

            // Objcm.g:299:16: ( ASTERISK )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==ASTERISK) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // Objcm.g:299:16: ASTERISK
            	    {
            	    ASTERISK134=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_known_type_started1386); 
            	    ASTERISK134_tree = 
            	    (Object)adaptor.create(ASTERISK134)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK134_tree);


            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            pushFollow(FOLLOW_full_expr2_in_known_type_started1389);
            full_expr2135=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2135.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_type_started"


    public static class typeof_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof_started"
    // Objcm.g:301:1: typeof_started : typeof full_expr_wrapper ;
    public final ObjcmParser.typeof_started_return typeof_started() throws RecognitionException {
        ObjcmParser.typeof_started_return retval = new ObjcmParser.typeof_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typeof_return typeof136 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper137 =null;



        try {
            // Objcm.g:302:2: ( typeof full_expr_wrapper )
            // Objcm.g:302:4: typeof full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typeof_in_typeof_started1401);
            typeof136=typeof();

            state._fsp--;

            adaptor.addChild(root_0, typeof136.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_typeof_started1403);
            full_expr_wrapper137=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper137.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof_started"


    public static class struct_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_variable"
    // Objcm.g:305:1: struct_variable : STRUCT_PREFIX full_expr_wrapper ;
    public final ObjcmParser.struct_variable_return struct_variable() throws RecognitionException {
        ObjcmParser.struct_variable_return retval = new ObjcmParser.struct_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX138=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper139 =null;


        Object STRUCT_PREFIX138_tree=null;

        try {
            // Objcm.g:306:2: ( STRUCT_PREFIX full_expr_wrapper )
            // Objcm.g:306:4: STRUCT_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX138=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_variable1416); 
            STRUCT_PREFIX138_tree = 
            (Object)adaptor.create(STRUCT_PREFIX138)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX138_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_struct_variable1418);
            full_expr_wrapper139=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper139.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_variable"


    public static class enum_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_variable"
    // Objcm.g:308:1: enum_variable : ENUM_PREFIX full_expr_wrapper ;
    public final ObjcmParser.enum_variable_return enum_variable() throws RecognitionException {
        ObjcmParser.enum_variable_return retval = new ObjcmParser.enum_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX140=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper141 =null;


        Object ENUM_PREFIX140_tree=null;

        try {
            // Objcm.g:309:2: ( ENUM_PREFIX full_expr_wrapper )
            // Objcm.g:309:4: ENUM_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX140=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_enum_variable1427); 
            ENUM_PREFIX140_tree = 
            (Object)adaptor.create(ENUM_PREFIX140)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX140_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_enum_variable1429);
            full_expr_wrapper141=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper141.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_variable"


    public static class const_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expression"
    // Objcm.g:311:1: const_expression : CONST_PREFIX full_expr_wrapper ;
    public final ObjcmParser.const_expression_return const_expression() throws RecognitionException {
        ObjcmParser.const_expression_return retval = new ObjcmParser.const_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX142=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper143 =null;


        Object CONST_PREFIX142_tree=null;

        try {
            // Objcm.g:312:2: ( CONST_PREFIX full_expr_wrapper )
            // Objcm.g:312:4: CONST_PREFIX full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            CONST_PREFIX142=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_const_expression1440); 
            CONST_PREFIX142_tree = 
            (Object)adaptor.create(CONST_PREFIX142)
            ;
            adaptor.addChild(root_0, CONST_PREFIX142_tree);


            pushFollow(FOLLOW_full_expr_wrapper_in_const_expression1442);
            full_expr_wrapper143=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper143.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expression"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // Objcm.g:314:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcmParser.throw_stmt_wrapper_return retval = new ObjcmParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.throw_stmt_return throw_stmt144 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // Objcm.g:315:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // Objcm.g:315:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper1451);
            throw_stmt144=throw_stmt();

            state._fsp--;

            stream_throw_stmt.add(throw_stmt144.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 315:15: -> ^( THROW_STMT throw_stmt )
            {
                // Objcm.g:315:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // Objcm.g:317:1: throw_stmt : '@throw' SEMICOLON ;
    public final ObjcmParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcmParser.throw_stmt_return retval = new ObjcmParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal145=null;
        Token SEMICOLON146=null;

        Object string_literal145_tree=null;
        Object SEMICOLON146_tree=null;

        try {
            // Objcm.g:318:2: ( '@throw' SEMICOLON )
            // Objcm.g:318:4: '@throw' SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal145=(Token)match(input,171,FOLLOW_171_in_throw_stmt1468); 
            string_literal145_tree = 
            (Object)adaptor.create(string_literal145)
            ;
            adaptor.addChild(root_0, string_literal145_tree);


            SEMICOLON146=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_throw_stmt1471); 
            SEMICOLON146_tree = 
            (Object)adaptor.create(SEMICOLON146)
            ;
            adaptor.addChild(root_0, SEMICOLON146_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class try_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt"
    // Objcm.g:321:1: try_stmt : '@try' block ( catch_stmt )* ( '@finally' block )? ;
    public final ObjcmParser.try_stmt_return try_stmt() throws RecognitionException {
        ObjcmParser.try_stmt_return retval = new ObjcmParser.try_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal147=null;
        Token string_literal150=null;
        ObjcmParser.block_return block148 =null;

        ObjcmParser.catch_stmt_return catch_stmt149 =null;

        ObjcmParser.block_return block151 =null;


        Object string_literal147_tree=null;
        Object string_literal150_tree=null;

        try {
            // Objcm.g:321:9: ( '@try' block ( catch_stmt )* ( '@finally' block )? )
            // Objcm.g:321:11: '@try' block ( catch_stmt )* ( '@finally' block )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal147=(Token)match(input,172,FOLLOW_172_in_try_stmt1482); 
            string_literal147_tree = 
            (Object)adaptor.create(string_literal147)
            ;
            adaptor.addChild(root_0, string_literal147_tree);


            pushFollow(FOLLOW_block_in_try_stmt1485);
            block148=block();

            state._fsp--;

            adaptor.addChild(root_0, block148.getTree());

            // Objcm.g:321:26: ( catch_stmt )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==160) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // Objcm.g:321:26: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt1488);
            	    catch_stmt149=catch_stmt();

            	    state._fsp--;

            	    adaptor.addChild(root_0, catch_stmt149.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            // Objcm.g:321:38: ( '@finally' block )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==163) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // Objcm.g:321:39: '@finally' block
                    {
                    string_literal150=(Token)match(input,163,FOLLOW_163_in_try_stmt1492); 
                    string_literal150_tree = 
                    (Object)adaptor.create(string_literal150)
                    ;
                    adaptor.addChild(root_0, string_literal150_tree);


                    pushFollow(FOLLOW_block_in_try_stmt1495);
                    block151=block();

                    state._fsp--;

                    adaptor.addChild(root_0, block151.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // Objcm.g:324:1: catch_stmt : '@catch' L_BR ID ( ASTERISK )* ID R_BR block ;
    public final ObjcmParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcmParser.catch_stmt_return retval = new ObjcmParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal152=null;
        Token L_BR153=null;
        Token ID154=null;
        Token ASTERISK155=null;
        Token ID156=null;
        Token R_BR157=null;
        ObjcmParser.block_return block158 =null;


        Object string_literal152_tree=null;
        Object L_BR153_tree=null;
        Object ID154_tree=null;
        Object ASTERISK155_tree=null;
        Object ID156_tree=null;
        Object R_BR157_tree=null;

        try {
            // Objcm.g:325:2: ( '@catch' L_BR ID ( ASTERISK )* ID R_BR block )
            // Objcm.g:325:4: '@catch' L_BR ID ( ASTERISK )* ID R_BR block
            {
            root_0 = (Object)adaptor.nil();


            string_literal152=(Token)match(input,160,FOLLOW_160_in_catch_stmt1509); 
            string_literal152_tree = 
            (Object)adaptor.create(string_literal152)
            ;
            adaptor.addChild(root_0, string_literal152_tree);


            L_BR153=(Token)match(input,L_BR,FOLLOW_L_BR_in_catch_stmt1512); 
            L_BR153_tree = 
            (Object)adaptor.create(L_BR153)
            ;
            adaptor.addChild(root_0, L_BR153_tree);


            ID154=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1515); 
            ID154_tree = 
            (Object)adaptor.create(ID154)
            ;
            adaptor.addChild(root_0, ID154_tree);


            // Objcm.g:325:24: ( ASTERISK )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==ASTERISK) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // Objcm.g:325:24: ASTERISK
            	    {
            	    ASTERISK155=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_catch_stmt1518); 
            	    ASTERISK155_tree = 
            	    (Object)adaptor.create(ASTERISK155)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK155_tree);


            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            ID156=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1521); 
            ID156_tree = 
            (Object)adaptor.create(ID156)
            ;
            adaptor.addChild(root_0, ID156_tree);


            R_BR157=(Token)match(input,R_BR,FOLLOW_R_BR_in_catch_stmt1524); 
            R_BR157_tree = 
            (Object)adaptor.create(R_BR157)
            ;
            adaptor.addChild(root_0, R_BR157_tree);


            pushFollow(FOLLOW_block_in_catch_stmt1527);
            block158=block();

            state._fsp--;

            adaptor.addChild(root_0, block158.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class switch_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt_wrapper"
    // Objcm.g:328:1: switch_stmt_wrapper : switch_stmt -> ^( SWITCH switch_stmt ) ;
    public final ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper() throws RecognitionException {
        ObjcmParser.switch_stmt_wrapper_return retval = new ObjcmParser.switch_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.switch_stmt_return switch_stmt159 =null;


        RewriteRuleSubtreeStream stream_switch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule switch_stmt");
        try {
            // Objcm.g:329:2: ( switch_stmt -> ^( SWITCH switch_stmt ) )
            // Objcm.g:329:4: switch_stmt
            {
            pushFollow(FOLLOW_switch_stmt_in_switch_stmt_wrapper1540);
            switch_stmt159=switch_stmt();

            state._fsp--;

            stream_switch_stmt.add(switch_stmt159.getTree());

            // AST REWRITE
            // elements: switch_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 329:16: -> ^( SWITCH switch_stmt )
            {
                // Objcm.g:329:19: ^( SWITCH switch_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH, "SWITCH")
                , root_1);

                adaptor.addChild(root_1, stream_switch_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt_wrapper"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // Objcm.g:331:1: switch_stmt : 'switch' L_BR switch_expr R_BR switch_body_wrapper ;
    public final ObjcmParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcmParser.switch_stmt_return retval = new ObjcmParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal160=null;
        Token L_BR161=null;
        Token R_BR163=null;
        ObjcmParser.switch_expr_return switch_expr162 =null;

        ObjcmParser.switch_body_wrapper_return switch_body_wrapper164 =null;


        Object string_literal160_tree=null;
        Object L_BR161_tree=null;
        Object R_BR163_tree=null;

        try {
            // Objcm.g:332:2: ( 'switch' L_BR switch_expr R_BR switch_body_wrapper )
            // Objcm.g:332:4: 'switch' L_BR switch_expr R_BR switch_body_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal160=(Token)match(input,188,FOLLOW_188_in_switch_stmt1557); 
            string_literal160_tree = 
            (Object)adaptor.create(string_literal160)
            ;
            adaptor.addChild(root_0, string_literal160_tree);


            L_BR161=(Token)match(input,L_BR,FOLLOW_L_BR_in_switch_stmt1560); 
            L_BR161_tree = 
            (Object)adaptor.create(L_BR161)
            ;
            adaptor.addChild(root_0, L_BR161_tree);


            pushFollow(FOLLOW_switch_expr_in_switch_stmt1563);
            switch_expr162=switch_expr();

            state._fsp--;

            adaptor.addChild(root_0, switch_expr162.getTree());

            R_BR163=(Token)match(input,R_BR,FOLLOW_R_BR_in_switch_stmt1565); 
            R_BR163_tree = 
            (Object)adaptor.create(R_BR163)
            ;
            adaptor.addChild(root_0, R_BR163_tree);


            pushFollow(FOLLOW_switch_body_wrapper_in_switch_stmt1571);
            switch_body_wrapper164=switch_body_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, switch_body_wrapper164.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body_wrapper"
    // Objcm.g:336:1: switch_body_wrapper : L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) ;
    public final ObjcmParser.switch_body_wrapper_return switch_body_wrapper() throws RecognitionException {
        ObjcmParser.switch_body_wrapper_return retval = new ObjcmParser.switch_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR165=null;
        Token R_FBR167=null;
        ObjcmParser.switch_body_return switch_body166 =null;


        Object L_FBR165_tree=null;
        Object R_FBR167_tree=null;
        RewriteRuleTokenStream stream_R_FBR=new RewriteRuleTokenStream(adaptor,"token R_FBR");
        RewriteRuleTokenStream stream_L_FBR=new RewriteRuleTokenStream(adaptor,"token L_FBR");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // Objcm.g:337:2: ( L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) )
            // Objcm.g:337:4: L_FBR switch_body R_FBR
            {
            L_FBR165=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_switch_body_wrapper1584);  
            stream_L_FBR.add(L_FBR165);


            pushFollow(FOLLOW_switch_body_in_switch_body_wrapper1586);
            switch_body166=switch_body();

            state._fsp--;

            stream_switch_body.add(switch_body166.getTree());

            R_FBR167=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_switch_body_wrapper1588);  
            stream_R_FBR.add(R_FBR167);


            // AST REWRITE
            // elements: switch_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 337:28: -> ^( SWITCH_BODY switch_body )
            {
                // Objcm.g:337:31: ^( SWITCH_BODY switch_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_BODY, "SWITCH_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_switch_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body_wrapper"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // Objcm.g:339:1: switch_body : ( block_internal_full )* ( switch_internal )* ;
    public final ObjcmParser.switch_body_return switch_body() throws RecognitionException {
        ObjcmParser.switch_body_return retval = new ObjcmParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_full_return block_internal_full168 =null;

        ObjcmParser.switch_internal_return switch_internal169 =null;



        try {
            // Objcm.g:340:2: ( ( block_internal_full )* ( switch_internal )* )
            // Objcm.g:340:4: ( block_internal_full )* ( switch_internal )*
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:340:4: ( block_internal_full )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==ASTERISK||LA35_0==BREAK_WORD||LA35_0==CONST_PREFIX||LA35_0==ENUM_PREFIX||LA35_0==ID||LA35_0==L_AND||LA35_0==L_BR||LA35_0==L_KBR||LA35_0==L_MINUS||LA35_0==L_MINUS_MINUS||LA35_0==L_NOT||LA35_0==L_PLUS||LA35_0==L_PLUS_PLUS||LA35_0==L_TILDA||LA35_0==NUMBER||LA35_0==SEMICOLON||(LA35_0 >= SINGLE_OP && LA35_0 <= SIZEOF)||LA35_0==STATIC_PREFIX||(LA35_0 >= STRING_LITERAL && LA35_0 <= STRING_LITERAL3)||LA35_0==STRUCT_PREFIX||LA35_0==VOID||LA35_0==161||LA35_0==167||LA35_0==169||(LA35_0 >= 171 && LA35_0 <= 173)||LA35_0==175||(LA35_0 >= 179 && LA35_0 <= 180)||(LA35_0 >= 182 && LA35_0 <= 184)||(LA35_0 >= 186 && LA35_0 <= 188)||(LA35_0 >= 191 && LA35_0 <= 192)) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // Objcm.g:340:4: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_switch_body1607);
            	    block_internal_full168=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full168.getTree());

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            // Objcm.g:341:3: ( switch_internal )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==176||LA36_0==178) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // Objcm.g:341:3: switch_internal
            	    {
            	    pushFollow(FOLLOW_switch_internal_in_switch_body1612);
            	    switch_internal169=switch_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, switch_internal169.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class switch_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_expr"
    // Objcm.g:344:1: switch_expr : classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) ;
    public final ObjcmParser.switch_expr_return switch_expr() throws RecognitionException {
        ObjcmParser.switch_expr_return retval = new ObjcmParser.switch_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp170 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:345:2: ( classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) )
            // Objcm.g:345:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_switch_expr1625);
            classical_expr_wrp170=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp170.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 345:23: -> ^( SWITCH_EXPRESSION classical_expr_wrp )
            {
                // Objcm.g:345:26: ^( SWITCH_EXPRESSION classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_EXPRESSION, "SWITCH_EXPRESSION")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_expr"


    public static class switch_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_internal"
    // Objcm.g:347:1: switch_internal : ( case_stmt_wrapper | default_stmt_wrapper );
    public final ObjcmParser.switch_internal_return switch_internal() throws RecognitionException {
        ObjcmParser.switch_internal_return retval = new ObjcmParser.switch_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper171 =null;

        ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper172 =null;



        try {
            // Objcm.g:348:2: ( case_stmt_wrapper | default_stmt_wrapper )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==176) ) {
                alt37=1;
            }
            else if ( (LA37_0==178) ) {
                alt37=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // Objcm.g:348:4: case_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_wrapper_in_switch_internal1642);
                    case_stmt_wrapper171=case_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_stmt_wrapper171.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:349:5: default_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_wrapper_in_switch_internal1648);
                    default_stmt_wrapper172=default_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt_wrapper172.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_internal"


    public static class case_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt_wrapper"
    // Objcm.g:351:1: case_stmt_wrapper : case_stmt -> ^( CASE_STMT case_stmt ) ;
    public final ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper() throws RecognitionException {
        ObjcmParser.case_stmt_wrapper_return retval = new ObjcmParser.case_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_return case_stmt173 =null;


        RewriteRuleSubtreeStream stream_case_stmt=new RewriteRuleSubtreeStream(adaptor,"rule case_stmt");
        try {
            // Objcm.g:352:2: ( case_stmt -> ^( CASE_STMT case_stmt ) )
            // Objcm.g:352:4: case_stmt
            {
            pushFollow(FOLLOW_case_stmt_in_case_stmt_wrapper1657);
            case_stmt173=case_stmt();

            state._fsp--;

            stream_case_stmt.add(case_stmt173.getTree());

            // AST REWRITE
            // elements: case_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 352:14: -> ^( CASE_STMT case_stmt )
            {
                // Objcm.g:352:17: ^( CASE_STMT case_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_case_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt_wrapper"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // Objcm.g:354:1: case_stmt : 'case' case_expr_wrapper COLON ( case_body_wrapper )? ;
    public final ObjcmParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcmParser.case_stmt_return retval = new ObjcmParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal174=null;
        Token COLON176=null;
        ObjcmParser.case_expr_wrapper_return case_expr_wrapper175 =null;

        ObjcmParser.case_body_wrapper_return case_body_wrapper177 =null;


        Object string_literal174_tree=null;
        Object COLON176_tree=null;

        try {
            // Objcm.g:355:2: ( 'case' case_expr_wrapper COLON ( case_body_wrapper )? )
            // Objcm.g:355:4: 'case' case_expr_wrapper COLON ( case_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal174=(Token)match(input,176,FOLLOW_176_in_case_stmt1674); 
            string_literal174_tree = 
            (Object)adaptor.create(string_literal174)
            ;
            adaptor.addChild(root_0, string_literal174_tree);


            pushFollow(FOLLOW_case_expr_wrapper_in_case_stmt1677);
            case_expr_wrapper175=case_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, case_expr_wrapper175.getTree());

            COLON176=(Token)match(input,COLON,FOLLOW_COLON_in_case_stmt1680); 
            COLON176_tree = 
            (Object)adaptor.create(COLON176)
            ;
            adaptor.addChild(root_0, COLON176_tree);


            // Objcm.g:356:3: ( case_body_wrapper )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==ASTERISK||LA38_0==BREAK_WORD||LA38_0==CONST_PREFIX||LA38_0==ENUM_PREFIX||LA38_0==ID||LA38_0==L_AND||LA38_0==L_BR||(LA38_0 >= L_FBR && LA38_0 <= L_KBR)||LA38_0==L_MINUS||LA38_0==L_MINUS_MINUS||LA38_0==L_NOT||LA38_0==L_PLUS||LA38_0==L_PLUS_PLUS||LA38_0==L_TILDA||LA38_0==NUMBER||LA38_0==SEMICOLON||(LA38_0 >= SINGLE_OP && LA38_0 <= SIZEOF)||LA38_0==STATIC_PREFIX||(LA38_0 >= STRING_LITERAL && LA38_0 <= STRING_LITERAL3)||LA38_0==STRUCT_PREFIX||LA38_0==VOID||LA38_0==161||LA38_0==167||LA38_0==169||(LA38_0 >= 171 && LA38_0 <= 173)||LA38_0==175||(LA38_0 >= 179 && LA38_0 <= 180)||(LA38_0 >= 182 && LA38_0 <= 184)||(LA38_0 >= 186 && LA38_0 <= 188)||(LA38_0 >= 191 && LA38_0 <= 192)) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // Objcm.g:356:3: case_body_wrapper
                    {
                    pushFollow(FOLLOW_case_body_wrapper_in_case_stmt1685);
                    case_body_wrapper177=case_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_body_wrapper177.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class case_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body_wrapper"
    // Objcm.g:359:1: case_body_wrapper : case_body -> ^( CASE_BODY case_body ) ;
    public final ObjcmParser.case_body_wrapper_return case_body_wrapper() throws RecognitionException {
        ObjcmParser.case_body_wrapper_return retval = new ObjcmParser.case_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_body_return case_body178 =null;


        RewriteRuleSubtreeStream stream_case_body=new RewriteRuleSubtreeStream(adaptor,"rule case_body");
        try {
            // Objcm.g:360:2: ( case_body -> ^( CASE_BODY case_body ) )
            // Objcm.g:360:4: case_body
            {
            pushFollow(FOLLOW_case_body_in_case_body_wrapper1699);
            case_body178=case_body();

            state._fsp--;

            stream_case_body.add(case_body178.getTree());

            // AST REWRITE
            // elements: case_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 360:14: -> ^( CASE_BODY case_body )
            {
                // Objcm.g:360:17: ^( CASE_BODY case_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_BODY, "CASE_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_case_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body_wrapper"


    public static class case_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body"
    // Objcm.g:362:1: case_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.case_body_return case_body() throws RecognitionException {
        ObjcmParser.case_body_return retval = new ObjcmParser.case_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break179 =null;

        ObjcmParser.block_internal_full_return block_internal_full180 =null;



        try {
            // Objcm.g:363:2: ( block_break | ( block_internal_full )+ )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==L_FBR) ) {
                alt40=1;
            }
            else if ( (LA40_0==ASTERISK||LA40_0==BREAK_WORD||LA40_0==CONST_PREFIX||LA40_0==ENUM_PREFIX||LA40_0==ID||LA40_0==L_AND||LA40_0==L_BR||LA40_0==L_KBR||LA40_0==L_MINUS||LA40_0==L_MINUS_MINUS||LA40_0==L_NOT||LA40_0==L_PLUS||LA40_0==L_PLUS_PLUS||LA40_0==L_TILDA||LA40_0==NUMBER||LA40_0==SEMICOLON||(LA40_0 >= SINGLE_OP && LA40_0 <= SIZEOF)||LA40_0==STATIC_PREFIX||(LA40_0 >= STRING_LITERAL && LA40_0 <= STRING_LITERAL3)||LA40_0==STRUCT_PREFIX||LA40_0==VOID||LA40_0==161||LA40_0==167||LA40_0==169||(LA40_0 >= 171 && LA40_0 <= 173)||LA40_0==175||(LA40_0 >= 179 && LA40_0 <= 180)||(LA40_0 >= 182 && LA40_0 <= 184)||(LA40_0 >= 186 && LA40_0 <= 188)||(LA40_0 >= 191 && LA40_0 <= 192)) ) {
                alt40=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }
            switch (alt40) {
                case 1 :
                    // Objcm.g:363:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_case_body1718);
                    block_break179=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break179.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:364:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:364:5: ( block_internal_full )+
                    int cnt39=0;
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==ASTERISK||LA39_0==BREAK_WORD||LA39_0==CONST_PREFIX||LA39_0==ENUM_PREFIX||LA39_0==ID||LA39_0==L_AND||LA39_0==L_BR||LA39_0==L_KBR||LA39_0==L_MINUS||LA39_0==L_MINUS_MINUS||LA39_0==L_NOT||LA39_0==L_PLUS||LA39_0==L_PLUS_PLUS||LA39_0==L_TILDA||LA39_0==NUMBER||LA39_0==SEMICOLON||(LA39_0 >= SINGLE_OP && LA39_0 <= SIZEOF)||LA39_0==STATIC_PREFIX||(LA39_0 >= STRING_LITERAL && LA39_0 <= STRING_LITERAL3)||LA39_0==STRUCT_PREFIX||LA39_0==VOID||LA39_0==161||LA39_0==167||LA39_0==169||(LA39_0 >= 171 && LA39_0 <= 173)||LA39_0==175||(LA39_0 >= 179 && LA39_0 <= 180)||(LA39_0 >= 182 && LA39_0 <= 184)||(LA39_0 >= 186 && LA39_0 <= 188)||(LA39_0 >= 191 && LA39_0 <= 192)) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    // Objcm.g:364:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_case_body1725);
                    	    block_internal_full180=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full180.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt39 >= 1 ) break loop39;
                                EarlyExitException eee =
                                    new EarlyExitException(39, input);
                                throw eee;
                        }
                        cnt39++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body"


    public static class case_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr_wrapper"
    // Objcm.g:367:1: case_expr_wrapper : case_expr -> ^( CASE_EXPR case_expr ) ;
    public final ObjcmParser.case_expr_wrapper_return case_expr_wrapper() throws RecognitionException {
        ObjcmParser.case_expr_wrapper_return retval = new ObjcmParser.case_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_expr_return case_expr181 =null;


        RewriteRuleSubtreeStream stream_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule case_expr");
        try {
            // Objcm.g:368:2: ( case_expr -> ^( CASE_EXPR case_expr ) )
            // Objcm.g:368:4: case_expr
            {
            pushFollow(FOLLOW_case_expr_in_case_expr_wrapper1741);
            case_expr181=case_expr();

            state._fsp--;

            stream_case_expr.add(case_expr181.getTree());

            // AST REWRITE
            // elements: case_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:14: -> ^( CASE_EXPR case_expr )
            {
                // Objcm.g:368:17: ^( CASE_EXPR case_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_EXPR, "CASE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_case_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr_wrapper"


    public static class case_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr"
    // Objcm.g:370:1: case_expr : ( const_expr | ID );
    public final ObjcmParser.case_expr_return case_expr() throws RecognitionException {
        ObjcmParser.case_expr_return retval = new ObjcmParser.case_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID183=null;
        ObjcmParser.const_expr_return const_expr182 =null;


        Object ID183_tree=null;

        try {
            // Objcm.g:371:2: ( const_expr | ID )
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==NUMBER||(LA41_0 >= STRING_LITERAL && LA41_0 <= STRING_LITERAL3)||LA41_0==173||LA41_0==186) ) {
                alt41=1;
            }
            else if ( (LA41_0==ID) ) {
                alt41=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;

            }
            switch (alt41) {
                case 1 :
                    // Objcm.g:371:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_case_expr1763);
                    const_expr182=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr182.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:372:5: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID183=(Token)match(input,ID,FOLLOW_ID_in_case_expr1770); 
                    ID183_tree = 
                    (Object)adaptor.create(ID183)
                    ;
                    adaptor.addChild(root_0, ID183_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr"


    public static class block_break_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_break"
    // Objcm.g:374:1: block_break : block_case ( single_operators )? ;
    public final ObjcmParser.block_break_return block_break() throws RecognitionException {
        ObjcmParser.block_break_return retval = new ObjcmParser.block_break_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_case_return block_case184 =null;

        ObjcmParser.single_operators_return single_operators185 =null;



        try {
            // Objcm.g:375:2: ( block_case ( single_operators )? )
            // Objcm.g:375:4: block_case ( single_operators )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_case_in_block_break1781);
            block_case184=block_case();

            state._fsp--;

            adaptor.addChild(root_0, block_case184.getTree());

            // Objcm.g:375:15: ( single_operators )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==BREAK_WORD||LA42_0==SINGLE_OP) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // Objcm.g:375:15: single_operators
                    {
                    pushFollow(FOLLOW_single_operators_in_block_break1783);
                    single_operators185=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators185.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_break"


    public static class default_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt_wrapper"
    // Objcm.g:378:1: default_stmt_wrapper : default_stmt -> ^( DEFAULT_STMT default_stmt ) ;
    public final ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper() throws RecognitionException {
        ObjcmParser.default_stmt_wrapper_return retval = new ObjcmParser.default_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_stmt_return default_stmt186 =null;


        RewriteRuleSubtreeStream stream_default_stmt=new RewriteRuleSubtreeStream(adaptor,"rule default_stmt");
        try {
            // Objcm.g:379:2: ( default_stmt -> ^( DEFAULT_STMT default_stmt ) )
            // Objcm.g:379:4: default_stmt
            {
            pushFollow(FOLLOW_default_stmt_in_default_stmt_wrapper1795);
            default_stmt186=default_stmt();

            state._fsp--;

            stream_default_stmt.add(default_stmt186.getTree());

            // AST REWRITE
            // elements: default_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 379:17: -> ^( DEFAULT_STMT default_stmt )
            {
                // Objcm.g:379:20: ^( DEFAULT_STMT default_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_default_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt_wrapper"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // Objcm.g:381:1: default_stmt : 'default' COLON ( default_body_wrapper )? ;
    public final ObjcmParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcmParser.default_stmt_return retval = new ObjcmParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal187=null;
        Token COLON188=null;
        ObjcmParser.default_body_wrapper_return default_body_wrapper189 =null;


        Object string_literal187_tree=null;
        Object COLON188_tree=null;

        try {
            // Objcm.g:382:2: ( 'default' COLON ( default_body_wrapper )? )
            // Objcm.g:382:4: 'default' COLON ( default_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal187=(Token)match(input,178,FOLLOW_178_in_default_stmt1812); 
            string_literal187_tree = 
            (Object)adaptor.create(string_literal187)
            ;
            adaptor.addChild(root_0, string_literal187_tree);


            COLON188=(Token)match(input,COLON,FOLLOW_COLON_in_default_stmt1815); 
            COLON188_tree = 
            (Object)adaptor.create(COLON188)
            ;
            adaptor.addChild(root_0, COLON188_tree);


            // Objcm.g:383:3: ( default_body_wrapper )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==ASTERISK||LA43_0==BREAK_WORD||LA43_0==CONST_PREFIX||LA43_0==ENUM_PREFIX||LA43_0==ID||LA43_0==L_AND||LA43_0==L_BR||(LA43_0 >= L_FBR && LA43_0 <= L_KBR)||LA43_0==L_MINUS||LA43_0==L_MINUS_MINUS||LA43_0==L_NOT||LA43_0==L_PLUS||LA43_0==L_PLUS_PLUS||LA43_0==L_TILDA||LA43_0==NUMBER||LA43_0==SEMICOLON||(LA43_0 >= SINGLE_OP && LA43_0 <= SIZEOF)||LA43_0==STATIC_PREFIX||(LA43_0 >= STRING_LITERAL && LA43_0 <= STRING_LITERAL3)||LA43_0==STRUCT_PREFIX||LA43_0==VOID||LA43_0==161||LA43_0==167||LA43_0==169||(LA43_0 >= 171 && LA43_0 <= 173)||LA43_0==175||(LA43_0 >= 179 && LA43_0 <= 180)||(LA43_0 >= 182 && LA43_0 <= 184)||(LA43_0 >= 186 && LA43_0 <= 188)||(LA43_0 >= 191 && LA43_0 <= 192)) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // Objcm.g:383:3: default_body_wrapper
                    {
                    pushFollow(FOLLOW_default_body_wrapper_in_default_stmt1820);
                    default_body_wrapper189=default_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_body_wrapper189.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class default_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body_wrapper"
    // Objcm.g:386:1: default_body_wrapper : default_body -> ^( DEFAULT_BODY default_body ) ;
    public final ObjcmParser.default_body_wrapper_return default_body_wrapper() throws RecognitionException {
        ObjcmParser.default_body_wrapper_return retval = new ObjcmParser.default_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_body_return default_body190 =null;


        RewriteRuleSubtreeStream stream_default_body=new RewriteRuleSubtreeStream(adaptor,"rule default_body");
        try {
            // Objcm.g:387:2: ( default_body -> ^( DEFAULT_BODY default_body ) )
            // Objcm.g:387:4: default_body
            {
            pushFollow(FOLLOW_default_body_in_default_body_wrapper1833);
            default_body190=default_body();

            state._fsp--;

            stream_default_body.add(default_body190.getTree());

            // AST REWRITE
            // elements: default_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 387:17: -> ^( DEFAULT_BODY default_body )
            {
                // Objcm.g:387:20: ^( DEFAULT_BODY default_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_BODY, "DEFAULT_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_default_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body_wrapper"


    public static class default_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body"
    // Objcm.g:390:1: default_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.default_body_return default_body() throws RecognitionException {
        ObjcmParser.default_body_return retval = new ObjcmParser.default_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break191 =null;

        ObjcmParser.block_internal_full_return block_internal_full192 =null;



        try {
            // Objcm.g:391:2: ( block_break | ( block_internal_full )+ )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==L_FBR) ) {
                alt45=1;
            }
            else if ( (LA45_0==ASTERISK||LA45_0==BREAK_WORD||LA45_0==CONST_PREFIX||LA45_0==ENUM_PREFIX||LA45_0==ID||LA45_0==L_AND||LA45_0==L_BR||LA45_0==L_KBR||LA45_0==L_MINUS||LA45_0==L_MINUS_MINUS||LA45_0==L_NOT||LA45_0==L_PLUS||LA45_0==L_PLUS_PLUS||LA45_0==L_TILDA||LA45_0==NUMBER||LA45_0==SEMICOLON||(LA45_0 >= SINGLE_OP && LA45_0 <= SIZEOF)||LA45_0==STATIC_PREFIX||(LA45_0 >= STRING_LITERAL && LA45_0 <= STRING_LITERAL3)||LA45_0==STRUCT_PREFIX||LA45_0==VOID||LA45_0==161||LA45_0==167||LA45_0==169||(LA45_0 >= 171 && LA45_0 <= 173)||LA45_0==175||(LA45_0 >= 179 && LA45_0 <= 180)||(LA45_0 >= 182 && LA45_0 <= 184)||(LA45_0 >= 186 && LA45_0 <= 188)||(LA45_0 >= 191 && LA45_0 <= 192)) ) {
                alt45=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }
            switch (alt45) {
                case 1 :
                    // Objcm.g:391:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_default_body1853);
                    block_break191=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break191.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:392:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:392:5: ( block_internal_full )+
                    int cnt44=0;
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==ASTERISK||LA44_0==BREAK_WORD||LA44_0==CONST_PREFIX||LA44_0==ENUM_PREFIX||LA44_0==ID||LA44_0==L_AND||LA44_0==L_BR||LA44_0==L_KBR||LA44_0==L_MINUS||LA44_0==L_MINUS_MINUS||LA44_0==L_NOT||LA44_0==L_PLUS||LA44_0==L_PLUS_PLUS||LA44_0==L_TILDA||LA44_0==NUMBER||LA44_0==SEMICOLON||(LA44_0 >= SINGLE_OP && LA44_0 <= SIZEOF)||LA44_0==STATIC_PREFIX||(LA44_0 >= STRING_LITERAL && LA44_0 <= STRING_LITERAL3)||LA44_0==STRUCT_PREFIX||LA44_0==VOID||LA44_0==161||LA44_0==167||LA44_0==169||(LA44_0 >= 171 && LA44_0 <= 173)||LA44_0==175||(LA44_0 >= 179 && LA44_0 <= 180)||(LA44_0 >= 182 && LA44_0 <= 184)||(LA44_0 >= 186 && LA44_0 <= 188)||(LA44_0 >= 191 && LA44_0 <= 192)) ) {
                            alt44=1;
                        }


                        switch (alt44) {
                    	case 1 :
                    	    // Objcm.g:392:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_default_body1859);
                    	    block_internal_full192=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full192.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt44 >= 1 ) break loop44;
                                EarlyExitException eee =
                                    new EarlyExitException(44, input);
                                throw eee;
                        }
                        cnt44++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body"


    public static class single_operators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_operators"
    // Objcm.g:395:1: single_operators : ( SINGLE_OP | break_wrapper );
    public final ObjcmParser.single_operators_return single_operators() throws RecognitionException {
        ObjcmParser.single_operators_return retval = new ObjcmParser.single_operators_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_OP193=null;
        ObjcmParser.break_wrapper_return break_wrapper194 =null;


        Object SINGLE_OP193_tree=null;

        try {
            // Objcm.g:396:2: ( SINGLE_OP | break_wrapper )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==SINGLE_OP) ) {
                alt46=1;
            }
            else if ( (LA46_0==BREAK_WORD) ) {
                alt46=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // Objcm.g:396:4: SINGLE_OP
                    {
                    root_0 = (Object)adaptor.nil();


                    SINGLE_OP193=(Token)match(input,SINGLE_OP,FOLLOW_SINGLE_OP_in_single_operators1874); 
                    SINGLE_OP193_tree = 
                    (Object)adaptor.create(SINGLE_OP193)
                    ;
                    adaptor.addChild(root_0, SINGLE_OP193_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:397:5: break_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_wrapper_in_single_operators1881);
                    break_wrapper194=break_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, break_wrapper194.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_operators"


    public static class break_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_wrapper"
    // Objcm.g:400:1: break_wrapper : break_stmt -> ^( BREAK break_stmt ) ;
    public final ObjcmParser.break_wrapper_return break_wrapper() throws RecognitionException {
        ObjcmParser.break_wrapper_return retval = new ObjcmParser.break_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.break_stmt_return break_stmt195 =null;


        RewriteRuleSubtreeStream stream_break_stmt=new RewriteRuleSubtreeStream(adaptor,"rule break_stmt");
        try {
            // Objcm.g:401:2: ( break_stmt -> ^( BREAK break_stmt ) )
            // Objcm.g:401:4: break_stmt
            {
            pushFollow(FOLLOW_break_stmt_in_break_wrapper1893);
            break_stmt195=break_stmt();

            state._fsp--;

            stream_break_stmt.add(break_stmt195.getTree());

            // AST REWRITE
            // elements: break_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 401:15: -> ^( BREAK break_stmt )
            {
                // Objcm.g:401:18: ^( BREAK break_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK, "BREAK")
                , root_1);

                adaptor.addChild(root_1, stream_break_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_wrapper"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // Objcm.g:403:1: break_stmt : BREAK_WORD SEMICOLON ;
    public final ObjcmParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcmParser.break_stmt_return retval = new ObjcmParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BREAK_WORD196=null;
        Token SEMICOLON197=null;

        Object BREAK_WORD196_tree=null;
        Object SEMICOLON197_tree=null;

        try {
            // Objcm.g:404:2: ( BREAK_WORD SEMICOLON )
            // Objcm.g:404:4: BREAK_WORD SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            BREAK_WORD196=(Token)match(input,BREAK_WORD,FOLLOW_BREAK_WORD_in_break_stmt1911); 
            BREAK_WORD196_tree = 
            (Object)adaptor.create(BREAK_WORD196)
            ;
            adaptor.addChild(root_0, BREAK_WORD196_tree);


            SEMICOLON197=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_break_stmt1914); 
            SEMICOLON197_tree = 
            (Object)adaptor.create(SEMICOLON197)
            ;
            adaptor.addChild(root_0, SEMICOLON197_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // Objcm.g:406:1: do_stmt : 'do' if_stmt_block 'while' L_BR expression R_BR ;
    public final ObjcmParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcmParser.do_stmt_return retval = new ObjcmParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal198=null;
        Token string_literal200=null;
        Token L_BR201=null;
        Token R_BR203=null;
        ObjcmParser.if_stmt_block_return if_stmt_block199 =null;

        ObjcmParser.expression_return expression202 =null;


        Object string_literal198_tree=null;
        Object string_literal200_tree=null;
        Object L_BR201_tree=null;
        Object R_BR203_tree=null;

        try {
            // Objcm.g:406:9: ( 'do' if_stmt_block 'while' L_BR expression R_BR )
            // Objcm.g:406:11: 'do' if_stmt_block 'while' L_BR expression R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal198=(Token)match(input,179,FOLLOW_179_in_do_stmt1924); 
            string_literal198_tree = 
            (Object)adaptor.create(string_literal198)
            ;
            adaptor.addChild(root_0, string_literal198_tree);


            pushFollow(FOLLOW_if_stmt_block_in_do_stmt1927);
            if_stmt_block199=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block199.getTree());

            string_literal200=(Token)match(input,192,FOLLOW_192_in_do_stmt1930); 
            string_literal200_tree = 
            (Object)adaptor.create(string_literal200)
            ;
            adaptor.addChild(root_0, string_literal200_tree);


            L_BR201=(Token)match(input,L_BR,FOLLOW_L_BR_in_do_stmt1933); 
            L_BR201_tree = 
            (Object)adaptor.create(L_BR201)
            ;
            adaptor.addChild(root_0, L_BR201_tree);


            pushFollow(FOLLOW_expression_in_do_stmt1936);
            expression202=expression();

            state._fsp--;

            adaptor.addChild(root_0, expression202.getTree());

            R_BR203=(Token)match(input,R_BR,FOLLOW_R_BR_in_do_stmt1938); 
            R_BR203_tree = 
            (Object)adaptor.create(R_BR203)
            ;
            adaptor.addChild(root_0, R_BR203_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // Objcm.g:408:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcmParser.while_stmt_wrapper_return retval = new ObjcmParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.while_stmt_return while_stmt204 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // Objcm.g:409:2: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // Objcm.g:409:4: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper1947);
            while_stmt204=while_stmt();

            state._fsp--;

            stream_while_stmt.add(while_stmt204.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 409:15: -> ^( WHILE_STMT while_stmt )
            {
                // Objcm.g:409:18: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // Objcm.g:412:1: while_stmt : 'while' L_BR while_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcmParser.while_stmt_return retval = new ObjcmParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal205=null;
        Token L_BR206=null;
        Token R_BR208=null;
        ObjcmParser.while_expr_return while_expr207 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper209 =null;


        Object string_literal205_tree=null;
        Object L_BR206_tree=null;
        Object R_BR208_tree=null;

        try {
            // Objcm.g:413:2: ( 'while' L_BR while_expr R_BR if_stmt_block_wrapper )
            // Objcm.g:413:4: 'while' L_BR while_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal205=(Token)match(input,192,FOLLOW_192_in_while_stmt1966); 
            string_literal205_tree = 
            (Object)adaptor.create(string_literal205)
            ;
            adaptor.addChild(root_0, string_literal205_tree);


            L_BR206=(Token)match(input,L_BR,FOLLOW_L_BR_in_while_stmt1969); 
            L_BR206_tree = 
            (Object)adaptor.create(L_BR206)
            ;
            adaptor.addChild(root_0, L_BR206_tree);


            pushFollow(FOLLOW_while_expr_in_while_stmt1972);
            while_expr207=while_expr();

            state._fsp--;

            adaptor.addChild(root_0, while_expr207.getTree());

            R_BR208=(Token)match(input,R_BR,FOLLOW_R_BR_in_while_stmt1974); 
            R_BR208_tree = 
            (Object)adaptor.create(R_BR208)
            ;
            adaptor.addChild(root_0, R_BR208_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_while_stmt1977);
            if_stmt_block_wrapper209=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper209.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class while_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_expr"
    // Objcm.g:415:1: while_expr : classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.while_expr_return while_expr() throws RecognitionException {
        ObjcmParser.while_expr_return retval = new ObjcmParser.while_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp210 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:416:2: ( classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) )
            // Objcm.g:416:5: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_while_expr1990);
            classical_expr_wrp210=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp210.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 416:24: -> ^( WHILE_EXPR classical_expr_wrp )
            {
                // Objcm.g:416:27: ^( WHILE_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_EXPR, "WHILE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_expr"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // Objcm.g:418:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcmParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcmParser.for_stmt_wrapper_return retval = new ObjcmParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.for_stmt_return for_stmt211 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // Objcm.g:419:2: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // Objcm.g:419:4: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper2009);
            for_stmt211=for_stmt();

            state._fsp--;

            stream_for_stmt.add(for_stmt211.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 419:13: -> ^( FOR_STMT for_stmt )
            {
                // Objcm.g:419:16: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // Objcm.g:421:1: for_stmt : 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block ;
    public final ObjcmParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcmParser.for_stmt_return retval = new ObjcmParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal212=null;
        Token L_BR213=null;
        Token R_BR215=null;
        ObjcmParser.for_stmt_expr_wrapper_return for_stmt_expr_wrapper214 =null;

        ObjcmParser.if_stmt_block_return if_stmt_block216 =null;


        Object string_literal212_tree=null;
        Object L_BR213_tree=null;
        Object R_BR215_tree=null;

        try {
            // Objcm.g:421:9: ( 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block )
            // Objcm.g:421:11: 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal212=(Token)match(input,182,FOLLOW_182_in_for_stmt2026); 
            string_literal212_tree = 
            (Object)adaptor.create(string_literal212)
            ;
            adaptor.addChild(root_0, string_literal212_tree);


            L_BR213=(Token)match(input,L_BR,FOLLOW_L_BR_in_for_stmt2029); 
            L_BR213_tree = 
            (Object)adaptor.create(L_BR213)
            ;
            adaptor.addChild(root_0, L_BR213_tree);


            pushFollow(FOLLOW_for_stmt_expr_wrapper_in_for_stmt2032);
            for_stmt_expr_wrapper214=for_stmt_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, for_stmt_expr_wrapper214.getTree());

            R_BR215=(Token)match(input,R_BR,FOLLOW_R_BR_in_for_stmt2034); 
            R_BR215_tree = 
            (Object)adaptor.create(R_BR215)
            ;
            adaptor.addChild(root_0, R_BR215_tree);


            pushFollow(FOLLOW_if_stmt_block_in_for_stmt2037);
            if_stmt_block216=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block216.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr_wrapper"
    // Objcm.g:424:1: for_stmt_expr_wrapper : for_stmt_expr -> ^( FOR_STMT_EXPR for_stmt_expr ) ;
    public final ObjcmParser.for_stmt_expr_wrapper_return for_stmt_expr_wrapper() throws RecognitionException {
        ObjcmParser.for_stmt_expr_wrapper_return retval = new ObjcmParser.for_stmt_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.for_stmt_expr_return for_stmt_expr217 =null;


        RewriteRuleSubtreeStream stream_for_stmt_expr=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt_expr");
        try {
            // Objcm.g:425:2: ( for_stmt_expr -> ^( FOR_STMT_EXPR for_stmt_expr ) )
            // Objcm.g:425:4: for_stmt_expr
            {
            pushFollow(FOLLOW_for_stmt_expr_in_for_stmt_expr_wrapper2049);
            for_stmt_expr217=for_stmt_expr();

            state._fsp--;

            stream_for_stmt_expr.add(for_stmt_expr217.getTree());

            // AST REWRITE
            // elements: for_stmt_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 425:18: -> ^( FOR_STMT_EXPR for_stmt_expr )
            {
                // Objcm.g:425:21: ^( FOR_STMT_EXPR for_stmt_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT_EXPR, "FOR_STMT_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr_wrapper"


    public static class for_stmt_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr"
    // Objcm.g:427:1: for_stmt_expr : ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 );
    public final ObjcmParser.for_stmt_expr_return for_stmt_expr() throws RecognitionException {
        ObjcmParser.for_stmt_expr_return retval = new ObjcmParser.for_stmt_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper218 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1219 =null;

        ObjcmParser.full_expr2_return full_expr2220 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1221 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2222 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2223 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2224 =null;



        try {
            // Objcm.g:428:2: ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==ASTERISK||LA49_0==ID||LA49_0==L_AND||LA49_0==L_BR||LA49_0==L_KBR||LA49_0==L_MINUS||LA49_0==L_MINUS_MINUS||LA49_0==L_NOT||LA49_0==L_PLUS||LA49_0==L_PLUS_PLUS||LA49_0==L_TILDA||LA49_0==NUMBER||LA49_0==SIZEOF||(LA49_0 >= STRING_LITERAL && LA49_0 <= STRING_LITERAL3)||LA49_0==161||LA49_0==167||LA49_0==169||LA49_0==173||LA49_0==184||LA49_0==186||LA49_0==191) ) {
                alt49=1;
            }
            else if ( (LA49_0==SEMICOLON) ) {
                alt49=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;

            }
            switch (alt49) {
                case 1 :
                    // Objcm.g:428:4: full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_full_expr_wrapper_in_for_stmt_expr2068);
                    full_expr_wrapper218=full_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, full_expr_wrapper218.getTree());

                    // Objcm.g:428:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    int alt48=3;
                    alt48 = dfa48.predict(input);
                    switch (alt48) {
                        case 1 :
                            // Objcm.g:428:23: for_stmt_int1
                            {
                            pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2071);
                            for_stmt_int1219=for_stmt_int1();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int1219.getTree());

                            }
                            break;
                        case 2 :
                            // Objcm.g:428:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            {
                            // Objcm.g:428:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            // Objcm.g:428:40: full_expr2 ( for_stmt_int1 | for_stmt_int2 )
                            {
                            pushFollow(FOLLOW_full_expr2_in_for_stmt_expr2076);
                            full_expr2220=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2220.getTree());

                            // Objcm.g:428:51: ( for_stmt_int1 | for_stmt_int2 )
                            int alt47=2;
                            int LA47_0 = input.LA(1);

                            if ( (LA47_0==184) ) {
                                alt47=1;
                            }
                            else if ( (LA47_0==SEMICOLON) ) {
                                alt47=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 47, 0, input);

                                throw nvae;

                            }
                            switch (alt47) {
                                case 1 :
                                    // Objcm.g:428:52: for_stmt_int1
                                    {
                                    pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2079);
                                    for_stmt_int1221=for_stmt_int1();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int1221.getTree());

                                    }
                                    break;
                                case 2 :
                                    // Objcm.g:428:68: for_stmt_int2
                                    {
                                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2083);
                                    for_stmt_int2222=for_stmt_int2();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int2222.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            // Objcm.g:428:86: for_stmt_int2
                            {
                            pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2089);
                            for_stmt_int2223=for_stmt_int2();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int2223.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:429:4: for_stmt_int2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2095);
                    for_stmt_int2224=for_stmt_int2();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_int2224.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr"


    public static class for_stmt_int1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int1"
    // Objcm.g:432:1: for_stmt_int1 : 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) ;
    public final ObjcmParser.for_stmt_int1_return for_stmt_int1() throws RecognitionException {
        ObjcmParser.for_stmt_int1_return retval = new ObjcmParser.for_stmt_int1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal225=null;
        ObjcmParser.object_wrapped2_return object_wrapped2226 =null;


        Object string_literal225_tree=null;
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_object_wrapped2=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapped2");
        try {
            // Objcm.g:433:2: ( 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) )
            // Objcm.g:433:4: 'in' object_wrapped2
            {
            string_literal225=(Token)match(input,184,FOLLOW_184_in_for_stmt_int12110);  
            stream_184.add(string_literal225);


            pushFollow(FOLLOW_object_wrapped2_in_for_stmt_int12112);
            object_wrapped2226=object_wrapped2();

            state._fsp--;

            stream_object_wrapped2.add(object_wrapped2226.getTree());

            // AST REWRITE
            // elements: object_wrapped2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 433:26: -> ^( FOR_IN_STMT object_wrapped2 )
            {
                // Objcm.g:433:29: ^( FOR_IN_STMT object_wrapped2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapped2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int1"


    public static class for_stmt_int2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int2"
    // Objcm.g:435:1: for_stmt_int2 : SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? ;
    public final ObjcmParser.for_stmt_int2_return for_stmt_int2() throws RecognitionException {
        ObjcmParser.for_stmt_int2_return retval = new ObjcmParser.for_stmt_int2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON227=null;
        Token SEMICOLON229=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp228 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp230 =null;


        Object SEMICOLON227_tree=null;
        Object SEMICOLON229_tree=null;

        try {
            // Objcm.g:436:2: ( SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? )
            // Objcm.g:436:4: SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )?
            {
            root_0 = (Object)adaptor.nil();


            SEMICOLON227=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22132); 
            SEMICOLON227_tree = 
            (Object)adaptor.create(SEMICOLON227)
            ;
            adaptor.addChild(root_0, SEMICOLON227_tree);


            // Objcm.g:436:14: ( classical_expr_wrp )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==ASTERISK||LA50_0==ID||LA50_0==L_AND||LA50_0==L_BR||LA50_0==L_KBR||LA50_0==L_MINUS||LA50_0==L_MINUS_MINUS||LA50_0==L_NOT||LA50_0==L_PLUS||LA50_0==L_PLUS_PLUS||LA50_0==L_TILDA||LA50_0==NUMBER||LA50_0==SIZEOF||(LA50_0 >= STRING_LITERAL && LA50_0 <= STRING_LITERAL3)||LA50_0==161||LA50_0==167||LA50_0==169||LA50_0==173||LA50_0==184||LA50_0==186||LA50_0==191) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // Objcm.g:436:14: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22134);
                    classical_expr_wrp228=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp228.getTree());

                    }
                    break;

            }


            SEMICOLON229=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22137); 
            SEMICOLON229_tree = 
            (Object)adaptor.create(SEMICOLON229)
            ;
            adaptor.addChild(root_0, SEMICOLON229_tree);


            // Objcm.g:436:44: ( classical_expr_wrp )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==ASTERISK||LA51_0==ID||LA51_0==L_AND||LA51_0==L_BR||LA51_0==L_KBR||LA51_0==L_MINUS||LA51_0==L_MINUS_MINUS||LA51_0==L_NOT||LA51_0==L_PLUS||LA51_0==L_PLUS_PLUS||LA51_0==L_TILDA||LA51_0==NUMBER||LA51_0==SIZEOF||(LA51_0 >= STRING_LITERAL && LA51_0 <= STRING_LITERAL3)||LA51_0==161||LA51_0==167||LA51_0==169||LA51_0==173||LA51_0==184||LA51_0==186||LA51_0==191) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // Objcm.g:436:44: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22139);
                    classical_expr_wrp230=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp230.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int2"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // Objcm.g:443:1: return_stmt : 'return' ( classical_expr_wrp )? SEMICOLON -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON ) ;
    public final ObjcmParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcmParser.return_stmt_return retval = new ObjcmParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal231=null;
        Token SEMICOLON233=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp232 =null;


        Object string_literal231_tree=null;
        Object SEMICOLON233_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:444:2: ( 'return' ( classical_expr_wrp )? SEMICOLON -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON ) )
            // Objcm.g:444:4: 'return' ( classical_expr_wrp )? SEMICOLON
            {
            string_literal231=(Token)match(input,187,FOLLOW_187_in_return_stmt2156);  
            stream_187.add(string_literal231);


            // Objcm.g:444:13: ( classical_expr_wrp )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==ASTERISK||LA52_0==ID||LA52_0==L_AND||LA52_0==L_BR||LA52_0==L_KBR||LA52_0==L_MINUS||LA52_0==L_MINUS_MINUS||LA52_0==L_NOT||LA52_0==L_PLUS||LA52_0==L_PLUS_PLUS||LA52_0==L_TILDA||LA52_0==NUMBER||LA52_0==SIZEOF||(LA52_0 >= STRING_LITERAL && LA52_0 <= STRING_LITERAL3)||LA52_0==161||LA52_0==167||LA52_0==169||LA52_0==173||LA52_0==184||LA52_0==186||LA52_0==191) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // Objcm.g:444:13: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_return_stmt2158);
                    classical_expr_wrp232=classical_expr_wrp();

                    state._fsp--;

                    stream_classical_expr_wrp.add(classical_expr_wrp232.getTree());

                    }
                    break;

            }


            SEMICOLON233=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_return_stmt2161);  
            stream_SEMICOLON.add(SEMICOLON233);


            // AST REWRITE
            // elements: classical_expr_wrp, SEMICOLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 444:43: -> ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON )
            {
                // Objcm.g:444:46: ^( RETURN_STMT ( classical_expr_wrp )? SEMICOLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                // Objcm.g:444:60: ( classical_expr_wrp )?
                if ( stream_classical_expr_wrp.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                }
                stream_classical_expr_wrp.reset();

                adaptor.addChild(root_1, 
                stream_SEMICOLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class if_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_wrapper"
    // Objcm.g:446:1: if_stmt_wrapper : if_stmt -> ^( IF_STMT if_stmt ) ;
    public final ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_wrapper_return retval = new ObjcmParser.if_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_return if_stmt234 =null;


        RewriteRuleSubtreeStream stream_if_stmt=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt");
        try {
            // Objcm.g:447:2: ( if_stmt -> ^( IF_STMT if_stmt ) )
            // Objcm.g:447:4: if_stmt
            {
            pushFollow(FOLLOW_if_stmt_in_if_stmt_wrapper2182);
            if_stmt234=if_stmt();

            state._fsp--;

            stream_if_stmt.add(if_stmt234.getTree());

            // AST REWRITE
            // elements: if_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 447:12: -> ^( IF_STMT if_stmt )
            {
                // Objcm.g:447:15: ^( IF_STMT if_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_wrapper"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // Objcm.g:449:1: if_stmt : 'if' L_BR if_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcmParser.if_stmt_return retval = new ObjcmParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal235=null;
        Token L_BR236=null;
        Token R_BR238=null;
        ObjcmParser.if_expr_return if_expr237 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper239 =null;


        Object string_literal235_tree=null;
        Object L_BR236_tree=null;
        Object R_BR238_tree=null;

        try {
            // Objcm.g:449:9: ( 'if' L_BR if_expr R_BR if_stmt_block_wrapper )
            // Objcm.g:449:11: 'if' L_BR if_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal235=(Token)match(input,183,FOLLOW_183_in_if_stmt2198); 
            string_literal235_tree = 
            (Object)adaptor.create(string_literal235)
            ;
            adaptor.addChild(root_0, string_literal235_tree);


            L_BR236=(Token)match(input,L_BR,FOLLOW_L_BR_in_if_stmt2201); 
            L_BR236_tree = 
            (Object)adaptor.create(L_BR236)
            ;
            adaptor.addChild(root_0, L_BR236_tree);


            pushFollow(FOLLOW_if_expr_in_if_stmt2204);
            if_expr237=if_expr();

            state._fsp--;

            adaptor.addChild(root_0, if_expr237.getTree());

            R_BR238=(Token)match(input,R_BR,FOLLOW_R_BR_in_if_stmt2206); 
            R_BR238_tree = 
            (Object)adaptor.create(R_BR238)
            ;
            adaptor.addChild(root_0, R_BR238_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_if_stmt2209);
            if_stmt_block_wrapper239=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper239.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class if_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_expr"
    // Objcm.g:452:1: if_expr : classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.if_expr_return if_expr() throws RecognitionException {
        ObjcmParser.if_expr_return retval = new ObjcmParser.if_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp240 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:452:9: ( classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) )
            // Objcm.g:452:12: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_if_expr2222);
            classical_expr_wrp240=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp240.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 452:31: -> ^( IF_EXPR classical_expr_wrp )
            {
                // Objcm.g:452:34: ^( IF_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_EXPR, "IF_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_expr"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // Objcm.g:454:1: else_stmt : 'else' if_stmt_block ;
    public final ObjcmParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcmParser.else_stmt_return retval = new ObjcmParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal241=null;
        ObjcmParser.if_stmt_block_return if_stmt_block242 =null;


        Object string_literal241_tree=null;

        try {
            // Objcm.g:455:2: ( 'else' if_stmt_block )
            // Objcm.g:455:4: 'else' if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal241=(Token)match(input,180,FOLLOW_180_in_else_stmt2241); 
            string_literal241_tree = 
            (Object)adaptor.create(string_literal241)
            ;
            adaptor.addChild(root_0, string_literal241_tree);


            pushFollow(FOLLOW_if_stmt_block_in_else_stmt2244);
            if_stmt_block242=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block242.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class if_stmt_block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block_wrapper"
    // Objcm.g:457:1: if_stmt_block_wrapper : if_stmt_block -> ^( IF_BLOCK if_stmt_block ) ;
    public final ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_block_wrapper_return retval = new ObjcmParser.if_stmt_block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_block_return if_stmt_block243 =null;


        RewriteRuleSubtreeStream stream_if_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt_block");
        try {
            // Objcm.g:458:2: ( if_stmt_block -> ^( IF_BLOCK if_stmt_block ) )
            // Objcm.g:458:4: if_stmt_block
            {
            pushFollow(FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2253);
            if_stmt_block243=if_stmt_block();

            state._fsp--;

            stream_if_stmt_block.add(if_stmt_block243.getTree());

            // AST REWRITE
            // elements: if_stmt_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 458:18: -> ^( IF_BLOCK if_stmt_block )
            {
                // Objcm.g:458:21: ^( IF_BLOCK if_stmt_block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_BLOCK, "IF_BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block_wrapper"


    public static class if_stmt_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block"
    // Objcm.g:460:1: if_stmt_block : ( block_wrapper | block_internal );
    public final ObjcmParser.if_stmt_block_return if_stmt_block() throws RecognitionException {
        ObjcmParser.if_stmt_block_return retval = new ObjcmParser.if_stmt_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_wrapper_return block_wrapper244 =null;

        ObjcmParser.block_internal_return block_internal245 =null;



        try {
            // Objcm.g:461:2: ( block_wrapper | block_internal )
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==L_FBR) ) {
                alt53=1;
            }
            else if ( (LA53_0==ASTERISK||LA53_0==BREAK_WORD||LA53_0==CONST_PREFIX||LA53_0==ENUM_PREFIX||LA53_0==ID||LA53_0==L_AND||LA53_0==L_BR||LA53_0==L_KBR||LA53_0==L_MINUS||LA53_0==L_MINUS_MINUS||LA53_0==L_NOT||LA53_0==L_PLUS||LA53_0==L_PLUS_PLUS||LA53_0==L_TILDA||LA53_0==NUMBER||LA53_0==SEMICOLON||(LA53_0 >= SINGLE_OP && LA53_0 <= SIZEOF)||LA53_0==STATIC_PREFIX||(LA53_0 >= STRING_LITERAL && LA53_0 <= STRING_LITERAL3)||LA53_0==STRUCT_PREFIX||LA53_0==VOID||LA53_0==161||LA53_0==167||LA53_0==169||(LA53_0 >= 171 && LA53_0 <= 173)||LA53_0==175||(LA53_0 >= 179 && LA53_0 <= 180)||(LA53_0 >= 182 && LA53_0 <= 184)||(LA53_0 >= 186 && LA53_0 <= 188)||(LA53_0 >= 191 && LA53_0 <= 192)) ) {
                alt53=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;

            }
            switch (alt53) {
                case 1 :
                    // Objcm.g:461:4: block_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_wrapper_in_if_stmt_block2270);
                    block_wrapper244=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper244.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:462:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_if_stmt_block2276);
                    block_internal245=block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, block_internal245.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block"


    public static class static_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start_wrapper"
    // Objcm.g:465:1: static_start_wrapper : static_start -> ^( STATIC_START static_start ) ;
    public final ObjcmParser.static_start_wrapper_return static_start_wrapper() throws RecognitionException {
        ObjcmParser.static_start_wrapper_return retval = new ObjcmParser.static_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_start_return static_start246 =null;


        RewriteRuleSubtreeStream stream_static_start=new RewriteRuleSubtreeStream(adaptor,"rule static_start");
        try {
            // Objcm.g:466:2: ( static_start -> ^( STATIC_START static_start ) )
            // Objcm.g:466:4: static_start
            {
            pushFollow(FOLLOW_static_start_in_static_start_wrapper2288);
            static_start246=static_start();

            state._fsp--;

            stream_static_start.add(static_start246.getTree());

            // AST REWRITE
            // elements: static_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 466:17: -> ^( STATIC_START static_start )
            {
                // Objcm.g:466:20: ^( STATIC_START static_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_START, "STATIC_START")
                , root_1);

                adaptor.addChild(root_1, stream_static_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start_wrapper"


    public static class static_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start"
    // Objcm.g:468:1: static_start : STATIC_PREFIX ( CONST_PREFIX )? static_type_wrapper full_expr2 ;
    public final ObjcmParser.static_start_return static_start() throws RecognitionException {
        ObjcmParser.static_start_return retval = new ObjcmParser.static_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX247=null;
        Token CONST_PREFIX248=null;
        ObjcmParser.static_type_wrapper_return static_type_wrapper249 =null;

        ObjcmParser.full_expr2_return full_expr2250 =null;


        Object STATIC_PREFIX247_tree=null;
        Object CONST_PREFIX248_tree=null;

        try {
            // Objcm.g:469:2: ( STATIC_PREFIX ( CONST_PREFIX )? static_type_wrapper full_expr2 )
            // Objcm.g:469:4: STATIC_PREFIX ( CONST_PREFIX )? static_type_wrapper full_expr2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX247=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_start2306); 
            STATIC_PREFIX247_tree = 
            (Object)adaptor.create(STATIC_PREFIX247)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX247_tree);


            // Objcm.g:469:18: ( CONST_PREFIX )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==CONST_PREFIX) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // Objcm.g:469:18: CONST_PREFIX
                    {
                    CONST_PREFIX248=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_start2308); 
                    CONST_PREFIX248_tree = 
                    (Object)adaptor.create(CONST_PREFIX248)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX248_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_static_type_wrapper_in_static_start2311);
            static_type_wrapper249=static_type_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, static_type_wrapper249.getTree());

            pushFollow(FOLLOW_full_expr2_in_static_start2313);
            full_expr2250=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2250.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start"


    public static class static_type_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type_wrapper"
    // Objcm.g:472:1: static_type_wrapper : static_type -> ^( STATIC_TYPE static_type ) ;
    public final ObjcmParser.static_type_wrapper_return static_type_wrapper() throws RecognitionException {
        ObjcmParser.static_type_wrapper_return retval = new ObjcmParser.static_type_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_type_return static_type251 =null;


        RewriteRuleSubtreeStream stream_static_type=new RewriteRuleSubtreeStream(adaptor,"rule static_type");
        try {
            // Objcm.g:473:2: ( static_type -> ^( STATIC_TYPE static_type ) )
            // Objcm.g:473:4: static_type
            {
            pushFollow(FOLLOW_static_type_in_static_type_wrapper2325);
            static_type251=static_type();

            state._fsp--;

            stream_static_type.add(static_type251.getTree());

            // AST REWRITE
            // elements: static_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 473:16: -> ^( STATIC_TYPE static_type )
            {
                // Objcm.g:473:19: ^( STATIC_TYPE static_type )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_TYPE, "STATIC_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_static_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type_wrapper"


    public static class static_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type"
    // Objcm.g:475:1: static_type : ( object_name ( ASTERISK )* )? ;
    public final ObjcmParser.static_type_return static_type() throws RecognitionException {
        ObjcmParser.static_type_return retval = new ObjcmParser.static_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK253=null;
        ObjcmParser.object_name_return object_name252 =null;


        Object ASTERISK253_tree=null;

        try {
            // Objcm.g:476:2: ( ( object_name ( ASTERISK )* )? )
            // Objcm.g:476:4: ( object_name ( ASTERISK )* )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:476:4: ( object_name ( ASTERISK )* )?
            int alt56=2;
            alt56 = dfa56.predict(input);
            switch (alt56) {
                case 1 :
                    // Objcm.g:476:5: object_name ( ASTERISK )*
                    {
                    pushFollow(FOLLOW_object_name_in_static_type2345);
                    object_name252=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name252.getTree());

                    // Objcm.g:476:17: ( ASTERISK )*
                    loop55:
                    do {
                        int alt55=2;
                        int LA55_0 = input.LA(1);

                        if ( (LA55_0==ASTERISK) ) {
                            alt55=1;
                        }


                        switch (alt55) {
                    	case 1 :
                    	    // Objcm.g:476:17: ASTERISK
                    	    {
                    	    ASTERISK253=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_static_type2347); 
                    	    ASTERISK253_tree = 
                    	    (Object)adaptor.create(ASTERISK253)
                    	    ;
                    	    adaptor.addChild(root_0, ASTERISK253_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop55;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type"


    public static class id_part_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end"
    // Objcm.g:478:1: id_part_end : ( id_part_end_internal )+ ;
    public final ObjcmParser.id_part_end_return id_part_end() throws RecognitionException {
        ObjcmParser.id_part_end_return retval = new ObjcmParser.id_part_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_end_internal_return id_part_end_internal254 =null;



        try {
            // Objcm.g:479:2: ( ( id_part_end_internal )+ )
            // Objcm.g:479:4: ( id_part_end_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:479:4: ( id_part_end_internal )+
            int cnt57=0;
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==DOT||LA57_0==158) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // Objcm.g:479:4: id_part_end_internal
            	    {
            	    pushFollow(FOLLOW_id_part_end_internal_in_id_part_end2361);
            	    id_part_end_internal254=id_part_end_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part_end_internal254.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt57 >= 1 ) break loop57;
                        EarlyExitException eee =
                            new EarlyExitException(57, input);
                        throw eee;
                }
                cnt57++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end"


    public static class id_part_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end_internal"
    // Objcm.g:482:1: id_part_end_internal : ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) ;
    public final ObjcmParser.id_part_end_internal_return id_part_end_internal() throws RecognitionException {
        ObjcmParser.id_part_end_internal_return retval = new ObjcmParser.id_part_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT255=null;
        Token string_literal256=null;
        ObjcmParser.id_part_return id_part257 =null;


        Object DOT255_tree=null;
        Object string_literal256_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_158=new RewriteRuleTokenStream(adaptor,"token 158");
        RewriteRuleSubtreeStream stream_id_part=new RewriteRuleSubtreeStream(adaptor,"rule id_part");
        try {
            // Objcm.g:483:2: ( ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) )
            // Objcm.g:483:4: ( DOT | '->' ) id_part
            {
            // Objcm.g:483:4: ( DOT | '->' )
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==DOT) ) {
                alt58=1;
            }
            else if ( (LA58_0==158) ) {
                alt58=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }
            switch (alt58) {
                case 1 :
                    // Objcm.g:483:5: DOT
                    {
                    DOT255=(Token)match(input,DOT,FOLLOW_DOT_in_id_part_end_internal2376);  
                    stream_DOT.add(DOT255);


                    }
                    break;
                case 2 :
                    // Objcm.g:483:11: '->'
                    {
                    string_literal256=(Token)match(input,158,FOLLOW_158_in_id_part_end_internal2380);  
                    stream_158.add(string_literal256);


                    }
                    break;

            }


            pushFollow(FOLLOW_id_part_in_id_part_end_internal2383);
            id_part257=id_part();

            state._fsp--;

            stream_id_part.add(id_part257.getTree());

            // AST REWRITE
            // elements: id_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 483:25: -> ^( FIELD_ACCESS id_part )
            {
                // Objcm.g:483:28: ^( FIELD_ACCESS id_part )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_ACCESS, "FIELD_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_id_part.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end_internal"


    public static class known_types_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_types"
    // Objcm.g:486:1: known_types : ( 'unsigned' | VOID );
    public final ObjcmParser.known_types_return known_types() throws RecognitionException {
        ObjcmParser.known_types_return retval = new ObjcmParser.known_types_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set258=null;

        Object set258_tree=null;

        try {
            // Objcm.g:487:2: ( 'unsigned' | VOID )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set258=(Token)input.LT(1);

            if ( input.LA(1)==VOID||input.LA(1)==191 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set258)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_types"


    public static class id_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part"
    // Objcm.g:491:1: id_part : name_internal ( function_brackets_wrapper )? ( index_wrapper )* ;
    public final ObjcmParser.id_part_return id_part() throws RecognitionException {
        ObjcmParser.id_part_return retval = new ObjcmParser.id_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal259 =null;

        ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper260 =null;

        ObjcmParser.index_wrapper_return index_wrapper261 =null;



        try {
            // Objcm.g:491:9: ( name_internal ( function_brackets_wrapper )? ( index_wrapper )* )
            // Objcm.g:491:12: name_internal ( function_brackets_wrapper )? ( index_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_internal_in_id_part2421);
            name_internal259=name_internal();

            state._fsp--;

            adaptor.addChild(root_0, name_internal259.getTree());

            // Objcm.g:491:26: ( function_brackets_wrapper )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==L_BR) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // Objcm.g:491:26: function_brackets_wrapper
                    {
                    pushFollow(FOLLOW_function_brackets_wrapper_in_id_part2423);
                    function_brackets_wrapper260=function_brackets_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, function_brackets_wrapper260.getTree());

                    }
                    break;

            }


            // Objcm.g:491:53: ( index_wrapper )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==L_KBR) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // Objcm.g:491:53: index_wrapper
            	    {
            	    pushFollow(FOLLOW_index_wrapper_in_id_part2426);
            	    index_wrapper261=index_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, index_wrapper261.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part"


    public static class object_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_name"
    // Objcm.g:494:1: object_name : id_part ( id_part_end )? ;
    public final ObjcmParser.object_name_return object_name() throws RecognitionException {
        ObjcmParser.object_name_return retval = new ObjcmParser.object_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_return id_part262 =null;

        ObjcmParser.id_part_end_return id_part_end263 =null;



        try {
            // Objcm.g:495:2: ( id_part ( id_part_end )? )
            // Objcm.g:495:4: id_part ( id_part_end )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_id_part_in_object_name2439);
            id_part262=id_part();

            state._fsp--;

            adaptor.addChild(root_0, id_part262.getTree());

            // Objcm.g:495:12: ( id_part_end )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==DOT||LA61_0==158) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // Objcm.g:495:12: id_part_end
                    {
                    pushFollow(FOLLOW_id_part_end_in_object_name2441);
                    id_part_end263=id_part_end();

                    state._fsp--;

                    adaptor.addChild(root_0, id_part_end263.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_name"


    public static class method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper"
    // Objcm.g:498:1: method_call_wrapper : L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper_return method_call_wrapper() throws RecognitionException {
        ObjcmParser.method_call_wrapper_return retval = new ObjcmParser.method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR264=null;
        Token R_KBR266=null;
        ObjcmParser.method_call2_return method_call2265 =null;


        Object L_KBR264_tree=null;
        Object R_KBR266_tree=null;
        RewriteRuleTokenStream stream_R_KBR=new RewriteRuleTokenStream(adaptor,"token R_KBR");
        RewriteRuleTokenStream stream_L_KBR=new RewriteRuleTokenStream(adaptor,"token L_KBR");
        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // Objcm.g:499:2: ( L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) )
            // Objcm.g:499:4: L_KBR method_call2 R_KBR
            {
            L_KBR264=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_method_call_wrapper2455);  
            stream_L_KBR.add(L_KBR264);


            pushFollow(FOLLOW_method_call2_in_method_call_wrapper2457);
            method_call2265=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2265.getTree());

            R_KBR266=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_method_call_wrapper2459);  
            stream_R_KBR.add(R_KBR266);


            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 499:29: -> ^( METHOD_CALL method_call2 )
            {
                // Objcm.g:499:32: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper"


    public static class method_call_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper2"
    // Objcm.g:502:1: method_call_wrapper2 : method_call2 -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper2_return method_call_wrapper2() throws RecognitionException {
        ObjcmParser.method_call_wrapper2_return retval = new ObjcmParser.method_call_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call2_return method_call2267 =null;


        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // Objcm.g:503:2: ( method_call2 -> ^( METHOD_CALL method_call2 ) )
            // Objcm.g:503:4: method_call2
            {
            pushFollow(FOLLOW_method_call2_in_method_call_wrapper22482);
            method_call2267=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2267.getTree());

            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 503:17: -> ^( METHOD_CALL method_call2 )
            {
                // Objcm.g:503:20: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper2"


    public static class method_call2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call2"
    // Objcm.g:505:1: method_call2 : object_wrapper method_name ( method_call_message_list_wrapper )? ;
    public final ObjcmParser.method_call2_return method_call2() throws RecognitionException {
        ObjcmParser.method_call2_return retval = new ObjcmParser.method_call2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_return object_wrapper268 =null;

        ObjcmParser.method_name_return method_name269 =null;

        ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper270 =null;



        try {
            // Objcm.g:506:2: ( object_wrapper method_name ( method_call_message_list_wrapper )? )
            // Objcm.g:506:4: object_wrapper method_name ( method_call_message_list_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapper_in_method_call22501);
            object_wrapper268=object_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapper268.getTree());

            pushFollow(FOLLOW_method_name_in_method_call22503);
            method_name269=method_name();

            state._fsp--;

            adaptor.addChild(root_0, method_name269.getTree());

            // Objcm.g:506:31: ( method_call_message_list_wrapper )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==COLON) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // Objcm.g:506:33: method_call_message_list_wrapper
                    {
                    pushFollow(FOLLOW_method_call_message_list_wrapper_in_method_call22507);
                    method_call_message_list_wrapper270=method_call_message_list_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_message_list_wrapper270.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call2"


    public static class object_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper"
    // Objcm.g:508:1: object_wrapper : object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) ;
    public final ObjcmParser.object_wrapper_return object_wrapper() throws RecognitionException {
        ObjcmParser.object_wrapper_return retval = new ObjcmParser.object_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_internal_return object_wrapper_internal271 =null;


        RewriteRuleSubtreeStream stream_object_wrapper_internal=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapper_internal");
        try {
            // Objcm.g:509:2: ( object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) )
            // Objcm.g:509:4: object_wrapper_internal
            {
            pushFollow(FOLLOW_object_wrapper_internal_in_object_wrapper2518);
            object_wrapper_internal271=object_wrapper_internal();

            state._fsp--;

            stream_object_wrapper_internal.add(object_wrapper_internal271.getTree());

            // AST REWRITE
            // elements: object_wrapper_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 509:28: -> ^( OBJECT object_wrapper_internal )
            {
                // Objcm.g:509:31: ^( OBJECT object_wrapper_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT, "OBJECT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapper_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper"


    public static class object_wrapper_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper_internal"
    // Objcm.g:511:1: object_wrapper_internal : ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL );
    public final ObjcmParser.object_wrapper_internal_return object_wrapper_internal() throws RecognitionException {
        ObjcmParser.object_wrapper_internal_return retval = new ObjcmParser.object_wrapper_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL277=null;
        ObjcmParser.type_convertion_return type_convertion272 =null;

        ObjcmParser.object_name_return object_name273 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper274 =null;

        ObjcmParser.object_name_return object_name275 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper276 =null;


        Object STRING_LITERAL277_tree=null;

        try {
            // Objcm.g:513:2: ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL )
            int alt64=4;
            switch ( input.LA(1) ) {
            case L_BR:
                {
                alt64=1;
                }
                break;
            case ID:
            case 184:
                {
                alt64=2;
                }
                break;
            case L_KBR:
                {
                alt64=3;
                }
                break;
            case STRING_LITERAL:
                {
                alt64=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }

            switch (alt64) {
                case 1 :
                    // Objcm.g:513:4: type_convertion ( object_name | method_call_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_convertion_in_object_wrapper_internal2537);
                    type_convertion272=type_convertion();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion272.getTree());

                    // Objcm.g:513:20: ( object_name | method_call_wrapper )
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==ID||LA63_0==184) ) {
                        alt63=1;
                    }
                    else if ( (LA63_0==L_KBR) ) {
                        alt63=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 63, 0, input);

                        throw nvae;

                    }
                    switch (alt63) {
                        case 1 :
                            // Objcm.g:513:21: object_name
                            {
                            pushFollow(FOLLOW_object_name_in_object_wrapper_internal2540);
                            object_name273=object_name();

                            state._fsp--;

                            adaptor.addChild(root_0, object_name273.getTree());

                            }
                            break;
                        case 2 :
                            // Objcm.g:513:35: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2544);
                            method_call_wrapper274=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper274.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:514:4: object_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_name_in_object_wrapper_internal2550);
                    object_name275=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name275.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:515:4: method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2555);
                    method_call_wrapper276=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper276.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:516:4: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL277=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_object_wrapper_internal2560); 
                    STRING_LITERAL277_tree = 
                    (Object)adaptor.create(STRING_LITERAL277)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL277_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper_internal"


    public static class method_message3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_message3"
    // Objcm.g:519:1: method_message3 : classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) ;
    public final ObjcmParser.method_message3_return method_message3() throws RecognitionException {
        ObjcmParser.method_message3_return retval = new ObjcmParser.method_message3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp278 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // Objcm.g:520:2: ( classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) )
            // Objcm.g:520:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_method_message32572);
            classical_expr_wrp278=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp278.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:23: -> ^( MESSAGE classical_expr_wrp )
            {
                // Objcm.g:520:26: ^( MESSAGE classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_message3"


    public static class type_convertion_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion"
    // Objcm.g:522:1: type_convertion : L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE_CONVERTION type_internal ( generic )? ) ;
    public final ObjcmParser.type_convertion_return type_convertion() throws RecognitionException {
        ObjcmParser.type_convertion_return retval = new ObjcmParser.type_convertion_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR279=null;
        Token string_literal280=null;
        Token string_literal281=null;
        Token ASTERISK284=null;
        Token R_BR285=null;
        ObjcmParser.type_internal_return type_internal282 =null;

        ObjcmParser.generic_return generic283 =null;


        Object L_BR279_tree=null;
        Object string_literal280_tree=null;
        Object string_literal281_tree=null;
        Object ASTERISK284_tree=null;
        Object R_BR285_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        RewriteRuleSubtreeStream stream_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_internal");
        try {
            // Objcm.g:523:2: ( L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE_CONVERTION type_internal ( generic )? ) )
            // Objcm.g:523:4: L_BR ( 'const' )? ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* R_BR
            {
            L_BR279=(Token)match(input,L_BR,FOLLOW_L_BR_in_type_convertion2591);  
            stream_L_BR.add(L_BR279);


            // Objcm.g:523:9: ( 'const' )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==CONST_PREFIX) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // Objcm.g:523:9: 'const'
                    {
                    string_literal280=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_convertion2593);  
                    stream_CONST_PREFIX.add(string_literal280);


                    }
                    break;

            }


            // Objcm.g:523:18: ( 'unsigned' )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==191) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // Objcm.g:523:18: 'unsigned'
                    {
                    string_literal281=(Token)match(input,191,FOLLOW_191_in_type_convertion2596);  
                    stream_191.add(string_literal281);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_type_convertion2599);
            type_internal282=type_internal();

            state._fsp--;

            stream_type_internal.add(type_internal282.getTree());

            // Objcm.g:523:44: ( generic )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==L_LESS) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // Objcm.g:523:44: generic
                    {
                    pushFollow(FOLLOW_generic_in_type_convertion2601);
                    generic283=generic();

                    state._fsp--;

                    stream_generic.add(generic283.getTree());

                    }
                    break;

            }


            // Objcm.g:523:53: ( ASTERISK )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==ASTERISK) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // Objcm.g:523:53: ASTERISK
            	    {
            	    ASTERISK284=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_type_convertion2604);  
            	    stream_ASTERISK.add(ASTERISK284);


            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            R_BR285=(Token)match(input,R_BR,FOLLOW_R_BR_in_type_convertion2607);  
            stream_R_BR.add(R_BR285);


            // AST REWRITE
            // elements: generic, type_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 523:69: -> ^( TYPE_CONVERTION type_internal ( generic )? )
            {
                // Objcm.g:523:72: ^( TYPE_CONVERTION type_internal ( generic )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CONVERTION, "TYPE_CONVERTION")
                , root_1);

                adaptor.addChild(root_1, stream_type_internal.nextTree());

                // Objcm.g:523:104: ( generic )?
                if ( stream_generic.hasNext() ) {
                    adaptor.addChild(root_1, stream_generic.nextTree());

                }
                stream_generic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // Objcm.g:525:1: method_name : ID -> ^( METHOD_NAME ID ) ;
    public final ObjcmParser.method_name_return method_name() throws RecognitionException {
        ObjcmParser.method_name_return retval = new ObjcmParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID286=null;

        Object ID286_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:526:2: ( ID -> ^( METHOD_NAME ID ) )
            // Objcm.g:526:4: ID
            {
            ID286=(Token)match(input,ID,FOLLOW_ID_in_method_name2628);  
            stream_ID.add(ID286);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 526:7: -> ^( METHOD_NAME ID )
            {
                // Objcm.g:526:10: ^( METHOD_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_call_message_list_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list_wrapper"
    // Objcm.g:528:1: method_call_message_list_wrapper : method_call_message_list -> ^( MSG_LIST method_call_message_list ) ;
    public final ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_list_wrapper_return retval = new ObjcmParser.method_call_message_list_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_list_return method_call_message_list287 =null;


        RewriteRuleSubtreeStream stream_method_call_message_list=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_list");
        try {
            // Objcm.g:529:2: ( method_call_message_list -> ^( MSG_LIST method_call_message_list ) )
            // Objcm.g:529:4: method_call_message_list
            {
            pushFollow(FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2645);
            method_call_message_list287=method_call_message_list();

            state._fsp--;

            stream_method_call_message_list.add(method_call_message_list287.getTree());

            // AST REWRITE
            // elements: method_call_message_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 529:29: -> ^( MSG_LIST method_call_message_list )
            {
                // Objcm.g:529:32: ^( MSG_LIST method_call_message_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MSG_LIST, "MSG_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list_wrapper"


    public static class method_call_message_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list"
    // Objcm.g:531:1: method_call_message_list : method_call_message_first_wrapper ( method_call_message_wrapper )* ;
    public final ObjcmParser.method_call_message_list_return method_call_message_list() throws RecognitionException {
        ObjcmParser.method_call_message_list_return retval = new ObjcmParser.method_call_message_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper288 =null;

        ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper289 =null;



        try {
            // Objcm.g:532:2: ( method_call_message_first_wrapper ( method_call_message_wrapper )* )
            // Objcm.g:532:4: method_call_message_first_wrapper ( method_call_message_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2662);
            method_call_message_first_wrapper288=method_call_message_first_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_call_message_first_wrapper288.getTree());

            // Objcm.g:532:38: ( method_call_message_wrapper )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==COLON||LA69_0==ID) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // Objcm.g:532:38: method_call_message_wrapper
            	    {
            	    pushFollow(FOLLOW_method_call_message_wrapper_in_method_call_message_list2664);
            	    method_call_message_wrapper289=method_call_message_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_call_message_wrapper289.getTree());

            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list"


    public static class method_call_message_first_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first_wrapper"
    // Objcm.g:534:1: method_call_message_first_wrapper : method_call_message_first -> ^( METHOD_MSG method_call_message_first ) ;
    public final ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_first_wrapper_return retval = new ObjcmParser.method_call_message_first_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_return method_call_message_first290 =null;


        RewriteRuleSubtreeStream stream_method_call_message_first=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_first");
        try {
            // Objcm.g:535:2: ( method_call_message_first -> ^( METHOD_MSG method_call_message_first ) )
            // Objcm.g:535:4: method_call_message_first
            {
            pushFollow(FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2675);
            method_call_message_first290=method_call_message_first();

            state._fsp--;

            stream_method_call_message_first.add(method_call_message_first290.getTree());

            // AST REWRITE
            // elements: method_call_message_first
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 535:30: -> ^( METHOD_MSG method_call_message_first )
            {
                // Objcm.g:535:33: ^( METHOD_MSG method_call_message_first )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_first.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first_wrapper"


    public static class method_call_message_first_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first"
    // Objcm.g:537:1: method_call_message_first : COLON message ;
    public final ObjcmParser.method_call_message_first_return method_call_message_first() throws RecognitionException {
        ObjcmParser.method_call_message_first_return retval = new ObjcmParser.method_call_message_first_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON291=null;
        ObjcmParser.message_return message292 =null;


        Object COLON291_tree=null;

        try {
            // Objcm.g:538:2: ( COLON message )
            // Objcm.g:538:4: COLON message
            {
            root_0 = (Object)adaptor.nil();


            COLON291=(Token)match(input,COLON,FOLLOW_COLON_in_method_call_message_first2692); 
            COLON291_tree = 
            (Object)adaptor.create(COLON291)
            ;
            adaptor.addChild(root_0, COLON291_tree);


            pushFollow(FOLLOW_message_in_method_call_message_first2695);
            message292=message();

            state._fsp--;

            adaptor.addChild(root_0, message292.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first"


    public static class method_call_message_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_wrapper"
    // Objcm.g:540:1: method_call_message_wrapper : method_call_message -> ^( METHOD_MSG method_call_message ) ;
    public final ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_wrapper_return retval = new ObjcmParser.method_call_message_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_return method_call_message293 =null;


        RewriteRuleSubtreeStream stream_method_call_message=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message");
        try {
            // Objcm.g:541:2: ( method_call_message -> ^( METHOD_MSG method_call_message ) )
            // Objcm.g:541:4: method_call_message
            {
            pushFollow(FOLLOW_method_call_message_in_method_call_message_wrapper2705);
            method_call_message293=method_call_message();

            state._fsp--;

            stream_method_call_message.add(method_call_message293.getTree());

            // AST REWRITE
            // elements: method_call_message
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 541:24: -> ^( METHOD_MSG method_call_message )
            {
                // Objcm.g:541:27: ^( METHOD_MSG method_call_message )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_wrapper"


    public static class method_call_message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message"
    // Objcm.g:543:1: method_call_message : ( prefix | incomplete_prefix ) message ;
    public final ObjcmParser.method_call_message_return method_call_message() throws RecognitionException {
        ObjcmParser.method_call_message_return retval = new ObjcmParser.method_call_message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.prefix_return prefix294 =null;

        ObjcmParser.incomplete_prefix_return incomplete_prefix295 =null;

        ObjcmParser.message_return message296 =null;



        try {
            // Objcm.g:544:2: ( ( prefix | incomplete_prefix ) message )
            // Objcm.g:544:4: ( prefix | incomplete_prefix ) message
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:544:4: ( prefix | incomplete_prefix )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==ID) ) {
                alt70=1;
            }
            else if ( (LA70_0==COLON) ) {
                alt70=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;

            }
            switch (alt70) {
                case 1 :
                    // Objcm.g:544:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_call_message2724);
                    prefix294=prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, prefix294.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:544:14: incomplete_prefix
                    {
                    pushFollow(FOLLOW_incomplete_prefix_in_method_call_message2728);
                    incomplete_prefix295=incomplete_prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, incomplete_prefix295.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_message_in_method_call_message2732);
            message296=message();

            state._fsp--;

            adaptor.addChild(root_0, message296.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message"


    public static class message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "message"
    // Objcm.g:546:1: message : msg_expr ( COMMA msg_expr )* -> ^( MESSAGE msg_expr ( COMMA msg_expr )* ) ;
    public final ObjcmParser.message_return message() throws RecognitionException {
        ObjcmParser.message_return retval = new ObjcmParser.message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA298=null;
        ObjcmParser.msg_expr_return msg_expr297 =null;

        ObjcmParser.msg_expr_return msg_expr299 =null;


        Object COMMA298_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_msg_expr=new RewriteRuleSubtreeStream(adaptor,"rule msg_expr");
        try {
            // Objcm.g:546:9: ( msg_expr ( COMMA msg_expr )* -> ^( MESSAGE msg_expr ( COMMA msg_expr )* ) )
            // Objcm.g:546:11: msg_expr ( COMMA msg_expr )*
            {
            pushFollow(FOLLOW_msg_expr_in_message2741);
            msg_expr297=msg_expr();

            state._fsp--;

            stream_msg_expr.add(msg_expr297.getTree());

            // Objcm.g:546:20: ( COMMA msg_expr )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // Objcm.g:546:21: COMMA msg_expr
            	    {
            	    COMMA298=(Token)match(input,COMMA,FOLLOW_COMMA_in_message2744);  
            	    stream_COMMA.add(COMMA298);


            	    pushFollow(FOLLOW_msg_expr_in_message2746);
            	    msg_expr299=msg_expr();

            	    state._fsp--;

            	    stream_msg_expr.add(msg_expr299.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            // AST REWRITE
            // elements: msg_expr, msg_expr, COMMA
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 546:38: -> ^( MESSAGE msg_expr ( COMMA msg_expr )* )
            {
                // Objcm.g:546:41: ^( MESSAGE msg_expr ( COMMA msg_expr )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_msg_expr.nextTree());

                // Objcm.g:546:60: ( COMMA msg_expr )*
                while ( stream_msg_expr.hasNext()||stream_COMMA.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_COMMA.nextNode()
                    );

                    adaptor.addChild(root_1, stream_msg_expr.nextTree());

                }
                stream_msg_expr.reset();
                stream_COMMA.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "message"


    public static class msg_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "msg_expr"
    // Objcm.g:550:1: msg_expr : classical_expr_wrp ;
    public final ObjcmParser.msg_expr_return msg_expr() throws RecognitionException {
        ObjcmParser.msg_expr_return retval = new ObjcmParser.msg_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp300 =null;



        try {
            // Objcm.g:551:2: ( classical_expr_wrp )
            // Objcm.g:551:5: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_msg_expr2780);
            classical_expr_wrp300=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp300.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "msg_expr"


    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // Objcm.g:558:1: expression : ( classical_expr_wrp | struct_init );
    public final ObjcmParser.expression_return expression() throws RecognitionException {
        ObjcmParser.expression_return retval = new ObjcmParser.expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp301 =null;

        ObjcmParser.struct_init_return struct_init302 =null;



        try {
            // Objcm.g:559:2: ( classical_expr_wrp | struct_init )
            int alt72=2;
            alt72 = dfa72.predict(input);
            switch (alt72) {
                case 1 :
                    // Objcm.g:559:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_expression2796);
                    classical_expr_wrp301=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp301.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:560:4: struct_init
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_in_expression2801);
                    struct_init302=struct_init();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init302.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class full_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr_wrapper"
    // Objcm.g:563:1: full_expr_wrapper : full_expr -> ^( EXPR_FULL full_expr ) ;
    public final ObjcmParser.full_expr_wrapper_return full_expr_wrapper() throws RecognitionException {
        ObjcmParser.full_expr_wrapper_return retval = new ObjcmParser.full_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_return full_expr303 =null;


        RewriteRuleSubtreeStream stream_full_expr=new RewriteRuleSubtreeStream(adaptor,"rule full_expr");
        try {
            // Objcm.g:564:2: ( full_expr -> ^( EXPR_FULL full_expr ) )
            // Objcm.g:564:4: full_expr
            {
            pushFollow(FOLLOW_full_expr_in_full_expr_wrapper2812);
            full_expr303=full_expr();

            state._fsp--;

            stream_full_expr.add(full_expr303.getTree());

            // AST REWRITE
            // elements: full_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 564:14: -> ^( EXPR_FULL full_expr )
            {
                // Objcm.g:564:17: ^( EXPR_FULL full_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_FULL, "EXPR_FULL")
                , root_1);

                adaptor.addChild(root_1, stream_full_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr_wrapper"


    public static class full_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr"
    // Objcm.g:566:1: full_expr : classical_expr_wrp ( COMMA classical_expr_wrp )* ;
    public final ObjcmParser.full_expr_return full_expr() throws RecognitionException {
        ObjcmParser.full_expr_return retval = new ObjcmParser.full_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA305=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp304 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp306 =null;


        Object COMMA305_tree=null;

        try {
            // Objcm.g:567:2: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )
            // Objcm.g:567:4: classical_expr_wrp ( COMMA classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_full_expr2829);
            classical_expr_wrp304=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp304.getTree());

            // Objcm.g:567:23: ( COMMA classical_expr_wrp )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // Objcm.g:567:24: COMMA classical_expr_wrp
            	    {
            	    COMMA305=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr2832); 
            	    COMMA305_tree = 
            	    (Object)adaptor.create(COMMA305)
            	    ;
            	    adaptor.addChild(root_0, COMMA305_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_full_expr2834);
            	    classical_expr_wrp306=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp306.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr"


    public static class full_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr2"
    // Objcm.g:569:1: full_expr2 : classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* ;
    public final ObjcmParser.full_expr2_return full_expr2() throws RecognitionException {
        ObjcmParser.full_expr2_return retval = new ObjcmParser.full_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA308=null;
        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2307 =null;

        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2309 =null;


        Object COMMA308_tree=null;

        try {
            // Objcm.g:570:2: ( classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* )
            // Objcm.g:570:4: classical_expr_wrp2 ( COMMA classical_expr_wrp2 )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr22845);
            classical_expr_wrp2307=classical_expr_wrp2();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp2307.getTree());

            // Objcm.g:570:24: ( COMMA classical_expr_wrp2 )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==COMMA) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // Objcm.g:570:25: COMMA classical_expr_wrp2
            	    {
            	    COMMA308=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr22848); 
            	    COMMA308_tree = 
            	    (Object)adaptor.create(COMMA308)
            	    ;
            	    adaptor.addChild(root_0, COMMA308_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr22850);
            	    classical_expr_wrp2309=classical_expr_wrp2();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp2309.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr2"


    public static class expr_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign_wrapper"
    // Objcm.g:572:1: expr_assign_wrapper : expr_assign -> ^( EXPR_ASSIGN expr_assign ) ;
    public final ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper() throws RecognitionException {
        ObjcmParser.expr_assign_wrapper_return retval = new ObjcmParser.expr_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_assign_return expr_assign310 =null;


        RewriteRuleSubtreeStream stream_expr_assign=new RewriteRuleSubtreeStream(adaptor,"rule expr_assign");
        try {
            // Objcm.g:573:2: ( expr_assign -> ^( EXPR_ASSIGN expr_assign ) )
            // Objcm.g:573:4: expr_assign
            {
            pushFollow(FOLLOW_expr_assign_in_expr_assign_wrapper2861);
            expr_assign310=expr_assign();

            state._fsp--;

            stream_expr_assign.add(expr_assign310.getTree());

            // AST REWRITE
            // elements: expr_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 573:16: -> ^( EXPR_ASSIGN expr_assign )
            {
                // Objcm.g:573:19: ^( EXPR_ASSIGN expr_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ASSIGN, "EXPR_ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_expr_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign_wrapper"


    public static class expr_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign"
    // Objcm.g:575:1: expr_assign : assign_wrapper ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) ) ;
    public final ObjcmParser.expr_assign_return expr_assign() throws RecognitionException {
        ObjcmParser.expr_assign_return retval = new ObjcmParser.expr_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_wrapper_return assign_wrapper311 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp312 =null;

        ObjcmParser.array_init_return array_init313 =null;

        ObjcmParser.func_pointer2_return func_pointer2314 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper315 =null;



        try {
            // Objcm.g:576:2: ( assign_wrapper ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) ) )
            // Objcm.g:576:4: assign_wrapper ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_assign_wrapper_in_expr_assign2880);
            assign_wrapper311=assign_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, assign_wrapper311.getTree());

            // Objcm.g:576:19: ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) )
            int alt76=3;
            alt76 = dfa76.predict(input);
            switch (alt76) {
                case 1 :
                    // Objcm.g:576:20: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_expr_assign2883);
                    classical_expr_wrp312=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp312.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:576:41: array_init
                    {
                    pushFollow(FOLLOW_array_init_in_expr_assign2887);
                    array_init313=array_init();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init313.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:576:54: ( func_pointer2 ( method_call_wrapper )? )
                    {
                    // Objcm.g:576:54: ( func_pointer2 ( method_call_wrapper )? )
                    // Objcm.g:576:55: func_pointer2 ( method_call_wrapper )?
                    {
                    pushFollow(FOLLOW_func_pointer2_in_expr_assign2892);
                    func_pointer2314=func_pointer2();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer2314.getTree());

                    // Objcm.g:576:69: ( method_call_wrapper )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==L_KBR) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // Objcm.g:576:69: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_expr_assign2894);
                            method_call_wrapper315=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper315.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // Objcm.g:578:1: array_init : L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR ;
    public final ObjcmParser.array_init_return array_init() throws RecognitionException {
        ObjcmParser.array_init_return retval = new ObjcmParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR316=null;
        Token COMMA318=null;
        Token R_FBR320=null;
        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3317 =null;

        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3319 =null;


        Object L_FBR316_tree=null;
        Object COMMA318_tree=null;
        Object R_FBR320_tree=null;

        try {
            // Objcm.g:579:2: ( L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR )
            // Objcm.g:579:4: L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR316=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array_init2907); 
            L_FBR316_tree = 
            (Object)adaptor.create(L_FBR316)
            ;
            adaptor.addChild(root_0, L_FBR316_tree);


            // Objcm.g:579:10: ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==ASTERISK||LA78_0==ID||LA78_0==L_AND||LA78_0==L_BR||(LA78_0 >= L_FBR && LA78_0 <= L_KBR)||LA78_0==L_MINUS||LA78_0==L_MINUS_MINUS||LA78_0==L_NOT||LA78_0==L_PLUS||LA78_0==L_PLUS_PLUS||LA78_0==L_TILDA||LA78_0==NUMBER||LA78_0==SIZEOF||(LA78_0 >= STRING_LITERAL && LA78_0 <= STRING_LITERAL3)||LA78_0==161||LA78_0==167||LA78_0==169||LA78_0==173||LA78_0==184||LA78_0==186||LA78_0==191) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // Objcm.g:579:11: classical_expr_wrp3 ( COMMA classical_expr_wrp3 )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init2910);
                    classical_expr_wrp3317=classical_expr_wrp3();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp3317.getTree());

                    // Objcm.g:579:31: ( COMMA classical_expr_wrp3 )*
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( (LA77_0==COMMA) ) {
                            alt77=1;
                        }


                        switch (alt77) {
                    	case 1 :
                    	    // Objcm.g:579:32: COMMA classical_expr_wrp3
                    	    {
                    	    COMMA318=(Token)match(input,COMMA,FOLLOW_COMMA_in_array_init2913); 
                    	    COMMA318_tree = 
                    	    (Object)adaptor.create(COMMA318)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA318_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init2915);
                    	    classical_expr_wrp3319=classical_expr_wrp3();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp3319.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop77;
                        }
                    } while (true);


                    }
                    break;

            }


            R_FBR320=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array_init2921); 
            R_FBR320_tree = 
            (Object)adaptor.create(R_FBR320)
            ;
            adaptor.addChild(root_0, R_FBR320_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class classical_expr_wrp3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp3"
    // Objcm.g:582:1: classical_expr_wrp3 : ( array_init | classical_expr_wrp );
    public final ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3() throws RecognitionException {
        ObjcmParser.classical_expr_wrp3_return retval = new ObjcmParser.classical_expr_wrp3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.array_init_return array_init321 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp322 =null;



        try {
            // Objcm.g:583:2: ( array_init | classical_expr_wrp )
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==L_FBR) ) {
                alt79=1;
            }
            else if ( (LA79_0==ASTERISK||LA79_0==ID||LA79_0==L_AND||LA79_0==L_BR||LA79_0==L_KBR||LA79_0==L_MINUS||LA79_0==L_MINUS_MINUS||LA79_0==L_NOT||LA79_0==L_PLUS||LA79_0==L_PLUS_PLUS||LA79_0==L_TILDA||LA79_0==NUMBER||LA79_0==SIZEOF||(LA79_0 >= STRING_LITERAL && LA79_0 <= STRING_LITERAL3)||LA79_0==161||LA79_0==167||LA79_0==169||LA79_0==173||LA79_0==184||LA79_0==186||LA79_0==191) ) {
                alt79=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }
            switch (alt79) {
                case 1 :
                    // Objcm.g:583:4: array_init
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_init_in_classical_expr_wrp32933);
                    array_init321=array_init();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init321.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:584:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_classical_expr_wrp32939);
                    classical_expr_wrp322=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp322.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp3"


    public static class classical_expr_wrp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp"
    // Objcm.g:587:1: classical_expr_wrp : classical_expr -> ^( CLASSICAL_EXPR classical_expr ) ;
    public final ObjcmParser.classical_expr_wrp_return classical_expr_wrp() throws RecognitionException {
        ObjcmParser.classical_expr_wrp_return retval = new ObjcmParser.classical_expr_wrp_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_return classical_expr323 =null;


        RewriteRuleSubtreeStream stream_classical_expr=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr");
        try {
            // Objcm.g:588:2: ( classical_expr -> ^( CLASSICAL_EXPR classical_expr ) )
            // Objcm.g:588:4: classical_expr
            {
            pushFollow(FOLLOW_classical_expr_in_classical_expr_wrp2952);
            classical_expr323=classical_expr();

            state._fsp--;

            stream_classical_expr.add(classical_expr323.getTree());

            // AST REWRITE
            // elements: classical_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 588:19: -> ^( CLASSICAL_EXPR classical_expr )
            {
                // Objcm.g:588:22: ^( CLASSICAL_EXPR classical_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR, "CLASSICAL_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp"


    public static class classical_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr"
    // Objcm.g:590:1: classical_expr : simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr_return classical_expr() throws RecognitionException {
        ObjcmParser.classical_expr_return retval = new ObjcmParser.classical_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper324 =null;

        ObjcmParser.expr_question_wrapper_return expr_question_wrapper325 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper326 =null;



        try {
            // Objcm.g:591:2: ( simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? )
            // Objcm.g:591:4: simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_simple_expr_wrapper_in_classical_expr2969);
            simple_expr_wrapper324=simple_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, simple_expr_wrapper324.getTree());

            // Objcm.g:591:24: ( expr_question_wrapper | expr_assign_wrapper )?
            int alt80=3;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==L_QUESTION) ) {
                alt80=1;
            }
            else if ( (LA80_0==L_AND_EQ||(LA80_0 >= L_DIV_EQ && LA80_0 <= L_EQ)||LA80_0==L_LEFT_EQ||LA80_0==L_MINUS_EQ||LA80_0==L_MULT_EQ||LA80_0==L_OR_EQ||LA80_0==L_PERC_EQ||LA80_0==L_PLUS_EQ||LA80_0==L_RIGHT_EQ||LA80_0==L_XOR_EQ) ) {
                alt80=2;
            }
            switch (alt80) {
                case 1 :
                    // Objcm.g:591:25: expr_question_wrapper
                    {
                    pushFollow(FOLLOW_expr_question_wrapper_in_classical_expr2972);
                    expr_question_wrapper325=expr_question_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_question_wrapper325.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:591:49: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr2976);
                    expr_assign_wrapper326=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper326.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr"


    public static class classical_expr_wrp2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp2"
    // Objcm.g:593:1: classical_expr_wrp2 : classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) ;
    public final ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2() throws RecognitionException {
        ObjcmParser.classical_expr_wrp2_return retval = new ObjcmParser.classical_expr_wrp2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr2_return classical_expr2327 =null;


        RewriteRuleSubtreeStream stream_classical_expr2=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr2");
        try {
            // Objcm.g:594:2: ( classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) )
            // Objcm.g:594:4: classical_expr2
            {
            pushFollow(FOLLOW_classical_expr2_in_classical_expr_wrp22988);
            classical_expr2327=classical_expr2();

            state._fsp--;

            stream_classical_expr2.add(classical_expr2327.getTree());

            // AST REWRITE
            // elements: classical_expr2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 594:20: -> ^( CLASSICAL_EXPR_2 classical_expr2 )
            {
                // Objcm.g:594:23: ^( CLASSICAL_EXPR_2 classical_expr2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR_2, "CLASSICAL_EXPR_2")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp2"


    public static class classical_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr2"
    // Objcm.g:596:1: classical_expr2 : ( object_name | func_pointer1 ) ( expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr2_return classical_expr2() throws RecognitionException {
        ObjcmParser.classical_expr2_return retval = new ObjcmParser.classical_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_name_return object_name328 =null;

        ObjcmParser.func_pointer1_return func_pointer1329 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper330 =null;



        try {
            // Objcm.g:597:2: ( ( object_name | func_pointer1 ) ( expr_assign_wrapper )? )
            // Objcm.g:597:4: ( object_name | func_pointer1 ) ( expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:597:4: ( object_name | func_pointer1 )
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    // Objcm.g:597:5: object_name
                    {
                    pushFollow(FOLLOW_object_name_in_classical_expr23006);
                    object_name328=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name328.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:597:19: func_pointer1
                    {
                    pushFollow(FOLLOW_func_pointer1_in_classical_expr23010);
                    func_pointer1329=func_pointer1();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer1329.getTree());

                    }
                    break;

            }


            // Objcm.g:597:34: ( expr_assign_wrapper )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==L_AND_EQ||(LA82_0 >= L_DIV_EQ && LA82_0 <= L_EQ)||LA82_0==L_LEFT_EQ||LA82_0==L_MINUS_EQ||LA82_0==L_MULT_EQ||LA82_0==L_OR_EQ||LA82_0==L_PERC_EQ||LA82_0==L_PLUS_EQ||LA82_0==L_RIGHT_EQ||LA82_0==L_XOR_EQ) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // Objcm.g:597:34: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr23013);
                    expr_assign_wrapper330=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper330.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr2"


    public static class expr_question_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question_wrapper"
    // Objcm.g:599:1: expr_question_wrapper : expr_question -> ^( EXPR_QUESTION expr_question ) ;
    public final ObjcmParser.expr_question_wrapper_return expr_question_wrapper() throws RecognitionException {
        ObjcmParser.expr_question_wrapper_return retval = new ObjcmParser.expr_question_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_question_return expr_question331 =null;


        RewriteRuleSubtreeStream stream_expr_question=new RewriteRuleSubtreeStream(adaptor,"rule expr_question");
        try {
            // Objcm.g:600:2: ( expr_question -> ^( EXPR_QUESTION expr_question ) )
            // Objcm.g:600:4: expr_question
            {
            pushFollow(FOLLOW_expr_question_in_expr_question_wrapper3023);
            expr_question331=expr_question();

            state._fsp--;

            stream_expr_question.add(expr_question331.getTree());

            // AST REWRITE
            // elements: expr_question
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 600:18: -> ^( EXPR_QUESTION expr_question )
            {
                // Objcm.g:600:21: ^( EXPR_QUESTION expr_question )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_QUESTION, "EXPR_QUESTION")
                , root_1);

                adaptor.addChild(root_1, stream_expr_question.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question_wrapper"


    public static class expr_question_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question"
    // Objcm.g:602:1: expr_question : L_QUESTION classical_expr_wrp COLON classical_expr_wrp ;
    public final ObjcmParser.expr_question_return expr_question() throws RecognitionException {
        ObjcmParser.expr_question_return retval = new ObjcmParser.expr_question_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_QUESTION332=null;
        Token COLON334=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp333 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp335 =null;


        Object L_QUESTION332_tree=null;
        Object COLON334_tree=null;

        try {
            // Objcm.g:603:2: ( L_QUESTION classical_expr_wrp COLON classical_expr_wrp )
            // Objcm.g:603:4: L_QUESTION classical_expr_wrp COLON classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            L_QUESTION332=(Token)match(input,L_QUESTION,FOLLOW_L_QUESTION_in_expr_question3040); 
            L_QUESTION332_tree = 
            (Object)adaptor.create(L_QUESTION332)
            ;
            adaptor.addChild(root_0, L_QUESTION332_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question3042);
            classical_expr_wrp333=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp333.getTree());

            COLON334=(Token)match(input,COLON,FOLLOW_COLON_in_expr_question3044); 
            COLON334_tree = 
            (Object)adaptor.create(COLON334)
            ;
            adaptor.addChild(root_0, COLON334_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question3046);
            classical_expr_wrp335=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp335.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question"


    public static class assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign_wrapper"
    // Objcm.g:605:1: assign_wrapper : assign -> ^( ASSIGN assign ) ;
    public final ObjcmParser.assign_wrapper_return assign_wrapper() throws RecognitionException {
        ObjcmParser.assign_wrapper_return retval = new ObjcmParser.assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_return assign336 =null;


        RewriteRuleSubtreeStream stream_assign=new RewriteRuleSubtreeStream(adaptor,"rule assign");
        try {
            // Objcm.g:606:2: ( assign -> ^( ASSIGN assign ) )
            // Objcm.g:606:4: assign
            {
            pushFollow(FOLLOW_assign_in_assign_wrapper3055);
            assign336=assign();

            state._fsp--;

            stream_assign.add(assign336.getTree());

            // AST REWRITE
            // elements: assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 606:11: -> ^( ASSIGN assign )
            {
                // Objcm.g:606:14: ^( ASSIGN assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ASSIGN, "ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign_wrapper"


    public static class assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign"
    // Objcm.g:608:1: assign : ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ );
    public final ObjcmParser.assign_return assign() throws RecognitionException {
        ObjcmParser.assign_return retval = new ObjcmParser.assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set337=null;

        Object set337_tree=null;

        try {
            // Objcm.g:609:2: ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set337=(Token)input.LT(1);

            if ( input.LA(1)==L_AND_EQ||(input.LA(1) >= L_DIV_EQ && input.LA(1) <= L_EQ)||input.LA(1)==L_LEFT_EQ||input.LA(1)==L_MINUS_EQ||input.LA(1)==L_MULT_EQ||input.LA(1)==L_OR_EQ||input.LA(1)==L_PERC_EQ||input.LA(1)==L_PLUS_EQ||input.LA(1)==L_RIGHT_EQ||input.LA(1)==L_XOR_EQ ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set337)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign"


    public static class simple_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr_wrapper"
    // Objcm.g:613:1: simple_expr_wrapper : simple_expr -> ^( SIMPLE_EXPR simple_expr ) ;
    public final ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper() throws RecognitionException {
        ObjcmParser.simple_expr_wrapper_return retval = new ObjcmParser.simple_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_return simple_expr338 =null;


        RewriteRuleSubtreeStream stream_simple_expr=new RewriteRuleSubtreeStream(adaptor,"rule simple_expr");
        try {
            // Objcm.g:614:2: ( simple_expr -> ^( SIMPLE_EXPR simple_expr ) )
            // Objcm.g:614:4: simple_expr
            {
            pushFollow(FOLLOW_simple_expr_in_simple_expr_wrapper3128);
            simple_expr338=simple_expr();

            state._fsp--;

            stream_simple_expr.add(simple_expr338.getTree());

            // AST REWRITE
            // elements: simple_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 614:16: -> ^( SIMPLE_EXPR simple_expr )
            {
                // Objcm.g:614:19: ^( SIMPLE_EXPR simple_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SIMPLE_EXPR, "SIMPLE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr_wrapper"


    public static class simple_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr"
    // Objcm.g:616:1: simple_expr : expr_or_or -> ^( EXPR_OR_OR expr_or_or ) ;
    public final ObjcmParser.simple_expr_return simple_expr() throws RecognitionException {
        ObjcmParser.simple_expr_return retval = new ObjcmParser.simple_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_or_return expr_or_or339 =null;


        RewriteRuleSubtreeStream stream_expr_or_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or_or");
        try {
            // Objcm.g:617:2: ( expr_or_or -> ^( EXPR_OR_OR expr_or_or ) )
            // Objcm.g:617:4: expr_or_or
            {
            pushFollow(FOLLOW_expr_or_or_in_simple_expr3146);
            expr_or_or339=expr_or_or();

            state._fsp--;

            stream_expr_or_or.add(expr_or_or339.getTree());

            // AST REWRITE
            // elements: expr_or_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 617:15: -> ^( EXPR_OR_OR expr_or_or )
            {
                // Objcm.g:617:18: ^( EXPR_OR_OR expr_or_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR_OR, "EXPR_OR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr"


    public static class expr_or_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_or"
    // Objcm.g:619:1: expr_or_or : expr_and_and_wrapper ( L_OR_OR classical_expr_wrp )* ;
    public final ObjcmParser.expr_or_or_return expr_or_or() throws RecognitionException {
        ObjcmParser.expr_or_or_return retval = new ObjcmParser.expr_or_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR_OR341=null;
        ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper340 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp342 =null;


        Object L_OR_OR341_tree=null;

        try {
            // Objcm.g:620:2: ( expr_and_and_wrapper ( L_OR_OR classical_expr_wrp )* )
            // Objcm.g:620:4: expr_and_and_wrapper ( L_OR_OR classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_and_wrapper_in_expr_or_or3163);
            expr_and_and_wrapper340=expr_and_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_and_wrapper340.getTree());

            // Objcm.g:620:25: ( L_OR_OR classical_expr_wrp )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==L_OR_OR) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // Objcm.g:620:26: L_OR_OR classical_expr_wrp
            	    {
            	    L_OR_OR341=(Token)match(input,L_OR_OR,FOLLOW_L_OR_OR_in_expr_or_or3166); 
            	    L_OR_OR341_tree = 
            	    (Object)adaptor.create(L_OR_OR341)
            	    ;
            	    adaptor.addChild(root_0, L_OR_OR341_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_or_or3168);
            	    classical_expr_wrp342=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp342.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_or"


    public static class expr_and_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and_wrapper"
    // Objcm.g:622:1: expr_and_and_wrapper : expr_and_and -> ^( EXPR_AND_AND expr_and_and ) ;
    public final ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_and_wrapper_return retval = new ObjcmParser.expr_and_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_and_return expr_and_and343 =null;


        RewriteRuleSubtreeStream stream_expr_and_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and_and");
        try {
            // Objcm.g:623:2: ( expr_and_and -> ^( EXPR_AND_AND expr_and_and ) )
            // Objcm.g:623:4: expr_and_and
            {
            pushFollow(FOLLOW_expr_and_and_in_expr_and_and_wrapper3179);
            expr_and_and343=expr_and_and();

            state._fsp--;

            stream_expr_and_and.add(expr_and_and343.getTree());

            // AST REWRITE
            // elements: expr_and_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 623:17: -> ^( EXPR_AND_AND expr_and_and )
            {
                // Objcm.g:623:20: ^( EXPR_AND_AND expr_and_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND_AND, "EXPR_AND_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and_wrapper"


    public static class expr_and_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and"
    // Objcm.g:625:1: expr_and_and : expr_or_wrapper ( L_AND_AND classical_expr_wrp )* ;
    public final ObjcmParser.expr_and_and_return expr_and_and() throws RecognitionException {
        ObjcmParser.expr_and_and_return retval = new ObjcmParser.expr_and_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND_AND345=null;
        ObjcmParser.expr_or_wrapper_return expr_or_wrapper344 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp346 =null;


        Object L_AND_AND345_tree=null;

        try {
            // Objcm.g:626:2: ( expr_or_wrapper ( L_AND_AND classical_expr_wrp )* )
            // Objcm.g:626:4: expr_or_wrapper ( L_AND_AND classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_or_wrapper_in_expr_and_and3196);
            expr_or_wrapper344=expr_or_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_or_wrapper344.getTree());

            // Objcm.g:626:20: ( L_AND_AND classical_expr_wrp )*
            loop84:
            do {
                int alt84=2;
                int LA84_0 = input.LA(1);

                if ( (LA84_0==L_AND_AND) ) {
                    alt84=1;
                }


                switch (alt84) {
            	case 1 :
            	    // Objcm.g:626:21: L_AND_AND classical_expr_wrp
            	    {
            	    L_AND_AND345=(Token)match(input,L_AND_AND,FOLLOW_L_AND_AND_in_expr_and_and3199); 
            	    L_AND_AND345_tree = 
            	    (Object)adaptor.create(L_AND_AND345)
            	    ;
            	    adaptor.addChild(root_0, L_AND_AND345_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_and_and3201);
            	    classical_expr_wrp346=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp346.getTree());

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and"


    public static class expr_or_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_wrapper"
    // Objcm.g:628:1: expr_or_wrapper : expr_or -> ^( EXPR_OR expr_or ) ;
    public final ObjcmParser.expr_or_wrapper_return expr_or_wrapper() throws RecognitionException {
        ObjcmParser.expr_or_wrapper_return retval = new ObjcmParser.expr_or_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_return expr_or347 =null;


        RewriteRuleSubtreeStream stream_expr_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or");
        try {
            // Objcm.g:629:2: ( expr_or -> ^( EXPR_OR expr_or ) )
            // Objcm.g:629:4: expr_or
            {
            pushFollow(FOLLOW_expr_or_in_expr_or_wrapper3212);
            expr_or347=expr_or();

            state._fsp--;

            stream_expr_or.add(expr_or347.getTree());

            // AST REWRITE
            // elements: expr_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 629:12: -> ^( EXPR_OR expr_or )
            {
                // Objcm.g:629:15: ^( EXPR_OR expr_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR, "EXPR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_wrapper"


    public static class expr_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or"
    // Objcm.g:631:1: expr_or : expr_xor_wrapper ( L_OR classical_expr_wrp )* ;
    public final ObjcmParser.expr_or_return expr_or() throws RecognitionException {
        ObjcmParser.expr_or_return retval = new ObjcmParser.expr_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR349=null;
        ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper348 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp350 =null;


        Object L_OR349_tree=null;

        try {
            // Objcm.g:632:2: ( expr_xor_wrapper ( L_OR classical_expr_wrp )* )
            // Objcm.g:632:4: expr_xor_wrapper ( L_OR classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_xor_wrapper_in_expr_or3230);
            expr_xor_wrapper348=expr_xor_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_xor_wrapper348.getTree());

            // Objcm.g:632:21: ( L_OR classical_expr_wrp )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==L_OR) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // Objcm.g:632:22: L_OR classical_expr_wrp
            	    {
            	    L_OR349=(Token)match(input,L_OR,FOLLOW_L_OR_in_expr_or3233); 
            	    L_OR349_tree = 
            	    (Object)adaptor.create(L_OR349)
            	    ;
            	    adaptor.addChild(root_0, L_OR349_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_or3235);
            	    classical_expr_wrp350=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp350.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or"


    public static class expr_xor_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor_wrapper"
    // Objcm.g:634:1: expr_xor_wrapper : expr_xor -> ^( EXPR_XOR expr_xor ) ;
    public final ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper() throws RecognitionException {
        ObjcmParser.expr_xor_wrapper_return retval = new ObjcmParser.expr_xor_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_xor_return expr_xor351 =null;


        RewriteRuleSubtreeStream stream_expr_xor=new RewriteRuleSubtreeStream(adaptor,"rule expr_xor");
        try {
            // Objcm.g:635:2: ( expr_xor -> ^( EXPR_XOR expr_xor ) )
            // Objcm.g:635:4: expr_xor
            {
            pushFollow(FOLLOW_expr_xor_in_expr_xor_wrapper3246);
            expr_xor351=expr_xor();

            state._fsp--;

            stream_expr_xor.add(expr_xor351.getTree());

            // AST REWRITE
            // elements: expr_xor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 635:13: -> ^( EXPR_XOR expr_xor )
            {
                // Objcm.g:635:16: ^( EXPR_XOR expr_xor )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_XOR, "EXPR_XOR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_xor.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor_wrapper"


    public static class expr_xor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor"
    // Objcm.g:637:1: expr_xor : expr_and_wrapper ( L_XOR classical_expr_wrp )* ;
    public final ObjcmParser.expr_xor_return expr_xor() throws RecognitionException {
        ObjcmParser.expr_xor_return retval = new ObjcmParser.expr_xor_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_XOR353=null;
        ObjcmParser.expr_and_wrapper_return expr_and_wrapper352 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp354 =null;


        Object L_XOR353_tree=null;

        try {
            // Objcm.g:638:2: ( expr_and_wrapper ( L_XOR classical_expr_wrp )* )
            // Objcm.g:638:4: expr_and_wrapper ( L_XOR classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_wrapper_in_expr_xor3263);
            expr_and_wrapper352=expr_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_wrapper352.getTree());

            // Objcm.g:638:21: ( L_XOR classical_expr_wrp )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==L_XOR) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // Objcm.g:638:22: L_XOR classical_expr_wrp
            	    {
            	    L_XOR353=(Token)match(input,L_XOR,FOLLOW_L_XOR_in_expr_xor3266); 
            	    L_XOR353_tree = 
            	    (Object)adaptor.create(L_XOR353)
            	    ;
            	    adaptor.addChild(root_0, L_XOR353_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_xor3268);
            	    classical_expr_wrp354=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp354.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor"


    public static class expr_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_wrapper"
    // Objcm.g:640:1: expr_and_wrapper : expr_and -> ^( EXPR_AND expr_and ) ;
    public final ObjcmParser.expr_and_wrapper_return expr_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_wrapper_return retval = new ObjcmParser.expr_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_return expr_and355 =null;


        RewriteRuleSubtreeStream stream_expr_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and");
        try {
            // Objcm.g:641:2: ( expr_and -> ^( EXPR_AND expr_and ) )
            // Objcm.g:641:4: expr_and
            {
            pushFollow(FOLLOW_expr_and_in_expr_and_wrapper3280);
            expr_and355=expr_and();

            state._fsp--;

            stream_expr_and.add(expr_and355.getTree());

            // AST REWRITE
            // elements: expr_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 641:13: -> ^( EXPR_AND expr_and )
            {
                // Objcm.g:641:16: ^( EXPR_AND expr_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND, "EXPR_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_wrapper"


    public static class expr_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and"
    // Objcm.g:643:1: expr_and : expr_eq_wrapper ( L_AND classical_expr_wrp )* ;
    public final ObjcmParser.expr_and_return expr_and() throws RecognitionException {
        ObjcmParser.expr_and_return retval = new ObjcmParser.expr_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND357=null;
        ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper356 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp358 =null;


        Object L_AND357_tree=null;

        try {
            // Objcm.g:644:2: ( expr_eq_wrapper ( L_AND classical_expr_wrp )* )
            // Objcm.g:644:4: expr_eq_wrapper ( L_AND classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_eq_wrapper_in_expr_and3298);
            expr_eq_wrapper356=expr_eq_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_eq_wrapper356.getTree());

            // Objcm.g:644:20: ( L_AND classical_expr_wrp )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==L_AND) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // Objcm.g:644:21: L_AND classical_expr_wrp
            	    {
            	    L_AND357=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_and3301); 
            	    L_AND357_tree = 
            	    (Object)adaptor.create(L_AND357)
            	    ;
            	    adaptor.addChild(root_0, L_AND357_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_and3303);
            	    classical_expr_wrp358=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp358.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and"


    public static class expr_eq_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq_wrapper"
    // Objcm.g:646:1: expr_eq_wrapper : expr_eq -> ^( EXPR_EQ expr_eq ) ;
    public final ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper() throws RecognitionException {
        ObjcmParser.expr_eq_wrapper_return retval = new ObjcmParser.expr_eq_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_eq_return expr_eq359 =null;


        RewriteRuleSubtreeStream stream_expr_eq=new RewriteRuleSubtreeStream(adaptor,"rule expr_eq");
        try {
            // Objcm.g:647:2: ( expr_eq -> ^( EXPR_EQ expr_eq ) )
            // Objcm.g:647:4: expr_eq
            {
            pushFollow(FOLLOW_expr_eq_in_expr_eq_wrapper3315);
            expr_eq359=expr_eq();

            state._fsp--;

            stream_expr_eq.add(expr_eq359.getTree());

            // AST REWRITE
            // elements: expr_eq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 647:12: -> ^( EXPR_EQ expr_eq )
            {
                // Objcm.g:647:15: ^( EXPR_EQ expr_eq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_EQ, "EXPR_EQ")
                , root_1);

                adaptor.addChild(root_1, stream_expr_eq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq_wrapper"


    public static class expr_eq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq"
    // Objcm.g:649:1: expr_eq : expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_eq_return expr_eq() throws RecognitionException {
        ObjcmParser.expr_eq_return retval = new ObjcmParser.expr_eq_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set361=null;
        ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper360 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp362 =null;


        Object set361_tree=null;

        try {
            // Objcm.g:650:2: ( expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) classical_expr_wrp )* )
            // Objcm.g:650:4: expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_cond_wrapper_in_expr_eq3333);
            expr_cond_wrapper360=expr_cond_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_cond_wrapper360.getTree());

            // Objcm.g:650:22: ( ( L_EQ_EQ | L_NEQ ) classical_expr_wrp )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==L_EQ_EQ||LA88_0==L_NEQ) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // Objcm.g:650:23: ( L_EQ_EQ | L_NEQ ) classical_expr_wrp
            	    {
            	    set361=(Token)input.LT(1);

            	    if ( input.LA(1)==L_EQ_EQ||input.LA(1)==L_NEQ ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set361)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_eq3344);
            	    classical_expr_wrp362=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp362.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq"


    public static class expr_cond_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond_wrapper"
    // Objcm.g:652:1: expr_cond_wrapper : expr_cond -> ^( EXPR_COND expr_cond ) ;
    public final ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper() throws RecognitionException {
        ObjcmParser.expr_cond_wrapper_return retval = new ObjcmParser.expr_cond_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_cond_return expr_cond363 =null;


        RewriteRuleSubtreeStream stream_expr_cond=new RewriteRuleSubtreeStream(adaptor,"rule expr_cond");
        try {
            // Objcm.g:653:2: ( expr_cond -> ^( EXPR_COND expr_cond ) )
            // Objcm.g:653:4: expr_cond
            {
            pushFollow(FOLLOW_expr_cond_in_expr_cond_wrapper3355);
            expr_cond363=expr_cond();

            state._fsp--;

            stream_expr_cond.add(expr_cond363.getTree());

            // AST REWRITE
            // elements: expr_cond
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 653:14: -> ^( EXPR_COND expr_cond )
            {
                // Objcm.g:653:17: ^( EXPR_COND expr_cond )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_COND, "EXPR_COND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_cond.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond_wrapper"


    public static class expr_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond"
    // Objcm.g:655:1: expr_cond : expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_cond_return expr_cond() throws RecognitionException {
        ObjcmParser.expr_cond_return retval = new ObjcmParser.expr_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set365=null;
        ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper364 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp366 =null;


        Object set365_tree=null;

        try {
            // Objcm.g:656:2: ( expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp )* )
            // Objcm.g:656:4: expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mov_wrapper_in_expr_cond3372);
            expr_mov_wrapper364=expr_mov_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mov_wrapper364.getTree());

            // Objcm.g:656:21: ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( ((LA89_0 >= L_LESS && LA89_0 <= L_LESS_EQ)||(LA89_0 >= L_MORE && LA89_0 <= L_MORE_EQ)) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // Objcm.g:656:22: ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) classical_expr_wrp
            	    {
            	    set365=(Token)input.LT(1);

            	    if ( (input.LA(1) >= L_LESS && input.LA(1) <= L_LESS_EQ)||(input.LA(1) >= L_MORE && input.LA(1) <= L_MORE_EQ) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set365)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_cond3391);
            	    classical_expr_wrp366=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp366.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond"


    public static class expr_mov_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov_wrapper"
    // Objcm.g:658:1: expr_mov_wrapper : expr_mov -> ^( EXPR_MOV expr_mov ) ;
    public final ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper() throws RecognitionException {
        ObjcmParser.expr_mov_wrapper_return retval = new ObjcmParser.expr_mov_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mov_return expr_mov367 =null;


        RewriteRuleSubtreeStream stream_expr_mov=new RewriteRuleSubtreeStream(adaptor,"rule expr_mov");
        try {
            // Objcm.g:659:2: ( expr_mov -> ^( EXPR_MOV expr_mov ) )
            // Objcm.g:659:4: expr_mov
            {
            pushFollow(FOLLOW_expr_mov_in_expr_mov_wrapper3402);
            expr_mov367=expr_mov();

            state._fsp--;

            stream_expr_mov.add(expr_mov367.getTree());

            // AST REWRITE
            // elements: expr_mov
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 659:13: -> ^( EXPR_MOV expr_mov )
            {
                // Objcm.g:659:16: ^( EXPR_MOV expr_mov )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MOV, "EXPR_MOV")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mov.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov_wrapper"


    public static class expr_mov_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov"
    // Objcm.g:661:1: expr_mov : expr_add_wrapper ( ( L_LEFT | L_RIGHT ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_mov_return expr_mov() throws RecognitionException {
        ObjcmParser.expr_mov_return retval = new ObjcmParser.expr_mov_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set369=null;
        ObjcmParser.expr_add_wrapper_return expr_add_wrapper368 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp370 =null;


        Object set369_tree=null;

        try {
            // Objcm.g:662:2: ( expr_add_wrapper ( ( L_LEFT | L_RIGHT ) classical_expr_wrp )* )
            // Objcm.g:662:4: expr_add_wrapper ( ( L_LEFT | L_RIGHT ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_add_wrapper_in_expr_mov3420);
            expr_add_wrapper368=expr_add_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_add_wrapper368.getTree());

            // Objcm.g:662:21: ( ( L_LEFT | L_RIGHT ) classical_expr_wrp )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==L_LEFT||LA90_0==L_RIGHT) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // Objcm.g:662:22: ( L_LEFT | L_RIGHT ) classical_expr_wrp
            	    {
            	    set369=(Token)input.LT(1);

            	    if ( input.LA(1)==L_LEFT||input.LA(1)==L_RIGHT ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set369)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_mov3431);
            	    classical_expr_wrp370=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp370.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov"


    public static class expr_add_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add_wrapper"
    // Objcm.g:664:1: expr_add_wrapper : expr_add -> ^( EXPR_ADD expr_add ) ;
    public final ObjcmParser.expr_add_wrapper_return expr_add_wrapper() throws RecognitionException {
        ObjcmParser.expr_add_wrapper_return retval = new ObjcmParser.expr_add_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_add_return expr_add371 =null;


        RewriteRuleSubtreeStream stream_expr_add=new RewriteRuleSubtreeStream(adaptor,"rule expr_add");
        try {
            // Objcm.g:665:2: ( expr_add -> ^( EXPR_ADD expr_add ) )
            // Objcm.g:665:4: expr_add
            {
            pushFollow(FOLLOW_expr_add_in_expr_add_wrapper3443);
            expr_add371=expr_add();

            state._fsp--;

            stream_expr_add.add(expr_add371.getTree());

            // AST REWRITE
            // elements: expr_add
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 665:13: -> ^( EXPR_ADD expr_add )
            {
                // Objcm.g:665:16: ^( EXPR_ADD expr_add )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ADD, "EXPR_ADD")
                , root_1);

                adaptor.addChild(root_1, stream_expr_add.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add_wrapper"


    public static class expr_add_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add"
    // Objcm.g:667:1: expr_add : expr_mult_wrapper ( ( L_PLUS | L_MINUS ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_add_return expr_add() throws RecognitionException {
        ObjcmParser.expr_add_return retval = new ObjcmParser.expr_add_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set373=null;
        ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper372 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp374 =null;


        Object set373_tree=null;

        try {
            // Objcm.g:668:2: ( expr_mult_wrapper ( ( L_PLUS | L_MINUS ) classical_expr_wrp )* )
            // Objcm.g:668:4: expr_mult_wrapper ( ( L_PLUS | L_MINUS ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mult_wrapper_in_expr_add3460);
            expr_mult_wrapper372=expr_mult_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mult_wrapper372.getTree());

            // Objcm.g:668:22: ( ( L_PLUS | L_MINUS ) classical_expr_wrp )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==L_MINUS||LA91_0==L_PLUS) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // Objcm.g:668:23: ( L_PLUS | L_MINUS ) classical_expr_wrp
            	    {
            	    set373=(Token)input.LT(1);

            	    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set373)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_add3471);
            	    classical_expr_wrp374=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp374.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add"


    public static class expr_mult_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult_wrapper"
    // Objcm.g:670:1: expr_mult_wrapper : expr_mult -> ^( EXPR_MULT expr_mult ) ;
    public final ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper() throws RecognitionException {
        ObjcmParser.expr_mult_wrapper_return retval = new ObjcmParser.expr_mult_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mult_return expr_mult375 =null;


        RewriteRuleSubtreeStream stream_expr_mult=new RewriteRuleSubtreeStream(adaptor,"rule expr_mult");
        try {
            // Objcm.g:671:2: ( expr_mult -> ^( EXPR_MULT expr_mult ) )
            // Objcm.g:671:4: expr_mult
            {
            pushFollow(FOLLOW_expr_mult_in_expr_mult_wrapper3482);
            expr_mult375=expr_mult();

            state._fsp--;

            stream_expr_mult.add(expr_mult375.getTree());

            // AST REWRITE
            // elements: expr_mult
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 671:14: -> ^( EXPR_MULT expr_mult )
            {
                // Objcm.g:671:17: ^( EXPR_MULT expr_mult )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MULT, "EXPR_MULT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mult.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult_wrapper"


    public static class expr_mult_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult"
    // Objcm.g:673:1: expr_mult : expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp )* ;
    public final ObjcmParser.expr_mult_return expr_mult() throws RecognitionException {
        ObjcmParser.expr_mult_return retval = new ObjcmParser.expr_mult_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set377=null;
        ObjcmParser.expr_type_wrapper_return expr_type_wrapper376 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp378 =null;


        Object set377_tree=null;

        try {
            // Objcm.g:674:2: ( expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp )* )
            // Objcm.g:674:4: expr_type_wrapper ( ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_type_wrapper_in_expr_mult3499);
            expr_type_wrapper376=expr_type_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_type_wrapper376.getTree());

            // Objcm.g:674:22: ( ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==ASTERISK||LA92_0==L_DIV||LA92_0==L_PERC) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // Objcm.g:674:23: ( ASTERISK | L_DIV | L_PERC ) classical_expr_wrp
            	    {
            	    set377=(Token)input.LT(1);

            	    if ( input.LA(1)==ASTERISK||input.LA(1)==L_DIV||input.LA(1)==L_PERC ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set377)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_classical_expr_wrp_in_expr_mult3514);
            	    classical_expr_wrp378=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp378.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult"


    public static class expr_type_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_type_wrapper"
    // Objcm.g:676:1: expr_type_wrapper : expr_type -> ^( EXPR_TYPE expr_type ) ;
    public final ObjcmParser.expr_type_wrapper_return expr_type_wrapper() throws RecognitionException {
        ObjcmParser.expr_type_wrapper_return retval = new ObjcmParser.expr_type_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_type_return expr_type379 =null;


        RewriteRuleSubtreeStream stream_expr_type=new RewriteRuleSubtreeStream(adaptor,"rule expr_type");
        try {
            // Objcm.g:677:2: ( expr_type -> ^( EXPR_TYPE expr_type ) )
            // Objcm.g:677:4: expr_type
            {
            pushFollow(FOLLOW_expr_type_in_expr_type_wrapper3526);
            expr_type379=expr_type();

            state._fsp--;

            stream_expr_type.add(expr_type379.getTree());

            // AST REWRITE
            // elements: expr_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 677:14: -> ^( EXPR_TYPE expr_type )
            {
                // Objcm.g:677:17: ^( EXPR_TYPE expr_type )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_TYPE, "EXPR_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_expr_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_type_wrapper"


    public static class expr_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_type"
    // Objcm.g:679:1: expr_type : ( type_convertion )? expr_unname ;
    public final ObjcmParser.expr_type_return expr_type() throws RecognitionException {
        ObjcmParser.expr_type_return retval = new ObjcmParser.expr_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_convertion_return type_convertion380 =null;

        ObjcmParser.expr_unname_return expr_unname381 =null;



        try {
            // Objcm.g:680:2: ( ( type_convertion )? expr_unname )
            // Objcm.g:680:4: ( type_convertion )? expr_unname
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:680:4: ( type_convertion )?
            int alt93=2;
            alt93 = dfa93.predict(input);
            switch (alt93) {
                case 1 :
                    // Objcm.g:680:4: type_convertion
                    {
                    pushFollow(FOLLOW_type_convertion_in_expr_type3543);
                    type_convertion380=type_convertion();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion380.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_expr_unname_in_expr_type3546);
            expr_unname381=expr_unname();

            state._fsp--;

            adaptor.addChild(root_0, expr_unname381.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_type"


    public static class expr_unname_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_unname"
    // Objcm.g:682:1: expr_unname : ( ASTERISK ( type_convertion )? )? expr_addr ;
    public final ObjcmParser.expr_unname_return expr_unname() throws RecognitionException {
        ObjcmParser.expr_unname_return retval = new ObjcmParser.expr_unname_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK382=null;
        ObjcmParser.type_convertion_return type_convertion383 =null;

        ObjcmParser.expr_addr_return expr_addr384 =null;


        Object ASTERISK382_tree=null;

        try {
            // Objcm.g:683:2: ( ( ASTERISK ( type_convertion )? )? expr_addr )
            // Objcm.g:683:4: ( ASTERISK ( type_convertion )? )? expr_addr
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:683:4: ( ASTERISK ( type_convertion )? )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==ASTERISK) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // Objcm.g:683:5: ASTERISK ( type_convertion )?
                    {
                    ASTERISK382=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_expr_unname3557); 
                    ASTERISK382_tree = 
                    (Object)adaptor.create(ASTERISK382)
                    ;
                    adaptor.addChild(root_0, ASTERISK382_tree);


                    // Objcm.g:683:14: ( type_convertion )?
                    int alt94=2;
                    alt94 = dfa94.predict(input);
                    switch (alt94) {
                        case 1 :
                            // Objcm.g:683:14: type_convertion
                            {
                            pushFollow(FOLLOW_type_convertion_in_expr_unname3559);
                            type_convertion383=type_convertion();

                            state._fsp--;

                            adaptor.addChild(root_0, type_convertion383.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_addr_in_expr_unname3564);
            expr_addr384=expr_addr();

            state._fsp--;

            adaptor.addChild(root_0, expr_addr384.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_unname"


    public static class expr_addr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_addr"
    // Objcm.g:685:1: expr_addr : ( L_AND )? expr_sign ;
    public final ObjcmParser.expr_addr_return expr_addr() throws RecognitionException {
        ObjcmParser.expr_addr_return retval = new ObjcmParser.expr_addr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND385=null;
        ObjcmParser.expr_sign_return expr_sign386 =null;


        Object L_AND385_tree=null;

        try {
            // Objcm.g:686:2: ( ( L_AND )? expr_sign )
            // Objcm.g:686:4: ( L_AND )? expr_sign
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:686:4: ( L_AND )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==L_AND) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // Objcm.g:686:4: L_AND
                    {
                    L_AND385=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_addr3574); 
                    L_AND385_tree = 
                    (Object)adaptor.create(L_AND385)
                    ;
                    adaptor.addChild(root_0, L_AND385_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_sign_in_expr_addr3577);
            expr_sign386=expr_sign();

            state._fsp--;

            adaptor.addChild(root_0, expr_sign386.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_addr"


    public static class expr_sign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_sign"
    // Objcm.g:688:1: expr_sign : ( L_MINUS | L_PLUS )? expr_not_wrapper ;
    public final ObjcmParser.expr_sign_return expr_sign() throws RecognitionException {
        ObjcmParser.expr_sign_return retval = new ObjcmParser.expr_sign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set387=null;
        ObjcmParser.expr_not_wrapper_return expr_not_wrapper388 =null;


        Object set387_tree=null;

        try {
            // Objcm.g:689:2: ( ( L_MINUS | L_PLUS )? expr_not_wrapper )
            // Objcm.g:689:4: ( L_MINUS | L_PLUS )? expr_not_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:689:4: ( L_MINUS | L_PLUS )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==L_MINUS||LA97_0==L_PLUS) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // Objcm.g:
                    {
                    set387=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set387)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not_wrapper_in_expr_sign3596);
            expr_not_wrapper388=expr_not_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_not_wrapper388.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_sign"


    public static class expr_not_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not_wrapper"
    // Objcm.g:691:1: expr_not_wrapper : expr_not -> ^( EXPR_NOT expr_not ) ;
    public final ObjcmParser.expr_not_wrapper_return expr_not_wrapper() throws RecognitionException {
        ObjcmParser.expr_not_wrapper_return retval = new ObjcmParser.expr_not_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_not_return expr_not389 =null;


        RewriteRuleSubtreeStream stream_expr_not=new RewriteRuleSubtreeStream(adaptor,"rule expr_not");
        try {
            // Objcm.g:692:2: ( expr_not -> ^( EXPR_NOT expr_not ) )
            // Objcm.g:692:4: expr_not
            {
            pushFollow(FOLLOW_expr_not_in_expr_not_wrapper3606);
            expr_not389=expr_not();

            state._fsp--;

            stream_expr_not.add(expr_not389.getTree());

            // AST REWRITE
            // elements: expr_not
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 692:13: -> ^( EXPR_NOT expr_not )
            {
                // Objcm.g:692:16: ^( EXPR_NOT expr_not )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_not.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not_wrapper"


    public static class expr_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not"
    // Objcm.g:694:1: expr_not : ( L_NOT )? expr_not2 ;
    public final ObjcmParser.expr_not_return expr_not() throws RecognitionException {
        ObjcmParser.expr_not_return retval = new ObjcmParser.expr_not_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_NOT390=null;
        ObjcmParser.expr_not2_return expr_not2391 =null;


        Object L_NOT390_tree=null;

        try {
            // Objcm.g:695:2: ( ( L_NOT )? expr_not2 )
            // Objcm.g:695:4: ( L_NOT )? expr_not2
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:695:4: ( L_NOT )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==L_NOT) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // Objcm.g:695:4: L_NOT
                    {
                    L_NOT390=(Token)match(input,L_NOT,FOLLOW_L_NOT_in_expr_not3625); 
                    L_NOT390_tree = 
                    (Object)adaptor.create(L_NOT390)
                    ;
                    adaptor.addChild(root_0, L_NOT390_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not2_in_expr_not3628);
            expr_not2391=expr_not2();

            state._fsp--;

            adaptor.addChild(root_0, expr_not2391.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not"


    public static class expr_not2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not2"
    // Objcm.g:697:1: expr_not2 : ( L_TILDA )? expr_size_of ;
    public final ObjcmParser.expr_not2_return expr_not2() throws RecognitionException {
        ObjcmParser.expr_not2_return retval = new ObjcmParser.expr_not2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_TILDA392=null;
        ObjcmParser.expr_size_of_return expr_size_of393 =null;


        Object L_TILDA392_tree=null;

        try {
            // Objcm.g:698:2: ( ( L_TILDA )? expr_size_of )
            // Objcm.g:698:4: ( L_TILDA )? expr_size_of
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:698:4: ( L_TILDA )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==L_TILDA) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // Objcm.g:698:4: L_TILDA
                    {
                    L_TILDA392=(Token)match(input,L_TILDA,FOLLOW_L_TILDA_in_expr_not23638); 
                    L_TILDA392_tree = 
                    (Object)adaptor.create(L_TILDA392)
                    ;
                    adaptor.addChild(root_0, L_TILDA392_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_size_of_in_expr_not23641);
            expr_size_of393=expr_size_of();

            state._fsp--;

            adaptor.addChild(root_0, expr_size_of393.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not2"


    public static class expr_size_of_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_size_of"
    // Objcm.g:700:1: expr_size_of : ( SIZEOF )? expr_xcrement ;
    public final ObjcmParser.expr_size_of_return expr_size_of() throws RecognitionException {
        ObjcmParser.expr_size_of_return retval = new ObjcmParser.expr_size_of_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SIZEOF394=null;
        ObjcmParser.expr_xcrement_return expr_xcrement395 =null;


        Object SIZEOF394_tree=null;

        try {
            // Objcm.g:701:2: ( ( SIZEOF )? expr_xcrement )
            // Objcm.g:701:4: ( SIZEOF )? expr_xcrement
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:701:4: ( SIZEOF )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==SIZEOF) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // Objcm.g:701:4: SIZEOF
                    {
                    SIZEOF394=(Token)match(input,SIZEOF,FOLLOW_SIZEOF_in_expr_size_of3651); 
                    SIZEOF394_tree = 
                    (Object)adaptor.create(SIZEOF394)
                    ;
                    adaptor.addChild(root_0, SIZEOF394_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_xcrement_in_expr_size_of3654);
            expr_xcrement395=expr_xcrement();

            state._fsp--;

            adaptor.addChild(root_0, expr_xcrement395.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_size_of"


    public static class expr_xcrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xcrement"
    // Objcm.g:703:1: expr_xcrement : ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 ;
    public final ObjcmParser.expr_xcrement_return expr_xcrement() throws RecognitionException {
        ObjcmParser.expr_xcrement_return retval = new ObjcmParser.expr_xcrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set396=null;
        ObjcmParser.object_wrapped1_return object_wrapped1397 =null;


        Object set396_tree=null;

        try {
            // Objcm.g:704:2: ( ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 )
            // Objcm.g:704:4: ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:704:4: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==L_MINUS_MINUS||LA101_0==L_PLUS_PLUS) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // Objcm.g:
                    {
                    set396=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set396)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_object_wrapped1_in_expr_xcrement3673);
            object_wrapped1397=object_wrapped1();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped1397.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xcrement"


    public static class object_wrapped1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped1"
    // Objcm.g:706:1: object_wrapped1 : object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? ;
    public final ObjcmParser.object_wrapped1_return object_wrapped1() throws RecognitionException {
        ObjcmParser.object_wrapped1_return retval = new ObjcmParser.object_wrapped1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set399=null;
        ObjcmParser.object_wrapped2_return object_wrapped2398 =null;


        Object set399_tree=null;

        try {
            // Objcm.g:707:2: ( object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? )
            // Objcm.g:707:4: object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapped2_in_object_wrapped13683);
            object_wrapped2398=object_wrapped2();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped2398.getTree());

            // Objcm.g:707:20: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==L_MINUS_MINUS||LA102_0==L_PLUS_PLUS) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // Objcm.g:
                    {
                    set399=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set399)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped1"


    public static class object_wrapped2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped2"
    // Objcm.g:710:1: object_wrapped2 : ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR classical_expr_wrp R_BR ( id_part_end )? | const_expr | a_started );
    public final ObjcmParser.object_wrapped2_return object_wrapped2() throws RecognitionException {
        ObjcmParser.object_wrapped2_return retval = new ObjcmParser.object_wrapped2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal400=null;
        Token L_BR405=null;
        Token R_BR407=null;
        ObjcmParser.object_name_return object_name401 =null;

        ObjcmParser.generic_return generic402 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper403 =null;

        ObjcmParser.id_part_end_return id_part_end404 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp406 =null;

        ObjcmParser.id_part_end_return id_part_end408 =null;

        ObjcmParser.const_expr_return const_expr409 =null;

        ObjcmParser.a_started_return a_started410 =null;


        Object string_literal400_tree=null;
        Object L_BR405_tree=null;
        Object R_BR407_tree=null;

        try {
            // Objcm.g:711:2: ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR classical_expr_wrp R_BR ( id_part_end )? | const_expr | a_started )
            int alt107=5;
            switch ( input.LA(1) ) {
            case ID:
            case 184:
            case 191:
                {
                alt107=1;
                }
                break;
            case L_KBR:
                {
                alt107=2;
                }
                break;
            case L_BR:
                {
                alt107=3;
                }
                break;
            case NUMBER:
            case STRING_LITERAL:
            case STRING_LITERAL2:
            case STRING_LITERAL3:
            case 173:
            case 186:
                {
                alt107=4;
                }
                break;
            case 161:
            case 167:
            case 169:
                {
                alt107=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }

            switch (alt107) {
                case 1 :
                    // Objcm.g:711:5: ( 'unsigned' )? object_name ( generic )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // Objcm.g:711:5: ( 'unsigned' )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==191) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // Objcm.g:711:5: 'unsigned'
                            {
                            string_literal400=(Token)match(input,191,FOLLOW_191_in_object_wrapped23704); 
                            string_literal400_tree = 
                            (Object)adaptor.create(string_literal400)
                            ;
                            adaptor.addChild(root_0, string_literal400_tree);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_object_name_in_object_wrapped23707);
                    object_name401=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name401.getTree());

                    // Objcm.g:711:29: ( generic )?
                    int alt104=2;
                    alt104 = dfa104.predict(input);
                    switch (alt104) {
                        case 1 :
                            // Objcm.g:711:29: generic
                            {
                            pushFollow(FOLLOW_generic_in_object_wrapped23709);
                            generic402=generic();

                            state._fsp--;

                            adaptor.addChild(root_0, generic402.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:712:4: method_call_wrapper ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapped23715);
                    method_call_wrapper403=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper403.getTree());

                    // Objcm.g:712:24: ( id_part_end )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==DOT||LA105_0==158) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // Objcm.g:712:24: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23717);
                            id_part_end404=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end404.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // Objcm.g:713:4: L_BR classical_expr_wrp R_BR ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR405=(Token)match(input,L_BR,FOLLOW_L_BR_in_object_wrapped23723); 
                    L_BR405_tree = 
                    (Object)adaptor.create(L_BR405)
                    ;
                    adaptor.addChild(root_0, L_BR405_tree);


                    pushFollow(FOLLOW_classical_expr_wrp_in_object_wrapped23725);
                    classical_expr_wrp406=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp406.getTree());

                    R_BR407=(Token)match(input,R_BR,FOLLOW_R_BR_in_object_wrapped23727); 
                    R_BR407_tree = 
                    (Object)adaptor.create(R_BR407)
                    ;
                    adaptor.addChild(root_0, R_BR407_tree);


                    // Objcm.g:713:33: ( id_part_end )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==DOT||LA106_0==158) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // Objcm.g:713:33: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23729);
                            id_part_end408=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end408.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // Objcm.g:714:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_object_wrapped23735);
                    const_expr409=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr409.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:715:4: a_started
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_started_in_object_wrapped23740);
                    a_started410=a_started();

                    state._fsp--;

                    adaptor.addChild(root_0, a_started410.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped2"


    public static class function_brackets_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets_wrapper"
    // Objcm.g:718:1: function_brackets_wrapper : function_brackets -> ^( FUNCTION function_brackets ) ;
    public final ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper() throws RecognitionException {
        ObjcmParser.function_brackets_wrapper_return retval = new ObjcmParser.function_brackets_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.function_brackets_return function_brackets411 =null;


        RewriteRuleSubtreeStream stream_function_brackets=new RewriteRuleSubtreeStream(adaptor,"rule function_brackets");
        try {
            // Objcm.g:719:2: ( function_brackets -> ^( FUNCTION function_brackets ) )
            // Objcm.g:719:4: function_brackets
            {
            pushFollow(FOLLOW_function_brackets_in_function_brackets_wrapper3752);
            function_brackets411=function_brackets();

            state._fsp--;

            stream_function_brackets.add(function_brackets411.getTree());

            // AST REWRITE
            // elements: function_brackets
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 719:22: -> ^( FUNCTION function_brackets )
            {
                // Objcm.g:719:25: ^( FUNCTION function_brackets )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNCTION, "FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_function_brackets.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets_wrapper"


    public static class function_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets"
    // Objcm.g:721:1: function_brackets : L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.function_brackets_return function_brackets() throws RecognitionException {
        ObjcmParser.function_brackets_return retval = new ObjcmParser.function_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR412=null;
        Token COMMA414=null;
        Token R_BR416=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp413 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp415 =null;


        Object L_BR412_tree=null;
        Object COMMA414_tree=null;
        Object R_BR416_tree=null;

        try {
            // Objcm.g:722:2: ( L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR )
            // Objcm.g:722:4: L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR412=(Token)match(input,L_BR,FOLLOW_L_BR_in_function_brackets3771); 
            L_BR412_tree = 
            (Object)adaptor.create(L_BR412)
            ;
            adaptor.addChild(root_0, L_BR412_tree);


            // Objcm.g:722:9: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==ASTERISK||LA109_0==ID||LA109_0==L_AND||LA109_0==L_BR||LA109_0==L_KBR||LA109_0==L_MINUS||LA109_0==L_MINUS_MINUS||LA109_0==L_NOT||LA109_0==L_PLUS||LA109_0==L_PLUS_PLUS||LA109_0==L_TILDA||LA109_0==NUMBER||LA109_0==SIZEOF||(LA109_0 >= STRING_LITERAL && LA109_0 <= STRING_LITERAL3)||LA109_0==161||LA109_0==167||LA109_0==169||LA109_0==173||LA109_0==184||LA109_0==186||LA109_0==191) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // Objcm.g:722:10: classical_expr_wrp ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets3774);
                    classical_expr_wrp413=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp413.getTree());

                    // Objcm.g:722:29: ( COMMA classical_expr_wrp )*
                    loop108:
                    do {
                        int alt108=2;
                        int LA108_0 = input.LA(1);

                        if ( (LA108_0==COMMA) ) {
                            alt108=1;
                        }


                        switch (alt108) {
                    	case 1 :
                    	    // Objcm.g:722:30: COMMA classical_expr_wrp
                    	    {
                    	    COMMA414=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_brackets3777); 
                    	    COMMA414_tree = 
                    	    (Object)adaptor.create(COMMA414)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA414_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets3779);
                    	    classical_expr_wrp415=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp415.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop108;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR416=(Token)match(input,R_BR,FOLLOW_R_BR_in_function_brackets3785); 
            R_BR416_tree = 
            (Object)adaptor.create(R_BR416)
            ;
            adaptor.addChild(root_0, R_BR416_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets"


    public static class index_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_wrapper"
    // Objcm.g:724:1: index_wrapper : index -> ^( INDEX index ) ;
    public final ObjcmParser.index_wrapper_return index_wrapper() throws RecognitionException {
        ObjcmParser.index_wrapper_return retval = new ObjcmParser.index_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.index_return index417 =null;


        RewriteRuleSubtreeStream stream_index=new RewriteRuleSubtreeStream(adaptor,"rule index");
        try {
            // Objcm.g:725:2: ( index -> ^( INDEX index ) )
            // Objcm.g:725:4: index
            {
            pushFollow(FOLLOW_index_in_index_wrapper3795);
            index417=index();

            state._fsp--;

            stream_index.add(index417.getTree());

            // AST REWRITE
            // elements: index
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 725:10: -> ^( INDEX index )
            {
                // Objcm.g:725:13: ^( INDEX index )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INDEX, "INDEX")
                , root_1);

                adaptor.addChild(root_1, stream_index.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_wrapper"


    public static class index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index"
    // Objcm.g:727:1: index : L_KBR index_number_wrapper R_KBR ;
    public final ObjcmParser.index_return index() throws RecognitionException {
        ObjcmParser.index_return retval = new ObjcmParser.index_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR418=null;
        Token R_KBR420=null;
        ObjcmParser.index_number_wrapper_return index_number_wrapper419 =null;


        Object L_KBR418_tree=null;
        Object R_KBR420_tree=null;

        try {
            // Objcm.g:727:7: ( L_KBR index_number_wrapper R_KBR )
            // Objcm.g:727:9: L_KBR index_number_wrapper R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR418=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index3812); 
            L_KBR418_tree = 
            (Object)adaptor.create(L_KBR418)
            ;
            adaptor.addChild(root_0, L_KBR418_tree);


            pushFollow(FOLLOW_index_number_wrapper_in_index3814);
            index_number_wrapper419=index_number_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, index_number_wrapper419.getTree());

            R_KBR420=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index3816); 
            R_KBR420_tree = 
            (Object)adaptor.create(R_KBR420)
            ;
            adaptor.addChild(root_0, R_KBR420_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index"


    public static class index_number_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_number_wrapper"
    // Objcm.g:729:1: index_number_wrapper : index_number -> ^( INDEX_NUMBER index_number ) ;
    public final ObjcmParser.index_number_wrapper_return index_number_wrapper() throws RecognitionException {
        ObjcmParser.index_number_wrapper_return retval = new ObjcmParser.index_number_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.index_number_return index_number421 =null;


        RewriteRuleSubtreeStream stream_index_number=new RewriteRuleSubtreeStream(adaptor,"rule index_number");
        try {
            // Objcm.g:730:2: ( index_number -> ^( INDEX_NUMBER index_number ) )
            // Objcm.g:730:4: index_number
            {
            pushFollow(FOLLOW_index_number_in_index_number_wrapper3825);
            index_number421=index_number();

            state._fsp--;

            stream_index_number.add(index_number421.getTree());

            // AST REWRITE
            // elements: index_number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 730:17: -> ^( INDEX_NUMBER index_number )
            {
                // Objcm.g:730:20: ^( INDEX_NUMBER index_number )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INDEX_NUMBER, "INDEX_NUMBER")
                , root_1);

                adaptor.addChild(root_1, stream_index_number.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_number_wrapper"


    public static class index_number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_number"
    // Objcm.g:732:1: index_number : ( classical_expr_wrp )? ;
    public final ObjcmParser.index_number_return index_number() throws RecognitionException {
        ObjcmParser.index_number_return retval = new ObjcmParser.index_number_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp422 =null;



        try {
            // Objcm.g:733:2: ( ( classical_expr_wrp )? )
            // Objcm.g:733:4: ( classical_expr_wrp )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:733:4: ( classical_expr_wrp )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==ASTERISK||LA110_0==ID||LA110_0==L_AND||LA110_0==L_BR||LA110_0==L_KBR||LA110_0==L_MINUS||LA110_0==L_MINUS_MINUS||LA110_0==L_NOT||LA110_0==L_PLUS||LA110_0==L_PLUS_PLUS||LA110_0==L_TILDA||LA110_0==NUMBER||LA110_0==SIZEOF||(LA110_0 >= STRING_LITERAL && LA110_0 <= STRING_LITERAL3)||LA110_0==161||LA110_0==167||LA110_0==169||LA110_0==173||LA110_0==184||LA110_0==186||LA110_0==191) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // Objcm.g:733:4: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_index_number3842);
                    classical_expr_wrp422=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp422.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_number"


    public static class struct_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init"
    // Objcm.g:735:1: struct_init : L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init_return struct_init() throws RecognitionException {
        ObjcmParser.struct_init_return retval = new ObjcmParser.struct_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR423=null;
        Token STRUCT_PREFIX424=null;
        Token ID425=null;
        Token R_BR426=null;
        Token L_FBR427=null;
        Token COMMA429=null;
        Token R_FBR431=null;
        ObjcmParser.struct_init_line_return struct_init_line428 =null;

        ObjcmParser.struct_init_line_return struct_init_line430 =null;


        Object L_BR423_tree=null;
        Object STRUCT_PREFIX424_tree=null;
        Object ID425_tree=null;
        Object R_BR426_tree=null;
        Object L_FBR427_tree=null;
        Object COMMA429_tree=null;
        Object R_FBR431_tree=null;

        try {
            // Objcm.g:736:2: ( L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // Objcm.g:736:4: L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_BR423=(Token)match(input,L_BR,FOLLOW_L_BR_in_struct_init3853); 
            L_BR423_tree = 
            (Object)adaptor.create(L_BR423)
            ;
            adaptor.addChild(root_0, L_BR423_tree);


            // Objcm.g:736:10: ( STRUCT_PREFIX )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==STRUCT_PREFIX) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // Objcm.g:736:10: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX424=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_init3856); 
                    STRUCT_PREFIX424_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX424)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX424_tree);


                    }
                    break;

            }


            ID425=(Token)match(input,ID,FOLLOW_ID_in_struct_init3859); 
            ID425_tree = 
            (Object)adaptor.create(ID425)
            ;
            adaptor.addChild(root_0, ID425_tree);


            R_BR426=(Token)match(input,R_BR,FOLLOW_R_BR_in_struct_init3862); 
            R_BR426_tree = 
            (Object)adaptor.create(R_BR426)
            ;
            adaptor.addChild(root_0, R_BR426_tree);


            L_FBR427=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init3865); 
            L_FBR427_tree = 
            (Object)adaptor.create(L_FBR427)
            ;
            adaptor.addChild(root_0, L_FBR427_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init3871);
            struct_init_line428=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line428.getTree());

            // Objcm.g:737:21: ( COMMA struct_init_line )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==COMMA) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // Objcm.g:737:22: COMMA struct_init_line
            	    {
            	    COMMA429=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init3874); 
            	    COMMA429_tree = 
            	    (Object)adaptor.create(COMMA429)
            	    ;
            	    adaptor.addChild(root_0, COMMA429_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init3877);
            	    struct_init_line430=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line430.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            R_FBR431=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init3883); 
            R_FBR431_tree = 
            (Object)adaptor.create(R_FBR431)
            ;
            adaptor.addChild(root_0, R_FBR431_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init"


    public static class struct_init2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init2"
    // Objcm.g:741:1: struct_init2 : L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init2_return struct_init2() throws RecognitionException {
        ObjcmParser.struct_init2_return retval = new ObjcmParser.struct_init2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR432=null;
        Token COMMA434=null;
        Token R_FBR436=null;
        ObjcmParser.struct_init_line_return struct_init_line433 =null;

        ObjcmParser.struct_init_line_return struct_init_line435 =null;


        Object L_FBR432_tree=null;
        Object COMMA434_tree=null;
        Object R_FBR436_tree=null;

        try {
            // Objcm.g:742:2: ( L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // Objcm.g:742:4: L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR432=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init23897); 
            L_FBR432_tree = 
            (Object)adaptor.create(L_FBR432)
            ;
            adaptor.addChild(root_0, L_FBR432_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init23903);
            struct_init_line433=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line433.getTree());

            // Objcm.g:743:21: ( COMMA struct_init_line )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==COMMA) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // Objcm.g:743:22: COMMA struct_init_line
            	    {
            	    COMMA434=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init23906); 
            	    COMMA434_tree = 
            	    (Object)adaptor.create(COMMA434)
            	    ;
            	    adaptor.addChild(root_0, COMMA434_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init23909);
            	    struct_init_line435=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line435.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            R_FBR436=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init23915); 
            R_FBR436_tree = 
            (Object)adaptor.create(R_FBR436)
            ;
            adaptor.addChild(root_0, R_FBR436_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init2"


    public static class struct_init_line_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_line"
    // Objcm.g:747:1: struct_init_line : ( struct_init_var | struct_init_expression );
    public final ObjcmParser.struct_init_line_return struct_init_line() throws RecognitionException {
        ObjcmParser.struct_init_line_return retval = new ObjcmParser.struct_init_line_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_init_var_return struct_init_var437 =null;

        ObjcmParser.struct_init_expression_return struct_init_expression438 =null;



        try {
            // Objcm.g:748:2: ( struct_init_var | struct_init_expression )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==DOT) ) {
                alt114=1;
            }
            else if ( (LA114_0==ASTERISK||LA114_0==ID||LA114_0==L_AND||LA114_0==L_BR||LA114_0==L_KBR||LA114_0==L_MINUS||LA114_0==L_MINUS_MINUS||LA114_0==L_NOT||LA114_0==L_PLUS||LA114_0==L_PLUS_PLUS||LA114_0==L_TILDA||LA114_0==NUMBER||LA114_0==SIZEOF||(LA114_0 >= STRING_LITERAL && LA114_0 <= STRING_LITERAL3)||LA114_0==161||LA114_0==167||LA114_0==169||LA114_0==173||LA114_0==184||LA114_0==186||LA114_0==191) ) {
                alt114=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }
            switch (alt114) {
                case 1 :
                    // Objcm.g:748:4: struct_init_var
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_var_in_struct_init_line3928);
                    struct_init_var437=struct_init_var();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_var437.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:749:4: struct_init_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_expression_in_struct_init_line3933);
                    struct_init_expression438=struct_init_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_expression438.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_line"


    public static class struct_init_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_expression"
    // Objcm.g:752:1: struct_init_expression : classical_expr_wrp ;
    public final ObjcmParser.struct_init_expression_return struct_init_expression() throws RecognitionException {
        ObjcmParser.struct_init_expression_return retval = new ObjcmParser.struct_init_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp439 =null;



        try {
            // Objcm.g:753:2: ( classical_expr_wrp )
            // Objcm.g:753:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_expression3946);
            classical_expr_wrp439=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp439.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_expression"


    public static class struct_init_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_method"
    // Objcm.g:755:1: struct_init_method : classical_expr_wrp ;
    public final ObjcmParser.struct_init_method_return struct_init_method() throws RecognitionException {
        ObjcmParser.struct_init_method_return retval = new ObjcmParser.struct_init_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp440 =null;



        try {
            // Objcm.g:756:2: ( classical_expr_wrp )
            // Objcm.g:756:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_method3957);
            classical_expr_wrp440=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp440.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_method"


    public static class struct_init_var_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_var"
    // Objcm.g:758:1: struct_init_var : ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) ;
    public final ObjcmParser.struct_init_var_return struct_init_var() throws RecognitionException {
        ObjcmParser.struct_init_var_return retval = new ObjcmParser.struct_init_var_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT441=null;
        Token L_EQ443=null;
        ObjcmParser.id_part_return id_part442 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets444 =null;

        ObjcmParser.expression_return expression445 =null;


        Object DOT441_tree=null;
        Object L_EQ443_tree=null;

        try {
            // Objcm.g:759:2: ( ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) )
            // Objcm.g:759:4: ( DOT id_part )+ L_EQ ( in_q_brackets | expression )
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:759:4: ( DOT id_part )+
            int cnt115=0;
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==DOT) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // Objcm.g:759:5: DOT id_part
            	    {
            	    DOT441=(Token)match(input,DOT,FOLLOW_DOT_in_struct_init_var3969); 
            	    DOT441_tree = 
            	    (Object)adaptor.create(DOT441)
            	    ;
            	    adaptor.addChild(root_0, DOT441_tree);


            	    pushFollow(FOLLOW_id_part_in_struct_init_var3971);
            	    id_part442=id_part();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part442.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt115 >= 1 ) break loop115;
                        EarlyExitException eee =
                            new EarlyExitException(115, input);
                        throw eee;
                }
                cnt115++;
            } while (true);


            L_EQ443=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_struct_init_var3976); 
            L_EQ443_tree = 
            (Object)adaptor.create(L_EQ443)
            ;
            adaptor.addChild(root_0, L_EQ443_tree);


            // Objcm.g:759:26: ( in_q_brackets | expression )
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==L_FBR) ) {
                alt116=1;
            }
            else if ( (LA116_0==ASTERISK||LA116_0==ID||LA116_0==L_AND||LA116_0==L_BR||LA116_0==L_KBR||LA116_0==L_MINUS||LA116_0==L_MINUS_MINUS||LA116_0==L_NOT||LA116_0==L_PLUS||LA116_0==L_PLUS_PLUS||LA116_0==L_TILDA||LA116_0==NUMBER||LA116_0==SIZEOF||(LA116_0 >= STRING_LITERAL && LA116_0 <= STRING_LITERAL3)||LA116_0==161||LA116_0==167||LA116_0==169||LA116_0==173||LA116_0==184||LA116_0==186||LA116_0==191) ) {
                alt116=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;

            }
            switch (alt116) {
                case 1 :
                    // Objcm.g:759:27: in_q_brackets
                    {
                    pushFollow(FOLLOW_in_q_brackets_in_struct_init_var3980);
                    in_q_brackets444=in_q_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, in_q_brackets444.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:759:43: expression
                    {
                    pushFollow(FOLLOW_expression_in_struct_init_var3984);
                    expression445=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression445.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_var"


    public static class a_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_started"
    // Objcm.g:761:1: a_started : ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper );
    public final ObjcmParser.a_started_return a_started() throws RecognitionException {
        ObjcmParser.a_started_return retval = new ObjcmParser.a_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_wrapper_return a_selector_wrapper446 =null;

        ObjcmParser.a_encode_wrapper_return a_encode_wrapper447 =null;

        ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper448 =null;



        try {
            // Objcm.g:762:2: ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper )
            int alt117=3;
            switch ( input.LA(1) ) {
            case 169:
                {
                alt117=1;
                }
                break;
            case 161:
                {
                alt117=2;
                }
                break;
            case 167:
                {
                alt117=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }

            switch (alt117) {
                case 1 :
                    // Objcm.g:762:4: a_selector_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_selector_wrapper_in_a_started3996);
                    a_selector_wrapper446=a_selector_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_selector_wrapper446.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:763:4: a_encode_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_encode_wrapper_in_a_started4001);
                    a_encode_wrapper447=a_encode_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_encode_wrapper447.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:764:4: a_protocol_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_protocol_wrapper_in_a_started4006);
                    a_protocol_wrapper448=a_protocol_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_protocol_wrapper448.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_started"


    public static class typeof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof"
    // Objcm.g:767:1: typeof : '__typeof__' L_BR ID R_BR ;
    public final ObjcmParser.typeof_return typeof() throws RecognitionException {
        ObjcmParser.typeof_return retval = new ObjcmParser.typeof_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal449=null;
        Token L_BR450=null;
        Token ID451=null;
        Token R_BR452=null;

        Object string_literal449_tree=null;
        Object L_BR450_tree=null;
        Object ID451_tree=null;
        Object R_BR452_tree=null;

        try {
            // Objcm.g:767:8: ( '__typeof__' L_BR ID R_BR )
            // Objcm.g:767:10: '__typeof__' L_BR ID R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal449=(Token)match(input,175,FOLLOW_175_in_typeof4016); 
            string_literal449_tree = 
            (Object)adaptor.create(string_literal449)
            ;
            adaptor.addChild(root_0, string_literal449_tree);


            L_BR450=(Token)match(input,L_BR,FOLLOW_L_BR_in_typeof4019); 
            L_BR450_tree = 
            (Object)adaptor.create(L_BR450)
            ;
            adaptor.addChild(root_0, L_BR450_tree);


            ID451=(Token)match(input,ID,FOLLOW_ID_in_typeof4022); 
            ID451_tree = 
            (Object)adaptor.create(ID451)
            ;
            adaptor.addChild(root_0, ID451_tree);


            R_BR452=(Token)match(input,R_BR,FOLLOW_R_BR_in_typeof4025); 
            R_BR452_tree = 
            (Object)adaptor.create(R_BR452)
            ;
            adaptor.addChild(root_0, R_BR452_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof"


    public static class a_selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_wrapper"
    // Objcm.g:769:1: a_selector_wrapper : a_selector -> ^( SELECTOR a_selector ) ;
    public final ObjcmParser.a_selector_wrapper_return a_selector_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_wrapper_return retval = new ObjcmParser.a_selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_return a_selector453 =null;


        RewriteRuleSubtreeStream stream_a_selector=new RewriteRuleSubtreeStream(adaptor,"rule a_selector");
        try {
            // Objcm.g:770:2: ( a_selector -> ^( SELECTOR a_selector ) )
            // Objcm.g:770:4: a_selector
            {
            pushFollow(FOLLOW_a_selector_in_a_selector_wrapper4036);
            a_selector453=a_selector();

            state._fsp--;

            stream_a_selector.add(a_selector453.getTree());

            // AST REWRITE
            // elements: a_selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 770:15: -> ^( SELECTOR a_selector )
            {
                // Objcm.g:770:18: ^( SELECTOR a_selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR, "SELECTOR")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_wrapper"


    public static class a_selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector"
    // Objcm.g:772:1: a_selector : '@selector' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_selector_return a_selector() throws RecognitionException {
        ObjcmParser.a_selector_return retval = new ObjcmParser.a_selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal454=null;
        Token L_BR455=null;
        Token R_BR457=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper456 =null;


        Object string_literal454_tree=null;
        Object L_BR455_tree=null;
        Object R_BR457_tree=null;

        try {
            // Objcm.g:772:11: ( '@selector' L_BR a_selector_value_wrapper R_BR )
            // Objcm.g:772:13: '@selector' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal454=(Token)match(input,169,FOLLOW_169_in_a_selector4053); 
            string_literal454_tree = 
            (Object)adaptor.create(string_literal454)
            ;
            adaptor.addChild(root_0, string_literal454_tree);


            L_BR455=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_selector4055); 
            L_BR455_tree = 
            (Object)adaptor.create(L_BR455)
            ;
            adaptor.addChild(root_0, L_BR455_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_selector4057);
            a_selector_value_wrapper456=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper456.getTree());

            R_BR457=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_selector4059); 
            R_BR457_tree = 
            (Object)adaptor.create(R_BR457)
            ;
            adaptor.addChild(root_0, R_BR457_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector"


    public static class a_protocol_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol_wrapper"
    // Objcm.g:774:1: a_protocol_wrapper : a_protocol -> ^( PROTOCOL a_protocol ) ;
    public final ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper() throws RecognitionException {
        ObjcmParser.a_protocol_wrapper_return retval = new ObjcmParser.a_protocol_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_protocol_return a_protocol458 =null;


        RewriteRuleSubtreeStream stream_a_protocol=new RewriteRuleSubtreeStream(adaptor,"rule a_protocol");
        try {
            // Objcm.g:775:2: ( a_protocol -> ^( PROTOCOL a_protocol ) )
            // Objcm.g:775:4: a_protocol
            {
            pushFollow(FOLLOW_a_protocol_in_a_protocol_wrapper4069);
            a_protocol458=a_protocol();

            state._fsp--;

            stream_a_protocol.add(a_protocol458.getTree());

            // AST REWRITE
            // elements: a_protocol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 775:15: -> ^( PROTOCOL a_protocol )
            {
                // Objcm.g:775:18: ^( PROTOCOL a_protocol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_a_protocol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol_wrapper"


    public static class a_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol"
    // Objcm.g:777:1: a_protocol : '@protocol' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_protocol_return a_protocol() throws RecognitionException {
        ObjcmParser.a_protocol_return retval = new ObjcmParser.a_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal459=null;
        Token L_BR460=null;
        Token R_BR462=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper461 =null;


        Object string_literal459_tree=null;
        Object L_BR460_tree=null;
        Object R_BR462_tree=null;

        try {
            // Objcm.g:778:2: ( '@protocol' L_BR a_selector_value_wrapper R_BR )
            // Objcm.g:778:4: '@protocol' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal459=(Token)match(input,167,FOLLOW_167_in_a_protocol4087); 
            string_literal459_tree = 
            (Object)adaptor.create(string_literal459)
            ;
            adaptor.addChild(root_0, string_literal459_tree);


            L_BR460=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_protocol4089); 
            L_BR460_tree = 
            (Object)adaptor.create(L_BR460)
            ;
            adaptor.addChild(root_0, L_BR460_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_protocol4091);
            a_selector_value_wrapper461=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper461.getTree());

            R_BR462=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_protocol4093); 
            R_BR462_tree = 
            (Object)adaptor.create(R_BR462)
            ;
            adaptor.addChild(root_0, R_BR462_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol"


    public static class a_encode_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode_wrapper"
    // Objcm.g:780:1: a_encode_wrapper : a_encode -> ^( ENCODE a_encode ) ;
    public final ObjcmParser.a_encode_wrapper_return a_encode_wrapper() throws RecognitionException {
        ObjcmParser.a_encode_wrapper_return retval = new ObjcmParser.a_encode_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_encode_return a_encode463 =null;


        RewriteRuleSubtreeStream stream_a_encode=new RewriteRuleSubtreeStream(adaptor,"rule a_encode");
        try {
            // Objcm.g:781:2: ( a_encode -> ^( ENCODE a_encode ) )
            // Objcm.g:781:4: a_encode
            {
            pushFollow(FOLLOW_a_encode_in_a_encode_wrapper4103);
            a_encode463=a_encode();

            state._fsp--;

            stream_a_encode.add(a_encode463.getTree());

            // AST REWRITE
            // elements: a_encode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 781:13: -> ^( ENCODE a_encode )
            {
                // Objcm.g:781:16: ^( ENCODE a_encode )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENCODE, "ENCODE")
                , root_1);

                adaptor.addChild(root_1, stream_a_encode.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode_wrapper"


    public static class a_selector_value_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value_wrapper"
    // Objcm.g:783:1: a_selector_value_wrapper : a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) ;
    public final ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_value_wrapper_return retval = new ObjcmParser.a_selector_value_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_value_return a_selector_value464 =null;


        RewriteRuleSubtreeStream stream_a_selector_value=new RewriteRuleSubtreeStream(adaptor,"rule a_selector_value");
        try {
            // Objcm.g:784:2: ( a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) )
            // Objcm.g:784:4: a_selector_value
            {
            pushFollow(FOLLOW_a_selector_value_in_a_selector_value_wrapper4120);
            a_selector_value464=a_selector_value();

            state._fsp--;

            stream_a_selector_value.add(a_selector_value464.getTree());

            // AST REWRITE
            // elements: a_selector_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 784:21: -> ^( SELECTOR_VALUE a_selector_value )
            {
                // Objcm.g:784:24: ^( SELECTOR_VALUE a_selector_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR_VALUE, "SELECTOR_VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value_wrapper"


    public static class a_selector_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value"
    // Objcm.g:786:1: a_selector_value : ID ( COLON ( ID COLON )* )? ;
    public final ObjcmParser.a_selector_value_return a_selector_value() throws RecognitionException {
        ObjcmParser.a_selector_value_return retval = new ObjcmParser.a_selector_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID465=null;
        Token COLON466=null;
        Token ID467=null;
        Token COLON468=null;

        Object ID465_tree=null;
        Object COLON466_tree=null;
        Object ID467_tree=null;
        Object COLON468_tree=null;

        try {
            // Objcm.g:787:2: ( ID ( COLON ( ID COLON )* )? )
            // Objcm.g:787:5: ID ( COLON ( ID COLON )* )?
            {
            root_0 = (Object)adaptor.nil();


            ID465=(Token)match(input,ID,FOLLOW_ID_in_a_selector_value4139); 
            ID465_tree = 
            (Object)adaptor.create(ID465)
            ;
            adaptor.addChild(root_0, ID465_tree);


            // Objcm.g:787:9: ( COLON ( ID COLON )* )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==COLON) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // Objcm.g:787:10: COLON ( ID COLON )*
                    {
                    COLON466=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4143); 
                    COLON466_tree = 
                    (Object)adaptor.create(COLON466)
                    ;
                    adaptor.addChild(root_0, COLON466_tree);


                    // Objcm.g:787:17: ( ID COLON )*
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( (LA118_0==ID) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    // Objcm.g:787:18: ID COLON
                    	    {
                    	    ID467=(Token)match(input,ID,FOLLOW_ID_in_a_selector_value4147); 
                    	    ID467_tree = 
                    	    (Object)adaptor.create(ID467)
                    	    ;
                    	    adaptor.addChild(root_0, ID467_tree);


                    	    COLON468=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4150); 
                    	    COLON468_tree = 
                    	    (Object)adaptor.create(COLON468)
                    	    ;
                    	    adaptor.addChild(root_0, COLON468_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop118;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value"


    public static class a_encode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode"
    // Objcm.g:789:1: a_encode : '@encode' L_BR (~ ( R_BR ) )+ R_BR ;
    public final ObjcmParser.a_encode_return a_encode() throws RecognitionException {
        ObjcmParser.a_encode_return retval = new ObjcmParser.a_encode_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal469=null;
        Token L_BR470=null;
        Token set471=null;
        Token R_BR472=null;

        Object string_literal469_tree=null;
        Object L_BR470_tree=null;
        Object set471_tree=null;
        Object R_BR472_tree=null;

        try {
            // Objcm.g:789:9: ( '@encode' L_BR (~ ( R_BR ) )+ R_BR )
            // Objcm.g:789:11: '@encode' L_BR (~ ( R_BR ) )+ R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal469=(Token)match(input,161,FOLLOW_161_in_a_encode4161); 
            string_literal469_tree = 
            (Object)adaptor.create(string_literal469)
            ;
            adaptor.addChild(root_0, string_literal469_tree);


            L_BR470=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_encode4163); 
            L_BR470_tree = 
            (Object)adaptor.create(L_BR470)
            ;
            adaptor.addChild(root_0, L_BR470_tree);


            // Objcm.g:789:26: (~ ( R_BR ) )+
            int cnt120=0;
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( ((LA120_0 >= ASSIGN && LA120_0 <= RETURN_STMT)||(LA120_0 >= R_FBR && LA120_0 <= 192)) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // Objcm.g:
            	    {
            	    set471=(Token)input.LT(1);

            	    if ( (input.LA(1) >= ASSIGN && input.LA(1) <= RETURN_STMT)||(input.LA(1) >= R_FBR && input.LA(1) <= 192) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set471)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt120 >= 1 ) break loop120;
                        EarlyExitException eee =
                            new EarlyExitException(120, input);
                        throw eee;
                }
                cnt120++;
            } while (true);


            R_BR472=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_encode4171); 
            R_BR472_tree = 
            (Object)adaptor.create(R_BR472)
            ;
            adaptor.addChild(root_0, R_BR472_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode"


    public static class const_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // Objcm.g:791:1: const_expr : ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt );
    public final ObjcmParser.const_expr_return const_expr() throws RecognitionException {
        ObjcmParser.const_expr_return retval = new ObjcmParser.const_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NUMBER473=null;
        Token STRING_LITERAL474=null;
        Token STRING_LITERAL2475=null;
        Token STRING_LITERAL3476=null;
        ObjcmParser.null_stmt_return null_stmt477 =null;


        Object NUMBER473_tree=null;
        Object STRING_LITERAL474_tree=null;
        Object STRING_LITERAL2475_tree=null;
        Object STRING_LITERAL3476_tree=null;

        try {
            // Objcm.g:792:2: ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt )
            int alt121=5;
            switch ( input.LA(1) ) {
            case NUMBER:
                {
                alt121=1;
                }
                break;
            case STRING_LITERAL:
                {
                alt121=2;
                }
                break;
            case STRING_LITERAL2:
                {
                alt121=3;
                }
                break;
            case STRING_LITERAL3:
                {
                alt121=4;
                }
                break;
            case 173:
            case 186:
                {
                alt121=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;

            }

            switch (alt121) {
                case 1 :
                    // Objcm.g:792:5: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER473=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_const_expr4182); 
                    NUMBER473_tree = 
                    (Object)adaptor.create(NUMBER473)
                    ;
                    adaptor.addChild(root_0, NUMBER473_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:792:14: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL474=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_const_expr4186); 
                    STRING_LITERAL474_tree = 
                    (Object)adaptor.create(STRING_LITERAL474)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL474_tree);


                    }
                    break;
                case 3 :
                    // Objcm.g:792:31: STRING_LITERAL2
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL2475=(Token)match(input,STRING_LITERAL2,FOLLOW_STRING_LITERAL2_in_const_expr4190); 
                    STRING_LITERAL2475_tree = 
                    (Object)adaptor.create(STRING_LITERAL2475)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL2475_tree);


                    }
                    break;
                case 4 :
                    // Objcm.g:792:49: STRING_LITERAL3
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL3476=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_const_expr4194); 
                    STRING_LITERAL3476_tree = 
                    (Object)adaptor.create(STRING_LITERAL3476)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL3476_tree);


                    }
                    break;
                case 5 :
                    // Objcm.g:792:67: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_const_expr4198);
                    null_stmt477=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt477.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class string_literal3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_literal3"
    // Objcm.g:794:1: string_literal3 : STRING_LITERAL3 ;
    public final ObjcmParser.string_literal3_return string_literal3() throws RecognitionException {
        ObjcmParser.string_literal3_return retval = new ObjcmParser.string_literal3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL3478=null;

        Object STRING_LITERAL3478_tree=null;

        try {
            // Objcm.g:795:2: ( STRING_LITERAL3 )
            // Objcm.g:795:4: STRING_LITERAL3
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL3478=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_string_literal34208); 
            STRING_LITERAL3478_tree = 
            (Object)adaptor.create(STRING_LITERAL3478)
            ;
            adaptor.addChild(root_0, STRING_LITERAL3478_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_literal3"


    public static class method_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_brackets"
    // Objcm.g:797:1: method_brackets : L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.method_brackets_return method_brackets() throws RecognitionException {
        ObjcmParser.method_brackets_return retval = new ObjcmParser.method_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR479=null;
        Token COMMA481=null;
        Token R_BR483=null;
        ObjcmParser.expression_return expression480 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp482 =null;


        Object L_BR479_tree=null;
        Object COMMA481_tree=null;
        Object R_BR483_tree=null;

        try {
            // Objcm.g:798:2: ( L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR )
            // Objcm.g:798:4: L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR479=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_brackets4218); 
            L_BR479_tree = 
            (Object)adaptor.create(L_BR479)
            ;
            adaptor.addChild(root_0, L_BR479_tree);


            // Objcm.g:798:10: ( expression ( COMMA classical_expr_wrp )* )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==ASTERISK||LA123_0==ID||LA123_0==L_AND||LA123_0==L_BR||LA123_0==L_KBR||LA123_0==L_MINUS||LA123_0==L_MINUS_MINUS||LA123_0==L_NOT||LA123_0==L_PLUS||LA123_0==L_PLUS_PLUS||LA123_0==L_TILDA||LA123_0==NUMBER||LA123_0==SIZEOF||(LA123_0 >= STRING_LITERAL && LA123_0 <= STRING_LITERAL3)||LA123_0==161||LA123_0==167||LA123_0==169||LA123_0==173||LA123_0==184||LA123_0==186||LA123_0==191) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // Objcm.g:798:11: expression ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_expression_in_method_brackets4222);
                    expression480=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression480.getTree());

                    // Objcm.g:798:23: ( COMMA classical_expr_wrp )*
                    loop122:
                    do {
                        int alt122=2;
                        int LA122_0 = input.LA(1);

                        if ( (LA122_0==COMMA) ) {
                            alt122=1;
                        }


                        switch (alt122) {
                    	case 1 :
                    	    // Objcm.g:798:24: COMMA classical_expr_wrp
                    	    {
                    	    COMMA481=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_brackets4226); 
                    	    COMMA481_tree = 
                    	    (Object)adaptor.create(COMMA481)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA481_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_method_brackets4229);
                    	    classical_expr_wrp482=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp482.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop122;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR483=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_brackets4235); 
            R_BR483_tree = 
            (Object)adaptor.create(R_BR483)
            ;
            adaptor.addChild(root_0, R_BR483_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_brackets"


    public static class func_pointer1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer1"
    // Objcm.g:800:1: func_pointer1 : type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? ;
    public final ObjcmParser.func_pointer1_return func_pointer1() throws RecognitionException {
        ObjcmParser.func_pointer1_return retval = new ObjcmParser.func_pointer1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK485=null;
        Token L_BR486=null;
        Token ASTERISK487=null;
        Token R_BR489=null;
        ObjcmParser.type_internal_return type_internal484 =null;

        ObjcmParser.type_internal_return type_internal488 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params490 =null;


        Object ASTERISK485_tree=null;
        Object L_BR486_tree=null;
        Object ASTERISK487_tree=null;
        Object R_BR489_tree=null;

        try {
            // Objcm.g:801:2: ( type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? )
            // Objcm.g:801:4: type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_func_pointer14245);
            type_internal484=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal484.getTree());

            // Objcm.g:801:19: ( ASTERISK )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==ASTERISK) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // Objcm.g:801:19: ASTERISK
                    {
                    ASTERISK485=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14248); 
                    ASTERISK485_tree = 
                    (Object)adaptor.create(ASTERISK485)
                    ;
                    adaptor.addChild(root_0, ASTERISK485_tree);


                    }
                    break;

            }


            L_BR486=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer14251); 
            L_BR486_tree = 
            (Object)adaptor.create(L_BR486)
            ;
            adaptor.addChild(root_0, L_BR486_tree);


            // Objcm.g:801:34: ( ASTERISK )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==ASTERISK) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // Objcm.g:801:34: ASTERISK
                    {
                    ASTERISK487=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14253); 
                    ASTERISK487_tree = 
                    (Object)adaptor.create(ASTERISK487)
                    ;
                    adaptor.addChild(root_0, ASTERISK487_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_func_pointer14256);
            type_internal488=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal488.getTree());

            R_BR489=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer14259); 
            R_BR489_tree = 
            (Object)adaptor.create(R_BR489)
            ;
            adaptor.addChild(root_0, R_BR489_tree);


            // Objcm.g:801:65: ( func_pointer_params )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==L_BR) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // Objcm.g:801:65: func_pointer_params
                    {
                    pushFollow(FOLLOW_func_pointer_params_in_func_pointer14262);
                    func_pointer_params490=func_pointer_params();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer_params490.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer1"


    public static class func_pointer2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer2"
    // Objcm.g:804:1: func_pointer2 : L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR ;
    public final ObjcmParser.func_pointer2_return func_pointer2() throws RecognitionException {
        ObjcmParser.func_pointer2_return retval = new ObjcmParser.func_pointer2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR491=null;
        Token L_BR493=null;
        Token ASTERISK494=null;
        Token R_BR495=null;
        Token R_BR497=null;
        ObjcmParser.type_internal_return type_internal492 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params496 =null;


        Object L_BR491_tree=null;
        Object L_BR493_tree=null;
        Object ASTERISK494_tree=null;
        Object R_BR495_tree=null;
        Object R_BR497_tree=null;

        try {
            // Objcm.g:805:2: ( L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR )
            // Objcm.g:805:4: L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR491=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24275); 
            L_BR491_tree = 
            (Object)adaptor.create(L_BR491)
            ;
            adaptor.addChild(root_0, L_BR491_tree);


            pushFollow(FOLLOW_type_internal_in_func_pointer24278);
            type_internal492=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal492.getTree());

            L_BR493=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24280); 
            L_BR493_tree = 
            (Object)adaptor.create(L_BR493)
            ;
            adaptor.addChild(root_0, L_BR493_tree);


            ASTERISK494=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer24283); 
            ASTERISK494_tree = 
            (Object)adaptor.create(ASTERISK494)
            ;
            adaptor.addChild(root_0, ASTERISK494_tree);


            R_BR495=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24286); 
            R_BR495_tree = 
            (Object)adaptor.create(R_BR495)
            ;
            adaptor.addChild(root_0, R_BR495_tree);


            pushFollow(FOLLOW_func_pointer_params_in_func_pointer24289);
            func_pointer_params496=func_pointer_params();

            state._fsp--;

            adaptor.addChild(root_0, func_pointer_params496.getTree());

            R_BR497=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24292); 
            R_BR497_tree = 
            (Object)adaptor.create(R_BR497)
            ;
            adaptor.addChild(root_0, R_BR497_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer2"


    public static class func_pointer_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_params"
    // Objcm.g:808:1: func_pointer_params : L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR ;
    public final ObjcmParser.func_pointer_params_return func_pointer_params() throws RecognitionException {
        ObjcmParser.func_pointer_params_return retval = new ObjcmParser.func_pointer_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR498=null;
        Token ID499=null;
        Token ASTERISK500=null;
        Token COMMA501=null;
        Token ID502=null;
        Token ASTERISK503=null;
        Token R_BR504=null;

        Object L_BR498_tree=null;
        Object ID499_tree=null;
        Object ASTERISK500_tree=null;
        Object COMMA501_tree=null;
        Object ID502_tree=null;
        Object ASTERISK503_tree=null;
        Object R_BR504_tree=null;

        try {
            // Objcm.g:809:2: ( L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR )
            // Objcm.g:809:4: L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR498=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer_params4305); 
            L_BR498_tree = 
            (Object)adaptor.create(L_BR498)
            ;
            adaptor.addChild(root_0, L_BR498_tree);


            ID499=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4308); 
            ID499_tree = 
            (Object)adaptor.create(ID499)
            ;
            adaptor.addChild(root_0, ID499_tree);


            // Objcm.g:809:14: ( ASTERISK )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==ASTERISK) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // Objcm.g:809:14: ASTERISK
            	    {
            	    ASTERISK500=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4311); 
            	    ASTERISK500_tree = 
            	    (Object)adaptor.create(ASTERISK500)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK500_tree);


            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            // Objcm.g:809:24: ( COMMA ID ( ASTERISK )* )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==COMMA) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // Objcm.g:809:25: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA501=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_pointer_params4315); 
            	    COMMA501_tree = 
            	    (Object)adaptor.create(COMMA501)
            	    ;
            	    adaptor.addChild(root_0, COMMA501_tree);


            	    ID502=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4318); 
            	    ID502_tree = 
            	    (Object)adaptor.create(ID502)
            	    ;
            	    adaptor.addChild(root_0, ID502_tree);


            	    // Objcm.g:809:36: ( ASTERISK )*
            	    loop128:
            	    do {
            	        int alt128=2;
            	        int LA128_0 = input.LA(1);

            	        if ( (LA128_0==ASTERISK) ) {
            	            alt128=1;
            	        }


            	        switch (alt128) {
            	    	case 1 :
            	    	    // Objcm.g:809:36: ASTERISK
            	    	    {
            	    	    ASTERISK503=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4321); 
            	    	    ASTERISK503_tree = 
            	    	    (Object)adaptor.create(ASTERISK503)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK503_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop128;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            R_BR504=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer_params4326); 
            R_BR504_tree = 
            (Object)adaptor.create(R_BR504)
            ;
            adaptor.addChild(root_0, R_BR504_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_params"


    public static class in_brackets_end1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_brackets_end1"
    // Objcm.g:811:1: in_brackets_end1 : ( L_BR expression R_BR | method_start ( index_brackets )? | ( L_PLUS_PLUS | L_MINUS_MINUS ) method_start | const_expr );
    public final ObjcmParser.in_brackets_end1_return in_brackets_end1() throws RecognitionException {
        ObjcmParser.in_brackets_end1_return retval = new ObjcmParser.in_brackets_end1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR505=null;
        Token R_BR507=null;
        Token set510=null;
        ObjcmParser.expression_return expression506 =null;

        ObjcmParser.method_start_return method_start508 =null;

        ObjcmParser.index_brackets_return index_brackets509 =null;

        ObjcmParser.method_start_return method_start511 =null;

        ObjcmParser.const_expr_return const_expr512 =null;


        Object L_BR505_tree=null;
        Object R_BR507_tree=null;
        Object set510_tree=null;

        try {
            // Objcm.g:812:2: ( L_BR expression R_BR | method_start ( index_brackets )? | ( L_PLUS_PLUS | L_MINUS_MINUS ) method_start | const_expr )
            int alt131=4;
            switch ( input.LA(1) ) {
            case L_BR:
                {
                alt131=1;
                }
                break;
            case ID:
                {
                alt131=2;
                }
                break;
            case L_MINUS_MINUS:
            case L_PLUS_PLUS:
                {
                alt131=3;
                }
                break;
            case NUMBER:
            case STRING_LITERAL:
            case STRING_LITERAL2:
            case STRING_LITERAL3:
            case 173:
            case 186:
                {
                alt131=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;

            }

            switch (alt131) {
                case 1 :
                    // Objcm.g:812:4: L_BR expression R_BR
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR505=(Token)match(input,L_BR,FOLLOW_L_BR_in_in_brackets_end14336); 
                    L_BR505_tree = 
                    (Object)adaptor.create(L_BR505)
                    ;
                    adaptor.addChild(root_0, L_BR505_tree);


                    pushFollow(FOLLOW_expression_in_in_brackets_end14339);
                    expression506=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression506.getTree());

                    R_BR507=(Token)match(input,R_BR,FOLLOW_R_BR_in_in_brackets_end14342); 
                    R_BR507_tree = 
                    (Object)adaptor.create(R_BR507)
                    ;
                    adaptor.addChild(root_0, R_BR507_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:813:4: method_start ( index_brackets )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_start_in_in_brackets_end14347);
                    method_start508=method_start();

                    state._fsp--;

                    adaptor.addChild(root_0, method_start508.getTree());

                    // Objcm.g:813:17: ( index_brackets )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==L_KBR) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // Objcm.g:813:17: index_brackets
                            {
                            pushFollow(FOLLOW_index_brackets_in_in_brackets_end14349);
                            index_brackets509=index_brackets();

                            state._fsp--;

                            adaptor.addChild(root_0, index_brackets509.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // Objcm.g:814:4: ( L_PLUS_PLUS | L_MINUS_MINUS ) method_start
                    {
                    root_0 = (Object)adaptor.nil();


                    set510=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set510)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_method_start_in_in_brackets_end14363);
                    method_start511=method_start();

                    state._fsp--;

                    adaptor.addChild(root_0, method_start511.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:815:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_in_brackets_end14368);
                    const_expr512=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr512.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_brackets_end1"


    public static class in_brackets_end2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_brackets_end2"
    // Objcm.g:818:1: in_brackets_end2 : ( L_BR expression R_BR | const_expr );
    public final ObjcmParser.in_brackets_end2_return in_brackets_end2() throws RecognitionException {
        ObjcmParser.in_brackets_end2_return retval = new ObjcmParser.in_brackets_end2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR513=null;
        Token R_BR515=null;
        ObjcmParser.expression_return expression514 =null;

        ObjcmParser.const_expr_return const_expr516 =null;


        Object L_BR513_tree=null;
        Object R_BR515_tree=null;

        try {
            // Objcm.g:819:2: ( L_BR expression R_BR | const_expr )
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==L_BR) ) {
                alt132=1;
            }
            else if ( (LA132_0==NUMBER||(LA132_0 >= STRING_LITERAL && LA132_0 <= STRING_LITERAL3)||LA132_0==173||LA132_0==186) ) {
                alt132=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;

            }
            switch (alt132) {
                case 1 :
                    // Objcm.g:819:4: L_BR expression R_BR
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR513=(Token)match(input,L_BR,FOLLOW_L_BR_in_in_brackets_end24380); 
                    L_BR513_tree = 
                    (Object)adaptor.create(L_BR513)
                    ;
                    adaptor.addChild(root_0, L_BR513_tree);


                    pushFollow(FOLLOW_expression_in_in_brackets_end24383);
                    expression514=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression514.getTree());

                    R_BR515=(Token)match(input,R_BR,FOLLOW_R_BR_in_in_brackets_end24386); 
                    R_BR515_tree = 
                    (Object)adaptor.create(R_BR515)
                    ;
                    adaptor.addChild(root_0, R_BR515_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:820:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_in_brackets_end24391);
                    const_expr516=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr516.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_brackets_end2"


    public static class method_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_start"
    // Objcm.g:823:1: method_start : ID ( method_brackets )? ;
    public final ObjcmParser.method_start_return method_start() throws RecognitionException {
        ObjcmParser.method_start_return retval = new ObjcmParser.method_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID517=null;
        ObjcmParser.method_brackets_return method_brackets518 =null;


        Object ID517_tree=null;

        try {
            // Objcm.g:824:2: ( ID ( method_brackets )? )
            // Objcm.g:824:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID517=(Token)match(input,ID,FOLLOW_ID_in_method_start4404); 
            ID517_tree = 
            (Object)adaptor.create(ID517)
            ;
            adaptor.addChild(root_0, ID517_tree);


            // Objcm.g:824:7: ( method_brackets )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==L_BR) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // Objcm.g:824:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_method_start4406);
                    method_brackets518=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets518.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_start"


    public static class in_q_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_q_brackets"
    // Objcm.g:826:1: in_q_brackets : L_FBR q_brackets_source R_FBR ;
    public final ObjcmParser.in_q_brackets_return in_q_brackets() throws RecognitionException {
        ObjcmParser.in_q_brackets_return retval = new ObjcmParser.in_q_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR519=null;
        Token R_FBR521=null;
        ObjcmParser.q_brackets_source_return q_brackets_source520 =null;


        Object L_FBR519_tree=null;
        Object R_FBR521_tree=null;

        try {
            // Objcm.g:827:2: ( L_FBR q_brackets_source R_FBR )
            // Objcm.g:827:4: L_FBR q_brackets_source R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR519=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_in_q_brackets4417); 
            L_FBR519_tree = 
            (Object)adaptor.create(L_FBR519)
            ;
            adaptor.addChild(root_0, L_FBR519_tree);


            pushFollow(FOLLOW_q_brackets_source_in_in_q_brackets4420);
            q_brackets_source520=q_brackets_source();

            state._fsp--;

            adaptor.addChild(root_0, q_brackets_source520.getTree());

            R_FBR521=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_in_q_brackets4422); 
            R_FBR521_tree = 
            (Object)adaptor.create(R_FBR521)
            ;
            adaptor.addChild(root_0, R_FBR521_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_q_brackets"


    public static class q_brackets_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_brackets_source"
    // Objcm.g:830:1: q_brackets_source : ( q_source | q_br_source );
    public final ObjcmParser.q_brackets_source_return q_brackets_source() throws RecognitionException {
        ObjcmParser.q_brackets_source_return retval = new ObjcmParser.q_brackets_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.q_source_return q_source522 =null;

        ObjcmParser.q_br_source_return q_br_source523 =null;



        try {
            // Objcm.g:831:2: ( q_source | q_br_source )
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==ASTERISK||LA134_0==ID||LA134_0==L_AND||LA134_0==L_BR||LA134_0==L_KBR||LA134_0==L_MINUS||LA134_0==L_MINUS_MINUS||LA134_0==L_NOT||LA134_0==L_PLUS||LA134_0==L_PLUS_PLUS||LA134_0==L_TILDA||LA134_0==NUMBER||LA134_0==R_FBR||LA134_0==SIZEOF||(LA134_0 >= STRING_LITERAL && LA134_0 <= STRING_LITERAL3)||LA134_0==161||LA134_0==167||LA134_0==169||LA134_0==173||LA134_0==184||LA134_0==186||LA134_0==191) ) {
                alt134=1;
            }
            else if ( (LA134_0==L_FBR) ) {
                alt134=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;

            }
            switch (alt134) {
                case 1 :
                    // Objcm.g:831:4: q_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_source_in_q_brackets_source4434);
                    q_source522=q_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_source522.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:832:4: q_br_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_br_source_in_q_brackets_source4439);
                    q_br_source523=q_br_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_br_source523.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_brackets_source"


    public static class q_br_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_br_source"
    // Objcm.g:835:1: q_br_source : in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? ;
    public final ObjcmParser.q_br_source_return q_br_source() throws RecognitionException {
        ObjcmParser.q_br_source_return retval = new ObjcmParser.q_br_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA525=null;
        Token COMMA527=null;
        ObjcmParser.in_q_brackets_return in_q_brackets524 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets526 =null;


        Object COMMA525_tree=null;
        Object COMMA527_tree=null;

        try {
            // Objcm.g:836:2: ( in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? )
            // Objcm.g:836:4: in_q_brackets ( COMMA in_q_brackets )* ( COMMA )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_in_q_brackets_in_q_br_source4452);
            in_q_brackets524=in_q_brackets();

            state._fsp--;

            adaptor.addChild(root_0, in_q_brackets524.getTree());

            // Objcm.g:836:19: ( COMMA in_q_brackets )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==COMMA) ) {
                    int LA135_1 = input.LA(2);

                    if ( (LA135_1==L_FBR) ) {
                        alt135=1;
                    }


                }


                switch (alt135) {
            	case 1 :
            	    // Objcm.g:836:20: COMMA in_q_brackets
            	    {
            	    COMMA525=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4456); 
            	    COMMA525_tree = 
            	    (Object)adaptor.create(COMMA525)
            	    ;
            	    adaptor.addChild(root_0, COMMA525_tree);


            	    pushFollow(FOLLOW_in_q_brackets_in_q_br_source4459);
            	    in_q_brackets526=in_q_brackets();

            	    state._fsp--;

            	    adaptor.addChild(root_0, in_q_brackets526.getTree());

            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            // Objcm.g:836:43: ( COMMA )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==COMMA) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // Objcm.g:836:43: COMMA
                    {
                    COMMA527=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4463); 
                    COMMA527_tree = 
                    (Object)adaptor.create(COMMA527)
                    ;
                    adaptor.addChild(root_0, COMMA527_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_br_source"


    public static class q_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_source"
    // Objcm.g:839:1: q_source : ( expression ( COMMA expression )* )? ;
    public final ObjcmParser.q_source_return q_source() throws RecognitionException {
        ObjcmParser.q_source_return retval = new ObjcmParser.q_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA529=null;
        ObjcmParser.expression_return expression528 =null;

        ObjcmParser.expression_return expression530 =null;


        Object COMMA529_tree=null;

        try {
            // Objcm.g:839:9: ( ( expression ( COMMA expression )* )? )
            // Objcm.g:839:11: ( expression ( COMMA expression )* )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:839:11: ( expression ( COMMA expression )* )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==ASTERISK||LA138_0==ID||LA138_0==L_AND||LA138_0==L_BR||LA138_0==L_KBR||LA138_0==L_MINUS||LA138_0==L_MINUS_MINUS||LA138_0==L_NOT||LA138_0==L_PLUS||LA138_0==L_PLUS_PLUS||LA138_0==L_TILDA||LA138_0==NUMBER||LA138_0==SIZEOF||(LA138_0 >= STRING_LITERAL && LA138_0 <= STRING_LITERAL3)||LA138_0==161||LA138_0==167||LA138_0==169||LA138_0==173||LA138_0==184||LA138_0==186||LA138_0==191) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // Objcm.g:839:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_q_source4475);
                    expression528=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression528.getTree());

                    // Objcm.g:839:24: ( COMMA expression )*
                    loop137:
                    do {
                        int alt137=2;
                        int LA137_0 = input.LA(1);

                        if ( (LA137_0==COMMA) ) {
                            alt137=1;
                        }


                        switch (alt137) {
                    	case 1 :
                    	    // Objcm.g:839:25: COMMA expression
                    	    {
                    	    COMMA529=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_source4479); 
                    	    COMMA529_tree = 
                    	    (Object)adaptor.create(COMMA529)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA529_tree);


                    	    pushFollow(FOLLOW_expression_in_q_source4482);
                    	    expression530=expression();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, expression530.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop137;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_source"


    public static class simple_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_method_call"
    // Objcm.g:842:1: simple_method_call : ID ( method_brackets )? ;
    public final ObjcmParser.simple_method_call_return simple_method_call() throws RecognitionException {
        ObjcmParser.simple_method_call_return retval = new ObjcmParser.simple_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID531=null;
        ObjcmParser.method_brackets_return method_brackets532 =null;


        Object ID531_tree=null;

        try {
            // Objcm.g:843:2: ( ID ( method_brackets )? )
            // Objcm.g:843:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID531=(Token)match(input,ID,FOLLOW_ID_in_simple_method_call4499); 
            ID531_tree = 
            (Object)adaptor.create(ID531)
            ;
            adaptor.addChild(root_0, ID531_tree);


            // Objcm.g:843:7: ( method_brackets )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==L_BR) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // Objcm.g:843:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_simple_method_call4501);
                    method_brackets532=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets532.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_method_call"


    public static class index_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_brackets"
    // Objcm.g:845:1: index_brackets : L_KBR classical_expr_wrp R_KBR ;
    public final ObjcmParser.index_brackets_return index_brackets() throws RecognitionException {
        ObjcmParser.index_brackets_return retval = new ObjcmParser.index_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR533=null;
        Token R_KBR535=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp534 =null;


        Object L_KBR533_tree=null;
        Object R_KBR535_tree=null;

        try {
            // Objcm.g:846:2: ( L_KBR classical_expr_wrp R_KBR )
            // Objcm.g:846:4: L_KBR classical_expr_wrp R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR533=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index_brackets4517); 
            L_KBR533_tree = 
            (Object)adaptor.create(L_KBR533)
            ;
            adaptor.addChild(root_0, L_KBR533_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_index_brackets4520);
            classical_expr_wrp534=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp534.getTree());

            R_KBR535=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index_brackets4522); 
            R_KBR535_tree = 
            (Object)adaptor.create(R_KBR535)
            ;
            adaptor.addChild(root_0, R_KBR535_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_brackets"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // Objcm.g:853:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcmParser.interface_declaration_wrapper_return retval = new ObjcmParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_declaration_return interface_declaration536 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // Objcm.g:854:2: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // Objcm.g:854:4: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper4536);
            interface_declaration536=interface_declaration();

            state._fsp--;

            stream_interface_declaration.add(interface_declaration536.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 854:26: -> ^( INTERFACE interface_declaration )
            {
                // Objcm.g:854:29: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // Objcm.g:856:1: interface_declaration : '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods )+ '@end' ;
    public final ObjcmParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcmParser.interface_declaration_return retval = new ObjcmParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal537=null;
        Token string_literal543=null;
        ObjcmParser.name_return name538 =null;

        ObjcmParser.interface_category_return interface_category539 =null;

        ObjcmParser.super_class_return super_class540 =null;

        ObjcmParser.annotated_block_return annotated_block541 =null;

        ObjcmParser.interface_methods_return interface_methods542 =null;


        Object string_literal537_tree=null;
        Object string_literal543_tree=null;

        try {
            // Objcm.g:857:2: ( '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods )+ '@end' )
            // Objcm.g:857:4: '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods )+ '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal537=(Token)match(input,165,FOLLOW_165_in_interface_declaration4554); 
            string_literal537_tree = 
            (Object)adaptor.create(string_literal537)
            ;
            adaptor.addChild(root_0, string_literal537_tree);


            pushFollow(FOLLOW_name_in_interface_declaration4557);
            name538=name();

            state._fsp--;

            adaptor.addChild(root_0, name538.getTree());

            // Objcm.g:857:24: ( interface_category )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==L_BR) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // Objcm.g:857:24: interface_category
                    {
                    pushFollow(FOLLOW_interface_category_in_interface_declaration4560);
                    interface_category539=interface_category();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_category539.getTree());

                    }
                    break;

            }


            // Objcm.g:857:44: ( super_class )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==COLON) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // Objcm.g:857:45: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_interface_declaration4564);
                    super_class540=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class540.getTree());

                    }
                    break;

            }


            // Objcm.g:858:3: ( annotated_block | interface_methods )+
            int cnt142=0;
            loop142:
            do {
                int alt142=3;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==L_FBR) ) {
                    alt142=1;
                }
                else if ( (LA142_0==ENUM_PREFIX||LA142_0==L_MINUS||LA142_0==L_PLUS) ) {
                    alt142=2;
                }


                switch (alt142) {
            	case 1 :
            	    // Objcm.g:858:4: annotated_block
            	    {
            	    pushFollow(FOLLOW_annotated_block_in_interface_declaration4571);
            	    annotated_block541=annotated_block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block541.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:858:22: interface_methods
            	    {
            	    pushFollow(FOLLOW_interface_methods_in_interface_declaration4575);
            	    interface_methods542=interface_methods();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_methods542.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt142 >= 1 ) break loop142;
                        EarlyExitException eee =
                            new EarlyExitException(142, input);
                        throw eee;
                }
                cnt142++;
            } while (true);


            string_literal543=(Token)match(input,162,FOLLOW_162_in_interface_declaration4584); 
            string_literal543_tree = 
            (Object)adaptor.create(string_literal543)
            ;
            adaptor.addChild(root_0, string_literal543_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class annotated_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block"
    // Objcm.g:862:1: annotated_block : L_FBR ( annotated_block_internal )* R_FBR ;
    public final ObjcmParser.annotated_block_return annotated_block() throws RecognitionException {
        ObjcmParser.annotated_block_return retval = new ObjcmParser.annotated_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR544=null;
        Token R_FBR546=null;
        ObjcmParser.annotated_block_internal_return annotated_block_internal545 =null;


        Object L_FBR544_tree=null;
        Object R_FBR546_tree=null;

        try {
            // Objcm.g:863:2: ( L_FBR ( annotated_block_internal )* R_FBR )
            // Objcm.g:863:4: L_FBR ( annotated_block_internal )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR544=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_annotated_block4595); 
            L_FBR544_tree = 
            (Object)adaptor.create(L_FBR544)
            ;
            adaptor.addChild(root_0, L_FBR544_tree);


            // Objcm.g:864:3: ( annotated_block_internal )*
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==ID||LA143_0==VOID||LA143_0==166||LA143_0==168||LA143_0==190) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // Objcm.g:864:3: annotated_block_internal
            	    {
            	    pushFollow(FOLLOW_annotated_block_internal_in_annotated_block4600);
            	    annotated_block_internal545=annotated_block_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block_internal545.getTree());

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            R_FBR546=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_annotated_block4605); 
            R_FBR546_tree = 
            (Object)adaptor.create(R_FBR546)
            ;
            adaptor.addChild(root_0, R_FBR546_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block"


    public static class annotated_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block_internal"
    // Objcm.g:868:1: annotated_block_internal : ( block_annotation | public_block_internal );
    public final ObjcmParser.annotated_block_internal_return annotated_block_internal() throws RecognitionException {
        ObjcmParser.annotated_block_internal_return retval = new ObjcmParser.annotated_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_annotation_return block_annotation547 =null;

        ObjcmParser.public_block_internal_return public_block_internal548 =null;



        try {
            // Objcm.g:869:2: ( block_annotation | public_block_internal )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==166||LA144_0==168) ) {
                alt144=1;
            }
            else if ( (LA144_0==ID||LA144_0==VOID||LA144_0==190) ) {
                alt144=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;

            }
            switch (alt144) {
                case 1 :
                    // Objcm.g:869:4: block_annotation
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_annotation_in_annotated_block_internal4618);
                    block_annotation547=block_annotation();

                    state._fsp--;

                    adaptor.addChild(root_0, block_annotation547.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:870:5: public_block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_public_block_internal_in_annotated_block_internal4625);
                    public_block_internal548=public_block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, public_block_internal548.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block_internal"


    public static class block_annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_annotation"
    // Objcm.g:873:1: block_annotation : ( '@public' | '@private' );
    public final ObjcmParser.block_annotation_return block_annotation() throws RecognitionException {
        ObjcmParser.block_annotation_return retval = new ObjcmParser.block_annotation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set549=null;

        Object set549_tree=null;

        try {
            // Objcm.g:874:2: ( '@public' | '@private' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set549=(Token)input.LT(1);

            if ( input.LA(1)==166||input.LA(1)==168 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set549)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_annotation"


    public static class public_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "public_block_internal"
    // Objcm.g:878:1: public_block_internal : ( simple_field_declaration | union_declaration );
    public final ObjcmParser.public_block_internal_return public_block_internal() throws RecognitionException {
        ObjcmParser.public_block_internal_return retval = new ObjcmParser.public_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_field_declaration_return simple_field_declaration550 =null;

        ObjcmParser.union_declaration_return union_declaration551 =null;



        try {
            // Objcm.g:879:2: ( simple_field_declaration | union_declaration )
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==ID||LA145_0==VOID) ) {
                alt145=1;
            }
            else if ( (LA145_0==190) ) {
                alt145=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;

            }
            switch (alt145) {
                case 1 :
                    // Objcm.g:879:4: simple_field_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_field_declaration_in_public_block_internal4660);
                    simple_field_declaration550=simple_field_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, simple_field_declaration550.getTree());

                    }
                    break;
                case 2 :
                    // Objcm.g:880:4: union_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_union_declaration_in_public_block_internal4665);
                    union_declaration551=union_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, union_declaration551.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "public_block_internal"


    public static class simple_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_field_declaration"
    // Objcm.g:883:1: simple_field_declaration : field_type name SEMICOLON ;
    public final ObjcmParser.simple_field_declaration_return simple_field_declaration() throws RecognitionException {
        ObjcmParser.simple_field_declaration_return retval = new ObjcmParser.simple_field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON554=null;
        ObjcmParser.field_type_return field_type552 =null;

        ObjcmParser.name_return name553 =null;


        Object SEMICOLON554_tree=null;

        try {
            // Objcm.g:884:2: ( field_type name SEMICOLON )
            // Objcm.g:884:4: field_type name SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_simple_field_declaration4677);
            field_type552=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type552.getTree());

            pushFollow(FOLLOW_name_in_simple_field_declaration4679);
            name553=name();

            state._fsp--;

            adaptor.addChild(root_0, name553.getTree());

            SEMICOLON554=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_field_declaration4682); 
            SEMICOLON554_tree = 
            (Object)adaptor.create(SEMICOLON554)
            ;
            adaptor.addChild(root_0, SEMICOLON554_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_field_declaration"


    public static class union_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_declaration"
    // Objcm.g:887:1: union_declaration : 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON ;
    public final ObjcmParser.union_declaration_return union_declaration() throws RecognitionException {
        ObjcmParser.union_declaration_return retval = new ObjcmParser.union_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal555=null;
        Token L_FBR556=null;
        Token R_FBR558=null;
        Token ID559=null;
        Token SEMICOLON560=null;
        ObjcmParser.simple_field_declaration_return simple_field_declaration557 =null;


        Object string_literal555_tree=null;
        Object L_FBR556_tree=null;
        Object R_FBR558_tree=null;
        Object ID559_tree=null;
        Object SEMICOLON560_tree=null;

        try {
            // Objcm.g:888:2: ( 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON )
            // Objcm.g:888:4: 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal555=(Token)match(input,190,FOLLOW_190_in_union_declaration4695); 
            string_literal555_tree = 
            (Object)adaptor.create(string_literal555)
            ;
            adaptor.addChild(root_0, string_literal555_tree);


            L_FBR556=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_union_declaration4698); 
            L_FBR556_tree = 
            (Object)adaptor.create(L_FBR556)
            ;
            adaptor.addChild(root_0, L_FBR556_tree);


            // Objcm.g:889:4: ( simple_field_declaration )+
            int cnt146=0;
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==ID||LA146_0==VOID) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    // Objcm.g:889:4: simple_field_declaration
            	    {
            	    pushFollow(FOLLOW_simple_field_declaration_in_union_declaration4704);
            	    simple_field_declaration557=simple_field_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_field_declaration557.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt146 >= 1 ) break loop146;
                        EarlyExitException eee =
                            new EarlyExitException(146, input);
                        throw eee;
                }
                cnt146++;
            } while (true);


            R_FBR558=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_union_declaration4709); 
            R_FBR558_tree = 
            (Object)adaptor.create(R_FBR558)
            ;
            adaptor.addChild(root_0, R_FBR558_tree);


            ID559=(Token)match(input,ID,FOLLOW_ID_in_union_declaration4712); 
            ID559_tree = 
            (Object)adaptor.create(ID559)
            ;
            adaptor.addChild(root_0, ID559_tree);


            SEMICOLON560=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_union_declaration4715); 
            SEMICOLON560_tree = 
            (Object)adaptor.create(SEMICOLON560)
            ;
            adaptor.addChild(root_0, SEMICOLON560_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_declaration"


    public static class super_class_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "super_class"
    // Objcm.g:893:1: super_class : COLON ID -> ^( SUPER_CLASS ID ) ;
    public final ObjcmParser.super_class_return super_class() throws RecognitionException {
        ObjcmParser.super_class_return retval = new ObjcmParser.super_class_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON561=null;
        Token ID562=null;

        Object COLON561_tree=null;
        Object ID562_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:894:2: ( COLON ID -> ^( SUPER_CLASS ID ) )
            // Objcm.g:894:4: COLON ID
            {
            COLON561=(Token)match(input,COLON,FOLLOW_COLON_in_super_class4729);  
            stream_COLON.add(COLON561);


            ID562=(Token)match(input,ID,FOLLOW_ID_in_super_class4732);  
            stream_ID.add(ID562);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 894:15: -> ^( SUPER_CLASS ID )
            {
                // Objcm.g:894:18: ^( SUPER_CLASS ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPER_CLASS, "SUPER_CLASS")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "super_class"


    public static class interface_category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_category"
    // Objcm.g:896:1: interface_category : L_BR ID R_BR -> ^( CATEGORY L_BR ID R_BR ) ;
    public final ObjcmParser.interface_category_return interface_category() throws RecognitionException {
        ObjcmParser.interface_category_return retval = new ObjcmParser.interface_category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR563=null;
        Token ID564=null;
        Token R_BR565=null;

        Object L_BR563_tree=null;
        Object ID564_tree=null;
        Object R_BR565_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");

        try {
            // Objcm.g:897:2: ( L_BR ID R_BR -> ^( CATEGORY L_BR ID R_BR ) )
            // Objcm.g:897:4: L_BR ID R_BR
            {
            L_BR563=(Token)match(input,L_BR,FOLLOW_L_BR_in_interface_category4752);  
            stream_L_BR.add(L_BR563);


            ID564=(Token)match(input,ID,FOLLOW_ID_in_interface_category4755);  
            stream_ID.add(ID564);


            R_BR565=(Token)match(input,R_BR,FOLLOW_R_BR_in_interface_category4758);  
            stream_R_BR.add(R_BR565);


            // AST REWRITE
            // elements: L_BR, ID, R_BR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 897:19: -> ^( CATEGORY L_BR ID R_BR )
            {
                // Objcm.g:897:22: ^( CATEGORY L_BR ID R_BR )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_L_BR.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_R_BR.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_category"


    public static class interface_methods_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_methods"
    // Objcm.g:899:1: interface_methods : ( enum_declaration | interface_method )+ ;
    public final ObjcmParser.interface_methods_return interface_methods() throws RecognitionException {
        ObjcmParser.interface_methods_return retval = new ObjcmParser.interface_methods_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.enum_declaration_return enum_declaration566 =null;

        ObjcmParser.interface_method_return interface_method567 =null;



        try {
            // Objcm.g:900:2: ( ( enum_declaration | interface_method )+ )
            // Objcm.g:900:4: ( enum_declaration | interface_method )+
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:900:4: ( enum_declaration | interface_method )+
            int cnt147=0;
            loop147:
            do {
                int alt147=3;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==ENUM_PREFIX) ) {
                    alt147=1;
                }
                else if ( (LA147_0==L_MINUS||LA147_0==L_PLUS) ) {
                    alt147=2;
                }


                switch (alt147) {
            	case 1 :
            	    // Objcm.g:900:5: enum_declaration
            	    {
            	    pushFollow(FOLLOW_enum_declaration_in_interface_methods4787);
            	    enum_declaration566=enum_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, enum_declaration566.getTree());

            	    }
            	    break;
            	case 2 :
            	    // Objcm.g:900:24: interface_method
            	    {
            	    pushFollow(FOLLOW_interface_method_in_interface_methods4791);
            	    interface_method567=interface_method();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_method567.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt147 >= 1 ) break loop147;
                        EarlyExitException eee =
                            new EarlyExitException(147, input);
                        throw eee;
                }
                cnt147++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_methods"


    public static class interface_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_method"
    // Objcm.g:902:1: interface_method : method_header -> ^( METHOD method_header ) ;
    public final ObjcmParser.interface_method_return interface_method() throws RecognitionException {
        ObjcmParser.interface_method_return retval = new ObjcmParser.interface_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_header_return method_header568 =null;


        RewriteRuleSubtreeStream stream_method_header=new RewriteRuleSubtreeStream(adaptor,"rule method_header");
        try {
            // Objcm.g:903:2: ( method_header -> ^( METHOD method_header ) )
            // Objcm.g:903:4: method_header
            {
            pushFollow(FOLLOW_method_header_in_interface_method4803);
            method_header568=method_header();

            state._fsp--;

            stream_method_header.add(method_header568.getTree());

            // AST REWRITE
            // elements: method_header
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 903:18: -> ^( METHOD method_header )
            {
                // Objcm.g:903:21: ^( METHOD method_header )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_method_header.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_method"


    public static class method_header_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header"
    // Objcm.g:905:1: method_header : method_header_body ( SEMICOLON )? ;
    public final ObjcmParser.method_header_return method_header() throws RecognitionException {
        ObjcmParser.method_header_return retval = new ObjcmParser.method_header_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON570=null;
        ObjcmParser.method_header_body_return method_header_body569 =null;


        Object SEMICOLON570_tree=null;

        try {
            // Objcm.g:906:2: ( method_header_body ( SEMICOLON )? )
            // Objcm.g:906:4: method_header_body ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_method_header4822);
            method_header_body569=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body569.getTree());

            // Objcm.g:906:23: ( SEMICOLON )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==SEMICOLON) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // Objcm.g:906:23: SEMICOLON
                    {
                    SEMICOLON570=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_method_header4824); 
                    SEMICOLON570_tree = 
                    (Object)adaptor.create(SEMICOLON570)
                    ;
                    adaptor.addChild(root_0, SEMICOLON570_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header"


    public static class method_header_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body"
    // Objcm.g:908:1: method_header_body : method_modifier_wrapper method_type name ( method_params )? ( va_args_wrapper )? ;
    public final ObjcmParser.method_header_body_return method_header_body() throws RecognitionException {
        ObjcmParser.method_header_body_return retval = new ObjcmParser.method_header_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper571 =null;

        ObjcmParser.method_type_return method_type572 =null;

        ObjcmParser.name_return name573 =null;

        ObjcmParser.method_params_return method_params574 =null;

        ObjcmParser.va_args_wrapper_return va_args_wrapper575 =null;



        try {
            // Objcm.g:909:2: ( method_modifier_wrapper method_type name ( method_params )? ( va_args_wrapper )? )
            // Objcm.g:909:4: method_modifier_wrapper method_type name ( method_params )? ( va_args_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_header_body4834);
            method_modifier_wrapper571=method_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_modifier_wrapper571.getTree());

            pushFollow(FOLLOW_method_type_in_method_header_body4837);
            method_type572=method_type();

            state._fsp--;

            adaptor.addChild(root_0, method_type572.getTree());

            pushFollow(FOLLOW_name_in_method_header_body4840);
            name573=name();

            state._fsp--;

            adaptor.addChild(root_0, name573.getTree());

            // Objcm.g:909:48: ( method_params )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==COLON||LA149_0==ID||LA149_0==L_BR||LA149_0==184) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // Objcm.g:909:48: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_header_body4843);
                    method_params574=method_params();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params574.getTree());

                    }
                    break;

            }


            // Objcm.g:909:63: ( va_args_wrapper )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==COMMA) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // Objcm.g:909:63: va_args_wrapper
                    {
                    pushFollow(FOLLOW_va_args_wrapper_in_method_header_body4846);
                    va_args_wrapper575=va_args_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, va_args_wrapper575.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body"


    public static class va_args_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args_wrapper"
    // Objcm.g:911:1: va_args_wrapper : va_args -> ^( VA_ARGS va_args ) ;
    public final ObjcmParser.va_args_wrapper_return va_args_wrapper() throws RecognitionException {
        ObjcmParser.va_args_wrapper_return retval = new ObjcmParser.va_args_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.va_args_return va_args576 =null;


        RewriteRuleSubtreeStream stream_va_args=new RewriteRuleSubtreeStream(adaptor,"rule va_args");
        try {
            // Objcm.g:912:2: ( va_args -> ^( VA_ARGS va_args ) )
            // Objcm.g:912:4: va_args
            {
            pushFollow(FOLLOW_va_args_in_va_args_wrapper4856);
            va_args576=va_args();

            state._fsp--;

            stream_va_args.add(va_args576.getTree());

            // AST REWRITE
            // elements: va_args
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 912:12: -> ^( VA_ARGS va_args )
            {
                // Objcm.g:912:15: ^( VA_ARGS va_args )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VA_ARGS, "VA_ARGS")
                , root_1);

                adaptor.addChild(root_1, stream_va_args.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args_wrapper"


    public static class va_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args"
    // Objcm.g:914:1: va_args : COMMA '...' ( SEMICOLON )? ;
    public final ObjcmParser.va_args_return va_args() throws RecognitionException {
        ObjcmParser.va_args_return retval = new ObjcmParser.va_args_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA577=null;
        Token string_literal578=null;
        Token SEMICOLON579=null;

        Object COMMA577_tree=null;
        Object string_literal578_tree=null;
        Object SEMICOLON579_tree=null;

        try {
            // Objcm.g:914:9: ( COMMA '...' ( SEMICOLON )? )
            // Objcm.g:914:11: COMMA '...' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            COMMA577=(Token)match(input,COMMA,FOLLOW_COMMA_in_va_args4873); 
            COMMA577_tree = 
            (Object)adaptor.create(COMMA577)
            ;
            adaptor.addChild(root_0, COMMA577_tree);


            string_literal578=(Token)match(input,159,FOLLOW_159_in_va_args4876); 
            string_literal578_tree = 
            (Object)adaptor.create(string_literal578)
            ;
            adaptor.addChild(root_0, string_literal578_tree);


            // Objcm.g:914:25: ( SEMICOLON )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==SEMICOLON) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // Objcm.g:914:25: SEMICOLON
                    {
                    SEMICOLON579=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_va_args4879); 
                    SEMICOLON579_tree = 
                    (Object)adaptor.create(SEMICOLON579)
                    ;
                    adaptor.addChild(root_0, SEMICOLON579_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args"


    public static class method_header_body2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body2"
    // Objcm.g:916:1: method_header_body2 : method_type name ( method_params2 )? ;
    public final ObjcmParser.method_header_body2_return method_header_body2() throws RecognitionException {
        ObjcmParser.method_header_body2_return retval = new ObjcmParser.method_header_body2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_type_return method_type580 =null;

        ObjcmParser.name_return name581 =null;

        ObjcmParser.method_params2_return method_params2582 =null;



        try {
            // Objcm.g:917:2: ( method_type name ( method_params2 )? )
            // Objcm.g:917:4: method_type name ( method_params2 )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_type_in_method_header_body24890);
            method_type580=method_type();

            state._fsp--;

            adaptor.addChild(root_0, method_type580.getTree());

            pushFollow(FOLLOW_name_in_method_header_body24892);
            name581=name();

            state._fsp--;

            adaptor.addChild(root_0, name581.getTree());

            // Objcm.g:917:22: ( method_params2 )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==L_BR) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // Objcm.g:917:22: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_method_header_body24895);
                    method_params2582=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params2582.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body2"


    public static class method_header_body3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body3"
    // Objcm.g:919:1: method_header_body3 : method_params2 ;
    public final ObjcmParser.method_header_body3_return method_header_body3() throws RecognitionException {
        ObjcmParser.method_header_body3_return retval = new ObjcmParser.method_header_body3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2583 =null;



        try {
            // Objcm.g:920:2: ( method_params2 )
            // Objcm.g:920:4: method_params2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_header_body34905);
            method_params2583=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2583.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body3"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // Objcm.g:922:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcmParser.method_modifier_wrapper_return retval = new ObjcmParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_return method_modifier584 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // Objcm.g:923:2: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // Objcm.g:923:4: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper4914);
            method_modifier584=method_modifier();

            state._fsp--;

            stream_method_modifier.add(method_modifier584.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 923:20: -> ^( MODIFIER method_modifier )
            {
                // Objcm.g:923:23: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // Objcm.g:925:1: method_modifier : ( '+' | '-' );
    public final ObjcmParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcmParser.method_modifier_return retval = new ObjcmParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set585=null;

        Object set585_tree=null;

        try {
            // Objcm.g:926:2: ( '+' | '-' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set585=(Token)input.LT(1);

            if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set585)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_type"
    // Objcm.g:928:1: method_type : ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE type_internal ) | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR -> ^( TYPE ( ID )+ ) );
    public final ObjcmParser.method_type_return method_type() throws RecognitionException {
        ObjcmParser.method_type_return retval = new ObjcmParser.method_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR586=null;
        Token STRUCT_PREFIX587=null;
        Token ASTERISK590=null;
        Token R_BR591=null;
        Token L_BR592=null;
        Token CONST_PREFIX593=null;
        Token ID595=null;
        Token ASTERISK597=null;
        Token R_BR598=null;
        ObjcmParser.type_internal_return type_internal588 =null;

        ObjcmParser.generic_return generic589 =null;

        ObjcmParser.known_types_return known_types594 =null;

        ObjcmParser.generic_return generic596 =null;


        Object L_BR586_tree=null;
        Object STRUCT_PREFIX587_tree=null;
        Object ASTERISK590_tree=null;
        Object R_BR591_tree=null;
        Object L_BR592_tree=null;
        Object CONST_PREFIX593_tree=null;
        Object ID595_tree=null;
        Object ASTERISK597_tree=null;
        Object R_BR598_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_STRUCT_PREFIX=new RewriteRuleTokenStream(adaptor,"token STRUCT_PREFIX");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        RewriteRuleSubtreeStream stream_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_internal");
        RewriteRuleSubtreeStream stream_known_types=new RewriteRuleSubtreeStream(adaptor,"rule known_types");
        try {
            // Objcm.g:929:2: ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR -> ^( TYPE type_internal ) | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR -> ^( TYPE ( ID )+ ) )
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==L_BR) ) {
                switch ( input.LA(2) ) {
                case STRUCT_PREFIX:
                    {
                    alt161=1;
                    }
                    break;
                case VOID:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        alt161=1;
                        }
                        break;
                    case L_LESS:
                        {
                        int LA161_11 = input.LA(4);

                        if ( (LA161_11==ID) ) {
                            alt161=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 161, 11, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA161_12 = input.LA(4);

                        if ( (LA161_12==R_BR) ) {
                            alt161=1;
                        }
                        else if ( (LA161_12==ASTERISK) ) {
                            alt161=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 161, 12, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt161=1;
                        }
                        break;
                    case ID:
                        {
                        alt161=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 161, 3, input);

                        throw nvae;

                    }

                    }
                    break;
                case ASTERISK:
                case CONST_PREFIX:
                case L_LESS:
                case R_BR:
                case 191:
                    {
                    alt161=2;
                    }
                    break;
                case ID:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        alt161=1;
                        }
                        break;
                    case L_LESS:
                        {
                        int LA161_16 = input.LA(4);

                        if ( (LA161_16==ID) ) {
                            alt161=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 161, 16, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA161_17 = input.LA(4);

                        if ( (LA161_17==R_BR) ) {
                            alt161=1;
                        }
                        else if ( (LA161_17==ASTERISK) ) {
                            alt161=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 161, 17, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt161=1;
                        }
                        break;
                    case ID:
                        {
                        alt161=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 161, 5, input);

                        throw nvae;

                    }

                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 161, 1, input);

                    throw nvae;

                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 161, 0, input);

                throw nvae;

            }
            switch (alt161) {
                case 1 :
                    // Objcm.g:929:4: L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR586=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type4946);  
                    stream_L_BR.add(L_BR586);


                    // Objcm.g:929:10: ( STRUCT_PREFIX )?
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==STRUCT_PREFIX) ) {
                        alt153=1;
                    }
                    switch (alt153) {
                        case 1 :
                            // Objcm.g:929:10: STRUCT_PREFIX
                            {
                            STRUCT_PREFIX587=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_type4949);  
                            stream_STRUCT_PREFIX.add(STRUCT_PREFIX587);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_internal_in_method_type4952);
                    type_internal588=type_internal();

                    state._fsp--;

                    stream_type_internal.add(type_internal588.getTree());

                    // Objcm.g:929:40: ( generic )?
                    int alt154=2;
                    int LA154_0 = input.LA(1);

                    if ( (LA154_0==L_LESS) ) {
                        alt154=1;
                    }
                    switch (alt154) {
                        case 1 :
                            // Objcm.g:929:40: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type4955);
                            generic589=generic();

                            state._fsp--;

                            stream_generic.add(generic589.getTree());

                            }
                            break;

                    }


                    // Objcm.g:929:49: ( ASTERISK )*
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);

                        if ( (LA155_0==ASTERISK) ) {
                            alt155=1;
                        }


                        switch (alt155) {
                    	case 1 :
                    	    // Objcm.g:929:49: ASTERISK
                    	    {
                    	    ASTERISK590=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type4958);  
                    	    stream_ASTERISK.add(ASTERISK590);


                    	    }
                    	    break;

                    	default :
                    	    break loop155;
                        }
                    } while (true);


                    R_BR591=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type4961);  
                    stream_R_BR.add(R_BR591);


                    // AST REWRITE
                    // elements: type_internal
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 929:64: -> ^( TYPE type_internal )
                    {
                        // Objcm.g:929:67: ^( TYPE type_internal )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE, "TYPE")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_internal.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:930:5: L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR592=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type4975);  
                    stream_L_BR.add(L_BR592);


                    // Objcm.g:930:11: ( CONST_PREFIX )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==CONST_PREFIX) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // Objcm.g:930:11: CONST_PREFIX
                            {
                            CONST_PREFIX593=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_type4978);  
                            stream_CONST_PREFIX.add(CONST_PREFIX593);


                            }
                            break;

                    }


                    // Objcm.g:930:25: ( known_types )?
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==VOID||LA157_0==191) ) {
                        alt157=1;
                    }
                    switch (alt157) {
                        case 1 :
                            // Objcm.g:930:25: known_types
                            {
                            pushFollow(FOLLOW_known_types_in_method_type4981);
                            known_types594=known_types();

                            state._fsp--;

                            stream_known_types.add(known_types594.getTree());

                            }
                            break;

                    }


                    // Objcm.g:930:38: ( ID )*
                    loop158:
                    do {
                        int alt158=2;
                        int LA158_0 = input.LA(1);

                        if ( (LA158_0==ID) ) {
                            alt158=1;
                        }


                        switch (alt158) {
                    	case 1 :
                    	    // Objcm.g:930:38: ID
                    	    {
                    	    ID595=(Token)match(input,ID,FOLLOW_ID_in_method_type4984);  
                    	    stream_ID.add(ID595);


                    	    }
                    	    break;

                    	default :
                    	    break loop158;
                        }
                    } while (true);


                    // Objcm.g:930:42: ( generic )?
                    int alt159=2;
                    int LA159_0 = input.LA(1);

                    if ( (LA159_0==L_LESS) ) {
                        alt159=1;
                    }
                    switch (alt159) {
                        case 1 :
                            // Objcm.g:930:42: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type4987);
                            generic596=generic();

                            state._fsp--;

                            stream_generic.add(generic596.getTree());

                            }
                            break;

                    }


                    // Objcm.g:930:51: ( ASTERISK )*
                    loop160:
                    do {
                        int alt160=2;
                        int LA160_0 = input.LA(1);

                        if ( (LA160_0==ASTERISK) ) {
                            alt160=1;
                        }


                        switch (alt160) {
                    	case 1 :
                    	    // Objcm.g:930:51: ASTERISK
                    	    {
                    	    ASTERISK597=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type4990);  
                    	    stream_ASTERISK.add(ASTERISK597);


                    	    }
                    	    break;

                    	default :
                    	    break loop160;
                        }
                    } while (true);


                    R_BR598=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type4993);  
                    stream_R_BR.add(R_BR598);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 930:66: -> ^( TYPE ( ID )+ )
                    {
                        // Objcm.g:930:69: ^( TYPE ( ID )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE, "TYPE")
                        , root_1);

                        if ( !(stream_ID.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_ID.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_ID.nextNode()
                            );

                        }
                        stream_ID.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_type"


    public static class type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal"
    // Objcm.g:933:1: type_internal : type_internal1 ( L_KBR R_KBR )? ;
    public final ObjcmParser.type_internal_return type_internal() throws RecognitionException {
        ObjcmParser.type_internal_return retval = new ObjcmParser.type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR600=null;
        Token R_KBR601=null;
        ObjcmParser.type_internal1_return type_internal1599 =null;


        Object L_KBR600_tree=null;
        Object R_KBR601_tree=null;

        try {
            // Objcm.g:934:2: ( type_internal1 ( L_KBR R_KBR )? )
            // Objcm.g:934:4: type_internal1 ( L_KBR R_KBR )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal1_in_type_internal5018);
            type_internal1599=type_internal1();

            state._fsp--;

            adaptor.addChild(root_0, type_internal1599.getTree());

            // Objcm.g:934:19: ( L_KBR R_KBR )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==L_KBR) ) {
                int LA162_1 = input.LA(2);

                if ( (LA162_1==R_KBR) ) {
                    alt162=1;
                }
            }
            switch (alt162) {
                case 1 :
                    // Objcm.g:934:20: L_KBR R_KBR
                    {
                    L_KBR600=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_type_internal5021); 
                    L_KBR600_tree = 
                    (Object)adaptor.create(L_KBR600)
                    ;
                    adaptor.addChild(root_0, L_KBR600_tree);


                    R_KBR601=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_type_internal5024); 
                    R_KBR601_tree = 
                    (Object)adaptor.create(R_KBR601)
                    ;
                    adaptor.addChild(root_0, R_KBR601_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal"


    public static class type_internal1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal1"
    // Objcm.g:937:1: type_internal1 : ( VOID | ID );
    public final ObjcmParser.type_internal1_return type_internal1() throws RecognitionException {
        ObjcmParser.type_internal1_return retval = new ObjcmParser.type_internal1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set602=null;

        Object set602_tree=null;

        try {
            // Objcm.g:938:2: ( VOID | ID )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set602=(Token)input.LT(1);

            if ( input.LA(1)==ID||input.LA(1)==VOID ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set602)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal1"


    public static class generic_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic"
    // Objcm.g:942:1: generic : L_LESS generic_internal L_MORE -> ^( GENERIC generic_internal ) ;
    public final ObjcmParser.generic_return generic() throws RecognitionException {
        ObjcmParser.generic_return retval = new ObjcmParser.generic_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_LESS603=null;
        Token L_MORE605=null;
        ObjcmParser.generic_internal_return generic_internal604 =null;


        Object L_LESS603_tree=null;
        Object L_MORE605_tree=null;
        RewriteRuleTokenStream stream_L_MORE=new RewriteRuleTokenStream(adaptor,"token L_MORE");
        RewriteRuleTokenStream stream_L_LESS=new RewriteRuleTokenStream(adaptor,"token L_LESS");
        RewriteRuleSubtreeStream stream_generic_internal=new RewriteRuleSubtreeStream(adaptor,"rule generic_internal");
        try {
            // Objcm.g:942:8: ( L_LESS generic_internal L_MORE -> ^( GENERIC generic_internal ) )
            // Objcm.g:942:10: L_LESS generic_internal L_MORE
            {
            L_LESS603=(Token)match(input,L_LESS,FOLLOW_L_LESS_in_generic5057);  
            stream_L_LESS.add(L_LESS603);


            pushFollow(FOLLOW_generic_internal_in_generic5059);
            generic_internal604=generic_internal();

            state._fsp--;

            stream_generic_internal.add(generic_internal604.getTree());

            L_MORE605=(Token)match(input,L_MORE,FOLLOW_L_MORE_in_generic5061);  
            stream_L_MORE.add(L_MORE605);


            // AST REWRITE
            // elements: generic_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 942:41: -> ^( GENERIC generic_internal )
            {
                // Objcm.g:942:44: ^( GENERIC generic_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GENERIC, "GENERIC")
                , root_1);

                adaptor.addChild(root_1, stream_generic_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic"


    public static class generic_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic_internal"
    // Objcm.g:944:1: generic_internal : ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* ;
    public final ObjcmParser.generic_internal_return generic_internal() throws RecognitionException {
        ObjcmParser.generic_internal_return retval = new ObjcmParser.generic_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID606=null;
        Token ASTERISK607=null;
        Token COMMA608=null;
        Token ID609=null;
        Token ASTERISK610=null;

        Object ID606_tree=null;
        Object ASTERISK607_tree=null;
        Object COMMA608_tree=null;
        Object ID609_tree=null;
        Object ASTERISK610_tree=null;

        try {
            // Objcm.g:945:2: ( ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* )
            // Objcm.g:945:5: ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )*
            {
            root_0 = (Object)adaptor.nil();


            ID606=(Token)match(input,ID,FOLLOW_ID_in_generic_internal5080); 
            ID606_tree = 
            (Object)adaptor.create(ID606)
            ;
            adaptor.addChild(root_0, ID606_tree);


            // Objcm.g:945:9: ( ASTERISK )*
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==ASTERISK) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // Objcm.g:945:9: ASTERISK
            	    {
            	    ASTERISK607=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal5083); 
            	    ASTERISK607_tree = 
            	    (Object)adaptor.create(ASTERISK607)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK607_tree);


            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);


            // Objcm.g:945:19: ( COMMA ID ( ASTERISK )* )*
            loop165:
            do {
                int alt165=2;
                int LA165_0 = input.LA(1);

                if ( (LA165_0==COMMA) ) {
                    alt165=1;
                }


                switch (alt165) {
            	case 1 :
            	    // Objcm.g:945:20: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA608=(Token)match(input,COMMA,FOLLOW_COMMA_in_generic_internal5087); 
            	    COMMA608_tree = 
            	    (Object)adaptor.create(COMMA608)
            	    ;
            	    adaptor.addChild(root_0, COMMA608_tree);


            	    ID609=(Token)match(input,ID,FOLLOW_ID_in_generic_internal5090); 
            	    ID609_tree = 
            	    (Object)adaptor.create(ID609)
            	    ;
            	    adaptor.addChild(root_0, ID609_tree);


            	    // Objcm.g:945:31: ( ASTERISK )*
            	    loop164:
            	    do {
            	        int alt164=2;
            	        int LA164_0 = input.LA(1);

            	        if ( (LA164_0==ASTERISK) ) {
            	            alt164=1;
            	        }


            	        switch (alt164) {
            	    	case 1 :
            	    	    // Objcm.g:945:31: ASTERISK
            	    	    {
            	    	    ASTERISK610=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal5093); 
            	    	    ASTERISK610_tree = 
            	    	    (Object)adaptor.create(ASTERISK610)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK610_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop164;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop165;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic_internal"


    public static class method_params2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params2"
    // Objcm.g:947:1: method_params2 : L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR ;
    public final ObjcmParser.method_params2_return method_params2() throws RecognitionException {
        ObjcmParser.method_params2_return retval = new ObjcmParser.method_params2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR611=null;
        Token COMMA613=null;
        Token R_BR615=null;
        ObjcmParser.method_param_wrapper2_return method_param_wrapper2612 =null;

        ObjcmParser.method_param_wrapper2_return method_param_wrapper2614 =null;


        Object L_BR611_tree=null;
        Object COMMA613_tree=null;
        Object R_BR615_tree=null;

        try {
            // Objcm.g:948:2: ( L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR )
            // Objcm.g:948:4: L_BR method_param_wrapper2 ( COMMA method_param_wrapper2 )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR611=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_params25105); 
            L_BR611_tree = 
            (Object)adaptor.create(L_BR611)
            ;
            adaptor.addChild(root_0, L_BR611_tree);


            pushFollow(FOLLOW_method_param_wrapper2_in_method_params25108);
            method_param_wrapper2612=method_param_wrapper2();

            state._fsp--;

            adaptor.addChild(root_0, method_param_wrapper2612.getTree());

            // Objcm.g:948:33: ( COMMA method_param_wrapper2 )*
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==COMMA) ) {
                    alt166=1;
                }


                switch (alt166) {
            	case 1 :
            	    // Objcm.g:948:34: COMMA method_param_wrapper2
            	    {
            	    COMMA613=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_params25112); 
            	    COMMA613_tree = 
            	    (Object)adaptor.create(COMMA613)
            	    ;
            	    adaptor.addChild(root_0, COMMA613_tree);


            	    pushFollow(FOLLOW_method_param_wrapper2_in_method_params25115);
            	    method_param_wrapper2614=method_param_wrapper2();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_param_wrapper2614.getTree());

            	    }
            	    break;

            	default :
            	    break loop166;
                }
            } while (true);


            R_BR615=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_params25119); 
            R_BR615_tree = 
            (Object)adaptor.create(R_BR615)
            ;
            adaptor.addChild(root_0, R_BR615_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params2"


    public static class method_param_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_wrapper2"
    // Objcm.g:951:1: method_param_wrapper2 : method_param2 -> ^( PARAM method_param2 ) ;
    public final ObjcmParser.method_param_wrapper2_return method_param_wrapper2() throws RecognitionException {
        ObjcmParser.method_param_wrapper2_return retval = new ObjcmParser.method_param_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param2_return method_param2616 =null;


        RewriteRuleSubtreeStream stream_method_param2=new RewriteRuleSubtreeStream(adaptor,"rule method_param2");
        try {
            // Objcm.g:952:2: ( method_param2 -> ^( PARAM method_param2 ) )
            // Objcm.g:952:4: method_param2
            {
            pushFollow(FOLLOW_method_param2_in_method_param_wrapper25130);
            method_param2616=method_param2();

            state._fsp--;

            stream_method_param2.add(method_param2616.getTree());

            // AST REWRITE
            // elements: method_param2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 952:18: -> ^( PARAM method_param2 )
            {
                // Objcm.g:952:21: ^( PARAM method_param2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM, "PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_method_param2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_wrapper2"


    public static class method_param2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param2"
    // Objcm.g:954:1: method_param2 : ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )? ;
    public final ObjcmParser.method_param2_return method_param2() throws RecognitionException {
        ObjcmParser.method_param2_return retval = new ObjcmParser.method_param2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX617=null;
        Token ENUM_PREFIX618=null;
        Token STRUCT_PREFIX619=null;
        Token string_literal620=null;
        ObjcmParser.field_type_return field_type621 =null;

        ObjcmParser.name_return name622 =null;

        ObjcmParser.indexed_return indexed623 =null;


        Object CONST_PREFIX617_tree=null;
        Object ENUM_PREFIX618_tree=null;
        Object STRUCT_PREFIX619_tree=null;
        Object string_literal620_tree=null;

        try {
            // Objcm.g:955:2: ( ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )? )
            // Objcm.g:955:4: ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( indexed )?
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:955:4: ( CONST_PREFIX )?
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==CONST_PREFIX) ) {
                alt167=1;
            }
            switch (alt167) {
                case 1 :
                    // Objcm.g:955:4: CONST_PREFIX
                    {
                    CONST_PREFIX617=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_param25148); 
                    CONST_PREFIX617_tree = 
                    (Object)adaptor.create(CONST_PREFIX617)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX617_tree);


                    }
                    break;

            }


            // Objcm.g:955:18: ( ENUM_PREFIX )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==ENUM_PREFIX) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // Objcm.g:955:18: ENUM_PREFIX
                    {
                    ENUM_PREFIX618=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_method_param25151); 
                    ENUM_PREFIX618_tree = 
                    (Object)adaptor.create(ENUM_PREFIX618)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX618_tree);


                    }
                    break;

            }


            // Objcm.g:955:31: ( STRUCT_PREFIX )?
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==STRUCT_PREFIX) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    // Objcm.g:955:31: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX619=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_param25154); 
                    STRUCT_PREFIX619_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX619)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX619_tree);


                    }
                    break;

            }


            // Objcm.g:955:46: ( 'unsigned' )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==191) ) {
                alt170=1;
            }
            switch (alt170) {
                case 1 :
                    // Objcm.g:955:46: 'unsigned'
                    {
                    string_literal620=(Token)match(input,191,FOLLOW_191_in_method_param25157); 
                    string_literal620_tree = 
                    (Object)adaptor.create(string_literal620)
                    ;
                    adaptor.addChild(root_0, string_literal620_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_method_param25160);
            field_type621=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type621.getTree());

            // Objcm.g:955:69: ( name )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==ID||LA171_0==184) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // Objcm.g:955:69: name
                    {
                    pushFollow(FOLLOW_name_in_method_param25162);
                    name622=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name622.getTree());

                    }
                    break;

            }


            // Objcm.g:955:75: ( indexed )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==L_KBR) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // Objcm.g:955:75: indexed
                    {
                    pushFollow(FOLLOW_indexed_in_method_param25165);
                    indexed623=indexed();

                    state._fsp--;

                    adaptor.addChild(root_0, indexed623.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param2"


    public static class indexed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexed"
    // Objcm.g:957:1: indexed : L_KBR ( NUMBER )? R_KBR ;
    public final ObjcmParser.indexed_return indexed() throws RecognitionException {
        ObjcmParser.indexed_return retval = new ObjcmParser.indexed_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR624=null;
        Token NUMBER625=null;
        Token R_KBR626=null;

        Object L_KBR624_tree=null;
        Object NUMBER625_tree=null;
        Object R_KBR626_tree=null;

        try {
            // Objcm.g:957:9: ( L_KBR ( NUMBER )? R_KBR )
            // Objcm.g:957:11: L_KBR ( NUMBER )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR624=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_indexed5175); 
            L_KBR624_tree = 
            (Object)adaptor.create(L_KBR624)
            ;
            adaptor.addChild(root_0, L_KBR624_tree);


            // Objcm.g:957:17: ( NUMBER )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==NUMBER) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // Objcm.g:957:17: NUMBER
                    {
                    NUMBER625=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_indexed5177); 
                    NUMBER625_tree = 
                    (Object)adaptor.create(NUMBER625)
                    ;
                    adaptor.addChild(root_0, NUMBER625_tree);


                    }
                    break;

            }


            R_KBR626=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_indexed5180); 
            R_KBR626_tree = 
            (Object)adaptor.create(R_KBR626)
            ;
            adaptor.addChild(root_0, R_KBR626_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexed"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // Objcm.g:959:1: method_params : ( method_param )+ -> ( ^( PARAM method_param ) )+ ;
    public final ObjcmParser.method_params_return method_params() throws RecognitionException {
        ObjcmParser.method_params_return retval = new ObjcmParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param_return method_param627 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // Objcm.g:960:2: ( ( method_param )+ -> ( ^( PARAM method_param ) )+ )
            // Objcm.g:960:4: ( method_param )+
            {
            // Objcm.g:960:4: ( method_param )+
            int cnt174=0;
            loop174:
            do {
                int alt174=2;
                int LA174_0 = input.LA(1);

                if ( (LA174_0==COLON||LA174_0==ID||LA174_0==L_BR||LA174_0==184) ) {
                    alt174=1;
                }


                switch (alt174) {
            	case 1 :
            	    // Objcm.g:960:4: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params5190);
            	    method_param627=method_param();

            	    state._fsp--;

            	    stream_method_param.add(method_param627.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt174 >= 1 ) break loop174;
                        EarlyExitException eee =
                            new EarlyExitException(174, input);
                        throw eee;
                }
                cnt174++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 960:18: -> ( ^( PARAM method_param ) )+
            {
                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    // Objcm.g:960:21: ^( PARAM method_param )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(PARAM, "PARAM")
                    , root_1);

                    adaptor.addChild(root_1, stream_method_param.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_method_param.reset();

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // Objcm.g:962:1: method_param : ( ( prefix )? | COLON ) ( method_type )? name ;
    public final ObjcmParser.method_param_return method_param() throws RecognitionException {
        ObjcmParser.method_param_return retval = new ObjcmParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON629=null;
        ObjcmParser.prefix_return prefix628 =null;

        ObjcmParser.method_type_return method_type630 =null;

        ObjcmParser.name_return name631 =null;


        Object COLON629_tree=null;

        try {
            // Objcm.g:963:2: ( ( ( prefix )? | COLON ) ( method_type )? name )
            // Objcm.g:963:4: ( ( prefix )? | COLON ) ( method_type )? name
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:963:4: ( ( prefix )? | COLON )
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==ID||LA176_0==L_BR||LA176_0==184) ) {
                alt176=1;
            }
            else if ( (LA176_0==COLON) ) {
                alt176=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;

            }
            switch (alt176) {
                case 1 :
                    // Objcm.g:963:5: ( prefix )?
                    {
                    // Objcm.g:963:5: ( prefix )?
                    int alt175=2;
                    int LA175_0 = input.LA(1);

                    if ( (LA175_0==ID) ) {
                        int LA175_1 = input.LA(2);

                        if ( (LA175_1==COLON) ) {
                            alt175=1;
                        }
                    }
                    switch (alt175) {
                        case 1 :
                            // Objcm.g:963:5: prefix
                            {
                            pushFollow(FOLLOW_prefix_in_method_param5212);
                            prefix628=prefix();

                            state._fsp--;

                            adaptor.addChild(root_0, prefix628.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // Objcm.g:963:15: COLON
                    {
                    COLON629=(Token)match(input,COLON,FOLLOW_COLON_in_method_param5217); 
                    COLON629_tree = 
                    (Object)adaptor.create(COLON629)
                    ;
                    adaptor.addChild(root_0, COLON629_tree);


                    }
                    break;

            }


            // Objcm.g:963:22: ( method_type )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==L_BR) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // Objcm.g:963:22: method_type
                    {
                    pushFollow(FOLLOW_method_type_in_method_param5220);
                    method_type630=method_type();

                    state._fsp--;

                    adaptor.addChild(root_0, method_type630.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_name_in_method_param5223);
            name631=name();

            state._fsp--;

            adaptor.addChild(root_0, name631.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // Objcm.g:966:1: prefix : ID COLON -> ^( PREFIX ID COLON ) ;
    public final ObjcmParser.prefix_return prefix() throws RecognitionException {
        ObjcmParser.prefix_return retval = new ObjcmParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID632=null;
        Token COLON633=null;

        Object ID632_tree=null;
        Object COLON633_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // Objcm.g:966:8: ( ID COLON -> ^( PREFIX ID COLON ) )
            // Objcm.g:966:10: ID COLON
            {
            ID632=(Token)match(input,ID,FOLLOW_ID_in_prefix5235);  
            stream_ID.add(ID632);


            COLON633=(Token)match(input,COLON,FOLLOW_COLON_in_prefix5237);  
            stream_COLON.add(COLON633);


            // AST REWRITE
            // elements: ID, COLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 966:19: -> ^( PREFIX ID COLON )
            {
                // Objcm.g:966:22: ^( PREFIX ID COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PREFIX, "PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class incomplete_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "incomplete_prefix"
    // Objcm.g:968:1: incomplete_prefix : COLON -> ^( INCOMPLETE_PREFIX COLON ) ;
    public final ObjcmParser.incomplete_prefix_return incomplete_prefix() throws RecognitionException {
        ObjcmParser.incomplete_prefix_return retval = new ObjcmParser.incomplete_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON634=null;

        Object COLON634_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");

        try {
            // Objcm.g:969:2: ( COLON -> ^( INCOMPLETE_PREFIX COLON ) )
            // Objcm.g:969:4: COLON
            {
            COLON634=(Token)match(input,COLON,FOLLOW_COLON_in_incomplete_prefix5256);  
            stream_COLON.add(COLON634);


            // AST REWRITE
            // elements: COLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 969:10: -> ^( INCOMPLETE_PREFIX COLON )
            {
                // Objcm.g:969:13: ^( INCOMPLETE_PREFIX COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INCOMPLETE_PREFIX, "INCOMPLETE_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "incomplete_prefix"


    public static class typedef_struct_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_wrapper"
    // Objcm.g:976:1: typedef_struct_declaration_wrapper : typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) ;
    public final ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration635 =null;


        RewriteRuleSubtreeStream stream_typedef_struct_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_struct_declaration");
        try {
            // Objcm.g:977:2: ( typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) )
            // Objcm.g:977:4: typedef_struct_declaration
            {
            pushFollow(FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5278);
            typedef_struct_declaration635=typedef_struct_declaration();

            state._fsp--;

            stream_typedef_struct_declaration.add(typedef_struct_declaration635.getTree());

            // AST REWRITE
            // elements: typedef_struct_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 977:31: -> ^( TYPEDEF_STRUCT typedef_struct_declaration )
            {
                // Objcm.g:977:34: ^( TYPEDEF_STRUCT typedef_struct_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_STRUCT, "TYPEDEF_STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_struct_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_wrapper"


    public static class typedef_struct_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration"
    // Objcm.g:980:1: typedef_struct_declaration : STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? ;
    public final ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_return retval = new ObjcmParser.typedef_struct_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX636=null;
        Token L_FBR638=null;
        Token R_FBR640=null;
        Token SEMICOLON642=null;
        ObjcmParser.name_return name637 =null;

        ObjcmParser.typedef_struct_body_return typedef_struct_body639 =null;

        ObjcmParser.name_return name641 =null;


        Object STRUCT_PREFIX636_tree=null;
        Object L_FBR638_tree=null;
        Object R_FBR640_tree=null;
        Object SEMICOLON642_tree=null;

        try {
            // Objcm.g:981:2: ( STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? )
            // Objcm.g:981:4: STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX636=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5298); 
            STRUCT_PREFIX636_tree = 
            (Object)adaptor.create(STRUCT_PREFIX636)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX636_tree);


            // Objcm.g:981:18: ( name )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==ID||LA178_0==184) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // Objcm.g:981:18: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5300);
                    name637=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name637.getTree());

                    }
                    break;

            }


            L_FBR638=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_struct_declaration5304); 
            L_FBR638_tree = 
            (Object)adaptor.create(L_FBR638)
            ;
            adaptor.addChild(root_0, L_FBR638_tree);


            // Objcm.g:983:3: ( typedef_struct_body )+
            int cnt179=0;
            loop179:
            do {
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==ID||LA179_0==VOID) ) {
                    alt179=1;
                }


                switch (alt179) {
            	case 1 :
            	    // Objcm.g:983:3: typedef_struct_body
            	    {
            	    pushFollow(FOLLOW_typedef_struct_body_in_typedef_struct_declaration5309);
            	    typedef_struct_body639=typedef_struct_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_struct_body639.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt179 >= 1 ) break loop179;
                        EarlyExitException eee =
                            new EarlyExitException(179, input);
                        throw eee;
                }
                cnt179++;
            } while (true);


            R_FBR640=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_struct_declaration5313); 
            R_FBR640_tree = 
            (Object)adaptor.create(R_FBR640)
            ;
            adaptor.addChild(root_0, R_FBR640_tree);


            // Objcm.g:984:9: ( name )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==ID) ) {
                int LA180_1 = input.LA(2);

                if ( (LA180_1==EOF||LA180_1==CONST_PREFIX||LA180_1==L_MINUS||LA180_1==L_PLUS||LA180_1==SEMICOLON||LA180_1==STATIC_PREFIX||LA180_1==STRUCT_PREFIX||LA180_1==VOID||LA180_1==162||(LA180_1 >= 164 && LA180_1 <= 165)||LA180_1==170||LA180_1==181||LA180_1==189) ) {
                    alt180=1;
                }
                else if ( (LA180_1==ID) ) {
                    int LA180_21 = input.LA(3);

                    if ( (LA180_21==ASTERISK||LA180_21==ID||LA180_21==L_KBR||LA180_21==L_LESS||LA180_21==184) ) {
                        alt180=1;
                    }
                }
            }
            else if ( (LA180_0==184) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // Objcm.g:984:9: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5316);
                    name641=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name641.getTree());

                    }
                    break;

            }


            // Objcm.g:984:15: ( SEMICOLON )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==SEMICOLON) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // Objcm.g:984:15: SEMICOLON
                    {
                    SEMICOLON642=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_struct_declaration5319); 
                    SEMICOLON642_tree = 
                    (Object)adaptor.create(SEMICOLON642)
                    ;
                    adaptor.addChild(root_0, SEMICOLON642_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration"


    public static class typedef_struct_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_body"
    // Objcm.g:987:1: typedef_struct_body : typedef_struct_declaration_element_wrapper ;
    public final ObjcmParser.typedef_struct_body_return typedef_struct_body() throws RecognitionException {
        ObjcmParser.typedef_struct_body_return retval = new ObjcmParser.typedef_struct_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper643 =null;



        try {
            // Objcm.g:988:2: ( typedef_struct_declaration_element_wrapper )
            // Objcm.g:988:4: typedef_struct_declaration_element_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5332);
            typedef_struct_declaration_element_wrapper643=typedef_struct_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_struct_declaration_element_wrapper643.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_body"


    public static class typedef_struct_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_element_wrapper"
    // Objcm.g:991:1: typedef_struct_declaration_element_wrapper : struct_field -> ^( STRUCT_FIELD struct_field ) ;
    public final ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_element_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_field_return struct_field644 =null;


        RewriteRuleSubtreeStream stream_struct_field=new RewriteRuleSubtreeStream(adaptor,"rule struct_field");
        try {
            // Objcm.g:992:2: ( struct_field -> ^( STRUCT_FIELD struct_field ) )
            // Objcm.g:992:4: struct_field
            {
            pushFollow(FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5344);
            struct_field644=struct_field();

            state._fsp--;

            stream_struct_field.add(struct_field644.getTree());

            // AST REWRITE
            // elements: struct_field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 992:17: -> ^( STRUCT_FIELD struct_field )
            {
                // Objcm.g:992:20: ^( STRUCT_FIELD struct_field )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT_FIELD, "STRUCT_FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_struct_field.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_element_wrapper"


    public static class struct_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_field"
    // Objcm.g:994:1: struct_field : field_type name ( COMMA name )* SEMICOLON ;
    public final ObjcmParser.struct_field_return struct_field() throws RecognitionException {
        ObjcmParser.struct_field_return retval = new ObjcmParser.struct_field_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA647=null;
        Token SEMICOLON649=null;
        ObjcmParser.field_type_return field_type645 =null;

        ObjcmParser.name_return name646 =null;

        ObjcmParser.name_return name648 =null;


        Object COMMA647_tree=null;
        Object SEMICOLON649_tree=null;

        try {
            // Objcm.g:995:2: ( field_type name ( COMMA name )* SEMICOLON )
            // Objcm.g:995:4: field_type name ( COMMA name )* SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_struct_field5362);
            field_type645=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type645.getTree());

            pushFollow(FOLLOW_name_in_struct_field5364);
            name646=name();

            state._fsp--;

            adaptor.addChild(root_0, name646.getTree());

            // Objcm.g:995:21: ( COMMA name )*
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==COMMA) ) {
                    alt182=1;
                }


                switch (alt182) {
            	case 1 :
            	    // Objcm.g:995:22: COMMA name
            	    {
            	    COMMA647=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_field5368); 
            	    COMMA647_tree = 
            	    (Object)adaptor.create(COMMA647)
            	    ;
            	    adaptor.addChild(root_0, COMMA647_tree);


            	    pushFollow(FOLLOW_name_in_struct_field5371);
            	    name648=name();

            	    state._fsp--;

            	    adaptor.addChild(root_0, name648.getTree());

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);


            SEMICOLON649=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_field5375); 
            SEMICOLON649_tree = 
            (Object)adaptor.create(SEMICOLON649)
            ;
            adaptor.addChild(root_0, SEMICOLON649_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_field"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // Objcm.g:1002:1: typedef_declaration_wrapper : typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_wrapper_return retval = new ObjcmParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration650 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // Objcm.g:1003:2: ( typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // Objcm.g:1003:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5391);
            typedef_declaration650=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration650.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1003:24: -> ^( TYPEDEF typedef_declaration )
            {
                // Objcm.g:1003:27: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class enum_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_declaration"
    // Objcm.g:1006:1: enum_declaration : typedef_declaration -> ^( ENUM typedef_declaration ) ;
    public final ObjcmParser.enum_declaration_return enum_declaration() throws RecognitionException {
        ObjcmParser.enum_declaration_return retval = new ObjcmParser.enum_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration651 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // Objcm.g:1007:2: ( typedef_declaration -> ^( ENUM typedef_declaration ) )
            // Objcm.g:1007:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_enum_declaration5411);
            typedef_declaration651=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration651.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1007:24: -> ^( ENUM typedef_declaration )
            {
                // Objcm.g:1007:27: ^( ENUM typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_declaration"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // Objcm.g:1009:1: typedef_declaration : ENUM_PREFIX L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON ;
    public final ObjcmParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcmParser.typedef_declaration_return retval = new ObjcmParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX652=null;
        Token L_FBR653=null;
        Token COMMA655=null;
        Token R_FBR657=null;
        Token SEMICOLON659=null;
        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper654 =null;

        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper656 =null;

        ObjcmParser.name_return name658 =null;


        Object ENUM_PREFIX652_tree=null;
        Object L_FBR653_tree=null;
        Object COMMA655_tree=null;
        Object R_FBR657_tree=null;
        Object SEMICOLON659_tree=null;

        try {
            // Objcm.g:1010:2: ( ENUM_PREFIX L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON )
            // Objcm.g:1010:5: ENUM_PREFIX L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX652=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_typedef_declaration5431); 
            ENUM_PREFIX652_tree = 
            (Object)adaptor.create(ENUM_PREFIX652)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX652_tree);


            L_FBR653=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_declaration5433); 
            L_FBR653_tree = 
            (Object)adaptor.create(L_FBR653)
            ;
            adaptor.addChild(root_0, L_FBR653_tree);


            pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5436);
            typedef_declaration_element_wrapper654=typedef_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_declaration_element_wrapper654.getTree());

            // Objcm.g:1010:61: ( COMMA typedef_declaration_element_wrapper )*
            loop183:
            do {
                int alt183=2;
                int LA183_0 = input.LA(1);

                if ( (LA183_0==COMMA) ) {
                    alt183=1;
                }


                switch (alt183) {
            	case 1 :
            	    // Objcm.g:1010:62: COMMA typedef_declaration_element_wrapper
            	    {
            	    COMMA655=(Token)match(input,COMMA,FOLLOW_COMMA_in_typedef_declaration5440); 
            	    COMMA655_tree = 
            	    (Object)adaptor.create(COMMA655)
            	    ;
            	    adaptor.addChild(root_0, COMMA655_tree);


            	    pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5443);
            	    typedef_declaration_element_wrapper656=typedef_declaration_element_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_declaration_element_wrapper656.getTree());

            	    }
            	    break;

            	default :
            	    break loop183;
                }
            } while (true);


            R_FBR657=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_declaration5447); 
            R_FBR657_tree = 
            (Object)adaptor.create(R_FBR657)
            ;
            adaptor.addChild(root_0, R_FBR657_tree);


            // Objcm.g:1010:114: ( name )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==ID||LA184_0==184) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // Objcm.g:1010:114: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_declaration5450);
                    name658=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name658.getTree());

                    }
                    break;

            }


            SEMICOLON659=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_declaration5453); 
            SEMICOLON659_tree = 
            (Object)adaptor.create(SEMICOLON659)
            ;
            adaptor.addChild(root_0, SEMICOLON659_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class typedef_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element_wrapper"
    // Objcm.g:1012:1: typedef_declaration_element_wrapper : typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) ;
    public final ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_wrapper_return retval = new ObjcmParser.typedef_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_element_return typedef_declaration_element660 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration_element=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration_element");
        try {
            // Objcm.g:1013:2: ( typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) )
            // Objcm.g:1013:4: typedef_declaration_element
            {
            pushFollow(FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5463);
            typedef_declaration_element660=typedef_declaration_element();

            state._fsp--;

            stream_typedef_declaration_element.add(typedef_declaration_element660.getTree());

            // AST REWRITE
            // elements: typedef_declaration_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1013:32: -> ^( TYPEDEF_ELEMENT typedef_declaration_element )
            {
                // Objcm.g:1013:35: ^( TYPEDEF_ELEMENT typedef_declaration_element )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_ELEMENT, "TYPEDEF_ELEMENT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration_element.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element_wrapper"


    public static class typedef_declaration_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element"
    // Objcm.g:1016:1: typedef_declaration_element : ID ( L_EQ ( ID | NUMBER ) )? ;
    public final ObjcmParser.typedef_declaration_element_return typedef_declaration_element() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_return retval = new ObjcmParser.typedef_declaration_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID661=null;
        Token L_EQ662=null;
        Token set663=null;

        Object ID661_tree=null;
        Object L_EQ662_tree=null;
        Object set663_tree=null;

        try {
            // Objcm.g:1017:2: ( ID ( L_EQ ( ID | NUMBER ) )? )
            // Objcm.g:1017:4: ID ( L_EQ ( ID | NUMBER ) )?
            {
            root_0 = (Object)adaptor.nil();


            ID661=(Token)match(input,ID,FOLLOW_ID_in_typedef_declaration_element5482); 
            ID661_tree = 
            (Object)adaptor.create(ID661)
            ;
            adaptor.addChild(root_0, ID661_tree);


            // Objcm.g:1017:8: ( L_EQ ( ID | NUMBER ) )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==L_EQ) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // Objcm.g:1017:9: L_EQ ( ID | NUMBER )
                    {
                    L_EQ662=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_typedef_declaration_element5486); 
                    L_EQ662_tree = 
                    (Object)adaptor.create(L_EQ662)
                    ;
                    adaptor.addChild(root_0, L_EQ662_tree);


                    set663=(Token)input.LT(1);

                    if ( input.LA(1)==ID||input.LA(1)==NUMBER ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set663)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // Objcm.g:1024:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_wrapper_return retval = new ObjcmParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_return field_declaration664 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // Objcm.g:1025:2: ( field_declaration -> ^( FIELD field_declaration ) )
            // Objcm.g:1025:4: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper5510);
            field_declaration664=field_declaration();

            state._fsp--;

            stream_field_declaration.add(field_declaration664.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1025:22: -> ^( FIELD field_declaration )
            {
                // Objcm.g:1025:25: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // Objcm.g:1027:1: field_declaration : field_modifier_wrapper field_type name field_declaration_end ;
    public final ObjcmParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcmParser.field_declaration_return retval = new ObjcmParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper665 =null;

        ObjcmParser.field_type_return field_type666 =null;

        ObjcmParser.name_return name667 =null;

        ObjcmParser.field_declaration_end_return field_declaration_end668 =null;



        try {
            // Objcm.g:1028:2: ( field_modifier_wrapper field_type name field_declaration_end )
            // Objcm.g:1028:4: field_modifier_wrapper field_type name field_declaration_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_modifier_wrapper_in_field_declaration5527);
            field_modifier_wrapper665=field_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, field_modifier_wrapper665.getTree());

            pushFollow(FOLLOW_field_type_in_field_declaration5530);
            field_type666=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type666.getTree());

            pushFollow(FOLLOW_name_in_field_declaration5532);
            name667=name();

            state._fsp--;

            adaptor.addChild(root_0, name667.getTree());

            pushFollow(FOLLOW_field_declaration_end_in_field_declaration5534);
            field_declaration_end668=field_declaration_end();

            state._fsp--;

            adaptor.addChild(root_0, field_declaration_end668.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end"
    // Objcm.g:1030:1: field_declaration_end : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_declaration_end_return field_declaration_end() throws RecognitionException {
        ObjcmParser.field_declaration_end_return retval = new ObjcmParser.field_declaration_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON670=null;
        ObjcmParser.value_set_return value_set669 =null;


        Object SEMICOLON670_tree=null;

        try {
            // Objcm.g:1031:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:1031:5: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1031:5: ( value_set )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==L_EQ) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // Objcm.g:1031:5: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_declaration_end5545);
                    value_set669=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set669.getTree());

                    }
                    break;

            }


            SEMICOLON670=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration_end5548); 
            SEMICOLON670_tree = 
            (Object)adaptor.create(SEMICOLON670)
            ;
            adaptor.addChild(root_0, SEMICOLON670_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end"


    public static class type_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start_wrapper"
    // Objcm.g:1033:1: type_start_wrapper : type_start -> ^( M_TYPE_START type_start ) ;
    public final ObjcmParser.type_start_wrapper_return type_start_wrapper() throws RecognitionException {
        ObjcmParser.type_start_wrapper_return retval = new ObjcmParser.type_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_start_return type_start671 =null;


        RewriteRuleSubtreeStream stream_type_start=new RewriteRuleSubtreeStream(adaptor,"rule type_start");
        try {
            // Objcm.g:1034:2: ( type_start -> ^( M_TYPE_START type_start ) )
            // Objcm.g:1034:4: type_start
            {
            pushFollow(FOLLOW_type_start_in_type_start_wrapper5558);
            type_start671=type_start();

            state._fsp--;

            stream_type_start.add(type_start671.getTree());

            // AST REWRITE
            // elements: type_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1034:15: -> ^( M_TYPE_START type_start )
            {
                // Objcm.g:1034:18: ^( M_TYPE_START type_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(M_TYPE_START, "M_TYPE_START")
                , root_1);

                adaptor.addChild(root_1, stream_type_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start_wrapper"


    public static class type_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start"
    // Objcm.g:1036:1: type_start : ( CONST_PREFIX )? field_type name type_end ;
    public final ObjcmParser.type_start_return type_start() throws RecognitionException {
        ObjcmParser.type_start_return retval = new ObjcmParser.type_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX672=null;
        ObjcmParser.field_type_return field_type673 =null;

        ObjcmParser.name_return name674 =null;

        ObjcmParser.type_end_return type_end675 =null;


        Object CONST_PREFIX672_tree=null;

        try {
            // Objcm.g:1037:2: ( ( CONST_PREFIX )? field_type name type_end )
            // Objcm.g:1037:4: ( CONST_PREFIX )? field_type name type_end
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1037:4: ( CONST_PREFIX )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==CONST_PREFIX) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // Objcm.g:1037:4: CONST_PREFIX
                    {
                    CONST_PREFIX672=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_start5575); 
                    CONST_PREFIX672_tree = 
                    (Object)adaptor.create(CONST_PREFIX672)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX672_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_type_start5578);
            field_type673=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type673.getTree());

            pushFollow(FOLLOW_name_in_type_start5580);
            name674=name();

            state._fsp--;

            adaptor.addChild(root_0, name674.getTree());

            pushFollow(FOLLOW_type_end_in_type_start5582);
            type_end675=type_end();

            state._fsp--;

            adaptor.addChild(root_0, type_end675.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start"


    public static class type_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_end"
    // Objcm.g:1039:1: type_end : ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) );
    public final ObjcmParser.type_end_return type_end() throws RecognitionException {
        ObjcmParser.type_end_return retval = new ObjcmParser.type_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration4_return field_declaration4676 =null;

        ObjcmParser.method_declaration4_return method_declaration4677 =null;


        RewriteRuleSubtreeStream stream_field_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration4");
        RewriteRuleSubtreeStream stream_method_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration4");
        try {
            // Objcm.g:1039:9: ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) )
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==L_EQ||LA188_0==SEMICOLON) ) {
                alt188=1;
            }
            else if ( (LA188_0==L_BR) ) {
                alt188=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 188, 0, input);

                throw nvae;

            }
            switch (alt188) {
                case 1 :
                    // Objcm.g:1039:11: field_declaration4
                    {
                    pushFollow(FOLLOW_field_declaration4_in_type_end5590);
                    field_declaration4676=field_declaration4();

                    state._fsp--;

                    stream_field_declaration4.add(field_declaration4676.getTree());

                    // AST REWRITE
                    // elements: field_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1039:30: -> ^( FIELD field_declaration4 )
                    {
                        // Objcm.g:1039:33: ^( FIELD field_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD, "FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_field_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // Objcm.g:1040:4: method_declaration4
                    {
                    pushFollow(FOLLOW_method_declaration4_in_type_end5603);
                    method_declaration4677=method_declaration4();

                    state._fsp--;

                    stream_method_declaration4.add(method_declaration4677.getTree());

                    // AST REWRITE
                    // elements: method_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1040:24: -> ^( STATIC_METHOD method_declaration4 )
                    {
                        // Objcm.g:1040:27: ^( STATIC_METHOD method_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_end"


    public static class field_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration4"
    // Objcm.g:1043:1: field_declaration4 : ( value_set )? SEMICOLON ;
    public final ObjcmParser.field_declaration4_return field_declaration4() throws RecognitionException {
        ObjcmParser.field_declaration4_return retval = new ObjcmParser.field_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON679=null;
        ObjcmParser.value_set_return value_set678 =null;


        Object SEMICOLON679_tree=null;

        try {
            // Objcm.g:1044:2: ( ( value_set )? SEMICOLON )
            // Objcm.g:1044:5: ( value_set )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // Objcm.g:1044:5: ( value_set )?
            int alt189=2;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==L_EQ) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    // Objcm.g:1044:5: value_set
                    {
                    pushFollow(FOLLOW_value_set_in_field_declaration45625);
                    value_set678=value_set();

                    state._fsp--;

                    adaptor.addChild(root_0, value_set678.getTree());

                    }
                    break;

            }


            SEMICOLON679=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration45628); 
            SEMICOLON679_tree = 
            (Object)adaptor.create(SEMICOLON679)
            ;
            adaptor.addChild(root_0, SEMICOLON679_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration4"


    public static class method_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration4"
    // Objcm.g:1047:1: method_declaration4 : method_params2 block_wrapper ;
    public final ObjcmParser.method_declaration4_return method_declaration4() throws RecognitionException {
        ObjcmParser.method_declaration4_return retval = new ObjcmParser.method_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2680 =null;

        ObjcmParser.block_wrapper_return block_wrapper681 =null;



        try {
            // Objcm.g:1048:2: ( method_params2 block_wrapper )
            // Objcm.g:1048:5: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_declaration45641);
            method_params2680=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2680.getTree());

            pushFollow(FOLLOW_block_wrapper_in_method_declaration45646);
            block_wrapper681=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper681.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration4"


    public static class field_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier_wrapper"
    // Objcm.g:1052:1: field_modifier_wrapper : field_modifier -> ^( MODIFIER field_modifier ) ;
    public final ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper() throws RecognitionException {
        ObjcmParser.field_modifier_wrapper_return retval = new ObjcmParser.field_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_return field_modifier682 =null;


        RewriteRuleSubtreeStream stream_field_modifier=new RewriteRuleSubtreeStream(adaptor,"rule field_modifier");
        try {
            // Objcm.g:1053:2: ( field_modifier -> ^( MODIFIER field_modifier ) )
            // Objcm.g:1053:4: field_modifier
            {
            pushFollow(FOLLOW_field_modifier_in_field_modifier_wrapper5658);
            field_modifier682=field_modifier();

            state._fsp--;

            stream_field_modifier.add(field_modifier682.getTree());

            // AST REWRITE
            // elements: field_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1053:19: -> ^( MODIFIER field_modifier )
            {
                // Objcm.g:1053:22: ^( MODIFIER field_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_field_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier_wrapper"


    public static class field_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier"
    // Objcm.g:1055:1: field_modifier : 'extern' ;
    public final ObjcmParser.field_modifier_return field_modifier() throws RecognitionException {
        ObjcmParser.field_modifier_return retval = new ObjcmParser.field_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal683=null;

        Object string_literal683_tree=null;

        try {
            // Objcm.g:1056:2: ( 'extern' )
            // Objcm.g:1056:4: 'extern'
            {
            root_0 = (Object)adaptor.nil();


            string_literal683=(Token)match(input,181,FOLLOW_181_in_field_modifier5676); 
            string_literal683_tree = 
            (Object)adaptor.create(string_literal683)
            ;
            adaptor.addChild(root_0, string_literal683_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier"


    public static class field_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type"
    // Objcm.g:1059:1: field_type : field_type_internal -> ^( TYPE field_type_internal ) ;
    public final ObjcmParser.field_type_return field_type() throws RecognitionException {
        ObjcmParser.field_type_return retval = new ObjcmParser.field_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_internal_return field_type_internal684 =null;


        RewriteRuleSubtreeStream stream_field_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_type_internal");
        try {
            // Objcm.g:1060:2: ( field_type_internal -> ^( TYPE field_type_internal ) )
            // Objcm.g:1060:5: field_type_internal
            {
            pushFollow(FOLLOW_field_type_internal_in_field_type5688);
            field_type_internal684=field_type_internal();

            state._fsp--;

            stream_field_type_internal.add(field_type_internal684.getTree());

            // AST REWRITE
            // elements: field_type_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1060:25: -> ^( TYPE field_type_internal )
            {
                // Objcm.g:1060:28: ^( TYPE field_type_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE, "TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type"


    public static class field_type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_internal"
    // Objcm.g:1062:1: field_type_internal : type_internal ( generic )? ( ASTERISK )* ;
    public final ObjcmParser.field_type_internal_return field_type_internal() throws RecognitionException {
        ObjcmParser.field_type_internal_return retval = new ObjcmParser.field_type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK687=null;
        ObjcmParser.type_internal_return type_internal685 =null;

        ObjcmParser.generic_return generic686 =null;


        Object ASTERISK687_tree=null;

        try {
            // Objcm.g:1063:2: ( type_internal ( generic )? ( ASTERISK )* )
            // Objcm.g:1063:4: type_internal ( generic )? ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_field_type_internal5707);
            type_internal685=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal685.getTree());

            // Objcm.g:1063:18: ( generic )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==L_LESS) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // Objcm.g:1063:18: generic
                    {
                    pushFollow(FOLLOW_generic_in_field_type_internal5709);
                    generic686=generic();

                    state._fsp--;

                    adaptor.addChild(root_0, generic686.getTree());

                    }
                    break;

            }


            // Objcm.g:1063:27: ( ASTERISK )*
            loop191:
            do {
                int alt191=2;
                int LA191_0 = input.LA(1);

                if ( (LA191_0==ASTERISK) ) {
                    alt191=1;
                }


                switch (alt191) {
            	case 1 :
            	    // Objcm.g:1063:27: ASTERISK
            	    {
            	    ASTERISK687=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_field_type_internal5712); 
            	    ASTERISK687_tree = 
            	    (Object)adaptor.create(ASTERISK687)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK687_tree);


            	    }
            	    break;

            	default :
            	    break loop191;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_internal"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // Objcm.g:1069:1: name : name_internal -> ^( NAME name_internal ) ;
    public final ObjcmParser.name_return name() throws RecognitionException {
        ObjcmParser.name_return retval = new ObjcmParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal688 =null;


        RewriteRuleSubtreeStream stream_name_internal=new RewriteRuleSubtreeStream(adaptor,"rule name_internal");
        try {
            // Objcm.g:1070:2: ( name_internal -> ^( NAME name_internal ) )
            // Objcm.g:1070:4: name_internal
            {
            pushFollow(FOLLOW_name_internal_in_name5726);
            name_internal688=name_internal();

            state._fsp--;

            stream_name_internal.add(name_internal688.getTree());

            // AST REWRITE
            // elements: name_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1070:18: -> ^( NAME name_internal )
            {
                // Objcm.g:1070:21: ^( NAME name_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, stream_name_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_internal"
    // Objcm.g:1073:1: name_internal : ( ID | 'in' );
    public final ObjcmParser.name_internal_return name_internal() throws RecognitionException {
        ObjcmParser.name_internal_return retval = new ObjcmParser.name_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set689=null;

        Object set689_tree=null;

        try {
            // Objcm.g:1074:2: ( ID | 'in' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set689=(Token)input.LT(1);

            if ( input.LA(1)==ID||input.LA(1)==184 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set689)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_internal"


    public static class value_set_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value_set"
    // Objcm.g:1078:1: value_set : L_EQ value -> ^( VALUE value ) ;
    public final ObjcmParser.value_set_return value_set() throws RecognitionException {
        ObjcmParser.value_set_return retval = new ObjcmParser.value_set_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_EQ690=null;
        ObjcmParser.value_return value691 =null;


        Object L_EQ690_tree=null;
        RewriteRuleTokenStream stream_L_EQ=new RewriteRuleTokenStream(adaptor,"token L_EQ");
        RewriteRuleSubtreeStream stream_value=new RewriteRuleSubtreeStream(adaptor,"rule value");
        try {
            // Objcm.g:1079:2: ( L_EQ value -> ^( VALUE value ) )
            // Objcm.g:1079:4: L_EQ value
            {
            L_EQ690=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_value_set5766);  
            stream_L_EQ.add(L_EQ690);


            pushFollow(FOLLOW_value_in_value_set5769);
            value691=value();

            state._fsp--;

            stream_value.add(value691.getTree());

            // AST REWRITE
            // elements: value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1079:16: -> ^( VALUE value )
            {
                // Objcm.g:1079:19: ^( VALUE value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VALUE, "VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "value_set"


    public static class value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "value"
    // Objcm.g:1081:1: value : ( ID | string_value | null_stmt | array | NUMBER | struct_init2 );
    public final ObjcmParser.value_return value() throws RecognitionException {
        ObjcmParser.value_return retval = new ObjcmParser.value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID692=null;
        Token NUMBER696=null;
        ObjcmParser.string_value_return string_value693 =null;

        ObjcmParser.null_stmt_return null_stmt694 =null;

        ObjcmParser.array_return array695 =null;

        ObjcmParser.struct_init2_return struct_init2697 =null;


        Object ID692_tree=null;
        Object NUMBER696_tree=null;

        try {
            // Objcm.g:1081:7: ( ID | string_value | null_stmt | array | NUMBER | struct_init2 )
            int alt192=6;
            alt192 = dfa192.predict(input);
            switch (alt192) {
                case 1 :
                    // Objcm.g:1081:9: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID692=(Token)match(input,ID,FOLLOW_ID_in_value5785); 
                    ID692_tree = 
                    (Object)adaptor.create(ID692)
                    ;
                    adaptor.addChild(root_0, ID692_tree);


                    }
                    break;
                case 2 :
                    // Objcm.g:1081:14: string_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_string_value_in_value5789);
                    string_value693=string_value();

                    state._fsp--;

                    adaptor.addChild(root_0, string_value693.getTree());

                    }
                    break;
                case 3 :
                    // Objcm.g:1081:29: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_value5793);
                    null_stmt694=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt694.getTree());

                    }
                    break;
                case 4 :
                    // Objcm.g:1081:41: array
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_in_value5797);
                    array695=array();

                    state._fsp--;

                    adaptor.addChild(root_0, array695.getTree());

                    }
                    break;
                case 5 :
                    // Objcm.g:1081:49: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER696=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_value5801); 
                    NUMBER696_tree = 
                    (Object)adaptor.create(NUMBER696)
                    ;
                    adaptor.addChild(root_0, NUMBER696_tree);


                    }
                    break;
                case 6 :
                    // Objcm.g:1081:58: struct_init2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init2_in_value5805);
                    struct_init2697=struct_init2();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init2697.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "value"


    public static class string_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_value"
    // Objcm.g:1083:1: string_value : STRING_LITERAL ;
    public final ObjcmParser.string_value_return string_value() throws RecognitionException {
        ObjcmParser.string_value_return retval = new ObjcmParser.string_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL698=null;

        Object STRING_LITERAL698_tree=null;

        try {
            // Objcm.g:1084:2: ( STRING_LITERAL )
            // Objcm.g:1084:4: STRING_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL698=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string_value5815); 
            STRING_LITERAL698_tree = 
            (Object)adaptor.create(STRING_LITERAL698)
            ;
            adaptor.addChild(root_0, STRING_LITERAL698_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_value"


    public static class null_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_stmt"
    // Objcm.g:1086:1: null_stmt : ( 'nil' | 'Nil' );
    public final ObjcmParser.null_stmt_return null_stmt() throws RecognitionException {
        ObjcmParser.null_stmt_return retval = new ObjcmParser.null_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set699=null;

        Object set699_tree=null;

        try {
            // Objcm.g:1086:11: ( 'nil' | 'Nil' )
            // Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set699=(Token)input.LT(1);

            if ( input.LA(1)==173||input.LA(1)==186 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set699)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_stmt"


    public static class array_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array"
    // Objcm.g:1088:1: array : L_FBR value ( COMMA value )* R_FBR ;
    public final ObjcmParser.array_return array() throws RecognitionException {
        ObjcmParser.array_return retval = new ObjcmParser.array_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR700=null;
        Token COMMA702=null;
        Token R_FBR704=null;
        ObjcmParser.value_return value701 =null;

        ObjcmParser.value_return value703 =null;


        Object L_FBR700_tree=null;
        Object COMMA702_tree=null;
        Object R_FBR704_tree=null;

        try {
            // Objcm.g:1088:7: ( L_FBR value ( COMMA value )* R_FBR )
            // Objcm.g:1088:9: L_FBR value ( COMMA value )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR700=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array5836); 
            L_FBR700_tree = 
            (Object)adaptor.create(L_FBR700)
            ;
            adaptor.addChild(root_0, L_FBR700_tree);


            pushFollow(FOLLOW_value_in_array5839);
            value701=value();

            state._fsp--;

            adaptor.addChild(root_0, value701.getTree());

            // Objcm.g:1088:23: ( COMMA value )*
            loop193:
            do {
                int alt193=2;
                int LA193_0 = input.LA(1);

                if ( (LA193_0==COMMA) ) {
                    alt193=1;
                }


                switch (alt193) {
            	case 1 :
            	    // Objcm.g:1088:24: COMMA value
            	    {
            	    COMMA702=(Token)match(input,COMMA,FOLLOW_COMMA_in_array5843); 
            	    COMMA702_tree = 
            	    (Object)adaptor.create(COMMA702)
            	    ;
            	    adaptor.addChild(root_0, COMMA702_tree);


            	    pushFollow(FOLLOW_value_in_array5846);
            	    value703=value();

            	    state._fsp--;

            	    adaptor.addChild(root_0, value703.getTree());

            	    }
            	    break;

            	default :
            	    break loop193;
                }
            } while (true);


            R_FBR704=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array5850); 
            R_FBR704_tree = 
            (Object)adaptor.create(R_FBR704)
            ;
            adaptor.addChild(root_0, R_FBR704_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array"

    // Delegated rules


    protected DFA28 dfa28 = new DFA28(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA192 dfa192 = new DFA192(this);
    static final String DFA28_eotS =
        "\u0116\uffff";
    static final String DFA28_eofS =
        "\u0116\uffff";
    static final String DFA28_minS =
        "\1\5\15\uffff\1\5\27\uffff\1\5\1\uffff\1\5\1\uffff\2\5\2\63\2\uffff"+
        "\1\5\12\uffff\2\5\6\uffff\2\5\2\63\15\uffff\2\5\u00c0\uffff";
    static final String DFA28_maxS =
        "\1\u00c0\15\uffff\1\u00b8\27\uffff\1\u00b8\1\uffff\1\u00b8\1\uffff"+
        "\2\u00bf\2\u00b8\2\uffff\1\u00bf\12\uffff\2\u00bf\6\uffff\2\u00bf"+
        "\2\u00b8\15\uffff\2\u00bf\u00c0\uffff";
    static final String DFA28_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\22\uffff\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\uffff\1\16\1\17\1\20\1\21\1\22\32\uffff\1\6\30\uffff"+
        "\1\6\1\uffff\25\6\1\uffff\27\6\22\uffff\24\6\11\uffff\1\6\11\uffff"+
        "\1\6\1\uffff\76\6\11\uffff\1\6\11\uffff\1\6\1\uffff";
    static final String DFA28_specialS =
        "\u0116\uffff}>";
    static final String[] DFA28_transitionS = {
            "\1\6\2\uffff\1\37\10\uffff\1\5\6\uffff\1\42\32\uffff\1\6\11"+
            "\uffff\1\6\2\uffff\1\6\5\uffff\1\6\4\uffff\1\6\1\uffff\1\6\4"+
            "\uffff\1\6\5\uffff\1\6\1\uffff\1\6\3\uffff\1\6\16\uffff\1\6"+
            "\16\uffff\1\45\2\uffff\1\37\1\6\2\uffff\1\3\2\uffff\3\6\1\uffff"+
            "\1\41\16\uffff\1\44\7\uffff\1\6\5\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\1\2\1\1\1\6\1\uffff\1\43\3\uffff\1\4\1\32\1\uffff\1\35\1\31"+
            "\1\6\1\uffff\1\6\1\34\1\33\2\uffff\1\16\1\36",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\44\55\uffff\1\46\145\uffff\1\44\36\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\60\11\uffff\1\100\1\74\4\uffff\1\54\35\uffff\1\6\11\uffff"+
            "\2\6\1\73\1\52\1\100\2\73\1\6\1\uffff\1\53\1\6\1\73\3\6\1\73"+
            "\3\6\1\73\1\6\1\uffff\1\6\1\73\1\6\1\100\1\73\1\6\1\73\3\6\1"+
            "\73\1\uffff\1\6\1\73\33\uffff\1\100\34\uffff\1\6\4\uffff\1\55"+
            "\31\uffff\1\6",
            "",
            "\1\100\11\uffff\1\131\1\125\4\uffff\1\105\35\uffff\1\100\11"+
            "\uffff\2\100\1\124\1\103\1\100\2\124\1\100\1\uffff\1\104\1\100"+
            "\1\124\3\100\1\124\3\100\1\124\1\100\1\uffff\1\100\1\124\2\100"+
            "\1\124\1\100\1\124\3\100\1\124\1\uffff\1\100\1\124\33\uffff"+
            "\1\131\34\uffff\1\100\4\uffff\1\106\31\uffff\1\100",
            "",
            "\1\134\55\uffff\1\144\11\uffff\1\135\2\uffff\1\133\5\uffff"+
            "\1\145\4\uffff\1\136\1\uffff\1\142\4\uffff\1\137\5\uffff\1\136"+
            "\1\uffff\1\142\3\uffff\1\140\16\uffff\1\146\11\uffff\1\156\10"+
            "\uffff\1\141\5\uffff\1\147\1\150\1\151\20\uffff\1\44\7\uffff"+
            "\1\154\5\uffff\1\155\1\uffff\1\153\3\uffff\1\152\12\uffff\1"+
            "\157\1\uffff\1\152\4\uffff\1\143",
            "\1\163\55\uffff\1\173\11\uffff\1\164\2\uffff\1\162\5\uffff"+
            "\1\174\4\uffff\1\165\1\uffff\1\171\4\uffff\1\166\5\uffff\1\165"+
            "\1\uffff\1\171\3\uffff\1\167\16\uffff\1\175\13\uffff\1\161\6"+
            "\uffff\1\170\5\uffff\1\176\1\177\1\u0080\30\uffff\1\u0083\5"+
            "\uffff\1\u0084\1\uffff\1\u0082\3\uffff\1\u0081\12\uffff\1\173"+
            "\1\uffff\1\u0081\4\uffff\1\172",
            "\1\u0085\u0084\uffff\1\u0085",
            "\1\u0086\u0084\uffff\1\u0086",
            "",
            "",
            "\1\131\55\uffff\1\131\11\uffff\1\131\2\uffff\1\u0087\5\uffff"+
            "\1\131\4\uffff\1\131\1\uffff\1\131\4\uffff\1\131\5\uffff\1\131"+
            "\1\uffff\1\131\3\uffff\1\131\16\uffff\1\131\22\uffff\1\131\5"+
            "\uffff\3\131\30\uffff\1\131\5\uffff\1\131\1\uffff\1\131\3\uffff"+
            "\1\131\12\uffff\1\131\1\uffff\1\131\4\uffff\1\131",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u009b\55\uffff\1\u00a3\11\uffff\1\u009c\2\uffff\1\u009a"+
            "\4\uffff\1\u00ad\1\u00a4\4\uffff\1\u009d\1\uffff\1\u00a1\4\uffff"+
            "\1\u009e\5\uffff\1\u009d\1\uffff\1\u00a1\3\uffff\1\u009f\16"+
            "\uffff\1\u00a5\22\uffff\1\u00a0\5\uffff\1\u00a6\1\u00a7\1\u00a8"+
            "\30\uffff\1\u00ab\5\uffff\1\u00ac\1\uffff\1\u00aa\3\uffff\1"+
            "\u00a9\12\uffff\1\u00a3\1\uffff\1\u00a9\4\uffff\1\u00a2",
            "\1\131\55\uffff\1\u00b7\11\uffff\1\131\2\uffff\1\131\5\uffff"+
            "\1\131\4\uffff\1\131\1\uffff\1\131\4\uffff\1\131\5\uffff\1\131"+
            "\1\uffff\1\131\3\uffff\1\131\16\uffff\1\131\22\uffff\1\131\5"+
            "\uffff\3\131\20\uffff\1\44\7\uffff\1\131\5\uffff\1\131\1\uffff"+
            "\1\131\3\uffff\1\131\12\uffff\1\u00c1\1\uffff\1\131\4\uffff"+
            "\1\131",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c4\55\uffff\1\u00cc\11\uffff\1\u00c5\2\uffff\1\u00c3"+
            "\5\uffff\1\u00cd\4\uffff\1\u00c6\1\uffff\1\u00ca\4\uffff\1\u00c7"+
            "\5\uffff\1\u00c6\1\uffff\1\u00ca\3\uffff\1\u00c8\16\uffff\1"+
            "\u00ce\11\uffff\1\u00d6\10\uffff\1\u00c9\5\uffff\1\u00cf\1\u00d0"+
            "\1\u00d1\30\uffff\1\u00d4\5\uffff\1\u00d5\1\uffff\1\u00d3\3"+
            "\uffff\1\u00d2\12\uffff\1\u00cc\1\uffff\1\u00d2\4\uffff\1\u00cb",
            "\1\u00d8\55\uffff\1\u00e0\11\uffff\1\u00d9\2\uffff\1\u00d7"+
            "\5\uffff\1\u00e1\4\uffff\1\u00da\1\uffff\1\u00de\4\uffff\1\u00db"+
            "\5\uffff\1\u00da\1\uffff\1\u00de\3\uffff\1\u00dc\16\uffff\1"+
            "\u00e2\13\uffff\1\u00ea\6\uffff\1\u00dd\5\uffff\1\u00e3\1\u00e4"+
            "\1\u00e5\30\uffff\1\u00e8\5\uffff\1\u00e9\1\uffff\1\u00e7\3"+
            "\uffff\1\u00e6\12\uffff\1\u00e0\1\uffff\1\u00e6\4\uffff\1\u00df",
            "\1\u00eb\u0084\uffff\1\u00eb",
            "\1\u00ec\u0084\uffff\1\u00ec",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ee\55\uffff\1\u00f6\11\uffff\1\u00ef\2\uffff\1\u00ed"+
            "\4\uffff\1\u0100\1\u00f7\4\uffff\1\u00f0\1\uffff\1\u00f4\4\uffff"+
            "\1\u00f1\5\uffff\1\u00f0\1\uffff\1\u00f4\3\uffff\1\u00f2\16"+
            "\uffff\1\u00f8\22\uffff\1\u00f3\5\uffff\1\u00f9\1\u00fa\1\u00fb"+
            "\30\uffff\1\u00fe\5\uffff\1\u00ff\1\uffff\1\u00fd\3\uffff\1"+
            "\u00fc\12\uffff\1\u00f6\1\uffff\1\u00fc\4\uffff\1\u00f5",
            "\1\131\55\uffff\1\u010a\11\uffff\1\131\2\uffff\1\131\5\uffff"+
            "\1\131\4\uffff\1\131\1\uffff\1\131\4\uffff\1\131\5\uffff\1\131"+
            "\1\uffff\1\131\3\uffff\1\131\16\uffff\1\131\22\uffff\1\131\5"+
            "\uffff\3\131\20\uffff\1\44\7\uffff\1\131\5\uffff\1\131\1\uffff"+
            "\1\131\3\uffff\1\131\12\uffff\1\u0114\1\uffff\1\131\4\uffff"+
            "\1\131",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_specialS);
    static final short[][] DFA28_transition;

    static {
        int numStates = DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_transitionS[i]);
        }
    }

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;
        }
        public String getDescription() {
            return "271:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON );";
        }
    }
    static final String DFA48_eotS =
        "\u019a\uffff";
    static final String DFA48_eofS =
        "\u019a\uffff";
    static final String DFA48_minS =
        "\1\63\1\20\4\uffff\1\25\2\5\16\uffff\2\5\16\uffff\2\5\1\63\1\5\20"+
        "\uffff\1\5\10\63\1\5\1\63\5\5\3\100\u014c\uffff";
    static final String DFA48_maxS =
        "\1\u00b8\1\u00bf\4\uffff\3\u00bf\16\uffff\2\u00bf\16\uffff\1\u00bf"+
        "\1\u009e\1\u00b8\1\171\20\uffff\10\u00bf\1\u00b8\1\u009e\1\u00b8"+
        "\5\167\3\100\u014c\uffff";
    static final String DFA48_acceptS =
        "\2\uffff\1\2\1\uffff\1\3\1\1\111\uffff\23\1\1\uffff\1\1\10\uffff"+
        "\2\1\1\uffff\1\1\7\uffff\3\1\10\uffff\1\1\12\uffff\4\1\20\uffff"+
        "\4\1\17\uffff\u0093\1\1\uffff\22\1\1\uffff\16\1\1\uffff\16\1\1\uffff"+
        "\16\1\1\uffff\16\1\1\uffff\3\1";
    static final String DFA48_specialS =
        "\u019a\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\2\110\uffff\1\4\34\uffff\1\2\36\uffff\1\1",
            "\1\2\4\uffff\1\2\35\uffff\1\5\13\uffff\1\2\1\10\1\uffff\2\2"+
            "\2\uffff\1\7\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\14\uffff\1"+
            "\5\16\uffff\1\2\11\uffff\3\5\25\uffff\1\2\2\uffff\1\5\5\uffff"+
            "\1\5\1\uffff\1\5\3\uffff\1\5\12\uffff\1\6\1\uffff\1\5\4\uffff"+
            "\1\5",
            "",
            "",
            "",
            "",
            "\1\5\35\uffff\1\2\14\uffff\1\27\5\uffff\1\30\2\uffff\1\5\43"+
            "\uffff\1\2\11\uffff\1\5\16\uffff\3\2\25\uffff\1\5\2\uffff\1"+
            "\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\2\55\uffff\1\50\11\uffff\1\2\2\uffff\1\47\5\uffff\1\51\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\13\uffff\1\2\6\uffff\1\2\5\uffff\1\52"+
            "\2\2\30\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\50\1\uffff\1\2\4\uffff\1\2",
            "\1\74\55\uffff\1\104\11\uffff\1\75\2\uffff\1\73\5\uffff\1\105"+
            "\4\uffff\1\76\1\uffff\1\102\4\uffff\1\77\5\uffff\1\76\1\uffff"+
            "\1\102\3\uffff\1\100\16\uffff\1\106\11\uffff\1\2\10\uffff\1"+
            "\101\5\uffff\1\107\1\110\1\111\30\uffff\1\114\5\uffff\1\115"+
            "\1\uffff\1\113\3\uffff\1\112\12\uffff\1\104\1\uffff\1\112\4"+
            "\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\120\55\uffff\1\130\11\uffff\1\121\2\uffff\1\117\5\uffff"+
            "\1\131\4\uffff\1\122\1\uffff\1\126\4\uffff\1\123\5\uffff\1\122"+
            "\1\uffff\1\126\3\uffff\1\124\16\uffff\1\132\11\uffff\1\5\10"+
            "\uffff\1\125\5\uffff\1\133\1\134\1\135\30\uffff\1\140\5\uffff"+
            "\1\141\1\uffff\1\137\3\uffff\1\136\12\uffff\1\130\1\uffff\1"+
            "\136\4\uffff\1\127",
            "\1\5\55\uffff\1\154\11\uffff\1\5\2\uffff\1\143\5\uffff\1\155"+
            "\4\uffff\1\5\1\uffff\1\5\4\uffff\1\5\5\uffff\1\5\1\uffff\1\5"+
            "\3\uffff\1\5\16\uffff\1\5\13\uffff\1\5\6\uffff\1\5\5\uffff\1"+
            "\157\2\5\30\uffff\1\5\5\uffff\1\5\1\uffff\1\5\3\uffff\1\5\12"+
            "\uffff\1\154\1\uffff\1\5\4\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\13\uffff\1\167\41\uffff\1\171\11\uffff\1\2\2\uffff\1\2"+
            "\5\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2"+
            "\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3"+
            "\2\20\uffff\1\u0082\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\170",
            "\1\2\17\uffff\1\u008f\35\uffff\1\5\11\uffff\3\2\1\u008d\4\2"+
            "\1\uffff\1\u008e\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff\1\2"+
            "\44\uffff\1\u0090",
            "\1\u00a2\14\uffff\1\u00a1\5\uffff\1\u00a3\77\uffff\1\u00a4"+
            "\61\uffff\1\u00a2",
            "\1\2\55\uffff\1\5\11\uffff\3\2\1\uffff\4\2\2\uffff\13\2\1\uffff"+
            "\13\2\1\uffff\2\2\30\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00b8\13\uffff\1\u00b4\41\uffff\1\u00b6\11\uffff\1\u00b9"+
            "\2\uffff\1\u00b7\5\uffff\1\u00c1\4\uffff\1\u00ba\1\uffff\1\u00be"+
            "\4\uffff\1\u00bb\5\uffff\1\u00ba\1\uffff\1\u00be\3\uffff\1\u00bc"+
            "\16\uffff\1\u00c2\22\uffff\1\u00bd\5\uffff\1\u00c3\1\u00c4\1"+
            "\u00c5\20\uffff\1\u00bf\7\uffff\1\u00c8\5\uffff\1\u00c9\1\uffff"+
            "\1\u00c7\3\uffff\1\u00c6\12\uffff\1\u00c0\1\uffff\1\u00c6\4"+
            "\uffff\1\u00b5",
            "\1\u00d2\11\uffff\1\u00cb\2\uffff\1\u00ca\5\uffff\1\u00d3\4"+
            "\uffff\1\u00cc\1\uffff\1\u00d0\4\uffff\1\u00cd\5\uffff\1\u00cc"+
            "\1\uffff\1\u00d0\3\uffff\1\u00ce\16\uffff\1\u00d4\22\uffff\1"+
            "\u00cf\5\uffff\1\u00d5\1\u00d6\1\u00d7\30\uffff\1\u00da\5\uffff"+
            "\1\u00db\1\uffff\1\u00d9\3\uffff\1\u00d8\12\uffff\1\u00d2\1"+
            "\uffff\1\u00d8\4\uffff\1\u00d1",
            "\1\u00e2\14\uffff\1\u00e4\5\uffff\1\u00e3\4\uffff\1\u00dc\1"+
            "\uffff\1\u00e0\4\uffff\1\u00dd\5\uffff\1\u00dc\1\uffff\1\u00e0"+
            "\3\uffff\1\u00de\16\uffff\1\u00e5\22\uffff\1\u00df\5\uffff\1"+
            "\u00e6\1\u00e7\1\u00e8\30\uffff\1\u00eb\5\uffff\1\u00ec\1\uffff"+
            "\1\u00ea\3\uffff\1\u00e9\12\uffff\1\u00e2\1\uffff\1\u00e9\4"+
            "\uffff\1\u00e1",
            "\1\u00f2\14\uffff\1\u00f4\5\uffff\1\u00f3\6\uffff\1\u00f0\4"+
            "\uffff\1\u00ed\7\uffff\1\u00f0\3\uffff\1\u00ee\16\uffff\1\u00f5"+
            "\22\uffff\1\u00ef\5\uffff\1\u00f6\1\u00f7\1\u00f8\30\uffff\1"+
            "\u00fb\5\uffff\1\u00fc\1\uffff\1\u00fa\3\uffff\1\u00f9\12\uffff"+
            "\1\u00f2\1\uffff\1\u00f9\4\uffff\1\u00f1",
            "\1\u0101\14\uffff\1\u0103\5\uffff\1\u0102\6\uffff\1\u00ff\14"+
            "\uffff\1\u00ff\3\uffff\1\u00fd\16\uffff\1\u0104\22\uffff\1\u00fe"+
            "\5\uffff\1\u0105\1\u0106\1\u0107\30\uffff\1\u010a\5\uffff\1"+
            "\u010b\1\uffff\1\u0109\3\uffff\1\u0108\12\uffff\1\u0101\1\uffff"+
            "\1\u0108\4\uffff\1\u0100",
            "\1\u010f\14\uffff\1\u0111\5\uffff\1\u0110\6\uffff\1\u010d\14"+
            "\uffff\1\u010d\22\uffff\1\u0112\22\uffff\1\u010c\5\uffff\1\u0113"+
            "\1\u0114\1\u0115\30\uffff\1\u0118\5\uffff\1\u0119\1\uffff\1"+
            "\u0117\3\uffff\1\u0116\12\uffff\1\u010f\1\uffff\1\u0116\4\uffff"+
            "\1\u010e",
            "\1\u011c\14\uffff\1\u011e\5\uffff\1\u011d\6\uffff\1\u011a\14"+
            "\uffff\1\u011a\22\uffff\1\u011f\30\uffff\1\u0120\1\u0121\1\u0122"+
            "\30\uffff\1\u0125\5\uffff\1\u0126\1\uffff\1\u0124\3\uffff\1"+
            "\u0123\12\uffff\1\u011c\1\uffff\1\u0123\4\uffff\1\u011b",
            "\1\u0128\14\uffff\1\u012a\5\uffff\1\u0129\46\uffff\1\u012b"+
            "\30\uffff\1\u012c\1\u012d\1\u012e\30\uffff\1\u0131\5\uffff\1"+
            "\u0132\1\uffff\1\u0130\3\uffff\1\u012f\12\uffff\1\u0128\1\uffff"+
            "\1\u012f\4\uffff\1\u0127",
            "\1\u0133\u0084\uffff\1\u0133",
            "\1\u013a\12\uffff\1\2\4\uffff\1\u0136\47\uffff\1\u013f\1\u0142"+
            "\1\u0145\1\u0134\1\u013a\2\u0145\1\u013e\1\uffff\1\u0135\1\u013c"+
            "\1\u0145\1\u0138\1\u013d\1\u013b\1\u0145\1\u0139\2\u013d\1\u0145"+
            "\1\u013e\1\uffff\1\u0141\1\u0145\1\u0143\1\u013a\1\u0145\1\u013b"+
            "\1\u0145\1\u0139\1\u0144\1\u013c\1\u0145\1\uffff\1\u0140\1\u0145"+
            "\26\uffff\1\u0146\46\uffff\1\u0137",
            "\1\u0149\14\uffff\1\u0148\5\uffff\1\u014a\77\uffff\1\u014b"+
            "\61\uffff\1\u0149",
            "\1\u014d\12\uffff\1\2\54\uffff\1\u0152\1\u0155\1\u0158\1\uffff"+
            "\1\u014d\2\u0158\1\u0151\2\uffff\1\u014f\1\u0158\2\u0150\1\u014e"+
            "\1\u0158\1\u014c\2\u0150\1\u0158\1\u0151\1\uffff\1\u0154\1\u0158"+
            "\1\u0156\1\u014d\1\u0158\1\u014e\1\u0158\1\u014c\1\u0157\1\u014f"+
            "\1\u0158\1\uffff\1\u0153\1\u0158\26\uffff\1\u0159",
            "\1\u015c\12\uffff\1\2\54\uffff\1\u0161\1\u0164\1\u0167\1\uffff"+
            "\1\u015c\2\u0167\1\u0160\2\uffff\1\u015e\1\u0167\2\u015f\1\u015d"+
            "\1\u0167\1\u015b\2\u015f\1\u0167\1\u0160\1\uffff\1\u0163\1\u0167"+
            "\1\u0165\1\u015c\1\u0167\1\u015d\1\u0167\1\u015b\1\u0166\1\u015e"+
            "\1\u0167\1\uffff\1\u0162\1\u0167\26\uffff\1\u0168",
            "\1\u016b\12\uffff\1\2\54\uffff\1\u0170\1\u0173\1\u0176\1\uffff"+
            "\1\u016b\2\u0176\1\u016f\2\uffff\1\u016d\1\u0176\2\u016e\1\u016c"+
            "\1\u0176\1\u016a\2\u016e\1\u0176\1\u016f\1\uffff\1\u0172\1\u0176"+
            "\1\u0174\1\u016b\1\u0176\1\u016c\1\u0176\1\u016a\1\u0175\1\u016d"+
            "\1\u0176\1\uffff\1\u0171\1\u0176\26\uffff\1\u0177",
            "\1\u017a\12\uffff\1\2\54\uffff\1\u017f\1\u0182\1\u0185\1\uffff"+
            "\1\u017a\2\u0185\1\u017e\2\uffff\1\u017c\1\u0185\2\u017d\1\u017b"+
            "\1\u0185\1\u0179\2\u017d\1\u0185\1\u017e\1\uffff\1\u0181\1\u0185"+
            "\1\u0183\1\u017a\1\u0185\1\u017b\1\u0185\1\u0179\1\u0184\1\u017c"+
            "\1\u0185\1\uffff\1\u0180\1\u0185\26\uffff\1\u0186",
            "\1\u0189\12\uffff\1\2\54\uffff\1\u018e\1\u0191\1\u0194\1\uffff"+
            "\1\u0189\2\u0194\1\u018d\2\uffff\1\u018b\1\u0194\2\u018c\1\u018a"+
            "\1\u0194\1\u0188\2\u018c\1\u0194\1\u018d\1\uffff\1\u0190\1\u0194"+
            "\1\u0192\1\u0189\1\u0194\1\u018a\1\u0194\1\u0188\1\u0193\1\u018b"+
            "\1\u0194\1\uffff\1\u018f\1\u0194\26\uffff\1\u0195",
            "\1\u0197",
            "\1\u0198",
            "\1\u0199",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "428:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )";
        }
    }
    static final String DFA56_eotS =
        "\u046c\uffff";
    static final String DFA56_eofS =
        "\u046c\uffff";
    static final String DFA56_minS =
        "\1\63\2\5\1\uffff\2\5\2\63\1\5\6\uffff\2\5\2\63\7\uffff\1\5\10\63"+
        "\1\5\1\63\5\5\3\100\2\5\1\uffff\2\5\10\63\1\5\1\63\5\5\3\100\2\5"+
        "\5\uffff\1\5\10\63\1\5\1\63\5\5\3\100\2\5\10\63\1\5\1\63\5\5\3\100"+
        "\3\5\u03f7\uffff";
    static final String DFA56_maxS =
        "\3\u00b8\1\uffff\2\u00bf\3\u00b8\6\uffff\2\u00bf\2\u00b8\7\uffff"+
        "\10\u00bf\1\u00b8\1\u009e\1\u00b8\5\167\3\100\1\u00b8\1\u009e\1"+
        "\uffff\1\u00b8\10\u00bf\1\u00b8\1\u009e\1\u00b8\5\171\3\100\2\u00b8"+
        "\5\uffff\10\u00bf\1\u00b8\1\u009e\1\u00b8\5\167\3\100\1\u00b8\10"+
        "\u00bf\1\u00b8\1\u009e\1\u00b8\5\171\3\100\3\u00b8\u03f7\uffff";
    static final String DFA56_acceptS =
        "\3\uffff\1\2\5\uffff\1\1\153\uffff\51\1\1\uffff\u00c1\1\7\uffff"+
        "\25\1\1\uffff\2\1\3\uffff\1\1\3\uffff\u00e2\1\4\uffff\2\1\3\uffff"+
        "\2\1\4\uffff\2\1\3\uffff\u00e9\1\7\uffff\u00e2\1\4\uffff\1\1\3\uffff"+
        "\2\1\4\uffff\2\1\3\uffff\2\1\4\uffff\2\1\3\uffff";
    static final String DFA56_specialS =
        "\u046c\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\1\145\uffff\1\3\36\uffff\1\2",
            "\1\10\12\uffff\1\3\4\uffff\1\6\35\uffff\1\11\13\uffff\1\3\1"+
            "\4\1\uffff\2\3\2\uffff\1\5\1\uffff\1\3\3\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff\1"+
            "\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\7\31\uffff\1\11",
            "\1\11\12\uffff\1\3\4\uffff\1\21\35\uffff\1\11\13\uffff\1\3"+
            "\1\17\1\uffff\2\3\2\uffff\1\20\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\22\31\uffff\1\11",
            "",
            "\1\33\55\uffff\1\43\11\uffff\1\34\2\uffff\1\32\5\uffff\1\44"+
            "\4\uffff\1\35\1\uffff\1\41\4\uffff\1\36\5\uffff\1\35\1\uffff"+
            "\1\41\3\uffff\1\37\16\uffff\1\45\11\uffff\1\55\10\uffff\1\40"+
            "\5\uffff\1\46\1\47\1\50\20\uffff\1\3\7\uffff\1\53\5\uffff\1"+
            "\54\1\uffff\1\52\3\uffff\1\51\12\uffff\1\56\1\uffff\1\51\4\uffff"+
            "\1\42",
            "\1\62\55\uffff\1\72\11\uffff\1\63\2\uffff\1\61\5\uffff\1\73"+
            "\4\uffff\1\64\1\uffff\1\70\4\uffff\1\65\5\uffff\1\64\1\uffff"+
            "\1\70\3\uffff\1\66\16\uffff\1\74\13\uffff\1\60\6\uffff\1\67"+
            "\5\uffff\1\75\1\76\1\77\30\uffff\1\102\5\uffff\1\103\1\uffff"+
            "\1\101\3\uffff\1\100\12\uffff\1\72\1\uffff\1\100\4\uffff\1\71",
            "\1\104\u0084\uffff\1\104",
            "\1\105\u0084\uffff\1\105",
            "\1\11\55\uffff\1\11\14\uffff\1\3\130\uffff\1\11\36\uffff\1"+
            "\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\114\55\uffff\1\124\11\uffff\1\115\2\uffff\1\113\5\uffff"+
            "\1\125\4\uffff\1\116\1\uffff\1\122\4\uffff\1\117\5\uffff\1\116"+
            "\1\uffff\1\122\3\uffff\1\120\16\uffff\1\126\11\uffff\1\136\10"+
            "\uffff\1\121\5\uffff\1\127\1\130\1\131\30\uffff\1\134\5\uffff"+
            "\1\135\1\uffff\1\133\3\uffff\1\132\12\uffff\1\124\1\uffff\1"+
            "\132\4\uffff\1\123",
            "\1\140\55\uffff\1\150\11\uffff\1\141\2\uffff\1\137\5\uffff"+
            "\1\151\4\uffff\1\142\1\uffff\1\146\4\uffff\1\143\5\uffff\1\142"+
            "\1\uffff\1\146\3\uffff\1\144\16\uffff\1\152\13\uffff\1\162\6"+
            "\uffff\1\145\5\uffff\1\153\1\154\1\155\30\uffff\1\160\5\uffff"+
            "\1\161\1\uffff\1\157\3\uffff\1\156\12\uffff\1\150\1\uffff\1"+
            "\156\4\uffff\1\147",
            "\1\163\u0084\uffff\1\163",
            "\1\164\u0084\uffff\1\164",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\171\13\uffff\1\165\41\uffff\1\167\11\uffff\1\172\2\uffff"+
            "\1\170\5\uffff\1\u0082\4\uffff\1\173\1\uffff\1\177\4\uffff\1"+
            "\174\5\uffff\1\173\1\uffff\1\177\3\uffff\1\175\16\uffff\1\u0083"+
            "\22\uffff\1\176\5\uffff\1\u0084\1\u0085\1\u0086\20\uffff\1\u0080"+
            "\7\uffff\1\u0089\5\uffff\1\u008a\1\uffff\1\u0088\3\uffff\1\u0087"+
            "\12\uffff\1\u0081\1\uffff\1\u0087\4\uffff\1\166",
            "\1\u0093\11\uffff\1\u008c\2\uffff\1\u008b\5\uffff\1\u0094\4"+
            "\uffff\1\u008d\1\uffff\1\u0091\4\uffff\1\u008e\5\uffff\1\u008d"+
            "\1\uffff\1\u0091\3\uffff\1\u008f\16\uffff\1\u0095\22\uffff\1"+
            "\u0090\5\uffff\1\u0096\1\u0097\1\u0098\20\uffff\1\3\7\uffff"+
            "\1\u009b\5\uffff\1\u009c\1\uffff\1\u009a\3\uffff\1\u0099\12"+
            "\uffff\1\u009d\1\uffff\1\u0099\4\uffff\1\u0092",
            "\1\u00a5\14\uffff\1\u00a7\5\uffff\1\u00a6\4\uffff\1\u009f\1"+
            "\uffff\1\u00a3\4\uffff\1\u00a0\5\uffff\1\u009f\1\uffff\1\u00a3"+
            "\3\uffff\1\u00a1\16\uffff\1\u00a8\22\uffff\1\u00a2\5\uffff\1"+
            "\u00a9\1\u00aa\1\u00ab\30\uffff\1\u00ae\5\uffff\1\u00af\1\uffff"+
            "\1\u00ad\3\uffff\1\u00ac\12\uffff\1\u00a5\1\uffff\1\u00ac\4"+
            "\uffff\1\u00a4",
            "\1\u00b5\14\uffff\1\u00b7\5\uffff\1\u00b6\6\uffff\1\u00b3\4"+
            "\uffff\1\u00b0\7\uffff\1\u00b3\3\uffff\1\u00b1\16\uffff\1\u00b8"+
            "\22\uffff\1\u00b2\5\uffff\1\u00b9\1\u00ba\1\u00bb\30\uffff\1"+
            "\u00be\5\uffff\1\u00bf\1\uffff\1\u00bd\3\uffff\1\u00bc\12\uffff"+
            "\1\u00b5\1\uffff\1\u00bc\4\uffff\1\u00b4",
            "\1\u00c4\14\uffff\1\u00c6\5\uffff\1\u00c5\6\uffff\1\u00c2\14"+
            "\uffff\1\u00c2\3\uffff\1\u00c0\16\uffff\1\u00c7\22\uffff\1\u00c1"+
            "\5\uffff\1\u00c8\1\u00c9\1\u00ca\30\uffff\1\u00cd\5\uffff\1"+
            "\u00ce\1\uffff\1\u00cc\3\uffff\1\u00cb\12\uffff\1\u00c4\1\uffff"+
            "\1\u00cb\4\uffff\1\u00c3",
            "\1\u00d2\14\uffff\1\u00d4\5\uffff\1\u00d3\6\uffff\1\u00d0\14"+
            "\uffff\1\u00d0\22\uffff\1\u00d5\22\uffff\1\u00cf\5\uffff\1\u00d6"+
            "\1\u00d7\1\u00d8\30\uffff\1\u00db\5\uffff\1\u00dc\1\uffff\1"+
            "\u00da\3\uffff\1\u00d9\12\uffff\1\u00d2\1\uffff\1\u00d9\4\uffff"+
            "\1\u00d1",
            "\1\u00df\14\uffff\1\u00e1\5\uffff\1\u00e0\6\uffff\1\u00dd\14"+
            "\uffff\1\u00dd\22\uffff\1\u00e2\30\uffff\1\u00e3\1\u00e4\1\u00e5"+
            "\30\uffff\1\u00e8\5\uffff\1\u00e9\1\uffff\1\u00e7\3\uffff\1"+
            "\u00e6\12\uffff\1\u00df\1\uffff\1\u00e6\4\uffff\1\u00de",
            "\1\u00eb\14\uffff\1\u00ed\5\uffff\1\u00ec\46\uffff\1\u00ee"+
            "\30\uffff\1\u00ef\1\u00f0\1\u00f1\30\uffff\1\u00f4\5\uffff\1"+
            "\u00f5\1\uffff\1\u00f3\3\uffff\1\u00f2\12\uffff\1\u00eb\1\uffff"+
            "\1\u00f2\4\uffff\1\u00ea",
            "\1\u00f6\u0084\uffff\1\u00f6",
            "\1\u00fd\12\uffff\1\u0109\4\uffff\1\u00f9\47\uffff\1\u0102"+
            "\1\u0105\1\u0108\1\u00f7\1\u00fd\2\u0108\1\u0101\1\uffff\1\u00f8"+
            "\1\u00ff\1\u0108\1\u00fb\1\u0100\1\u00fe\1\u0108\1\u00fc\2\u0100"+
            "\1\u0108\1\u0101\1\uffff\1\u0104\1\u0108\1\u0106\1\u00fd\1\u0108"+
            "\1\u00fe\1\u0108\1\u00fc\1\u0107\1\u00ff\1\u0108\1\uffff\1\u0103"+
            "\1\u0108\26\uffff\1\u010a\46\uffff\1\u00fa",
            "\1\u010c\14\uffff\1\u010b\5\uffff\1\u010d\77\uffff\1\u010e"+
            "\61\uffff\1\u010c",
            "\1\u0110\12\uffff\1\u011c\54\uffff\1\u0115\1\u0118\1\u011b"+
            "\1\uffff\1\u0110\2\u011b\1\u0114\2\uffff\1\u0112\1\u011b\2\u0113"+
            "\1\u0111\1\u011b\1\u010f\2\u0113\1\u011b\1\u0114\1\uffff\1\u0117"+
            "\1\u011b\1\u0119\1\u0110\1\u011b\1\u0111\1\u011b\1\u010f\1\u011a"+
            "\1\u0112\1\u011b\1\uffff\1\u0116\1\u011b\26\uffff\1\u011d",
            "\1\u011f\12\uffff\1\u012b\54\uffff\1\u0124\1\u0127\1\u012a"+
            "\1\uffff\1\u011f\2\u012a\1\u0123\2\uffff\1\u0121\1\u012a\2\u0122"+
            "\1\u0120\1\u012a\1\u011e\2\u0122\1\u012a\1\u0123\1\uffff\1\u0126"+
            "\1\u012a\1\u0128\1\u011f\1\u012a\1\u0120\1\u012a\1\u011e\1\u0129"+
            "\1\u0121\1\u012a\1\uffff\1\u0125\1\u012a\26\uffff\1\u012c",
            "\1\u012e\12\uffff\1\u013a\54\uffff\1\u0133\1\u0136\1\u0139"+
            "\1\uffff\1\u012e\2\u0139\1\u0132\2\uffff\1\u0130\1\u0139\2\u0131"+
            "\1\u012f\1\u0139\1\u012d\2\u0131\1\u0139\1\u0132\1\uffff\1\u0135"+
            "\1\u0139\1\u0137\1\u012e\1\u0139\1\u012f\1\u0139\1\u012d\1\u0138"+
            "\1\u0130\1\u0139\1\uffff\1\u0134\1\u0139\26\uffff\1\u013b",
            "\1\u013d\12\uffff\1\u0149\54\uffff\1\u0142\1\u0145\1\u0148"+
            "\1\uffff\1\u013d\2\u0148\1\u0141\2\uffff\1\u013f\1\u0148\2\u0140"+
            "\1\u013e\1\u0148\1\u013c\2\u0140\1\u0148\1\u0141\1\uffff\1\u0144"+
            "\1\u0148\1\u0146\1\u013d\1\u0148\1\u013e\1\u0148\1\u013c\1\u0147"+
            "\1\u013f\1\u0148\1\uffff\1\u0143\1\u0148\26\uffff\1\u014a",
            "\1\u014c\12\uffff\1\u0158\54\uffff\1\u0151\1\u0154\1\u0157"+
            "\1\uffff\1\u014c\2\u0157\1\u0150\2\uffff\1\u014e\1\u0157\2\u014f"+
            "\1\u014d\1\u0157\1\u014b\2\u014f\1\u0157\1\u0150\1\uffff\1\u0153"+
            "\1\u0157\1\u0155\1\u014c\1\u0157\1\u014d\1\u0157\1\u014b\1\u0156"+
            "\1\u014e\1\u0157\1\uffff\1\u0152\1\u0157\26\uffff\1\u0159",
            "\1\u015a",
            "\1\u015b",
            "\1\u015c",
            "\1\11\12\uffff\1\3\4\uffff\1\u015e\35\uffff\1\11\13\uffff\1"+
            "\3\2\uffff\2\3\2\uffff\1\u015d\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u015f\31\uffff\1\11",
            "\1\u016d\12\uffff\1\u0179\4\uffff\1\u0169\47\uffff\1\u0172"+
            "\1\u0175\1\u0178\1\u0167\1\u016d\2\u0178\1\u0171\1\uffff\1\u0168"+
            "\1\u016f\1\u0178\1\u016b\1\u0170\1\u016e\1\u0178\1\u016c\2\u0170"+
            "\1\u0178\1\u0171\1\uffff\1\u0174\1\u0178\1\u0176\1\u016d\1\u0178"+
            "\1\u016e\1\u0178\1\u016c\1\u0177\1\u016f\1\u0178\1\uffff\1\u0173"+
            "\1\u0178\26\uffff\1\u017a\46\uffff\1\u016a",
            "",
            "\1\u017b\12\uffff\1\3\4\uffff\1\u017d\35\uffff\1\11\13\uffff"+
            "\2\3\1\uffff\2\3\2\uffff\1\u0182\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u017e\31\uffff\1\11",
            "\1\u018a\13\uffff\1\u0186\41\uffff\1\u0188\11\uffff\1\u018b"+
            "\2\uffff\1\u0189\5\uffff\1\u0193\4\uffff\1\u018c\1\uffff\1\u0190"+
            "\4\uffff\1\u018d\5\uffff\1\u018c\1\uffff\1\u0190\3\uffff\1\u018e"+
            "\16\uffff\1\u0194\22\uffff\1\u018f\5\uffff\1\u0195\1\u0196\1"+
            "\u0197\20\uffff\1\u0191\7\uffff\1\u019a\5\uffff\1\u019b\1\uffff"+
            "\1\u0199\3\uffff\1\u0198\12\uffff\1\u0192\1\uffff\1\u0198\4"+
            "\uffff\1\u0187",
            "\1\u01a4\11\uffff\1\u019d\2\uffff\1\u019c\5\uffff\1\u01a5\4"+
            "\uffff\1\u019e\1\uffff\1\u01a2\4\uffff\1\u019f\5\uffff\1\u019e"+
            "\1\uffff\1\u01a2\3\uffff\1\u01a0\16\uffff\1\u01a6\22\uffff\1"+
            "\u01a1\5\uffff\1\u01a7\1\u01a8\1\u01a9\30\uffff\1\u01ac\5\uffff"+
            "\1\u01ad\1\uffff\1\u01ab\3\uffff\1\u01aa\12\uffff\1\u01a4\1"+
            "\uffff\1\u01aa\4\uffff\1\u01a3",
            "\1\u01b4\14\uffff\1\u01b6\5\uffff\1\u01b5\4\uffff\1\u01ae\1"+
            "\uffff\1\u01b2\4\uffff\1\u01af\5\uffff\1\u01ae\1\uffff\1\u01b2"+
            "\3\uffff\1\u01b0\16\uffff\1\u01b7\22\uffff\1\u01b1\5\uffff\1"+
            "\u01b8\1\u01b9\1\u01ba\30\uffff\1\u01bd\5\uffff\1\u01be\1\uffff"+
            "\1\u01bc\3\uffff\1\u01bb\12\uffff\1\u01b4\1\uffff\1\u01bb\4"+
            "\uffff\1\u01b3",
            "\1\u01c4\14\uffff\1\u01c6\5\uffff\1\u01c5\6\uffff\1\u01c2\4"+
            "\uffff\1\u01bf\7\uffff\1\u01c2\3\uffff\1\u01c0\16\uffff\1\u01c7"+
            "\22\uffff\1\u01c1\5\uffff\1\u01c8\1\u01c9\1\u01ca\30\uffff\1"+
            "\u01cd\5\uffff\1\u01ce\1\uffff\1\u01cc\3\uffff\1\u01cb\12\uffff"+
            "\1\u01c4\1\uffff\1\u01cb\4\uffff\1\u01c3",
            "\1\u01d3\14\uffff\1\u01d5\5\uffff\1\u01d4\6\uffff\1\u01d1\14"+
            "\uffff\1\u01d1\3\uffff\1\u01cf\16\uffff\1\u01d6\22\uffff\1\u01d0"+
            "\5\uffff\1\u01d7\1\u01d8\1\u01d9\30\uffff\1\u01dc\5\uffff\1"+
            "\u01dd\1\uffff\1\u01db\3\uffff\1\u01da\12\uffff\1\u01d3\1\uffff"+
            "\1\u01da\4\uffff\1\u01d2",
            "\1\u01e1\14\uffff\1\u01e3\5\uffff\1\u01e2\6\uffff\1\u01df\14"+
            "\uffff\1\u01df\22\uffff\1\u01e4\22\uffff\1\u01de\5\uffff\1\u01e5"+
            "\1\u01e6\1\u01e7\30\uffff\1\u01ea\5\uffff\1\u01eb\1\uffff\1"+
            "\u01e9\3\uffff\1\u01e8\12\uffff\1\u01e1\1\uffff\1\u01e8\4\uffff"+
            "\1\u01e0",
            "\1\u01ee\14\uffff\1\u01f0\5\uffff\1\u01ef\6\uffff\1\u01ec\14"+
            "\uffff\1\u01ec\22\uffff\1\u01f1\30\uffff\1\u01f2\1\u01f3\1\u01f4"+
            "\30\uffff\1\u01f7\5\uffff\1\u01f8\1\uffff\1\u01f6\3\uffff\1"+
            "\u01f5\12\uffff\1\u01ee\1\uffff\1\u01f5\4\uffff\1\u01ed",
            "\1\u01fa\14\uffff\1\u01fc\5\uffff\1\u01fb\46\uffff\1\u01fd"+
            "\30\uffff\1\u01fe\1\u01ff\1\u0200\30\uffff\1\u0203\5\uffff\1"+
            "\u0204\1\uffff\1\u0202\3\uffff\1\u0201\12\uffff\1\u01fa\1\uffff"+
            "\1\u0201\4\uffff\1\u01f9",
            "\1\u0205\u0084\uffff\1\u0205",
            "\1\u020c\17\uffff\1\u0208\47\uffff\1\u0211\1\u0214\1\u0217"+
            "\1\u0206\1\u020c\2\u0217\1\u0210\1\uffff\1\u0207\1\u020e\1\u0217"+
            "\1\u020a\1\u020f\1\u020d\1\u0217\1\u020b\2\u020f\1\u0217\1\u0210"+
            "\1\uffff\1\u0213\1\u0217\1\u0215\1\u020c\1\u0217\1\u020d\1\u0217"+
            "\1\u020b\1\u0216\1\u020e\1\u0217\1\uffff\1\u0212\1\u0217\30"+
            "\uffff\1\u0218\44\uffff\1\u0209",
            "\1\u021a\14\uffff\1\u0219\5\uffff\1\u021b\77\uffff\1\u021c"+
            "\61\uffff\1\u021a",
            "\1\u021e\67\uffff\1\u0223\1\u0226\1\u0229\1\uffff\1\u021e\2"+
            "\u0229\1\u0222\2\uffff\1\u0220\1\u0229\2\u0221\1\u021f\1\u0229"+
            "\1\u021d\2\u0221\1\u0229\1\u0222\1\uffff\1\u0225\1\u0229\1\u0227"+
            "\1\u021e\1\u0229\1\u021f\1\u0229\1\u021d\1\u0228\1\u0220\1\u0229"+
            "\1\uffff\1\u0224\1\u0229\30\uffff\1\u022a",
            "\1\u022c\67\uffff\1\u0231\1\u0234\1\u0237\1\uffff\1\u022c\2"+
            "\u0237\1\u0230\2\uffff\1\u022e\1\u0237\2\u022f\1\u022d\1\u0237"+
            "\1\u022b\2\u022f\1\u0237\1\u0230\1\uffff\1\u0233\1\u0237\1\u0235"+
            "\1\u022c\1\u0237\1\u022d\1\u0237\1\u022b\1\u0236\1\u022e\1\u0237"+
            "\1\uffff\1\u0232\1\u0237\30\uffff\1\u0238",
            "\1\u023a\67\uffff\1\u023f\1\u0242\1\u0245\1\uffff\1\u023a\2"+
            "\u0245\1\u023e\2\uffff\1\u023c\1\u0245\2\u023d\1\u023b\1\u0245"+
            "\1\u0239\2\u023d\1\u0245\1\u023e\1\uffff\1\u0241\1\u0245\1\u0243"+
            "\1\u023a\1\u0245\1\u023b\1\u0245\1\u0239\1\u0244\1\u023c\1\u0245"+
            "\1\uffff\1\u0240\1\u0245\30\uffff\1\u0246",
            "\1\u0248\67\uffff\1\u024d\1\u0250\1\u0253\1\uffff\1\u0248\2"+
            "\u0253\1\u024c\2\uffff\1\u024a\1\u0253\2\u024b\1\u0249\1\u0253"+
            "\1\u0247\2\u024b\1\u0253\1\u024c\1\uffff\1\u024f\1\u0253\1\u0251"+
            "\1\u0248\1\u0253\1\u0249\1\u0253\1\u0247\1\u0252\1\u024a\1\u0253"+
            "\1\uffff\1\u024e\1\u0253\30\uffff\1\u0254",
            "\1\u0256\67\uffff\1\u025b\1\u025e\1\u0261\1\uffff\1\u0256\2"+
            "\u0261\1\u025a\2\uffff\1\u0258\1\u0261\2\u0259\1\u0257\1\u0261"+
            "\1\u0255\2\u0259\1\u0261\1\u025a\1\uffff\1\u025d\1\u0261\1\u025f"+
            "\1\u0256\1\u0261\1\u0257\1\u0261\1\u0255\1\u0260\1\u0258\1\u0261"+
            "\1\uffff\1\u025c\1\u0261\30\uffff\1\u0262",
            "\1\u0263",
            "\1\u0264",
            "\1\u0265",
            "\1\11\12\uffff\1\3\4\uffff\1\u026c\35\uffff\1\11\13\uffff\1"+
            "\3\1\u0266\1\uffff\2\3\2\uffff\1\u0267\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u026d\31"+
            "\uffff\1\11",
            "\1\11\12\uffff\1\3\4\uffff\1\u0277\35\uffff\1\11\13\uffff\1"+
            "\3\1\u0271\1\uffff\2\3\2\uffff\1\u0272\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u0278\31"+
            "\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\u0280\13\uffff\1\u027c\41\uffff\1\u027e\11\uffff\1\u0281"+
            "\2\uffff\1\u027f\5\uffff\1\u0289\4\uffff\1\u0282\1\uffff\1\u0286"+
            "\4\uffff\1\u0283\5\uffff\1\u0282\1\uffff\1\u0286\3\uffff\1\u0284"+
            "\16\uffff\1\u028a\22\uffff\1\u0285\5\uffff\1\u028b\1\u028c\1"+
            "\u028d\20\uffff\1\u0287\7\uffff\1\u0290\5\uffff\1\u0291\1\uffff"+
            "\1\u028f\3\uffff\1\u028e\12\uffff\1\u0288\1\uffff\1\u028e\4"+
            "\uffff\1\u027d",
            "\1\u029a\11\uffff\1\u0293\2\uffff\1\u0292\5\uffff\1\u029b\4"+
            "\uffff\1\u0294\1\uffff\1\u0298\4\uffff\1\u0295\5\uffff\1\u0294"+
            "\1\uffff\1\u0298\3\uffff\1\u0296\16\uffff\1\u029c\22\uffff\1"+
            "\u0297\5\uffff\1\u029d\1\u029e\1\u029f\30\uffff\1\u02a2\5\uffff"+
            "\1\u02a3\1\uffff\1\u02a1\3\uffff\1\u02a0\12\uffff\1\u029a\1"+
            "\uffff\1\u02a0\4\uffff\1\u0299",
            "\1\u02aa\14\uffff\1\u02ac\5\uffff\1\u02ab\4\uffff\1\u02a4\1"+
            "\uffff\1\u02a8\4\uffff\1\u02a5\5\uffff\1\u02a4\1\uffff\1\u02a8"+
            "\3\uffff\1\u02a6\16\uffff\1\u02ad\22\uffff\1\u02a7\5\uffff\1"+
            "\u02ae\1\u02af\1\u02b0\30\uffff\1\u02b3\5\uffff\1\u02b4\1\uffff"+
            "\1\u02b2\3\uffff\1\u02b1\12\uffff\1\u02aa\1\uffff\1\u02b1\4"+
            "\uffff\1\u02a9",
            "\1\u02ba\14\uffff\1\u02bc\5\uffff\1\u02bb\6\uffff\1\u02b8\4"+
            "\uffff\1\u02b5\7\uffff\1\u02b8\3\uffff\1\u02b6\16\uffff\1\u02bd"+
            "\22\uffff\1\u02b7\5\uffff\1\u02be\1\u02bf\1\u02c0\30\uffff\1"+
            "\u02c3\5\uffff\1\u02c4\1\uffff\1\u02c2\3\uffff\1\u02c1\12\uffff"+
            "\1\u02ba\1\uffff\1\u02c1\4\uffff\1\u02b9",
            "\1\u02c9\14\uffff\1\u02cb\5\uffff\1\u02ca\6\uffff\1\u02c7\14"+
            "\uffff\1\u02c7\3\uffff\1\u02c5\16\uffff\1\u02cc\22\uffff\1\u02c6"+
            "\5\uffff\1\u02cd\1\u02ce\1\u02cf\30\uffff\1\u02d2\5\uffff\1"+
            "\u02d3\1\uffff\1\u02d1\3\uffff\1\u02d0\12\uffff\1\u02c9\1\uffff"+
            "\1\u02d0\4\uffff\1\u02c8",
            "\1\u02d7\14\uffff\1\u02d9\5\uffff\1\u02d8\6\uffff\1\u02d5\14"+
            "\uffff\1\u02d5\22\uffff\1\u02da\22\uffff\1\u02d4\5\uffff\1\u02db"+
            "\1\u02dc\1\u02dd\30\uffff\1\u02e0\5\uffff\1\u02e1\1\uffff\1"+
            "\u02df\3\uffff\1\u02de\12\uffff\1\u02d7\1\uffff\1\u02de\4\uffff"+
            "\1\u02d6",
            "\1\u02e4\14\uffff\1\u02e6\5\uffff\1\u02e5\6\uffff\1\u02e2\14"+
            "\uffff\1\u02e2\22\uffff\1\u02e7\30\uffff\1\u02e8\1\u02e9\1\u02ea"+
            "\30\uffff\1\u02ed\5\uffff\1\u02ee\1\uffff\1\u02ec\3\uffff\1"+
            "\u02eb\12\uffff\1\u02e4\1\uffff\1\u02eb\4\uffff\1\u02e3",
            "\1\u02f0\14\uffff\1\u02f2\5\uffff\1\u02f1\46\uffff\1\u02f3"+
            "\30\uffff\1\u02f4\1\u02f5\1\u02f6\30\uffff\1\u02f9\5\uffff\1"+
            "\u02fa\1\uffff\1\u02f8\3\uffff\1\u02f7\12\uffff\1\u02f0\1\uffff"+
            "\1\u02f7\4\uffff\1\u02ef",
            "\1\u02fb\u0084\uffff\1\u02fb",
            "\1\u0302\12\uffff\1\u030e\4\uffff\1\u02fe\47\uffff\1\u0307"+
            "\1\u030a\1\u030d\1\u02fc\1\u0302\2\u030d\1\u0306\1\uffff\1\u02fd"+
            "\1\u0304\1\u030d\1\u0300\1\u0305\1\u0303\1\u030d\1\u0301\2\u0305"+
            "\1\u030d\1\u0306\1\uffff\1\u0309\1\u030d\1\u030b\1\u0302\1\u030d"+
            "\1\u0303\1\u030d\1\u0301\1\u030c\1\u0304\1\u030d\1\uffff\1\u0308"+
            "\1\u030d\26\uffff\1\u030f\46\uffff\1\u02ff",
            "\1\u0311\14\uffff\1\u0310\5\uffff\1\u0312\77\uffff\1\u0313"+
            "\61\uffff\1\u0311",
            "\1\u0315\12\uffff\1\u0321\54\uffff\1\u031a\1\u031d\1\u0320"+
            "\1\uffff\1\u0315\2\u0320\1\u0319\2\uffff\1\u0317\1\u0320\2\u0318"+
            "\1\u0316\1\u0320\1\u0314\2\u0318\1\u0320\1\u0319\1\uffff\1\u031c"+
            "\1\u0320\1\u031e\1\u0315\1\u0320\1\u0316\1\u0320\1\u0314\1\u031f"+
            "\1\u0317\1\u0320\1\uffff\1\u031b\1\u0320\26\uffff\1\u0322",
            "\1\u0324\12\uffff\1\u0330\54\uffff\1\u0329\1\u032c\1\u032f"+
            "\1\uffff\1\u0324\2\u032f\1\u0328\2\uffff\1\u0326\1\u032f\2\u0327"+
            "\1\u0325\1\u032f\1\u0323\2\u0327\1\u032f\1\u0328\1\uffff\1\u032b"+
            "\1\u032f\1\u032d\1\u0324\1\u032f\1\u0325\1\u032f\1\u0323\1\u032e"+
            "\1\u0326\1\u032f\1\uffff\1\u032a\1\u032f\26\uffff\1\u0331",
            "\1\u0333\12\uffff\1\u033f\54\uffff\1\u0338\1\u033b\1\u033e"+
            "\1\uffff\1\u0333\2\u033e\1\u0337\2\uffff\1\u0335\1\u033e\2\u0336"+
            "\1\u0334\1\u033e\1\u0332\2\u0336\1\u033e\1\u0337\1\uffff\1\u033a"+
            "\1\u033e\1\u033c\1\u0333\1\u033e\1\u0334\1\u033e\1\u0332\1\u033d"+
            "\1\u0335\1\u033e\1\uffff\1\u0339\1\u033e\26\uffff\1\u0340",
            "\1\u0342\12\uffff\1\u034e\54\uffff\1\u0347\1\u034a\1\u034d"+
            "\1\uffff\1\u0342\2\u034d\1\u0346\2\uffff\1\u0344\1\u034d\2\u0345"+
            "\1\u0343\1\u034d\1\u0341\2\u0345\1\u034d\1\u0346\1\uffff\1\u0349"+
            "\1\u034d\1\u034b\1\u0342\1\u034d\1\u0343\1\u034d\1\u0341\1\u034c"+
            "\1\u0344\1\u034d\1\uffff\1\u0348\1\u034d\26\uffff\1\u034f",
            "\1\u0351\12\uffff\1\u035d\54\uffff\1\u0356\1\u0359\1\u035c"+
            "\1\uffff\1\u0351\2\u035c\1\u0355\2\uffff\1\u0353\1\u035c\2\u0354"+
            "\1\u0352\1\u035c\1\u0350\2\u0354\1\u035c\1\u0355\1\uffff\1\u0358"+
            "\1\u035c\1\u035a\1\u0351\1\u035c\1\u0352\1\u035c\1\u0350\1\u035b"+
            "\1\u0353\1\u035c\1\uffff\1\u0357\1\u035c\26\uffff\1\u035e",
            "\1\u035f",
            "\1\u0360",
            "\1\u0361",
            "\1\11\12\uffff\1\3\4\uffff\1\u0363\35\uffff\1\11\13\uffff\1"+
            "\3\2\uffff\2\3\2\uffff\1\u0362\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u0364\31\uffff\1\11",
            "\1\u0370\13\uffff\1\u036c\41\uffff\1\u036e\11\uffff\1\u0371"+
            "\2\uffff\1\u036f\5\uffff\1\u0379\4\uffff\1\u0372\1\uffff\1\u0376"+
            "\4\uffff\1\u0373\5\uffff\1\u0372\1\uffff\1\u0376\3\uffff\1\u0374"+
            "\16\uffff\1\u037a\22\uffff\1\u0375\5\uffff\1\u037b\1\u037c\1"+
            "\u037d\20\uffff\1\u0377\7\uffff\1\u0380\5\uffff\1\u0381\1\uffff"+
            "\1\u037f\3\uffff\1\u037e\12\uffff\1\u0378\1\uffff\1\u037e\4"+
            "\uffff\1\u036d",
            "\1\u038a\11\uffff\1\u0383\2\uffff\1\u0382\5\uffff\1\u038b\4"+
            "\uffff\1\u0384\1\uffff\1\u0388\4\uffff\1\u0385\5\uffff\1\u0384"+
            "\1\uffff\1\u0388\3\uffff\1\u0386\16\uffff\1\u038c\22\uffff\1"+
            "\u0387\5\uffff\1\u038d\1\u038e\1\u038f\30\uffff\1\u0392\5\uffff"+
            "\1\u0393\1\uffff\1\u0391\3\uffff\1\u0390\12\uffff\1\u038a\1"+
            "\uffff\1\u0390\4\uffff\1\u0389",
            "\1\u039a\14\uffff\1\u039c\5\uffff\1\u039b\4\uffff\1\u0394\1"+
            "\uffff\1\u0398\4\uffff\1\u0395\5\uffff\1\u0394\1\uffff\1\u0398"+
            "\3\uffff\1\u0396\16\uffff\1\u039d\22\uffff\1\u0397\5\uffff\1"+
            "\u039e\1\u039f\1\u03a0\30\uffff\1\u03a3\5\uffff\1\u03a4\1\uffff"+
            "\1\u03a2\3\uffff\1\u03a1\12\uffff\1\u039a\1\uffff\1\u03a1\4"+
            "\uffff\1\u0399",
            "\1\u03aa\14\uffff\1\u03ac\5\uffff\1\u03ab\6\uffff\1\u03a8\4"+
            "\uffff\1\u03a5\7\uffff\1\u03a8\3\uffff\1\u03a6\16\uffff\1\u03ad"+
            "\22\uffff\1\u03a7\5\uffff\1\u03ae\1\u03af\1\u03b0\30\uffff\1"+
            "\u03b3\5\uffff\1\u03b4\1\uffff\1\u03b2\3\uffff\1\u03b1\12\uffff"+
            "\1\u03aa\1\uffff\1\u03b1\4\uffff\1\u03a9",
            "\1\u03b9\14\uffff\1\u03bb\5\uffff\1\u03ba\6\uffff\1\u03b7\14"+
            "\uffff\1\u03b7\3\uffff\1\u03b5\16\uffff\1\u03bc\22\uffff\1\u03b6"+
            "\5\uffff\1\u03bd\1\u03be\1\u03bf\30\uffff\1\u03c2\5\uffff\1"+
            "\u03c3\1\uffff\1\u03c1\3\uffff\1\u03c0\12\uffff\1\u03b9\1\uffff"+
            "\1\u03c0\4\uffff\1\u03b8",
            "\1\u03c7\14\uffff\1\u03c9\5\uffff\1\u03c8\6\uffff\1\u03c5\14"+
            "\uffff\1\u03c5\22\uffff\1\u03ca\22\uffff\1\u03c4\5\uffff\1\u03cb"+
            "\1\u03cc\1\u03cd\30\uffff\1\u03d0\5\uffff\1\u03d1\1\uffff\1"+
            "\u03cf\3\uffff\1\u03ce\12\uffff\1\u03c7\1\uffff\1\u03ce\4\uffff"+
            "\1\u03c6",
            "\1\u03d4\14\uffff\1\u03d6\5\uffff\1\u03d5\6\uffff\1\u03d2\14"+
            "\uffff\1\u03d2\22\uffff\1\u03d7\30\uffff\1\u03d8\1\u03d9\1\u03da"+
            "\30\uffff\1\u03dd\5\uffff\1\u03de\1\uffff\1\u03dc\3\uffff\1"+
            "\u03db\12\uffff\1\u03d4\1\uffff\1\u03db\4\uffff\1\u03d3",
            "\1\u03e0\14\uffff\1\u03e2\5\uffff\1\u03e1\46\uffff\1\u03e3"+
            "\30\uffff\1\u03e4\1\u03e5\1\u03e6\30\uffff\1\u03e9\5\uffff\1"+
            "\u03ea\1\uffff\1\u03e8\3\uffff\1\u03e7\12\uffff\1\u03e0\1\uffff"+
            "\1\u03e7\4\uffff\1\u03df",
            "\1\u03eb\u0084\uffff\1\u03eb",
            "\1\u03f2\17\uffff\1\u03ee\47\uffff\1\u03f7\1\u03fa\1\u03fd"+
            "\1\u03ec\1\u03f2\2\u03fd\1\u03f6\1\uffff\1\u03ed\1\u03f4\1\u03fd"+
            "\1\u03f0\1\u03f5\1\u03f3\1\u03fd\1\u03f1\2\u03f5\1\u03fd\1\u03f6"+
            "\1\uffff\1\u03f9\1\u03fd\1\u03fb\1\u03f2\1\u03fd\1\u03f3\1\u03fd"+
            "\1\u03f1\1\u03fc\1\u03f4\1\u03fd\1\uffff\1\u03f8\1\u03fd\30"+
            "\uffff\1\u03fe\44\uffff\1\u03ef",
            "\1\u0400\14\uffff\1\u03ff\5\uffff\1\u0401\77\uffff\1\u0402"+
            "\61\uffff\1\u0400",
            "\1\u0404\67\uffff\1\u0409\1\u040c\1\u040f\1\uffff\1\u0404\2"+
            "\u040f\1\u0408\2\uffff\1\u0406\1\u040f\2\u0407\1\u0405\1\u040f"+
            "\1\u0403\2\u0407\1\u040f\1\u0408\1\uffff\1\u040b\1\u040f\1\u040d"+
            "\1\u0404\1\u040f\1\u0405\1\u040f\1\u0403\1\u040e\1\u0406\1\u040f"+
            "\1\uffff\1\u040a\1\u040f\30\uffff\1\u0410",
            "\1\u0412\67\uffff\1\u0417\1\u041a\1\u041d\1\uffff\1\u0412\2"+
            "\u041d\1\u0416\2\uffff\1\u0414\1\u041d\2\u0415\1\u0413\1\u041d"+
            "\1\u0411\2\u0415\1\u041d\1\u0416\1\uffff\1\u0419\1\u041d\1\u041b"+
            "\1\u0412\1\u041d\1\u0413\1\u041d\1\u0411\1\u041c\1\u0414\1\u041d"+
            "\1\uffff\1\u0418\1\u041d\30\uffff\1\u041e",
            "\1\u0420\67\uffff\1\u0425\1\u0428\1\u042b\1\uffff\1\u0420\2"+
            "\u042b\1\u0424\2\uffff\1\u0422\1\u042b\2\u0423\1\u0421\1\u042b"+
            "\1\u041f\2\u0423\1\u042b\1\u0424\1\uffff\1\u0427\1\u042b\1\u0429"+
            "\1\u0420\1\u042b\1\u0421\1\u042b\1\u041f\1\u042a\1\u0422\1\u042b"+
            "\1\uffff\1\u0426\1\u042b\30\uffff\1\u042c",
            "\1\u042e\67\uffff\1\u0433\1\u0436\1\u0439\1\uffff\1\u042e\2"+
            "\u0439\1\u0432\2\uffff\1\u0430\1\u0439\2\u0431\1\u042f\1\u0439"+
            "\1\u042d\2\u0431\1\u0439\1\u0432\1\uffff\1\u0435\1\u0439\1\u0437"+
            "\1\u042e\1\u0439\1\u042f\1\u0439\1\u042d\1\u0438\1\u0430\1\u0439"+
            "\1\uffff\1\u0434\1\u0439\30\uffff\1\u043a",
            "\1\u043c\67\uffff\1\u0441\1\u0444\1\u0447\1\uffff\1\u043c\2"+
            "\u0447\1\u0440\2\uffff\1\u043e\1\u0447\2\u043f\1\u043d\1\u0447"+
            "\1\u043b\2\u043f\1\u0447\1\u0440\1\uffff\1\u0443\1\u0447\1\u0445"+
            "\1\u043c\1\u0447\1\u043d\1\u0447\1\u043b\1\u0446\1\u043e\1\u0447"+
            "\1\uffff\1\u0442\1\u0447\30\uffff\1\u0448",
            "\1\u0449",
            "\1\u044a",
            "\1\u044b",
            "\1\11\12\uffff\1\3\4\uffff\1\u044c\35\uffff\1\11\13\uffff\1"+
            "\3\2\uffff\2\3\2\uffff\1\u0452\1\uffff\1\3\3\uffff\1\3\3\uffff"+
            "\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1\3\2\uffff"+
            "\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u044d\31\uffff\1\11",
            "\1\11\12\uffff\1\3\4\uffff\1\u045c\35\uffff\1\11\13\uffff\1"+
            "\3\1\u0456\1\uffff\2\3\2\uffff\1\u0457\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u045d\31"+
            "\uffff\1\11",
            "\1\11\12\uffff\1\3\4\uffff\1\u0467\35\uffff\1\11\13\uffff\1"+
            "\3\1\u0461\1\uffff\2\3\2\uffff\1\u0462\1\uffff\1\3\3\uffff\1"+
            "\3\3\uffff\1\3\3\uffff\1\3\2\uffff\1\3\1\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\1\3\33\uffff\1\3\34\uffff\1\11\4\uffff\1\u0468\31"+
            "\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "476:4: ( object_name ( ASTERISK )* )?";
        }
    }
    static final String DFA72_eotS =
        "\142\uffff";
    static final String DFA72_eofS =
        "\142\uffff";
    static final String DFA72_minS =
        "\2\5\24\uffff\1\5\24\uffff\1\5\66\uffff";
    static final String DFA72_maxS =
        "\2\u00bf\24\uffff\1\u009e\24\uffff\1\u00bf\66\uffff";
    static final String DFA72_acceptS =
        "\2\uffff\1\1\47\uffff\1\2\67\uffff";
    static final String DFA72_specialS =
        "\142\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\2\55\uffff\1\2\11\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "\1\2\13\uffff\1\2\41\uffff\1\26\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2"+
            "\1\uffff\1\52\16\uffff\1\2\7\uffff\1\2\5\uffff\1\2\1\uffff\1"+
            "\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\17\uffff\1\2\47\uffff\10\2\1\uffff\14\2\1\uffff\13\2\1"+
            "\uffff\2\2\26\uffff\1\53\46\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\12\uffff\1\2\4\uffff\1\2\35\uffff\1\2\11\uffff\10\2\1"+
            "\52\33\2\14\uffff\1\2\11\uffff\2\2\7\uffff\1\2\5\uffff\3\2\25"+
            "\uffff\1\2\2\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "558:1: expression : ( classical_expr_wrp | struct_init );";
        }
    }
    static final String DFA76_eotS =
        "\155\uffff";
    static final String DFA76_eofS =
        "\155\uffff";
    static final String DFA76_minS =
        "\2\5\25\uffff\1\5\10\uffff\1\5\12\uffff\1\5\3\uffff\1\5\17\uffff"+
        "\1\171\55\uffff";
    static final String DFA76_maxS =
        "\2\u00bf\25\uffff\1\u009e\10\uffff\1\167\12\uffff\1\u00bf\3\uffff"+
        "\1\u00bf\17\uffff\1\171\55\uffff";
    static final String DFA76_acceptS =
        "\2\uffff\1\1\21\uffff\1\2\56\uffff\1\3\1\1\23\uffff\1\1\23\uffff"+
        "\1\1";
    static final String DFA76_specialS =
        "\155\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\2\55\uffff\1\2\11\uffff\1\2\2\uffff\1\1\4\uffff\1\24\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\2\13\uffff\1\2\41\uffff\1\27\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2"+
            "\20\uffff\1\40\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\17\uffff\1\2\47\uffff\3\2\1\57\4\2\1\uffff\1\53\13\2\1"+
            "\uffff\13\2\1\uffff\2\2\26\uffff\1\2\46\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\72\uffff\1\103\5\uffff\1\77\2\uffff\1\2\55\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\55\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\104\6\uffff\1\2\5\uffff\3\2\30"+
            "\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "\1\130\55\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\5\uffff\3"+
            "\2\30\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\154",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "576:19: ( classical_expr_wrp | array_init | ( func_pointer2 ( method_call_wrapper )? ) )";
        }
    }
    static final String DFA81_eotS =
        "\150\uffff";
    static final String DFA81_eofS =
        "\150\uffff";
    static final String DFA81_minS =
        "\1\63\1\5\2\uffff\2\5\10\uffff\1\63\7\uffff\1\5\14\uffff\1\5\104"+
        "\uffff";
    static final String DFA81_maxS =
        "\2\u00b8\2\uffff\2\u00bf\10\uffff\1\u00bf\7\uffff\1\u009e\14\uffff"+
        "\1\u00b8\104\uffff";
    static final String DFA81_acceptS =
        "\2\uffff\1\1\1\2\73\uffff\1\1\14\uffff\1\1\21\uffff\1\1\11\uffff";
    static final String DFA81_specialS =
        "\150\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\1\145\uffff\1\3\36\uffff\1\2",
            "\1\3\12\uffff\1\2\4\uffff\1\2\51\uffff\1\2\1\4\1\uffff\2\2"+
            "\2\uffff\1\5\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\33\uffff\1"+
            "\2\41\uffff\1\2\31\uffff\1\2",
            "",
            "",
            "\1\16\55\uffff\1\26\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\5\uffff\3"+
            "\2\20\uffff\1\3\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\55\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\43\6\uffff\1\2\5\uffff\3\2\30\uffff"+
            "\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\77\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\5\uffff\3\2\20\uffff\1\3\7\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\12\uffff\1\2\4\uffff\1\2\47\uffff\10\2\1\uffff\1\114\13"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\136\46\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\12\uffff\1\136\4\uffff\1\136\51\uffff\1\136\1\3\1\uffff"+
            "\2\136\2\uffff\1\136\1\uffff\1\136\3\uffff\1\136\3\uffff\1\136"+
            "\3\uffff\1\136\2\uffff\1\136\1\uffff\1\136\3\uffff\1\136\2\uffff"+
            "\1\136\33\uffff\1\136\41\uffff\1\136\31\uffff\1\136",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "597:4: ( object_name | func_pointer1 )";
        }
    }
    static final String DFA93_eotS =
        "\u00b9\uffff";
    static final String DFA93_eofS =
        "\60\uffff\1\2\u0088\uffff";
    static final String DFA93_minS =
        "\2\5\23\uffff\1\63\1\5\23\uffff\1\5\2\uffff\4\5\u0088\uffff";
    static final String DFA93_maxS =
        "\2\u00bf\23\uffff\1\u00b8\1\u009e\23\uffff\1\u009e\2\uffff\4\u00bf"+
        "\u0088\uffff";
    static final String DFA93_acceptS =
        "\2\uffff\1\2\21\uffff\1\1\54\uffff\4\1\20\uffff\1\1\23\uffff\1\1"+
        "\24\uffff\1\1\22\uffff\3\1\3\uffff\1\1\1\uffff\1\1\32\uffff\1\1"+
        "\4\uffff";
    static final String DFA93_specialS =
        "\u00b9\uffff}>";
    static final String[] DFA93_transitionS = {
            "\1\2\55\uffff\1\2\11\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "\1\2\13\uffff\1\24\41\uffff\1\26\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2"+
            "\20\uffff\1\24\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\52\145\uffff\1\24\36\uffff\1\2",
            "\1\57\17\uffff\1\2\47\uffff\10\2\1\uffff\1\55\2\2\1\56\10\2"+
            "\1\uffff\13\2\1\uffff\2\2\26\uffff\1\60\46\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\17\uffff\1\2\47\uffff\10\2\1\uffff\1\101\2\2\1\102\10"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\104\46\uffff\1\2",
            "",
            "",
            "\1\2\55\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\125\6\uffff\1\2\5\uffff\3\2\30"+
            "\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2",
            "\1\2\55\uffff\1\151\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1"+
            "\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\176\55\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\11\uffff\1\24\10\uffff\1\2\5\uffff\3"+
            "\2\30\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\u0091\11\uffff\2\2\4\uffff\1\2\35\uffff\1\u0099\11\uffff"+
            "\1\u0092\2\2\1\u0099\4\2\1\uffff\1\u0099\4\2\1\u0093\1\2\1\u0097"+
            "\4\2\1\u0093\5\2\1\u0093\1\2\1\u0097\3\2\1\u0093\2\2\14\uffff"+
            "\1\u0099\11\uffff\3\2\2\uffff\1\2\3\uffff\1\u0093\5\uffff\3"+
            "\u0099\20\uffff\1\2\4\uffff\1\2\2\uffff\1\u0099\5\uffff\1\u0099"+
            "\1\uffff\1\u0099\3\uffff\1\u0099\12\uffff\1\u00b4\1\uffff\1"+
            "\u0099\4\uffff\1\u0093",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA93_eot = DFA.unpackEncodedString(DFA93_eotS);
    static final short[] DFA93_eof = DFA.unpackEncodedString(DFA93_eofS);
    static final char[] DFA93_min = DFA.unpackEncodedStringToUnsignedChars(DFA93_minS);
    static final char[] DFA93_max = DFA.unpackEncodedStringToUnsignedChars(DFA93_maxS);
    static final short[] DFA93_accept = DFA.unpackEncodedString(DFA93_acceptS);
    static final short[] DFA93_special = DFA.unpackEncodedString(DFA93_specialS);
    static final short[][] DFA93_transition;

    static {
        int numStates = DFA93_transitionS.length;
        DFA93_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA93_transition[i] = DFA.unpackEncodedString(DFA93_transitionS[i]);
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = DFA93_eot;
            this.eof = DFA93_eof;
            this.min = DFA93_min;
            this.max = DFA93_max;
            this.accept = DFA93_accept;
            this.special = DFA93_special;
            this.transition = DFA93_transition;
        }
        public String getDescription() {
            return "680:4: ( type_convertion )?";
        }
    }
    static final String DFA94_eotS =
        "\u00b7\uffff";
    static final String DFA94_eofS =
        "\57\uffff\1\2\u0087\uffff";
    static final String DFA94_minS =
        "\1\63\1\5\22\uffff\1\63\1\5\23\uffff\1\5\2\uffff\4\5\u0087\uffff";
    static final String DFA94_maxS =
        "\2\u00bf\22\uffff\1\u00b8\1\u009e\23\uffff\1\u009e\2\uffff\4\u00bf"+
        "\u0087\uffff";
    static final String DFA94_acceptS =
        "\2\uffff\1\2\20\uffff\1\1\54\uffff\4\1\20\uffff\1\1\23\uffff\1\1"+
        "\24\uffff\1\1\22\uffff\2\1\3\uffff\1\1\1\uffff\1\1\32\uffff\1\1"+
        "\4\uffff";
    static final String DFA94_specialS =
        "\u00b7\uffff}>";
    static final String[] DFA94_transitionS = {
            "\1\2\11\uffff\1\2\2\uffff\1\1\5\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1\2\5\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\13\uffff\1\23\41\uffff\1\25\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2"+
            "\20\uffff\1\23\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\51\145\uffff\1\23\36\uffff\1\2",
            "\1\56\17\uffff\1\2\47\uffff\10\2\1\uffff\1\54\2\2\1\55\10\2"+
            "\1\uffff\13\2\1\uffff\2\2\26\uffff\1\57\46\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\102\17\uffff\1\2\47\uffff\10\2\1\uffff\1\100\2\2\1\101\10"+
            "\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\103\46\uffff\1\2",
            "",
            "",
            "\1\2\55\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\124\6\uffff\1\2\5\uffff\3\2\30"+
            "\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2"+
            "\1\uffff\1\2\4\uffff\1\2",
            "\1\2\55\uffff\1\150\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1"+
            "\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\175\55\uffff\1\2\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\11\uffff\1\23\10\uffff\1\2\5\uffff\3"+
            "\2\30\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\11\uffff\2\2\4\uffff\1\2\35\uffff\1\u0097\11\uffff\1\u0090"+
            "\2\2\1\u0097\4\2\1\uffff\1\u0097\4\2\1\u0091\1\2\1\u0095\4\2"+
            "\1\u0091\5\2\1\u0091\1\2\1\u0095\3\2\1\u0091\2\2\14\uffff\1"+
            "\u0097\11\uffff\3\2\2\uffff\1\2\3\uffff\1\u0091\5\uffff\3\u0097"+
            "\20\uffff\1\2\4\uffff\1\2\2\uffff\1\u0097\5\uffff\1\u0097\1"+
            "\uffff\1\u0097\3\uffff\1\u0097\12\uffff\1\u00b2\1\uffff\1\u0097"+
            "\4\uffff\1\u0091",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "683:14: ( type_convertion )?";
        }
    }
    static final String DFA104_eotS =
        "\u009d\uffff";
    static final String DFA104_eofS =
        "\1\2\30\uffff\1\2\25\uffff\1\113\155\uffff";
    static final String DFA104_minS =
        "\2\5\27\uffff\1\5\23\uffff\3\5\155\uffff";
    static final String DFA104_maxS =
        "\1\u00b8\1\u00bf\27\uffff\1\u00b8\23\uffff\3\u00bf\155\uffff";
    static final String DFA104_acceptS =
        "\2\uffff\1\2\110\uffff\1\1\1\uffff\1\1\22\uffff\1\1\27\uffff\3\1"+
        "\3\uffff\1\1\11\uffff\1\1\3\uffff\1\1\20\uffff";
    static final String DFA104_specialS =
        "\u009d\uffff}>";
    static final String[] DFA104_transitionS = {
            "\1\2\11\uffff\2\2\42\uffff\1\2\11\uffff\3\2\1\uffff\4\2\2\uffff"+
            "\2\2\1\1\10\2\1\uffff\13\2\1\uffff\2\2\26\uffff\3\2\2\uffff"+
            "\1\2\34\uffff\1\2\36\uffff\1\2",
            "\1\2\55\uffff\1\31\11\uffff\1\2\2\uffff\1\2\5\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2\30\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\55\11\uffff\1\2\1\56\4\uffff\1\2\35\uffff\1\2\11\uffff\10"+
            "\2\1\uffff\10\2\1\57\3\2\1\uffff\13\2\1\uffff\2\2\26\uffff\3"+
            "\2\2\uffff\1\2\34\uffff\1\2\4\uffff\1\2\31\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\115\12\uffff\1\113\42\uffff\1\2\11\uffff\1\2\2\uffff\1\2"+
            "\5\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\113\3\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff"+
            "\3\2\30\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\12\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\2\17\uffff\1\2\35\uffff\1\140\11\uffff\1\2\2\uffff\1\2\4"+
            "\uffff\2\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\5\uffff\3\2"+
            "\20\uffff\1\2\7\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\12\uffff\1\2\1\uffff\1\2\4\uffff\1\2",
            "\1\171\11\uffff\1\u0088\1\113\42\uffff\1\u0088\11\uffff\1\176"+
            "\2\113\1\2\1\u008c\3\113\1\uffff\1\2\4\113\1\172\1\113\1\170"+
            "\4\113\1\2\3\113\1\u008c\1\113\1\172\1\113\1\170\3\113\1\2\2"+
            "\113\14\uffff\1\2\11\uffff\1\113\2\u0088\2\uffff\1\113\3\uffff"+
            "\1\2\5\uffff\3\2\20\uffff\1\u008c\7\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\12\uffff\1\u008c\1\uffff\1\2\4\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "711:29: ( generic )?";
        }
    }
    static final String DFA192_eotS =
        "\u00b5\uffff";
    static final String DFA192_eofS =
        "\u00b5\uffff";
    static final String DFA192_minS =
        "\1\63\3\uffff\1\5\1\uffff\3\5\1\uffff\1\5\21\uffff\1\5\23\uffff"+
        "\1\5\16\uffff\1\5\16\uffff\1\5\146\uffff";
    static final String DFA192_maxS =
        "\1\u00ba\3\uffff\1\u00bf\1\uffff\1\u009e\2\170\1\uffff\1\170\21"+
        "\uffff\1\u00bf\23\uffff\1\u00bf\16\uffff\1\u00bf\16\uffff\1\u00bf"+
        "\146\uffff";
    static final String DFA192_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\uffff\1\5\3\uffff\1\4\1\uffff\1\6\21\uffff"+
        "\1\4\23\uffff\1\4\16\uffff\1\4\16\uffff\1\4\15\uffff\3\4\1\uffff"+
        "\1\4\21\uffff\3\4\1\uffff\1\4\21\uffff\3\4\1\uffff\1\4\21\uffff"+
        "\3\4\1\uffff\1\4\21\uffff";
    static final String DFA192_specialS =
        "\u00b5\uffff}>";
    static final String[] DFA192_transitionS = {
            "\1\1\21\uffff\1\4\47\uffff\1\5\30\uffff\1\2\46\uffff\1\3\14"+
            "\uffff\1\3",
            "",
            "",
            "",
            "\1\13\17\uffff\1\13\35\uffff\1\6\11\uffff\1\13\2\uffff\1\13"+
            "\4\uffff\1\11\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13\5"+
            "\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\12\22\uffff"+
            "\1\13\5\uffff\1\7\2\13\30\uffff\1\13\5\uffff\1\13\1\uffff\1"+
            "\13\3\uffff\1\10\12\uffff\1\13\1\uffff\1\10\4\uffff\1\13",
            "",
            "\1\13\12\uffff\1\34\4\uffff\1\13\47\uffff\10\13\1\uffff\14"+
            "\13\1\uffff\13\13\1\uffff\2\13\27\uffff\1\35\45\uffff\1\13",
            "\1\13\12\uffff\1\60\54\uffff\3\13\1\uffff\4\13\2\uffff\13\13"+
            "\1\uffff\13\13\1\uffff\2\13\27\uffff\1\61",
            "\1\13\12\uffff\1\77\54\uffff\3\13\1\uffff\4\13\2\uffff\13\13"+
            "\1\uffff\13\13\1\uffff\2\13\27\uffff\1\100",
            "",
            "\1\13\12\uffff\1\116\54\uffff\3\13\1\uffff\4\13\2\uffff\13"+
            "\13\1\uffff\13\13\1\uffff\2\13\27\uffff\1\117",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\17\uffff\1\13\35\uffff\1\135\11\uffff\1\13\2\uffff\1"+
            "\13\4\uffff\1\117\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13"+
            "\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\141\22\uffff"+
            "\1\13\5\uffff\1\136\2\13\30\uffff\1\13\5\uffff\1\13\1\uffff"+
            "\1\13\3\uffff\1\137\12\uffff\1\13\1\uffff\1\137\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\17\uffff\1\13\35\uffff\1\163\11\uffff\1\13\2\uffff\1"+
            "\13\4\uffff\1\117\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1\13"+
            "\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\167\22\uffff"+
            "\1\13\5\uffff\1\164\2\13\30\uffff\1\13\5\uffff\1\13\1\uffff"+
            "\1\13\3\uffff\1\165\12\uffff\1\13\1\uffff\1\165\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\17\uffff\1\13\35\uffff\1\u0089\11\uffff\1\13\2\uffff"+
            "\1\13\4\uffff\1\117\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1"+
            "\13\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\u008d"+
            "\22\uffff\1\13\5\uffff\1\u008a\2\13\30\uffff\1\13\5\uffff\1"+
            "\13\1\uffff\1\13\3\uffff\1\u008b\12\uffff\1\13\1\uffff\1\u008b"+
            "\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\13\17\uffff\1\13\35\uffff\1\u009f\11\uffff\1\13\2\uffff"+
            "\1\13\4\uffff\1\117\1\13\4\uffff\1\13\1\uffff\1\13\4\uffff\1"+
            "\13\5\uffff\1\13\1\uffff\1\13\3\uffff\1\13\16\uffff\1\u00a3"+
            "\22\uffff\1\13\5\uffff\1\u00a0\2\13\30\uffff\1\13\5\uffff\1"+
            "\13\1\uffff\1\13\3\uffff\1\u00a1\12\uffff\1\13\1\uffff\1\u00a1"+
            "\4\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA192_eot = DFA.unpackEncodedString(DFA192_eotS);
    static final short[] DFA192_eof = DFA.unpackEncodedString(DFA192_eofS);
    static final char[] DFA192_min = DFA.unpackEncodedStringToUnsignedChars(DFA192_minS);
    static final char[] DFA192_max = DFA.unpackEncodedStringToUnsignedChars(DFA192_maxS);
    static final short[] DFA192_accept = DFA.unpackEncodedString(DFA192_acceptS);
    static final short[] DFA192_special = DFA.unpackEncodedString(DFA192_specialS);
    static final short[][] DFA192_transition;

    static {
        int numStates = DFA192_transitionS.length;
        DFA192_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA192_transition[i] = DFA.unpackEncodedString(DFA192_transitionS[i]);
        }
    }

    class DFA192 extends DFA {

        public DFA192(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 192;
            this.eot = DFA192_eot;
            this.eof = DFA192_eof;
            this.min = DFA192_min;
            this.max = DFA192_max;
            this.accept = DFA192_accept;
            this.special = DFA192_special;
            this.transition = DFA192_transition;
        }
        public String getDescription() {
            return "1081:1: value : ( ID | string_value | null_stmt | array | NUMBER | struct_init2 );";
        }
    }
 

    public static final BitSet FOLLOW_code_internal_in_code415 = new BitSet(new long[]{0x0008000000020002L,0x0000000000000000L,0x0020003002000408L});
    public static final BitSet FOLLOW_operator_wrapper_in_code_internal429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_in_operator_wrapper446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_wrapper_in_operator464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_operator470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_wrapper_in_operator475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_operator482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_operator488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_extern526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_157_in_extern529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_L_FBR_in_extern532 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFEFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000000001L});
    public static final BitSet FOLLOW_set_in_extern534 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_extern539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_implementation570 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_implementation573 = new BitSet(new long[]{0x0008000000008000L,0x0000000001000801L,0x2020040002000408L});
    public static final BitSet FOLLOW_category_in_implementation576 = new BitSet(new long[]{0x0008000000008000L,0x0000000001000800L,0x2020040002000408L});
    public static final BitSet FOLLOW_super_class_in_implementation579 = new BitSet(new long[]{0x0008000000000000L,0x0000000001000800L,0x2020040002000408L});
    public static final BitSet FOLLOW_implementation_body_in_implementation584 = new BitSet(new long[]{0x0008000000000000L,0x0000000001000800L,0x2020040402000408L});
    public static final BitSet FOLLOW_162_in_implementation589 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_category604 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_category607 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_category610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_in_implementation_body634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_implementation_body640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_wrapper_in_implementation_body652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_implementation_body658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_synthesize687 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize690 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_synthesize693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_typedef705 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_typedef709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_typedef713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_in_static_section_wrapper728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_section748 = new BitSet(new long[]{0x0008000001020000L,0x1000000000000020L,0x0200000002000400L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_section750 = new BitSet(new long[]{0x0008000001000000L,0x1000000000000020L,0x0200000002000400L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_static_section753 = new BitSet(new long[]{0x0008000001000000L,0x1000000000000020L,0x0200000002000000L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_static_section756 = new BitSet(new long[]{0x0008000000000000L,0x1000000000000020L,0x0200000002000000L});
    public static final BitSet FOLLOW_static_section2_in_static_section759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_section_in_static_section2768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper2_in_static_section2775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section3_in_static_section2782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_inline_section794 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_field_type_in_inline_section797 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_inline_section799 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000021L});
    public static final BitSet FOLLOW_method_params2_in_inline_section802 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000020L});
    public static final BitSet FOLLOW_block_wrapper_in_inline_section806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_inline_section810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_static_section3821 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_static_section3823 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000049L});
    public static final BitSet FOLLOW_indexed_in_static_section3825 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000049L});
    public static final BitSet FOLLOW_static_end_in_static_section3829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper3_in_static_end841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_in_static_end847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_internal_in_field_end858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_end_internal876 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_end_internal879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method3_in_implementation_method_wrapper3891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body3_in_implementation_method3909 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000020L,0x0000400000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method3912 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L,0x0000400000000000L});
    public static final BitSet FOLLOW_attribute_in_implementation_method3917 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method3922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_attribute935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_BR_in_attribute938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_BR_in_attribute941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_177_in_attribute944 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute947 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute950 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_attribute953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method2965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method2970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_in_field_type_started_wrapper982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_field_type_started1001 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_field_type_started1003 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000009L});
    public static final BitSet FOLLOW_classic_method_declaration_wrapper_in_field_type_started1006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_wrapper_in_field_type_started1010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_classic_method_declaration1059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_wrapper_in_classic_method_declaration1064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_in_implementation_method_wrapper1077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method2_in_implementation_method_wrapper21094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_implementation_method1111 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000020L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method1113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method1118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_block_wrapper1131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block1153 = new BitSet(new long[]{0x2008000001020120L,0x9100200045042861L,0x9DD8BA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_block_internal_full_in_block1159 = new BitSet(new long[]{0x2008000001020120L,0x9100200045042861L,0x9DD8BA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_block_in_block1163 = new BitSet(new long[]{0x2008000001020120L,0x9100200045042861L,0x9DD8BA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_R_FBR_in_block1171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block_case1186 = new BitSet(new long[]{0x2008000001020120L,0x9100200045042861L,0x9DDCBA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_block_internal_full_in_block_case1192 = new BitSet(new long[]{0x2008000001020120L,0x9100200045042861L,0x9DDCBA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_block_in_block_case1196 = new BitSet(new long[]{0x2008000001020120L,0x9100200045042861L,0x9DDCBA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_default_stmt_in_block_case1205 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_block_case1210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_full1222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_in_block_internal1233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_wrapper_in_block_internal1243 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expression_in_block_internal1255 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_wrapper_in_block_internal1262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_wrapper_in_block_internal1267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_wrapper_in_block_internal1277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_operators_in_block_internal1297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_variable_in_block_internal1302 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_variable_in_block_internal1309 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_started_in_block_internal1316 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_type_started_in_block_internal1323 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_in_variable_init_wrapper1342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_variable_init1360 = new BitSet(new long[]{0x0008000000008000L,0x1000000000000000L,0x0100000002000000L});
    public static final BitSet FOLLOW_full_expr2_in_variable_init1364 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_variable_init1367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_variable_init1372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_types_in_known_type_started1384 = new BitSet(new long[]{0x0008000000000020L,0x0000000000000000L,0x0100000002000000L});
    public static final BitSet FOLLOW_ASTERISK_in_known_type_started1386 = new BitSet(new long[]{0x0008000000000020L,0x0000000000000000L,0x0100000002000000L});
    public static final BitSet FOLLOW_full_expr2_in_known_type_started1389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_in_typeof_started1401 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_typeof_started1403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_variable1416 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_struct_variable1418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_enum_variable1427 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_enum_variable1429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_const_expression1440 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_const_expression1442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper1451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_throw_stmt1468 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_throw_stmt1471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_try_stmt1482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_in_try_stmt1485 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000900000000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt1488 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000900000000L});
    public static final BitSet FOLLOW_163_in_try_stmt1492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_in_try_stmt1495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_catch_stmt1509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_BR_in_catch_stmt1512 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1515 = new BitSet(new long[]{0x0008000000000020L});
    public static final BitSet FOLLOW_ASTERISK_in_catch_stmt1518 = new BitSet(new long[]{0x0008000000000020L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1521 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_catch_stmt1524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_in_catch_stmt1527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_switch_stmt_wrapper1540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_switch_stmt1557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_BR_in_switch_stmt1560 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_switch_expr_in_switch_stmt1563 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_switch_stmt1565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_switch_body_wrapper_in_switch_stmt1571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_switch_body_wrapper1584 = new BitSet(new long[]{0x2008000001020120L,0x9100200045042841L,0x9DDDBA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_switch_body_in_switch_body_wrapper1586 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_switch_body_wrapper1588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_switch_body1607 = new BitSet(new long[]{0x2008000001020122L,0x9000200045042841L,0x9DDDBA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_switch_internal_in_switch_body1612 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0005000000000000L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_switch_expr1625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_wrapper_in_switch_internal1642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_wrapper_in_switch_internal1648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_case_stmt_wrapper1657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_case_stmt1674 = new BitSet(new long[]{0x0008000000000000L,0x0000200000000000L,0x04002000000001C0L});
    public static final BitSet FOLLOW_case_expr_wrapper_in_case_stmt1677 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_case_stmt1680 = new BitSet(new long[]{0x2008000001020122L,0x9000200045042861L,0x9DD8BA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_case_body_wrapper_in_case_stmt1685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_body_in_case_body_wrapper1699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_case_body1718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_case_body1725 = new BitSet(new long[]{0x2008000001020122L,0x9000200045042841L,0x9DD8BA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_case_expr_in_case_expr_wrapper1741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_case_expr1763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_case_expr1770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_case_in_block_break1781 = new BitSet(new long[]{0x0000000000000102L,0x8000000000000000L});
    public static final BitSet FOLLOW_single_operators_in_block_break1783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_default_stmt_wrapper1795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_default_stmt1812 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_default_stmt1815 = new BitSet(new long[]{0x2008000001020122L,0x9000200045042861L,0x9DD8BA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_default_body_wrapper_in_default_stmt1820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_body_in_default_body_wrapper1833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_default_body1853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_default_body1859 = new BitSet(new long[]{0x2008000001020122L,0x9000200045042841L,0x9DD8BA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_SINGLE_OP_in_single_operators1874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_wrapper_in_single_operators1881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_break_wrapper1893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_WORD_in_break_stmt1911 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_break_stmt1914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_do_stmt1924 = new BitSet(new long[]{0x2008000001020120L,0x9000200045042861L,0x9DD8BA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_if_stmt_block_in_do_stmt1927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_192_in_do_stmt1930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_BR_in_do_stmt1933 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_expression_in_do_stmt1936 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_do_stmt1938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper1947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_while_stmt1966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_BR_in_while_stmt1969 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_while_expr_in_while_stmt1972 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_while_stmt1974 = new BitSet(new long[]{0x2008000001020120L,0x9000200045042861L,0x9DD8BA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_while_stmt1977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_while_expr1990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper2009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_for_stmt2026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_BR_in_for_stmt2029 = new BitSet(new long[]{0x2008000000000020L,0x1000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_for_stmt_expr_wrapper_in_for_stmt2032 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_for_stmt2034 = new BitSet(new long[]{0x2008000001020120L,0x9000200045042861L,0x9DD8BA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_if_stmt_block_in_for_stmt2037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_expr_in_for_stmt_expr_wrapper2049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_for_stmt_expr2068 = new BitSet(new long[]{0x0008000000000000L,0x1000000000000000L,0x0100000002000000L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr2_in_for_stmt_expr2076 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_for_stmt_int12110 = new BitSet(new long[]{0x0008000000000000L,0x0000200000000041L,0x85002282000001C0L});
    public static final BitSet FOLLOW_object_wrapped2_in_for_stmt_int12112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22132 = new BitSet(new long[]{0x2008000000000020L,0x1000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22134 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22137 = new BitSet(new long[]{0x2008000000000022L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_return_stmt2156 = new BitSet(new long[]{0x2008000000000020L,0x1000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_return_stmt2158 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_return_stmt2161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_if_stmt_wrapper2182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_if_stmt2198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_BR_in_if_stmt2201 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_if_expr_in_if_stmt2204 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_if_stmt2206 = new BitSet(new long[]{0x2008000001020120L,0x9000200045042861L,0x9DD8BA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_if_stmt2209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_if_expr2222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_else_stmt2241 = new BitSet(new long[]{0x2008000001020120L,0x9000200045042861L,0x9DD8BA82020005C9L,0x0000000000000001L});
    public static final BitSet FOLLOW_if_stmt_block_in_else_stmt2244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_if_stmt_block2270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_if_stmt_block2276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_in_static_start_wrapper2288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_start2306 = new BitSet(new long[]{0x0008000000020000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_start2308 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_static_type_wrapper_in_static_start2311 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000002000000L});
    public static final BitSet FOLLOW_full_expr2_in_static_start2313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_type_in_static_type_wrapper2325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_static_type2345 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASTERISK_in_static_type2347 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_id_part_end_internal_in_id_part_end2361 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_DOT_in_id_part_end_internal2376 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_158_in_id_part_end_internal2380 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_id_part_in_id_part_end_internal2383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_internal_in_id_part2421 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000041L});
    public static final BitSet FOLLOW_function_brackets_wrapper_in_id_part2423 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_index_wrapper_in_id_part2426 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_id_part_in_object_name2439 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_name2441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_method_call_wrapper2455 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000041L,0x0100000000000040L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper2457 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_method_call_wrapper2459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper22482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_in_method_call22501 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_method_name_in_method_call22503 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_method_call_message_list_wrapper_in_method_call22507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_internal_in_object_wrapper2518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_in_object_wrapper_internal2537 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000040L,0x0100000000000000L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_object_wrapper_internal2560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_message32572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_type_convertion2591 = new BitSet(new long[]{0x0008000000020000L,0x0000000000000000L,0x8000000002000000L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_convertion2593 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x8000000002000000L});
    public static final BitSet FOLLOW_191_in_type_convertion2596 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_type_internal_in_type_convertion2599 = new BitSet(new long[]{0x0000000000000020L,0x0080000000000200L});
    public static final BitSet FOLLOW_generic_in_type_convertion2601 = new BitSet(new long[]{0x0000000000000020L,0x0080000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_type_convertion2604 = new BitSet(new long[]{0x0000000000000020L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_type_convertion2607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name2628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2662 = new BitSet(new long[]{0x0008000000008002L});
    public static final BitSet FOLLOW_method_call_message_wrapper_in_method_call_message_list2664 = new BitSet(new long[]{0x0008000000008002L});
    public static final BitSet FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_method_call_message_first2692 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_message_in_method_call_message_first2695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_in_method_call_message_wrapper2705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_in_method_call_message2724 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_incomplete_prefix_in_method_call_message2728 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_message_in_method_call_message2732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_msg_expr_in_message2741 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_message2744 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_msg_expr_in_message2746 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_msg_expr2780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expression2796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_in_expression2801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_in_full_expr_wrapper2812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr2829 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr2832 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr2834 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr22845 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr22848 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000002000000L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr22850 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_expr_assign_in_expr_assign_wrapper2861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_wrapper_in_expr_assign2880 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042861L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_assign2883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_in_expr_assign2887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer2_in_expr_assign2892 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_method_call_wrapper_in_expr_assign2894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array_init2907 = new BitSet(new long[]{0x2008000000000020L,0x0100200045042861L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init2910 = new BitSet(new long[]{0x0000000000010000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array_init2913 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042861L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init2915 = new BitSet(new long[]{0x0000000000010000L,0x0100000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array_init2921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_in_classical_expr_wrp32933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_classical_expr_wrp32939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_in_classical_expr_wrp2952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_classical_expr2969 = new BitSet(new long[]{0x8000000000000002L,0x000000012A91110CL});
    public static final BitSet FOLLOW_expr_question_wrapper_in_classical_expr2972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr2976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr2_in_classical_expr_wrp22988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_classical_expr23006 = new BitSet(new long[]{0x8000000000000002L,0x000000012291110CL});
    public static final BitSet FOLLOW_func_pointer1_in_classical_expr23010 = new BitSet(new long[]{0x8000000000000002L,0x000000012291110CL});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr23013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_question_in_expr_question_wrapper3023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_QUESTION_in_expr_question3040 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question3042 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_expr_question3044 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question3046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_in_assign_wrapper3055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_in_simple_expr_wrapper3128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_or_in_simple_expr3146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_and_wrapper_in_expr_or_or3163 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_L_OR_OR_in_expr_or_or3166 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_or_or3168 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_expr_and_and_in_expr_and_and_wrapper3179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_wrapper_in_expr_and_and3196 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_L_AND_AND_in_expr_and_and3199 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_and_and3201 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_expr_or_in_expr_or_wrapper3212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_xor_wrapper_in_expr_or3230 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_L_OR_in_expr_or3233 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_or3235 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_expr_xor_in_expr_xor_wrapper3246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_wrapper_in_expr_xor3263 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_L_XOR_in_expr_xor3266 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_xor3268 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_expr_and_in_expr_and_wrapper3280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eq_wrapper_in_expr_and3298 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_L_AND_in_expr_and3301 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_and3303 = new BitSet(new long[]{0x2000000000000002L});
    public static final BitSet FOLLOW_expr_eq_in_expr_eq_wrapper3315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_cond_wrapper_in_expr_eq3333 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020010L});
    public static final BitSet FOLLOW_set_in_expr_eq3336 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_eq3344 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020010L});
    public static final BitSet FOLLOW_expr_cond_in_expr_cond_wrapper3355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mov_wrapper_in_expr_cond3372 = new BitSet(new long[]{0x0000000000000002L,0x000000000000C600L});
    public static final BitSet FOLLOW_set_in_expr_cond3375 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_cond3391 = new BitSet(new long[]{0x0000000000000002L,0x000000000000C600L});
    public static final BitSet FOLLOW_expr_mov_in_expr_mov_wrapper3402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_add_wrapper_in_expr_mov3420 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000080L});
    public static final BitSet FOLLOW_set_in_expr_mov3423 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_mov3431 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000080L});
    public static final BitSet FOLLOW_expr_add_in_expr_add_wrapper3443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mult_wrapper_in_expr_add3460 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000800L});
    public static final BitSet FOLLOW_set_in_expr_add3463 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_add3471 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000800L});
    public static final BitSet FOLLOW_expr_mult_in_expr_mult_wrapper3482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_type_wrapper_in_expr_mult3499 = new BitSet(new long[]{0x0000000000000022L,0x0000000000400002L});
    public static final BitSet FOLLOW_set_in_expr_mult3502 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_mult3514 = new BitSet(new long[]{0x0000000000000022L,0x0000000000400002L});
    public static final BitSet FOLLOW_expr_type_in_expr_type_wrapper3526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_in_expr_type3543 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_expr_unname_in_expr_type3546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_expr_unname3557 = new BitSet(new long[]{0x2008000000000000L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_type_convertion_in_expr_unname3559 = new BitSet(new long[]{0x2008000000000000L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_expr_addr_in_expr_unname3564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_AND_in_expr_addr3574 = new BitSet(new long[]{0x0008000000000000L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_expr_sign_in_expr_addr3577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_wrapper_in_expr_sign3596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_in_expr_not_wrapper3606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_NOT_in_expr_not3625 = new BitSet(new long[]{0x0008000000000000L,0x0000200044002041L,0x85002282000001C1L});
    public static final BitSet FOLLOW_expr_not2_in_expr_not3628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_TILDA_in_expr_not23638 = new BitSet(new long[]{0x0008000000000000L,0x0000200004002041L,0x85002282000001C1L});
    public static final BitSet FOLLOW_expr_size_of_in_expr_not23641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_expr_size_of3651 = new BitSet(new long[]{0x0008000000000000L,0x0000200004002041L,0x85002282000001C0L});
    public static final BitSet FOLLOW_expr_xcrement_in_expr_size_of3654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped1_in_expr_xcrement3673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped2_in_object_wrapped13683 = new BitSet(new long[]{0x0000000000000002L,0x0000000004002000L});
    public static final BitSet FOLLOW_191_in_object_wrapped23704 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_object_name_in_object_wrapped23707 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_generic_in_object_wrapped23709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapped23715 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_object_wrapped23723 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_object_wrapped23725 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_object_wrapped23727 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_object_wrapped23735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_started_in_object_wrapped23740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_brackets_in_function_brackets_wrapper3752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_function_brackets3771 = new BitSet(new long[]{0x2008000000000020L,0x0080200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets3774 = new BitSet(new long[]{0x0000000000010000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_function_brackets3777 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets3779 = new BitSet(new long[]{0x0000000000010000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_function_brackets3785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_in_index_wrapper3795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index3812 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_index_number_wrapper_in_index3814 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index3816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_number_in_index_number_wrapper3825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_number3842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_struct_init3853 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_init3856 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_ID_in_struct_init3859 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_struct_init3862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init3865 = new BitSet(new long[]{0x2008000000200020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init3871 = new BitSet(new long[]{0x0000000000010000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init3874 = new BitSet(new long[]{0x2008000000200020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init3877 = new BitSet(new long[]{0x0000000000010000L,0x0100000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init3883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init23897 = new BitSet(new long[]{0x2008000000200020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init23903 = new BitSet(new long[]{0x0000000000010000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init23906 = new BitSet(new long[]{0x2008000000200020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init23909 = new BitSet(new long[]{0x0000000000010000L,0x0100000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init23915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_var_in_struct_init_line3928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_expression_in_struct_init_line3933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_expression3946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_method3957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_struct_init_var3969 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_id_part_in_struct_init_var3971 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_EQ_in_struct_init_var3976 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042861L,0x85002282000001C1L});
    public static final BitSet FOLLOW_in_q_brackets_in_struct_init_var3980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_struct_init_var3984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_wrapper_in_a_started3996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_wrapper_in_a_started4001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_wrapper_in_a_started4006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_typeof4016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_BR_in_typeof4019 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_ID_in_typeof4022 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_typeof4025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_in_a_selector_wrapper4036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_a_selector4053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_BR_in_a_selector4055 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_selector4057 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_selector4059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_in_a_protocol_wrapper4069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_a_protocol4087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_BR_in_a_protocol4089 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_protocol4091 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_protocol4093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_in_a_encode_wrapper4103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_value_in_a_selector_value_wrapper4120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_a_selector_value4139 = new BitSet(new long[]{0x0000000000008002L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4143 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_ID_in_a_selector_value4147 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4150 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_161_in_a_encode4161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_BR_in_a_encode4163 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFF7FFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000000001L});
    public static final BitSet FOLLOW_R_BR_in_a_encode4171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_const_expr4182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_const_expr4186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL2_in_const_expr4190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_const_expr4194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_const_expr4198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_string_literal34208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_brackets4218 = new BitSet(new long[]{0x2008000000000020L,0x0080200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_expression_in_method_brackets4222 = new BitSet(new long[]{0x0000000000010000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_brackets4226 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_brackets4229 = new BitSet(new long[]{0x0000000000010000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_brackets4235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14245 = new BitSet(new long[]{0x0000000000000020L,0x0000000000000001L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer14251 = new BitSet(new long[]{0x0008000000000020L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14253 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14256 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer14259 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer14262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24275 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer24278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24280 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer24283 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer24289 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer_params4305 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4308 = new BitSet(new long[]{0x0000000000010020L,0x0080000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4311 = new BitSet(new long[]{0x0000000000010020L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_func_pointer_params4315 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4318 = new BitSet(new long[]{0x0000000000010020L,0x0080000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4321 = new BitSet(new long[]{0x0000000000010020L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer_params4326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_in_brackets_end14336 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_expression_in_in_brackets_end14339 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_in_brackets_end14342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_start_in_in_brackets_end14347 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_index_brackets_in_in_brackets_end14349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_in_brackets_end14355 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_method_start_in_in_brackets_end14363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_in_brackets_end14368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_in_brackets_end24380 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_expression_in_in_brackets_end24383 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_in_brackets_end24386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_in_brackets_end24391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_start4404 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_method_brackets_in_method_start4406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_in_q_brackets4417 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042861L,0x85002282000001C1L});
    public static final BitSet FOLLOW_q_brackets_source_in_in_q_brackets4420 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_in_q_brackets4422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_source_in_q_brackets_source4434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_br_source_in_q_brackets_source4439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4452 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4459 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_q_source4475 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COMMA_in_q_source4479 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_expression_in_q_source4482 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_ID_in_simple_method_call4499 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_method_brackets_in_simple_method_call4501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index_brackets4517 = new BitSet(new long[]{0x2008000000000020L,0x0000200045042841L,0x85002282000001C1L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_brackets4520 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index_brackets4522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper4536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_interface_declaration4554 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_interface_declaration4557 = new BitSet(new long[]{0x0000000001008000L,0x0000000001000821L});
    public static final BitSet FOLLOW_interface_category_in_interface_declaration4560 = new BitSet(new long[]{0x0000000001008000L,0x0000000001000820L});
    public static final BitSet FOLLOW_super_class_in_interface_declaration4564 = new BitSet(new long[]{0x0000000001000000L,0x0000000001000820L});
    public static final BitSet FOLLOW_annotated_block_in_interface_declaration4571 = new BitSet(new long[]{0x0000000001000000L,0x0000000001000820L,0x0000000400000000L});
    public static final BitSet FOLLOW_interface_methods_in_interface_declaration4575 = new BitSet(new long[]{0x0000000001000000L,0x0000000001000820L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_interface_declaration4584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_annotated_block4595 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L,0x4000014002000000L});
    public static final BitSet FOLLOW_annotated_block_internal_in_annotated_block4600 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L,0x4000014002000000L});
    public static final BitSet FOLLOW_R_FBR_in_annotated_block4605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_annotation_in_annotated_block_internal4618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_public_block_internal_in_annotated_block_internal4625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_field_declaration_in_public_block_internal4660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_declaration_in_public_block_internal4665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_simple_field_declaration4677 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_simple_field_declaration4679 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_field_declaration4682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_union_declaration4695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_L_FBR_in_union_declaration4698 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_simple_field_declaration_in_union_declaration4704 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_R_FBR_in_union_declaration4709 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_ID_in_union_declaration4712 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_union_declaration4715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_super_class4729 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_ID_in_super_class4732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_interface_category4752 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_ID_in_interface_category4755 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_interface_category4758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_declaration_in_interface_methods4787 = new BitSet(new long[]{0x0000000001000002L,0x0000000001000800L});
    public static final BitSet FOLLOW_interface_method_in_interface_methods4791 = new BitSet(new long[]{0x0000000001000002L,0x0000000001000800L});
    public static final BitSet FOLLOW_method_header_in_interface_method4803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_method_header4822 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_method_header4824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_header_body4834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_method_type_in_method_header_body4837 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_method_header_body4840 = new BitSet(new long[]{0x0008000000018002L,0x0000000000000001L,0x0100000000000000L});
    public static final BitSet FOLLOW_method_params_in_method_header_body4843 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_va_args_wrapper_in_method_header_body4846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_va_args_in_va_args_wrapper4856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_va_args4873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_va_args4876 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_va_args4879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_type_in_method_header_body24890 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_method_header_body24892 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body24895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body34905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper4914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type4946 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000002000400L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_type4949 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_type_internal_in_method_type4952 = new BitSet(new long[]{0x0000000000000020L,0x0080000000000200L});
    public static final BitSet FOLLOW_generic_in_method_type4955 = new BitSet(new long[]{0x0000000000000020L,0x0080000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type4958 = new BitSet(new long[]{0x0000000000000020L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type4961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type4975 = new BitSet(new long[]{0x0008000000020020L,0x0080000000000200L,0x8000000002000000L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_type4978 = new BitSet(new long[]{0x0008000000000020L,0x0080000000000200L,0x8000000002000000L});
    public static final BitSet FOLLOW_known_types_in_method_type4981 = new BitSet(new long[]{0x0008000000000020L,0x0080000000000200L});
    public static final BitSet FOLLOW_ID_in_method_type4984 = new BitSet(new long[]{0x0008000000000020L,0x0080000000000200L});
    public static final BitSet FOLLOW_generic_in_method_type4987 = new BitSet(new long[]{0x0000000000000020L,0x0080000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type4990 = new BitSet(new long[]{0x0000000000000020L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type4993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal1_in_type_internal5018 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_L_KBR_in_type_internal5021 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_type_internal5024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_LESS_in_generic5057 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_generic_internal_in_generic5059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_L_MORE_in_generic5061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_generic_internal5080 = new BitSet(new long[]{0x0000000000010022L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal5083 = new BitSet(new long[]{0x0000000000010022L});
    public static final BitSet FOLLOW_COMMA_in_generic_internal5087 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_ID_in_generic_internal5090 = new BitSet(new long[]{0x0000000000010022L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal5093 = new BitSet(new long[]{0x0000000000010022L});
    public static final BitSet FOLLOW_L_BR_in_method_params25105 = new BitSet(new long[]{0x0008000001020000L,0x0000000000000000L,0x8000000002000400L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25108 = new BitSet(new long[]{0x0000000000010000L,0x0080000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_params25112 = new BitSet(new long[]{0x0008000001020000L,0x0000000000000000L,0x8000000002000400L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25115 = new BitSet(new long[]{0x0000000000010000L,0x0080000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_params25119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param2_in_method_param_wrapper25130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_param25148 = new BitSet(new long[]{0x0008000001000000L,0x0000000000000000L,0x8000000002000400L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_method_param25151 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x8000000002000400L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_param25154 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x8000000002000000L});
    public static final BitSet FOLLOW_191_in_method_param25157 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_field_type_in_method_param25160 = new BitSet(new long[]{0x0008000000000002L,0x0000000000000040L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_method_param25162 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_indexed_in_method_param25165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_indexed5175 = new BitSet(new long[]{0x0000000000000000L,0x0200200000000000L});
    public static final BitSet FOLLOW_NUMBER_in_indexed5177 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_indexed5180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params5190 = new BitSet(new long[]{0x0008000000008002L,0x0000000000000001L,0x0100000000000000L});
    public static final BitSet FOLLOW_prefix_in_method_param5212 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000001L,0x0100000000000000L});
    public static final BitSet FOLLOW_COLON_in_method_param5217 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000001L,0x0100000000000000L});
    public static final BitSet FOLLOW_method_type_in_method_param5220 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_method_param5223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5235 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_COLON_in_prefix5237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_incomplete_prefix5256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5298 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000020L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_struct_declaration5304 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_typedef_struct_body_in_typedef_struct_declaration5309 = new BitSet(new long[]{0x0008000000000000L,0x0100000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_struct_declaration5313 = new BitSet(new long[]{0x0008000000000002L,0x1000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5316 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_struct_declaration5319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_struct_field5362 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_struct_field5364 = new BitSet(new long[]{0x0000000000010000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_field5368 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_struct_field5371 = new BitSet(new long[]{0x0000000000010000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_field5375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_enum_declaration5411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_typedef_declaration5431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_declaration5433 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5436 = new BitSet(new long[]{0x0000000000010000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_typedef_declaration5440 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5443 = new BitSet(new long[]{0x0000000000010000L,0x0100000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_declaration5447 = new BitSet(new long[]{0x0008000000000000L,0x1000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_typedef_declaration5450 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_declaration5453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_declaration_element5482 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_L_EQ_in_typedef_declaration_element5486 = new BitSet(new long[]{0x0008000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_set_in_typedef_declaration_element5489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper5510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_wrapper_in_field_declaration5527 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_field_type_in_field_declaration5530 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_field_declaration5532 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000008L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration5534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_declaration_end5545 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration_end5548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_in_type_start_wrapper5558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_start5575 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_field_type_in_type_start5578 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_type_start5580 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000009L});
    public static final BitSet FOLLOW_type_end_in_type_start5582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration4_in_type_end5590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration4_in_type_end5603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_value_set_in_field_declaration45625 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration45628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_declaration45641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_wrapper_in_method_declaration45646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_in_field_modifier_wrapper5658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_field_modifier5676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_internal_in_field_type5688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_field_type_internal5707 = new BitSet(new long[]{0x0000000000000022L,0x0000000000000200L});
    public static final BitSet FOLLOW_generic_in_field_type_internal5709 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_ASTERISK_in_field_type_internal5712 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_name_internal_in_name5726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_EQ_in_value_set5766 = new BitSet(new long[]{0x0008000000000000L,0x0000200000000020L,0x0400200000000040L});
    public static final BitSet FOLLOW_value_in_value_set5769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_value5785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_value_in_value5789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_value5793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_in_value5797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_value5801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init2_in_value5805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string_value5815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array5836 = new BitSet(new long[]{0x0008000000000000L,0x0000200000000020L,0x0400200000000040L});
    public static final BitSet FOLLOW_value_in_array5839 = new BitSet(new long[]{0x0000000000010000L,0x0100000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array5843 = new BitSet(new long[]{0x0008000000000000L,0x0000200000000020L,0x0400200000000040L});
    public static final BitSet FOLLOW_value_in_array5846 = new BitSet(new long[]{0x0000000000010000L,0x0100000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array5850 = new BitSet(new long[]{0x0000000000000002L});

}