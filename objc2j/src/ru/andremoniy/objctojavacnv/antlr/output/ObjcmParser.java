// $ANTLR 3.4 C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g 2013-08-21 20:09:13

package ru.andremoniy.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcmParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARRAY_INIT", "ASSIGN", "ASTERISK", "BLOCK", "BREAK", "BREAK_WORD", "CASE_BODY", "CASE_EXPR", "CASE_STMT", "CATEGORY", "CLASSICAL_EXPR", "CLASSICAL_EXPR_2", "COLON", "COMMA", "CONST_EXPR", "CONST_EXPR2", "CONST_PREFIX", "DEFAULT_BODY", "DEFAULT_STMT", "DIGIT", "DOT", "ENCODE", "ENUM", "ENUM_PREFIX", "ESC", "EXPR", "EXPR_ADD", "EXPR_AND", "EXPR_AND_AND", "EXPR_ASSIGN", "EXPR_COND", "EXPR_EQ", "EXPR_FULL", "EXPR_MOV", "EXPR_MULT", "EXPR_NOT", "EXPR_OR", "EXPR_OR_OR", "EXPR_QUESTION", "EXPR_UNNAME", "EXPR_XOR", "EXTERN", "FIELD", "FIELD_ACCESS", "FIELD_TYPE_STARTED", "FOR_IN_STMT", "FOR_STMT", "FOR_STMT_EXPR", "FUNCTION", "GENERIC", "GOTO", "ID", "IF_BLOCK", "IF_EXPR", "IF_STMT", "IMPLEMENTATION", "INCOMPLETE_PREFIX", "INDEX", "INDEX_NUMBER", "INTERFACE", "LETTER", "L_AND", "L_AND_AND", "L_AND_EQ", "L_BR", "L_BR_TOKEN", "L_DIV", "L_DIV_EQ", "L_EQ", "L_EQ_EQ", "L_FBR", "L_KBR", "L_LEFT", "L_LEFT_EQ", "L_LESS", "L_LESS_EQ", "L_MINUS", "L_MINUS_EQ", "L_MINUS_MINUS", "L_MORE", "L_MORE_EQ", "L_MULT_EQ", "L_NEQ", "L_NOT", "L_OR", "L_OR_EQ", "L_OR_OR", "L_PERC", "L_PERC_EQ", "L_PLUS", "L_PLUS_EQ", "L_PLUS_PLUS", "L_QUESTION", "L_RIGHT", "L_RIGHT_EQ", "L_TILDA", "L_XOR", "L_XOR_EQ", "MESSAGE", "METHOD", "METHOD_CALL", "METHOD_MSG", "METHOD_NAME", "MODIFIER", "MSG_LIST", "MULTI_COMMENT", "M_IMPORT", "M_TYPE_START", "NAME", "NOT", "NUMBER", "OBJECT", "OP", "OPER", "OPERATOR", "PARAM", "PREFIX", "PREPROCESSOR_DECLARATION", "PROTOCOL", "RETURN_STMT", "R_BR", "R_FBR", "R_KBR", "SELECTOR", "SELECTOR_VALUE", "SEMICOLON", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_OP", "SIZEOF", "STATIC", "STATIC_METHOD", "STATIC_PREFIX", "STATIC_START", "STATIC_TYPE", "STRING", "STRING_LITERAL", "STRING_LITERAL2", "STRING_LITERAL3", "STRUCT_FIELD", "STRUCT_PREFIX", "SUPER_CLASS", "SWITCH", "SWITCH_BODY", "SWITCH_EXPRESSION", "THROW_EXCEPTION", "THROW_STMT", "TYPE", "TYPEDEF", "TYPEDEF_ELEMENT", "TYPEDEF_STRUCT", "TYPE_CONVERTION", "TYPE_CONVERTION2", "TYPE_RENAME", "VALUE", "VARIABLE_INIT", "VA_ARGS", "VOID", "WHILE_EXPR", "WHILE_STMT", "WS", "'\"C\"'", "'->'", "'...'", "'@catch'", "'@encode'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@private'", "'@property'", "'@protocol'", "'@public'", "'@selector'", "'@synthesize'", "'@throw'", "'@try'", "'Nil'", "'__attribute__'", "'__typeof__'", "'assign'", "'case'", "'constructor'", "'copy'", "'default'", "'do'", "'else'", "'extern'", "'for'", "'goto'", "'if'", "'in'", "'inline'", "'nil'", "'readwrite'", "'return'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'while'"
    };

    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int T__198=198;
    public static final int T__199=199;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int T__202=202;
    public static final int T__203=203;
    public static final int T__204=204;
    public static final int T__205=205;
    public static final int ARRAY_INIT=4;
    public static final int ASSIGN=5;
    public static final int ASTERISK=6;
    public static final int BLOCK=7;
    public static final int BREAK=8;
    public static final int BREAK_WORD=9;
    public static final int CASE_BODY=10;
    public static final int CASE_EXPR=11;
    public static final int CASE_STMT=12;
    public static final int CATEGORY=13;
    public static final int CLASSICAL_EXPR=14;
    public static final int CLASSICAL_EXPR_2=15;
    public static final int COLON=16;
    public static final int COMMA=17;
    public static final int CONST_EXPR=18;
    public static final int CONST_EXPR2=19;
    public static final int CONST_PREFIX=20;
    public static final int DEFAULT_BODY=21;
    public static final int DEFAULT_STMT=22;
    public static final int DIGIT=23;
    public static final int DOT=24;
    public static final int ENCODE=25;
    public static final int ENUM=26;
    public static final int ENUM_PREFIX=27;
    public static final int ESC=28;
    public static final int EXPR=29;
    public static final int EXPR_ADD=30;
    public static final int EXPR_AND=31;
    public static final int EXPR_AND_AND=32;
    public static final int EXPR_ASSIGN=33;
    public static final int EXPR_COND=34;
    public static final int EXPR_EQ=35;
    public static final int EXPR_FULL=36;
    public static final int EXPR_MOV=37;
    public static final int EXPR_MULT=38;
    public static final int EXPR_NOT=39;
    public static final int EXPR_OR=40;
    public static final int EXPR_OR_OR=41;
    public static final int EXPR_QUESTION=42;
    public static final int EXPR_UNNAME=43;
    public static final int EXPR_XOR=44;
    public static final int EXTERN=45;
    public static final int FIELD=46;
    public static final int FIELD_ACCESS=47;
    public static final int FIELD_TYPE_STARTED=48;
    public static final int FOR_IN_STMT=49;
    public static final int FOR_STMT=50;
    public static final int FOR_STMT_EXPR=51;
    public static final int FUNCTION=52;
    public static final int GENERIC=53;
    public static final int GOTO=54;
    public static final int ID=55;
    public static final int IF_BLOCK=56;
    public static final int IF_EXPR=57;
    public static final int IF_STMT=58;
    public static final int IMPLEMENTATION=59;
    public static final int INCOMPLETE_PREFIX=60;
    public static final int INDEX=61;
    public static final int INDEX_NUMBER=62;
    public static final int INTERFACE=63;
    public static final int LETTER=64;
    public static final int L_AND=65;
    public static final int L_AND_AND=66;
    public static final int L_AND_EQ=67;
    public static final int L_BR=68;
    public static final int L_BR_TOKEN=69;
    public static final int L_DIV=70;
    public static final int L_DIV_EQ=71;
    public static final int L_EQ=72;
    public static final int L_EQ_EQ=73;
    public static final int L_FBR=74;
    public static final int L_KBR=75;
    public static final int L_LEFT=76;
    public static final int L_LEFT_EQ=77;
    public static final int L_LESS=78;
    public static final int L_LESS_EQ=79;
    public static final int L_MINUS=80;
    public static final int L_MINUS_EQ=81;
    public static final int L_MINUS_MINUS=82;
    public static final int L_MORE=83;
    public static final int L_MORE_EQ=84;
    public static final int L_MULT_EQ=85;
    public static final int L_NEQ=86;
    public static final int L_NOT=87;
    public static final int L_OR=88;
    public static final int L_OR_EQ=89;
    public static final int L_OR_OR=90;
    public static final int L_PERC=91;
    public static final int L_PERC_EQ=92;
    public static final int L_PLUS=93;
    public static final int L_PLUS_EQ=94;
    public static final int L_PLUS_PLUS=95;
    public static final int L_QUESTION=96;
    public static final int L_RIGHT=97;
    public static final int L_RIGHT_EQ=98;
    public static final int L_TILDA=99;
    public static final int L_XOR=100;
    public static final int L_XOR_EQ=101;
    public static final int MESSAGE=102;
    public static final int METHOD=103;
    public static final int METHOD_CALL=104;
    public static final int METHOD_MSG=105;
    public static final int METHOD_NAME=106;
    public static final int MODIFIER=107;
    public static final int MSG_LIST=108;
    public static final int MULTI_COMMENT=109;
    public static final int M_IMPORT=110;
    public static final int M_TYPE_START=111;
    public static final int NAME=112;
    public static final int NOT=113;
    public static final int NUMBER=114;
    public static final int OBJECT=115;
    public static final int OP=116;
    public static final int OPER=117;
    public static final int OPERATOR=118;
    public static final int PARAM=119;
    public static final int PREFIX=120;
    public static final int PREPROCESSOR_DECLARATION=121;
    public static final int PROTOCOL=122;
    public static final int RETURN_STMT=123;
    public static final int R_BR=124;
    public static final int R_FBR=125;
    public static final int R_KBR=126;
    public static final int SELECTOR=127;
    public static final int SELECTOR_VALUE=128;
    public static final int SEMICOLON=129;
    public static final int SIMPLE_EXPR=130;
    public static final int SINGLE_COMMENT=131;
    public static final int SINGLE_OP=132;
    public static final int SIZEOF=133;
    public static final int STATIC=134;
    public static final int STATIC_METHOD=135;
    public static final int STATIC_PREFIX=136;
    public static final int STATIC_START=137;
    public static final int STATIC_TYPE=138;
    public static final int STRING=139;
    public static final int STRING_LITERAL=140;
    public static final int STRING_LITERAL2=141;
    public static final int STRING_LITERAL3=142;
    public static final int STRUCT_FIELD=143;
    public static final int STRUCT_PREFIX=144;
    public static final int SUPER_CLASS=145;
    public static final int SWITCH=146;
    public static final int SWITCH_BODY=147;
    public static final int SWITCH_EXPRESSION=148;
    public static final int THROW_EXCEPTION=149;
    public static final int THROW_STMT=150;
    public static final int TYPE=151;
    public static final int TYPEDEF=152;
    public static final int TYPEDEF_ELEMENT=153;
    public static final int TYPEDEF_STRUCT=154;
    public static final int TYPE_CONVERTION=155;
    public static final int TYPE_CONVERTION2=156;
    public static final int TYPE_RENAME=157;
    public static final int VALUE=158;
    public static final int VARIABLE_INIT=159;
    public static final int VA_ARGS=160;
    public static final int VOID=161;
    public static final int WHILE_EXPR=162;
    public static final int WHILE_STMT=163;
    public static final int WS=164;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcmParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcmParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcmParser.tokenNames; }
    public String getGrammarFileName() { return "C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:119:1: code : ( code_internal )* ;
    public final ObjcmParser.code_return code() throws RecognitionException {
        ObjcmParser.code_return retval = new ObjcmParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.code_internal_return code_internal1 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:119:6: ( ( code_internal )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:120:3: ( code_internal )*
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:120:3: ( code_internal )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CONST_PREFIX||LA1_0==ENUM_PREFIX||LA1_0==ID||LA1_0==STATIC_PREFIX||LA1_0==STRUCT_PREFIX||LA1_0==VOID||(LA1_0 >= 172 && LA1_0 <= 173)||LA1_0==192||LA1_0==202||LA1_0==204) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:120:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code447);
            	    code_internal1=code_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:124:1: code_internal : ( operator_wrapper | implementation_wrapper );
    public final ObjcmParser.code_internal_return code_internal() throws RecognitionException {
        ObjcmParser.code_internal_return retval = new ObjcmParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_wrapper_return operator_wrapper2 =null;

        ObjcmParser.implementation_wrapper_return implementation_wrapper3 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:125:2: ( operator_wrapper | implementation_wrapper )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==CONST_PREFIX||LA2_0==ENUM_PREFIX||LA2_0==ID||LA2_0==STATIC_PREFIX||LA2_0==STRUCT_PREFIX||LA2_0==VOID||LA2_0==173||LA2_0==192||LA2_0==202||LA2_0==204) ) {
                alt2=1;
            }
            else if ( (LA2_0==172) ) {
                alt2=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }
            switch (alt2) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:125:4: operator_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_operator_wrapper_in_code_internal461);
                    operator_wrapper2=operator_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, operator_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:126:5: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal467);
                    implementation_wrapper3=implementation_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_wrapper3.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class operator_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:129:1: operator_wrapper : operator -> ^( OPERATOR operator ) ;
    public final ObjcmParser.operator_wrapper_return operator_wrapper() throws RecognitionException {
        ObjcmParser.operator_wrapper_return retval = new ObjcmParser.operator_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.operator_return operator4 =null;


        RewriteRuleSubtreeStream stream_operator=new RewriteRuleSubtreeStream(adaptor,"rule operator");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:130:2: ( operator -> ^( OPERATOR operator ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:130:4: operator
            {
            pushFollow(FOLLOW_operator_in_operator_wrapper478);
            operator4=operator();

            state._fsp--;

            stream_operator.add(operator4.getTree());

            // AST REWRITE
            // elements: operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 130:13: -> ^( OPERATOR operator )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:130:16: ^( OPERATOR operator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OPERATOR, "OPERATOR")
                , root_1);

                adaptor.addChild(root_1, stream_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator_wrapper"


    public static class operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "operator"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:132:1: operator : ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration_wrapper | typedef_declaration_wrapper | typedef );
    public final ObjcmParser.operator_return operator() throws RecognitionException {
        ObjcmParser.operator_return retval = new ObjcmParser.operator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_wrapper_return extern_wrapper5 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper6 =null;

        ObjcmParser.type_start_wrapper_return type_start_wrapper7 =null;

        ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper8 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper9 =null;

        ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper10 =null;

        ObjcmParser.typedef_return typedef11 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:133:2: ( extern_wrapper | static_section_wrapper | type_start_wrapper | interface_declaration_wrapper | typedef_struct_declaration_wrapper | typedef_declaration_wrapper | typedef )
            int alt3=7;
            switch ( input.LA(1) ) {
            case 192:
                {
                alt3=1;
                }
                break;
            case STATIC_PREFIX:
                {
                alt3=2;
                }
                break;
            case CONST_PREFIX:
            case ID:
            case VOID:
            case 204:
                {
                alt3=3;
                }
                break;
            case 173:
                {
                alt3=4;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt3=5;
                }
                break;
            case ENUM_PREFIX:
                {
                alt3=6;
                }
                break;
            case 202:
                {
                alt3=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }

            switch (alt3) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:133:4: extern_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_wrapper_in_operator496);
                    extern_wrapper5=extern_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, extern_wrapper5.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:134:4: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_operator502);
                    static_section_wrapper6=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper6.getTree());

                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:135:4: type_start_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_start_wrapper_in_operator507);
                    type_start_wrapper7=type_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, type_start_wrapper7.getTree());

                    }
                    break;
                case 4 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:136:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_operator514);
                    interface_declaration_wrapper8=interface_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_declaration_wrapper8.getTree());

                    }
                    break;
                case 5 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:137:4: typedef_struct_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_operator520);
                    typedef_struct_declaration_wrapper9=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper9.getTree());

                    }
                    break;
                case 6 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:138:4: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_operator525);
                    typedef_declaration_wrapper10=typedef_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_declaration_wrapper10.getTree());

                    }
                    break;
                case 7 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:139:4: typedef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_in_operator530);
                    typedef11=typedef();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef11.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operator"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:146:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcmParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcmParser.extern_wrapper_return retval = new ObjcmParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.extern_return extern12 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:147:3: ( extern -> ^( EXTERN ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:147:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper548);
            extern12=extern();

            state._fsp--;

            stream_extern.add(extern12.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 147:12: -> ^( EXTERN )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:147:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:150:2: extern : 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR ;
    public final ObjcmParser.extern_return extern() throws RecognitionException {
        ObjcmParser.extern_return retval = new ObjcmParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal13=null;
        Token string_literal14=null;
        Token L_FBR15=null;
        Token set16=null;
        Token R_FBR17=null;

        Object string_literal13_tree=null;
        Object string_literal14_tree=null;
        Object L_FBR15_tree=null;
        Object set16_tree=null;
        Object R_FBR17_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:150:9: ( 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:150:11: 'extern' '\"C\"' L_FBR ~ ( R_FBR ) R_FBR
            {
            root_0 = (Object)adaptor.nil();


            string_literal13=(Token)match(input,192,FOLLOW_192_in_extern567); 
            string_literal13_tree = 
            (Object)adaptor.create(string_literal13)
            ;
            adaptor.addChild(root_0, string_literal13_tree);


            string_literal14=(Token)match(input,165,FOLLOW_165_in_extern570); 
            string_literal14_tree = 
            (Object)adaptor.create(string_literal14)
            ;
            adaptor.addChild(root_0, string_literal14_tree);


            L_FBR15=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_extern573); 
            L_FBR15_tree = 
            (Object)adaptor.create(L_FBR15)
            ;
            adaptor.addChild(root_0, L_FBR15_tree);


            set16=(Token)input.LT(1);

            if ( (input.LA(1) >= ARRAY_INIT && input.LA(1) <= R_BR)||(input.LA(1) >= R_KBR && input.LA(1) <= 205) ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set16)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            R_FBR17=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_extern580); 
            R_FBR17_tree = 
            (Object)adaptor.create(R_FBR17)
            ;
            adaptor.addChild(root_0, R_FBR17_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:152:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcmParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcmParser.implementation_wrapper_return retval = new ObjcmParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_return implementation18 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:153:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:153:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper592);
            implementation18=implementation();

            state._fsp--;

            stream_implementation.add(implementation18.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 153:20: -> ^( IMPLEMENTATION implementation )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:153:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:155:1: implementation : '@implementation' name ( category )? ( super_class )? ( implementation_body )* '@end' ( SEMICOLON )? ;
    public final ObjcmParser.implementation_return implementation() throws RecognitionException {
        ObjcmParser.implementation_return retval = new ObjcmParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal19=null;
        Token string_literal24=null;
        Token SEMICOLON25=null;
        ObjcmParser.name_return name20 =null;

        ObjcmParser.category_return category21 =null;

        ObjcmParser.super_class_return super_class22 =null;

        ObjcmParser.implementation_body_return implementation_body23 =null;


        Object string_literal19_tree=null;
        Object string_literal24_tree=null;
        Object SEMICOLON25_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:156:2: ( '@implementation' name ( category )? ( super_class )? ( implementation_body )* '@end' ( SEMICOLON )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:156:4: '@implementation' name ( category )? ( super_class )? ( implementation_body )* '@end' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal19=(Token)match(input,172,FOLLOW_172_in_implementation611); 
            string_literal19_tree = 
            (Object)adaptor.create(string_literal19)
            ;
            adaptor.addChild(root_0, string_literal19_tree);


            pushFollow(FOLLOW_name_in_implementation614);
            name20=name();

            state._fsp--;

            adaptor.addChild(root_0, name20.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:156:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==L_BR) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:156:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation617);
                    category21=category();

                    state._fsp--;

                    adaptor.addChild(root_0, category21.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:156:39: ( super_class )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==COLON) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:156:39: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_implementation620);
                    super_class22=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class22.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:157:3: ( implementation_body )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==ID||LA6_0==L_MINUS||LA6_0==L_PLUS||LA6_0==STATIC_PREFIX||LA6_0==STRUCT_PREFIX||LA6_0==VOID||LA6_0==179||LA6_0==192||LA6_0==202||LA6_0==204) ) {
                    alt6=1;
                }


                switch (alt6) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:157:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation625);
            	    implementation_body23=implementation_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, implementation_body23.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            string_literal24=(Token)match(input,170,FOLLOW_170_in_implementation630); 
            string_literal24_tree = 
            (Object)adaptor.create(string_literal24)
            ;
            adaptor.addChild(root_0, string_literal24_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:158:11: ( SEMICOLON )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==SEMICOLON) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:158:11: SEMICOLON
                    {
                    SEMICOLON25=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation633); 
                    SEMICOLON25_tree = 
                    (Object)adaptor.create(SEMICOLON25)
                    ;
                    adaptor.addChild(root_0, SEMICOLON25_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:161:1: category : L_BR name R_BR -> ^( CATEGORY name ) ;
    public final ObjcmParser.category_return category() throws RecognitionException {
        ObjcmParser.category_return retval = new ObjcmParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR26=null;
        Token R_BR28=null;
        ObjcmParser.name_return name27 =null;


        Object L_BR26_tree=null;
        Object R_BR28_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:161:9: ( L_BR name R_BR -> ^( CATEGORY name ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:161:11: L_BR name R_BR
            {
            L_BR26=(Token)match(input,L_BR,FOLLOW_L_BR_in_category645);  
            stream_L_BR.add(L_BR26);


            pushFollow(FOLLOW_name_in_category648);
            name27=name();

            state._fsp--;

            stream_name.add(name27.getTree());

            R_BR28=(Token)match(input,R_BR,FOLLOW_R_BR_in_category651);  
            stream_R_BR.add(R_BR28);


            // AST REWRITE
            // elements: name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 161:28: -> ^( CATEGORY name )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:161:31: ^( CATEGORY name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:163:1: implementation_body : ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper );
    public final ObjcmParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcmParser.implementation_body_return retval = new ObjcmParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.directives_return directives29 =null;

        ObjcmParser.typedef_return typedef30 =null;

        ObjcmParser.static_section_wrapper_return static_section_wrapper31 =null;

        ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper32 =null;

        ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper33 =null;

        ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper34 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper35 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:164:2: ( directives | typedef | static_section_wrapper | implementation_method_wrapper | field_type_started_wrapper | field_declaration_wrapper | typedef_struct_declaration_wrapper )
            int alt8=7;
            switch ( input.LA(1) ) {
            case 179:
                {
                alt8=1;
                }
                break;
            case 202:
                {
                alt8=2;
                }
                break;
            case STATIC_PREFIX:
                {
                alt8=3;
                }
                break;
            case L_MINUS:
            case L_PLUS:
                {
                alt8=4;
                }
                break;
            case ID:
            case VOID:
            case 204:
                {
                alt8=5;
                }
                break;
            case 192:
                {
                alt8=6;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt8=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }

            switch (alt8) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:164:4: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body669);
                    directives29=directives();

                    state._fsp--;

                    adaptor.addChild(root_0, directives29.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:165:5: typedef
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_in_implementation_body675);
                    typedef30=typedef();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef30.getTree());

                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:166:5: static_section_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section_wrapper_in_implementation_body681);
                    static_section_wrapper31=static_section_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section_wrapper31.getTree());

                    }
                    break;
                case 4 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:167:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body687);
                    implementation_method_wrapper32=implementation_method_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper32.getTree());

                    }
                    break;
                case 5 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:169:4: field_type_started_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_type_started_wrapper_in_implementation_body693);
                    field_type_started_wrapper33=field_type_started_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_type_started_wrapper33.getTree());

                    }
                    break;
                case 6 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:170:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_implementation_body699);
                    field_declaration_wrapper34=field_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_wrapper34.getTree());

                    }
                    break;
                case 7 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:171:4: typedef_struct_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body704);
                    typedef_struct_declaration_wrapper35=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper35.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:174:1: directives : synthesize ;
    public final ObjcmParser.directives_return directives() throws RecognitionException {
        ObjcmParser.directives_return retval = new ObjcmParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.synthesize_return synthesize36 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:175:2: ( synthesize )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:175:4: synthesize
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_synthesize_in_directives715);
            synthesize36=synthesize();

            state._fsp--;

            adaptor.addChild(root_0, synthesize36.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:178:1: synthesize : '@synthesize' ID ( L_EQ ID )? SEMICOLON ;
    public final ObjcmParser.synthesize_return synthesize() throws RecognitionException {
        ObjcmParser.synthesize_return retval = new ObjcmParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal37=null;
        Token ID38=null;
        Token L_EQ39=null;
        Token ID40=null;
        Token SEMICOLON41=null;

        Object string_literal37_tree=null;
        Object ID38_tree=null;
        Object L_EQ39_tree=null;
        Object ID40_tree=null;
        Object SEMICOLON41_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:179:2: ( '@synthesize' ID ( L_EQ ID )? SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:179:4: '@synthesize' ID ( L_EQ ID )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal37=(Token)match(input,179,FOLLOW_179_in_synthesize728); 
            string_literal37_tree = 
            (Object)adaptor.create(string_literal37)
            ;
            adaptor.addChild(root_0, string_literal37_tree);


            ID38=(Token)match(input,ID,FOLLOW_ID_in_synthesize731); 
            ID38_tree = 
            (Object)adaptor.create(ID38)
            ;
            adaptor.addChild(root_0, ID38_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:179:22: ( L_EQ ID )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==L_EQ) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:179:23: L_EQ ID
                    {
                    L_EQ39=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_synthesize734); 
                    L_EQ39_tree = 
                    (Object)adaptor.create(L_EQ39)
                    ;
                    adaptor.addChild(root_0, L_EQ39_tree);


                    ID40=(Token)match(input,ID,FOLLOW_ID_in_synthesize736); 
                    ID40_tree = 
                    (Object)adaptor.create(ID40)
                    ;
                    adaptor.addChild(root_0, ID40_tree);


                    }
                    break;

            }


            SEMICOLON41=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_synthesize740); 
            SEMICOLON41_tree = 
            (Object)adaptor.create(SEMICOLON41)
            ;
            adaptor.addChild(root_0, SEMICOLON41_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class typedef_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:182:1: typedef : 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper ) ;
    public final ObjcmParser.typedef_return typedef() throws RecognitionException {
        ObjcmParser.typedef_return retval = new ObjcmParser.typedef_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal42=null;
        ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper43 =null;

        ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper44 =null;

        ObjcmParser.type_rename_wrapper_return type_rename_wrapper45 =null;


        Object string_literal42_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:182:9: ( 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:182:11: 'typedef' ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            string_literal42=(Token)match(input,202,FOLLOW_202_in_typedef752); 
            string_literal42_tree = 
            (Object)adaptor.create(string_literal42)
            ;
            adaptor.addChild(root_0, string_literal42_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:182:22: ( typedef_declaration_wrapper | typedef_struct_declaration_wrapper | type_rename_wrapper )
            int alt10=3;
            switch ( input.LA(1) ) {
            case ENUM_PREFIX:
                {
                alt10=1;
                }
                break;
            case STRUCT_PREFIX:
                {
                alt10=2;
                }
                break;
            case ID:
                {
                alt10=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;

            }

            switch (alt10) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:182:23: typedef_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_typedef756);
                    typedef_declaration_wrapper43=typedef_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_declaration_wrapper43.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:182:53: typedef_struct_declaration_wrapper
                    {
                    pushFollow(FOLLOW_typedef_struct_declaration_wrapper_in_typedef760);
                    typedef_struct_declaration_wrapper44=typedef_struct_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, typedef_struct_declaration_wrapper44.getTree());

                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:182:90: type_rename_wrapper
                    {
                    pushFollow(FOLLOW_type_rename_wrapper_in_typedef764);
                    type_rename_wrapper45=type_rename_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, type_rename_wrapper45.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef"


    public static class type_rename_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_rename_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:185:1: type_rename_wrapper : type_rename -> ^( TYPE_RENAME type_rename ) ;
    public final ObjcmParser.type_rename_wrapper_return type_rename_wrapper() throws RecognitionException {
        ObjcmParser.type_rename_wrapper_return retval = new ObjcmParser.type_rename_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_rename_return type_rename46 =null;


        RewriteRuleSubtreeStream stream_type_rename=new RewriteRuleSubtreeStream(adaptor,"rule type_rename");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:186:2: ( type_rename -> ^( TYPE_RENAME type_rename ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:186:4: type_rename
            {
            pushFollow(FOLLOW_type_rename_in_type_rename_wrapper778);
            type_rename46=type_rename();

            state._fsp--;

            stream_type_rename.add(type_rename46.getTree());

            // AST REWRITE
            // elements: type_rename
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 186:16: -> ^( TYPE_RENAME type_rename )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:186:19: ^( TYPE_RENAME type_rename )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_RENAME, "TYPE_RENAME")
                , root_1);

                adaptor.addChild(root_1, stream_type_rename.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_rename_wrapper"


    public static class type_rename_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_rename"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:188:1: type_rename : ID ID SEMICOLON ;
    public final ObjcmParser.type_rename_return type_rename() throws RecognitionException {
        ObjcmParser.type_rename_return retval = new ObjcmParser.type_rename_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID47=null;
        Token ID48=null;
        Token SEMICOLON49=null;

        Object ID47_tree=null;
        Object ID48_tree=null;
        Object SEMICOLON49_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:189:2: ( ID ID SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:189:4: ID ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            ID47=(Token)match(input,ID,FOLLOW_ID_in_type_rename797); 
            ID47_tree = 
            (Object)adaptor.create(ID47)
            ;
            adaptor.addChild(root_0, ID47_tree);


            ID48=(Token)match(input,ID,FOLLOW_ID_in_type_rename799); 
            ID48_tree = 
            (Object)adaptor.create(ID48)
            ;
            adaptor.addChild(root_0, ID48_tree);


            SEMICOLON49=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_rename801); 
            SEMICOLON49_tree = 
            (Object)adaptor.create(SEMICOLON49)
            ;
            adaptor.addChild(root_0, SEMICOLON49_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_rename"


    public static class static_section_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:191:1: static_section_wrapper : static_section -> ^( STATIC static_section ) ;
    public final ObjcmParser.static_section_wrapper_return static_section_wrapper() throws RecognitionException {
        ObjcmParser.static_section_wrapper_return retval = new ObjcmParser.static_section_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_section_return static_section50 =null;


        RewriteRuleSubtreeStream stream_static_section=new RewriteRuleSubtreeStream(adaptor,"rule static_section");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:192:2: ( static_section -> ^( STATIC static_section ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:192:4: static_section
            {
            pushFollow(FOLLOW_static_section_in_static_section_wrapper813);
            static_section50=static_section();

            state._fsp--;

            stream_static_section.add(static_section50.getTree());

            // AST REWRITE
            // elements: static_section
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 192:19: -> ^( STATIC static_section )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:192:22: ^( STATIC static_section )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC, "STATIC")
                , root_1);

                adaptor.addChild(root_1, stream_static_section.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section_wrapper"


    public static class static_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:194:1: static_section : STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 ;
    public final ObjcmParser.static_section_return static_section() throws RecognitionException {
        ObjcmParser.static_section_return retval = new ObjcmParser.static_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX51=null;
        Token CONST_PREFIX52=null;
        Token STRUCT_PREFIX53=null;
        Token ENUM_PREFIX54=null;
        ObjcmParser.static_section2_return static_section255 =null;


        Object STATIC_PREFIX51_tree=null;
        Object CONST_PREFIX52_tree=null;
        Object STRUCT_PREFIX53_tree=null;
        Object ENUM_PREFIX54_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:196:2: ( STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2 )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:196:5: STATIC_PREFIX ( CONST_PREFIX )? ( STRUCT_PREFIX )? ( ENUM_PREFIX )? static_section2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX51=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_section835); 
            STATIC_PREFIX51_tree = 
            (Object)adaptor.create(STATIC_PREFIX51)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX51_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:196:19: ( CONST_PREFIX )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==CONST_PREFIX) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:196:19: CONST_PREFIX
                    {
                    CONST_PREFIX52=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_section837); 
                    CONST_PREFIX52_tree = 
                    (Object)adaptor.create(CONST_PREFIX52)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX52_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:196:33: ( STRUCT_PREFIX )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==STRUCT_PREFIX) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:196:33: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX53=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_static_section840); 
                    STRUCT_PREFIX53_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX53)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX53_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:196:48: ( ENUM_PREFIX )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==ENUM_PREFIX) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:196:48: ENUM_PREFIX
                    {
                    ENUM_PREFIX54=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_static_section843); 
                    ENUM_PREFIX54_tree = 
                    (Object)adaptor.create(ENUM_PREFIX54)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX54_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_static_section2_in_static_section846);
            static_section255=static_section2();

            state._fsp--;

            adaptor.addChild(root_0, static_section255.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section"


    public static class static_section2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:198:1: static_section2 : ( inline_section | implementation_method_wrapper2 | static_section3 );
    public final ObjcmParser.static_section2_return static_section2() throws RecognitionException {
        ObjcmParser.static_section2_return retval = new ObjcmParser.static_section2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.inline_section_return inline_section56 =null;

        ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper257 =null;

        ObjcmParser.static_section3_return static_section358 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:199:2: ( inline_section | implementation_method_wrapper2 | static_section3 )
            int alt14=3;
            switch ( input.LA(1) ) {
            case 197:
                {
                alt14=1;
                }
                break;
            case L_FBR:
            case SEMICOLON:
                {
                alt14=2;
                }
                break;
            case ID:
            case VOID:
            case 204:
                {
                alt14=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }

            switch (alt14) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:199:4: inline_section
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_inline_section_in_static_section2855);
                    inline_section56=inline_section();

                    state._fsp--;

                    adaptor.addChild(root_0, inline_section56.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:200:5: implementation_method_wrapper2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper2_in_static_section2862);
                    implementation_method_wrapper257=implementation_method_wrapper2();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper257.getTree());

                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:201:5: static_section3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_section3_in_static_section2869);
                    static_section358=static_section3();

                    state._fsp--;

                    adaptor.addChild(root_0, static_section358.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section2"


    public static class inline_section_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "inline_section"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:204:1: inline_section : 'inline' ( ENUM_PREFIX )? field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) ;
    public final ObjcmParser.inline_section_return inline_section() throws RecognitionException {
        ObjcmParser.inline_section_return retval = new ObjcmParser.inline_section_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal59=null;
        Token ENUM_PREFIX60=null;
        Token SEMICOLON65=null;
        ObjcmParser.field_type_return field_type61 =null;

        ObjcmParser.name_return name62 =null;

        ObjcmParser.method_params2_return method_params263 =null;

        ObjcmParser.block_wrapper_return block_wrapper64 =null;


        Object string_literal59_tree=null;
        Object ENUM_PREFIX60_tree=null;
        Object SEMICOLON65_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:205:2: ( 'inline' ( ENUM_PREFIX )? field_type name ( method_params2 )? ( block_wrapper | SEMICOLON ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:205:4: 'inline' ( ENUM_PREFIX )? field_type name ( method_params2 )? ( block_wrapper | SEMICOLON )
            {
            root_0 = (Object)adaptor.nil();


            string_literal59=(Token)match(input,197,FOLLOW_197_in_inline_section881); 
            string_literal59_tree = 
            (Object)adaptor.create(string_literal59)
            ;
            adaptor.addChild(root_0, string_literal59_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:205:13: ( ENUM_PREFIX )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==ENUM_PREFIX) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:205:13: ENUM_PREFIX
                    {
                    ENUM_PREFIX60=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_inline_section883); 
                    ENUM_PREFIX60_tree = 
                    (Object)adaptor.create(ENUM_PREFIX60)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX60_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_inline_section886);
            field_type61=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type61.getTree());

            pushFollow(FOLLOW_name_in_inline_section888);
            name62=name();

            state._fsp--;

            adaptor.addChild(root_0, name62.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:205:43: ( method_params2 )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==L_BR) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:205:43: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_inline_section891);
                    method_params263=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params263.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:205:59: ( block_wrapper | SEMICOLON )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==L_FBR) ) {
                alt17=1;
            }
            else if ( (LA17_0==SEMICOLON) ) {
                alt17=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:205:60: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_inline_section895);
                    block_wrapper64=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper64.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:205:76: SEMICOLON
                    {
                    SEMICOLON65=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_inline_section899); 
                    SEMICOLON65_tree = 
                    (Object)adaptor.create(SEMICOLON65)
                    ;
                    adaptor.addChild(root_0, SEMICOLON65_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "inline_section"


    public static class static_section3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_section3"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:207:1: static_section3 : field_type name ( indexed )* static_end ;
    public final ObjcmParser.static_section3_return static_section3() throws RecognitionException {
        ObjcmParser.static_section3_return retval = new ObjcmParser.static_section3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type66 =null;

        ObjcmParser.name_return name67 =null;

        ObjcmParser.indexed_return indexed68 =null;

        ObjcmParser.static_end_return static_end69 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:208:2: ( field_type name ( indexed )* static_end )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:208:4: field_type name ( indexed )* static_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_static_section3910);
            field_type66=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type66.getTree());

            pushFollow(FOLLOW_name_in_static_section3912);
            name67=name();

            state._fsp--;

            adaptor.addChild(root_0, name67.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:208:20: ( indexed )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==L_KBR) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:208:20: indexed
            	    {
            	    pushFollow(FOLLOW_indexed_in_static_section3914);
            	    indexed68=indexed();

            	    state._fsp--;

            	    adaptor.addChild(root_0, indexed68.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);


            pushFollow(FOLLOW_static_end_in_static_section3918);
            static_end69=static_end();

            state._fsp--;

            adaptor.addChild(root_0, static_end69.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_section3"


    public static class static_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_end"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:211:1: static_end : ( implementation_method_wrapper3 | field_end );
    public final ObjcmParser.static_end_return static_end() throws RecognitionException {
        ObjcmParser.static_end_return retval = new ObjcmParser.static_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper370 =null;

        ObjcmParser.field_end_return field_end71 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:212:2: ( implementation_method_wrapper3 | field_end )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==L_BR) ) {
                alt19=1;
            }
            else if ( (LA19_0==L_AND_EQ||(LA19_0 >= L_DIV_EQ && LA19_0 <= L_EQ)||LA19_0==L_LEFT_EQ||LA19_0==L_MINUS_EQ||LA19_0==L_MULT_EQ||LA19_0==L_OR_EQ||LA19_0==L_PERC_EQ||LA19_0==L_PLUS_EQ||LA19_0==L_RIGHT_EQ||LA19_0==L_XOR_EQ||LA19_0==SEMICOLON) ) {
                alt19=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }
            switch (alt19) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:212:4: implementation_method_wrapper3
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper3_in_static_end930);
                    implementation_method_wrapper370=implementation_method_wrapper3();

                    state._fsp--;

                    adaptor.addChild(root_0, implementation_method_wrapper370.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:213:5: field_end
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_end_in_static_end936);
                    field_end71=field_end();

                    state._fsp--;

                    adaptor.addChild(root_0, field_end71.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_end"


    public static class field_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:215:1: field_end : field_end_internal -> ^( FIELD field_end_internal ) ;
    public final ObjcmParser.field_end_return field_end() throws RecognitionException {
        ObjcmParser.field_end_return retval = new ObjcmParser.field_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_end_internal_return field_end_internal72 =null;


        RewriteRuleSubtreeStream stream_field_end_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_end_internal");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:216:2: ( field_end_internal -> ^( FIELD field_end_internal ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:216:4: field_end_internal
            {
            pushFollow(FOLLOW_field_end_internal_in_field_end947);
            field_end_internal72=field_end_internal();

            state._fsp--;

            stream_field_end_internal.add(field_end_internal72.getTree());

            // AST REWRITE
            // elements: field_end_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 216:23: -> ^( FIELD field_end_internal )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:216:26: ^( FIELD field_end_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_end_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end"


    public static class field_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_end_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:218:1: field_end_internal : ( expr_assign_wrapper )? SEMICOLON ;
    public final ObjcmParser.field_end_internal_return field_end_internal() throws RecognitionException {
        ObjcmParser.field_end_internal_return retval = new ObjcmParser.field_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON74=null;
        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper73 =null;


        Object SEMICOLON74_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:219:2: ( ( expr_assign_wrapper )? SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:219:4: ( expr_assign_wrapper )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:219:4: ( expr_assign_wrapper )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==L_AND_EQ||(LA20_0 >= L_DIV_EQ && LA20_0 <= L_EQ)||LA20_0==L_LEFT_EQ||LA20_0==L_MINUS_EQ||LA20_0==L_MULT_EQ||LA20_0==L_OR_EQ||LA20_0==L_PERC_EQ||LA20_0==L_PLUS_EQ||LA20_0==L_RIGHT_EQ||LA20_0==L_XOR_EQ) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:219:4: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_field_end_internal965);
                    expr_assign_wrapper73=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper73.getTree());

                    }
                    break;

            }


            SEMICOLON74=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_end_internal968); 
            SEMICOLON74_tree = 
            (Object)adaptor.create(SEMICOLON74)
            ;
            adaptor.addChild(root_0, SEMICOLON74_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_end_internal"


    public static class implementation_method_wrapper3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper3"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:221:1: implementation_method_wrapper3 : implementation_method3 -> ^( METHOD implementation_method3 ) ;
    public final ObjcmParser.implementation_method_wrapper3_return implementation_method_wrapper3() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper3_return retval = new ObjcmParser.implementation_method_wrapper3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method3_return implementation_method375 =null;


        RewriteRuleSubtreeStream stream_implementation_method3=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method3");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:222:2: ( implementation_method3 -> ^( METHOD implementation_method3 ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:222:4: implementation_method3
            {
            pushFollow(FOLLOW_implementation_method3_in_implementation_method_wrapper3980);
            implementation_method375=implementation_method3();

            state._fsp--;

            stream_implementation_method3.add(implementation_method375.getTree());

            // AST REWRITE
            // elements: implementation_method3
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 222:27: -> ^( METHOD implementation_method3 )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:222:30: ^( METHOD implementation_method3 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method3.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper3"


    public static class implementation_method3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method3"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:224:1: implementation_method3 : method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? ;
    public final ObjcmParser.implementation_method3_return implementation_method3() throws RecognitionException {
        ObjcmParser.implementation_method3_return retval = new ObjcmParser.implementation_method3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON77=null;
        ObjcmParser.method_header_body3_return method_header_body376 =null;

        ObjcmParser.attribute_return attribute78 =null;

        ObjcmParser.block_wrapper_return block_wrapper79 =null;


        Object SEMICOLON77_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:225:2: ( method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:225:4: method_header_body3 ( SEMICOLON )? ( attribute )? ( block_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body3_in_implementation_method3998);
            method_header_body376=method_header_body3();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body376.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:225:25: ( SEMICOLON )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==SEMICOLON) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:225:25: SEMICOLON
                    {
                    SEMICOLON77=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method31001); 
                    SEMICOLON77_tree = 
                    (Object)adaptor.create(SEMICOLON77)
                    ;
                    adaptor.addChild(root_0, SEMICOLON77_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:226:3: ( attribute )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==183) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:226:3: attribute
                    {
                    pushFollow(FOLLOW_attribute_in_implementation_method31006);
                    attribute78=attribute();

                    state._fsp--;

                    adaptor.addChild(root_0, attribute78.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:227:3: ( block_wrapper )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==L_FBR) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:227:3: block_wrapper
                    {
                    pushFollow(FOLLOW_block_wrapper_in_implementation_method31011);
                    block_wrapper79=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper79.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method3"


    public static class attribute_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "attribute"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:230:1: attribute : '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON ;
    public final ObjcmParser.attribute_return attribute() throws RecognitionException {
        ObjcmParser.attribute_return retval = new ObjcmParser.attribute_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal80=null;
        Token L_BR81=null;
        Token L_BR82=null;
        Token string_literal83=null;
        Token R_BR84=null;
        Token R_BR85=null;
        Token SEMICOLON86=null;

        Object string_literal80_tree=null;
        Object L_BR81_tree=null;
        Object L_BR82_tree=null;
        Object string_literal83_tree=null;
        Object R_BR84_tree=null;
        Object R_BR85_tree=null;
        Object SEMICOLON86_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:231:2: ( '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:231:4: '__attribute__' L_BR L_BR 'constructor' R_BR R_BR SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal80=(Token)match(input,183,FOLLOW_183_in_attribute1024); 
            string_literal80_tree = 
            (Object)adaptor.create(string_literal80)
            ;
            adaptor.addChild(root_0, string_literal80_tree);


            L_BR81=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute1027); 
            L_BR81_tree = 
            (Object)adaptor.create(L_BR81)
            ;
            adaptor.addChild(root_0, L_BR81_tree);


            L_BR82=(Token)match(input,L_BR,FOLLOW_L_BR_in_attribute1030); 
            L_BR82_tree = 
            (Object)adaptor.create(L_BR82)
            ;
            adaptor.addChild(root_0, L_BR82_tree);


            string_literal83=(Token)match(input,187,FOLLOW_187_in_attribute1033); 
            string_literal83_tree = 
            (Object)adaptor.create(string_literal83)
            ;
            adaptor.addChild(root_0, string_literal83_tree);


            R_BR84=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute1036); 
            R_BR84_tree = 
            (Object)adaptor.create(R_BR84)
            ;
            adaptor.addChild(root_0, R_BR84_tree);


            R_BR85=(Token)match(input,R_BR,FOLLOW_R_BR_in_attribute1039); 
            R_BR85_tree = 
            (Object)adaptor.create(R_BR85)
            ;
            adaptor.addChild(root_0, R_BR85_tree);


            SEMICOLON86=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_attribute1042); 
            SEMICOLON86_tree = 
            (Object)adaptor.create(SEMICOLON86)
            ;
            adaptor.addChild(root_0, SEMICOLON86_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "attribute"


    public static class implementation_method2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:233:1: implementation_method2 : ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method2_return implementation_method2() throws RecognitionException {
        ObjcmParser.implementation_method2_return retval = new ObjcmParser.implementation_method2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON87=null;
        ObjcmParser.block_wrapper_return block_wrapper88 =null;


        Object SEMICOLON87_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:234:2: ( ( SEMICOLON )? block_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:234:5: ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:234:5: ( SEMICOLON )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==SEMICOLON) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:234:5: SEMICOLON
                    {
                    SEMICOLON87=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method21054); 
                    SEMICOLON87_tree = 
                    (Object)adaptor.create(SEMICOLON87)
                    ;
                    adaptor.addChild(root_0, SEMICOLON87_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method21059);
            block_wrapper88=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper88.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method2"


    public static class field_type_started_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:238:1: field_type_started_wrapper : field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) ;
    public final ObjcmParser.field_type_started_wrapper_return field_type_started_wrapper() throws RecognitionException {
        ObjcmParser.field_type_started_wrapper_return retval = new ObjcmParser.field_type_started_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_started_return field_type_started89 =null;


        RewriteRuleSubtreeStream stream_field_type_started=new RewriteRuleSubtreeStream(adaptor,"rule field_type_started");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:239:2: ( field_type_started -> ^( FIELD_TYPE_STARTED field_type_started ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:239:4: field_type_started
            {
            pushFollow(FOLLOW_field_type_started_in_field_type_started_wrapper1071);
            field_type_started89=field_type_started();

            state._fsp--;

            stream_field_type_started.add(field_type_started89.getTree());

            // AST REWRITE
            // elements: field_type_started
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 239:23: -> ^( FIELD_TYPE_STARTED field_type_started )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:239:26: ^( FIELD_TYPE_STARTED field_type_started )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_TYPE_STARTED, "FIELD_TYPE_STARTED")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_started.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started_wrapper"


    public static class field_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_started"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:241:1: field_type_started : field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) ;
    public final ObjcmParser.field_type_started_return field_type_started() throws RecognitionException {
        ObjcmParser.field_type_started_return retval = new ObjcmParser.field_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_return field_type90 =null;

        ObjcmParser.name_return name91 =null;

        ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper92 =null;

        ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper93 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:242:2: ( field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:242:4: field_type name ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_field_type_started1090);
            field_type90=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type90.getTree());

            pushFollow(FOLLOW_name_in_field_type_started1092);
            name91=name();

            state._fsp--;

            adaptor.addChild(root_0, name91.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:242:20: ( classic_method_declaration_wrapper | field_declaration_end_wrapper )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==L_BR) ) {
                alt25=1;
            }
            else if ( (LA25_0==L_AND_EQ||(LA25_0 >= L_DIV_EQ && LA25_0 <= L_EQ)||LA25_0==L_LEFT_EQ||LA25_0==L_MINUS_EQ||LA25_0==L_MULT_EQ||LA25_0==L_OR_EQ||LA25_0==L_PERC_EQ||LA25_0==L_PLUS_EQ||LA25_0==L_RIGHT_EQ||LA25_0==L_XOR_EQ||LA25_0==SEMICOLON) ) {
                alt25=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 25, 0, input);

                throw nvae;

            }
            switch (alt25) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:242:21: classic_method_declaration_wrapper
                    {
                    pushFollow(FOLLOW_classic_method_declaration_wrapper_in_field_type_started1095);
                    classic_method_declaration_wrapper92=classic_method_declaration_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, classic_method_declaration_wrapper92.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:242:58: field_declaration_end_wrapper
                    {
                    pushFollow(FOLLOW_field_declaration_end_wrapper_in_field_type_started1099);
                    field_declaration_end_wrapper93=field_declaration_end_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, field_declaration_end_wrapper93.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_started"


    public static class field_declaration_end_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:244:1: field_declaration_end_wrapper : field_declaration_end -> ^( FIELD field_declaration_end ) ;
    public final ObjcmParser.field_declaration_end_wrapper_return field_declaration_end_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_end_wrapper_return retval = new ObjcmParser.field_declaration_end_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_end_return field_declaration_end94 =null;


        RewriteRuleSubtreeStream stream_field_declaration_end=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_end");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:245:2: ( field_declaration_end -> ^( FIELD field_declaration_end ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:245:4: field_declaration_end
            {
            pushFollow(FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1110);
            field_declaration_end94=field_declaration_end();

            state._fsp--;

            stream_field_declaration_end.add(field_declaration_end94.getTree());

            // AST REWRITE
            // elements: field_declaration_end
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 245:26: -> ^( FIELD field_declaration_end )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:245:29: ^( FIELD field_declaration_end )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_end.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end_wrapper"


    public static class classic_method_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:247:1: classic_method_declaration_wrapper : classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) ;
    public final ObjcmParser.classic_method_declaration_wrapper_return classic_method_declaration_wrapper() throws RecognitionException {
        ObjcmParser.classic_method_declaration_wrapper_return retval = new ObjcmParser.classic_method_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classic_method_declaration_return classic_method_declaration95 =null;


        RewriteRuleSubtreeStream stream_classic_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classic_method_declaration");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:248:2: ( classic_method_declaration -> ^( STATIC_METHOD classic_method_declaration ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:248:4: classic_method_declaration
            {
            pushFollow(FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1128);
            classic_method_declaration95=classic_method_declaration();

            state._fsp--;

            stream_classic_method_declaration.add(classic_method_declaration95.getTree());

            // AST REWRITE
            // elements: classic_method_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 248:31: -> ^( STATIC_METHOD classic_method_declaration )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:248:34: ^( STATIC_METHOD classic_method_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_classic_method_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration_wrapper"


    public static class classic_method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classic_method_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:250:1: classic_method_declaration : method_params2 block_wrapper ;
    public final ObjcmParser.classic_method_declaration_return classic_method_declaration() throws RecognitionException {
        ObjcmParser.classic_method_declaration_return retval = new ObjcmParser.classic_method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params296 =null;

        ObjcmParser.block_wrapper_return block_wrapper97 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:252:2: ( method_params2 block_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:252:4: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_classic_method_declaration1148);
            method_params296=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params296.getTree());

            pushFollow(FOLLOW_block_wrapper_in_classic_method_declaration1153);
            block_wrapper97=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper97.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classic_method_declaration"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:256:1: implementation_method_wrapper : implementation_method -> ^( METHOD implementation_method ) ;
    public final ObjcmParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper_return retval = new ObjcmParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method_return implementation_method98 =null;


        RewriteRuleSubtreeStream stream_implementation_method=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:257:2: ( implementation_method -> ^( METHOD implementation_method ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:257:4: implementation_method
            {
            pushFollow(FOLLOW_implementation_method_in_implementation_method_wrapper1166);
            implementation_method98=implementation_method();

            state._fsp--;

            stream_implementation_method.add(implementation_method98.getTree());

            // AST REWRITE
            // elements: implementation_method
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 257:26: -> ^( METHOD implementation_method )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:257:29: ^( METHOD implementation_method )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class implementation_method_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:259:1: implementation_method_wrapper2 : implementation_method2 -> ^( METHOD implementation_method2 ) ;
    public final ObjcmParser.implementation_method_wrapper2_return implementation_method_wrapper2() throws RecognitionException {
        ObjcmParser.implementation_method_wrapper2_return retval = new ObjcmParser.implementation_method_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.implementation_method2_return implementation_method299 =null;


        RewriteRuleSubtreeStream stream_implementation_method2=new RewriteRuleSubtreeStream(adaptor,"rule implementation_method2");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:260:2: ( implementation_method2 -> ^( METHOD implementation_method2 ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:260:4: implementation_method2
            {
            pushFollow(FOLLOW_implementation_method2_in_implementation_method_wrapper21183);
            implementation_method299=implementation_method2();

            state._fsp--;

            stream_implementation_method2.add(implementation_method299.getTree());

            // AST REWRITE
            // elements: implementation_method2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 260:27: -> ^( METHOD implementation_method2 )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:260:30: ^( METHOD implementation_method2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_implementation_method2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper2"


    public static class implementation_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:262:1: implementation_method : method_header_body ( SEMICOLON )? block_wrapper ;
    public final ObjcmParser.implementation_method_return implementation_method() throws RecognitionException {
        ObjcmParser.implementation_method_return retval = new ObjcmParser.implementation_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON101=null;
        ObjcmParser.method_header_body_return method_header_body100 =null;

        ObjcmParser.block_wrapper_return block_wrapper102 =null;


        Object SEMICOLON101_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:263:2: ( method_header_body ( SEMICOLON )? block_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:263:4: method_header_body ( SEMICOLON )? block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_implementation_method1200);
            method_header_body100=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body100.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:263:23: ( SEMICOLON )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==SEMICOLON) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:263:23: SEMICOLON
                    {
                    SEMICOLON101=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_implementation_method1202); 
                    SEMICOLON101_tree = 
                    (Object)adaptor.create(SEMICOLON101)
                    ;
                    adaptor.addChild(root_0, SEMICOLON101_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_block_wrapper_in_implementation_method1207);
            block_wrapper102=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper102.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method"


    public static class block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:267:1: block_wrapper : block -> ^( BLOCK block ) ;
    public final ObjcmParser.block_wrapper_return block_wrapper() throws RecognitionException {
        ObjcmParser.block_wrapper_return retval = new ObjcmParser.block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_return block103 =null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:268:2: ( block -> ^( BLOCK block ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:268:4: block
            {
            pushFollow(FOLLOW_block_in_block_wrapper1220);
            block103=block();

            state._fsp--;

            stream_block.add(block103.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 268:10: -> ^( BLOCK block )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:268:13: ^( BLOCK block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK, "BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_wrapper"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:270:1: block : L_FBR ( block_internal_full | block )* R_FBR ;
    public final ObjcmParser.block_return block() throws RecognitionException {
        ObjcmParser.block_return retval = new ObjcmParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR104=null;
        Token R_FBR107=null;
        ObjcmParser.block_internal_full_return block_internal_full105 =null;

        ObjcmParser.block_return block106 =null;


        Object L_FBR104_tree=null;
        Object R_FBR107_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:270:7: ( L_FBR ( block_internal_full | block )* R_FBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:271:3: L_FBR ( block_internal_full | block )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR104=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block1242); 
            L_FBR104_tree = 
            (Object)adaptor.create(L_FBR104)
            ;
            adaptor.addChild(root_0, L_FBR104_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:272:4: ( block_internal_full | block )*
            loop27:
            do {
                int alt27=3;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==ASTERISK||LA27_0==BREAK_WORD||LA27_0==CONST_PREFIX||LA27_0==ENUM_PREFIX||LA27_0==ID||LA27_0==L_AND||LA27_0==L_BR||LA27_0==L_KBR||LA27_0==L_MINUS||LA27_0==L_MINUS_MINUS||LA27_0==L_NOT||LA27_0==L_PLUS||LA27_0==L_PLUS_PLUS||LA27_0==L_TILDA||LA27_0==NUMBER||LA27_0==SEMICOLON||(LA27_0 >= SINGLE_OP && LA27_0 <= SIZEOF)||LA27_0==STATIC_PREFIX||(LA27_0 >= STRING_LITERAL && LA27_0 <= STRING_LITERAL3)||LA27_0==STRUCT_PREFIX||LA27_0==VOID||LA27_0==169||LA27_0==176||LA27_0==178||(LA27_0 >= 180 && LA27_0 <= 182)||(LA27_0 >= 184 && LA27_0 <= 185)||LA27_0==188||(LA27_0 >= 190 && LA27_0 <= 196)||(LA27_0 >= 198 && LA27_0 <= 201)||(LA27_0 >= 204 && LA27_0 <= 205)) ) {
                    alt27=1;
                }
                else if ( (LA27_0==L_FBR) ) {
                    alt27=2;
                }


                switch (alt27) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:272:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block1248);
            	    block_internal_full105=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full105.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:272:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block1252);
            	    block106=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block106.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            R_FBR107=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block1260); 
            R_FBR107_tree = 
            (Object)adaptor.create(R_FBR107)
            ;
            adaptor.addChild(root_0, R_FBR107_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_case_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_case"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:276:1: block_case : L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR ;
    public final ObjcmParser.block_case_return block_case() throws RecognitionException {
        ObjcmParser.block_case_return retval = new ObjcmParser.block_case_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR108=null;
        Token R_FBR112=null;
        ObjcmParser.block_internal_full_return block_internal_full109 =null;

        ObjcmParser.block_return block110 =null;

        ObjcmParser.default_stmt_return default_stmt111 =null;


        Object L_FBR108_tree=null;
        Object R_FBR112_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:277:2: ( L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:278:3: L_FBR ( block_internal_full | block )* ( default_stmt )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR108=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_block_case1275); 
            L_FBR108_tree = 
            (Object)adaptor.create(L_FBR108)
            ;
            adaptor.addChild(root_0, L_FBR108_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:279:4: ( block_internal_full | block )*
            loop28:
            do {
                int alt28=3;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==ASTERISK||LA28_0==BREAK_WORD||LA28_0==CONST_PREFIX||LA28_0==ENUM_PREFIX||LA28_0==ID||LA28_0==L_AND||LA28_0==L_BR||LA28_0==L_KBR||LA28_0==L_MINUS||LA28_0==L_MINUS_MINUS||LA28_0==L_NOT||LA28_0==L_PLUS||LA28_0==L_PLUS_PLUS||LA28_0==L_TILDA||LA28_0==NUMBER||LA28_0==SEMICOLON||(LA28_0 >= SINGLE_OP && LA28_0 <= SIZEOF)||LA28_0==STATIC_PREFIX||(LA28_0 >= STRING_LITERAL && LA28_0 <= STRING_LITERAL3)||LA28_0==STRUCT_PREFIX||LA28_0==VOID||LA28_0==169||LA28_0==176||LA28_0==178||(LA28_0 >= 180 && LA28_0 <= 182)||(LA28_0 >= 184 && LA28_0 <= 185)||LA28_0==188||(LA28_0 >= 190 && LA28_0 <= 196)||(LA28_0 >= 198 && LA28_0 <= 201)||(LA28_0 >= 204 && LA28_0 <= 205)) ) {
                    alt28=1;
                }
                else if ( (LA28_0==L_FBR) ) {
                    alt28=2;
                }


                switch (alt28) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:279:5: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_block_case1281);
            	    block_internal_full109=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full109.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:279:27: block
            	    {
            	    pushFollow(FOLLOW_block_in_block_case1285);
            	    block110=block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block110.getTree());

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:280:4: ( default_stmt )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==189) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:280:4: default_stmt
                    {
                    pushFollow(FOLLOW_default_stmt_in_block_case1294);
                    default_stmt111=default_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt111.getTree());

                    }
                    break;

            }


            R_FBR112=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_block_case1299); 
            R_FBR112_tree = 
            (Object)adaptor.create(R_FBR112)
            ;
            adaptor.addChild(root_0, R_FBR112_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_case"


    public static class block_internal_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_full"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:284:1: block_internal_full : block_internal ;
    public final ObjcmParser.block_internal_full_return block_internal_full() throws RecognitionException {
        ObjcmParser.block_internal_full_return retval = new ObjcmParser.block_internal_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_return block_internal113 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:285:2: ( block_internal )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:285:4: block_internal
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_internal_in_block_internal_full1311);
            block_internal113=block_internal();

            state._fsp--;

            adaptor.addChild(root_0, block_internal113.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_full"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:288:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression_wrapper SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper | 'extern' );
    public final ObjcmParser.block_internal_return block_internal() throws RecognitionException {
        ObjcmParser.block_internal_return retval = new ObjcmParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON117=null;
        Token SEMICOLON120=null;
        Token SEMICOLON130=null;
        Token SEMICOLON132=null;
        Token SEMICOLON134=null;
        Token SEMICOLON136=null;
        Token SEMICOLON137=null;
        Token string_literal139=null;
        ObjcmParser.try_stmt_return try_stmt114 =null;

        ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper115 =null;

        ObjcmParser.static_start_wrapper_return static_start_wrapper116 =null;

        ObjcmParser.do_stmt_return do_stmt118 =null;

        ObjcmParser.const_expression_wrapper_return const_expression_wrapper119 =null;

        ObjcmParser.variable_init_wrapper_return variable_init_wrapper121 =null;

        ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper122 =null;

        ObjcmParser.else_stmt_return else_stmt123 =null;

        ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper124 =null;

        ObjcmParser.return_stmt_return return_stmt125 =null;

        ObjcmParser.for_stmt_wrapper_return for_stmt_wrapper126 =null;

        ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper127 =null;

        ObjcmParser.single_operators_return single_operators128 =null;

        ObjcmParser.struct_variable_return struct_variable129 =null;

        ObjcmParser.enum_variable_return enum_variable131 =null;

        ObjcmParser.typeof_started_return typeof_started133 =null;

        ObjcmParser.known_type_started_return known_type_started135 =null;

        ObjcmParser.goto_wrapper_return goto_wrapper138 =null;


        Object SEMICOLON117_tree=null;
        Object SEMICOLON120_tree=null;
        Object SEMICOLON130_tree=null;
        Object SEMICOLON132_tree=null;
        Object SEMICOLON134_tree=null;
        Object SEMICOLON136_tree=null;
        Object SEMICOLON137_tree=null;
        Object string_literal139_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:289:2: ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression_wrapper SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper | 'extern' )
            int alt30=20;
            alt30 = dfa30.predict(input);
            switch (alt30) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:289:4: try_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_in_block_internal1322);
                    try_stmt114=try_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, try_stmt114.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:290:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1327);
                    throw_stmt_wrapper115=throw_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, throw_stmt_wrapper115.getTree());

                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:291:4: static_start_wrapper SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_start_wrapper_in_block_internal1332);
                    static_start_wrapper116=static_start_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_start_wrapper116.getTree());

                    SEMICOLON117=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1334); 
                    SEMICOLON117_tree = 
                    (Object)adaptor.create(SEMICOLON117)
                    ;
                    adaptor.addChild(root_0, SEMICOLON117_tree);


                    }
                    break;
                case 4 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:292:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1339);
                    do_stmt118=do_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, do_stmt118.getTree());

                    }
                    break;
                case 5 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:293:4: const_expression_wrapper SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expression_wrapper_in_block_internal1344);
                    const_expression_wrapper119=const_expression_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expression_wrapper119.getTree());

                    SEMICOLON120=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1346); 
                    SEMICOLON120_tree = 
                    (Object)adaptor.create(SEMICOLON120)
                    ;
                    adaptor.addChild(root_0, SEMICOLON120_tree);


                    }
                    break;
                case 6 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:294:4: variable_init_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_init_wrapper_in_block_internal1351);
                    variable_init_wrapper121=variable_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, variable_init_wrapper121.getTree());

                    }
                    break;
                case 7 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:295:4: if_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_wrapper_in_block_internal1356);
                    if_stmt_wrapper122=if_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, if_stmt_wrapper122.getTree());

                    }
                    break;
                case 8 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:296:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1361);
                    else_stmt123=else_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, else_stmt123.getTree());

                    }
                    break;
                case 9 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:297:4: switch_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_wrapper_in_block_internal1366);
                    switch_stmt_wrapper124=switch_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, switch_stmt_wrapper124.getTree());

                    }
                    break;
                case 10 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:298:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1371);
                    return_stmt125=return_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, return_stmt125.getTree());

                    }
                    break;
                case 11 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:299:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1376);
                    for_stmt_wrapper126=for_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_wrapper126.getTree());

                    }
                    break;
                case 12 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:300:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1381);
                    while_stmt_wrapper127=while_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, while_stmt_wrapper127.getTree());

                    }
                    break;
                case 13 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:301:4: single_operators
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_operators_in_block_internal1386);
                    single_operators128=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators128.getTree());

                    }
                    break;
                case 14 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:302:4: struct_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_variable_in_block_internal1391);
                    struct_variable129=struct_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_variable129.getTree());

                    SEMICOLON130=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1393); 
                    SEMICOLON130_tree = 
                    (Object)adaptor.create(SEMICOLON130)
                    ;
                    adaptor.addChild(root_0, SEMICOLON130_tree);


                    }
                    break;
                case 15 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:303:4: enum_variable SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_enum_variable_in_block_internal1398);
                    enum_variable131=enum_variable();

                    state._fsp--;

                    adaptor.addChild(root_0, enum_variable131.getTree());

                    SEMICOLON132=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1400); 
                    SEMICOLON132_tree = 
                    (Object)adaptor.create(SEMICOLON132)
                    ;
                    adaptor.addChild(root_0, SEMICOLON132_tree);


                    }
                    break;
                case 16 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:304:4: typeof_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typeof_started_in_block_internal1405);
                    typeof_started133=typeof_started();

                    state._fsp--;

                    adaptor.addChild(root_0, typeof_started133.getTree());

                    SEMICOLON134=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1407); 
                    SEMICOLON134_tree = 
                    (Object)adaptor.create(SEMICOLON134)
                    ;
                    adaptor.addChild(root_0, SEMICOLON134_tree);


                    }
                    break;
                case 17 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:305:4: known_type_started SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_known_type_started_in_block_internal1412);
                    known_type_started135=known_type_started();

                    state._fsp--;

                    adaptor.addChild(root_0, known_type_started135.getTree());

                    SEMICOLON136=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1414); 
                    SEMICOLON136_tree = 
                    (Object)adaptor.create(SEMICOLON136)
                    ;
                    adaptor.addChild(root_0, SEMICOLON136_tree);


                    }
                    break;
                case 18 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:306:4: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();


                    SEMICOLON137=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_block_internal1419); 
                    SEMICOLON137_tree = 
                    (Object)adaptor.create(SEMICOLON137)
                    ;
                    adaptor.addChild(root_0, SEMICOLON137_tree);


                    }
                    break;
                case 19 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:307:4: goto_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_wrapper_in_block_internal1425);
                    goto_wrapper138=goto_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, goto_wrapper138.getTree());

                    }
                    break;
                case 20 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:308:4: 'extern'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal139=(Token)match(input,192,FOLLOW_192_in_block_internal1430); 
                    string_literal139_tree = 
                    (Object)adaptor.create(string_literal139)
                    ;
                    adaptor.addChild(root_0, string_literal139_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class goto_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:311:1: goto_wrapper : goto_operator -> ^( GOTO goto_operator ) ;
    public final ObjcmParser.goto_wrapper_return goto_wrapper() throws RecognitionException {
        ObjcmParser.goto_wrapper_return retval = new ObjcmParser.goto_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.goto_operator_return goto_operator140 =null;


        RewriteRuleSubtreeStream stream_goto_operator=new RewriteRuleSubtreeStream(adaptor,"rule goto_operator");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:312:2: ( goto_operator -> ^( GOTO goto_operator ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:312:4: goto_operator
            {
            pushFollow(FOLLOW_goto_operator_in_goto_wrapper1442);
            goto_operator140=goto_operator();

            state._fsp--;

            stream_goto_operator.add(goto_operator140.getTree());

            // AST REWRITE
            // elements: goto_operator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 312:18: -> ^( GOTO goto_operator )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:312:21: ^( GOTO goto_operator )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GOTO, "GOTO")
                , root_1);

                adaptor.addChild(root_1, stream_goto_operator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_wrapper"


    public static class goto_operator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_operator"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:314:1: goto_operator : 'goto' ID SEMICOLON ;
    public final ObjcmParser.goto_operator_return goto_operator() throws RecognitionException {
        ObjcmParser.goto_operator_return retval = new ObjcmParser.goto_operator_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal141=null;
        Token ID142=null;
        Token SEMICOLON143=null;

        Object string_literal141_tree=null;
        Object ID142_tree=null;
        Object SEMICOLON143_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:315:2: ( 'goto' ID SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:315:4: 'goto' ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal141=(Token)match(input,194,FOLLOW_194_in_goto_operator1459); 
            string_literal141_tree = 
            (Object)adaptor.create(string_literal141)
            ;
            adaptor.addChild(root_0, string_literal141_tree);


            ID142=(Token)match(input,ID,FOLLOW_ID_in_goto_operator1461); 
            ID142_tree = 
            (Object)adaptor.create(ID142)
            ;
            adaptor.addChild(root_0, ID142_tree);


            SEMICOLON143=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_goto_operator1463); 
            SEMICOLON143_tree = 
            (Object)adaptor.create(SEMICOLON143)
            ;
            adaptor.addChild(root_0, SEMICOLON143_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_operator"


    public static class variable_init_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:317:1: variable_init_wrapper : variable_init -> ^( VARIABLE_INIT variable_init ) ;
    public final ObjcmParser.variable_init_wrapper_return variable_init_wrapper() throws RecognitionException {
        ObjcmParser.variable_init_wrapper_return retval = new ObjcmParser.variable_init_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.variable_init_return variable_init144 =null;


        RewriteRuleSubtreeStream stream_variable_init=new RewriteRuleSubtreeStream(adaptor,"rule variable_init");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:318:2: ( variable_init -> ^( VARIABLE_INIT variable_init ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:318:4: variable_init
            {
            pushFollow(FOLLOW_variable_init_in_variable_init_wrapper1474);
            variable_init144=variable_init();

            state._fsp--;

            stream_variable_init.add(variable_init144.getTree());

            // AST REWRITE
            // elements: variable_init
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 318:18: -> ^( VARIABLE_INIT variable_init )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:318:21: ^( VARIABLE_INIT variable_init )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_INIT, "VARIABLE_INIT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_init.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init_wrapper"


    public static class variable_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_init"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:320:1: variable_init : full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) ;
    public final ObjcmParser.variable_init_return variable_init() throws RecognitionException {
        ObjcmParser.variable_init_return retval = new ObjcmParser.variable_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON147=null;
        Token COLON148=null;
        ObjcmParser.full_expr_wrapper_return full_expr_wrapper145 =null;

        ObjcmParser.full_expr2_return full_expr2146 =null;


        Object SEMICOLON147_tree=null;
        Object COLON148_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:321:2: ( full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:321:4: full_expr_wrapper ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_full_expr_wrapper_in_variable_init1492);
            full_expr_wrapper145=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper145.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:321:22: ( ( ( full_expr2 )? SEMICOLON ) | COLON )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==ID||LA32_0==SEMICOLON||LA32_0==VOID||LA32_0==185||LA32_0==188||LA32_0==196||LA32_0==199||LA32_0==204) ) {
                alt32=1;
            }
            else if ( (LA32_0==COLON) ) {
                alt32=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }
            switch (alt32) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:321:23: ( ( full_expr2 )? SEMICOLON )
                    {
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:321:23: ( ( full_expr2 )? SEMICOLON )
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:321:24: ( full_expr2 )? SEMICOLON
                    {
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:321:24: ( full_expr2 )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==ID||LA31_0==VOID||LA31_0==185||LA31_0==188||LA31_0==196||LA31_0==199||LA31_0==204) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:321:24: full_expr2
                            {
                            pushFollow(FOLLOW_full_expr2_in_variable_init1496);
                            full_expr2146=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2146.getTree());

                            }
                            break;

                    }


                    SEMICOLON147=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_variable_init1499); 
                    SEMICOLON147_tree = 
                    (Object)adaptor.create(SEMICOLON147)
                    ;
                    adaptor.addChild(root_0, SEMICOLON147_tree);


                    }


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:321:49: COLON
                    {
                    COLON148=(Token)match(input,COLON,FOLLOW_COLON_in_variable_init1504); 
                    COLON148_tree = 
                    (Object)adaptor.create(COLON148)
                    ;
                    adaptor.addChild(root_0, COLON148_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_init"


    public static class known_type_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_type_started"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:323:1: known_type_started : known_types ( ASTERISK )* full_expr2 ;
    public final ObjcmParser.known_type_started_return known_type_started() throws RecognitionException {
        ObjcmParser.known_type_started_return retval = new ObjcmParser.known_type_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK150=null;
        ObjcmParser.known_types_return known_types149 =null;

        ObjcmParser.full_expr2_return full_expr2151 =null;


        Object ASTERISK150_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:324:2: ( known_types ( ASTERISK )* full_expr2 )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:324:4: known_types ( ASTERISK )* full_expr2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_known_types_in_known_type_started1516);
            known_types149=known_types();

            state._fsp--;

            adaptor.addChild(root_0, known_types149.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:324:16: ( ASTERISK )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==ASTERISK) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:324:16: ASTERISK
            	    {
            	    ASTERISK150=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_known_type_started1518); 
            	    ASTERISK150_tree = 
            	    (Object)adaptor.create(ASTERISK150)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK150_tree);


            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);


            pushFollow(FOLLOW_full_expr2_in_known_type_started1521);
            full_expr2151=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2151.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_type_started"


    public static class typeof_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof_started"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:326:1: typeof_started : typeof full_expr_wrapper ;
    public final ObjcmParser.typeof_started_return typeof_started() throws RecognitionException {
        ObjcmParser.typeof_started_return retval = new ObjcmParser.typeof_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typeof_return typeof152 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper153 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:327:2: ( typeof full_expr_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:327:4: typeof full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typeof_in_typeof_started1533);
            typeof152=typeof();

            state._fsp--;

            adaptor.addChild(root_0, typeof152.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_typeof_started1535);
            full_expr_wrapper153=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper153.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof_started"


    public static class struct_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_variable"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:330:1: struct_variable : STRUCT_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )* ;
    public final ObjcmParser.struct_variable_return struct_variable() throws RecognitionException {
        ObjcmParser.struct_variable_return retval = new ObjcmParser.struct_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX154=null;
        Token COMMA157=null;
        ObjcmParser.name_return name155 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper156 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper158 =null;


        Object STRUCT_PREFIX154_tree=null;
        Object COMMA157_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:331:2: ( STRUCT_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:331:4: STRUCT_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX154=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_variable1548); 
            STRUCT_PREFIX154_tree = 
            (Object)adaptor.create(STRUCT_PREFIX154)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX154_tree);


            pushFollow(FOLLOW_name_in_struct_variable1550);
            name155=name();

            state._fsp--;

            adaptor.addChild(root_0, name155.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_struct_variable1552);
            full_expr_wrapper156=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper156.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:331:41: ( COMMA full_expr_wrapper )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==COMMA) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:331:42: COMMA full_expr_wrapper
            	    {
            	    COMMA157=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_variable1555); 
            	    COMMA157_tree = 
            	    (Object)adaptor.create(COMMA157)
            	    ;
            	    adaptor.addChild(root_0, COMMA157_tree);


            	    pushFollow(FOLLOW_full_expr_wrapper_in_struct_variable1557);
            	    full_expr_wrapper158=full_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, full_expr_wrapper158.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_variable"


    public static class enum_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_variable"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:333:1: enum_variable : ENUM_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )* ;
    public final ObjcmParser.enum_variable_return enum_variable() throws RecognitionException {
        ObjcmParser.enum_variable_return retval = new ObjcmParser.enum_variable_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX159=null;
        Token COMMA162=null;
        ObjcmParser.name_return name160 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper161 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper163 =null;


        Object ENUM_PREFIX159_tree=null;
        Object COMMA162_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:334:2: ( ENUM_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:334:4: ENUM_PREFIX name full_expr_wrapper ( COMMA full_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX159=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_enum_variable1568); 
            ENUM_PREFIX159_tree = 
            (Object)adaptor.create(ENUM_PREFIX159)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX159_tree);


            pushFollow(FOLLOW_name_in_enum_variable1570);
            name160=name();

            state._fsp--;

            adaptor.addChild(root_0, name160.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_enum_variable1572);
            full_expr_wrapper161=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper161.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:334:39: ( COMMA full_expr_wrapper )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==COMMA) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:334:40: COMMA full_expr_wrapper
            	    {
            	    COMMA162=(Token)match(input,COMMA,FOLLOW_COMMA_in_enum_variable1575); 
            	    COMMA162_tree = 
            	    (Object)adaptor.create(COMMA162)
            	    ;
            	    adaptor.addChild(root_0, COMMA162_tree);


            	    pushFollow(FOLLOW_full_expr_wrapper_in_enum_variable1577);
            	    full_expr_wrapper163=full_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, full_expr_wrapper163.getTree());

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_variable"


    public static class const_expression_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expression_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:336:1: const_expression_wrapper : CONST_PREFIX const_expression -> ^( CONST_EXPR2 const_expression ) ;
    public final ObjcmParser.const_expression_wrapper_return const_expression_wrapper() throws RecognitionException {
        ObjcmParser.const_expression_wrapper_return retval = new ObjcmParser.const_expression_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX164=null;
        ObjcmParser.const_expression_return const_expression165 =null;


        Object CONST_PREFIX164_tree=null;
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_const_expression=new RewriteRuleSubtreeStream(adaptor,"rule const_expression");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:337:2: ( CONST_PREFIX const_expression -> ^( CONST_EXPR2 const_expression ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:337:4: CONST_PREFIX const_expression
            {
            CONST_PREFIX164=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_const_expression_wrapper1588);  
            stream_CONST_PREFIX.add(CONST_PREFIX164);


            pushFollow(FOLLOW_const_expression_in_const_expression_wrapper1590);
            const_expression165=const_expression();

            state._fsp--;

            stream_const_expression.add(const_expression165.getTree());

            // AST REWRITE
            // elements: const_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 337:34: -> ^( CONST_EXPR2 const_expression )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:337:37: ^( CONST_EXPR2 const_expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONST_EXPR2, "CONST_EXPR2")
                , root_1);

                adaptor.addChild(root_1, stream_const_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expression_wrapper"


    public static class const_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expression"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:339:1: const_expression : type_internal full_expr_wrapper ;
    public final ObjcmParser.const_expression_return const_expression() throws RecognitionException {
        ObjcmParser.const_expression_return retval = new ObjcmParser.const_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_internal_return type_internal166 =null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper167 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:340:2: ( type_internal full_expr_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:340:4: type_internal full_expr_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_const_expression1609);
            type_internal166=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal166.getTree());

            pushFollow(FOLLOW_full_expr_wrapper_in_const_expression1611);
            full_expr_wrapper167=full_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, full_expr_wrapper167.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expression"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:342:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcmParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcmParser.throw_stmt_wrapper_return retval = new ObjcmParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.throw_stmt_return throw_stmt168 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:343:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:343:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper1620);
            throw_stmt168=throw_stmt();

            state._fsp--;

            stream_throw_stmt.add(throw_stmt168.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 343:15: -> ^( THROW_STMT throw_stmt )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:343:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:345:1: throw_stmt : '@throw' SEMICOLON ;
    public final ObjcmParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcmParser.throw_stmt_return retval = new ObjcmParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal169=null;
        Token SEMICOLON170=null;

        Object string_literal169_tree=null;
        Object SEMICOLON170_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:346:2: ( '@throw' SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:346:4: '@throw' SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal169=(Token)match(input,180,FOLLOW_180_in_throw_stmt1637); 
            string_literal169_tree = 
            (Object)adaptor.create(string_literal169)
            ;
            adaptor.addChild(root_0, string_literal169_tree);


            SEMICOLON170=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_throw_stmt1640); 
            SEMICOLON170_tree = 
            (Object)adaptor.create(SEMICOLON170)
            ;
            adaptor.addChild(root_0, SEMICOLON170_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class try_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:349:1: try_stmt : '@try' block ( catch_stmt )* ( '@finally' block )? ;
    public final ObjcmParser.try_stmt_return try_stmt() throws RecognitionException {
        ObjcmParser.try_stmt_return retval = new ObjcmParser.try_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal171=null;
        Token string_literal174=null;
        ObjcmParser.block_return block172 =null;

        ObjcmParser.catch_stmt_return catch_stmt173 =null;

        ObjcmParser.block_return block175 =null;


        Object string_literal171_tree=null;
        Object string_literal174_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:349:9: ( '@try' block ( catch_stmt )* ( '@finally' block )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:349:11: '@try' block ( catch_stmt )* ( '@finally' block )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal171=(Token)match(input,181,FOLLOW_181_in_try_stmt1651); 
            string_literal171_tree = 
            (Object)adaptor.create(string_literal171)
            ;
            adaptor.addChild(root_0, string_literal171_tree);


            pushFollow(FOLLOW_block_in_try_stmt1654);
            block172=block();

            state._fsp--;

            adaptor.addChild(root_0, block172.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:349:26: ( catch_stmt )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==168) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:349:26: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt1657);
            	    catch_stmt173=catch_stmt();

            	    state._fsp--;

            	    adaptor.addChild(root_0, catch_stmt173.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:349:38: ( '@finally' block )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==171) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:349:39: '@finally' block
                    {
                    string_literal174=(Token)match(input,171,FOLLOW_171_in_try_stmt1661); 
                    string_literal174_tree = 
                    (Object)adaptor.create(string_literal174)
                    ;
                    adaptor.addChild(root_0, string_literal174_tree);


                    pushFollow(FOLLOW_block_in_try_stmt1664);
                    block175=block();

                    state._fsp--;

                    adaptor.addChild(root_0, block175.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:352:1: catch_stmt : '@catch' L_BR ( ( ID ( ASTERISK )* ID ) | '...' ) R_BR block ;
    public final ObjcmParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcmParser.catch_stmt_return retval = new ObjcmParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal176=null;
        Token L_BR177=null;
        Token ID178=null;
        Token ASTERISK179=null;
        Token ID180=null;
        Token string_literal181=null;
        Token R_BR182=null;
        ObjcmParser.block_return block183 =null;


        Object string_literal176_tree=null;
        Object L_BR177_tree=null;
        Object ID178_tree=null;
        Object ASTERISK179_tree=null;
        Object ID180_tree=null;
        Object string_literal181_tree=null;
        Object R_BR182_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:353:2: ( '@catch' L_BR ( ( ID ( ASTERISK )* ID ) | '...' ) R_BR block )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:353:4: '@catch' L_BR ( ( ID ( ASTERISK )* ID ) | '...' ) R_BR block
            {
            root_0 = (Object)adaptor.nil();


            string_literal176=(Token)match(input,168,FOLLOW_168_in_catch_stmt1678); 
            string_literal176_tree = 
            (Object)adaptor.create(string_literal176)
            ;
            adaptor.addChild(root_0, string_literal176_tree);


            L_BR177=(Token)match(input,L_BR,FOLLOW_L_BR_in_catch_stmt1681); 
            L_BR177_tree = 
            (Object)adaptor.create(L_BR177)
            ;
            adaptor.addChild(root_0, L_BR177_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:353:20: ( ( ID ( ASTERISK )* ID ) | '...' )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==ID) ) {
                alt39=1;
            }
            else if ( (LA39_0==167) ) {
                alt39=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }
            switch (alt39) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:353:21: ( ID ( ASTERISK )* ID )
                    {
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:353:21: ( ID ( ASTERISK )* ID )
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:353:22: ID ( ASTERISK )* ID
                    {
                    ID178=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1686); 
                    ID178_tree = 
                    (Object)adaptor.create(ID178)
                    ;
                    adaptor.addChild(root_0, ID178_tree);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:353:26: ( ASTERISK )*
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( (LA38_0==ASTERISK) ) {
                            alt38=1;
                        }


                        switch (alt38) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:353:26: ASTERISK
                    	    {
                    	    ASTERISK179=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_catch_stmt1689); 
                    	    ASTERISK179_tree = 
                    	    (Object)adaptor.create(ASTERISK179)
                    	    ;
                    	    adaptor.addChild(root_0, ASTERISK179_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);


                    ID180=(Token)match(input,ID,FOLLOW_ID_in_catch_stmt1692); 
                    ID180_tree = 
                    (Object)adaptor.create(ID180)
                    ;
                    adaptor.addChild(root_0, ID180_tree);


                    }


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:353:42: '...'
                    {
                    string_literal181=(Token)match(input,167,FOLLOW_167_in_catch_stmt1697); 
                    string_literal181_tree = 
                    (Object)adaptor.create(string_literal181)
                    ;
                    adaptor.addChild(root_0, string_literal181_tree);


                    }
                    break;

            }


            R_BR182=(Token)match(input,R_BR,FOLLOW_R_BR_in_catch_stmt1701); 
            R_BR182_tree = 
            (Object)adaptor.create(R_BR182)
            ;
            adaptor.addChild(root_0, R_BR182_tree);


            pushFollow(FOLLOW_block_in_catch_stmt1704);
            block183=block();

            state._fsp--;

            adaptor.addChild(root_0, block183.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class switch_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:356:1: switch_stmt_wrapper : switch_stmt -> ^( SWITCH switch_stmt ) ;
    public final ObjcmParser.switch_stmt_wrapper_return switch_stmt_wrapper() throws RecognitionException {
        ObjcmParser.switch_stmt_wrapper_return retval = new ObjcmParser.switch_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.switch_stmt_return switch_stmt184 =null;


        RewriteRuleSubtreeStream stream_switch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule switch_stmt");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:357:2: ( switch_stmt -> ^( SWITCH switch_stmt ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:357:4: switch_stmt
            {
            pushFollow(FOLLOW_switch_stmt_in_switch_stmt_wrapper1717);
            switch_stmt184=switch_stmt();

            state._fsp--;

            stream_switch_stmt.add(switch_stmt184.getTree());

            // AST REWRITE
            // elements: switch_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 357:16: -> ^( SWITCH switch_stmt )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:357:19: ^( SWITCH switch_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH, "SWITCH")
                , root_1);

                adaptor.addChild(root_1, stream_switch_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt_wrapper"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:359:1: switch_stmt : 'switch' L_BR switch_expr R_BR switch_body_wrapper ;
    public final ObjcmParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcmParser.switch_stmt_return retval = new ObjcmParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal185=null;
        Token L_BR186=null;
        Token R_BR188=null;
        ObjcmParser.switch_expr_return switch_expr187 =null;

        ObjcmParser.switch_body_wrapper_return switch_body_wrapper189 =null;


        Object string_literal185_tree=null;
        Object L_BR186_tree=null;
        Object R_BR188_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:360:2: ( 'switch' L_BR switch_expr R_BR switch_body_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:360:4: 'switch' L_BR switch_expr R_BR switch_body_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal185=(Token)match(input,201,FOLLOW_201_in_switch_stmt1734); 
            string_literal185_tree = 
            (Object)adaptor.create(string_literal185)
            ;
            adaptor.addChild(root_0, string_literal185_tree);


            L_BR186=(Token)match(input,L_BR,FOLLOW_L_BR_in_switch_stmt1737); 
            L_BR186_tree = 
            (Object)adaptor.create(L_BR186)
            ;
            adaptor.addChild(root_0, L_BR186_tree);


            pushFollow(FOLLOW_switch_expr_in_switch_stmt1740);
            switch_expr187=switch_expr();

            state._fsp--;

            adaptor.addChild(root_0, switch_expr187.getTree());

            R_BR188=(Token)match(input,R_BR,FOLLOW_R_BR_in_switch_stmt1742); 
            R_BR188_tree = 
            (Object)adaptor.create(R_BR188)
            ;
            adaptor.addChild(root_0, R_BR188_tree);


            pushFollow(FOLLOW_switch_body_wrapper_in_switch_stmt1748);
            switch_body_wrapper189=switch_body_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, switch_body_wrapper189.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:364:1: switch_body_wrapper : L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) ;
    public final ObjcmParser.switch_body_wrapper_return switch_body_wrapper() throws RecognitionException {
        ObjcmParser.switch_body_wrapper_return retval = new ObjcmParser.switch_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR190=null;
        Token R_FBR192=null;
        ObjcmParser.switch_body_return switch_body191 =null;


        Object L_FBR190_tree=null;
        Object R_FBR192_tree=null;
        RewriteRuleTokenStream stream_R_FBR=new RewriteRuleTokenStream(adaptor,"token R_FBR");
        RewriteRuleTokenStream stream_L_FBR=new RewriteRuleTokenStream(adaptor,"token L_FBR");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:365:2: ( L_FBR switch_body R_FBR -> ^( SWITCH_BODY switch_body ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:365:4: L_FBR switch_body R_FBR
            {
            L_FBR190=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_switch_body_wrapper1761);  
            stream_L_FBR.add(L_FBR190);


            pushFollow(FOLLOW_switch_body_in_switch_body_wrapper1763);
            switch_body191=switch_body();

            state._fsp--;

            stream_switch_body.add(switch_body191.getTree());

            R_FBR192=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_switch_body_wrapper1765);  
            stream_R_FBR.add(R_FBR192);


            // AST REWRITE
            // elements: switch_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 365:28: -> ^( SWITCH_BODY switch_body )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:365:31: ^( SWITCH_BODY switch_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_BODY, "SWITCH_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_switch_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body_wrapper"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:367:1: switch_body : ( block_internal_full )* ( switch_internal )* ;
    public final ObjcmParser.switch_body_return switch_body() throws RecognitionException {
        ObjcmParser.switch_body_return retval = new ObjcmParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_internal_full_return block_internal_full193 =null;

        ObjcmParser.switch_internal_return switch_internal194 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:368:2: ( ( block_internal_full )* ( switch_internal )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:368:4: ( block_internal_full )* ( switch_internal )*
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:368:4: ( block_internal_full )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==ASTERISK||LA40_0==BREAK_WORD||LA40_0==CONST_PREFIX||LA40_0==ENUM_PREFIX||LA40_0==ID||LA40_0==L_AND||LA40_0==L_BR||LA40_0==L_KBR||LA40_0==L_MINUS||LA40_0==L_MINUS_MINUS||LA40_0==L_NOT||LA40_0==L_PLUS||LA40_0==L_PLUS_PLUS||LA40_0==L_TILDA||LA40_0==NUMBER||LA40_0==SEMICOLON||(LA40_0 >= SINGLE_OP && LA40_0 <= SIZEOF)||LA40_0==STATIC_PREFIX||(LA40_0 >= STRING_LITERAL && LA40_0 <= STRING_LITERAL3)||LA40_0==STRUCT_PREFIX||LA40_0==VOID||LA40_0==169||LA40_0==176||LA40_0==178||(LA40_0 >= 180 && LA40_0 <= 182)||(LA40_0 >= 184 && LA40_0 <= 185)||LA40_0==188||(LA40_0 >= 190 && LA40_0 <= 196)||(LA40_0 >= 198 && LA40_0 <= 201)||(LA40_0 >= 204 && LA40_0 <= 205)) ) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:368:4: block_internal_full
            	    {
            	    pushFollow(FOLLOW_block_internal_full_in_switch_body1784);
            	    block_internal_full193=block_internal_full();

            	    state._fsp--;

            	    adaptor.addChild(root_0, block_internal_full193.getTree());

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:369:3: ( switch_internal )*
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==186||LA41_0==189) ) {
                    alt41=1;
                }


                switch (alt41) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:369:3: switch_internal
            	    {
            	    pushFollow(FOLLOW_switch_internal_in_switch_body1789);
            	    switch_internal194=switch_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, switch_internal194.getTree());

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class switch_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:372:1: switch_expr : classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) ;
    public final ObjcmParser.switch_expr_return switch_expr() throws RecognitionException {
        ObjcmParser.switch_expr_return retval = new ObjcmParser.switch_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp195 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:373:2: ( classical_expr_wrp -> ^( SWITCH_EXPRESSION classical_expr_wrp ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:373:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_switch_expr1802);
            classical_expr_wrp195=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp195.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 373:23: -> ^( SWITCH_EXPRESSION classical_expr_wrp )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:373:26: ^( SWITCH_EXPRESSION classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_EXPRESSION, "SWITCH_EXPRESSION")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_expr"


    public static class switch_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:375:1: switch_internal : ( case_stmt_wrapper | default_stmt_wrapper );
    public final ObjcmParser.switch_internal_return switch_internal() throws RecognitionException {
        ObjcmParser.switch_internal_return retval = new ObjcmParser.switch_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper196 =null;

        ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper197 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:376:2: ( case_stmt_wrapper | default_stmt_wrapper )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==186) ) {
                alt42=1;
            }
            else if ( (LA42_0==189) ) {
                alt42=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }
            switch (alt42) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:376:4: case_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_wrapper_in_switch_internal1819);
                    case_stmt_wrapper196=case_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_stmt_wrapper196.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:377:5: default_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_wrapper_in_switch_internal1825);
                    default_stmt_wrapper197=default_stmt_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_stmt_wrapper197.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_internal"


    public static class case_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:379:1: case_stmt_wrapper : case_stmt -> ^( CASE_STMT case_stmt ) ;
    public final ObjcmParser.case_stmt_wrapper_return case_stmt_wrapper() throws RecognitionException {
        ObjcmParser.case_stmt_wrapper_return retval = new ObjcmParser.case_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_stmt_return case_stmt198 =null;


        RewriteRuleSubtreeStream stream_case_stmt=new RewriteRuleSubtreeStream(adaptor,"rule case_stmt");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:380:2: ( case_stmt -> ^( CASE_STMT case_stmt ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:380:4: case_stmt
            {
            pushFollow(FOLLOW_case_stmt_in_case_stmt_wrapper1834);
            case_stmt198=case_stmt();

            state._fsp--;

            stream_case_stmt.add(case_stmt198.getTree());

            // AST REWRITE
            // elements: case_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 380:14: -> ^( CASE_STMT case_stmt )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:380:17: ^( CASE_STMT case_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_case_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt_wrapper"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:382:1: case_stmt : 'case' case_expr_wrapper COLON ( case_body_wrapper )? ;
    public final ObjcmParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcmParser.case_stmt_return retval = new ObjcmParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal199=null;
        Token COLON201=null;
        ObjcmParser.case_expr_wrapper_return case_expr_wrapper200 =null;

        ObjcmParser.case_body_wrapper_return case_body_wrapper202 =null;


        Object string_literal199_tree=null;
        Object COLON201_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:383:2: ( 'case' case_expr_wrapper COLON ( case_body_wrapper )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:383:4: 'case' case_expr_wrapper COLON ( case_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal199=(Token)match(input,186,FOLLOW_186_in_case_stmt1851); 
            string_literal199_tree = 
            (Object)adaptor.create(string_literal199)
            ;
            adaptor.addChild(root_0, string_literal199_tree);


            pushFollow(FOLLOW_case_expr_wrapper_in_case_stmt1854);
            case_expr_wrapper200=case_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, case_expr_wrapper200.getTree());

            COLON201=(Token)match(input,COLON,FOLLOW_COLON_in_case_stmt1857); 
            COLON201_tree = 
            (Object)adaptor.create(COLON201)
            ;
            adaptor.addChild(root_0, COLON201_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:384:3: ( case_body_wrapper )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==ASTERISK||LA43_0==BREAK_WORD||LA43_0==CONST_PREFIX||LA43_0==ENUM_PREFIX||LA43_0==ID||LA43_0==L_AND||LA43_0==L_BR||(LA43_0 >= L_FBR && LA43_0 <= L_KBR)||LA43_0==L_MINUS||LA43_0==L_MINUS_MINUS||LA43_0==L_NOT||LA43_0==L_PLUS||LA43_0==L_PLUS_PLUS||LA43_0==L_TILDA||LA43_0==NUMBER||LA43_0==SEMICOLON||(LA43_0 >= SINGLE_OP && LA43_0 <= SIZEOF)||LA43_0==STATIC_PREFIX||(LA43_0 >= STRING_LITERAL && LA43_0 <= STRING_LITERAL3)||LA43_0==STRUCT_PREFIX||LA43_0==VOID||LA43_0==169||LA43_0==176||LA43_0==178||(LA43_0 >= 180 && LA43_0 <= 182)||(LA43_0 >= 184 && LA43_0 <= 185)||LA43_0==188||(LA43_0 >= 190 && LA43_0 <= 196)||(LA43_0 >= 198 && LA43_0 <= 201)||(LA43_0 >= 204 && LA43_0 <= 205)) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:384:3: case_body_wrapper
                    {
                    pushFollow(FOLLOW_case_body_wrapper_in_case_stmt1862);
                    case_body_wrapper202=case_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, case_body_wrapper202.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class case_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:387:1: case_body_wrapper : case_body -> ^( CASE_BODY case_body ) ;
    public final ObjcmParser.case_body_wrapper_return case_body_wrapper() throws RecognitionException {
        ObjcmParser.case_body_wrapper_return retval = new ObjcmParser.case_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_body_return case_body203 =null;


        RewriteRuleSubtreeStream stream_case_body=new RewriteRuleSubtreeStream(adaptor,"rule case_body");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:388:2: ( case_body -> ^( CASE_BODY case_body ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:388:4: case_body
            {
            pushFollow(FOLLOW_case_body_in_case_body_wrapper1876);
            case_body203=case_body();

            state._fsp--;

            stream_case_body.add(case_body203.getTree());

            // AST REWRITE
            // elements: case_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 388:14: -> ^( CASE_BODY case_body )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:388:17: ^( CASE_BODY case_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_BODY, "CASE_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_case_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body_wrapper"


    public static class case_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_body"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:390:1: case_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.case_body_return case_body() throws RecognitionException {
        ObjcmParser.case_body_return retval = new ObjcmParser.case_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break204 =null;

        ObjcmParser.block_internal_full_return block_internal_full205 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:391:2: ( block_break | ( block_internal_full )+ )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==L_FBR) ) {
                alt45=1;
            }
            else if ( (LA45_0==ASTERISK||LA45_0==BREAK_WORD||LA45_0==CONST_PREFIX||LA45_0==ENUM_PREFIX||LA45_0==ID||LA45_0==L_AND||LA45_0==L_BR||LA45_0==L_KBR||LA45_0==L_MINUS||LA45_0==L_MINUS_MINUS||LA45_0==L_NOT||LA45_0==L_PLUS||LA45_0==L_PLUS_PLUS||LA45_0==L_TILDA||LA45_0==NUMBER||LA45_0==SEMICOLON||(LA45_0 >= SINGLE_OP && LA45_0 <= SIZEOF)||LA45_0==STATIC_PREFIX||(LA45_0 >= STRING_LITERAL && LA45_0 <= STRING_LITERAL3)||LA45_0==STRUCT_PREFIX||LA45_0==VOID||LA45_0==169||LA45_0==176||LA45_0==178||(LA45_0 >= 180 && LA45_0 <= 182)||(LA45_0 >= 184 && LA45_0 <= 185)||LA45_0==188||(LA45_0 >= 190 && LA45_0 <= 196)||(LA45_0 >= 198 && LA45_0 <= 201)||(LA45_0 >= 204 && LA45_0 <= 205)) ) {
                alt45=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }
            switch (alt45) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:391:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_case_body1895);
                    block_break204=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break204.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:392:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:392:5: ( block_internal_full )+
                    int cnt44=0;
                    loop44:
                    do {
                        int alt44=2;
                        int LA44_0 = input.LA(1);

                        if ( (LA44_0==ASTERISK||LA44_0==BREAK_WORD||LA44_0==CONST_PREFIX||LA44_0==ENUM_PREFIX||LA44_0==ID||LA44_0==L_AND||LA44_0==L_BR||LA44_0==L_KBR||LA44_0==L_MINUS||LA44_0==L_MINUS_MINUS||LA44_0==L_NOT||LA44_0==L_PLUS||LA44_0==L_PLUS_PLUS||LA44_0==L_TILDA||LA44_0==NUMBER||LA44_0==SEMICOLON||(LA44_0 >= SINGLE_OP && LA44_0 <= SIZEOF)||LA44_0==STATIC_PREFIX||(LA44_0 >= STRING_LITERAL && LA44_0 <= STRING_LITERAL3)||LA44_0==STRUCT_PREFIX||LA44_0==VOID||LA44_0==169||LA44_0==176||LA44_0==178||(LA44_0 >= 180 && LA44_0 <= 182)||(LA44_0 >= 184 && LA44_0 <= 185)||LA44_0==188||(LA44_0 >= 190 && LA44_0 <= 196)||(LA44_0 >= 198 && LA44_0 <= 201)||(LA44_0 >= 204 && LA44_0 <= 205)) ) {
                            alt44=1;
                        }


                        switch (alt44) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:392:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_case_body1902);
                    	    block_internal_full205=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full205.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt44 >= 1 ) break loop44;
                                EarlyExitException eee =
                                    new EarlyExitException(44, input);
                                throw eee;
                        }
                        cnt44++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_body"


    public static class case_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:395:1: case_expr_wrapper : case_expr -> ^( CASE_EXPR case_expr ) ;
    public final ObjcmParser.case_expr_wrapper_return case_expr_wrapper() throws RecognitionException {
        ObjcmParser.case_expr_wrapper_return retval = new ObjcmParser.case_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.case_expr_return case_expr206 =null;


        RewriteRuleSubtreeStream stream_case_expr=new RewriteRuleSubtreeStream(adaptor,"rule case_expr");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:396:2: ( case_expr -> ^( CASE_EXPR case_expr ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:396:4: case_expr
            {
            pushFollow(FOLLOW_case_expr_in_case_expr_wrapper1918);
            case_expr206=case_expr();

            state._fsp--;

            stream_case_expr.add(case_expr206.getTree());

            // AST REWRITE
            // elements: case_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 396:14: -> ^( CASE_EXPR case_expr )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:396:17: ^( CASE_EXPR case_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_EXPR, "CASE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_case_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr_wrapper"


    public static class case_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:398:1: case_expr : ( const_expr | ID );
    public final ObjcmParser.case_expr_return case_expr() throws RecognitionException {
        ObjcmParser.case_expr_return retval = new ObjcmParser.case_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID208=null;
        ObjcmParser.const_expr_return const_expr207 =null;


        Object ID208_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:399:2: ( const_expr | ID )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==NUMBER||(LA46_0 >= STRING_LITERAL && LA46_0 <= STRING_LITERAL3)||LA46_0==182||LA46_0==198) ) {
                alt46=1;
            }
            else if ( (LA46_0==ID) ) {
                alt46=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:399:4: const_expr
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_in_case_expr1940);
                    const_expr207=const_expr();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr207.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:400:5: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID208=(Token)match(input,ID,FOLLOW_ID_in_case_expr1947); 
                    ID208_tree = 
                    (Object)adaptor.create(ID208)
                    ;
                    adaptor.addChild(root_0, ID208_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_expr"


    public static class block_break_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_break"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:402:1: block_break : block_case ( single_operators )? ;
    public final ObjcmParser.block_break_return block_break() throws RecognitionException {
        ObjcmParser.block_break_return retval = new ObjcmParser.block_break_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_case_return block_case209 =null;

        ObjcmParser.single_operators_return single_operators210 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:403:2: ( block_case ( single_operators )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:403:4: block_case ( single_operators )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_block_case_in_block_break1958);
            block_case209=block_case();

            state._fsp--;

            adaptor.addChild(root_0, block_case209.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:403:15: ( single_operators )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==BREAK_WORD||LA47_0==SINGLE_OP) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:403:15: single_operators
                    {
                    pushFollow(FOLLOW_single_operators_in_block_break1960);
                    single_operators210=single_operators();

                    state._fsp--;

                    adaptor.addChild(root_0, single_operators210.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_break"


    public static class default_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:406:1: default_stmt_wrapper : default_stmt -> ^( DEFAULT_STMT default_stmt ) ;
    public final ObjcmParser.default_stmt_wrapper_return default_stmt_wrapper() throws RecognitionException {
        ObjcmParser.default_stmt_wrapper_return retval = new ObjcmParser.default_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_stmt_return default_stmt211 =null;


        RewriteRuleSubtreeStream stream_default_stmt=new RewriteRuleSubtreeStream(adaptor,"rule default_stmt");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:407:2: ( default_stmt -> ^( DEFAULT_STMT default_stmt ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:407:4: default_stmt
            {
            pushFollow(FOLLOW_default_stmt_in_default_stmt_wrapper1972);
            default_stmt211=default_stmt();

            state._fsp--;

            stream_default_stmt.add(default_stmt211.getTree());

            // AST REWRITE
            // elements: default_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 407:17: -> ^( DEFAULT_STMT default_stmt )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:407:20: ^( DEFAULT_STMT default_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_default_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt_wrapper"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:409:1: default_stmt : 'default' COLON ( default_body_wrapper )? ;
    public final ObjcmParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcmParser.default_stmt_return retval = new ObjcmParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal212=null;
        Token COLON213=null;
        ObjcmParser.default_body_wrapper_return default_body_wrapper214 =null;


        Object string_literal212_tree=null;
        Object COLON213_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:410:2: ( 'default' COLON ( default_body_wrapper )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:410:4: 'default' COLON ( default_body_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal212=(Token)match(input,189,FOLLOW_189_in_default_stmt1989); 
            string_literal212_tree = 
            (Object)adaptor.create(string_literal212)
            ;
            adaptor.addChild(root_0, string_literal212_tree);


            COLON213=(Token)match(input,COLON,FOLLOW_COLON_in_default_stmt1992); 
            COLON213_tree = 
            (Object)adaptor.create(COLON213)
            ;
            adaptor.addChild(root_0, COLON213_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:411:3: ( default_body_wrapper )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==ASTERISK||LA48_0==BREAK_WORD||LA48_0==CONST_PREFIX||LA48_0==ENUM_PREFIX||LA48_0==ID||LA48_0==L_AND||LA48_0==L_BR||(LA48_0 >= L_FBR && LA48_0 <= L_KBR)||LA48_0==L_MINUS||LA48_0==L_MINUS_MINUS||LA48_0==L_NOT||LA48_0==L_PLUS||LA48_0==L_PLUS_PLUS||LA48_0==L_TILDA||LA48_0==NUMBER||LA48_0==SEMICOLON||(LA48_0 >= SINGLE_OP && LA48_0 <= SIZEOF)||LA48_0==STATIC_PREFIX||(LA48_0 >= STRING_LITERAL && LA48_0 <= STRING_LITERAL3)||LA48_0==STRUCT_PREFIX||LA48_0==VOID||LA48_0==169||LA48_0==176||LA48_0==178||(LA48_0 >= 180 && LA48_0 <= 182)||(LA48_0 >= 184 && LA48_0 <= 185)||LA48_0==188||(LA48_0 >= 190 && LA48_0 <= 196)||(LA48_0 >= 198 && LA48_0 <= 201)||(LA48_0 >= 204 && LA48_0 <= 205)) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:411:3: default_body_wrapper
                    {
                    pushFollow(FOLLOW_default_body_wrapper_in_default_stmt1997);
                    default_body_wrapper214=default_body_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, default_body_wrapper214.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class default_body_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:414:1: default_body_wrapper : default_body -> ^( DEFAULT_BODY default_body ) ;
    public final ObjcmParser.default_body_wrapper_return default_body_wrapper() throws RecognitionException {
        ObjcmParser.default_body_wrapper_return retval = new ObjcmParser.default_body_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.default_body_return default_body215 =null;


        RewriteRuleSubtreeStream stream_default_body=new RewriteRuleSubtreeStream(adaptor,"rule default_body");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:415:2: ( default_body -> ^( DEFAULT_BODY default_body ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:415:4: default_body
            {
            pushFollow(FOLLOW_default_body_in_default_body_wrapper2010);
            default_body215=default_body();

            state._fsp--;

            stream_default_body.add(default_body215.getTree());

            // AST REWRITE
            // elements: default_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 415:17: -> ^( DEFAULT_BODY default_body )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:415:20: ^( DEFAULT_BODY default_body )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_BODY, "DEFAULT_BODY")
                , root_1);

                adaptor.addChild(root_1, stream_default_body.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body_wrapper"


    public static class default_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_body"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:418:1: default_body : ( block_break | ( block_internal_full )+ );
    public final ObjcmParser.default_body_return default_body() throws RecognitionException {
        ObjcmParser.default_body_return retval = new ObjcmParser.default_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_break_return block_break216 =null;

        ObjcmParser.block_internal_full_return block_internal_full217 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:419:2: ( block_break | ( block_internal_full )+ )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==L_FBR) ) {
                alt50=1;
            }
            else if ( (LA50_0==ASTERISK||LA50_0==BREAK_WORD||LA50_0==CONST_PREFIX||LA50_0==ENUM_PREFIX||LA50_0==ID||LA50_0==L_AND||LA50_0==L_BR||LA50_0==L_KBR||LA50_0==L_MINUS||LA50_0==L_MINUS_MINUS||LA50_0==L_NOT||LA50_0==L_PLUS||LA50_0==L_PLUS_PLUS||LA50_0==L_TILDA||LA50_0==NUMBER||LA50_0==SEMICOLON||(LA50_0 >= SINGLE_OP && LA50_0 <= SIZEOF)||LA50_0==STATIC_PREFIX||(LA50_0 >= STRING_LITERAL && LA50_0 <= STRING_LITERAL3)||LA50_0==STRUCT_PREFIX||LA50_0==VOID||LA50_0==169||LA50_0==176||LA50_0==178||(LA50_0 >= 180 && LA50_0 <= 182)||(LA50_0 >= 184 && LA50_0 <= 185)||LA50_0==188||(LA50_0 >= 190 && LA50_0 <= 196)||(LA50_0 >= 198 && LA50_0 <= 201)||(LA50_0 >= 204 && LA50_0 <= 205)) ) {
                alt50=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;

            }
            switch (alt50) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:419:4: block_break
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_break_in_default_body2030);
                    block_break216=block_break();

                    state._fsp--;

                    adaptor.addChild(root_0, block_break216.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:420:5: ( block_internal_full )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:420:5: ( block_internal_full )+
                    int cnt49=0;
                    loop49:
                    do {
                        int alt49=2;
                        int LA49_0 = input.LA(1);

                        if ( (LA49_0==ASTERISK||LA49_0==BREAK_WORD||LA49_0==CONST_PREFIX||LA49_0==ENUM_PREFIX||LA49_0==ID||LA49_0==L_AND||LA49_0==L_BR||LA49_0==L_KBR||LA49_0==L_MINUS||LA49_0==L_MINUS_MINUS||LA49_0==L_NOT||LA49_0==L_PLUS||LA49_0==L_PLUS_PLUS||LA49_0==L_TILDA||LA49_0==NUMBER||LA49_0==SEMICOLON||(LA49_0 >= SINGLE_OP && LA49_0 <= SIZEOF)||LA49_0==STATIC_PREFIX||(LA49_0 >= STRING_LITERAL && LA49_0 <= STRING_LITERAL3)||LA49_0==STRUCT_PREFIX||LA49_0==VOID||LA49_0==169||LA49_0==176||LA49_0==178||(LA49_0 >= 180 && LA49_0 <= 182)||(LA49_0 >= 184 && LA49_0 <= 185)||LA49_0==188||(LA49_0 >= 190 && LA49_0 <= 196)||(LA49_0 >= 198 && LA49_0 <= 201)||(LA49_0 >= 204 && LA49_0 <= 205)) ) {
                            alt49=1;
                        }


                        switch (alt49) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:420:5: block_internal_full
                    	    {
                    	    pushFollow(FOLLOW_block_internal_full_in_default_body2036);
                    	    block_internal_full217=block_internal_full();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, block_internal_full217.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt49 >= 1 ) break loop49;
                                EarlyExitException eee =
                                    new EarlyExitException(49, input);
                                throw eee;
                        }
                        cnt49++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_body"


    public static class single_operators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_operators"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:423:1: single_operators : ( SINGLE_OP | break_wrapper );
    public final ObjcmParser.single_operators_return single_operators() throws RecognitionException {
        ObjcmParser.single_operators_return retval = new ObjcmParser.single_operators_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_OP218=null;
        ObjcmParser.break_wrapper_return break_wrapper219 =null;


        Object SINGLE_OP218_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:424:2: ( SINGLE_OP | break_wrapper )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==SINGLE_OP) ) {
                alt51=1;
            }
            else if ( (LA51_0==BREAK_WORD) ) {
                alt51=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;

            }
            switch (alt51) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:424:4: SINGLE_OP
                    {
                    root_0 = (Object)adaptor.nil();


                    SINGLE_OP218=(Token)match(input,SINGLE_OP,FOLLOW_SINGLE_OP_in_single_operators2051); 
                    SINGLE_OP218_tree = 
                    (Object)adaptor.create(SINGLE_OP218)
                    ;
                    adaptor.addChild(root_0, SINGLE_OP218_tree);


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:425:5: break_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_wrapper_in_single_operators2058);
                    break_wrapper219=break_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, break_wrapper219.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_operators"


    public static class break_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:428:1: break_wrapper : break_stmt -> ^( BREAK break_stmt ) ;
    public final ObjcmParser.break_wrapper_return break_wrapper() throws RecognitionException {
        ObjcmParser.break_wrapper_return retval = new ObjcmParser.break_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.break_stmt_return break_stmt220 =null;


        RewriteRuleSubtreeStream stream_break_stmt=new RewriteRuleSubtreeStream(adaptor,"rule break_stmt");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:429:2: ( break_stmt -> ^( BREAK break_stmt ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:429:4: break_stmt
            {
            pushFollow(FOLLOW_break_stmt_in_break_wrapper2070);
            break_stmt220=break_stmt();

            state._fsp--;

            stream_break_stmt.add(break_stmt220.getTree());

            // AST REWRITE
            // elements: break_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 429:15: -> ^( BREAK break_stmt )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:429:18: ^( BREAK break_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK, "BREAK")
                , root_1);

                adaptor.addChild(root_1, stream_break_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_wrapper"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:431:1: break_stmt : BREAK_WORD SEMICOLON ;
    public final ObjcmParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcmParser.break_stmt_return retval = new ObjcmParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token BREAK_WORD221=null;
        Token SEMICOLON222=null;

        Object BREAK_WORD221_tree=null;
        Object SEMICOLON222_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:432:2: ( BREAK_WORD SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:432:4: BREAK_WORD SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            BREAK_WORD221=(Token)match(input,BREAK_WORD,FOLLOW_BREAK_WORD_in_break_stmt2088); 
            BREAK_WORD221_tree = 
            (Object)adaptor.create(BREAK_WORD221)
            ;
            adaptor.addChild(root_0, BREAK_WORD221_tree);


            SEMICOLON222=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_break_stmt2091); 
            SEMICOLON222_tree = 
            (Object)adaptor.create(SEMICOLON222)
            ;
            adaptor.addChild(root_0, SEMICOLON222_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:434:1: do_stmt : 'do' if_stmt_block 'while' L_BR expression R_BR ;
    public final ObjcmParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcmParser.do_stmt_return retval = new ObjcmParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal223=null;
        Token string_literal225=null;
        Token L_BR226=null;
        Token R_BR228=null;
        ObjcmParser.if_stmt_block_return if_stmt_block224 =null;

        ObjcmParser.expression_return expression227 =null;


        Object string_literal223_tree=null;
        Object string_literal225_tree=null;
        Object L_BR226_tree=null;
        Object R_BR228_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:434:9: ( 'do' if_stmt_block 'while' L_BR expression R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:434:11: 'do' if_stmt_block 'while' L_BR expression R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal223=(Token)match(input,190,FOLLOW_190_in_do_stmt2101); 
            string_literal223_tree = 
            (Object)adaptor.create(string_literal223)
            ;
            adaptor.addChild(root_0, string_literal223_tree);


            pushFollow(FOLLOW_if_stmt_block_in_do_stmt2104);
            if_stmt_block224=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block224.getTree());

            string_literal225=(Token)match(input,205,FOLLOW_205_in_do_stmt2107); 
            string_literal225_tree = 
            (Object)adaptor.create(string_literal225)
            ;
            adaptor.addChild(root_0, string_literal225_tree);


            L_BR226=(Token)match(input,L_BR,FOLLOW_L_BR_in_do_stmt2110); 
            L_BR226_tree = 
            (Object)adaptor.create(L_BR226)
            ;
            adaptor.addChild(root_0, L_BR226_tree);


            pushFollow(FOLLOW_expression_in_do_stmt2113);
            expression227=expression();

            state._fsp--;

            adaptor.addChild(root_0, expression227.getTree());

            R_BR228=(Token)match(input,R_BR,FOLLOW_R_BR_in_do_stmt2115); 
            R_BR228_tree = 
            (Object)adaptor.create(R_BR228)
            ;
            adaptor.addChild(root_0, R_BR228_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:436:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcmParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcmParser.while_stmt_wrapper_return retval = new ObjcmParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.while_stmt_return while_stmt229 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:437:2: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:437:4: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper2124);
            while_stmt229=while_stmt();

            state._fsp--;

            stream_while_stmt.add(while_stmt229.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 437:15: -> ^( WHILE_STMT while_stmt )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:437:18: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:440:1: while_stmt : 'while' L_BR while_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcmParser.while_stmt_return retval = new ObjcmParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal230=null;
        Token L_BR231=null;
        Token R_BR233=null;
        ObjcmParser.while_expr_return while_expr232 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper234 =null;


        Object string_literal230_tree=null;
        Object L_BR231_tree=null;
        Object R_BR233_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:441:2: ( 'while' L_BR while_expr R_BR if_stmt_block_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:441:4: 'while' L_BR while_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal230=(Token)match(input,205,FOLLOW_205_in_while_stmt2143); 
            string_literal230_tree = 
            (Object)adaptor.create(string_literal230)
            ;
            adaptor.addChild(root_0, string_literal230_tree);


            L_BR231=(Token)match(input,L_BR,FOLLOW_L_BR_in_while_stmt2146); 
            L_BR231_tree = 
            (Object)adaptor.create(L_BR231)
            ;
            adaptor.addChild(root_0, L_BR231_tree);


            pushFollow(FOLLOW_while_expr_in_while_stmt2149);
            while_expr232=while_expr();

            state._fsp--;

            adaptor.addChild(root_0, while_expr232.getTree());

            R_BR233=(Token)match(input,R_BR,FOLLOW_R_BR_in_while_stmt2151); 
            R_BR233_tree = 
            (Object)adaptor.create(R_BR233)
            ;
            adaptor.addChild(root_0, R_BR233_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_while_stmt2154);
            if_stmt_block_wrapper234=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper234.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class while_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:443:1: while_expr : classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.while_expr_return while_expr() throws RecognitionException {
        ObjcmParser.while_expr_return retval = new ObjcmParser.while_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp235 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:444:2: ( classical_expr_wrp -> ^( WHILE_EXPR classical_expr_wrp ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:444:5: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_while_expr2167);
            classical_expr_wrp235=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp235.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 444:24: -> ^( WHILE_EXPR classical_expr_wrp )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:444:27: ^( WHILE_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_EXPR, "WHILE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_expr"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:446:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcmParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcmParser.for_stmt_wrapper_return retval = new ObjcmParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.for_stmt_return for_stmt236 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:447:2: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:447:4: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper2186);
            for_stmt236=for_stmt();

            state._fsp--;

            stream_for_stmt.add(for_stmt236.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 447:13: -> ^( FOR_STMT for_stmt )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:447:16: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:449:1: for_stmt : 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block ;
    public final ObjcmParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcmParser.for_stmt_return retval = new ObjcmParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal237=null;
        Token L_BR238=null;
        Token R_BR240=null;
        ObjcmParser.for_stmt_expr_wrapper_return for_stmt_expr_wrapper239 =null;

        ObjcmParser.if_stmt_block_return if_stmt_block241 =null;


        Object string_literal237_tree=null;
        Object L_BR238_tree=null;
        Object R_BR240_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:449:9: ( 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:449:11: 'for' L_BR for_stmt_expr_wrapper R_BR if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal237=(Token)match(input,193,FOLLOW_193_in_for_stmt2203); 
            string_literal237_tree = 
            (Object)adaptor.create(string_literal237)
            ;
            adaptor.addChild(root_0, string_literal237_tree);


            L_BR238=(Token)match(input,L_BR,FOLLOW_L_BR_in_for_stmt2206); 
            L_BR238_tree = 
            (Object)adaptor.create(L_BR238)
            ;
            adaptor.addChild(root_0, L_BR238_tree);


            pushFollow(FOLLOW_for_stmt_expr_wrapper_in_for_stmt2209);
            for_stmt_expr_wrapper239=for_stmt_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, for_stmt_expr_wrapper239.getTree());

            R_BR240=(Token)match(input,R_BR,FOLLOW_R_BR_in_for_stmt2211); 
            R_BR240_tree = 
            (Object)adaptor.create(R_BR240)
            ;
            adaptor.addChild(root_0, R_BR240_tree);


            pushFollow(FOLLOW_if_stmt_block_in_for_stmt2214);
            if_stmt_block241=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block241.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:452:1: for_stmt_expr_wrapper : for_stmt_expr -> ^( FOR_STMT_EXPR for_stmt_expr ) ;
    public final ObjcmParser.for_stmt_expr_wrapper_return for_stmt_expr_wrapper() throws RecognitionException {
        ObjcmParser.for_stmt_expr_wrapper_return retval = new ObjcmParser.for_stmt_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.for_stmt_expr_return for_stmt_expr242 =null;


        RewriteRuleSubtreeStream stream_for_stmt_expr=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt_expr");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:453:2: ( for_stmt_expr -> ^( FOR_STMT_EXPR for_stmt_expr ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:453:4: for_stmt_expr
            {
            pushFollow(FOLLOW_for_stmt_expr_in_for_stmt_expr_wrapper2226);
            for_stmt_expr242=for_stmt_expr();

            state._fsp--;

            stream_for_stmt_expr.add(for_stmt_expr242.getTree());

            // AST REWRITE
            // elements: for_stmt_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 453:18: -> ^( FOR_STMT_EXPR for_stmt_expr )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:453:21: ^( FOR_STMT_EXPR for_stmt_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT_EXPR, "FOR_STMT_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr_wrapper"


    public static class for_stmt_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:455:1: for_stmt_expr : ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 );
    public final ObjcmParser.for_stmt_expr_return for_stmt_expr() throws RecognitionException {
        ObjcmParser.for_stmt_expr_return retval = new ObjcmParser.for_stmt_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_wrapper_return full_expr_wrapper243 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1244 =null;

        ObjcmParser.full_expr2_return full_expr2245 =null;

        ObjcmParser.for_stmt_int1_return for_stmt_int1246 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2247 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2248 =null;

        ObjcmParser.for_stmt_int2_return for_stmt_int2249 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:456:2: ( full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 ) | for_stmt_int2 )
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==ASTERISK||LA54_0==ID||LA54_0==L_AND||LA54_0==L_BR||LA54_0==L_KBR||LA54_0==L_MINUS||LA54_0==L_MINUS_MINUS||LA54_0==L_NOT||LA54_0==L_PLUS||LA54_0==L_PLUS_PLUS||LA54_0==L_TILDA||LA54_0==NUMBER||LA54_0==SIZEOF||(LA54_0 >= STRING_LITERAL && LA54_0 <= STRING_LITERAL3)||LA54_0==169||LA54_0==176||LA54_0==178||LA54_0==182||LA54_0==185||LA54_0==188||LA54_0==196||(LA54_0 >= 198 && LA54_0 <= 199)||LA54_0==204) ) {
                alt54=1;
            }
            else if ( (LA54_0==SEMICOLON) ) {
                alt54=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }
            switch (alt54) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:456:4: full_expr_wrapper ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_full_expr_wrapper_in_for_stmt_expr2245);
                    full_expr_wrapper243=full_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, full_expr_wrapper243.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:456:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )
                    int alt53=3;
                    alt53 = dfa53.predict(input);
                    switch (alt53) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:456:23: for_stmt_int1
                            {
                            pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2248);
                            for_stmt_int1244=for_stmt_int1();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int1244.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:456:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            {
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:456:39: ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) )
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:456:40: full_expr2 ( for_stmt_int1 | for_stmt_int2 )
                            {
                            pushFollow(FOLLOW_full_expr2_in_for_stmt_expr2253);
                            full_expr2245=full_expr2();

                            state._fsp--;

                            adaptor.addChild(root_0, full_expr2245.getTree());

                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:456:51: ( for_stmt_int1 | for_stmt_int2 )
                            int alt52=2;
                            int LA52_0 = input.LA(1);

                            if ( (LA52_0==196) ) {
                                alt52=1;
                            }
                            else if ( (LA52_0==SEMICOLON) ) {
                                alt52=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("", 52, 0, input);

                                throw nvae;

                            }
                            switch (alt52) {
                                case 1 :
                                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:456:52: for_stmt_int1
                                    {
                                    pushFollow(FOLLOW_for_stmt_int1_in_for_stmt_expr2256);
                                    for_stmt_int1246=for_stmt_int1();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int1246.getTree());

                                    }
                                    break;
                                case 2 :
                                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:456:68: for_stmt_int2
                                    {
                                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2260);
                                    for_stmt_int2247=for_stmt_int2();

                                    state._fsp--;

                                    adaptor.addChild(root_0, for_stmt_int2247.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:456:86: for_stmt_int2
                            {
                            pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2266);
                            for_stmt_int2248=for_stmt_int2();

                            state._fsp--;

                            adaptor.addChild(root_0, for_stmt_int2248.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:457:4: for_stmt_int2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_int2_in_for_stmt_expr2272);
                    for_stmt_int2249=for_stmt_int2();

                    state._fsp--;

                    adaptor.addChild(root_0, for_stmt_int2249.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_expr"


    public static class for_stmt_int1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int1"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:460:1: for_stmt_int1 : 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) ;
    public final ObjcmParser.for_stmt_int1_return for_stmt_int1() throws RecognitionException {
        ObjcmParser.for_stmt_int1_return retval = new ObjcmParser.for_stmt_int1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal250=null;
        ObjcmParser.object_wrapped2_return object_wrapped2251 =null;


        Object string_literal250_tree=null;
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleSubtreeStream stream_object_wrapped2=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapped2");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:461:2: ( 'in' object_wrapped2 -> ^( FOR_IN_STMT object_wrapped2 ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:461:4: 'in' object_wrapped2
            {
            string_literal250=(Token)match(input,196,FOLLOW_196_in_for_stmt_int12287);  
            stream_196.add(string_literal250);


            pushFollow(FOLLOW_object_wrapped2_in_for_stmt_int12289);
            object_wrapped2251=object_wrapped2();

            state._fsp--;

            stream_object_wrapped2.add(object_wrapped2251.getTree());

            // AST REWRITE
            // elements: object_wrapped2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 461:26: -> ^( FOR_IN_STMT object_wrapped2 )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:461:29: ^( FOR_IN_STMT object_wrapped2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapped2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int1"


    public static class for_stmt_int2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_int2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:463:1: for_stmt_int2 : SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? ;
    public final ObjcmParser.for_stmt_int2_return for_stmt_int2() throws RecognitionException {
        ObjcmParser.for_stmt_int2_return retval = new ObjcmParser.for_stmt_int2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON252=null;
        Token SEMICOLON254=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp253 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp255 =null;


        Object SEMICOLON252_tree=null;
        Object SEMICOLON254_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:464:2: ( SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:464:4: SEMICOLON ( classical_expr_wrp )? SEMICOLON ( classical_expr_wrp )?
            {
            root_0 = (Object)adaptor.nil();


            SEMICOLON252=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22309); 
            SEMICOLON252_tree = 
            (Object)adaptor.create(SEMICOLON252)
            ;
            adaptor.addChild(root_0, SEMICOLON252_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:464:14: ( classical_expr_wrp )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==ASTERISK||LA55_0==ID||LA55_0==L_AND||LA55_0==L_BR||LA55_0==L_KBR||LA55_0==L_MINUS||LA55_0==L_MINUS_MINUS||LA55_0==L_NOT||LA55_0==L_PLUS||LA55_0==L_PLUS_PLUS||LA55_0==L_TILDA||LA55_0==NUMBER||LA55_0==SIZEOF||(LA55_0 >= STRING_LITERAL && LA55_0 <= STRING_LITERAL3)||LA55_0==169||LA55_0==176||LA55_0==178||LA55_0==182||LA55_0==185||LA55_0==188||LA55_0==196||(LA55_0 >= 198 && LA55_0 <= 199)||LA55_0==204) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:464:14: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22311);
                    classical_expr_wrp253=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp253.getTree());

                    }
                    break;

            }


            SEMICOLON254=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_for_stmt_int22314); 
            SEMICOLON254_tree = 
            (Object)adaptor.create(SEMICOLON254)
            ;
            adaptor.addChild(root_0, SEMICOLON254_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:464:44: ( classical_expr_wrp )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==ASTERISK||LA56_0==ID||LA56_0==L_AND||LA56_0==L_BR||LA56_0==L_KBR||LA56_0==L_MINUS||LA56_0==L_MINUS_MINUS||LA56_0==L_NOT||LA56_0==L_PLUS||LA56_0==L_PLUS_PLUS||LA56_0==L_TILDA||LA56_0==NUMBER||LA56_0==SIZEOF||(LA56_0 >= STRING_LITERAL && LA56_0 <= STRING_LITERAL3)||LA56_0==169||LA56_0==176||LA56_0==178||LA56_0==182||LA56_0==185||LA56_0==188||LA56_0==196||(LA56_0 >= 198 && LA56_0 <= 199)||LA56_0==204) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:464:44: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_for_stmt_int22316);
                    classical_expr_wrp255=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp255.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_int2"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:467:1: return_stmt : 'return' ( expression )? SEMICOLON -> ^( RETURN_STMT ( expression )? SEMICOLON ) ;
    public final ObjcmParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcmParser.return_stmt_return retval = new ObjcmParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal256=null;
        Token SEMICOLON258=null;
        ObjcmParser.expression_return expression257 =null;


        Object string_literal256_tree=null;
        Object SEMICOLON258_tree=null;
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:468:2: ( 'return' ( expression )? SEMICOLON -> ^( RETURN_STMT ( expression )? SEMICOLON ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:468:4: 'return' ( expression )? SEMICOLON
            {
            string_literal256=(Token)match(input,200,FOLLOW_200_in_return_stmt2329);  
            stream_200.add(string_literal256);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:468:13: ( expression )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==ASTERISK||LA57_0==ID||LA57_0==L_AND||LA57_0==L_BR||LA57_0==L_KBR||LA57_0==L_MINUS||LA57_0==L_MINUS_MINUS||LA57_0==L_NOT||LA57_0==L_PLUS||LA57_0==L_PLUS_PLUS||LA57_0==L_TILDA||LA57_0==NUMBER||LA57_0==SIZEOF||(LA57_0 >= STRING_LITERAL && LA57_0 <= STRING_LITERAL3)||LA57_0==169||LA57_0==176||LA57_0==178||LA57_0==182||LA57_0==185||LA57_0==188||LA57_0==196||(LA57_0 >= 198 && LA57_0 <= 199)||LA57_0==204) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:468:13: expression
                    {
                    pushFollow(FOLLOW_expression_in_return_stmt2331);
                    expression257=expression();

                    state._fsp--;

                    stream_expression.add(expression257.getTree());

                    }
                    break;

            }


            SEMICOLON258=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_return_stmt2334);  
            stream_SEMICOLON.add(SEMICOLON258);


            // AST REWRITE
            // elements: SEMICOLON, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 468:35: -> ^( RETURN_STMT ( expression )? SEMICOLON )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:468:38: ^( RETURN_STMT ( expression )? SEMICOLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:468:52: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, 
                stream_SEMICOLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class if_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:470:1: if_stmt_wrapper : if_stmt -> ^( IF_STMT if_stmt ) ;
    public final ObjcmParser.if_stmt_wrapper_return if_stmt_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_wrapper_return retval = new ObjcmParser.if_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_return if_stmt259 =null;


        RewriteRuleSubtreeStream stream_if_stmt=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:471:2: ( if_stmt -> ^( IF_STMT if_stmt ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:471:4: if_stmt
            {
            pushFollow(FOLLOW_if_stmt_in_if_stmt_wrapper2355);
            if_stmt259=if_stmt();

            state._fsp--;

            stream_if_stmt.add(if_stmt259.getTree());

            // AST REWRITE
            // elements: if_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 471:12: -> ^( IF_STMT if_stmt )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:471:15: ^( IF_STMT if_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_wrapper"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:473:1: if_stmt : 'if' L_BR if_expr R_BR if_stmt_block_wrapper ;
    public final ObjcmParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcmParser.if_stmt_return retval = new ObjcmParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal260=null;
        Token L_BR261=null;
        Token R_BR263=null;
        ObjcmParser.if_expr_return if_expr262 =null;

        ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper264 =null;


        Object string_literal260_tree=null;
        Object L_BR261_tree=null;
        Object R_BR263_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:473:9: ( 'if' L_BR if_expr R_BR if_stmt_block_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:473:11: 'if' L_BR if_expr R_BR if_stmt_block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal260=(Token)match(input,195,FOLLOW_195_in_if_stmt2371); 
            string_literal260_tree = 
            (Object)adaptor.create(string_literal260)
            ;
            adaptor.addChild(root_0, string_literal260_tree);


            L_BR261=(Token)match(input,L_BR,FOLLOW_L_BR_in_if_stmt2374); 
            L_BR261_tree = 
            (Object)adaptor.create(L_BR261)
            ;
            adaptor.addChild(root_0, L_BR261_tree);


            pushFollow(FOLLOW_if_expr_in_if_stmt2377);
            if_expr262=if_expr();

            state._fsp--;

            adaptor.addChild(root_0, if_expr262.getTree());

            R_BR263=(Token)match(input,R_BR,FOLLOW_R_BR_in_if_stmt2379); 
            R_BR263_tree = 
            (Object)adaptor.create(R_BR263)
            ;
            adaptor.addChild(root_0, R_BR263_tree);


            pushFollow(FOLLOW_if_stmt_block_wrapper_in_if_stmt2382);
            if_stmt_block_wrapper264=if_stmt_block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block_wrapper264.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class if_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:476:1: if_expr : classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) ;
    public final ObjcmParser.if_expr_return if_expr() throws RecognitionException {
        ObjcmParser.if_expr_return retval = new ObjcmParser.if_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp265 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:476:9: ( classical_expr_wrp -> ^( IF_EXPR classical_expr_wrp ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:476:12: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_if_expr2395);
            classical_expr_wrp265=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp265.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 476:31: -> ^( IF_EXPR classical_expr_wrp )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:476:34: ^( IF_EXPR classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_EXPR, "IF_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_expr"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:478:1: else_stmt : 'else' if_stmt_block ;
    public final ObjcmParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcmParser.else_stmt_return retval = new ObjcmParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal266=null;
        ObjcmParser.if_stmt_block_return if_stmt_block267 =null;


        Object string_literal266_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:479:2: ( 'else' if_stmt_block )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:479:4: 'else' if_stmt_block
            {
            root_0 = (Object)adaptor.nil();


            string_literal266=(Token)match(input,191,FOLLOW_191_in_else_stmt2414); 
            string_literal266_tree = 
            (Object)adaptor.create(string_literal266)
            ;
            adaptor.addChild(root_0, string_literal266_tree);


            pushFollow(FOLLOW_if_stmt_block_in_else_stmt2417);
            if_stmt_block267=if_stmt_block();

            state._fsp--;

            adaptor.addChild(root_0, if_stmt_block267.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class if_stmt_block_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:481:1: if_stmt_block_wrapper : if_stmt_block -> ^( IF_BLOCK if_stmt_block ) ;
    public final ObjcmParser.if_stmt_block_wrapper_return if_stmt_block_wrapper() throws RecognitionException {
        ObjcmParser.if_stmt_block_wrapper_return retval = new ObjcmParser.if_stmt_block_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.if_stmt_block_return if_stmt_block268 =null;


        RewriteRuleSubtreeStream stream_if_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule if_stmt_block");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:482:2: ( if_stmt_block -> ^( IF_BLOCK if_stmt_block ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:482:4: if_stmt_block
            {
            pushFollow(FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2426);
            if_stmt_block268=if_stmt_block();

            state._fsp--;

            stream_if_stmt_block.add(if_stmt_block268.getTree());

            // AST REWRITE
            // elements: if_stmt_block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 482:18: -> ^( IF_BLOCK if_stmt_block )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:482:21: ^( IF_BLOCK if_stmt_block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_BLOCK, "IF_BLOCK")
                , root_1);

                adaptor.addChild(root_1, stream_if_stmt_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block_wrapper"


    public static class if_stmt_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt_block"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:484:1: if_stmt_block : ( block_wrapper | block_internal );
    public final ObjcmParser.if_stmt_block_return if_stmt_block() throws RecognitionException {
        ObjcmParser.if_stmt_block_return retval = new ObjcmParser.if_stmt_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_wrapper_return block_wrapper269 =null;

        ObjcmParser.block_internal_return block_internal270 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:485:2: ( block_wrapper | block_internal )
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==L_FBR) ) {
                alt58=1;
            }
            else if ( (LA58_0==ASTERISK||LA58_0==BREAK_WORD||LA58_0==CONST_PREFIX||LA58_0==ENUM_PREFIX||LA58_0==ID||LA58_0==L_AND||LA58_0==L_BR||LA58_0==L_KBR||LA58_0==L_MINUS||LA58_0==L_MINUS_MINUS||LA58_0==L_NOT||LA58_0==L_PLUS||LA58_0==L_PLUS_PLUS||LA58_0==L_TILDA||LA58_0==NUMBER||LA58_0==SEMICOLON||(LA58_0 >= SINGLE_OP && LA58_0 <= SIZEOF)||LA58_0==STATIC_PREFIX||(LA58_0 >= STRING_LITERAL && LA58_0 <= STRING_LITERAL3)||LA58_0==STRUCT_PREFIX||LA58_0==VOID||LA58_0==169||LA58_0==176||LA58_0==178||(LA58_0 >= 180 && LA58_0 <= 182)||(LA58_0 >= 184 && LA58_0 <= 185)||LA58_0==188||(LA58_0 >= 190 && LA58_0 <= 196)||(LA58_0 >= 198 && LA58_0 <= 201)||(LA58_0 >= 204 && LA58_0 <= 205)) ) {
                alt58=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;

            }
            switch (alt58) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:485:4: block_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_wrapper_in_if_stmt_block2443);
                    block_wrapper269=block_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, block_wrapper269.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:486:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_if_stmt_block2449);
                    block_internal270=block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, block_internal270.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt_block"


    public static class static_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:489:1: static_start_wrapper : static_start -> ^( STATIC_START static_start ) ;
    public final ObjcmParser.static_start_wrapper_return static_start_wrapper() throws RecognitionException {
        ObjcmParser.static_start_wrapper_return retval = new ObjcmParser.static_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_start_return static_start271 =null;


        RewriteRuleSubtreeStream stream_static_start=new RewriteRuleSubtreeStream(adaptor,"rule static_start");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:490:2: ( static_start -> ^( STATIC_START static_start ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:490:4: static_start
            {
            pushFollow(FOLLOW_static_start_in_static_start_wrapper2461);
            static_start271=static_start();

            state._fsp--;

            stream_static_start.add(static_start271.getTree());

            // AST REWRITE
            // elements: static_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 490:17: -> ^( STATIC_START static_start )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:490:20: ^( STATIC_START static_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_START, "STATIC_START")
                , root_1);

                adaptor.addChild(root_1, stream_static_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start_wrapper"


    public static class static_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_start"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:492:1: static_start : STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2 ;
    public final ObjcmParser.static_start_return static_start() throws RecognitionException {
        ObjcmParser.static_start_return retval = new ObjcmParser.static_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STATIC_PREFIX272=null;
        Token CONST_PREFIX273=null;
        ObjcmParser.static_type_wrapper_return static_type_wrapper274 =null;

        ObjcmParser.full_expr2_return full_expr2275 =null;


        Object STATIC_PREFIX272_tree=null;
        Object CONST_PREFIX273_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:493:2: ( STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2 )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:493:4: STATIC_PREFIX ( CONST_PREFIX )? ( static_type_wrapper )? full_expr2
            {
            root_0 = (Object)adaptor.nil();


            STATIC_PREFIX272=(Token)match(input,STATIC_PREFIX,FOLLOW_STATIC_PREFIX_in_static_start2479); 
            STATIC_PREFIX272_tree = 
            (Object)adaptor.create(STATIC_PREFIX272)
            ;
            adaptor.addChild(root_0, STATIC_PREFIX272_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:493:18: ( CONST_PREFIX )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==CONST_PREFIX) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:493:18: CONST_PREFIX
                    {
                    CONST_PREFIX273=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_static_start2481); 
                    CONST_PREFIX273_tree = 
                    (Object)adaptor.create(CONST_PREFIX273)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX273_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:493:32: ( static_type_wrapper )?
            int alt60=2;
            alt60 = dfa60.predict(input);
            switch (alt60) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:493:32: static_type_wrapper
                    {
                    pushFollow(FOLLOW_static_type_wrapper_in_static_start2484);
                    static_type_wrapper274=static_type_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, static_type_wrapper274.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_full_expr2_in_static_start2487);
            full_expr2275=full_expr2();

            state._fsp--;

            adaptor.addChild(root_0, full_expr2275.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_start"


    public static class static_type_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:496:1: static_type_wrapper : static_type -> ^( STATIC_TYPE static_type ) ;
    public final ObjcmParser.static_type_wrapper_return static_type_wrapper() throws RecognitionException {
        ObjcmParser.static_type_wrapper_return retval = new ObjcmParser.static_type_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.static_type_return static_type276 =null;


        RewriteRuleSubtreeStream stream_static_type=new RewriteRuleSubtreeStream(adaptor,"rule static_type");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:497:2: ( static_type -> ^( STATIC_TYPE static_type ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:497:4: static_type
            {
            pushFollow(FOLLOW_static_type_in_static_type_wrapper2499);
            static_type276=static_type();

            state._fsp--;

            stream_static_type.add(static_type276.getTree());

            // AST REWRITE
            // elements: static_type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 497:16: -> ^( STATIC_TYPE static_type )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:497:19: ^( STATIC_TYPE static_type )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_TYPE, "STATIC_TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_static_type.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type_wrapper"


    public static class static_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_type"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:499:1: static_type : object_name ( ASTERISK )* ;
    public final ObjcmParser.static_type_return static_type() throws RecognitionException {
        ObjcmParser.static_type_return retval = new ObjcmParser.static_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK278=null;
        ObjcmParser.object_name_return object_name277 =null;


        Object ASTERISK278_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:500:2: ( object_name ( ASTERISK )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:500:4: object_name ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_name_in_static_type2518);
            object_name277=object_name();

            state._fsp--;

            adaptor.addChild(root_0, object_name277.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:500:16: ( ASTERISK )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==ASTERISK) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:500:16: ASTERISK
            	    {
            	    ASTERISK278=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_static_type2520); 
            	    ASTERISK278_tree = 
            	    (Object)adaptor.create(ASTERISK278)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK278_tree);


            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_type"


    public static class id_part_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:502:1: id_part_end : ( id_part_end_internal )+ ;
    public final ObjcmParser.id_part_end_return id_part_end() throws RecognitionException {
        ObjcmParser.id_part_end_return retval = new ObjcmParser.id_part_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_end_internal_return id_part_end_internal279 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:503:2: ( ( id_part_end_internal )+ )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:503:4: ( id_part_end_internal )+
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:503:4: ( id_part_end_internal )+
            int cnt62=0;
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( (LA62_0==DOT||LA62_0==166) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:503:4: id_part_end_internal
            	    {
            	    pushFollow(FOLLOW_id_part_end_internal_in_id_part_end2532);
            	    id_part_end_internal279=id_part_end_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part_end_internal279.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt62 >= 1 ) break loop62;
                        EarlyExitException eee =
                            new EarlyExitException(62, input);
                        throw eee;
                }
                cnt62++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end"


    public static class id_part_end_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part_end_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:506:1: id_part_end_internal : ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) ;
    public final ObjcmParser.id_part_end_internal_return id_part_end_internal() throws RecognitionException {
        ObjcmParser.id_part_end_internal_return retval = new ObjcmParser.id_part_end_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT280=null;
        Token string_literal281=null;
        ObjcmParser.id_part_return id_part282 =null;


        Object DOT280_tree=null;
        Object string_literal281_tree=null;
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_id_part=new RewriteRuleSubtreeStream(adaptor,"rule id_part");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:507:2: ( ( DOT | '->' ) id_part -> ^( FIELD_ACCESS id_part ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:507:4: ( DOT | '->' ) id_part
            {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:507:4: ( DOT | '->' )
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==DOT) ) {
                alt63=1;
            }
            else if ( (LA63_0==166) ) {
                alt63=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;

            }
            switch (alt63) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:507:5: DOT
                    {
                    DOT280=(Token)match(input,DOT,FOLLOW_DOT_in_id_part_end_internal2547);  
                    stream_DOT.add(DOT280);


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:507:11: '->'
                    {
                    string_literal281=(Token)match(input,166,FOLLOW_166_in_id_part_end_internal2551);  
                    stream_166.add(string_literal281);


                    }
                    break;

            }


            pushFollow(FOLLOW_id_part_in_id_part_end_internal2554);
            id_part282=id_part();

            state._fsp--;

            stream_id_part.add(id_part282.getTree());

            // AST REWRITE
            // elements: id_part
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 507:25: -> ^( FIELD_ACCESS id_part )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:507:28: ^( FIELD_ACCESS id_part )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_ACCESS, "FIELD_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_id_part.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part_end_internal"


    public static class known_types_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_types"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:510:1: known_types : ( 'unsigned' | VOID );
    public final ObjcmParser.known_types_return known_types() throws RecognitionException {
        ObjcmParser.known_types_return retval = new ObjcmParser.known_types_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set283=null;

        Object set283_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:511:2: ( 'unsigned' | VOID )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set283=(Token)input.LT(1);

            if ( input.LA(1)==VOID||input.LA(1)==204 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set283)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_types"


    public static class id_part_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "id_part"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:515:1: id_part : name_internal ( function_brackets_wrapper )? ( index_wrapper )* ;
    public final ObjcmParser.id_part_return id_part() throws RecognitionException {
        ObjcmParser.id_part_return retval = new ObjcmParser.id_part_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal284 =null;

        ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper285 =null;

        ObjcmParser.index_wrapper_return index_wrapper286 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:515:9: ( name_internal ( function_brackets_wrapper )? ( index_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:515:12: name_internal ( function_brackets_wrapper )? ( index_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_internal_in_id_part2592);
            name_internal284=name_internal();

            state._fsp--;

            adaptor.addChild(root_0, name_internal284.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:515:26: ( function_brackets_wrapper )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==L_BR) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:515:26: function_brackets_wrapper
                    {
                    pushFollow(FOLLOW_function_brackets_wrapper_in_id_part2594);
                    function_brackets_wrapper285=function_brackets_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, function_brackets_wrapper285.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:515:53: ( index_wrapper )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==L_KBR) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:515:53: index_wrapper
            	    {
            	    pushFollow(FOLLOW_index_wrapper_in_id_part2597);
            	    index_wrapper286=index_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, index_wrapper286.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "id_part"


    public static class object_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_name"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:518:1: object_name : id_part ( id_part_end )? ;
    public final ObjcmParser.object_name_return object_name() throws RecognitionException {
        ObjcmParser.object_name_return retval = new ObjcmParser.object_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.id_part_return id_part287 =null;

        ObjcmParser.id_part_end_return id_part_end288 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:519:2: ( id_part ( id_part_end )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:519:4: id_part ( id_part_end )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_id_part_in_object_name2610);
            id_part287=id_part();

            state._fsp--;

            adaptor.addChild(root_0, id_part287.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:519:12: ( id_part_end )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==DOT||LA66_0==166) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:519:12: id_part_end
                    {
                    pushFollow(FOLLOW_id_part_end_in_object_name2612);
                    id_part_end288=id_part_end();

                    state._fsp--;

                    adaptor.addChild(root_0, id_part_end288.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_name"


    public static class method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:522:1: method_call_wrapper : L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper_return method_call_wrapper() throws RecognitionException {
        ObjcmParser.method_call_wrapper_return retval = new ObjcmParser.method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR289=null;
        Token R_KBR291=null;
        ObjcmParser.method_call2_return method_call2290 =null;


        Object L_KBR289_tree=null;
        Object R_KBR291_tree=null;
        RewriteRuleTokenStream stream_R_KBR=new RewriteRuleTokenStream(adaptor,"token R_KBR");
        RewriteRuleTokenStream stream_L_KBR=new RewriteRuleTokenStream(adaptor,"token L_KBR");
        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:523:2: ( L_KBR method_call2 R_KBR -> ^( METHOD_CALL method_call2 ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:523:4: L_KBR method_call2 R_KBR
            {
            L_KBR289=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_method_call_wrapper2626);  
            stream_L_KBR.add(L_KBR289);


            pushFollow(FOLLOW_method_call2_in_method_call_wrapper2628);
            method_call2290=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2290.getTree());

            R_KBR291=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_method_call_wrapper2630);  
            stream_R_KBR.add(R_KBR291);


            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 523:29: -> ^( METHOD_CALL method_call2 )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:523:32: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper"


    public static class method_call_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_wrapper2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:526:1: method_call_wrapper2 : method_call2 -> ^( METHOD_CALL method_call2 ) ;
    public final ObjcmParser.method_call_wrapper2_return method_call_wrapper2() throws RecognitionException {
        ObjcmParser.method_call_wrapper2_return retval = new ObjcmParser.method_call_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call2_return method_call2292 =null;


        RewriteRuleSubtreeStream stream_method_call2=new RewriteRuleSubtreeStream(adaptor,"rule method_call2");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:527:2: ( method_call2 -> ^( METHOD_CALL method_call2 ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:527:4: method_call2
            {
            pushFollow(FOLLOW_method_call2_in_method_call_wrapper22653);
            method_call2292=method_call2();

            state._fsp--;

            stream_method_call2.add(method_call2292.getTree());

            // AST REWRITE
            // elements: method_call2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 527:17: -> ^( METHOD_CALL method_call2 )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:527:20: ^( METHOD_CALL method_call2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_method_call2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_wrapper2"


    public static class method_call2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:529:1: method_call2 : object_wrapper method_name ( method_call_message_list_wrapper )? ;
    public final ObjcmParser.method_call2_return method_call2() throws RecognitionException {
        ObjcmParser.method_call2_return retval = new ObjcmParser.method_call2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_return object_wrapper293 =null;

        ObjcmParser.method_name_return method_name294 =null;

        ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper295 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:530:2: ( object_wrapper method_name ( method_call_message_list_wrapper )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:530:4: object_wrapper method_name ( method_call_message_list_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapper_in_method_call22672);
            object_wrapper293=object_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapper293.getTree());

            pushFollow(FOLLOW_method_name_in_method_call22674);
            method_name294=method_name();

            state._fsp--;

            adaptor.addChild(root_0, method_name294.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:530:31: ( method_call_message_list_wrapper )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==COLON) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:530:33: method_call_message_list_wrapper
                    {
                    pushFollow(FOLLOW_method_call_message_list_wrapper_in_method_call22678);
                    method_call_message_list_wrapper295=method_call_message_list_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_message_list_wrapper295.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call2"


    public static class object_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:532:1: object_wrapper : object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) ;
    public final ObjcmParser.object_wrapper_return object_wrapper() throws RecognitionException {
        ObjcmParser.object_wrapper_return retval = new ObjcmParser.object_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_wrapper_internal_return object_wrapper_internal296 =null;


        RewriteRuleSubtreeStream stream_object_wrapper_internal=new RewriteRuleSubtreeStream(adaptor,"rule object_wrapper_internal");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:533:2: ( object_wrapper_internal -> ^( OBJECT object_wrapper_internal ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:533:4: object_wrapper_internal
            {
            pushFollow(FOLLOW_object_wrapper_internal_in_object_wrapper2689);
            object_wrapper_internal296=object_wrapper_internal();

            state._fsp--;

            stream_object_wrapper_internal.add(object_wrapper_internal296.getTree());

            // AST REWRITE
            // elements: object_wrapper_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 533:28: -> ^( OBJECT object_wrapper_internal )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:533:31: ^( OBJECT object_wrapper_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT, "OBJECT")
                , root_1);

                adaptor.addChild(root_1, stream_object_wrapper_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper"


    public static class object_wrapper_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapper_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:535:1: object_wrapper_internal : ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL );
    public final ObjcmParser.object_wrapper_internal_return object_wrapper_internal() throws RecognitionException {
        ObjcmParser.object_wrapper_internal_return retval = new ObjcmParser.object_wrapper_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL302=null;
        ObjcmParser.type_convertion_return type_convertion297 =null;

        ObjcmParser.object_name_return object_name298 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper299 =null;

        ObjcmParser.object_name_return object_name300 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper301 =null;


        Object STRING_LITERAL302_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:537:2: ( type_convertion ( object_name | method_call_wrapper ) | object_name | method_call_wrapper | STRING_LITERAL )
            int alt69=4;
            switch ( input.LA(1) ) {
            case L_BR:
                {
                alt69=1;
                }
                break;
            case ID:
            case 185:
            case 188:
            case 196:
            case 199:
                {
                alt69=2;
                }
                break;
            case L_KBR:
                {
                alt69=3;
                }
                break;
            case STRING_LITERAL:
                {
                alt69=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;

            }

            switch (alt69) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:537:4: type_convertion ( object_name | method_call_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_convertion_in_object_wrapper_internal2708);
                    type_convertion297=type_convertion();

                    state._fsp--;

                    adaptor.addChild(root_0, type_convertion297.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:537:20: ( object_name | method_call_wrapper )
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==ID||LA68_0==185||LA68_0==188||LA68_0==196||LA68_0==199) ) {
                        alt68=1;
                    }
                    else if ( (LA68_0==L_KBR) ) {
                        alt68=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 0, input);

                        throw nvae;

                    }
                    switch (alt68) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:537:21: object_name
                            {
                            pushFollow(FOLLOW_object_name_in_object_wrapper_internal2711);
                            object_name298=object_name();

                            state._fsp--;

                            adaptor.addChild(root_0, object_name298.getTree());

                            }
                            break;
                        case 2 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:537:35: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2715);
                            method_call_wrapper299=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper299.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:538:4: object_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_name_in_object_wrapper_internal2721);
                    object_name300=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name300.getTree());

                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:539:4: method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapper_internal2726);
                    method_call_wrapper301=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper301.getTree());

                    }
                    break;
                case 4 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:540:4: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL302=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_object_wrapper_internal2731); 
                    STRING_LITERAL302_tree = 
                    (Object)adaptor.create(STRING_LITERAL302)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL302_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapper_internal"


    public static class method_message3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_message3"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:543:1: method_message3 : classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) ;
    public final ObjcmParser.method_message3_return method_message3() throws RecognitionException {
        ObjcmParser.method_message3_return retval = new ObjcmParser.method_message3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp303 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:544:2: ( classical_expr_wrp -> ^( MESSAGE classical_expr_wrp ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:544:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_method_message32743);
            classical_expr_wrp303=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp303.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 544:23: -> ^( MESSAGE classical_expr_wrp )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:544:26: ^( MESSAGE classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_message3"


    public static class type_convertion_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:546:1: type_convertion : L_BR type_convertion_internal_wrapper R_BR ;
    public final ObjcmParser.type_convertion_return type_convertion() throws RecognitionException {
        ObjcmParser.type_convertion_return retval = new ObjcmParser.type_convertion_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR304=null;
        Token R_BR306=null;
        ObjcmParser.type_convertion_internal_wrapper_return type_convertion_internal_wrapper305 =null;


        Object L_BR304_tree=null;
        Object R_BR306_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:547:2: ( L_BR type_convertion_internal_wrapper R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:547:4: L_BR type_convertion_internal_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR304=(Token)match(input,L_BR,FOLLOW_L_BR_in_type_convertion2762); 
            L_BR304_tree = 
            (Object)adaptor.create(L_BR304)
            ;
            adaptor.addChild(root_0, L_BR304_tree);


            pushFollow(FOLLOW_type_convertion_internal_wrapper_in_type_convertion2764);
            type_convertion_internal_wrapper305=type_convertion_internal_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, type_convertion_internal_wrapper305.getTree());

            R_BR306=(Token)match(input,R_BR,FOLLOW_R_BR_in_type_convertion2766); 
            R_BR306_tree = 
            (Object)adaptor.create(R_BR306)
            ;
            adaptor.addChild(root_0, R_BR306_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion"


    public static class type_convertion_internal_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion_internal_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:549:1: type_convertion_internal_wrapper : ( CONST_PREFIX )? type_convertion_internal -> ^( TYPE_CONVERTION type_convertion_internal ) ;
    public final ObjcmParser.type_convertion_internal_wrapper_return type_convertion_internal_wrapper() throws RecognitionException {
        ObjcmParser.type_convertion_internal_wrapper_return retval = new ObjcmParser.type_convertion_internal_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX307=null;
        ObjcmParser.type_convertion_internal_return type_convertion_internal308 =null;


        Object CONST_PREFIX307_tree=null;
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleSubtreeStream stream_type_convertion_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_convertion_internal");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:550:2: ( ( CONST_PREFIX )? type_convertion_internal -> ^( TYPE_CONVERTION type_convertion_internal ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:550:4: ( CONST_PREFIX )? type_convertion_internal
            {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:550:4: ( CONST_PREFIX )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==CONST_PREFIX) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:550:4: CONST_PREFIX
                    {
                    CONST_PREFIX307=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_convertion_internal_wrapper2775);  
                    stream_CONST_PREFIX.add(CONST_PREFIX307);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_convertion_internal_in_type_convertion_internal_wrapper2778);
            type_convertion_internal308=type_convertion_internal();

            state._fsp--;

            stream_type_convertion_internal.add(type_convertion_internal308.getTree());

            // AST REWRITE
            // elements: type_convertion_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 550:43: -> ^( TYPE_CONVERTION type_convertion_internal )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:550:46: ^( TYPE_CONVERTION type_convertion_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CONVERTION, "TYPE_CONVERTION")
                , root_1);

                adaptor.addChild(root_1, stream_type_convertion_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion_internal_wrapper"


    public static class type_convertion_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_convertion_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:552:1: type_convertion_internal : ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* ;
    public final ObjcmParser.type_convertion_internal_return type_convertion_internal() throws RecognitionException {
        ObjcmParser.type_convertion_internal_return retval = new ObjcmParser.type_convertion_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal309=null;
        Token ASTERISK312=null;
        ObjcmParser.type_internal_return type_internal310 =null;

        ObjcmParser.generic_return generic311 =null;


        Object string_literal309_tree=null;
        Object ASTERISK312_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:553:2: ( ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:553:4: ( 'unsigned' )? type_internal ( generic )? ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:553:4: ( 'unsigned' )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==204) ) {
                int LA71_1 = input.LA(2);

                if ( (LA71_1==ID||LA71_1==VOID||LA71_1==204) ) {
                    alt71=1;
                }
            }
            switch (alt71) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:553:4: 'unsigned'
                    {
                    string_literal309=(Token)match(input,204,FOLLOW_204_in_type_convertion_internal2796); 
                    string_literal309_tree = 
                    (Object)adaptor.create(string_literal309)
                    ;
                    adaptor.addChild(root_0, string_literal309_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_type_convertion_internal2799);
            type_internal310=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal310.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:553:30: ( generic )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==L_LESS) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:553:30: generic
                    {
                    pushFollow(FOLLOW_generic_in_type_convertion_internal2801);
                    generic311=generic();

                    state._fsp--;

                    adaptor.addChild(root_0, generic311.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:553:39: ( ASTERISK )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==ASTERISK) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:553:39: ASTERISK
            	    {
            	    ASTERISK312=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_type_convertion_internal2804); 
            	    ASTERISK312_tree = 
            	    (Object)adaptor.create(ASTERISK312)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK312_tree);


            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_convertion_internal"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:555:1: method_name : ( ID -> ^( METHOD_NAME ID ) | property -> ^( METHOD_NAME property ) );
    public final ObjcmParser.method_name_return method_name() throws RecognitionException {
        ObjcmParser.method_name_return retval = new ObjcmParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID313=null;
        ObjcmParser.property_return property314 =null;


        Object ID313_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_property=new RewriteRuleSubtreeStream(adaptor,"rule property");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:556:2: ( ID -> ^( METHOD_NAME ID ) | property -> ^( METHOD_NAME property ) )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==ID) ) {
                alt74=1;
            }
            else if ( (LA74_0==185||LA74_0==188||LA74_0==199) ) {
                alt74=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;

            }
            switch (alt74) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:556:4: ID
                    {
                    ID313=(Token)match(input,ID,FOLLOW_ID_in_method_name2815);  
                    stream_ID.add(ID313);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 556:7: -> ^( METHOD_NAME ID )
                    {
                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:556:10: ^( METHOD_NAME ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_ID.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:557:4: property
                    {
                    pushFollow(FOLLOW_property_in_method_name2828);
                    property314=property();

                    state._fsp--;

                    stream_property.add(property314.getTree());

                    // AST REWRITE
                    // elements: property
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 557:13: -> ^( METHOD_NAME property )
                    {
                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:557:16: ^( METHOD_NAME property )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                        , root_1);

                        adaptor.addChild(root_1, stream_property.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_call_message_list_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:559:1: method_call_message_list_wrapper : method_call_message_list -> ^( MSG_LIST method_call_message_list ) ;
    public final ObjcmParser.method_call_message_list_wrapper_return method_call_message_list_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_list_wrapper_return retval = new ObjcmParser.method_call_message_list_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_list_return method_call_message_list315 =null;


        RewriteRuleSubtreeStream stream_method_call_message_list=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_list");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:560:2: ( method_call_message_list -> ^( MSG_LIST method_call_message_list ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:560:4: method_call_message_list
            {
            pushFollow(FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2845);
            method_call_message_list315=method_call_message_list();

            state._fsp--;

            stream_method_call_message_list.add(method_call_message_list315.getTree());

            // AST REWRITE
            // elements: method_call_message_list
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 560:29: -> ^( MSG_LIST method_call_message_list )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:560:32: ^( MSG_LIST method_call_message_list )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MSG_LIST, "MSG_LIST")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_list.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list_wrapper"


    public static class method_call_message_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_list"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:562:1: method_call_message_list : method_call_message_first_wrapper ( method_call_message_wrapper )* ;
    public final ObjcmParser.method_call_message_list_return method_call_message_list() throws RecognitionException {
        ObjcmParser.method_call_message_list_return retval = new ObjcmParser.method_call_message_list_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper316 =null;

        ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper317 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:563:2: ( method_call_message_first_wrapper ( method_call_message_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:563:4: method_call_message_first_wrapper ( method_call_message_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2862);
            method_call_message_first_wrapper316=method_call_message_first_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_call_message_first_wrapper316.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:563:38: ( method_call_message_wrapper )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==COLON||LA75_0==ID) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:563:38: method_call_message_wrapper
            	    {
            	    pushFollow(FOLLOW_method_call_message_wrapper_in_method_call_message_list2864);
            	    method_call_message_wrapper317=method_call_message_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_call_message_wrapper317.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_list"


    public static class method_call_message_first_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:565:1: method_call_message_first_wrapper : method_call_message_first -> ^( METHOD_MSG method_call_message_first ) ;
    public final ObjcmParser.method_call_message_first_wrapper_return method_call_message_first_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_first_wrapper_return retval = new ObjcmParser.method_call_message_first_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_first_return method_call_message_first318 =null;


        RewriteRuleSubtreeStream stream_method_call_message_first=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message_first");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:566:2: ( method_call_message_first -> ^( METHOD_MSG method_call_message_first ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:566:4: method_call_message_first
            {
            pushFollow(FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2875);
            method_call_message_first318=method_call_message_first();

            state._fsp--;

            stream_method_call_message_first.add(method_call_message_first318.getTree());

            // AST REWRITE
            // elements: method_call_message_first
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 566:30: -> ^( METHOD_MSG method_call_message_first )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:566:33: ^( METHOD_MSG method_call_message_first )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message_first.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first_wrapper"


    public static class method_call_message_first_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_first"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:568:1: method_call_message_first : COLON message_wrapper ;
    public final ObjcmParser.method_call_message_first_return method_call_message_first() throws RecognitionException {
        ObjcmParser.method_call_message_first_return retval = new ObjcmParser.method_call_message_first_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON319=null;
        ObjcmParser.message_wrapper_return message_wrapper320 =null;


        Object COLON319_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:569:2: ( COLON message_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:569:4: COLON message_wrapper
            {
            root_0 = (Object)adaptor.nil();


            COLON319=(Token)match(input,COLON,FOLLOW_COLON_in_method_call_message_first2892); 
            COLON319_tree = 
            (Object)adaptor.create(COLON319)
            ;
            adaptor.addChild(root_0, COLON319_tree);


            pushFollow(FOLLOW_message_wrapper_in_method_call_message_first2895);
            message_wrapper320=message_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, message_wrapper320.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_first"


    public static class method_call_message_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:571:1: method_call_message_wrapper : method_call_message -> ^( METHOD_MSG method_call_message ) ;
    public final ObjcmParser.method_call_message_wrapper_return method_call_message_wrapper() throws RecognitionException {
        ObjcmParser.method_call_message_wrapper_return retval = new ObjcmParser.method_call_message_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_call_message_return method_call_message321 =null;


        RewriteRuleSubtreeStream stream_method_call_message=new RewriteRuleSubtreeStream(adaptor,"rule method_call_message");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:572:2: ( method_call_message -> ^( METHOD_MSG method_call_message ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:572:4: method_call_message
            {
            pushFollow(FOLLOW_method_call_message_in_method_call_message_wrapper2905);
            method_call_message321=method_call_message();

            state._fsp--;

            stream_method_call_message.add(method_call_message321.getTree());

            // AST REWRITE
            // elements: method_call_message
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 572:24: -> ^( METHOD_MSG method_call_message )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:572:27: ^( METHOD_MSG method_call_message )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_method_call_message.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message_wrapper"


    public static class method_call_message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_call_message"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:574:1: method_call_message : ( prefix | incomplete_prefix ) message_wrapper ;
    public final ObjcmParser.method_call_message_return method_call_message() throws RecognitionException {
        ObjcmParser.method_call_message_return retval = new ObjcmParser.method_call_message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.prefix_return prefix322 =null;

        ObjcmParser.incomplete_prefix_return incomplete_prefix323 =null;

        ObjcmParser.message_wrapper_return message_wrapper324 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:575:2: ( ( prefix | incomplete_prefix ) message_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:575:4: ( prefix | incomplete_prefix ) message_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:575:4: ( prefix | incomplete_prefix )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==ID) ) {
                alt76=1;
            }
            else if ( (LA76_0==COLON) ) {
                alt76=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;

            }
            switch (alt76) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:575:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_call_message2924);
                    prefix322=prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, prefix322.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:575:14: incomplete_prefix
                    {
                    pushFollow(FOLLOW_incomplete_prefix_in_method_call_message2928);
                    incomplete_prefix323=incomplete_prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, incomplete_prefix323.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_message_wrapper_in_method_call_message2931);
            message_wrapper324=message_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, message_wrapper324.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_call_message"


    public static class message_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "message_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:577:1: message_wrapper : message -> ^( MESSAGE message ) ;
    public final ObjcmParser.message_wrapper_return message_wrapper() throws RecognitionException {
        ObjcmParser.message_wrapper_return retval = new ObjcmParser.message_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.message_return message325 =null;


        RewriteRuleSubtreeStream stream_message=new RewriteRuleSubtreeStream(adaptor,"rule message");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:578:2: ( message -> ^( MESSAGE message ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:578:4: message
            {
            pushFollow(FOLLOW_message_in_message_wrapper2941);
            message325=message();

            state._fsp--;

            stream_message.add(message325.getTree());

            // AST REWRITE
            // elements: message
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 578:12: -> ^( MESSAGE message )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:578:15: ^( MESSAGE message )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MESSAGE, "MESSAGE")
                , root_1);

                adaptor.addChild(root_1, stream_message.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "message_wrapper"


    public static class message_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "message"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:580:1: message : expression ( COMMA expression )* ;
    public final ObjcmParser.message_return message() throws RecognitionException {
        ObjcmParser.message_return retval = new ObjcmParser.message_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA327=null;
        ObjcmParser.expression_return expression326 =null;

        ObjcmParser.expression_return expression328 =null;


        Object COMMA327_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:580:9: ( expression ( COMMA expression )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:580:11: expression ( COMMA expression )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expression_in_message2959);
            expression326=expression();

            state._fsp--;

            adaptor.addChild(root_0, expression326.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:580:22: ( COMMA expression )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==COMMA) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:580:23: COMMA expression
            	    {
            	    COMMA327=(Token)match(input,COMMA,FOLLOW_COMMA_in_message2962); 
            	    COMMA327_tree = 
            	    (Object)adaptor.create(COMMA327)
            	    ;
            	    adaptor.addChild(root_0, COMMA327_tree);


            	    pushFollow(FOLLOW_expression_in_message2964);
            	    expression328=expression();

            	    state._fsp--;

            	    adaptor.addChild(root_0, expression328.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "message"


    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expression"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:586:1: expression : ( classical_expr_wrp | struct_init );
    public final ObjcmParser.expression_return expression() throws RecognitionException {
        ObjcmParser.expression_return retval = new ObjcmParser.expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp329 =null;

        ObjcmParser.struct_init_return struct_init330 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:587:2: ( classical_expr_wrp | struct_init )
            int alt78=2;
            alt78 = dfa78.predict(input);
            switch (alt78) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:587:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_expression2980);
                    classical_expr_wrp329=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp329.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:588:4: struct_init
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_in_expression2985);
                    struct_init330=struct_init();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init330.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"


    public static class full_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:591:1: full_expr_wrapper : full_expr -> ^( EXPR_FULL full_expr ) ;
    public final ObjcmParser.full_expr_wrapper_return full_expr_wrapper() throws RecognitionException {
        ObjcmParser.full_expr_wrapper_return retval = new ObjcmParser.full_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.full_expr_return full_expr331 =null;


        RewriteRuleSubtreeStream stream_full_expr=new RewriteRuleSubtreeStream(adaptor,"rule full_expr");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:592:2: ( full_expr -> ^( EXPR_FULL full_expr ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:592:4: full_expr
            {
            pushFollow(FOLLOW_full_expr_in_full_expr_wrapper2996);
            full_expr331=full_expr();

            state._fsp--;

            stream_full_expr.add(full_expr331.getTree());

            // AST REWRITE
            // elements: full_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 592:14: -> ^( EXPR_FULL full_expr )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:592:17: ^( EXPR_FULL full_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_FULL, "EXPR_FULL")
                , root_1);

                adaptor.addChild(root_1, stream_full_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr_wrapper"


    public static class full_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:594:1: full_expr : classical_expr_wrp ( COMMA classical_expr_wrp )* ;
    public final ObjcmParser.full_expr_return full_expr() throws RecognitionException {
        ObjcmParser.full_expr_return retval = new ObjcmParser.full_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA333=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp332 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp334 =null;


        Object COMMA333_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:595:2: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:595:4: classical_expr_wrp ( COMMA classical_expr_wrp )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_full_expr3013);
            classical_expr_wrp332=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp332.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:595:23: ( COMMA classical_expr_wrp )*
            loop79:
            do {
                int alt79=2;
                alt79 = dfa79.predict(input);
                switch (alt79) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:595:24: COMMA classical_expr_wrp
            	    {
            	    COMMA333=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr3016); 
            	    COMMA333_tree = 
            	    (Object)adaptor.create(COMMA333)
            	    ;
            	    adaptor.addChild(root_0, COMMA333_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp_in_full_expr3018);
            	    classical_expr_wrp334=classical_expr_wrp();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp334.getTree());

            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr"


    public static class full_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "full_expr2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:597:1: full_expr2 : classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* ;
    public final ObjcmParser.full_expr2_return full_expr2() throws RecognitionException {
        ObjcmParser.full_expr2_return retval = new ObjcmParser.full_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA336=null;
        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2335 =null;

        ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2337 =null;


        Object COMMA336_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:598:2: ( classical_expr_wrp2 ( COMMA classical_expr_wrp2 )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:598:4: classical_expr_wrp2 ( COMMA classical_expr_wrp2 )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr23029);
            classical_expr_wrp2335=classical_expr_wrp2();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp2335.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:598:24: ( COMMA classical_expr_wrp2 )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==COMMA) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:598:25: COMMA classical_expr_wrp2
            	    {
            	    COMMA336=(Token)match(input,COMMA,FOLLOW_COMMA_in_full_expr23032); 
            	    COMMA336_tree = 
            	    (Object)adaptor.create(COMMA336)
            	    ;
            	    adaptor.addChild(root_0, COMMA336_tree);


            	    pushFollow(FOLLOW_classical_expr_wrp2_in_full_expr23034);
            	    classical_expr_wrp2337=classical_expr_wrp2();

            	    state._fsp--;

            	    adaptor.addChild(root_0, classical_expr_wrp2337.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "full_expr2"


    public static class expr_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:600:1: expr_assign_wrapper : expr_assign -> ^( EXPR_ASSIGN expr_assign ) ;
    public final ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper() throws RecognitionException {
        ObjcmParser.expr_assign_wrapper_return retval = new ObjcmParser.expr_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_assign_return expr_assign338 =null;


        RewriteRuleSubtreeStream stream_expr_assign=new RewriteRuleSubtreeStream(adaptor,"rule expr_assign");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:601:2: ( expr_assign -> ^( EXPR_ASSIGN expr_assign ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:601:4: expr_assign
            {
            pushFollow(FOLLOW_expr_assign_in_expr_assign_wrapper3045);
            expr_assign338=expr_assign();

            state._fsp--;

            stream_expr_assign.add(expr_assign338.getTree());

            // AST REWRITE
            // elements: expr_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 601:16: -> ^( EXPR_ASSIGN expr_assign )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:601:19: ^( EXPR_ASSIGN expr_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ASSIGN, "EXPR_ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_expr_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign_wrapper"


    public static class expr_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_assign"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:603:1: expr_assign : assign_wrapper ( struct_init | classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) ) ;
    public final ObjcmParser.expr_assign_return expr_assign() throws RecognitionException {
        ObjcmParser.expr_assign_return retval = new ObjcmParser.expr_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_wrapper_return assign_wrapper339 =null;

        ObjcmParser.struct_init_return struct_init340 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp341 =null;

        ObjcmParser.array_init_wrapper_return array_init_wrapper342 =null;

        ObjcmParser.func_pointer2_return func_pointer2343 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper344 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:604:2: ( assign_wrapper ( struct_init | classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:604:4: assign_wrapper ( struct_init | classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_assign_wrapper_in_expr_assign3064);
            assign_wrapper339=assign_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, assign_wrapper339.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:604:19: ( struct_init | classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )
            int alt82=4;
            alt82 = dfa82.predict(input);
            switch (alt82) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:604:20: struct_init
                    {
                    pushFollow(FOLLOW_struct_init_in_expr_assign3067);
                    struct_init340=struct_init();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init340.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:604:34: classical_expr_wrp
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_expr_assign3071);
                    classical_expr_wrp341=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp341.getTree());

                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:604:55: array_init_wrapper
                    {
                    pushFollow(FOLLOW_array_init_wrapper_in_expr_assign3075);
                    array_init_wrapper342=array_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init_wrapper342.getTree());

                    }
                    break;
                case 4 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:604:76: ( func_pointer2 ( method_call_wrapper )? )
                    {
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:604:76: ( func_pointer2 ( method_call_wrapper )? )
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:604:77: func_pointer2 ( method_call_wrapper )?
                    {
                    pushFollow(FOLLOW_func_pointer2_in_expr_assign3080);
                    func_pointer2343=func_pointer2();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer2343.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:604:91: ( method_call_wrapper )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==L_KBR) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:604:91: method_call_wrapper
                            {
                            pushFollow(FOLLOW_method_call_wrapper_in_expr_assign3082);
                            method_call_wrapper344=method_call_wrapper();

                            state._fsp--;

                            adaptor.addChild(root_0, method_call_wrapper344.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_assign"


    public static class array_init_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:606:1: array_init_wrapper : array_init -> ^( ARRAY_INIT array_init ) ;
    public final ObjcmParser.array_init_wrapper_return array_init_wrapper() throws RecognitionException {
        ObjcmParser.array_init_wrapper_return retval = new ObjcmParser.array_init_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.array_init_return array_init345 =null;


        RewriteRuleSubtreeStream stream_array_init=new RewriteRuleSubtreeStream(adaptor,"rule array_init");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:607:2: ( array_init -> ^( ARRAY_INIT array_init ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:607:4: array_init
            {
            pushFollow(FOLLOW_array_init_in_array_init_wrapper3094);
            array_init345=array_init();

            state._fsp--;

            stream_array_init.add(array_init345.getTree());

            // AST REWRITE
            // elements: array_init
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 607:15: -> ^( ARRAY_INIT array_init )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:607:18: ^( ARRAY_INIT array_init )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ARRAY_INIT, "ARRAY_INIT")
                , root_1);

                adaptor.addChild(root_1, stream_array_init.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init_wrapper"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:609:1: array_init : L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR ;
    public final ObjcmParser.array_init_return array_init() throws RecognitionException {
        ObjcmParser.array_init_return retval = new ObjcmParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR346=null;
        Token COMMA348=null;
        Token R_FBR350=null;
        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3347 =null;

        ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3349 =null;


        Object L_FBR346_tree=null;
        Object COMMA348_tree=null;
        Object R_FBR350_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:610:2: ( L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:610:4: L_FBR ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )? R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR346=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_array_init3113); 
            L_FBR346_tree = 
            (Object)adaptor.create(L_FBR346)
            ;
            adaptor.addChild(root_0, L_FBR346_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:610:10: ( classical_expr_wrp3 ( COMMA classical_expr_wrp3 )* )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==ASTERISK||LA84_0==ID||LA84_0==L_AND||LA84_0==L_BR||(LA84_0 >= L_FBR && LA84_0 <= L_KBR)||LA84_0==L_MINUS||LA84_0==L_MINUS_MINUS||LA84_0==L_NOT||LA84_0==L_PLUS||LA84_0==L_PLUS_PLUS||LA84_0==L_TILDA||LA84_0==NUMBER||LA84_0==SIZEOF||(LA84_0 >= STRING_LITERAL && LA84_0 <= STRING_LITERAL3)||LA84_0==169||LA84_0==176||LA84_0==178||LA84_0==182||LA84_0==185||LA84_0==188||LA84_0==196||(LA84_0 >= 198 && LA84_0 <= 199)||LA84_0==204) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:610:11: classical_expr_wrp3 ( COMMA classical_expr_wrp3 )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init3116);
                    classical_expr_wrp3347=classical_expr_wrp3();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp3347.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:610:31: ( COMMA classical_expr_wrp3 )*
                    loop83:
                    do {
                        int alt83=2;
                        int LA83_0 = input.LA(1);

                        if ( (LA83_0==COMMA) ) {
                            alt83=1;
                        }


                        switch (alt83) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:610:32: COMMA classical_expr_wrp3
                    	    {
                    	    COMMA348=(Token)match(input,COMMA,FOLLOW_COMMA_in_array_init3119); 
                    	    COMMA348_tree = 
                    	    (Object)adaptor.create(COMMA348)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA348_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp3_in_array_init3121);
                    	    classical_expr_wrp3349=classical_expr_wrp3();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp3349.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop83;
                        }
                    } while (true);


                    }
                    break;

            }


            R_FBR350=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_array_init3127); 
            R_FBR350_tree = 
            (Object)adaptor.create(R_FBR350)
            ;
            adaptor.addChild(root_0, R_FBR350_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class classical_expr_wrp3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp3"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:613:1: classical_expr_wrp3 : ( array_init_wrapper | classical_expr_wrp );
    public final ObjcmParser.classical_expr_wrp3_return classical_expr_wrp3() throws RecognitionException {
        ObjcmParser.classical_expr_wrp3_return retval = new ObjcmParser.classical_expr_wrp3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.array_init_wrapper_return array_init_wrapper351 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp352 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:614:2: ( array_init_wrapper | classical_expr_wrp )
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==L_FBR) ) {
                alt85=1;
            }
            else if ( (LA85_0==ASTERISK||LA85_0==ID||LA85_0==L_AND||LA85_0==L_BR||LA85_0==L_KBR||LA85_0==L_MINUS||LA85_0==L_MINUS_MINUS||LA85_0==L_NOT||LA85_0==L_PLUS||LA85_0==L_PLUS_PLUS||LA85_0==L_TILDA||LA85_0==NUMBER||LA85_0==SIZEOF||(LA85_0 >= STRING_LITERAL && LA85_0 <= STRING_LITERAL3)||LA85_0==169||LA85_0==176||LA85_0==178||LA85_0==182||LA85_0==185||LA85_0==188||LA85_0==196||(LA85_0 >= 198 && LA85_0 <= 199)||LA85_0==204) ) {
                alt85=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;

            }
            switch (alt85) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:614:4: array_init_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_array_init_wrapper_in_classical_expr_wrp33139);
                    array_init_wrapper351=array_init_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, array_init_wrapper351.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:615:4: classical_expr_wrp
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_classical_expr_wrp33145);
                    classical_expr_wrp352=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp352.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp3"


    public static class classical_expr_wrp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:618:1: classical_expr_wrp : classical_expr -> ^( CLASSICAL_EXPR classical_expr ) ;
    public final ObjcmParser.classical_expr_wrp_return classical_expr_wrp() throws RecognitionException {
        ObjcmParser.classical_expr_wrp_return retval = new ObjcmParser.classical_expr_wrp_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_return classical_expr353 =null;


        RewriteRuleSubtreeStream stream_classical_expr=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:619:2: ( classical_expr -> ^( CLASSICAL_EXPR classical_expr ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:619:4: classical_expr
            {
            pushFollow(FOLLOW_classical_expr_in_classical_expr_wrp3158);
            classical_expr353=classical_expr();

            state._fsp--;

            stream_classical_expr.add(classical_expr353.getTree());

            // AST REWRITE
            // elements: classical_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 619:19: -> ^( CLASSICAL_EXPR classical_expr )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:619:22: ^( CLASSICAL_EXPR classical_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR, "CLASSICAL_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp"


    public static class classical_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:621:1: classical_expr : simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr_return classical_expr() throws RecognitionException {
        ObjcmParser.classical_expr_return retval = new ObjcmParser.classical_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper354 =null;

        ObjcmParser.expr_question_wrapper_return expr_question_wrapper355 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper356 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:622:2: ( simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:622:4: simple_expr_wrapper ( expr_question_wrapper | expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_simple_expr_wrapper_in_classical_expr3175);
            simple_expr_wrapper354=simple_expr_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, simple_expr_wrapper354.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:622:24: ( expr_question_wrapper | expr_assign_wrapper )?
            int alt86=3;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==L_QUESTION) ) {
                alt86=1;
            }
            else if ( (LA86_0==L_AND_EQ||(LA86_0 >= L_DIV_EQ && LA86_0 <= L_EQ)||LA86_0==L_LEFT_EQ||LA86_0==L_MINUS_EQ||LA86_0==L_MULT_EQ||LA86_0==L_OR_EQ||LA86_0==L_PERC_EQ||LA86_0==L_PLUS_EQ||LA86_0==L_RIGHT_EQ||LA86_0==L_XOR_EQ) ) {
                alt86=2;
            }
            switch (alt86) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:622:25: expr_question_wrapper
                    {
                    pushFollow(FOLLOW_expr_question_wrapper_in_classical_expr3178);
                    expr_question_wrapper355=expr_question_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_question_wrapper355.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:622:49: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr3182);
                    expr_assign_wrapper356=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper356.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr"


    public static class classical_expr_wrp2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr_wrp2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:624:1: classical_expr_wrp2 : classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) ;
    public final ObjcmParser.classical_expr_wrp2_return classical_expr_wrp2() throws RecognitionException {
        ObjcmParser.classical_expr_wrp2_return retval = new ObjcmParser.classical_expr_wrp2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr2_return classical_expr2357 =null;


        RewriteRuleSubtreeStream stream_classical_expr2=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr2");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:625:2: ( classical_expr2 -> ^( CLASSICAL_EXPR_2 classical_expr2 ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:625:4: classical_expr2
            {
            pushFollow(FOLLOW_classical_expr2_in_classical_expr_wrp23194);
            classical_expr2357=classical_expr2();

            state._fsp--;

            stream_classical_expr2.add(classical_expr2357.getTree());

            // AST REWRITE
            // elements: classical_expr2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 625:20: -> ^( CLASSICAL_EXPR_2 classical_expr2 )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:625:23: ^( CLASSICAL_EXPR_2 classical_expr2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASSICAL_EXPR_2, "CLASSICAL_EXPR_2")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr_wrp2"


    public static class classical_expr2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_expr2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:627:1: classical_expr2 : ( object_name | func_pointer1 ) ( expr_assign_wrapper )? ;
    public final ObjcmParser.classical_expr2_return classical_expr2() throws RecognitionException {
        ObjcmParser.classical_expr2_return retval = new ObjcmParser.classical_expr2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.object_name_return object_name358 =null;

        ObjcmParser.func_pointer1_return func_pointer1359 =null;

        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper360 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:628:2: ( ( object_name | func_pointer1 ) ( expr_assign_wrapper )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:628:4: ( object_name | func_pointer1 ) ( expr_assign_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:628:4: ( object_name | func_pointer1 )
            int alt87=2;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:628:5: object_name
                    {
                    pushFollow(FOLLOW_object_name_in_classical_expr23212);
                    object_name358=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name358.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:628:19: func_pointer1
                    {
                    pushFollow(FOLLOW_func_pointer1_in_classical_expr23216);
                    func_pointer1359=func_pointer1();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer1359.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:628:34: ( expr_assign_wrapper )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==L_AND_EQ||(LA88_0 >= L_DIV_EQ && LA88_0 <= L_EQ)||LA88_0==L_LEFT_EQ||LA88_0==L_MINUS_EQ||LA88_0==L_MULT_EQ||LA88_0==L_OR_EQ||LA88_0==L_PERC_EQ||LA88_0==L_PLUS_EQ||LA88_0==L_RIGHT_EQ||LA88_0==L_XOR_EQ) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:628:34: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_classical_expr23219);
                    expr_assign_wrapper360=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper360.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_expr2"


    public static class expr_question_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:630:1: expr_question_wrapper : expr_question -> ^( EXPR_QUESTION expr_question ) ;
    public final ObjcmParser.expr_question_wrapper_return expr_question_wrapper() throws RecognitionException {
        ObjcmParser.expr_question_wrapper_return retval = new ObjcmParser.expr_question_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_question_return expr_question361 =null;


        RewriteRuleSubtreeStream stream_expr_question=new RewriteRuleSubtreeStream(adaptor,"rule expr_question");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:631:2: ( expr_question -> ^( EXPR_QUESTION expr_question ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:631:4: expr_question
            {
            pushFollow(FOLLOW_expr_question_in_expr_question_wrapper3229);
            expr_question361=expr_question();

            state._fsp--;

            stream_expr_question.add(expr_question361.getTree());

            // AST REWRITE
            // elements: expr_question
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 631:18: -> ^( EXPR_QUESTION expr_question )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:631:21: ^( EXPR_QUESTION expr_question )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_QUESTION, "EXPR_QUESTION")
                , root_1);

                adaptor.addChild(root_1, stream_expr_question.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question_wrapper"


    public static class expr_question_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_question"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:633:1: expr_question : L_QUESTION classical_expr_wrp COLON classical_expr_wrp ;
    public final ObjcmParser.expr_question_return expr_question() throws RecognitionException {
        ObjcmParser.expr_question_return retval = new ObjcmParser.expr_question_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_QUESTION362=null;
        Token COLON364=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp363 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp365 =null;


        Object L_QUESTION362_tree=null;
        Object COLON364_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:634:2: ( L_QUESTION classical_expr_wrp COLON classical_expr_wrp )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:634:4: L_QUESTION classical_expr_wrp COLON classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            L_QUESTION362=(Token)match(input,L_QUESTION,FOLLOW_L_QUESTION_in_expr_question3246); 
            L_QUESTION362_tree = 
            (Object)adaptor.create(L_QUESTION362)
            ;
            adaptor.addChild(root_0, L_QUESTION362_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question3248);
            classical_expr_wrp363=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp363.getTree());

            COLON364=(Token)match(input,COLON,FOLLOW_COLON_in_expr_question3250); 
            COLON364_tree = 
            (Object)adaptor.create(COLON364)
            ;
            adaptor.addChild(root_0, COLON364_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_expr_question3252);
            classical_expr_wrp365=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp365.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_question"


    public static class assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:636:1: assign_wrapper : assign -> ^( ASSIGN assign ) ;
    public final ObjcmParser.assign_wrapper_return assign_wrapper() throws RecognitionException {
        ObjcmParser.assign_wrapper_return retval = new ObjcmParser.assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.assign_return assign366 =null;


        RewriteRuleSubtreeStream stream_assign=new RewriteRuleSubtreeStream(adaptor,"rule assign");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:637:2: ( assign -> ^( ASSIGN assign ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:637:4: assign
            {
            pushFollow(FOLLOW_assign_in_assign_wrapper3261);
            assign366=assign();

            state._fsp--;

            stream_assign.add(assign366.getTree());

            // AST REWRITE
            // elements: assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 637:11: -> ^( ASSIGN assign )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:637:14: ^( ASSIGN assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ASSIGN, "ASSIGN")
                , root_1);

                adaptor.addChild(root_1, stream_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign_wrapper"


    public static class assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "assign"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:639:1: assign : ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ );
    public final ObjcmParser.assign_return assign() throws RecognitionException {
        ObjcmParser.assign_return retval = new ObjcmParser.assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set367=null;

        Object set367_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:640:2: ( L_EQ | L_PLUS_EQ | L_MINUS_EQ | L_MULT_EQ | L_DIV_EQ | L_PERC_EQ | L_LEFT_EQ | L_RIGHT_EQ | L_AND_EQ | L_XOR_EQ | L_OR_EQ )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set367=(Token)input.LT(1);

            if ( input.LA(1)==L_AND_EQ||(input.LA(1) >= L_DIV_EQ && input.LA(1) <= L_EQ)||input.LA(1)==L_LEFT_EQ||input.LA(1)==L_MINUS_EQ||input.LA(1)==L_MULT_EQ||input.LA(1)==L_OR_EQ||input.LA(1)==L_PERC_EQ||input.LA(1)==L_PLUS_EQ||input.LA(1)==L_RIGHT_EQ||input.LA(1)==L_XOR_EQ ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set367)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "assign"


    public static class simple_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:644:1: simple_expr_wrapper : simple_expr -> ^( SIMPLE_EXPR simple_expr ) ;
    public final ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper() throws RecognitionException {
        ObjcmParser.simple_expr_wrapper_return retval = new ObjcmParser.simple_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_expr_return simple_expr368 =null;


        RewriteRuleSubtreeStream stream_simple_expr=new RewriteRuleSubtreeStream(adaptor,"rule simple_expr");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:645:2: ( simple_expr -> ^( SIMPLE_EXPR simple_expr ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:645:4: simple_expr
            {
            pushFollow(FOLLOW_simple_expr_in_simple_expr_wrapper3335);
            simple_expr368=simple_expr();

            state._fsp--;

            stream_simple_expr.add(simple_expr368.getTree());

            // AST REWRITE
            // elements: simple_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 645:16: -> ^( SIMPLE_EXPR simple_expr )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:645:19: ^( SIMPLE_EXPR simple_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SIMPLE_EXPR, "SIMPLE_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr_wrapper"


    public static class simple_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:647:1: simple_expr : expr_or_or -> ^( EXPR_OR_OR expr_or_or ) ;
    public final ObjcmParser.simple_expr_return simple_expr() throws RecognitionException {
        ObjcmParser.simple_expr_return retval = new ObjcmParser.simple_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_or_return expr_or_or369 =null;


        RewriteRuleSubtreeStream stream_expr_or_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or_or");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:648:2: ( expr_or_or -> ^( EXPR_OR_OR expr_or_or ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:648:4: expr_or_or
            {
            pushFollow(FOLLOW_expr_or_or_in_simple_expr3353);
            expr_or_or369=expr_or_or();

            state._fsp--;

            stream_expr_or_or.add(expr_or_or369.getTree());

            // AST REWRITE
            // elements: expr_or_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 648:15: -> ^( EXPR_OR_OR expr_or_or )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:648:18: ^( EXPR_OR_OR expr_or_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR_OR, "EXPR_OR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expr"


    public static class expr_or_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_or"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:650:1: expr_or_or : expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_or_or_return expr_or_or() throws RecognitionException {
        ObjcmParser.expr_or_or_return retval = new ObjcmParser.expr_or_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR_OR371=null;
        ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper370 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper372 =null;


        Object L_OR_OR371_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:651:2: ( expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:651:4: expr_and_and_wrapper ( L_OR_OR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_and_wrapper_in_expr_or_or3370);
            expr_and_and_wrapper370=expr_and_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_and_wrapper370.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:651:25: ( L_OR_OR simple_expr_wrapper )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==L_OR_OR) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:651:26: L_OR_OR simple_expr_wrapper
            	    {
            	    L_OR_OR371=(Token)match(input,L_OR_OR,FOLLOW_L_OR_OR_in_expr_or_or3373); 
            	    L_OR_OR371_tree = 
            	    (Object)adaptor.create(L_OR_OR371)
            	    ;
            	    adaptor.addChild(root_0, L_OR_OR371_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_or_or3375);
            	    simple_expr_wrapper372=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper372.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_or"


    public static class expr_and_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:653:1: expr_and_and_wrapper : expr_and_and -> ^( EXPR_AND_AND expr_and_and ) ;
    public final ObjcmParser.expr_and_and_wrapper_return expr_and_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_and_wrapper_return retval = new ObjcmParser.expr_and_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_and_return expr_and_and373 =null;


        RewriteRuleSubtreeStream stream_expr_and_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and_and");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:654:2: ( expr_and_and -> ^( EXPR_AND_AND expr_and_and ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:654:4: expr_and_and
            {
            pushFollow(FOLLOW_expr_and_and_in_expr_and_and_wrapper3386);
            expr_and_and373=expr_and_and();

            state._fsp--;

            stream_expr_and_and.add(expr_and_and373.getTree());

            // AST REWRITE
            // elements: expr_and_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 654:17: -> ^( EXPR_AND_AND expr_and_and )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:654:20: ^( EXPR_AND_AND expr_and_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND_AND, "EXPR_AND_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and_wrapper"


    public static class expr_and_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_and"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:656:1: expr_and_and : expr_or_wrapper ( L_AND_AND simple_expr_wrapper )* ;
    public final ObjcmParser.expr_and_and_return expr_and_and() throws RecognitionException {
        ObjcmParser.expr_and_and_return retval = new ObjcmParser.expr_and_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND_AND375=null;
        ObjcmParser.expr_or_wrapper_return expr_or_wrapper374 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper376 =null;


        Object L_AND_AND375_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:657:2: ( expr_or_wrapper ( L_AND_AND simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:657:4: expr_or_wrapper ( L_AND_AND simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_or_wrapper_in_expr_and_and3403);
            expr_or_wrapper374=expr_or_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_or_wrapper374.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:657:20: ( L_AND_AND simple_expr_wrapper )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==L_AND_AND) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:657:21: L_AND_AND simple_expr_wrapper
            	    {
            	    L_AND_AND375=(Token)match(input,L_AND_AND,FOLLOW_L_AND_AND_in_expr_and_and3406); 
            	    L_AND_AND375_tree = 
            	    (Object)adaptor.create(L_AND_AND375)
            	    ;
            	    adaptor.addChild(root_0, L_AND_AND375_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_and_and3408);
            	    simple_expr_wrapper376=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper376.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_and"


    public static class expr_or_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:659:1: expr_or_wrapper : expr_or -> ^( EXPR_OR expr_or ) ;
    public final ObjcmParser.expr_or_wrapper_return expr_or_wrapper() throws RecognitionException {
        ObjcmParser.expr_or_wrapper_return retval = new ObjcmParser.expr_or_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_or_return expr_or377 =null;


        RewriteRuleSubtreeStream stream_expr_or=new RewriteRuleSubtreeStream(adaptor,"rule expr_or");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:660:2: ( expr_or -> ^( EXPR_OR expr_or ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:660:4: expr_or
            {
            pushFollow(FOLLOW_expr_or_in_expr_or_wrapper3419);
            expr_or377=expr_or();

            state._fsp--;

            stream_expr_or.add(expr_or377.getTree());

            // AST REWRITE
            // elements: expr_or
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 660:12: -> ^( EXPR_OR expr_or )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:660:15: ^( EXPR_OR expr_or )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_OR, "EXPR_OR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_or.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or_wrapper"


    public static class expr_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_or"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:662:1: expr_or : expr_xor_wrapper ( L_OR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_or_return expr_or() throws RecognitionException {
        ObjcmParser.expr_or_return retval = new ObjcmParser.expr_or_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_OR379=null;
        ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper378 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper380 =null;


        Object L_OR379_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:663:2: ( expr_xor_wrapper ( L_OR simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:663:4: expr_xor_wrapper ( L_OR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_xor_wrapper_in_expr_or3437);
            expr_xor_wrapper378=expr_xor_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_xor_wrapper378.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:663:21: ( L_OR simple_expr_wrapper )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==L_OR) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:663:22: L_OR simple_expr_wrapper
            	    {
            	    L_OR379=(Token)match(input,L_OR,FOLLOW_L_OR_in_expr_or3440); 
            	    L_OR379_tree = 
            	    (Object)adaptor.create(L_OR379)
            	    ;
            	    adaptor.addChild(root_0, L_OR379_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_or3442);
            	    simple_expr_wrapper380=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper380.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_or"


    public static class expr_xor_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:665:1: expr_xor_wrapper : expr_xor -> ^( EXPR_XOR expr_xor ) ;
    public final ObjcmParser.expr_xor_wrapper_return expr_xor_wrapper() throws RecognitionException {
        ObjcmParser.expr_xor_wrapper_return retval = new ObjcmParser.expr_xor_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_xor_return expr_xor381 =null;


        RewriteRuleSubtreeStream stream_expr_xor=new RewriteRuleSubtreeStream(adaptor,"rule expr_xor");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:666:2: ( expr_xor -> ^( EXPR_XOR expr_xor ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:666:4: expr_xor
            {
            pushFollow(FOLLOW_expr_xor_in_expr_xor_wrapper3453);
            expr_xor381=expr_xor();

            state._fsp--;

            stream_expr_xor.add(expr_xor381.getTree());

            // AST REWRITE
            // elements: expr_xor
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 666:13: -> ^( EXPR_XOR expr_xor )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:666:16: ^( EXPR_XOR expr_xor )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_XOR, "EXPR_XOR")
                , root_1);

                adaptor.addChild(root_1, stream_expr_xor.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor_wrapper"


    public static class expr_xor_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xor"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:668:1: expr_xor : expr_and_wrapper ( L_XOR simple_expr_wrapper )* ;
    public final ObjcmParser.expr_xor_return expr_xor() throws RecognitionException {
        ObjcmParser.expr_xor_return retval = new ObjcmParser.expr_xor_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_XOR383=null;
        ObjcmParser.expr_and_wrapper_return expr_and_wrapper382 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper384 =null;


        Object L_XOR383_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:669:2: ( expr_and_wrapper ( L_XOR simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:669:4: expr_and_wrapper ( L_XOR simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_and_wrapper_in_expr_xor3470);
            expr_and_wrapper382=expr_and_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_and_wrapper382.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:669:21: ( L_XOR simple_expr_wrapper )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==L_XOR) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:669:22: L_XOR simple_expr_wrapper
            	    {
            	    L_XOR383=(Token)match(input,L_XOR,FOLLOW_L_XOR_in_expr_xor3473); 
            	    L_XOR383_tree = 
            	    (Object)adaptor.create(L_XOR383)
            	    ;
            	    adaptor.addChild(root_0, L_XOR383_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_xor3475);
            	    simple_expr_wrapper384=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper384.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xor"


    public static class expr_and_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:671:1: expr_and_wrapper : expr_and -> ^( EXPR_AND expr_and ) ;
    public final ObjcmParser.expr_and_wrapper_return expr_and_wrapper() throws RecognitionException {
        ObjcmParser.expr_and_wrapper_return retval = new ObjcmParser.expr_and_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_and_return expr_and385 =null;


        RewriteRuleSubtreeStream stream_expr_and=new RewriteRuleSubtreeStream(adaptor,"rule expr_and");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:672:2: ( expr_and -> ^( EXPR_AND expr_and ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:672:4: expr_and
            {
            pushFollow(FOLLOW_expr_and_in_expr_and_wrapper3487);
            expr_and385=expr_and();

            state._fsp--;

            stream_expr_and.add(expr_and385.getTree());

            // AST REWRITE
            // elements: expr_and
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 672:13: -> ^( EXPR_AND expr_and )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:672:16: ^( EXPR_AND expr_and )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_AND, "EXPR_AND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_and.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and_wrapper"


    public static class expr_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_and"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:674:1: expr_and : expr_eq_wrapper ( L_AND simple_expr_wrapper )* ;
    public final ObjcmParser.expr_and_return expr_and() throws RecognitionException {
        ObjcmParser.expr_and_return retval = new ObjcmParser.expr_and_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND387=null;
        ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper386 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper388 =null;


        Object L_AND387_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:675:2: ( expr_eq_wrapper ( L_AND simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:675:4: expr_eq_wrapper ( L_AND simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_eq_wrapper_in_expr_and3505);
            expr_eq_wrapper386=expr_eq_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_eq_wrapper386.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:675:20: ( L_AND simple_expr_wrapper )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==L_AND) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:675:21: L_AND simple_expr_wrapper
            	    {
            	    L_AND387=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_and3508); 
            	    L_AND387_tree = 
            	    (Object)adaptor.create(L_AND387)
            	    ;
            	    adaptor.addChild(root_0, L_AND387_tree);


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_and3510);
            	    simple_expr_wrapper388=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper388.getTree());

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_and"


    public static class expr_eq_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:677:1: expr_eq_wrapper : expr_eq -> ^( EXPR_EQ expr_eq ) ;
    public final ObjcmParser.expr_eq_wrapper_return expr_eq_wrapper() throws RecognitionException {
        ObjcmParser.expr_eq_wrapper_return retval = new ObjcmParser.expr_eq_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_eq_return expr_eq389 =null;


        RewriteRuleSubtreeStream stream_expr_eq=new RewriteRuleSubtreeStream(adaptor,"rule expr_eq");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:678:2: ( expr_eq -> ^( EXPR_EQ expr_eq ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:678:4: expr_eq
            {
            pushFollow(FOLLOW_expr_eq_in_expr_eq_wrapper3522);
            expr_eq389=expr_eq();

            state._fsp--;

            stream_expr_eq.add(expr_eq389.getTree());

            // AST REWRITE
            // elements: expr_eq
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 678:12: -> ^( EXPR_EQ expr_eq )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:678:15: ^( EXPR_EQ expr_eq )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_EQ, "EXPR_EQ")
                , root_1);

                adaptor.addChild(root_1, stream_expr_eq.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq_wrapper"


    public static class expr_eq_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_eq"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:680:1: expr_eq : expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_eq_return expr_eq() throws RecognitionException {
        ObjcmParser.expr_eq_return retval = new ObjcmParser.expr_eq_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set391=null;
        ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper390 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper392 =null;


        Object set391_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:681:2: ( expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:681:4: expr_cond_wrapper ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_cond_wrapper_in_expr_eq3540);
            expr_cond_wrapper390=expr_cond_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_cond_wrapper390.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:681:22: ( ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==L_EQ_EQ||LA94_0==L_NEQ) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:681:23: ( L_EQ_EQ | L_NEQ ) simple_expr_wrapper
            	    {
            	    set391=(Token)input.LT(1);

            	    if ( input.LA(1)==L_EQ_EQ||input.LA(1)==L_NEQ ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set391)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_eq3551);
            	    simple_expr_wrapper392=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper392.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_eq"


    public static class expr_cond_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:683:1: expr_cond_wrapper : expr_cond -> ^( EXPR_COND expr_cond ) ;
    public final ObjcmParser.expr_cond_wrapper_return expr_cond_wrapper() throws RecognitionException {
        ObjcmParser.expr_cond_wrapper_return retval = new ObjcmParser.expr_cond_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_cond_return expr_cond393 =null;


        RewriteRuleSubtreeStream stream_expr_cond=new RewriteRuleSubtreeStream(adaptor,"rule expr_cond");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:684:2: ( expr_cond -> ^( EXPR_COND expr_cond ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:684:4: expr_cond
            {
            pushFollow(FOLLOW_expr_cond_in_expr_cond_wrapper3562);
            expr_cond393=expr_cond();

            state._fsp--;

            stream_expr_cond.add(expr_cond393.getTree());

            // AST REWRITE
            // elements: expr_cond
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 684:14: -> ^( EXPR_COND expr_cond )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:684:17: ^( EXPR_COND expr_cond )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_COND, "EXPR_COND")
                , root_1);

                adaptor.addChild(root_1, stream_expr_cond.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond_wrapper"


    public static class expr_cond_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_cond"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:686:1: expr_cond : expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_cond_return expr_cond() throws RecognitionException {
        ObjcmParser.expr_cond_return retval = new ObjcmParser.expr_cond_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set395=null;
        ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper394 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper396 =null;


        Object set395_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:687:2: ( expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:687:4: expr_mov_wrapper ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mov_wrapper_in_expr_cond3579);
            expr_mov_wrapper394=expr_mov_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mov_wrapper394.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:687:21: ( ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( ((LA95_0 >= L_LESS && LA95_0 <= L_LESS_EQ)||(LA95_0 >= L_MORE && LA95_0 <= L_MORE_EQ)) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:687:22: ( L_LESS | L_MORE | L_LESS_EQ | L_MORE_EQ ) simple_expr_wrapper
            	    {
            	    set395=(Token)input.LT(1);

            	    if ( (input.LA(1) >= L_LESS && input.LA(1) <= L_LESS_EQ)||(input.LA(1) >= L_MORE && input.LA(1) <= L_MORE_EQ) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set395)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_cond3598);
            	    simple_expr_wrapper396=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper396.getTree());

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_cond"


    public static class expr_mov_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:689:1: expr_mov_wrapper : expr_mov -> ^( EXPR_MOV expr_mov ) ;
    public final ObjcmParser.expr_mov_wrapper_return expr_mov_wrapper() throws RecognitionException {
        ObjcmParser.expr_mov_wrapper_return retval = new ObjcmParser.expr_mov_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mov_return expr_mov397 =null;


        RewriteRuleSubtreeStream stream_expr_mov=new RewriteRuleSubtreeStream(adaptor,"rule expr_mov");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:690:2: ( expr_mov -> ^( EXPR_MOV expr_mov ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:690:4: expr_mov
            {
            pushFollow(FOLLOW_expr_mov_in_expr_mov_wrapper3609);
            expr_mov397=expr_mov();

            state._fsp--;

            stream_expr_mov.add(expr_mov397.getTree());

            // AST REWRITE
            // elements: expr_mov
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 690:13: -> ^( EXPR_MOV expr_mov )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:690:16: ^( EXPR_MOV expr_mov )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MOV, "EXPR_MOV")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mov.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov_wrapper"


    public static class expr_mov_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mov"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:692:1: expr_mov : expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_mov_return expr_mov() throws RecognitionException {
        ObjcmParser.expr_mov_return retval = new ObjcmParser.expr_mov_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set399=null;
        ObjcmParser.expr_add_wrapper_return expr_add_wrapper398 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper400 =null;


        Object set399_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:693:2: ( expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:693:4: expr_add_wrapper ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_add_wrapper_in_expr_mov3627);
            expr_add_wrapper398=expr_add_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_add_wrapper398.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:693:21: ( ( L_LEFT | L_RIGHT ) simple_expr_wrapper )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==L_LEFT||LA96_0==L_RIGHT) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:693:22: ( L_LEFT | L_RIGHT ) simple_expr_wrapper
            	    {
            	    set399=(Token)input.LT(1);

            	    if ( input.LA(1)==L_LEFT||input.LA(1)==L_RIGHT ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set399)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_mov3638);
            	    simple_expr_wrapper400=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper400.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mov"


    public static class expr_add_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:695:1: expr_add_wrapper : expr_add -> ^( EXPR_ADD expr_add ) ;
    public final ObjcmParser.expr_add_wrapper_return expr_add_wrapper() throws RecognitionException {
        ObjcmParser.expr_add_wrapper_return retval = new ObjcmParser.expr_add_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_add_return expr_add401 =null;


        RewriteRuleSubtreeStream stream_expr_add=new RewriteRuleSubtreeStream(adaptor,"rule expr_add");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:696:2: ( expr_add -> ^( EXPR_ADD expr_add ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:696:4: expr_add
            {
            pushFollow(FOLLOW_expr_add_in_expr_add_wrapper3650);
            expr_add401=expr_add();

            state._fsp--;

            stream_expr_add.add(expr_add401.getTree());

            // AST REWRITE
            // elements: expr_add
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 696:13: -> ^( EXPR_ADD expr_add )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:696:16: ^( EXPR_ADD expr_add )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_ADD, "EXPR_ADD")
                , root_1);

                adaptor.addChild(root_1, stream_expr_add.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add_wrapper"


    public static class expr_add_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_add"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:698:1: expr_add : expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )* ;
    public final ObjcmParser.expr_add_return expr_add() throws RecognitionException {
        ObjcmParser.expr_add_return retval = new ObjcmParser.expr_add_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set403=null;
        ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper402 =null;

        ObjcmParser.simple_expr_wrapper_return simple_expr_wrapper404 =null;


        Object set403_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:699:2: ( expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:699:4: expr_mult_wrapper ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_mult_wrapper_in_expr_add3667);
            expr_mult_wrapper402=expr_mult_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_mult_wrapper402.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:699:22: ( ( L_PLUS | L_MINUS ) simple_expr_wrapper )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==L_MINUS||LA97_0==L_PLUS) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:699:23: ( L_PLUS | L_MINUS ) simple_expr_wrapper
            	    {
            	    set403=(Token)input.LT(1);

            	    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set403)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_simple_expr_wrapper_in_expr_add3678);
            	    simple_expr_wrapper404=simple_expr_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_expr_wrapper404.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_add"


    public static class expr_mult_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:701:1: expr_mult_wrapper : expr_mult -> ^( EXPR_MULT expr_mult ) ;
    public final ObjcmParser.expr_mult_wrapper_return expr_mult_wrapper() throws RecognitionException {
        ObjcmParser.expr_mult_wrapper_return retval = new ObjcmParser.expr_mult_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_mult_return expr_mult405 =null;


        RewriteRuleSubtreeStream stream_expr_mult=new RewriteRuleSubtreeStream(adaptor,"rule expr_mult");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:702:2: ( expr_mult -> ^( EXPR_MULT expr_mult ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:702:4: expr_mult
            {
            pushFollow(FOLLOW_expr_mult_in_expr_mult_wrapper3689);
            expr_mult405=expr_mult();

            state._fsp--;

            stream_expr_mult.add(expr_mult405.getTree());

            // AST REWRITE
            // elements: expr_mult
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 702:14: -> ^( EXPR_MULT expr_mult )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:702:17: ^( EXPR_MULT expr_mult )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_MULT, "EXPR_MULT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_mult.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult_wrapper"


    public static class expr_mult_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_mult"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:704:1: expr_mult : expr_unname_wrapper ( ( ASTERISK | L_DIV | L_PERC ) expr_unname_wrapper )* ;
    public final ObjcmParser.expr_mult_return expr_mult() throws RecognitionException {
        ObjcmParser.expr_mult_return retval = new ObjcmParser.expr_mult_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set407=null;
        ObjcmParser.expr_unname_wrapper_return expr_unname_wrapper406 =null;

        ObjcmParser.expr_unname_wrapper_return expr_unname_wrapper408 =null;


        Object set407_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:705:2: ( expr_unname_wrapper ( ( ASTERISK | L_DIV | L_PERC ) expr_unname_wrapper )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:705:4: expr_unname_wrapper ( ( ASTERISK | L_DIV | L_PERC ) expr_unname_wrapper )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_expr_unname_wrapper_in_expr_mult3706);
            expr_unname_wrapper406=expr_unname_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_unname_wrapper406.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:705:24: ( ( ASTERISK | L_DIV | L_PERC ) expr_unname_wrapper )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==ASTERISK||LA98_0==L_DIV||LA98_0==L_PERC) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:705:25: ( ASTERISK | L_DIV | L_PERC ) expr_unname_wrapper
            	    {
            	    set407=(Token)input.LT(1);

            	    if ( input.LA(1)==ASTERISK||input.LA(1)==L_DIV||input.LA(1)==L_PERC ) {
            	        input.consume();
            	        adaptor.addChild(root_0, 
            	        (Object)adaptor.create(set407)
            	        );
            	        state.errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_expr_unname_wrapper_in_expr_mult3721);
            	    expr_unname_wrapper408=expr_unname_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, expr_unname_wrapper408.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_mult"


    public static class expr_unname_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_unname_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:707:1: expr_unname_wrapper : expr_unname -> ^( EXPR_UNNAME expr_unname ) ;
    public final ObjcmParser.expr_unname_wrapper_return expr_unname_wrapper() throws RecognitionException {
        ObjcmParser.expr_unname_wrapper_return retval = new ObjcmParser.expr_unname_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_unname_return expr_unname409 =null;


        RewriteRuleSubtreeStream stream_expr_unname=new RewriteRuleSubtreeStream(adaptor,"rule expr_unname");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:708:2: ( expr_unname -> ^( EXPR_UNNAME expr_unname ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:708:4: expr_unname
            {
            pushFollow(FOLLOW_expr_unname_in_expr_unname_wrapper3733);
            expr_unname409=expr_unname();

            state._fsp--;

            stream_expr_unname.add(expr_unname409.getTree());

            // AST REWRITE
            // elements: expr_unname
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 708:16: -> ^( EXPR_UNNAME expr_unname )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:708:19: ^( EXPR_UNNAME expr_unname )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_UNNAME, "EXPR_UNNAME")
                , root_1);

                adaptor.addChild(root_1, stream_expr_unname.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_unname_wrapper"


    public static class expr_unname_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_unname"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:710:1: expr_unname : ( ASTERISK ( type_convertion )? )? expr_addr ;
    public final ObjcmParser.expr_unname_return expr_unname() throws RecognitionException {
        ObjcmParser.expr_unname_return retval = new ObjcmParser.expr_unname_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK410=null;
        ObjcmParser.type_convertion_return type_convertion411 =null;

        ObjcmParser.expr_addr_return expr_addr412 =null;


        Object ASTERISK410_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:711:2: ( ( ASTERISK ( type_convertion )? )? expr_addr )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:711:4: ( ASTERISK ( type_convertion )? )? expr_addr
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:711:4: ( ASTERISK ( type_convertion )? )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==ASTERISK) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:711:5: ASTERISK ( type_convertion )?
                    {
                    ASTERISK410=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_expr_unname3754); 
                    ASTERISK410_tree = 
                    (Object)adaptor.create(ASTERISK410)
                    ;
                    adaptor.addChild(root_0, ASTERISK410_tree);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:711:14: ( type_convertion )?
                    int alt99=2;
                    alt99 = dfa99.predict(input);
                    switch (alt99) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:711:14: type_convertion
                            {
                            pushFollow(FOLLOW_type_convertion_in_expr_unname3756);
                            type_convertion411=type_convertion();

                            state._fsp--;

                            adaptor.addChild(root_0, type_convertion411.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_addr_in_expr_unname3761);
            expr_addr412=expr_addr();

            state._fsp--;

            adaptor.addChild(root_0, expr_addr412.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_unname"


    public static class expr_addr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_addr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:713:1: expr_addr : ( L_AND )? expr_sign ;
    public final ObjcmParser.expr_addr_return expr_addr() throws RecognitionException {
        ObjcmParser.expr_addr_return retval = new ObjcmParser.expr_addr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_AND413=null;
        ObjcmParser.expr_sign_return expr_sign414 =null;


        Object L_AND413_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:714:2: ( ( L_AND )? expr_sign )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:714:4: ( L_AND )? expr_sign
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:714:4: ( L_AND )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==L_AND) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:714:4: L_AND
                    {
                    L_AND413=(Token)match(input,L_AND,FOLLOW_L_AND_in_expr_addr3771); 
                    L_AND413_tree = 
                    (Object)adaptor.create(L_AND413)
                    ;
                    adaptor.addChild(root_0, L_AND413_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_sign_in_expr_addr3774);
            expr_sign414=expr_sign();

            state._fsp--;

            adaptor.addChild(root_0, expr_sign414.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_addr"


    public static class expr_sign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_sign"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:716:1: expr_sign : ( L_MINUS | L_PLUS )? expr_not_wrapper ;
    public final ObjcmParser.expr_sign_return expr_sign() throws RecognitionException {
        ObjcmParser.expr_sign_return retval = new ObjcmParser.expr_sign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set415=null;
        ObjcmParser.expr_not_wrapper_return expr_not_wrapper416 =null;


        Object set415_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:717:2: ( ( L_MINUS | L_PLUS )? expr_not_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:717:4: ( L_MINUS | L_PLUS )? expr_not_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:717:4: ( L_MINUS | L_PLUS )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==L_MINUS||LA102_0==L_PLUS) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
                    {
                    set415=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set415)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not_wrapper_in_expr_sign3793);
            expr_not_wrapper416=expr_not_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, expr_not_wrapper416.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_sign"


    public static class expr_not_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:719:1: expr_not_wrapper : expr_not -> ^( EXPR_NOT expr_not ) ;
    public final ObjcmParser.expr_not_wrapper_return expr_not_wrapper() throws RecognitionException {
        ObjcmParser.expr_not_wrapper_return retval = new ObjcmParser.expr_not_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.expr_not_return expr_not417 =null;


        RewriteRuleSubtreeStream stream_expr_not=new RewriteRuleSubtreeStream(adaptor,"rule expr_not");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:720:2: ( expr_not -> ^( EXPR_NOT expr_not ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:720:4: expr_not
            {
            pushFollow(FOLLOW_expr_not_in_expr_not_wrapper3803);
            expr_not417=expr_not();

            state._fsp--;

            stream_expr_not.add(expr_not417.getTree());

            // AST REWRITE
            // elements: expr_not
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 720:13: -> ^( EXPR_NOT expr_not )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:720:16: ^( EXPR_NOT expr_not )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                , root_1);

                adaptor.addChild(root_1, stream_expr_not.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not_wrapper"


    public static class expr_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:722:1: expr_not : ( L_NOT )? expr_not2 ;
    public final ObjcmParser.expr_not_return expr_not() throws RecognitionException {
        ObjcmParser.expr_not_return retval = new ObjcmParser.expr_not_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_NOT418=null;
        ObjcmParser.expr_not2_return expr_not2419 =null;


        Object L_NOT418_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:723:2: ( ( L_NOT )? expr_not2 )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:723:4: ( L_NOT )? expr_not2
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:723:4: ( L_NOT )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==L_NOT) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:723:4: L_NOT
                    {
                    L_NOT418=(Token)match(input,L_NOT,FOLLOW_L_NOT_in_expr_not3822); 
                    L_NOT418_tree = 
                    (Object)adaptor.create(L_NOT418)
                    ;
                    adaptor.addChild(root_0, L_NOT418_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_not2_in_expr_not3825);
            expr_not2419=expr_not2();

            state._fsp--;

            adaptor.addChild(root_0, expr_not2419.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not"


    public static class expr_not2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_not2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:725:1: expr_not2 : ( L_TILDA )? expr_size_of ;
    public final ObjcmParser.expr_not2_return expr_not2() throws RecognitionException {
        ObjcmParser.expr_not2_return retval = new ObjcmParser.expr_not2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_TILDA420=null;
        ObjcmParser.expr_size_of_return expr_size_of421 =null;


        Object L_TILDA420_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:726:2: ( ( L_TILDA )? expr_size_of )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:726:4: ( L_TILDA )? expr_size_of
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:726:4: ( L_TILDA )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==L_TILDA) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:726:4: L_TILDA
                    {
                    L_TILDA420=(Token)match(input,L_TILDA,FOLLOW_L_TILDA_in_expr_not23835); 
                    L_TILDA420_tree = 
                    (Object)adaptor.create(L_TILDA420)
                    ;
                    adaptor.addChild(root_0, L_TILDA420_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_size_of_in_expr_not23838);
            expr_size_of421=expr_size_of();

            state._fsp--;

            adaptor.addChild(root_0, expr_size_of421.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_not2"


    public static class expr_size_of_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_size_of"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:728:1: expr_size_of : ( SIZEOF )? expr_xcrement ;
    public final ObjcmParser.expr_size_of_return expr_size_of() throws RecognitionException {
        ObjcmParser.expr_size_of_return retval = new ObjcmParser.expr_size_of_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SIZEOF422=null;
        ObjcmParser.expr_xcrement_return expr_xcrement423 =null;


        Object SIZEOF422_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:729:2: ( ( SIZEOF )? expr_xcrement )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:729:4: ( SIZEOF )? expr_xcrement
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:729:4: ( SIZEOF )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==SIZEOF) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:729:4: SIZEOF
                    {
                    SIZEOF422=(Token)match(input,SIZEOF,FOLLOW_SIZEOF_in_expr_size_of3848); 
                    SIZEOF422_tree = 
                    (Object)adaptor.create(SIZEOF422)
                    ;
                    adaptor.addChild(root_0, SIZEOF422_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_expr_xcrement_in_expr_size_of3851);
            expr_xcrement423=expr_xcrement();

            state._fsp--;

            adaptor.addChild(root_0, expr_xcrement423.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_size_of"


    public static class expr_xcrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "expr_xcrement"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:731:1: expr_xcrement : ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 ;
    public final ObjcmParser.expr_xcrement_return expr_xcrement() throws RecognitionException {
        ObjcmParser.expr_xcrement_return retval = new ObjcmParser.expr_xcrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set424=null;
        ObjcmParser.object_wrapped1_return object_wrapped1425 =null;


        Object set424_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:732:2: ( ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1 )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:732:4: ( L_PLUS_PLUS | L_MINUS_MINUS )? object_wrapped1
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:732:4: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==L_MINUS_MINUS||LA106_0==L_PLUS_PLUS) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
                    {
                    set424=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set424)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            pushFollow(FOLLOW_object_wrapped1_in_expr_xcrement3870);
            object_wrapped1425=object_wrapped1();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped1425.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expr_xcrement"


    public static class object_wrapped1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped1"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:734:1: object_wrapped1 : object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? ;
    public final ObjcmParser.object_wrapped1_return object_wrapped1() throws RecognitionException {
        ObjcmParser.object_wrapped1_return retval = new ObjcmParser.object_wrapped1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set427=null;
        ObjcmParser.object_wrapped2_return object_wrapped2426 =null;


        Object set427_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:735:2: ( object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:735:4: object_wrapped2 ( L_PLUS_PLUS | L_MINUS_MINUS )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_wrapped2_in_object_wrapped13880);
            object_wrapped2426=object_wrapped2();

            state._fsp--;

            adaptor.addChild(root_0, object_wrapped2426.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:735:20: ( L_PLUS_PLUS | L_MINUS_MINUS )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==L_MINUS_MINUS||LA107_0==L_PLUS_PLUS) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
                    {
                    set427=(Token)input.LT(1);

                    if ( input.LA(1)==L_MINUS_MINUS||input.LA(1)==L_PLUS_PLUS ) {
                        input.consume();
                        adaptor.addChild(root_0, 
                        (Object)adaptor.create(set427)
                        );
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped1"


    public static class object_wrapped2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_wrapped2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:738:1: object_wrapped2 : ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR l_br_end -> ^( L_BR_TOKEN l_br_end ) | const_expr_wrapper | a_started );
    public final ObjcmParser.object_wrapped2_return object_wrapped2() throws RecognitionException {
        ObjcmParser.object_wrapped2_return retval = new ObjcmParser.object_wrapped2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal428=null;
        Token L_BR433=null;
        ObjcmParser.object_name_return object_name429 =null;

        ObjcmParser.generic_return generic430 =null;

        ObjcmParser.method_call_wrapper_return method_call_wrapper431 =null;

        ObjcmParser.id_part_end_return id_part_end432 =null;

        ObjcmParser.l_br_end_return l_br_end434 =null;

        ObjcmParser.const_expr_wrapper_return const_expr_wrapper435 =null;

        ObjcmParser.a_started_return a_started436 =null;


        Object string_literal428_tree=null;
        Object L_BR433_tree=null;
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleSubtreeStream stream_l_br_end=new RewriteRuleSubtreeStream(adaptor,"rule l_br_end");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:739:2: ( ( 'unsigned' )? object_name ( generic )? | method_call_wrapper ( id_part_end )? | L_BR l_br_end -> ^( L_BR_TOKEN l_br_end ) | const_expr_wrapper | a_started )
            int alt111=5;
            switch ( input.LA(1) ) {
            case ID:
            case 185:
            case 188:
            case 196:
            case 199:
            case 204:
                {
                alt111=1;
                }
                break;
            case L_KBR:
                {
                alt111=2;
                }
                break;
            case L_BR:
                {
                alt111=3;
                }
                break;
            case NUMBER:
            case STRING_LITERAL:
            case STRING_LITERAL2:
            case STRING_LITERAL3:
            case 182:
            case 198:
                {
                alt111=4;
                }
                break;
            case 169:
            case 176:
            case 178:
                {
                alt111=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }

            switch (alt111) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:739:5: ( 'unsigned' )? object_name ( generic )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:739:5: ( 'unsigned' )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==204) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:739:5: 'unsigned'
                            {
                            string_literal428=(Token)match(input,204,FOLLOW_204_in_object_wrapped23901); 
                            string_literal428_tree = 
                            (Object)adaptor.create(string_literal428)
                            ;
                            adaptor.addChild(root_0, string_literal428_tree);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_object_name_in_object_wrapped23904);
                    object_name429=object_name();

                    state._fsp--;

                    adaptor.addChild(root_0, object_name429.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:739:29: ( generic )?
                    int alt109=2;
                    alt109 = dfa109.predict(input);
                    switch (alt109) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:739:29: generic
                            {
                            pushFollow(FOLLOW_generic_in_object_wrapped23906);
                            generic430=generic();

                            state._fsp--;

                            adaptor.addChild(root_0, generic430.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:740:4: method_call_wrapper ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_call_wrapper_in_object_wrapped23912);
                    method_call_wrapper431=method_call_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, method_call_wrapper431.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:740:24: ( id_part_end )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==DOT||LA110_0==166) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:740:24: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_object_wrapped23914);
                            id_part_end432=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end432.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:741:4: L_BR l_br_end
                    {
                    L_BR433=(Token)match(input,L_BR,FOLLOW_L_BR_in_object_wrapped23920);  
                    stream_L_BR.add(L_BR433);


                    pushFollow(FOLLOW_l_br_end_in_object_wrapped23922);
                    l_br_end434=l_br_end();

                    state._fsp--;

                    stream_l_br_end.add(l_br_end434.getTree());

                    // AST REWRITE
                    // elements: l_br_end
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 741:18: -> ^( L_BR_TOKEN l_br_end )
                    {
                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:741:21: ^( L_BR_TOKEN l_br_end )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(L_BR_TOKEN, "L_BR_TOKEN")
                        , root_1);

                        adaptor.addChild(root_1, stream_l_br_end.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 4 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:742:4: const_expr_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_const_expr_wrapper_in_object_wrapped23935);
                    const_expr_wrapper435=const_expr_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, const_expr_wrapper435.getTree());

                    }
                    break;
                case 5 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:743:4: a_started
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_started_in_object_wrapped23940);
                    a_started436=a_started();

                    state._fsp--;

                    adaptor.addChild(root_0, a_started436.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_wrapped2"


    public static class l_br_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "l_br_end"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:746:1: l_br_end : ( type_convertion_internal_wrapper R_BR classical_expr_wrp -> ^( TYPE_CONVERTION2 type_convertion_internal_wrapper classical_expr_wrp ) | classical_expr_wrp R_BR ( id_part_end )? );
    public final ObjcmParser.l_br_end_return l_br_end() throws RecognitionException {
        ObjcmParser.l_br_end_return retval = new ObjcmParser.l_br_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token R_BR438=null;
        Token R_BR441=null;
        ObjcmParser.type_convertion_internal_wrapper_return type_convertion_internal_wrapper437 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp439 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp440 =null;

        ObjcmParser.id_part_end_return id_part_end442 =null;


        Object R_BR438_tree=null;
        Object R_BR441_tree=null;
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleSubtreeStream stream_type_convertion_internal_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule type_convertion_internal_wrapper");
        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:746:9: ( type_convertion_internal_wrapper R_BR classical_expr_wrp -> ^( TYPE_CONVERTION2 type_convertion_internal_wrapper classical_expr_wrp ) | classical_expr_wrp R_BR ( id_part_end )? )
            int alt113=2;
            alt113 = dfa113.predict(input);
            switch (alt113) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:746:11: type_convertion_internal_wrapper R_BR classical_expr_wrp
                    {
                    pushFollow(FOLLOW_type_convertion_internal_wrapper_in_l_br_end3949);
                    type_convertion_internal_wrapper437=type_convertion_internal_wrapper();

                    state._fsp--;

                    stream_type_convertion_internal_wrapper.add(type_convertion_internal_wrapper437.getTree());

                    R_BR438=(Token)match(input,R_BR,FOLLOW_R_BR_in_l_br_end3951);  
                    stream_R_BR.add(R_BR438);


                    pushFollow(FOLLOW_classical_expr_wrp_in_l_br_end3953);
                    classical_expr_wrp439=classical_expr_wrp();

                    state._fsp--;

                    stream_classical_expr_wrp.add(classical_expr_wrp439.getTree());

                    // AST REWRITE
                    // elements: type_convertion_internal_wrapper, classical_expr_wrp
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 746:68: -> ^( TYPE_CONVERTION2 type_convertion_internal_wrapper classical_expr_wrp )
                    {
                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:746:71: ^( TYPE_CONVERTION2 type_convertion_internal_wrapper classical_expr_wrp )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(TYPE_CONVERTION2, "TYPE_CONVERTION2")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_convertion_internal_wrapper.nextTree());

                        adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:747:4: classical_expr_wrp R_BR ( id_part_end )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_expr_wrp_in_l_br_end3968);
                    classical_expr_wrp440=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp440.getTree());

                    R_BR441=(Token)match(input,R_BR,FOLLOW_R_BR_in_l_br_end3970); 
                    R_BR441_tree = 
                    (Object)adaptor.create(R_BR441)
                    ;
                    adaptor.addChild(root_0, R_BR441_tree);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:747:28: ( id_part_end )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==DOT||LA112_0==166) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:747:28: id_part_end
                            {
                            pushFollow(FOLLOW_id_part_end_in_l_br_end3972);
                            id_part_end442=id_part_end();

                            state._fsp--;

                            adaptor.addChild(root_0, id_part_end442.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "l_br_end"


    public static class function_brackets_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:750:1: function_brackets_wrapper : function_brackets -> ^( FUNCTION function_brackets ) ;
    public final ObjcmParser.function_brackets_wrapper_return function_brackets_wrapper() throws RecognitionException {
        ObjcmParser.function_brackets_wrapper_return retval = new ObjcmParser.function_brackets_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.function_brackets_return function_brackets443 =null;


        RewriteRuleSubtreeStream stream_function_brackets=new RewriteRuleSubtreeStream(adaptor,"rule function_brackets");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:751:2: ( function_brackets -> ^( FUNCTION function_brackets ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:751:4: function_brackets
            {
            pushFollow(FOLLOW_function_brackets_in_function_brackets_wrapper3986);
            function_brackets443=function_brackets();

            state._fsp--;

            stream_function_brackets.add(function_brackets443.getTree());

            // AST REWRITE
            // elements: function_brackets
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 751:22: -> ^( FUNCTION function_brackets )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:751:25: ^( FUNCTION function_brackets )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNCTION, "FUNCTION")
                , root_1);

                adaptor.addChild(root_1, stream_function_brackets.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets_wrapper"


    public static class function_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "function_brackets"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:753:1: function_brackets : L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.function_brackets_return function_brackets() throws RecognitionException {
        ObjcmParser.function_brackets_return retval = new ObjcmParser.function_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR444=null;
        Token COMMA446=null;
        Token R_BR448=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp445 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp447 =null;


        Object L_BR444_tree=null;
        Object COMMA446_tree=null;
        Object R_BR448_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:754:2: ( L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:754:4: L_BR ( classical_expr_wrp ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR444=(Token)match(input,L_BR,FOLLOW_L_BR_in_function_brackets4005); 
            L_BR444_tree = 
            (Object)adaptor.create(L_BR444)
            ;
            adaptor.addChild(root_0, L_BR444_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:754:9: ( classical_expr_wrp ( COMMA classical_expr_wrp )* )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==ASTERISK||LA115_0==ID||LA115_0==L_AND||LA115_0==L_BR||LA115_0==L_KBR||LA115_0==L_MINUS||LA115_0==L_MINUS_MINUS||LA115_0==L_NOT||LA115_0==L_PLUS||LA115_0==L_PLUS_PLUS||LA115_0==L_TILDA||LA115_0==NUMBER||LA115_0==SIZEOF||(LA115_0 >= STRING_LITERAL && LA115_0 <= STRING_LITERAL3)||LA115_0==169||LA115_0==176||LA115_0==178||LA115_0==182||LA115_0==185||LA115_0==188||LA115_0==196||(LA115_0 >= 198 && LA115_0 <= 199)||LA115_0==204) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:754:10: classical_expr_wrp ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets4008);
                    classical_expr_wrp445=classical_expr_wrp();

                    state._fsp--;

                    adaptor.addChild(root_0, classical_expr_wrp445.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:754:29: ( COMMA classical_expr_wrp )*
                    loop114:
                    do {
                        int alt114=2;
                        int LA114_0 = input.LA(1);

                        if ( (LA114_0==COMMA) ) {
                            alt114=1;
                        }


                        switch (alt114) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:754:30: COMMA classical_expr_wrp
                    	    {
                    	    COMMA446=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_brackets4011); 
                    	    COMMA446_tree = 
                    	    (Object)adaptor.create(COMMA446)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA446_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_function_brackets4013);
                    	    classical_expr_wrp447=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp447.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop114;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR448=(Token)match(input,R_BR,FOLLOW_R_BR_in_function_brackets4019); 
            R_BR448_tree = 
            (Object)adaptor.create(R_BR448)
            ;
            adaptor.addChild(root_0, R_BR448_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "function_brackets"


    public static class index_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:756:1: index_wrapper : index -> ^( INDEX index ) ;
    public final ObjcmParser.index_wrapper_return index_wrapper() throws RecognitionException {
        ObjcmParser.index_wrapper_return retval = new ObjcmParser.index_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.index_return index449 =null;


        RewriteRuleSubtreeStream stream_index=new RewriteRuleSubtreeStream(adaptor,"rule index");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:757:2: ( index -> ^( INDEX index ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:757:4: index
            {
            pushFollow(FOLLOW_index_in_index_wrapper4029);
            index449=index();

            state._fsp--;

            stream_index.add(index449.getTree());

            // AST REWRITE
            // elements: index
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 757:10: -> ^( INDEX index )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:757:13: ^( INDEX index )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INDEX, "INDEX")
                , root_1);

                adaptor.addChild(root_1, stream_index.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_wrapper"


    public static class index_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:759:1: index : L_KBR ( index_number_wrapper )? R_KBR ;
    public final ObjcmParser.index_return index() throws RecognitionException {
        ObjcmParser.index_return retval = new ObjcmParser.index_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR450=null;
        Token R_KBR452=null;
        ObjcmParser.index_number_wrapper_return index_number_wrapper451 =null;


        Object L_KBR450_tree=null;
        Object R_KBR452_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:759:7: ( L_KBR ( index_number_wrapper )? R_KBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:759:9: L_KBR ( index_number_wrapper )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR450=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index4046); 
            L_KBR450_tree = 
            (Object)adaptor.create(L_KBR450)
            ;
            adaptor.addChild(root_0, L_KBR450_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:759:15: ( index_number_wrapper )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==ASTERISK||LA116_0==ID||LA116_0==L_AND||LA116_0==L_BR||LA116_0==L_KBR||LA116_0==L_MINUS||LA116_0==L_MINUS_MINUS||LA116_0==L_NOT||LA116_0==L_PLUS||LA116_0==L_PLUS_PLUS||LA116_0==L_TILDA||LA116_0==NUMBER||LA116_0==SIZEOF||(LA116_0 >= STRING_LITERAL && LA116_0 <= STRING_LITERAL3)||LA116_0==169||LA116_0==176||LA116_0==178||LA116_0==182||LA116_0==185||LA116_0==188||LA116_0==196||(LA116_0 >= 198 && LA116_0 <= 199)||LA116_0==204) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:759:15: index_number_wrapper
                    {
                    pushFollow(FOLLOW_index_number_wrapper_in_index4048);
                    index_number_wrapper451=index_number_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, index_number_wrapper451.getTree());

                    }
                    break;

            }


            R_KBR452=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index4051); 
            R_KBR452_tree = 
            (Object)adaptor.create(R_KBR452)
            ;
            adaptor.addChild(root_0, R_KBR452_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index"


    public static class index_number_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_number_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:761:1: index_number_wrapper : classical_expr_wrp -> ^( INDEX_NUMBER classical_expr_wrp ) ;
    public final ObjcmParser.index_number_wrapper_return index_number_wrapper() throws RecognitionException {
        ObjcmParser.index_number_wrapper_return retval = new ObjcmParser.index_number_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp453 =null;


        RewriteRuleSubtreeStream stream_classical_expr_wrp=new RewriteRuleSubtreeStream(adaptor,"rule classical_expr_wrp");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:762:2: ( classical_expr_wrp -> ^( INDEX_NUMBER classical_expr_wrp ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:762:4: classical_expr_wrp
            {
            pushFollow(FOLLOW_classical_expr_wrp_in_index_number_wrapper4060);
            classical_expr_wrp453=classical_expr_wrp();

            state._fsp--;

            stream_classical_expr_wrp.add(classical_expr_wrp453.getTree());

            // AST REWRITE
            // elements: classical_expr_wrp
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 762:23: -> ^( INDEX_NUMBER classical_expr_wrp )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:762:26: ^( INDEX_NUMBER classical_expr_wrp )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INDEX_NUMBER, "INDEX_NUMBER")
                , root_1);

                adaptor.addChild(root_1, stream_classical_expr_wrp.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_number_wrapper"


    public static class struct_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:764:1: struct_init : L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init_return struct_init() throws RecognitionException {
        ObjcmParser.struct_init_return retval = new ObjcmParser.struct_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR454=null;
        Token STRUCT_PREFIX455=null;
        Token ID456=null;
        Token R_BR457=null;
        Token L_FBR458=null;
        Token COMMA460=null;
        Token R_FBR462=null;
        ObjcmParser.struct_init_line_return struct_init_line459 =null;

        ObjcmParser.struct_init_line_return struct_init_line461 =null;


        Object L_BR454_tree=null;
        Object STRUCT_PREFIX455_tree=null;
        Object ID456_tree=null;
        Object R_BR457_tree=null;
        Object L_FBR458_tree=null;
        Object COMMA460_tree=null;
        Object R_FBR462_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:765:2: ( L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:765:4: L_BR ( STRUCT_PREFIX )? ID R_BR L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_BR454=(Token)match(input,L_BR,FOLLOW_L_BR_in_struct_init4077); 
            L_BR454_tree = 
            (Object)adaptor.create(L_BR454)
            ;
            adaptor.addChild(root_0, L_BR454_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:765:10: ( STRUCT_PREFIX )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==STRUCT_PREFIX) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:765:10: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX455=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_struct_init4080); 
                    STRUCT_PREFIX455_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX455)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX455_tree);


                    }
                    break;

            }


            ID456=(Token)match(input,ID,FOLLOW_ID_in_struct_init4083); 
            ID456_tree = 
            (Object)adaptor.create(ID456)
            ;
            adaptor.addChild(root_0, ID456_tree);


            R_BR457=(Token)match(input,R_BR,FOLLOW_R_BR_in_struct_init4086); 
            R_BR457_tree = 
            (Object)adaptor.create(R_BR457)
            ;
            adaptor.addChild(root_0, R_BR457_tree);


            L_FBR458=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init4089); 
            L_FBR458_tree = 
            (Object)adaptor.create(L_FBR458)
            ;
            adaptor.addChild(root_0, L_FBR458_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init4095);
            struct_init_line459=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line459.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:766:21: ( COMMA struct_init_line )*
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);

                if ( (LA118_0==COMMA) ) {
                    alt118=1;
                }


                switch (alt118) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:766:22: COMMA struct_init_line
            	    {
            	    COMMA460=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init4098); 
            	    COMMA460_tree = 
            	    (Object)adaptor.create(COMMA460)
            	    ;
            	    adaptor.addChild(root_0, COMMA460_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init4101);
            	    struct_init_line461=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line461.getTree());

            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);


            R_FBR462=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init4107); 
            R_FBR462_tree = 
            (Object)adaptor.create(R_FBR462)
            ;
            adaptor.addChild(root_0, R_FBR462_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init"


    public static class struct_init2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:770:1: struct_init2 : L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR ;
    public final ObjcmParser.struct_init2_return struct_init2() throws RecognitionException {
        ObjcmParser.struct_init2_return retval = new ObjcmParser.struct_init2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR463=null;
        Token COMMA465=null;
        Token R_FBR467=null;
        ObjcmParser.struct_init_line_return struct_init_line464 =null;

        ObjcmParser.struct_init_line_return struct_init_line466 =null;


        Object L_FBR463_tree=null;
        Object COMMA465_tree=null;
        Object R_FBR467_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:771:2: ( L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:771:4: L_FBR struct_init_line ( COMMA struct_init_line )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR463=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_struct_init24121); 
            L_FBR463_tree = 
            (Object)adaptor.create(L_FBR463)
            ;
            adaptor.addChild(root_0, L_FBR463_tree);


            pushFollow(FOLLOW_struct_init_line_in_struct_init24127);
            struct_init_line464=struct_init_line();

            state._fsp--;

            adaptor.addChild(root_0, struct_init_line464.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:772:21: ( COMMA struct_init_line )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==COMMA) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:772:22: COMMA struct_init_line
            	    {
            	    COMMA465=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_init24130); 
            	    COMMA465_tree = 
            	    (Object)adaptor.create(COMMA465)
            	    ;
            	    adaptor.addChild(root_0, COMMA465_tree);


            	    pushFollow(FOLLOW_struct_init_line_in_struct_init24133);
            	    struct_init_line466=struct_init_line();

            	    state._fsp--;

            	    adaptor.addChild(root_0, struct_init_line466.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            R_FBR467=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_struct_init24139); 
            R_FBR467_tree = 
            (Object)adaptor.create(R_FBR467)
            ;
            adaptor.addChild(root_0, R_FBR467_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init2"


    public static class struct_init_line_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_line"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:776:1: struct_init_line : ( struct_init_var | struct_init_expression );
    public final ObjcmParser.struct_init_line_return struct_init_line() throws RecognitionException {
        ObjcmParser.struct_init_line_return retval = new ObjcmParser.struct_init_line_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_init_var_return struct_init_var468 =null;

        ObjcmParser.struct_init_expression_return struct_init_expression469 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:777:2: ( struct_init_var | struct_init_expression )
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==DOT) ) {
                alt120=1;
            }
            else if ( (LA120_0==ASTERISK||LA120_0==ID||LA120_0==L_AND||LA120_0==L_BR||LA120_0==L_KBR||LA120_0==L_MINUS||LA120_0==L_MINUS_MINUS||LA120_0==L_NOT||LA120_0==L_PLUS||LA120_0==L_PLUS_PLUS||LA120_0==L_TILDA||LA120_0==NUMBER||LA120_0==SIZEOF||(LA120_0 >= STRING_LITERAL && LA120_0 <= STRING_LITERAL3)||LA120_0==169||LA120_0==176||LA120_0==178||LA120_0==182||LA120_0==185||LA120_0==188||LA120_0==196||(LA120_0 >= 198 && LA120_0 <= 199)||LA120_0==204) ) {
                alt120=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;

            }
            switch (alt120) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:777:4: struct_init_var
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_var_in_struct_init_line4152);
                    struct_init_var468=struct_init_var();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_var468.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:778:4: struct_init_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_struct_init_expression_in_struct_init_line4157);
                    struct_init_expression469=struct_init_expression();

                    state._fsp--;

                    adaptor.addChild(root_0, struct_init_expression469.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_line"


    public static class struct_init_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_expression"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:781:1: struct_init_expression : classical_expr_wrp ;
    public final ObjcmParser.struct_init_expression_return struct_init_expression() throws RecognitionException {
        ObjcmParser.struct_init_expression_return retval = new ObjcmParser.struct_init_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp470 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:782:2: ( classical_expr_wrp )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:782:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_expression4170);
            classical_expr_wrp470=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp470.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_expression"


    public static class struct_init_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_method"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:784:1: struct_init_method : classical_expr_wrp ;
    public final ObjcmParser.struct_init_method_return struct_init_method() throws RecognitionException {
        ObjcmParser.struct_init_method_return retval = new ObjcmParser.struct_init_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp471 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:785:2: ( classical_expr_wrp )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:785:4: classical_expr_wrp
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_classical_expr_wrp_in_struct_init_method4181);
            classical_expr_wrp471=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp471.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_method"


    public static class struct_init_var_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_init_var"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:787:1: struct_init_var : ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) ;
    public final ObjcmParser.struct_init_var_return struct_init_var() throws RecognitionException {
        ObjcmParser.struct_init_var_return retval = new ObjcmParser.struct_init_var_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DOT472=null;
        Token L_EQ474=null;
        ObjcmParser.id_part_return id_part473 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets475 =null;

        ObjcmParser.expression_return expression476 =null;


        Object DOT472_tree=null;
        Object L_EQ474_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:788:2: ( ( DOT id_part )+ L_EQ ( in_q_brackets | expression ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:788:4: ( DOT id_part )+ L_EQ ( in_q_brackets | expression )
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:788:4: ( DOT id_part )+
            int cnt121=0;
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==DOT) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:788:5: DOT id_part
            	    {
            	    DOT472=(Token)match(input,DOT,FOLLOW_DOT_in_struct_init_var4193); 
            	    DOT472_tree = 
            	    (Object)adaptor.create(DOT472)
            	    ;
            	    adaptor.addChild(root_0, DOT472_tree);


            	    pushFollow(FOLLOW_id_part_in_struct_init_var4195);
            	    id_part473=id_part();

            	    state._fsp--;

            	    adaptor.addChild(root_0, id_part473.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt121 >= 1 ) break loop121;
                        EarlyExitException eee =
                            new EarlyExitException(121, input);
                        throw eee;
                }
                cnt121++;
            } while (true);


            L_EQ474=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_struct_init_var4200); 
            L_EQ474_tree = 
            (Object)adaptor.create(L_EQ474)
            ;
            adaptor.addChild(root_0, L_EQ474_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:788:26: ( in_q_brackets | expression )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==L_FBR) ) {
                alt122=1;
            }
            else if ( (LA122_0==ASTERISK||LA122_0==ID||LA122_0==L_AND||LA122_0==L_BR||LA122_0==L_KBR||LA122_0==L_MINUS||LA122_0==L_MINUS_MINUS||LA122_0==L_NOT||LA122_0==L_PLUS||LA122_0==L_PLUS_PLUS||LA122_0==L_TILDA||LA122_0==NUMBER||LA122_0==SIZEOF||(LA122_0 >= STRING_LITERAL && LA122_0 <= STRING_LITERAL3)||LA122_0==169||LA122_0==176||LA122_0==178||LA122_0==182||LA122_0==185||LA122_0==188||LA122_0==196||(LA122_0 >= 198 && LA122_0 <= 199)||LA122_0==204) ) {
                alt122=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;

            }
            switch (alt122) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:788:27: in_q_brackets
                    {
                    pushFollow(FOLLOW_in_q_brackets_in_struct_init_var4204);
                    in_q_brackets475=in_q_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, in_q_brackets475.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:788:43: expression
                    {
                    pushFollow(FOLLOW_expression_in_struct_init_var4208);
                    expression476=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression476.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_init_var"


    public static class a_started_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_started"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:790:1: a_started : ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper );
    public final ObjcmParser.a_started_return a_started() throws RecognitionException {
        ObjcmParser.a_started_return retval = new ObjcmParser.a_started_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_wrapper_return a_selector_wrapper477 =null;

        ObjcmParser.a_encode_wrapper_return a_encode_wrapper478 =null;

        ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper479 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:791:2: ( a_selector_wrapper | a_encode_wrapper | a_protocol_wrapper )
            int alt123=3;
            switch ( input.LA(1) ) {
            case 178:
                {
                alt123=1;
                }
                break;
            case 169:
                {
                alt123=2;
                }
                break;
            case 176:
                {
                alt123=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;

            }

            switch (alt123) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:791:4: a_selector_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_selector_wrapper_in_a_started4220);
                    a_selector_wrapper477=a_selector_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_selector_wrapper477.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:792:4: a_encode_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_encode_wrapper_in_a_started4225);
                    a_encode_wrapper478=a_encode_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_encode_wrapper478.getTree());

                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:793:4: a_protocol_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_a_protocol_wrapper_in_a_started4230);
                    a_protocol_wrapper479=a_protocol_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, a_protocol_wrapper479.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_started"


    public static class typeof_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typeof"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:796:1: typeof : '__typeof__' L_BR ID R_BR ;
    public final ObjcmParser.typeof_return typeof() throws RecognitionException {
        ObjcmParser.typeof_return retval = new ObjcmParser.typeof_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal480=null;
        Token L_BR481=null;
        Token ID482=null;
        Token R_BR483=null;

        Object string_literal480_tree=null;
        Object L_BR481_tree=null;
        Object ID482_tree=null;
        Object R_BR483_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:796:8: ( '__typeof__' L_BR ID R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:796:10: '__typeof__' L_BR ID R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal480=(Token)match(input,184,FOLLOW_184_in_typeof4240); 
            string_literal480_tree = 
            (Object)adaptor.create(string_literal480)
            ;
            adaptor.addChild(root_0, string_literal480_tree);


            L_BR481=(Token)match(input,L_BR,FOLLOW_L_BR_in_typeof4243); 
            L_BR481_tree = 
            (Object)adaptor.create(L_BR481)
            ;
            adaptor.addChild(root_0, L_BR481_tree);


            ID482=(Token)match(input,ID,FOLLOW_ID_in_typeof4246); 
            ID482_tree = 
            (Object)adaptor.create(ID482)
            ;
            adaptor.addChild(root_0, ID482_tree);


            R_BR483=(Token)match(input,R_BR,FOLLOW_R_BR_in_typeof4249); 
            R_BR483_tree = 
            (Object)adaptor.create(R_BR483)
            ;
            adaptor.addChild(root_0, R_BR483_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typeof"


    public static class a_selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:798:1: a_selector_wrapper : a_selector -> ^( SELECTOR a_selector ) ;
    public final ObjcmParser.a_selector_wrapper_return a_selector_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_wrapper_return retval = new ObjcmParser.a_selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_return a_selector484 =null;


        RewriteRuleSubtreeStream stream_a_selector=new RewriteRuleSubtreeStream(adaptor,"rule a_selector");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:799:2: ( a_selector -> ^( SELECTOR a_selector ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:799:4: a_selector
            {
            pushFollow(FOLLOW_a_selector_in_a_selector_wrapper4260);
            a_selector484=a_selector();

            state._fsp--;

            stream_a_selector.add(a_selector484.getTree());

            // AST REWRITE
            // elements: a_selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 799:15: -> ^( SELECTOR a_selector )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:799:18: ^( SELECTOR a_selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR, "SELECTOR")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_wrapper"


    public static class a_selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:801:1: a_selector : '@selector' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_selector_return a_selector() throws RecognitionException {
        ObjcmParser.a_selector_return retval = new ObjcmParser.a_selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal485=null;
        Token L_BR486=null;
        Token R_BR488=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper487 =null;


        Object string_literal485_tree=null;
        Object L_BR486_tree=null;
        Object R_BR488_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:801:11: ( '@selector' L_BR a_selector_value_wrapper R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:801:13: '@selector' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal485=(Token)match(input,178,FOLLOW_178_in_a_selector4277); 
            string_literal485_tree = 
            (Object)adaptor.create(string_literal485)
            ;
            adaptor.addChild(root_0, string_literal485_tree);


            L_BR486=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_selector4279); 
            L_BR486_tree = 
            (Object)adaptor.create(L_BR486)
            ;
            adaptor.addChild(root_0, L_BR486_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_selector4281);
            a_selector_value_wrapper487=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper487.getTree());

            R_BR488=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_selector4283); 
            R_BR488_tree = 
            (Object)adaptor.create(R_BR488)
            ;
            adaptor.addChild(root_0, R_BR488_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector"


    public static class a_protocol_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:803:1: a_protocol_wrapper : a_protocol -> ^( PROTOCOL a_protocol ) ;
    public final ObjcmParser.a_protocol_wrapper_return a_protocol_wrapper() throws RecognitionException {
        ObjcmParser.a_protocol_wrapper_return retval = new ObjcmParser.a_protocol_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_protocol_return a_protocol489 =null;


        RewriteRuleSubtreeStream stream_a_protocol=new RewriteRuleSubtreeStream(adaptor,"rule a_protocol");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:804:2: ( a_protocol -> ^( PROTOCOL a_protocol ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:804:4: a_protocol
            {
            pushFollow(FOLLOW_a_protocol_in_a_protocol_wrapper4293);
            a_protocol489=a_protocol();

            state._fsp--;

            stream_a_protocol.add(a_protocol489.getTree());

            // AST REWRITE
            // elements: a_protocol
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 804:15: -> ^( PROTOCOL a_protocol )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:804:18: ^( PROTOCOL a_protocol )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_a_protocol.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol_wrapper"


    public static class a_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_protocol"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:806:1: a_protocol : '@protocol' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_protocol_return a_protocol() throws RecognitionException {
        ObjcmParser.a_protocol_return retval = new ObjcmParser.a_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal490=null;
        Token L_BR491=null;
        Token R_BR493=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper492 =null;


        Object string_literal490_tree=null;
        Object L_BR491_tree=null;
        Object R_BR493_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:807:2: ( '@protocol' L_BR a_selector_value_wrapper R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:807:4: '@protocol' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal490=(Token)match(input,176,FOLLOW_176_in_a_protocol4311); 
            string_literal490_tree = 
            (Object)adaptor.create(string_literal490)
            ;
            adaptor.addChild(root_0, string_literal490_tree);


            L_BR491=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_protocol4313); 
            L_BR491_tree = 
            (Object)adaptor.create(L_BR491)
            ;
            adaptor.addChild(root_0, L_BR491_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_protocol4315);
            a_selector_value_wrapper492=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper492.getTree());

            R_BR493=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_protocol4317); 
            R_BR493_tree = 
            (Object)adaptor.create(R_BR493)
            ;
            adaptor.addChild(root_0, R_BR493_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_protocol"


    public static class a_encode_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:809:1: a_encode_wrapper : a_encode -> ^( ENCODE a_encode ) ;
    public final ObjcmParser.a_encode_wrapper_return a_encode_wrapper() throws RecognitionException {
        ObjcmParser.a_encode_wrapper_return retval = new ObjcmParser.a_encode_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_encode_return a_encode494 =null;


        RewriteRuleSubtreeStream stream_a_encode=new RewriteRuleSubtreeStream(adaptor,"rule a_encode");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:810:2: ( a_encode -> ^( ENCODE a_encode ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:810:4: a_encode
            {
            pushFollow(FOLLOW_a_encode_in_a_encode_wrapper4327);
            a_encode494=a_encode();

            state._fsp--;

            stream_a_encode.add(a_encode494.getTree());

            // AST REWRITE
            // elements: a_encode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 810:13: -> ^( ENCODE a_encode )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:810:16: ^( ENCODE a_encode )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENCODE, "ENCODE")
                , root_1);

                adaptor.addChild(root_1, stream_a_encode.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode_wrapper"


    public static class a_encode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_encode"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:812:1: a_encode : '@encode' L_BR a_selector_value_wrapper R_BR ;
    public final ObjcmParser.a_encode_return a_encode() throws RecognitionException {
        ObjcmParser.a_encode_return retval = new ObjcmParser.a_encode_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal495=null;
        Token L_BR496=null;
        Token R_BR498=null;
        ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper497 =null;


        Object string_literal495_tree=null;
        Object L_BR496_tree=null;
        Object R_BR498_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:812:9: ( '@encode' L_BR a_selector_value_wrapper R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:812:11: '@encode' L_BR a_selector_value_wrapper R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal495=(Token)match(input,169,FOLLOW_169_in_a_encode4343); 
            string_literal495_tree = 
            (Object)adaptor.create(string_literal495)
            ;
            adaptor.addChild(root_0, string_literal495_tree);


            L_BR496=(Token)match(input,L_BR,FOLLOW_L_BR_in_a_encode4345); 
            L_BR496_tree = 
            (Object)adaptor.create(L_BR496)
            ;
            adaptor.addChild(root_0, L_BR496_tree);


            pushFollow(FOLLOW_a_selector_value_wrapper_in_a_encode4347);
            a_selector_value_wrapper497=a_selector_value_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, a_selector_value_wrapper497.getTree());

            R_BR498=(Token)match(input,R_BR,FOLLOW_R_BR_in_a_encode4349); 
            R_BR498_tree = 
            (Object)adaptor.create(R_BR498)
            ;
            adaptor.addChild(root_0, R_BR498_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_encode"


    public static class a_selector_value_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:815:1: a_selector_value_wrapper : a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) ;
    public final ObjcmParser.a_selector_value_wrapper_return a_selector_value_wrapper() throws RecognitionException {
        ObjcmParser.a_selector_value_wrapper_return retval = new ObjcmParser.a_selector_value_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.a_selector_value_return a_selector_value499 =null;


        RewriteRuleSubtreeStream stream_a_selector_value=new RewriteRuleSubtreeStream(adaptor,"rule a_selector_value");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:816:2: ( a_selector_value -> ^( SELECTOR_VALUE a_selector_value ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:816:4: a_selector_value
            {
            pushFollow(FOLLOW_a_selector_value_in_a_selector_value_wrapper4360);
            a_selector_value499=a_selector_value();

            state._fsp--;

            stream_a_selector_value.add(a_selector_value499.getTree());

            // AST REWRITE
            // elements: a_selector_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 816:21: -> ^( SELECTOR_VALUE a_selector_value )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:816:24: ^( SELECTOR_VALUE a_selector_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SELECTOR_VALUE, "SELECTOR_VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_a_selector_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value_wrapper"


    public static class a_selector_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "a_selector_value"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:818:1: a_selector_value : sel_id ( COLON ( sel_id COLON )* )? ;
    public final ObjcmParser.a_selector_value_return a_selector_value() throws RecognitionException {
        ObjcmParser.a_selector_value_return retval = new ObjcmParser.a_selector_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON501=null;
        Token COLON503=null;
        ObjcmParser.sel_id_return sel_id500 =null;

        ObjcmParser.sel_id_return sel_id502 =null;


        Object COLON501_tree=null;
        Object COLON503_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:819:2: ( sel_id ( COLON ( sel_id COLON )* )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:819:5: sel_id ( COLON ( sel_id COLON )* )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_sel_id_in_a_selector_value4379);
            sel_id500=sel_id();

            state._fsp--;

            adaptor.addChild(root_0, sel_id500.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:819:13: ( COLON ( sel_id COLON )* )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==COLON) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:819:14: COLON ( sel_id COLON )*
                    {
                    COLON501=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4383); 
                    COLON501_tree = 
                    (Object)adaptor.create(COLON501)
                    ;
                    adaptor.addChild(root_0, COLON501_tree);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:819:21: ( sel_id COLON )*
                    loop124:
                    do {
                        int alt124=2;
                        int LA124_0 = input.LA(1);

                        if ( (LA124_0==ID||LA124_0==185||LA124_0==188||LA124_0==199) ) {
                            alt124=1;
                        }


                        switch (alt124) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:819:22: sel_id COLON
                    	    {
                    	    pushFollow(FOLLOW_sel_id_in_a_selector_value4387);
                    	    sel_id502=sel_id();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, sel_id502.getTree());

                    	    COLON503=(Token)match(input,COLON,FOLLOW_COLON_in_a_selector_value4390); 
                    	    COLON503_tree = 
                    	    (Object)adaptor.create(COLON503)
                    	    ;
                    	    adaptor.addChild(root_0, COLON503_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop124;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "a_selector_value"


    public static class sel_id_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "sel_id"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:821:1: sel_id : ( ID | property );
    public final ObjcmParser.sel_id_return sel_id() throws RecognitionException {
        ObjcmParser.sel_id_return retval = new ObjcmParser.sel_id_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID504=null;
        ObjcmParser.property_return property505 =null;


        Object ID504_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:821:8: ( ID | property )
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==ID) ) {
                alt126=1;
            }
            else if ( (LA126_0==185||LA126_0==188||LA126_0==199) ) {
                alt126=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;

            }
            switch (alt126) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:821:10: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID504=(Token)match(input,ID,FOLLOW_ID_in_sel_id4403); 
                    ID504_tree = 
                    (Object)adaptor.create(ID504)
                    ;
                    adaptor.addChild(root_0, ID504_tree);


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:822:4: property
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_property_in_sel_id4408);
                    property505=property();

                    state._fsp--;

                    adaptor.addChild(root_0, property505.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "sel_id"


    public static class const_expr_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:825:1: const_expr_wrapper : const_expr -> ^( CONST_EXPR const_expr ) ;
    public final ObjcmParser.const_expr_wrapper_return const_expr_wrapper() throws RecognitionException {
        ObjcmParser.const_expr_wrapper_return retval = new ObjcmParser.const_expr_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.const_expr_return const_expr506 =null;


        RewriteRuleSubtreeStream stream_const_expr=new RewriteRuleSubtreeStream(adaptor,"rule const_expr");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:826:2: ( const_expr -> ^( CONST_EXPR const_expr ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:826:4: const_expr
            {
            pushFollow(FOLLOW_const_expr_in_const_expr_wrapper4420);
            const_expr506=const_expr();

            state._fsp--;

            stream_const_expr.add(const_expr506.getTree());

            // AST REWRITE
            // elements: const_expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 826:15: -> ^( CONST_EXPR const_expr )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:826:18: ^( CONST_EXPR const_expr )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONST_EXPR, "CONST_EXPR")
                , root_1);

                adaptor.addChild(root_1, stream_const_expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr_wrapper"


    public static class const_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "const_expr"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:828:1: const_expr : ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt );
    public final ObjcmParser.const_expr_return const_expr() throws RecognitionException {
        ObjcmParser.const_expr_return retval = new ObjcmParser.const_expr_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token NUMBER507=null;
        Token STRING_LITERAL508=null;
        Token STRING_LITERAL2509=null;
        Token STRING_LITERAL3510=null;
        ObjcmParser.null_stmt_return null_stmt511 =null;


        Object NUMBER507_tree=null;
        Object STRING_LITERAL508_tree=null;
        Object STRING_LITERAL2509_tree=null;
        Object STRING_LITERAL3510_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:829:2: ( NUMBER | STRING_LITERAL | STRING_LITERAL2 | STRING_LITERAL3 | null_stmt )
            int alt127=5;
            switch ( input.LA(1) ) {
            case NUMBER:
                {
                alt127=1;
                }
                break;
            case STRING_LITERAL:
                {
                alt127=2;
                }
                break;
            case STRING_LITERAL2:
                {
                alt127=3;
                }
                break;
            case STRING_LITERAL3:
                {
                alt127=4;
                }
                break;
            case 182:
            case 198:
                {
                alt127=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;

            }

            switch (alt127) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:829:5: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER507=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_const_expr4439); 
                    NUMBER507_tree = 
                    (Object)adaptor.create(NUMBER507)
                    ;
                    adaptor.addChild(root_0, NUMBER507_tree);


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:829:14: STRING_LITERAL
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL508=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_const_expr4443); 
                    STRING_LITERAL508_tree = 
                    (Object)adaptor.create(STRING_LITERAL508)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL508_tree);


                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:829:31: STRING_LITERAL2
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL2509=(Token)match(input,STRING_LITERAL2,FOLLOW_STRING_LITERAL2_in_const_expr4447); 
                    STRING_LITERAL2509_tree = 
                    (Object)adaptor.create(STRING_LITERAL2509)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL2509_tree);


                    }
                    break;
                case 4 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:829:49: STRING_LITERAL3
                    {
                    root_0 = (Object)adaptor.nil();


                    STRING_LITERAL3510=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_const_expr4451); 
                    STRING_LITERAL3510_tree = 
                    (Object)adaptor.create(STRING_LITERAL3510)
                    ;
                    adaptor.addChild(root_0, STRING_LITERAL3510_tree);


                    }
                    break;
                case 5 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:829:67: null_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_null_stmt_in_const_expr4455);
                    null_stmt511=null_stmt();

                    state._fsp--;

                    adaptor.addChild(root_0, null_stmt511.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "const_expr"


    public static class string_literal3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_literal3"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:831:1: string_literal3 : STRING_LITERAL3 ;
    public final ObjcmParser.string_literal3_return string_literal3() throws RecognitionException {
        ObjcmParser.string_literal3_return retval = new ObjcmParser.string_literal3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL3512=null;

        Object STRING_LITERAL3512_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:832:2: ( STRING_LITERAL3 )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:832:4: STRING_LITERAL3
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL3512=(Token)match(input,STRING_LITERAL3,FOLLOW_STRING_LITERAL3_in_string_literal34465); 
            STRING_LITERAL3512_tree = 
            (Object)adaptor.create(STRING_LITERAL3512)
            ;
            adaptor.addChild(root_0, STRING_LITERAL3512_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_literal3"


    public static class method_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_brackets"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:834:1: method_brackets : L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR ;
    public final ObjcmParser.method_brackets_return method_brackets() throws RecognitionException {
        ObjcmParser.method_brackets_return retval = new ObjcmParser.method_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR513=null;
        Token COMMA515=null;
        Token R_BR517=null;
        ObjcmParser.expression_return expression514 =null;

        ObjcmParser.classical_expr_wrp_return classical_expr_wrp516 =null;


        Object L_BR513_tree=null;
        Object COMMA515_tree=null;
        Object R_BR517_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:835:2: ( L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:835:4: L_BR ( expression ( COMMA classical_expr_wrp )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR513=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_brackets4475); 
            L_BR513_tree = 
            (Object)adaptor.create(L_BR513)
            ;
            adaptor.addChild(root_0, L_BR513_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:835:10: ( expression ( COMMA classical_expr_wrp )* )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==ASTERISK||LA129_0==ID||LA129_0==L_AND||LA129_0==L_BR||LA129_0==L_KBR||LA129_0==L_MINUS||LA129_0==L_MINUS_MINUS||LA129_0==L_NOT||LA129_0==L_PLUS||LA129_0==L_PLUS_PLUS||LA129_0==L_TILDA||LA129_0==NUMBER||LA129_0==SIZEOF||(LA129_0 >= STRING_LITERAL && LA129_0 <= STRING_LITERAL3)||LA129_0==169||LA129_0==176||LA129_0==178||LA129_0==182||LA129_0==185||LA129_0==188||LA129_0==196||(LA129_0 >= 198 && LA129_0 <= 199)||LA129_0==204) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:835:11: expression ( COMMA classical_expr_wrp )*
                    {
                    pushFollow(FOLLOW_expression_in_method_brackets4479);
                    expression514=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression514.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:835:23: ( COMMA classical_expr_wrp )*
                    loop128:
                    do {
                        int alt128=2;
                        int LA128_0 = input.LA(1);

                        if ( (LA128_0==COMMA) ) {
                            alt128=1;
                        }


                        switch (alt128) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:835:24: COMMA classical_expr_wrp
                    	    {
                    	    COMMA515=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_brackets4483); 
                    	    COMMA515_tree = 
                    	    (Object)adaptor.create(COMMA515)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA515_tree);


                    	    pushFollow(FOLLOW_classical_expr_wrp_in_method_brackets4486);
                    	    classical_expr_wrp516=classical_expr_wrp();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, classical_expr_wrp516.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop128;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR517=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_brackets4492); 
            R_BR517_tree = 
            (Object)adaptor.create(R_BR517)
            ;
            adaptor.addChild(root_0, R_BR517_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_brackets"


    public static class func_pointer1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer1"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:837:1: func_pointer1 : type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? ;
    public final ObjcmParser.func_pointer1_return func_pointer1() throws RecognitionException {
        ObjcmParser.func_pointer1_return retval = new ObjcmParser.func_pointer1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK519=null;
        Token L_BR520=null;
        Token ASTERISK521=null;
        Token R_BR523=null;
        ObjcmParser.type_internal_return type_internal518 =null;

        ObjcmParser.type_internal_return type_internal522 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params524 =null;


        Object ASTERISK519_tree=null;
        Object L_BR520_tree=null;
        Object ASTERISK521_tree=null;
        Object R_BR523_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:838:2: ( type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:838:4: type_internal ( ASTERISK )? L_BR ( ASTERISK )? type_internal R_BR ( func_pointer_params )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_func_pointer14502);
            type_internal518=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal518.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:838:19: ( ASTERISK )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==ASTERISK) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:838:19: ASTERISK
                    {
                    ASTERISK519=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14505); 
                    ASTERISK519_tree = 
                    (Object)adaptor.create(ASTERISK519)
                    ;
                    adaptor.addChild(root_0, ASTERISK519_tree);


                    }
                    break;

            }


            L_BR520=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer14508); 
            L_BR520_tree = 
            (Object)adaptor.create(L_BR520)
            ;
            adaptor.addChild(root_0, L_BR520_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:838:34: ( ASTERISK )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==ASTERISK) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:838:34: ASTERISK
                    {
                    ASTERISK521=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer14510); 
                    ASTERISK521_tree = 
                    (Object)adaptor.create(ASTERISK521)
                    ;
                    adaptor.addChild(root_0, ASTERISK521_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_internal_in_func_pointer14513);
            type_internal522=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal522.getTree());

            R_BR523=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer14516); 
            R_BR523_tree = 
            (Object)adaptor.create(R_BR523)
            ;
            adaptor.addChild(root_0, R_BR523_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:838:65: ( func_pointer_params )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==L_BR) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:838:65: func_pointer_params
                    {
                    pushFollow(FOLLOW_func_pointer_params_in_func_pointer14519);
                    func_pointer_params524=func_pointer_params();

                    state._fsp--;

                    adaptor.addChild(root_0, func_pointer_params524.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer1"


    public static class func_pointer2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:841:1: func_pointer2 : L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR ;
    public final ObjcmParser.func_pointer2_return func_pointer2() throws RecognitionException {
        ObjcmParser.func_pointer2_return retval = new ObjcmParser.func_pointer2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR525=null;
        Token L_BR527=null;
        Token ASTERISK528=null;
        Token R_BR529=null;
        Token R_BR531=null;
        ObjcmParser.type_internal_return type_internal526 =null;

        ObjcmParser.func_pointer_params_return func_pointer_params530 =null;


        Object L_BR525_tree=null;
        Object L_BR527_tree=null;
        Object ASTERISK528_tree=null;
        Object R_BR529_tree=null;
        Object R_BR531_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:842:2: ( L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:842:4: L_BR type_internal L_BR ASTERISK R_BR func_pointer_params R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR525=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24532); 
            L_BR525_tree = 
            (Object)adaptor.create(L_BR525)
            ;
            adaptor.addChild(root_0, L_BR525_tree);


            pushFollow(FOLLOW_type_internal_in_func_pointer24535);
            type_internal526=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal526.getTree());

            L_BR527=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer24537); 
            L_BR527_tree = 
            (Object)adaptor.create(L_BR527)
            ;
            adaptor.addChild(root_0, L_BR527_tree);


            ASTERISK528=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer24540); 
            ASTERISK528_tree = 
            (Object)adaptor.create(ASTERISK528)
            ;
            adaptor.addChild(root_0, ASTERISK528_tree);


            R_BR529=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24543); 
            R_BR529_tree = 
            (Object)adaptor.create(R_BR529)
            ;
            adaptor.addChild(root_0, R_BR529_tree);


            pushFollow(FOLLOW_func_pointer_params_in_func_pointer24546);
            func_pointer_params530=func_pointer_params();

            state._fsp--;

            adaptor.addChild(root_0, func_pointer_params530.getTree());

            R_BR531=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer24549); 
            R_BR531_tree = 
            (Object)adaptor.create(R_BR531)
            ;
            adaptor.addChild(root_0, R_BR531_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer2"


    public static class func_pointer_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_params"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:845:1: func_pointer_params : L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR ;
    public final ObjcmParser.func_pointer_params_return func_pointer_params() throws RecognitionException {
        ObjcmParser.func_pointer_params_return retval = new ObjcmParser.func_pointer_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR532=null;
        Token ID533=null;
        Token ASTERISK534=null;
        Token COMMA535=null;
        Token ID536=null;
        Token ASTERISK537=null;
        Token R_BR538=null;

        Object L_BR532_tree=null;
        Object ID533_tree=null;
        Object ASTERISK534_tree=null;
        Object COMMA535_tree=null;
        Object ID536_tree=null;
        Object ASTERISK537_tree=null;
        Object R_BR538_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:846:2: ( L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:846:4: L_BR ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR532=(Token)match(input,L_BR,FOLLOW_L_BR_in_func_pointer_params4562); 
            L_BR532_tree = 
            (Object)adaptor.create(L_BR532)
            ;
            adaptor.addChild(root_0, L_BR532_tree);


            ID533=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4565); 
            ID533_tree = 
            (Object)adaptor.create(ID533)
            ;
            adaptor.addChild(root_0, ID533_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:846:14: ( ASTERISK )*
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==ASTERISK) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:846:14: ASTERISK
            	    {
            	    ASTERISK534=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4568); 
            	    ASTERISK534_tree = 
            	    (Object)adaptor.create(ASTERISK534)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK534_tree);


            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:846:24: ( COMMA ID ( ASTERISK )* )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==COMMA) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:846:25: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA535=(Token)match(input,COMMA,FOLLOW_COMMA_in_func_pointer_params4572); 
            	    COMMA535_tree = 
            	    (Object)adaptor.create(COMMA535)
            	    ;
            	    adaptor.addChild(root_0, COMMA535_tree);


            	    ID536=(Token)match(input,ID,FOLLOW_ID_in_func_pointer_params4575); 
            	    ID536_tree = 
            	    (Object)adaptor.create(ID536)
            	    ;
            	    adaptor.addChild(root_0, ID536_tree);


            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:846:36: ( ASTERISK )*
            	    loop134:
            	    do {
            	        int alt134=2;
            	        int LA134_0 = input.LA(1);

            	        if ( (LA134_0==ASTERISK) ) {
            	            alt134=1;
            	        }


            	        switch (alt134) {
            	    	case 1 :
            	    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:846:36: ASTERISK
            	    	    {
            	    	    ASTERISK537=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_func_pointer_params4578); 
            	    	    ASTERISK537_tree = 
            	    	    (Object)adaptor.create(ASTERISK537)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK537_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop134;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);


            R_BR538=(Token)match(input,R_BR,FOLLOW_R_BR_in_func_pointer_params4583); 
            R_BR538_tree = 
            (Object)adaptor.create(R_BR538)
            ;
            adaptor.addChild(root_0, R_BR538_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_params"


    public static class method_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_start"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:848:1: method_start : ID ( method_brackets )? ;
    public final ObjcmParser.method_start_return method_start() throws RecognitionException {
        ObjcmParser.method_start_return retval = new ObjcmParser.method_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID539=null;
        ObjcmParser.method_brackets_return method_brackets540 =null;


        Object ID539_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:849:2: ( ID ( method_brackets )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:849:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID539=(Token)match(input,ID,FOLLOW_ID_in_method_start4594); 
            ID539_tree = 
            (Object)adaptor.create(ID539)
            ;
            adaptor.addChild(root_0, ID539_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:849:7: ( method_brackets )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==L_BR) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:849:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_method_start4596);
                    method_brackets540=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets540.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_start"


    public static class in_q_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "in_q_brackets"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:851:1: in_q_brackets : L_FBR q_brackets_source R_FBR ;
    public final ObjcmParser.in_q_brackets_return in_q_brackets() throws RecognitionException {
        ObjcmParser.in_q_brackets_return retval = new ObjcmParser.in_q_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR541=null;
        Token R_FBR543=null;
        ObjcmParser.q_brackets_source_return q_brackets_source542 =null;


        Object L_FBR541_tree=null;
        Object R_FBR543_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:852:2: ( L_FBR q_brackets_source R_FBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:852:4: L_FBR q_brackets_source R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR541=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_in_q_brackets4607); 
            L_FBR541_tree = 
            (Object)adaptor.create(L_FBR541)
            ;
            adaptor.addChild(root_0, L_FBR541_tree);


            pushFollow(FOLLOW_q_brackets_source_in_in_q_brackets4610);
            q_brackets_source542=q_brackets_source();

            state._fsp--;

            adaptor.addChild(root_0, q_brackets_source542.getTree());

            R_FBR543=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_in_q_brackets4612); 
            R_FBR543_tree = 
            (Object)adaptor.create(R_FBR543)
            ;
            adaptor.addChild(root_0, R_FBR543_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "in_q_brackets"


    public static class q_brackets_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_brackets_source"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:855:1: q_brackets_source : ( q_source | q_br_source );
    public final ObjcmParser.q_brackets_source_return q_brackets_source() throws RecognitionException {
        ObjcmParser.q_brackets_source_return retval = new ObjcmParser.q_brackets_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.q_source_return q_source544 =null;

        ObjcmParser.q_br_source_return q_br_source545 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:856:2: ( q_source | q_br_source )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==ASTERISK||LA137_0==ID||LA137_0==L_AND||LA137_0==L_BR||LA137_0==L_KBR||LA137_0==L_MINUS||LA137_0==L_MINUS_MINUS||LA137_0==L_NOT||LA137_0==L_PLUS||LA137_0==L_PLUS_PLUS||LA137_0==L_TILDA||LA137_0==NUMBER||LA137_0==R_FBR||LA137_0==SIZEOF||(LA137_0 >= STRING_LITERAL && LA137_0 <= STRING_LITERAL3)||LA137_0==169||LA137_0==176||LA137_0==178||LA137_0==182||LA137_0==185||LA137_0==188||LA137_0==196||(LA137_0 >= 198 && LA137_0 <= 199)||LA137_0==204) ) {
                alt137=1;
            }
            else if ( (LA137_0==L_FBR) ) {
                alt137=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;

            }
            switch (alt137) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:856:4: q_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_source_in_q_brackets_source4624);
                    q_source544=q_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_source544.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:857:4: q_br_source
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_q_br_source_in_q_brackets_source4629);
                    q_br_source545=q_br_source();

                    state._fsp--;

                    adaptor.addChild(root_0, q_br_source545.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_brackets_source"


    public static class q_br_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_br_source"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:860:1: q_br_source : in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? ;
    public final ObjcmParser.q_br_source_return q_br_source() throws RecognitionException {
        ObjcmParser.q_br_source_return retval = new ObjcmParser.q_br_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA547=null;
        Token COMMA549=null;
        ObjcmParser.in_q_brackets_return in_q_brackets546 =null;

        ObjcmParser.in_q_brackets_return in_q_brackets548 =null;


        Object COMMA547_tree=null;
        Object COMMA549_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:861:2: ( in_q_brackets ( COMMA in_q_brackets )* ( COMMA )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:861:4: in_q_brackets ( COMMA in_q_brackets )* ( COMMA )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_in_q_brackets_in_q_br_source4642);
            in_q_brackets546=in_q_brackets();

            state._fsp--;

            adaptor.addChild(root_0, in_q_brackets546.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:861:19: ( COMMA in_q_brackets )*
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0==COMMA) ) {
                    int LA138_1 = input.LA(2);

                    if ( (LA138_1==L_FBR) ) {
                        alt138=1;
                    }


                }


                switch (alt138) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:861:20: COMMA in_q_brackets
            	    {
            	    COMMA547=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4646); 
            	    COMMA547_tree = 
            	    (Object)adaptor.create(COMMA547)
            	    ;
            	    adaptor.addChild(root_0, COMMA547_tree);


            	    pushFollow(FOLLOW_in_q_brackets_in_q_br_source4649);
            	    in_q_brackets548=in_q_brackets();

            	    state._fsp--;

            	    adaptor.addChild(root_0, in_q_brackets548.getTree());

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:861:43: ( COMMA )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==COMMA) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:861:43: COMMA
                    {
                    COMMA549=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_br_source4653); 
                    COMMA549_tree = 
                    (Object)adaptor.create(COMMA549)
                    ;
                    adaptor.addChild(root_0, COMMA549_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_br_source"


    public static class q_source_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "q_source"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:864:1: q_source : ( expression ( COMMA expression )* )? ;
    public final ObjcmParser.q_source_return q_source() throws RecognitionException {
        ObjcmParser.q_source_return retval = new ObjcmParser.q_source_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA551=null;
        ObjcmParser.expression_return expression550 =null;

        ObjcmParser.expression_return expression552 =null;


        Object COMMA551_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:864:9: ( ( expression ( COMMA expression )* )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:864:11: ( expression ( COMMA expression )* )?
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:864:11: ( expression ( COMMA expression )* )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==ASTERISK||LA141_0==ID||LA141_0==L_AND||LA141_0==L_BR||LA141_0==L_KBR||LA141_0==L_MINUS||LA141_0==L_MINUS_MINUS||LA141_0==L_NOT||LA141_0==L_PLUS||LA141_0==L_PLUS_PLUS||LA141_0==L_TILDA||LA141_0==NUMBER||LA141_0==SIZEOF||(LA141_0 >= STRING_LITERAL && LA141_0 <= STRING_LITERAL3)||LA141_0==169||LA141_0==176||LA141_0==178||LA141_0==182||LA141_0==185||LA141_0==188||LA141_0==196||(LA141_0 >= 198 && LA141_0 <= 199)||LA141_0==204) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:864:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_q_source4665);
                    expression550=expression();

                    state._fsp--;

                    adaptor.addChild(root_0, expression550.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:864:24: ( COMMA expression )*
                    loop140:
                    do {
                        int alt140=2;
                        int LA140_0 = input.LA(1);

                        if ( (LA140_0==COMMA) ) {
                            alt140=1;
                        }


                        switch (alt140) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:864:25: COMMA expression
                    	    {
                    	    COMMA551=(Token)match(input,COMMA,FOLLOW_COMMA_in_q_source4669); 
                    	    COMMA551_tree = 
                    	    (Object)adaptor.create(COMMA551)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA551_tree);


                    	    pushFollow(FOLLOW_expression_in_q_source4672);
                    	    expression552=expression();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, expression552.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop140;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "q_source"


    public static class simple_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_method_call"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:867:1: simple_method_call : ID ( method_brackets )? ;
    public final ObjcmParser.simple_method_call_return simple_method_call() throws RecognitionException {
        ObjcmParser.simple_method_call_return retval = new ObjcmParser.simple_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID553=null;
        ObjcmParser.method_brackets_return method_brackets554 =null;


        Object ID553_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:868:2: ( ID ( method_brackets )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:868:4: ID ( method_brackets )?
            {
            root_0 = (Object)adaptor.nil();


            ID553=(Token)match(input,ID,FOLLOW_ID_in_simple_method_call4689); 
            ID553_tree = 
            (Object)adaptor.create(ID553)
            ;
            adaptor.addChild(root_0, ID553_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:868:7: ( method_brackets )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==L_BR) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:868:7: method_brackets
                    {
                    pushFollow(FOLLOW_method_brackets_in_simple_method_call4691);
                    method_brackets554=method_brackets();

                    state._fsp--;

                    adaptor.addChild(root_0, method_brackets554.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_method_call"


    public static class index_brackets_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "index_brackets"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:870:1: index_brackets : L_KBR classical_expr_wrp R_KBR ;
    public final ObjcmParser.index_brackets_return index_brackets() throws RecognitionException {
        ObjcmParser.index_brackets_return retval = new ObjcmParser.index_brackets_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR555=null;
        Token R_KBR557=null;
        ObjcmParser.classical_expr_wrp_return classical_expr_wrp556 =null;


        Object L_KBR555_tree=null;
        Object R_KBR557_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:871:2: ( L_KBR classical_expr_wrp R_KBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:871:4: L_KBR classical_expr_wrp R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR555=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_index_brackets4707); 
            L_KBR555_tree = 
            (Object)adaptor.create(L_KBR555)
            ;
            adaptor.addChild(root_0, L_KBR555_tree);


            pushFollow(FOLLOW_classical_expr_wrp_in_index_brackets4710);
            classical_expr_wrp556=classical_expr_wrp();

            state._fsp--;

            adaptor.addChild(root_0, classical_expr_wrp556.getTree());

            R_KBR557=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_index_brackets4712); 
            R_KBR557_tree = 
            (Object)adaptor.create(R_KBR557)
            ;
            adaptor.addChild(root_0, R_KBR557_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "index_brackets"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:878:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcmParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcmParser.interface_declaration_wrapper_return retval = new ObjcmParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_declaration_return interface_declaration558 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:879:2: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:879:4: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper4726);
            interface_declaration558=interface_declaration();

            state._fsp--;

            stream_interface_declaration.add(interface_declaration558.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 879:26: -> ^( INTERFACE interface_declaration )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:879:29: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:881:1: interface_declaration : '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods | interface_fields )* '@end' ;
    public final ObjcmParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcmParser.interface_declaration_return retval = new ObjcmParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal559=null;
        Token string_literal566=null;
        ObjcmParser.name_return name560 =null;

        ObjcmParser.interface_category_return interface_category561 =null;

        ObjcmParser.super_class_return super_class562 =null;

        ObjcmParser.annotated_block_return annotated_block563 =null;

        ObjcmParser.interface_methods_return interface_methods564 =null;

        ObjcmParser.interface_fields_return interface_fields565 =null;


        Object string_literal559_tree=null;
        Object string_literal566_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:882:2: ( '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods | interface_fields )* '@end' )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:882:4: '@interface' name ( interface_category )? ( super_class )? ( annotated_block | interface_methods | interface_fields )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal559=(Token)match(input,173,FOLLOW_173_in_interface_declaration4744); 
            string_literal559_tree = 
            (Object)adaptor.create(string_literal559)
            ;
            adaptor.addChild(root_0, string_literal559_tree);


            pushFollow(FOLLOW_name_in_interface_declaration4747);
            name560=name();

            state._fsp--;

            adaptor.addChild(root_0, name560.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:882:24: ( interface_category )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==L_BR) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:882:24: interface_category
                    {
                    pushFollow(FOLLOW_interface_category_in_interface_declaration4750);
                    interface_category561=interface_category();

                    state._fsp--;

                    adaptor.addChild(root_0, interface_category561.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:882:44: ( super_class )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==COLON) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:882:45: super_class
                    {
                    pushFollow(FOLLOW_super_class_in_interface_declaration4754);
                    super_class562=super_class();

                    state._fsp--;

                    adaptor.addChild(root_0, super_class562.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:883:3: ( annotated_block | interface_methods | interface_fields )*
            loop145:
            do {
                int alt145=4;
                switch ( input.LA(1) ) {
                case L_FBR:
                    {
                    alt145=1;
                    }
                    break;
                case ENUM_PREFIX:
                case L_MINUS:
                case L_PLUS:
                    {
                    alt145=2;
                    }
                    break;
                case ID:
                case VOID:
                case 175:
                case 204:
                    {
                    alt145=3;
                    }
                    break;

                }

                switch (alt145) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:883:4: annotated_block
            	    {
            	    pushFollow(FOLLOW_annotated_block_in_interface_declaration4761);
            	    annotated_block563=annotated_block();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block563.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:883:22: interface_methods
            	    {
            	    pushFollow(FOLLOW_interface_methods_in_interface_declaration4765);
            	    interface_methods564=interface_methods();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_methods564.getTree());

            	    }
            	    break;
            	case 3 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:883:42: interface_fields
            	    {
            	    pushFollow(FOLLOW_interface_fields_in_interface_declaration4769);
            	    interface_fields565=interface_fields();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_fields565.getTree());

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);


            string_literal566=(Token)match(input,170,FOLLOW_170_in_interface_declaration4778); 
            string_literal566_tree = 
            (Object)adaptor.create(string_literal566)
            ;
            adaptor.addChild(root_0, string_literal566_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class annotated_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:887:1: annotated_block : L_FBR ( annotated_block_internal )* R_FBR ;
    public final ObjcmParser.annotated_block_return annotated_block() throws RecognitionException {
        ObjcmParser.annotated_block_return retval = new ObjcmParser.annotated_block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_FBR567=null;
        Token R_FBR569=null;
        ObjcmParser.annotated_block_internal_return annotated_block_internal568 =null;


        Object L_FBR567_tree=null;
        Object R_FBR569_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:888:2: ( L_FBR ( annotated_block_internal )* R_FBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:888:4: L_FBR ( annotated_block_internal )* R_FBR
            {
            root_0 = (Object)adaptor.nil();


            L_FBR567=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_annotated_block4789); 
            L_FBR567_tree = 
            (Object)adaptor.create(L_FBR567)
            ;
            adaptor.addChild(root_0, L_FBR567_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:889:3: ( annotated_block_internal )*
            loop146:
            do {
                int alt146=2;
                int LA146_0 = input.LA(1);

                if ( (LA146_0==ID||LA146_0==VOID||LA146_0==174||LA146_0==177||(LA146_0 >= 203 && LA146_0 <= 204)) ) {
                    alt146=1;
                }


                switch (alt146) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:889:3: annotated_block_internal
            	    {
            	    pushFollow(FOLLOW_annotated_block_internal_in_annotated_block4794);
            	    annotated_block_internal568=annotated_block_internal();

            	    state._fsp--;

            	    adaptor.addChild(root_0, annotated_block_internal568.getTree());

            	    }
            	    break;

            	default :
            	    break loop146;
                }
            } while (true);


            R_FBR569=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_annotated_block4799); 
            R_FBR569_tree = 
            (Object)adaptor.create(R_FBR569)
            ;
            adaptor.addChild(root_0, R_FBR569_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block"


    public static class annotated_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "annotated_block_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:893:1: annotated_block_internal : ( block_annotation | public_block_internal );
    public final ObjcmParser.annotated_block_internal_return annotated_block_internal() throws RecognitionException {
        ObjcmParser.annotated_block_internal_return retval = new ObjcmParser.annotated_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.block_annotation_return block_annotation570 =null;

        ObjcmParser.public_block_internal_return public_block_internal571 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:894:2: ( block_annotation | public_block_internal )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==174||LA147_0==177) ) {
                alt147=1;
            }
            else if ( (LA147_0==ID||LA147_0==VOID||(LA147_0 >= 203 && LA147_0 <= 204)) ) {
                alt147=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;

            }
            switch (alt147) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:894:4: block_annotation
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_annotation_in_annotated_block_internal4812);
                    block_annotation570=block_annotation();

                    state._fsp--;

                    adaptor.addChild(root_0, block_annotation570.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:895:5: public_block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_public_block_internal_in_annotated_block_internal4819);
                    public_block_internal571=public_block_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, public_block_internal571.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotated_block_internal"


    public static class block_annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_annotation"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:898:1: block_annotation : ( '@public' | '@private' );
    public final ObjcmParser.block_annotation_return block_annotation() throws RecognitionException {
        ObjcmParser.block_annotation_return retval = new ObjcmParser.block_annotation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set572=null;

        Object set572_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:899:2: ( '@public' | '@private' )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set572=(Token)input.LT(1);

            if ( input.LA(1)==174||input.LA(1)==177 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set572)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_annotation"


    public static class public_block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "public_block_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:903:1: public_block_internal : ( simple_field_declaration | union_declaration );
    public final ObjcmParser.public_block_internal_return public_block_internal() throws RecognitionException {
        ObjcmParser.public_block_internal_return retval = new ObjcmParser.public_block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.simple_field_declaration_return simple_field_declaration573 =null;

        ObjcmParser.union_declaration_return union_declaration574 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:904:2: ( simple_field_declaration | union_declaration )
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==ID||LA148_0==VOID||LA148_0==204) ) {
                alt148=1;
            }
            else if ( (LA148_0==203) ) {
                alt148=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;

            }
            switch (alt148) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:904:4: simple_field_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_field_declaration_in_public_block_internal4854);
                    simple_field_declaration573=simple_field_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, simple_field_declaration573.getTree());

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:905:4: union_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_union_declaration_in_public_block_internal4859);
                    union_declaration574=union_declaration();

                    state._fsp--;

                    adaptor.addChild(root_0, union_declaration574.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "public_block_internal"


    public static class simple_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_field_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:908:1: simple_field_declaration : field_type name SEMICOLON ;
    public final ObjcmParser.simple_field_declaration_return simple_field_declaration() throws RecognitionException {
        ObjcmParser.simple_field_declaration_return retval = new ObjcmParser.simple_field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON577=null;
        ObjcmParser.field_type_return field_type575 =null;

        ObjcmParser.name_return name576 =null;


        Object SEMICOLON577_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:909:2: ( field_type name SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:909:4: field_type name SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_simple_field_declaration4871);
            field_type575=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type575.getTree());

            pushFollow(FOLLOW_name_in_simple_field_declaration4873);
            name576=name();

            state._fsp--;

            adaptor.addChild(root_0, name576.getTree());

            SEMICOLON577=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_simple_field_declaration4876); 
            SEMICOLON577_tree = 
            (Object)adaptor.create(SEMICOLON577)
            ;
            adaptor.addChild(root_0, SEMICOLON577_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_field_declaration"


    public static class union_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "union_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:912:1: union_declaration : 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON ;
    public final ObjcmParser.union_declaration_return union_declaration() throws RecognitionException {
        ObjcmParser.union_declaration_return retval = new ObjcmParser.union_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal578=null;
        Token L_FBR579=null;
        Token R_FBR581=null;
        Token ID582=null;
        Token SEMICOLON583=null;
        ObjcmParser.simple_field_declaration_return simple_field_declaration580 =null;


        Object string_literal578_tree=null;
        Object L_FBR579_tree=null;
        Object R_FBR581_tree=null;
        Object ID582_tree=null;
        Object SEMICOLON583_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:913:2: ( 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:913:4: 'union' L_FBR ( simple_field_declaration )+ R_FBR ID SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            string_literal578=(Token)match(input,203,FOLLOW_203_in_union_declaration4889); 
            string_literal578_tree = 
            (Object)adaptor.create(string_literal578)
            ;
            adaptor.addChild(root_0, string_literal578_tree);


            L_FBR579=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_union_declaration4892); 
            L_FBR579_tree = 
            (Object)adaptor.create(L_FBR579)
            ;
            adaptor.addChild(root_0, L_FBR579_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:914:4: ( simple_field_declaration )+
            int cnt149=0;
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==ID||LA149_0==VOID||LA149_0==204) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:914:4: simple_field_declaration
            	    {
            	    pushFollow(FOLLOW_simple_field_declaration_in_union_declaration4898);
            	    simple_field_declaration580=simple_field_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, simple_field_declaration580.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt149 >= 1 ) break loop149;
                        EarlyExitException eee =
                            new EarlyExitException(149, input);
                        throw eee;
                }
                cnt149++;
            } while (true);


            R_FBR581=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_union_declaration4903); 
            R_FBR581_tree = 
            (Object)adaptor.create(R_FBR581)
            ;
            adaptor.addChild(root_0, R_FBR581_tree);


            ID582=(Token)match(input,ID,FOLLOW_ID_in_union_declaration4906); 
            ID582_tree = 
            (Object)adaptor.create(ID582)
            ;
            adaptor.addChild(root_0, ID582_tree);


            SEMICOLON583=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_union_declaration4909); 
            SEMICOLON583_tree = 
            (Object)adaptor.create(SEMICOLON583)
            ;
            adaptor.addChild(root_0, SEMICOLON583_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "union_declaration"


    public static class super_class_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "super_class"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:918:1: super_class : COLON ID -> ^( SUPER_CLASS ID ) ;
    public final ObjcmParser.super_class_return super_class() throws RecognitionException {
        ObjcmParser.super_class_return retval = new ObjcmParser.super_class_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON584=null;
        Token ID585=null;

        Object COLON584_tree=null;
        Object ID585_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:919:2: ( COLON ID -> ^( SUPER_CLASS ID ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:919:4: COLON ID
            {
            COLON584=(Token)match(input,COLON,FOLLOW_COLON_in_super_class4923);  
            stream_COLON.add(COLON584);


            ID585=(Token)match(input,ID,FOLLOW_ID_in_super_class4926);  
            stream_ID.add(ID585);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 919:15: -> ^( SUPER_CLASS ID )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:919:18: ^( SUPER_CLASS ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPER_CLASS, "SUPER_CLASS")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "super_class"


    public static class interface_category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_category"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:921:1: interface_category : L_BR ( ID )? R_BR -> ^( CATEGORY L_BR ( ID )? R_BR ) ;
    public final ObjcmParser.interface_category_return interface_category() throws RecognitionException {
        ObjcmParser.interface_category_return retval = new ObjcmParser.interface_category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR586=null;
        Token ID587=null;
        Token R_BR588=null;

        Object L_BR586_tree=null;
        Object ID587_tree=null;
        Object R_BR588_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:922:2: ( L_BR ( ID )? R_BR -> ^( CATEGORY L_BR ( ID )? R_BR ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:922:4: L_BR ( ID )? R_BR
            {
            L_BR586=(Token)match(input,L_BR,FOLLOW_L_BR_in_interface_category4946);  
            stream_L_BR.add(L_BR586);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:922:10: ( ID )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==ID) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:922:10: ID
                    {
                    ID587=(Token)match(input,ID,FOLLOW_ID_in_interface_category4949);  
                    stream_ID.add(ID587);


                    }
                    break;

            }


            R_BR588=(Token)match(input,R_BR,FOLLOW_R_BR_in_interface_category4953);  
            stream_R_BR.add(R_BR588);


            // AST REWRITE
            // elements: R_BR, ID, L_BR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 922:20: -> ^( CATEGORY L_BR ( ID )? R_BR )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:922:23: ^( CATEGORY L_BR ( ID )? R_BR )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_L_BR.nextNode()
                );

                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:922:40: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                adaptor.addChild(root_1, 
                stream_R_BR.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_category"


    public static class interface_fields_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_fields"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:924:1: interface_fields : ( interface_field_wrapper )+ ;
    public final ObjcmParser.interface_fields_return interface_fields() throws RecognitionException {
        ObjcmParser.interface_fields_return retval = new ObjcmParser.interface_fields_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_field_wrapper_return interface_field_wrapper589 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:925:2: ( ( interface_field_wrapper )+ )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:925:4: ( interface_field_wrapper )+
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:925:4: ( interface_field_wrapper )+
            int cnt151=0;
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);

                if ( (LA151_0==175) ) {
                    alt151=1;
                }
                else if ( (LA151_0==ID||LA151_0==VOID||LA151_0==204) ) {
                    alt151=1;
                }


                switch (alt151) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:925:4: interface_field_wrapper
            	    {
            	    pushFollow(FOLLOW_interface_field_wrapper_in_interface_fields4982);
            	    interface_field_wrapper589=interface_field_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_field_wrapper589.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt151 >= 1 ) break loop151;
                        EarlyExitException eee =
                            new EarlyExitException(151, input);
                        throw eee;
                }
                cnt151++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_fields"


    public static class interface_field_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_field_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:927:1: interface_field_wrapper : interface_field -> ^( FIELD interface_field ) ;
    public final ObjcmParser.interface_field_wrapper_return interface_field_wrapper() throws RecognitionException {
        ObjcmParser.interface_field_wrapper_return retval = new ObjcmParser.interface_field_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.interface_field_return interface_field590 =null;


        RewriteRuleSubtreeStream stream_interface_field=new RewriteRuleSubtreeStream(adaptor,"rule interface_field");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:928:2: ( interface_field -> ^( FIELD interface_field ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:928:4: interface_field
            {
            pushFollow(FOLLOW_interface_field_in_interface_field_wrapper4993);
            interface_field590=interface_field();

            state._fsp--;

            stream_interface_field.add(interface_field590.getTree());

            // AST REWRITE
            // elements: interface_field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 928:20: -> ^( FIELD interface_field )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:928:23: ^( FIELD interface_field )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_interface_field.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_field_wrapper"


    public static class interface_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_field"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:930:1: interface_field : ( property_prefix )? interface_field_declaration ;
    public final ObjcmParser.interface_field_return interface_field() throws RecognitionException {
        ObjcmParser.interface_field_return retval = new ObjcmParser.interface_field_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.property_prefix_return property_prefix591 =null;

        ObjcmParser.interface_field_declaration_return interface_field_declaration592 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:931:2: ( ( property_prefix )? interface_field_declaration )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:931:4: ( property_prefix )? interface_field_declaration
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:931:4: ( property_prefix )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==175) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:931:4: property_prefix
                    {
                    pushFollow(FOLLOW_property_prefix_in_interface_field5012);
                    property_prefix591=property_prefix();

                    state._fsp--;

                    adaptor.addChild(root_0, property_prefix591.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_interface_field_declaration_in_interface_field5015);
            interface_field_declaration592=interface_field_declaration();

            state._fsp--;

            adaptor.addChild(root_0, interface_field_declaration592.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_field"


    public static class interface_field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_field_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:933:1: interface_field_declaration : field_type name SEMICOLON ;
    public final ObjcmParser.interface_field_declaration_return interface_field_declaration() throws RecognitionException {
        ObjcmParser.interface_field_declaration_return retval = new ObjcmParser.interface_field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON595=null;
        ObjcmParser.field_type_return field_type593 =null;

        ObjcmParser.name_return name594 =null;


        Object SEMICOLON595_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:934:2: ( field_type name SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:934:4: field_type name SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_interface_field_declaration5026);
            field_type593=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type593.getTree());

            pushFollow(FOLLOW_name_in_interface_field_declaration5028);
            name594=name();

            state._fsp--;

            adaptor.addChild(root_0, name594.getTree());

            SEMICOLON595=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_interface_field_declaration5030); 
            SEMICOLON595_tree = 
            (Object)adaptor.create(SEMICOLON595)
            ;
            adaptor.addChild(root_0, SEMICOLON595_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_field_declaration"


    public static class property_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_prefix"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:936:1: property_prefix : '@property' L_BR property ( COMMA property )* R_BR ;
    public final ObjcmParser.property_prefix_return property_prefix() throws RecognitionException {
        ObjcmParser.property_prefix_return retval = new ObjcmParser.property_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal596=null;
        Token L_BR597=null;
        Token COMMA599=null;
        Token R_BR601=null;
        ObjcmParser.property_return property598 =null;

        ObjcmParser.property_return property600 =null;


        Object string_literal596_tree=null;
        Object L_BR597_tree=null;
        Object COMMA599_tree=null;
        Object R_BR601_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:937:2: ( '@property' L_BR property ( COMMA property )* R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:937:4: '@property' L_BR property ( COMMA property )* R_BR
            {
            root_0 = (Object)adaptor.nil();


            string_literal596=(Token)match(input,175,FOLLOW_175_in_property_prefix5041); 
            string_literal596_tree = 
            (Object)adaptor.create(string_literal596)
            ;
            adaptor.addChild(root_0, string_literal596_tree);


            L_BR597=(Token)match(input,L_BR,FOLLOW_L_BR_in_property_prefix5043); 
            L_BR597_tree = 
            (Object)adaptor.create(L_BR597)
            ;
            adaptor.addChild(root_0, L_BR597_tree);


            pushFollow(FOLLOW_property_in_property_prefix5045);
            property598=property();

            state._fsp--;

            adaptor.addChild(root_0, property598.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:937:30: ( COMMA property )*
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==COMMA) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:937:31: COMMA property
            	    {
            	    COMMA599=(Token)match(input,COMMA,FOLLOW_COMMA_in_property_prefix5048); 
            	    COMMA599_tree = 
            	    (Object)adaptor.create(COMMA599)
            	    ;
            	    adaptor.addChild(root_0, COMMA599_tree);


            	    pushFollow(FOLLOW_property_in_property_prefix5050);
            	    property600=property();

            	    state._fsp--;

            	    adaptor.addChild(root_0, property600.getTree());

            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);


            R_BR601=(Token)match(input,R_BR,FOLLOW_R_BR_in_property_prefix5054); 
            R_BR601_tree = 
            (Object)adaptor.create(R_BR601)
            ;
            adaptor.addChild(root_0, R_BR601_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_prefix"


    public static class property_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:939:1: property : ( 'readwrite' | 'assign' | 'copy' );
    public final ObjcmParser.property_return property() throws RecognitionException {
        ObjcmParser.property_return retval = new ObjcmParser.property_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set602=null;

        Object set602_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:939:9: ( 'readwrite' | 'assign' | 'copy' )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set602=(Token)input.LT(1);

            if ( input.LA(1)==185||input.LA(1)==188||input.LA(1)==199 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set602)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property"


    public static class interface_methods_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_methods"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:944:1: interface_methods : ( enum_declaration | interface_method )+ ;
    public final ObjcmParser.interface_methods_return interface_methods() throws RecognitionException {
        ObjcmParser.interface_methods_return retval = new ObjcmParser.interface_methods_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.enum_declaration_return enum_declaration603 =null;

        ObjcmParser.interface_method_return interface_method604 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:945:2: ( ( enum_declaration | interface_method )+ )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:945:4: ( enum_declaration | interface_method )+
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:945:4: ( enum_declaration | interface_method )+
            int cnt154=0;
            loop154:
            do {
                int alt154=3;
                int LA154_0 = input.LA(1);

                if ( (LA154_0==ENUM_PREFIX) ) {
                    alt154=1;
                }
                else if ( (LA154_0==L_MINUS||LA154_0==L_PLUS) ) {
                    alt154=2;
                }


                switch (alt154) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:945:5: enum_declaration
            	    {
            	    pushFollow(FOLLOW_enum_declaration_in_interface_methods5087);
            	    enum_declaration603=enum_declaration();

            	    state._fsp--;

            	    adaptor.addChild(root_0, enum_declaration603.getTree());

            	    }
            	    break;
            	case 2 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:945:24: interface_method
            	    {
            	    pushFollow(FOLLOW_interface_method_in_interface_methods5091);
            	    interface_method604=interface_method();

            	    state._fsp--;

            	    adaptor.addChild(root_0, interface_method604.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt154 >= 1 ) break loop154;
                        EarlyExitException eee =
                            new EarlyExitException(154, input);
                        throw eee;
                }
                cnt154++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_methods"


    public static class interface_method_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_method"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:947:1: interface_method : method_header -> ^( METHOD method_header ) ;
    public final ObjcmParser.interface_method_return interface_method() throws RecognitionException {
        ObjcmParser.interface_method_return retval = new ObjcmParser.interface_method_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_header_return method_header605 =null;


        RewriteRuleSubtreeStream stream_method_header=new RewriteRuleSubtreeStream(adaptor,"rule method_header");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:948:2: ( method_header -> ^( METHOD method_header ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:948:4: method_header
            {
            pushFollow(FOLLOW_method_header_in_interface_method5105);
            method_header605=method_header();

            state._fsp--;

            stream_method_header.add(method_header605.getTree());

            // AST REWRITE
            // elements: method_header
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 948:18: -> ^( METHOD method_header )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:948:21: ^( METHOD method_header )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD, "METHOD")
                , root_1);

                adaptor.addChild(root_1, stream_method_header.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_method"


    public static class method_header_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:950:1: method_header : method_header_body ( SEMICOLON )? ;
    public final ObjcmParser.method_header_return method_header() throws RecognitionException {
        ObjcmParser.method_header_return retval = new ObjcmParser.method_header_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON607=null;
        ObjcmParser.method_header_body_return method_header_body606 =null;


        Object SEMICOLON607_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:951:2: ( method_header_body ( SEMICOLON )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:951:4: method_header_body ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_header_body_in_method_header5124);
            method_header_body606=method_header_body();

            state._fsp--;

            adaptor.addChild(root_0, method_header_body606.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:951:23: ( SEMICOLON )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==SEMICOLON) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:951:23: SEMICOLON
                    {
                    SEMICOLON607=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_method_header5126); 
                    SEMICOLON607_tree = 
                    (Object)adaptor.create(SEMICOLON607)
                    ;
                    adaptor.addChild(root_0, SEMICOLON607_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header"


    public static class method_header_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:953:1: method_header_body : method_modifier_wrapper ( method_type )? name ( method_params )? ( va_args_wrapper )? ;
    public final ObjcmParser.method_header_body_return method_header_body() throws RecognitionException {
        ObjcmParser.method_header_body_return retval = new ObjcmParser.method_header_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper608 =null;

        ObjcmParser.method_type_return method_type609 =null;

        ObjcmParser.name_return name610 =null;

        ObjcmParser.method_params_return method_params611 =null;

        ObjcmParser.va_args_wrapper_return va_args_wrapper612 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:954:2: ( method_modifier_wrapper ( method_type )? name ( method_params )? ( va_args_wrapper )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:954:4: method_modifier_wrapper ( method_type )? name ( method_params )? ( va_args_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_header_body5136);
            method_modifier_wrapper608=method_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, method_modifier_wrapper608.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:954:29: ( method_type )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==L_BR) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:954:29: method_type
                    {
                    pushFollow(FOLLOW_method_type_in_method_header_body5139);
                    method_type609=method_type();

                    state._fsp--;

                    adaptor.addChild(root_0, method_type609.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_name_in_method_header_body5143);
            name610=name();

            state._fsp--;

            adaptor.addChild(root_0, name610.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:954:49: ( method_params )?
            int alt157=2;
            alt157 = dfa157.predict(input);
            switch (alt157) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:954:49: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_header_body5146);
                    method_params611=method_params();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params611.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:954:64: ( va_args_wrapper )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==COMMA) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:954:64: va_args_wrapper
                    {
                    pushFollow(FOLLOW_va_args_wrapper_in_method_header_body5149);
                    va_args_wrapper612=va_args_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, va_args_wrapper612.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body"


    public static class va_args_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:956:1: va_args_wrapper : va_args -> ^( VA_ARGS va_args ) ;
    public final ObjcmParser.va_args_wrapper_return va_args_wrapper() throws RecognitionException {
        ObjcmParser.va_args_wrapper_return retval = new ObjcmParser.va_args_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.va_args_return va_args613 =null;


        RewriteRuleSubtreeStream stream_va_args=new RewriteRuleSubtreeStream(adaptor,"rule va_args");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:957:2: ( va_args -> ^( VA_ARGS va_args ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:957:4: va_args
            {
            pushFollow(FOLLOW_va_args_in_va_args_wrapper5159);
            va_args613=va_args();

            state._fsp--;

            stream_va_args.add(va_args613.getTree());

            // AST REWRITE
            // elements: va_args
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 957:12: -> ^( VA_ARGS va_args )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:957:15: ^( VA_ARGS va_args )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VA_ARGS, "VA_ARGS")
                , root_1);

                adaptor.addChild(root_1, stream_va_args.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args_wrapper"


    public static class va_args_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "va_args"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:959:1: va_args : COMMA '...' ( SEMICOLON )? ;
    public final ObjcmParser.va_args_return va_args() throws RecognitionException {
        ObjcmParser.va_args_return retval = new ObjcmParser.va_args_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA614=null;
        Token string_literal615=null;
        Token SEMICOLON616=null;

        Object COMMA614_tree=null;
        Object string_literal615_tree=null;
        Object SEMICOLON616_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:959:9: ( COMMA '...' ( SEMICOLON )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:959:11: COMMA '...' ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            COMMA614=(Token)match(input,COMMA,FOLLOW_COMMA_in_va_args5176); 
            COMMA614_tree = 
            (Object)adaptor.create(COMMA614)
            ;
            adaptor.addChild(root_0, COMMA614_tree);


            string_literal615=(Token)match(input,167,FOLLOW_167_in_va_args5179); 
            string_literal615_tree = 
            (Object)adaptor.create(string_literal615)
            ;
            adaptor.addChild(root_0, string_literal615_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:959:25: ( SEMICOLON )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==SEMICOLON) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:959:25: SEMICOLON
                    {
                    SEMICOLON616=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_va_args5182); 
                    SEMICOLON616_tree = 
                    (Object)adaptor.create(SEMICOLON616)
                    ;
                    adaptor.addChild(root_0, SEMICOLON616_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "va_args"


    public static class method_header_body2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:961:1: method_header_body2 : method_type name ( method_params2 )? ;
    public final ObjcmParser.method_header_body2_return method_header_body2() throws RecognitionException {
        ObjcmParser.method_header_body2_return retval = new ObjcmParser.method_header_body2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_type_return method_type617 =null;

        ObjcmParser.name_return name618 =null;

        ObjcmParser.method_params2_return method_params2619 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:962:2: ( method_type name ( method_params2 )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:962:4: method_type name ( method_params2 )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_type_in_method_header_body25193);
            method_type617=method_type();

            state._fsp--;

            adaptor.addChild(root_0, method_type617.getTree());

            pushFollow(FOLLOW_name_in_method_header_body25195);
            name618=name();

            state._fsp--;

            adaptor.addChild(root_0, name618.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:962:22: ( method_params2 )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==L_BR) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:962:22: method_params2
                    {
                    pushFollow(FOLLOW_method_params2_in_method_header_body25198);
                    method_params2619=method_params2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_params2619.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body2"


    public static class method_header_body3_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_header_body3"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:964:1: method_header_body3 : method_params2 ;
    public final ObjcmParser.method_header_body3_return method_header_body3() throws RecognitionException {
        ObjcmParser.method_header_body3_return retval = new ObjcmParser.method_header_body3_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2620 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:965:2: ( method_params2 )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:965:4: method_params2
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_header_body35208);
            method_params2620=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2620.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_header_body3"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:967:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcmParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcmParser.method_modifier_wrapper_return retval = new ObjcmParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_modifier_return method_modifier621 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:968:2: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:968:4: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper5217);
            method_modifier621=method_modifier();

            state._fsp--;

            stream_method_modifier.add(method_modifier621.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 968:20: -> ^( MODIFIER method_modifier )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:968:23: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:970:1: method_modifier : ( '+' | '-' );
    public final ObjcmParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcmParser.method_modifier_return retval = new ObjcmParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set622=null;

        Object set622_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:971:2: ( '+' | '-' )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set622=(Token)input.LT(1);

            if ( input.LA(1)==L_MINUS||input.LA(1)==L_PLUS ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set622)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_type"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:973:1: method_type : method_type_internal -> ^( TYPE method_type_internal ) ;
    public final ObjcmParser.method_type_return method_type() throws RecognitionException {
        ObjcmParser.method_type_return retval = new ObjcmParser.method_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_type_internal_return method_type_internal623 =null;


        RewriteRuleSubtreeStream stream_method_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule method_type_internal");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:974:2: ( method_type_internal -> ^( TYPE method_type_internal ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:974:4: method_type_internal
            {
            pushFollow(FOLLOW_method_type_internal_in_method_type5248);
            method_type_internal623=method_type_internal();

            state._fsp--;

            stream_method_type_internal.add(method_type_internal623.getTree());

            // AST REWRITE
            // elements: method_type_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 974:25: -> ^( TYPE method_type_internal )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:974:28: ^( TYPE method_type_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE, "TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_method_type_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_type"


    public static class method_type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_type_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:976:1: method_type_internal : ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? ( ASTERISK )* R_BR -> ^( L_BR ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? R_BR ) );
    public final ObjcmParser.method_type_internal_return method_type_internal() throws RecognitionException {
        ObjcmParser.method_type_internal_return retval = new ObjcmParser.method_type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR624=null;
        Token STRUCT_PREFIX625=null;
        Token ASTERISK628=null;
        Token R_BR629=null;
        Token L_BR630=null;
        Token CONST_PREFIX631=null;
        Token ID633=null;
        Token L_KBR634=null;
        Token R_KBR635=null;
        Token ASTERISK637=null;
        Token R_BR638=null;
        ObjcmParser.type_internal_return type_internal626 =null;

        ObjcmParser.generic_return generic627 =null;

        ObjcmParser.known_types_return known_types632 =null;

        ObjcmParser.generic_return generic636 =null;


        Object L_BR624_tree=null;
        Object STRUCT_PREFIX625_tree=null;
        Object ASTERISK628_tree=null;
        Object R_BR629_tree=null;
        Object L_BR630_tree=null;
        Object CONST_PREFIX631_tree=null;
        Object ID633_tree=null;
        Object L_KBR634_tree=null;
        Object R_KBR635_tree=null;
        Object ASTERISK637_tree=null;
        Object R_BR638_tree=null;
        RewriteRuleTokenStream stream_CONST_PREFIX=new RewriteRuleTokenStream(adaptor,"token CONST_PREFIX");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_R_BR=new RewriteRuleTokenStream(adaptor,"token R_BR");
        RewriteRuleTokenStream stream_R_KBR=new RewriteRuleTokenStream(adaptor,"token R_KBR");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleTokenStream stream_L_KBR=new RewriteRuleTokenStream(adaptor,"token L_KBR");
        RewriteRuleTokenStream stream_L_BR=new RewriteRuleTokenStream(adaptor,"token L_BR");
        RewriteRuleSubtreeStream stream_generic=new RewriteRuleSubtreeStream(adaptor,"rule generic");
        RewriteRuleSubtreeStream stream_known_types=new RewriteRuleSubtreeStream(adaptor,"rule known_types");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:977:2: ( L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR | L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? ( ASTERISK )* R_BR -> ^( L_BR ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? R_BR ) )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==L_BR) ) {
                switch ( input.LA(2) ) {
                case STRUCT_PREFIX:
                    {
                    alt170=1;
                    }
                    break;
                case VOID:
                case 204:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        int LA170_10 = input.LA(4);

                        if ( (LA170_10==R_KBR) ) {
                            alt170=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 170, 10, input);

                            throw nvae;

                        }
                        }
                        break;
                    case L_LESS:
                        {
                        int LA170_11 = input.LA(4);

                        if ( (LA170_11==ID) ) {
                            alt170=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 170, 11, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA170_12 = input.LA(4);

                        if ( (LA170_12==R_BR) ) {
                            alt170=1;
                        }
                        else if ( (LA170_12==ASTERISK) ) {
                            alt170=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 170, 12, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt170=1;
                        }
                        break;
                    case ID:
                        {
                        alt170=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 170, 3, input);

                        throw nvae;

                    }

                    }
                    break;
                case ASTERISK:
                case CONST_PREFIX:
                case L_KBR:
                case L_LESS:
                case R_BR:
                    {
                    alt170=2;
                    }
                    break;
                case ID:
                    {
                    switch ( input.LA(3) ) {
                    case L_KBR:
                        {
                        int LA170_15 = input.LA(4);

                        if ( (LA170_15==R_KBR) ) {
                            alt170=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 170, 15, input);

                            throw nvae;

                        }
                        }
                        break;
                    case L_LESS:
                        {
                        int LA170_16 = input.LA(4);

                        if ( (LA170_16==ID) ) {
                            alt170=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 170, 16, input);

                            throw nvae;

                        }
                        }
                        break;
                    case ASTERISK:
                        {
                        int LA170_17 = input.LA(4);

                        if ( (LA170_17==R_BR) ) {
                            alt170=1;
                        }
                        else if ( (LA170_17==ASTERISK) ) {
                            alt170=1;
                        }
                        else {
                            NoViableAltException nvae =
                                new NoViableAltException("", 170, 17, input);

                            throw nvae;

                        }
                        }
                        break;
                    case R_BR:
                        {
                        alt170=1;
                        }
                        break;
                    case ID:
                        {
                        alt170=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("", 170, 5, input);

                        throw nvae;

                    }

                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("", 170, 1, input);

                    throw nvae;

                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;

            }
            switch (alt170) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:977:4: L_BR ( STRUCT_PREFIX )? type_internal ( generic )? ( ASTERISK )* R_BR
                    {
                    root_0 = (Object)adaptor.nil();


                    L_BR624=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type_internal5266); 
                    L_BR624_tree = 
                    (Object)adaptor.create(L_BR624)
                    ;
                    adaptor.addChild(root_0, L_BR624_tree);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:977:9: ( STRUCT_PREFIX )?
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==STRUCT_PREFIX) ) {
                        alt161=1;
                    }
                    switch (alt161) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:977:9: STRUCT_PREFIX
                            {
                            STRUCT_PREFIX625=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_type_internal5268); 
                            STRUCT_PREFIX625_tree = 
                            (Object)adaptor.create(STRUCT_PREFIX625)
                            ;
                            adaptor.addChild(root_0, STRUCT_PREFIX625_tree);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_type_internal_in_method_type_internal5271);
                    type_internal626=type_internal();

                    state._fsp--;

                    adaptor.addChild(root_0, type_internal626.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:977:38: ( generic )?
                    int alt162=2;
                    int LA162_0 = input.LA(1);

                    if ( (LA162_0==L_LESS) ) {
                        alt162=1;
                    }
                    switch (alt162) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:977:38: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type_internal5273);
                            generic627=generic();

                            state._fsp--;

                            adaptor.addChild(root_0, generic627.getTree());

                            }
                            break;

                    }


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:977:47: ( ASTERISK )*
                    loop163:
                    do {
                        int alt163=2;
                        int LA163_0 = input.LA(1);

                        if ( (LA163_0==ASTERISK) ) {
                            alt163=1;
                        }


                        switch (alt163) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:977:47: ASTERISK
                    	    {
                    	    ASTERISK628=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type_internal5276); 
                    	    ASTERISK628_tree = 
                    	    (Object)adaptor.create(ASTERISK628)
                    	    ;
                    	    adaptor.addChild(root_0, ASTERISK628_tree);


                    	    }
                    	    break;

                    	default :
                    	    break loop163;
                        }
                    } while (true);


                    R_BR629=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type_internal5279); 
                    R_BR629_tree = 
                    (Object)adaptor.create(R_BR629)
                    ;
                    adaptor.addChild(root_0, R_BR629_tree);


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:5: L_BR ( CONST_PREFIX )? ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? ( ASTERISK )* R_BR
                    {
                    L_BR630=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_type_internal5285);  
                    stream_L_BR.add(L_BR630);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:10: ( CONST_PREFIX )?
                    int alt164=2;
                    int LA164_0 = input.LA(1);

                    if ( (LA164_0==CONST_PREFIX) ) {
                        alt164=1;
                    }
                    switch (alt164) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:10: CONST_PREFIX
                            {
                            CONST_PREFIX631=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_type_internal5287);  
                            stream_CONST_PREFIX.add(CONST_PREFIX631);


                            }
                            break;

                    }


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:24: ( known_types )?
                    int alt165=2;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==VOID||LA165_0==204) ) {
                        alt165=1;
                    }
                    switch (alt165) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:24: known_types
                            {
                            pushFollow(FOLLOW_known_types_in_method_type_internal5290);
                            known_types632=known_types();

                            state._fsp--;

                            stream_known_types.add(known_types632.getTree());

                            }
                            break;

                    }


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:37: ( ID )*
                    loop166:
                    do {
                        int alt166=2;
                        int LA166_0 = input.LA(1);

                        if ( (LA166_0==ID) ) {
                            alt166=1;
                        }


                        switch (alt166) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:37: ID
                    	    {
                    	    ID633=(Token)match(input,ID,FOLLOW_ID_in_method_type_internal5293);  
                    	    stream_ID.add(ID633);


                    	    }
                    	    break;

                    	default :
                    	    break loop166;
                        }
                    } while (true);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:41: ( L_KBR R_KBR )*
                    loop167:
                    do {
                        int alt167=2;
                        int LA167_0 = input.LA(1);

                        if ( (LA167_0==L_KBR) ) {
                            alt167=1;
                        }


                        switch (alt167) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:42: L_KBR R_KBR
                    	    {
                    	    L_KBR634=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_method_type_internal5297);  
                    	    stream_L_KBR.add(L_KBR634);


                    	    R_KBR635=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_method_type_internal5299);  
                    	    stream_R_KBR.add(R_KBR635);


                    	    }
                    	    break;

                    	default :
                    	    break loop167;
                        }
                    } while (true);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:56: ( generic )?
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==L_LESS) ) {
                        alt168=1;
                    }
                    switch (alt168) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:56: generic
                            {
                            pushFollow(FOLLOW_generic_in_method_type_internal5303);
                            generic636=generic();

                            state._fsp--;

                            stream_generic.add(generic636.getTree());

                            }
                            break;

                    }


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:65: ( ASTERISK )*
                    loop169:
                    do {
                        int alt169=2;
                        int LA169_0 = input.LA(1);

                        if ( (LA169_0==ASTERISK) ) {
                            alt169=1;
                        }


                        switch (alt169) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:65: ASTERISK
                    	    {
                    	    ASTERISK637=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_method_type_internal5306);  
                    	    stream_ASTERISK.add(ASTERISK637);


                    	    }
                    	    break;

                    	default :
                    	    break loop169;
                        }
                    } while (true);


                    R_BR638=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_type_internal5309);  
                    stream_R_BR.add(R_BR638);


                    // AST REWRITE
                    // elements: L_KBR, L_BR, generic, R_BR, R_KBR, known_types, ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 978:80: -> ^( L_BR ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? R_BR )
                    {
                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:83: ^( L_BR ( known_types )? ( ID )* ( L_KBR R_KBR )* ( generic )? R_BR )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        stream_L_BR.nextNode()
                        , root_1);

                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:91: ( known_types )?
                        if ( stream_known_types.hasNext() ) {
                            adaptor.addChild(root_1, stream_known_types.nextTree());

                        }
                        stream_known_types.reset();

                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:104: ( ID )*
                        while ( stream_ID.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_ID.nextNode()
                            );

                        }
                        stream_ID.reset();

                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:108: ( L_KBR R_KBR )*
                        while ( stream_L_KBR.hasNext()||stream_R_KBR.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_L_KBR.nextNode()
                            );

                            adaptor.addChild(root_1, 
                            stream_R_KBR.nextNode()
                            );

                        }
                        stream_L_KBR.reset();
                        stream_R_KBR.reset();

                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:978:123: ( generic )?
                        if ( stream_generic.hasNext() ) {
                            adaptor.addChild(root_1, stream_generic.nextTree());

                        }
                        stream_generic.reset();

                        adaptor.addChild(root_1, 
                        stream_R_BR.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_type_internal"


    public static class type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:981:1: type_internal : type_internal1 ( L_KBR R_KBR )? ;
    public final ObjcmParser.type_internal_return type_internal() throws RecognitionException {
        ObjcmParser.type_internal_return retval = new ObjcmParser.type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR640=null;
        Token R_KBR641=null;
        ObjcmParser.type_internal1_return type_internal1639 =null;


        Object L_KBR640_tree=null;
        Object R_KBR641_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:982:2: ( type_internal1 ( L_KBR R_KBR )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:982:4: type_internal1 ( L_KBR R_KBR )?
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal1_in_type_internal5350);
            type_internal1639=type_internal1();

            state._fsp--;

            adaptor.addChild(root_0, type_internal1639.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:982:19: ( L_KBR R_KBR )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==L_KBR) ) {
                int LA171_1 = input.LA(2);

                if ( (LA171_1==R_KBR) ) {
                    alt171=1;
                }
            }
            switch (alt171) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:982:20: L_KBR R_KBR
                    {
                    L_KBR640=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_type_internal5353); 
                    L_KBR640_tree = 
                    (Object)adaptor.create(L_KBR640)
                    ;
                    adaptor.addChild(root_0, L_KBR640_tree);


                    R_KBR641=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_type_internal5356); 
                    R_KBR641_tree = 
                    (Object)adaptor.create(R_KBR641)
                    ;
                    adaptor.addChild(root_0, R_KBR641_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal"


    public static class type_internal1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_internal1"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:985:1: type_internal1 : ( VOID | ID | 'unsigned' );
    public final ObjcmParser.type_internal1_return type_internal1() throws RecognitionException {
        ObjcmParser.type_internal1_return retval = new ObjcmParser.type_internal1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set642=null;

        Object set642_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:986:2: ( VOID | ID | 'unsigned' )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set642=(Token)input.LT(1);

            if ( input.LA(1)==ID||input.LA(1)==VOID||input.LA(1)==204 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set642)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_internal1"


    public static class generic_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:991:1: generic : L_LESS generic_internal_wrapper L_MORE ;
    public final ObjcmParser.generic_return generic() throws RecognitionException {
        ObjcmParser.generic_return retval = new ObjcmParser.generic_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_LESS643=null;
        Token L_MORE645=null;
        ObjcmParser.generic_internal_wrapper_return generic_internal_wrapper644 =null;


        Object L_LESS643_tree=null;
        Object L_MORE645_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:991:8: ( L_LESS generic_internal_wrapper L_MORE )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:991:11: L_LESS generic_internal_wrapper L_MORE
            {
            root_0 = (Object)adaptor.nil();


            L_LESS643=(Token)match(input,L_LESS,FOLLOW_L_LESS_in_generic5395); 
            L_LESS643_tree = 
            (Object)adaptor.create(L_LESS643)
            ;
            adaptor.addChild(root_0, L_LESS643_tree);


            pushFollow(FOLLOW_generic_internal_wrapper_in_generic5397);
            generic_internal_wrapper644=generic_internal_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, generic_internal_wrapper644.getTree());

            L_MORE645=(Token)match(input,L_MORE,FOLLOW_L_MORE_in_generic5399); 
            L_MORE645_tree = 
            (Object)adaptor.create(L_MORE645)
            ;
            adaptor.addChild(root_0, L_MORE645_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic"


    public static class generic_internal_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic_internal_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:993:1: generic_internal_wrapper : generic_internal -> ^( GENERIC generic_internal ) ;
    public final ObjcmParser.generic_internal_wrapper_return generic_internal_wrapper() throws RecognitionException {
        ObjcmParser.generic_internal_wrapper_return retval = new ObjcmParser.generic_internal_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.generic_internal_return generic_internal646 =null;


        RewriteRuleSubtreeStream stream_generic_internal=new RewriteRuleSubtreeStream(adaptor,"rule generic_internal");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:994:2: ( generic_internal -> ^( GENERIC generic_internal ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:994:4: generic_internal
            {
            pushFollow(FOLLOW_generic_internal_in_generic_internal_wrapper5409);
            generic_internal646=generic_internal();

            state._fsp--;

            stream_generic_internal.add(generic_internal646.getTree());

            // AST REWRITE
            // elements: generic_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 994:21: -> ^( GENERIC generic_internal )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:994:24: ^( GENERIC generic_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GENERIC, "GENERIC")
                , root_1);

                adaptor.addChild(root_1, stream_generic_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic_internal_wrapper"


    public static class generic_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "generic_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:996:1: generic_internal : ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* ;
    public final ObjcmParser.generic_internal_return generic_internal() throws RecognitionException {
        ObjcmParser.generic_internal_return retval = new ObjcmParser.generic_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID647=null;
        Token ASTERISK648=null;
        Token COMMA649=null;
        Token ID650=null;
        Token ASTERISK651=null;

        Object ID647_tree=null;
        Object ASTERISK648_tree=null;
        Object COMMA649_tree=null;
        Object ID650_tree=null;
        Object ASTERISK651_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:997:2: ( ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:997:5: ID ( ASTERISK )* ( COMMA ID ( ASTERISK )* )*
            {
            root_0 = (Object)adaptor.nil();


            ID647=(Token)match(input,ID,FOLLOW_ID_in_generic_internal5427); 
            ID647_tree = 
            (Object)adaptor.create(ID647)
            ;
            adaptor.addChild(root_0, ID647_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:997:8: ( ASTERISK )*
            loop172:
            do {
                int alt172=2;
                int LA172_0 = input.LA(1);

                if ( (LA172_0==ASTERISK) ) {
                    alt172=1;
                }


                switch (alt172) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:997:8: ASTERISK
            	    {
            	    ASTERISK648=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal5429); 
            	    ASTERISK648_tree = 
            	    (Object)adaptor.create(ASTERISK648)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK648_tree);


            	    }
            	    break;

            	default :
            	    break loop172;
                }
            } while (true);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:997:18: ( COMMA ID ( ASTERISK )* )*
            loop174:
            do {
                int alt174=2;
                int LA174_0 = input.LA(1);

                if ( (LA174_0==COMMA) ) {
                    alt174=1;
                }


                switch (alt174) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:997:19: COMMA ID ( ASTERISK )*
            	    {
            	    COMMA649=(Token)match(input,COMMA,FOLLOW_COMMA_in_generic_internal5433); 
            	    COMMA649_tree = 
            	    (Object)adaptor.create(COMMA649)
            	    ;
            	    adaptor.addChild(root_0, COMMA649_tree);


            	    ID650=(Token)match(input,ID,FOLLOW_ID_in_generic_internal5436); 
            	    ID650_tree = 
            	    (Object)adaptor.create(ID650)
            	    ;
            	    adaptor.addChild(root_0, ID650_tree);


            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:997:30: ( ASTERISK )*
            	    loop173:
            	    do {
            	        int alt173=2;
            	        int LA173_0 = input.LA(1);

            	        if ( (LA173_0==ASTERISK) ) {
            	            alt173=1;
            	        }


            	        switch (alt173) {
            	    	case 1 :
            	    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:997:30: ASTERISK
            	    	    {
            	    	    ASTERISK651=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_generic_internal5439); 
            	    	    ASTERISK651_tree = 
            	    	    (Object)adaptor.create(ASTERISK651)
            	    	    ;
            	    	    adaptor.addChild(root_0, ASTERISK651_tree);


            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop173;
            	        }
            	    } while (true);


            	    }
            	    break;

            	default :
            	    break loop174;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "generic_internal"


    public static class method_params2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:999:1: method_params2 : L_BR ( method_param_wrapper2 ( COMMA method_param_wrapper2 )* )? R_BR ;
    public final ObjcmParser.method_params2_return method_params2() throws RecognitionException {
        ObjcmParser.method_params2_return retval = new ObjcmParser.method_params2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_BR652=null;
        Token COMMA654=null;
        Token R_BR656=null;
        ObjcmParser.method_param_wrapper2_return method_param_wrapper2653 =null;

        ObjcmParser.method_param_wrapper2_return method_param_wrapper2655 =null;


        Object L_BR652_tree=null;
        Object COMMA654_tree=null;
        Object R_BR656_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1000:2: ( L_BR ( method_param_wrapper2 ( COMMA method_param_wrapper2 )* )? R_BR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1000:4: L_BR ( method_param_wrapper2 ( COMMA method_param_wrapper2 )* )? R_BR
            {
            root_0 = (Object)adaptor.nil();


            L_BR652=(Token)match(input,L_BR,FOLLOW_L_BR_in_method_params25451); 
            L_BR652_tree = 
            (Object)adaptor.create(L_BR652)
            ;
            adaptor.addChild(root_0, L_BR652_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1000:10: ( method_param_wrapper2 ( COMMA method_param_wrapper2 )* )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==CONST_PREFIX||LA176_0==ENUM_PREFIX||LA176_0==ID||LA176_0==STRUCT_PREFIX||LA176_0==VOID||LA176_0==204) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1000:11: method_param_wrapper2 ( COMMA method_param_wrapper2 )*
                    {
                    pushFollow(FOLLOW_method_param_wrapper2_in_method_params25455);
                    method_param_wrapper2653=method_param_wrapper2();

                    state._fsp--;

                    adaptor.addChild(root_0, method_param_wrapper2653.getTree());

                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1000:33: ( COMMA method_param_wrapper2 )*
                    loop175:
                    do {
                        int alt175=2;
                        int LA175_0 = input.LA(1);

                        if ( (LA175_0==COMMA) ) {
                            alt175=1;
                        }


                        switch (alt175) {
                    	case 1 :
                    	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1000:34: COMMA method_param_wrapper2
                    	    {
                    	    COMMA654=(Token)match(input,COMMA,FOLLOW_COMMA_in_method_params25458); 
                    	    COMMA654_tree = 
                    	    (Object)adaptor.create(COMMA654)
                    	    ;
                    	    adaptor.addChild(root_0, COMMA654_tree);


                    	    pushFollow(FOLLOW_method_param_wrapper2_in_method_params25460);
                    	    method_param_wrapper2655=method_param_wrapper2();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, method_param_wrapper2655.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop175;
                        }
                    } while (true);


                    }
                    break;

            }


            R_BR656=(Token)match(input,R_BR,FOLLOW_R_BR_in_method_params25466); 
            R_BR656_tree = 
            (Object)adaptor.create(R_BR656)
            ;
            adaptor.addChild(root_0, R_BR656_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params2"


    public static class method_param_wrapper2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_wrapper2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1003:1: method_param_wrapper2 : method_param2 -> ^( PARAM method_param2 ) ;
    public final ObjcmParser.method_param_wrapper2_return method_param_wrapper2() throws RecognitionException {
        ObjcmParser.method_param_wrapper2_return retval = new ObjcmParser.method_param_wrapper2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param2_return method_param2657 =null;


        RewriteRuleSubtreeStream stream_method_param2=new RewriteRuleSubtreeStream(adaptor,"rule method_param2");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1004:2: ( method_param2 -> ^( PARAM method_param2 ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1004:4: method_param2
            {
            pushFollow(FOLLOW_method_param2_in_method_param_wrapper25477);
            method_param2657=method_param2();

            state._fsp--;

            stream_method_param2.add(method_param2657.getTree());

            // AST REWRITE
            // elements: method_param2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1004:18: -> ^( PARAM method_param2 )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1004:21: ^( PARAM method_param2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM, "PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_method_param2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_wrapper2"


    public static class method_param2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param2"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1006:1: method_param2 : ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( index_wrapper )? ;
    public final ObjcmParser.method_param2_return method_param2() throws RecognitionException {
        ObjcmParser.method_param2_return retval = new ObjcmParser.method_param2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX658=null;
        Token ENUM_PREFIX659=null;
        Token STRUCT_PREFIX660=null;
        Token string_literal661=null;
        ObjcmParser.field_type_return field_type662 =null;

        ObjcmParser.name_return name663 =null;

        ObjcmParser.index_wrapper_return index_wrapper664 =null;


        Object CONST_PREFIX658_tree=null;
        Object ENUM_PREFIX659_tree=null;
        Object STRUCT_PREFIX660_tree=null;
        Object string_literal661_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1007:2: ( ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( index_wrapper )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1007:4: ( CONST_PREFIX )? ( ENUM_PREFIX )? ( STRUCT_PREFIX )? ( 'unsigned' )? field_type ( name )? ( index_wrapper )?
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1007:4: ( CONST_PREFIX )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==CONST_PREFIX) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1007:4: CONST_PREFIX
                    {
                    CONST_PREFIX658=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_method_param25495); 
                    CONST_PREFIX658_tree = 
                    (Object)adaptor.create(CONST_PREFIX658)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX658_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1007:18: ( ENUM_PREFIX )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==ENUM_PREFIX) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1007:18: ENUM_PREFIX
                    {
                    ENUM_PREFIX659=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_method_param25498); 
                    ENUM_PREFIX659_tree = 
                    (Object)adaptor.create(ENUM_PREFIX659)
                    ;
                    adaptor.addChild(root_0, ENUM_PREFIX659_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1007:31: ( STRUCT_PREFIX )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==STRUCT_PREFIX) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1007:31: STRUCT_PREFIX
                    {
                    STRUCT_PREFIX660=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_method_param25501); 
                    STRUCT_PREFIX660_tree = 
                    (Object)adaptor.create(STRUCT_PREFIX660)
                    ;
                    adaptor.addChild(root_0, STRUCT_PREFIX660_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1007:46: ( 'unsigned' )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==204) ) {
                int LA180_1 = input.LA(2);

                if ( (LA180_1==ID||LA180_1==VOID||LA180_1==204) ) {
                    alt180=1;
                }
            }
            switch (alt180) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1007:46: 'unsigned'
                    {
                    string_literal661=(Token)match(input,204,FOLLOW_204_in_method_param25504); 
                    string_literal661_tree = 
                    (Object)adaptor.create(string_literal661)
                    ;
                    adaptor.addChild(root_0, string_literal661_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_method_param25507);
            field_type662=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type662.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1007:69: ( name )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==ID||LA181_0==185||LA181_0==188||LA181_0==196||LA181_0==199) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1007:69: name
                    {
                    pushFollow(FOLLOW_name_in_method_param25509);
                    name663=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name663.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1007:75: ( index_wrapper )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==L_KBR) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1007:75: index_wrapper
                    {
                    pushFollow(FOLLOW_index_wrapper_in_method_param25512);
                    index_wrapper664=index_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, index_wrapper664.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param2"


    public static class indexed_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "indexed"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1009:1: indexed : L_KBR ( NUMBER )? R_KBR ;
    public final ObjcmParser.indexed_return indexed() throws RecognitionException {
        ObjcmParser.indexed_return retval = new ObjcmParser.indexed_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token L_KBR665=null;
        Token NUMBER666=null;
        Token R_KBR667=null;

        Object L_KBR665_tree=null;
        Object NUMBER666_tree=null;
        Object R_KBR667_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1009:9: ( L_KBR ( NUMBER )? R_KBR )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1009:11: L_KBR ( NUMBER )? R_KBR
            {
            root_0 = (Object)adaptor.nil();


            L_KBR665=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_indexed5522); 
            L_KBR665_tree = 
            (Object)adaptor.create(L_KBR665)
            ;
            adaptor.addChild(root_0, L_KBR665_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1009:17: ( NUMBER )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==NUMBER) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1009:17: NUMBER
                    {
                    NUMBER666=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_indexed5524); 
                    NUMBER666_tree = 
                    (Object)adaptor.create(NUMBER666)
                    ;
                    adaptor.addChild(root_0, NUMBER666_tree);


                    }
                    break;

            }


            R_KBR667=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_indexed5527); 
            R_KBR667_tree = 
            (Object)adaptor.create(R_KBR667)
            ;
            adaptor.addChild(root_0, R_KBR667_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "indexed"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1011:1: method_params : ( method_param_wrapper )+ ;
    public final ObjcmParser.method_params_return method_params() throws RecognitionException {
        ObjcmParser.method_params_return retval = new ObjcmParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param_wrapper_return method_param_wrapper668 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1012:2: ( ( method_param_wrapper )+ )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1012:4: ( method_param_wrapper )+
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1012:4: ( method_param_wrapper )+
            int cnt184=0;
            loop184:
            do {
                int alt184=2;
                alt184 = dfa184.predict(input);
                switch (alt184) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1012:4: method_param_wrapper
            	    {
            	    pushFollow(FOLLOW_method_param_wrapper_in_method_params5537);
            	    method_param_wrapper668=method_param_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, method_param_wrapper668.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt184 >= 1 ) break loop184;
                        EarlyExitException eee =
                            new EarlyExitException(184, input);
                        throw eee;
                }
                cnt184++;
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1014:1: method_param_wrapper : method_param -> ^( PARAM method_param ) ;
    public final ObjcmParser.method_param_wrapper_return method_param_wrapper() throws RecognitionException {
        ObjcmParser.method_param_wrapper_return retval = new ObjcmParser.method_param_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_param_return method_param669 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1015:2: ( method_param -> ^( PARAM method_param ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1015:4: method_param
            {
            pushFollow(FOLLOW_method_param_in_method_param_wrapper5549);
            method_param669=method_param();

            state._fsp--;

            stream_method_param.add(method_param669.getTree());

            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1015:17: -> ^( PARAM method_param )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1015:20: ^( PARAM method_param )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM, "PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_method_param.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_wrapper"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1017:1: method_param : ( ( prefix )? | COLON ) ( method_type )? name ;
    public final ObjcmParser.method_param_return method_param() throws RecognitionException {
        ObjcmParser.method_param_return retval = new ObjcmParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON671=null;
        ObjcmParser.prefix_return prefix670 =null;

        ObjcmParser.method_type_return method_type672 =null;

        ObjcmParser.name_return name673 =null;


        Object COLON671_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1018:2: ( ( ( prefix )? | COLON ) ( method_type )? name )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1018:4: ( ( prefix )? | COLON ) ( method_type )? name
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1018:4: ( ( prefix )? | COLON )
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==ID||LA186_0==L_BR||LA186_0==185||LA186_0==188||LA186_0==196||LA186_0==199) ) {
                alt186=1;
            }
            else if ( (LA186_0==COLON) ) {
                alt186=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;

            }
            switch (alt186) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1018:5: ( prefix )?
                    {
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1018:5: ( prefix )?
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==ID) ) {
                        int LA185_1 = input.LA(2);

                        if ( (LA185_1==COLON) ) {
                            alt185=1;
                        }
                    }
                    switch (alt185) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1018:5: prefix
                            {
                            pushFollow(FOLLOW_prefix_in_method_param5569);
                            prefix670=prefix();

                            state._fsp--;

                            adaptor.addChild(root_0, prefix670.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1018:15: COLON
                    {
                    COLON671=(Token)match(input,COLON,FOLLOW_COLON_in_method_param5574); 
                    COLON671_tree = 
                    (Object)adaptor.create(COLON671)
                    ;
                    adaptor.addChild(root_0, COLON671_tree);


                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1018:22: ( method_type )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==L_BR) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1018:22: method_type
                    {
                    pushFollow(FOLLOW_method_type_in_method_param5577);
                    method_type672=method_type();

                    state._fsp--;

                    adaptor.addChild(root_0, method_type672.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_name_in_method_param5580);
            name673=name();

            state._fsp--;

            adaptor.addChild(root_0, name673.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1021:1: prefix : ID COLON -> ^( PREFIX ID COLON ) ;
    public final ObjcmParser.prefix_return prefix() throws RecognitionException {
        ObjcmParser.prefix_return retval = new ObjcmParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID674=null;
        Token COLON675=null;

        Object ID674_tree=null;
        Object COLON675_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1021:8: ( ID COLON -> ^( PREFIX ID COLON ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1021:10: ID COLON
            {
            ID674=(Token)match(input,ID,FOLLOW_ID_in_prefix5592);  
            stream_ID.add(ID674);


            COLON675=(Token)match(input,COLON,FOLLOW_COLON_in_prefix5594);  
            stream_COLON.add(COLON675);


            // AST REWRITE
            // elements: COLON, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1021:19: -> ^( PREFIX ID COLON )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1021:22: ^( PREFIX ID COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PREFIX, "PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class incomplete_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "incomplete_prefix"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1023:1: incomplete_prefix : COLON -> ^( INCOMPLETE_PREFIX COLON ) ;
    public final ObjcmParser.incomplete_prefix_return incomplete_prefix() throws RecognitionException {
        ObjcmParser.incomplete_prefix_return retval = new ObjcmParser.incomplete_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COLON676=null;

        Object COLON676_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1024:2: ( COLON -> ^( INCOMPLETE_PREFIX COLON ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1024:4: COLON
            {
            COLON676=(Token)match(input,COLON,FOLLOW_COLON_in_incomplete_prefix5613);  
            stream_COLON.add(COLON676);


            // AST REWRITE
            // elements: COLON
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1024:10: -> ^( INCOMPLETE_PREFIX COLON )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1024:13: ^( INCOMPLETE_PREFIX COLON )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INCOMPLETE_PREFIX, "INCOMPLETE_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_COLON.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "incomplete_prefix"


    public static class typedef_struct_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1031:1: typedef_struct_declaration_wrapper : typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) ;
    public final ObjcmParser.typedef_struct_declaration_wrapper_return typedef_struct_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration677 =null;


        RewriteRuleSubtreeStream stream_typedef_struct_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_struct_declaration");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1032:2: ( typedef_struct_declaration -> ^( TYPEDEF_STRUCT typedef_struct_declaration ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1032:4: typedef_struct_declaration
            {
            pushFollow(FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5635);
            typedef_struct_declaration677=typedef_struct_declaration();

            state._fsp--;

            stream_typedef_struct_declaration.add(typedef_struct_declaration677.getTree());

            // AST REWRITE
            // elements: typedef_struct_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1032:31: -> ^( TYPEDEF_STRUCT typedef_struct_declaration )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1032:34: ^( TYPEDEF_STRUCT typedef_struct_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_STRUCT, "TYPEDEF_STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_struct_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_wrapper"


    public static class typedef_struct_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1036:1: typedef_struct_declaration : STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? ;
    public final ObjcmParser.typedef_struct_declaration_return typedef_struct_declaration() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_return retval = new ObjcmParser.typedef_struct_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRUCT_PREFIX678=null;
        Token L_FBR680=null;
        Token R_FBR682=null;
        Token SEMICOLON684=null;
        ObjcmParser.name_return name679 =null;

        ObjcmParser.typedef_struct_body_return typedef_struct_body681 =null;

        ObjcmParser.name_return name683 =null;


        Object STRUCT_PREFIX678_tree=null;
        Object L_FBR680_tree=null;
        Object R_FBR682_tree=null;
        Object SEMICOLON684_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1037:2: ( STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )? )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1037:4: STRUCT_PREFIX ( name )? L_FBR ( typedef_struct_body )+ R_FBR ( name )? ( SEMICOLON )?
            {
            root_0 = (Object)adaptor.nil();


            STRUCT_PREFIX678=(Token)match(input,STRUCT_PREFIX,FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5656); 
            STRUCT_PREFIX678_tree = 
            (Object)adaptor.create(STRUCT_PREFIX678)
            ;
            adaptor.addChild(root_0, STRUCT_PREFIX678_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1037:18: ( name )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==ID||LA188_0==185||LA188_0==188||LA188_0==196||LA188_0==199) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1037:18: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5658);
                    name679=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name679.getTree());

                    }
                    break;

            }


            L_FBR680=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_struct_declaration5662); 
            L_FBR680_tree = 
            (Object)adaptor.create(L_FBR680)
            ;
            adaptor.addChild(root_0, L_FBR680_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1039:3: ( typedef_struct_body )+
            int cnt189=0;
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==ID||LA189_0==VOID||LA189_0==204) ) {
                    alt189=1;
                }


                switch (alt189) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1039:3: typedef_struct_body
            	    {
            	    pushFollow(FOLLOW_typedef_struct_body_in_typedef_struct_declaration5667);
            	    typedef_struct_body681=typedef_struct_body();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_struct_body681.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt189 >= 1 ) break loop189;
                        EarlyExitException eee =
                            new EarlyExitException(189, input);
                        throw eee;
                }
                cnt189++;
            } while (true);


            R_FBR682=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_struct_declaration5671); 
            R_FBR682_tree = 
            (Object)adaptor.create(R_FBR682)
            ;
            adaptor.addChild(root_0, R_FBR682_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1040:9: ( name )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==ID) ) {
                int LA190_1 = input.LA(2);

                if ( (LA190_1==EOF||LA190_1==CONST_PREFIX||LA190_1==ENUM_PREFIX||LA190_1==L_MINUS||LA190_1==L_PLUS||LA190_1==SEMICOLON||LA190_1==STATIC_PREFIX||LA190_1==STRUCT_PREFIX||LA190_1==VOID||LA190_1==170||(LA190_1 >= 172 && LA190_1 <= 173)||LA190_1==179||LA190_1==192||LA190_1==202||LA190_1==204) ) {
                    alt190=1;
                }
                else if ( (LA190_1==ID) ) {
                    int LA190_23 = input.LA(3);

                    if ( (LA190_23==L_KBR) ) {
                        int LA190_38 = input.LA(4);

                        if ( (LA190_38==R_KBR) ) {
                            alt190=1;
                        }
                    }
                    else if ( (LA190_23==ASTERISK||LA190_23==ID||LA190_23==L_LESS||LA190_23==185||LA190_23==188||LA190_23==196||LA190_23==199) ) {
                        alt190=1;
                    }
                }
            }
            else if ( (LA190_0==185||LA190_0==188||LA190_0==196||LA190_0==199) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1040:9: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_struct_declaration5674);
                    name683=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name683.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1040:15: ( SEMICOLON )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==SEMICOLON) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1040:15: SEMICOLON
                    {
                    SEMICOLON684=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_struct_declaration5677); 
                    SEMICOLON684_tree = 
                    (Object)adaptor.create(SEMICOLON684)
                    ;
                    adaptor.addChild(root_0, SEMICOLON684_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration"


    public static class typedef_struct_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_body"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1043:1: typedef_struct_body : typedef_struct_declaration_element_wrapper ;
    public final ObjcmParser.typedef_struct_body_return typedef_struct_body() throws RecognitionException {
        ObjcmParser.typedef_struct_body_return retval = new ObjcmParser.typedef_struct_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper685 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1044:2: ( typedef_struct_declaration_element_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1044:4: typedef_struct_declaration_element_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5690);
            typedef_struct_declaration_element_wrapper685=typedef_struct_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_struct_declaration_element_wrapper685.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_body"


    public static class typedef_struct_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_struct_declaration_element_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1047:1: typedef_struct_declaration_element_wrapper : struct_field -> ^( STRUCT_FIELD struct_field ) ;
    public final ObjcmParser.typedef_struct_declaration_element_wrapper_return typedef_struct_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_struct_declaration_element_wrapper_return retval = new ObjcmParser.typedef_struct_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.struct_field_return struct_field686 =null;


        RewriteRuleSubtreeStream stream_struct_field=new RewriteRuleSubtreeStream(adaptor,"rule struct_field");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1048:2: ( struct_field -> ^( STRUCT_FIELD struct_field ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1048:4: struct_field
            {
            pushFollow(FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5702);
            struct_field686=struct_field();

            state._fsp--;

            stream_struct_field.add(struct_field686.getTree());

            // AST REWRITE
            // elements: struct_field
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1048:17: -> ^( STRUCT_FIELD struct_field )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1048:20: ^( STRUCT_FIELD struct_field )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT_FIELD, "STRUCT_FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_struct_field.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_struct_declaration_element_wrapper"


    public static class struct_field_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_field"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1050:1: struct_field : field_type name ( COMMA name )* SEMICOLON ;
    public final ObjcmParser.struct_field_return struct_field() throws RecognitionException {
        ObjcmParser.struct_field_return retval = new ObjcmParser.struct_field_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token COMMA689=null;
        Token SEMICOLON691=null;
        ObjcmParser.field_type_return field_type687 =null;

        ObjcmParser.name_return name688 =null;

        ObjcmParser.name_return name690 =null;


        Object COMMA689_tree=null;
        Object SEMICOLON691_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1051:2: ( field_type name ( COMMA name )* SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1051:4: field_type name ( COMMA name )* SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_type_in_struct_field5720);
            field_type687=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type687.getTree());

            pushFollow(FOLLOW_name_in_struct_field5722);
            name688=name();

            state._fsp--;

            adaptor.addChild(root_0, name688.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1051:21: ( COMMA name )*
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==COMMA) ) {
                    alt192=1;
                }


                switch (alt192) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1051:22: COMMA name
            	    {
            	    COMMA689=(Token)match(input,COMMA,FOLLOW_COMMA_in_struct_field5726); 
            	    COMMA689_tree = 
            	    (Object)adaptor.create(COMMA689)
            	    ;
            	    adaptor.addChild(root_0, COMMA689_tree);


            	    pushFollow(FOLLOW_name_in_struct_field5729);
            	    name690=name();

            	    state._fsp--;

            	    adaptor.addChild(root_0, name690.getTree());

            	    }
            	    break;

            	default :
            	    break loop192;
                }
            } while (true);


            SEMICOLON691=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_struct_field5733); 
            SEMICOLON691_tree = 
            (Object)adaptor.create(SEMICOLON691)
            ;
            adaptor.addChild(root_0, SEMICOLON691_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_field"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1058:1: typedef_declaration_wrapper : typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcmParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_wrapper_return retval = new ObjcmParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration692 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1059:2: ( typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1059:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5749);
            typedef_declaration692=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration692.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1059:24: -> ^( TYPEDEF typedef_declaration )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1059:27: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class enum_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1062:1: enum_declaration : typedef_declaration -> ^( ENUM typedef_declaration ) ;
    public final ObjcmParser.enum_declaration_return enum_declaration() throws RecognitionException {
        ObjcmParser.enum_declaration_return retval = new ObjcmParser.enum_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_return typedef_declaration693 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1063:2: ( typedef_declaration -> ^( ENUM typedef_declaration ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1063:4: typedef_declaration
            {
            pushFollow(FOLLOW_typedef_declaration_in_enum_declaration5769);
            typedef_declaration693=typedef_declaration();

            state._fsp--;

            stream_typedef_declaration.add(typedef_declaration693.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1063:24: -> ^( ENUM typedef_declaration )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1063:27: ^( ENUM typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_declaration"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1065:1: typedef_declaration : ENUM_PREFIX ( name )? L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON ;
    public final ObjcmParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcmParser.typedef_declaration_return retval = new ObjcmParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ENUM_PREFIX694=null;
        Token L_FBR696=null;
        Token COMMA698=null;
        Token R_FBR700=null;
        Token SEMICOLON702=null;
        ObjcmParser.name_return name695 =null;

        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper697 =null;

        ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper699 =null;

        ObjcmParser.name_return name701 =null;


        Object ENUM_PREFIX694_tree=null;
        Object L_FBR696_tree=null;
        Object COMMA698_tree=null;
        Object R_FBR700_tree=null;
        Object SEMICOLON702_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1066:2: ( ENUM_PREFIX ( name )? L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1066:5: ENUM_PREFIX ( name )? L_FBR typedef_declaration_element_wrapper ( COMMA typedef_declaration_element_wrapper )* R_FBR ( name )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            ENUM_PREFIX694=(Token)match(input,ENUM_PREFIX,FOLLOW_ENUM_PREFIX_in_typedef_declaration5789); 
            ENUM_PREFIX694_tree = 
            (Object)adaptor.create(ENUM_PREFIX694)
            ;
            adaptor.addChild(root_0, ENUM_PREFIX694_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1066:17: ( name )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==ID||LA193_0==185||LA193_0==188||LA193_0==196||LA193_0==199) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1066:17: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_declaration5791);
                    name695=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name695.getTree());

                    }
                    break;

            }


            L_FBR696=(Token)match(input,L_FBR,FOLLOW_L_FBR_in_typedef_declaration5794); 
            L_FBR696_tree = 
            (Object)adaptor.create(L_FBR696)
            ;
            adaptor.addChild(root_0, L_FBR696_tree);


            pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5797);
            typedef_declaration_element_wrapper697=typedef_declaration_element_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, typedef_declaration_element_wrapper697.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1066:67: ( COMMA typedef_declaration_element_wrapper )*
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);

                if ( (LA194_0==COMMA) ) {
                    alt194=1;
                }


                switch (alt194) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1066:68: COMMA typedef_declaration_element_wrapper
            	    {
            	    COMMA698=(Token)match(input,COMMA,FOLLOW_COMMA_in_typedef_declaration5801); 
            	    COMMA698_tree = 
            	    (Object)adaptor.create(COMMA698)
            	    ;
            	    adaptor.addChild(root_0, COMMA698_tree);


            	    pushFollow(FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5804);
            	    typedef_declaration_element_wrapper699=typedef_declaration_element_wrapper();

            	    state._fsp--;

            	    adaptor.addChild(root_0, typedef_declaration_element_wrapper699.getTree());

            	    }
            	    break;

            	default :
            	    break loop194;
                }
            } while (true);


            R_FBR700=(Token)match(input,R_FBR,FOLLOW_R_FBR_in_typedef_declaration5808); 
            R_FBR700_tree = 
            (Object)adaptor.create(R_FBR700)
            ;
            adaptor.addChild(root_0, R_FBR700_tree);


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1066:120: ( name )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==ID||LA195_0==185||LA195_0==188||LA195_0==196||LA195_0==199) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1066:120: name
                    {
                    pushFollow(FOLLOW_name_in_typedef_declaration5811);
                    name701=name();

                    state._fsp--;

                    adaptor.addChild(root_0, name701.getTree());

                    }
                    break;

            }


            SEMICOLON702=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_typedef_declaration5814); 
            SEMICOLON702_tree = 
            (Object)adaptor.create(SEMICOLON702)
            ;
            adaptor.addChild(root_0, SEMICOLON702_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class typedef_declaration_element_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1068:1: typedef_declaration_element_wrapper : typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) ;
    public final ObjcmParser.typedef_declaration_element_wrapper_return typedef_declaration_element_wrapper() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_wrapper_return retval = new ObjcmParser.typedef_declaration_element_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.typedef_declaration_element_return typedef_declaration_element703 =null;


        RewriteRuleSubtreeStream stream_typedef_declaration_element=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration_element");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1069:2: ( typedef_declaration_element -> ^( TYPEDEF_ELEMENT typedef_declaration_element ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1069:4: typedef_declaration_element
            {
            pushFollow(FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5824);
            typedef_declaration_element703=typedef_declaration_element();

            state._fsp--;

            stream_typedef_declaration_element.add(typedef_declaration_element703.getTree());

            // AST REWRITE
            // elements: typedef_declaration_element
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1069:32: -> ^( TYPEDEF_ELEMENT typedef_declaration_element )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1069:35: ^( TYPEDEF_ELEMENT typedef_declaration_element )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_ELEMENT, "TYPEDEF_ELEMENT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration_element.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element_wrapper"


    public static class typedef_declaration_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_element"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1072:1: typedef_declaration_element : ( ID ( L_EQ ( ID | NUMBER ) )? | NUMBER L_EQ NUMBER );
    public final ObjcmParser.typedef_declaration_element_return typedef_declaration_element() throws RecognitionException {
        ObjcmParser.typedef_declaration_element_return retval = new ObjcmParser.typedef_declaration_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID704=null;
        Token L_EQ705=null;
        Token set706=null;
        Token NUMBER707=null;
        Token L_EQ708=null;
        Token NUMBER709=null;

        Object ID704_tree=null;
        Object L_EQ705_tree=null;
        Object set706_tree=null;
        Object NUMBER707_tree=null;
        Object L_EQ708_tree=null;
        Object NUMBER709_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1073:2: ( ID ( L_EQ ( ID | NUMBER ) )? | NUMBER L_EQ NUMBER )
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==ID) ) {
                alt197=1;
            }
            else if ( (LA197_0==NUMBER) ) {
                alt197=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 197, 0, input);

                throw nvae;

            }
            switch (alt197) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1073:4: ID ( L_EQ ( ID | NUMBER ) )?
                    {
                    root_0 = (Object)adaptor.nil();


                    ID704=(Token)match(input,ID,FOLLOW_ID_in_typedef_declaration_element5843); 
                    ID704_tree = 
                    (Object)adaptor.create(ID704)
                    ;
                    adaptor.addChild(root_0, ID704_tree);


                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1073:8: ( L_EQ ( ID | NUMBER ) )?
                    int alt196=2;
                    int LA196_0 = input.LA(1);

                    if ( (LA196_0==L_EQ) ) {
                        alt196=1;
                    }
                    switch (alt196) {
                        case 1 :
                            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1073:9: L_EQ ( ID | NUMBER )
                            {
                            L_EQ705=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_typedef_declaration_element5847); 
                            L_EQ705_tree = 
                            (Object)adaptor.create(L_EQ705)
                            ;
                            adaptor.addChild(root_0, L_EQ705_tree);


                            set706=(Token)input.LT(1);

                            if ( input.LA(1)==ID||input.LA(1)==NUMBER ) {
                                input.consume();
                                adaptor.addChild(root_0, 
                                (Object)adaptor.create(set706)
                                );
                                state.errorRecovery=false;
                            }
                            else {
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1074:4: NUMBER L_EQ NUMBER
                    {
                    root_0 = (Object)adaptor.nil();


                    NUMBER707=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_typedef_declaration_element5862); 
                    NUMBER707_tree = 
                    (Object)adaptor.create(NUMBER707)
                    ;
                    adaptor.addChild(root_0, NUMBER707_tree);


                    L_EQ708=(Token)match(input,L_EQ,FOLLOW_L_EQ_in_typedef_declaration_element5864); 
                    L_EQ708_tree = 
                    (Object)adaptor.create(L_EQ708)
                    ;
                    adaptor.addChild(root_0, L_EQ708_tree);


                    NUMBER709=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_typedef_declaration_element5866); 
                    NUMBER709_tree = 
                    (Object)adaptor.create(NUMBER709)
                    ;
                    adaptor.addChild(root_0, NUMBER709_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_element"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1081:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcmParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcmParser.field_declaration_wrapper_return retval = new ObjcmParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration_return field_declaration710 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1082:2: ( field_declaration -> ^( FIELD field_declaration ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1082:4: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper5880);
            field_declaration710=field_declaration();

            state._fsp--;

            stream_field_declaration.add(field_declaration710.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1082:22: -> ^( FIELD field_declaration )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1082:25: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1084:1: field_declaration : field_modifier_wrapper field_type name field_declaration_end ;
    public final ObjcmParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcmParser.field_declaration_return retval = new ObjcmParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper711 =null;

        ObjcmParser.field_type_return field_type712 =null;

        ObjcmParser.name_return name713 =null;

        ObjcmParser.field_declaration_end_return field_declaration_end714 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1085:2: ( field_modifier_wrapper field_type name field_declaration_end )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1085:4: field_modifier_wrapper field_type name field_declaration_end
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_field_modifier_wrapper_in_field_declaration5897);
            field_modifier_wrapper711=field_modifier_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, field_modifier_wrapper711.getTree());

            pushFollow(FOLLOW_field_type_in_field_declaration5900);
            field_type712=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type712.getTree());

            pushFollow(FOLLOW_name_in_field_declaration5902);
            name713=name();

            state._fsp--;

            adaptor.addChild(root_0, name713.getTree());

            pushFollow(FOLLOW_field_declaration_end_in_field_declaration5904);
            field_declaration_end714=field_declaration_end();

            state._fsp--;

            adaptor.addChild(root_0, field_declaration_end714.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_end"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1087:1: field_declaration_end : ( expr_assign_wrapper )? SEMICOLON ;
    public final ObjcmParser.field_declaration_end_return field_declaration_end() throws RecognitionException {
        ObjcmParser.field_declaration_end_return retval = new ObjcmParser.field_declaration_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON716=null;
        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper715 =null;


        Object SEMICOLON716_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1088:2: ( ( expr_assign_wrapper )? SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1088:5: ( expr_assign_wrapper )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1088:5: ( expr_assign_wrapper )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==L_AND_EQ||(LA198_0 >= L_DIV_EQ && LA198_0 <= L_EQ)||LA198_0==L_LEFT_EQ||LA198_0==L_MINUS_EQ||LA198_0==L_MULT_EQ||LA198_0==L_OR_EQ||LA198_0==L_PERC_EQ||LA198_0==L_PLUS_EQ||LA198_0==L_RIGHT_EQ||LA198_0==L_XOR_EQ) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1088:5: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_field_declaration_end5915);
                    expr_assign_wrapper715=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper715.getTree());

                    }
                    break;

            }


            SEMICOLON716=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration_end5918); 
            SEMICOLON716_tree = 
            (Object)adaptor.create(SEMICOLON716)
            ;
            adaptor.addChild(root_0, SEMICOLON716_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_end"


    public static class type_start_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1090:1: type_start_wrapper : type_start -> ^( M_TYPE_START type_start ) ;
    public final ObjcmParser.type_start_wrapper_return type_start_wrapper() throws RecognitionException {
        ObjcmParser.type_start_wrapper_return retval = new ObjcmParser.type_start_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.type_start_return type_start717 =null;


        RewriteRuleSubtreeStream stream_type_start=new RewriteRuleSubtreeStream(adaptor,"rule type_start");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1091:2: ( type_start -> ^( M_TYPE_START type_start ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1091:4: type_start
            {
            pushFollow(FOLLOW_type_start_in_type_start_wrapper5928);
            type_start717=type_start();

            state._fsp--;

            stream_type_start.add(type_start717.getTree());

            // AST REWRITE
            // elements: type_start
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1091:15: -> ^( M_TYPE_START type_start )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1091:18: ^( M_TYPE_START type_start )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(M_TYPE_START, "M_TYPE_START")
                , root_1);

                adaptor.addChild(root_1, stream_type_start.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start_wrapper"


    public static class type_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_start"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1093:1: type_start : ( CONST_PREFIX )? field_type name ( L_KBR R_KBR )? type_end ;
    public final ObjcmParser.type_start_return type_start() throws RecognitionException {
        ObjcmParser.type_start_return retval = new ObjcmParser.type_start_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token CONST_PREFIX718=null;
        Token L_KBR721=null;
        Token R_KBR722=null;
        ObjcmParser.field_type_return field_type719 =null;

        ObjcmParser.name_return name720 =null;

        ObjcmParser.type_end_return type_end723 =null;


        Object CONST_PREFIX718_tree=null;
        Object L_KBR721_tree=null;
        Object R_KBR722_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1094:2: ( ( CONST_PREFIX )? field_type name ( L_KBR R_KBR )? type_end )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1094:4: ( CONST_PREFIX )? field_type name ( L_KBR R_KBR )? type_end
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1094:4: ( CONST_PREFIX )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==CONST_PREFIX) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1094:4: CONST_PREFIX
                    {
                    CONST_PREFIX718=(Token)match(input,CONST_PREFIX,FOLLOW_CONST_PREFIX_in_type_start5945); 
                    CONST_PREFIX718_tree = 
                    (Object)adaptor.create(CONST_PREFIX718)
                    ;
                    adaptor.addChild(root_0, CONST_PREFIX718_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_field_type_in_type_start5948);
            field_type719=field_type();

            state._fsp--;

            adaptor.addChild(root_0, field_type719.getTree());

            pushFollow(FOLLOW_name_in_type_start5950);
            name720=name();

            state._fsp--;

            adaptor.addChild(root_0, name720.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1094:34: ( L_KBR R_KBR )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==L_KBR) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1094:35: L_KBR R_KBR
                    {
                    L_KBR721=(Token)match(input,L_KBR,FOLLOW_L_KBR_in_type_start5953); 
                    L_KBR721_tree = 
                    (Object)adaptor.create(L_KBR721)
                    ;
                    adaptor.addChild(root_0, L_KBR721_tree);


                    R_KBR722=(Token)match(input,R_KBR,FOLLOW_R_KBR_in_type_start5955); 
                    R_KBR722_tree = 
                    (Object)adaptor.create(R_KBR722)
                    ;
                    adaptor.addChild(root_0, R_KBR722_tree);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_end_in_type_start5959);
            type_end723=type_end();

            state._fsp--;

            adaptor.addChild(root_0, type_end723.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_start"


    public static class type_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_end"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1096:1: type_end : ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) );
    public final ObjcmParser.type_end_return type_end() throws RecognitionException {
        ObjcmParser.type_end_return retval = new ObjcmParser.type_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_declaration4_return field_declaration4724 =null;

        ObjcmParser.method_declaration4_return method_declaration4725 =null;


        RewriteRuleSubtreeStream stream_field_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration4");
        RewriteRuleSubtreeStream stream_method_declaration4=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration4");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1096:9: ( field_declaration4 -> ^( FIELD field_declaration4 ) | method_declaration4 -> ^( STATIC_METHOD method_declaration4 ) )
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==L_AND_EQ||(LA201_0 >= L_DIV_EQ && LA201_0 <= L_EQ)||LA201_0==L_LEFT_EQ||LA201_0==L_MINUS_EQ||LA201_0==L_MULT_EQ||LA201_0==L_OR_EQ||LA201_0==L_PERC_EQ||LA201_0==L_PLUS_EQ||LA201_0==L_RIGHT_EQ||LA201_0==L_XOR_EQ||LA201_0==SEMICOLON) ) {
                alt201=1;
            }
            else if ( (LA201_0==L_BR) ) {
                alt201=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;

            }
            switch (alt201) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1096:11: field_declaration4
                    {
                    pushFollow(FOLLOW_field_declaration4_in_type_end5967);
                    field_declaration4724=field_declaration4();

                    state._fsp--;

                    stream_field_declaration4.add(field_declaration4724.getTree());

                    // AST REWRITE
                    // elements: field_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1096:30: -> ^( FIELD field_declaration4 )
                    {
                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1096:33: ^( FIELD field_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FIELD, "FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_field_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1097:4: method_declaration4
                    {
                    pushFollow(FOLLOW_method_declaration4_in_type_end5980);
                    method_declaration4725=method_declaration4();

                    state._fsp--;

                    stream_method_declaration4.add(method_declaration4725.getTree());

                    // AST REWRITE
                    // elements: method_declaration4
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1097:24: -> ^( STATIC_METHOD method_declaration4 )
                    {
                        // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1097:27: ^( STATIC_METHOD method_declaration4 )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STATIC_METHOD, "STATIC_METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration4.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_end"


    public static class field_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration4"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1100:1: field_declaration4 : ( expr_assign_wrapper )? SEMICOLON ;
    public final ObjcmParser.field_declaration4_return field_declaration4() throws RecognitionException {
        ObjcmParser.field_declaration4_return retval = new ObjcmParser.field_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SEMICOLON727=null;
        ObjcmParser.expr_assign_wrapper_return expr_assign_wrapper726 =null;


        Object SEMICOLON727_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1101:2: ( ( expr_assign_wrapper )? SEMICOLON )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1101:5: ( expr_assign_wrapper )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1101:5: ( expr_assign_wrapper )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==L_AND_EQ||(LA202_0 >= L_DIV_EQ && LA202_0 <= L_EQ)||LA202_0==L_LEFT_EQ||LA202_0==L_MINUS_EQ||LA202_0==L_MULT_EQ||LA202_0==L_OR_EQ||LA202_0==L_PERC_EQ||LA202_0==L_PLUS_EQ||LA202_0==L_RIGHT_EQ||LA202_0==L_XOR_EQ) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1101:5: expr_assign_wrapper
                    {
                    pushFollow(FOLLOW_expr_assign_wrapper_in_field_declaration46002);
                    expr_assign_wrapper726=expr_assign_wrapper();

                    state._fsp--;

                    adaptor.addChild(root_0, expr_assign_wrapper726.getTree());

                    }
                    break;

            }


            SEMICOLON727=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_field_declaration46005); 
            SEMICOLON727_tree = 
            (Object)adaptor.create(SEMICOLON727)
            ;
            adaptor.addChild(root_0, SEMICOLON727_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration4"


    public static class method_declaration4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration4"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1104:1: method_declaration4 : method_params2 block_wrapper ;
    public final ObjcmParser.method_declaration4_return method_declaration4() throws RecognitionException {
        ObjcmParser.method_declaration4_return retval = new ObjcmParser.method_declaration4_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.method_params2_return method_params2728 =null;

        ObjcmParser.block_wrapper_return block_wrapper729 =null;



        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1105:2: ( method_params2 block_wrapper )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1105:5: method_params2 block_wrapper
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_params2_in_method_declaration46018);
            method_params2728=method_params2();

            state._fsp--;

            adaptor.addChild(root_0, method_params2728.getTree());

            pushFollow(FOLLOW_block_wrapper_in_method_declaration46023);
            block_wrapper729=block_wrapper();

            state._fsp--;

            adaptor.addChild(root_0, block_wrapper729.getTree());

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration4"


    public static class field_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier_wrapper"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1109:1: field_modifier_wrapper : field_modifier -> ^( MODIFIER field_modifier ) ;
    public final ObjcmParser.field_modifier_wrapper_return field_modifier_wrapper() throws RecognitionException {
        ObjcmParser.field_modifier_wrapper_return retval = new ObjcmParser.field_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_modifier_return field_modifier730 =null;


        RewriteRuleSubtreeStream stream_field_modifier=new RewriteRuleSubtreeStream(adaptor,"rule field_modifier");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1110:2: ( field_modifier -> ^( MODIFIER field_modifier ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1110:4: field_modifier
            {
            pushFollow(FOLLOW_field_modifier_in_field_modifier_wrapper6035);
            field_modifier730=field_modifier();

            state._fsp--;

            stream_field_modifier.add(field_modifier730.getTree());

            // AST REWRITE
            // elements: field_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1110:19: -> ^( MODIFIER field_modifier )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1110:22: ^( MODIFIER field_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_field_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier_wrapper"


    public static class field_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifier"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1112:1: field_modifier : 'extern' ;
    public final ObjcmParser.field_modifier_return field_modifier() throws RecognitionException {
        ObjcmParser.field_modifier_return retval = new ObjcmParser.field_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal731=null;

        Object string_literal731_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1113:2: ( 'extern' )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1113:4: 'extern'
            {
            root_0 = (Object)adaptor.nil();


            string_literal731=(Token)match(input,192,FOLLOW_192_in_field_modifier6053); 
            string_literal731_tree = 
            (Object)adaptor.create(string_literal731)
            ;
            adaptor.addChild(root_0, string_literal731_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifier"


    public static class field_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1116:1: field_type : field_type_internal -> ^( TYPE field_type_internal ) ;
    public final ObjcmParser.field_type_return field_type() throws RecognitionException {
        ObjcmParser.field_type_return retval = new ObjcmParser.field_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.field_type_internal_return field_type_internal732 =null;


        RewriteRuleSubtreeStream stream_field_type_internal=new RewriteRuleSubtreeStream(adaptor,"rule field_type_internal");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1117:2: ( field_type_internal -> ^( TYPE field_type_internal ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1117:5: field_type_internal
            {
            pushFollow(FOLLOW_field_type_internal_in_field_type6065);
            field_type_internal732=field_type_internal();

            state._fsp--;

            stream_field_type_internal.add(field_type_internal732.getTree());

            // AST REWRITE
            // elements: field_type_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1117:25: -> ^( TYPE field_type_internal )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1117:28: ^( TYPE field_type_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE, "TYPE")
                , root_1);

                adaptor.addChild(root_1, stream_field_type_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type"


    public static class field_type_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_type_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1119:1: field_type_internal : type_internal ( generic )? ( ASTERISK )* ;
    public final ObjcmParser.field_type_internal_return field_type_internal() throws RecognitionException {
        ObjcmParser.field_type_internal_return retval = new ObjcmParser.field_type_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ASTERISK735=null;
        ObjcmParser.type_internal_return type_internal733 =null;

        ObjcmParser.generic_return generic734 =null;


        Object ASTERISK735_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1120:2: ( type_internal ( generic )? ( ASTERISK )* )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1120:4: type_internal ( generic )? ( ASTERISK )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_internal_in_field_type_internal6084);
            type_internal733=type_internal();

            state._fsp--;

            adaptor.addChild(root_0, type_internal733.getTree());

            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1120:18: ( generic )?
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==L_LESS) ) {
                alt203=1;
            }
            switch (alt203) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1120:18: generic
                    {
                    pushFollow(FOLLOW_generic_in_field_type_internal6086);
                    generic734=generic();

                    state._fsp--;

                    adaptor.addChild(root_0, generic734.getTree());

                    }
                    break;

            }


            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1120:27: ( ASTERISK )*
            loop204:
            do {
                int alt204=2;
                int LA204_0 = input.LA(1);

                if ( (LA204_0==ASTERISK) ) {
                    alt204=1;
                }


                switch (alt204) {
            	case 1 :
            	    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1120:27: ASTERISK
            	    {
            	    ASTERISK735=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_field_type_internal6089); 
            	    ASTERISK735_tree = 
            	    (Object)adaptor.create(ASTERISK735)
            	    ;
            	    adaptor.addChild(root_0, ASTERISK735_tree);


            	    }
            	    break;

            	default :
            	    break loop204;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_type_internal"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1126:1: name : name_internal -> ^( NAME name_internal ) ;
    public final ObjcmParser.name_return name() throws RecognitionException {
        ObjcmParser.name_return retval = new ObjcmParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcmParser.name_internal_return name_internal736 =null;


        RewriteRuleSubtreeStream stream_name_internal=new RewriteRuleSubtreeStream(adaptor,"rule name_internal");
        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1126:6: ( name_internal -> ^( NAME name_internal ) )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1126:8: name_internal
            {
            pushFollow(FOLLOW_name_internal_in_name6102);
            name_internal736=name_internal();

            state._fsp--;

            stream_name_internal.add(name_internal736.getTree());

            // AST REWRITE
            // elements: name_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1126:22: -> ^( NAME name_internal )
            {
                // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1126:25: ^( NAME name_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, stream_name_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;

            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_internal"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1129:1: name_internal : ( ID | 'in' | property );
    public final ObjcmParser.name_internal_return name_internal() throws RecognitionException {
        ObjcmParser.name_internal_return retval = new ObjcmParser.name_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID737=null;
        Token string_literal738=null;
        ObjcmParser.property_return property739 =null;


        Object ID737_tree=null;
        Object string_literal738_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1130:2: ( ID | 'in' | property )
            int alt205=3;
            switch ( input.LA(1) ) {
            case ID:
                {
                alt205=1;
                }
                break;
            case 196:
                {
                alt205=2;
                }
                break;
            case 185:
            case 188:
            case 199:
                {
                alt205=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("", 205, 0, input);

                throw nvae;

            }

            switch (alt205) {
                case 1 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1130:4: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID737=(Token)match(input,ID,FOLLOW_ID_in_name_internal6123); 
                    ID737_tree = 
                    (Object)adaptor.create(ID737)
                    ;
                    adaptor.addChild(root_0, ID737_tree);


                    }
                    break;
                case 2 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1131:5: 'in'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal738=(Token)match(input,196,FOLLOW_196_in_name_internal6130); 
                    string_literal738_tree = 
                    (Object)adaptor.create(string_literal738)
                    ;
                    adaptor.addChild(root_0, string_literal738_tree);


                    }
                    break;
                case 3 :
                    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1132:5: property
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_property_in_name_internal6137);
                    property739=property();

                    state._fsp--;

                    adaptor.addChild(root_0, property739.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_internal"


    public static class string_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_value"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1135:1: string_value : STRING_LITERAL ;
    public final ObjcmParser.string_value_return string_value() throws RecognitionException {
        ObjcmParser.string_value_return retval = new ObjcmParser.string_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL740=null;

        Object STRING_LITERAL740_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1136:2: ( STRING_LITERAL )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1136:4: STRING_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            STRING_LITERAL740=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string_value6148); 
            STRING_LITERAL740_tree = 
            (Object)adaptor.create(STRING_LITERAL740)
            ;
            adaptor.addChild(root_0, STRING_LITERAL740_tree);


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_value"


    public static class null_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "null_stmt"
    // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1138:1: null_stmt : ( 'nil' | 'Nil' );
    public final ObjcmParser.null_stmt_return null_stmt() throws RecognitionException {
        ObjcmParser.null_stmt_return retval = new ObjcmParser.null_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set741=null;

        Object set741_tree=null;

        try {
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:1138:11: ( 'nil' | 'Nil' )
            // C:\\sandbox\\objc2j\\src\\ru\\andremoniy\\objctojavacnv\\antlr\\Objcm.g:
            {
            root_0 = (Object)adaptor.nil();


            set741=(Token)input.LT(1);

            if ( input.LA(1)==182||input.LA(1)==198 ) {
                input.consume();
                adaptor.addChild(root_0, 
                (Object)adaptor.create(set741)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "null_stmt"

    // Delegated rules


    protected DFA30 dfa30 = new DFA30(this);
    protected DFA53 dfa53 = new DFA53(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA78 dfa78 = new DFA78(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA184 dfa184 = new DFA184(this);
    static final String DFA30_eotS =
        "\u01ab\uffff";
    static final String DFA30_eofS =
        "\u01ab\uffff";
    static final String DFA30_minS =
        "\1\6\14\uffff\1\6\34\uffff\3\6\2\uffff\2\6\2\67\2\uffff\1\6\12\uffff"+
        "\2\6\7\uffff\2\6\2\67\15\uffff\2\6\6\uffff\2\6\2\67\15\uffff\2\6"+
        "\u0136\uffff";
    static final String DFA30_maxS =
        "\1\u00cd\14\uffff\1\u00cc\34\uffff\3\u00cc\2\uffff\2\u00cc\2\u00c7"+
        "\2\uffff\1\u00cc\12\uffff\2\u00cc\7\uffff\2\u00cc\2\u00c7\15\uffff"+
        "\2\u00cc\6\uffff\2\u00cc\2\u00c7\15\uffff\2\u00cc\u0136\uffff";
    static final String DFA30_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\24\uffff\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\uffff\1\16\1\17\1\20\1\21\1\22\1\23\1\24\34\uffff\1"+
        "\6\31\uffff\1\6\30\uffff\1\6\1\uffff\26\6\1\uffff\34\6\14\uffff"+
        "\1\6\10\uffff\26\6\7\uffff\4\6\13\uffff\110\6\7\uffff\4\6\13\uffff"+
        "\110\6\7\uffff\4\6\13\uffff";
    static final String DFA30_specialS =
        "\u01ab\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\6\2\uffff\1\41\12\uffff\1\5\6\uffff\1\44\33\uffff\1\6\11"+
            "\uffff\1\6\2\uffff\1\6\6\uffff\1\6\4\uffff\1\6\1\uffff\1\6\4"+
            "\uffff\1\6\5\uffff\1\6\1\uffff\1\6\3\uffff\1\6\16\uffff\1\6"+
            "\16\uffff\1\47\2\uffff\1\41\1\6\2\uffff\1\3\3\uffff\3\6\1\uffff"+
            "\1\43\20\uffff\1\46\7\uffff\1\6\6\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\1\2\1\1\1\6\1\uffff\1\45\1\6\2\uffff\1\6\1\uffff\1\4\1\34\1"+
            "\51\1\37\1\50\1\33\1\6\1\uffff\2\6\1\36\1\35\2\uffff\1\15\1"+
            "\40",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\46\60\uffff\1\52\151\uffff\1\46\27\uffff\1\54\2\uffff\1"+
            "\54\7\uffff\1\53\2\uffff\1\54\4\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\65\11\uffff\1\106\1\101\6\uffff\1\61\36\uffff\1\6\11\uffff"+
            "\2\6\1\100\1\57\1\uffff\1\106\2\100\1\6\1\uffff\1\60\1\6\1\100"+
            "\3\6\1\100\3\6\1\100\1\6\1\uffff\1\6\1\100\1\6\1\106\1\100\1"+
            "\6\1\100\3\6\1\100\1\uffff\1\6\1\100\33\uffff\1\106\37\uffff"+
            "\1\6\4\uffff\1\62\22\uffff\1\6\2\uffff\1\6\7\uffff\1\6\2\uffff"+
            "\1\6\4\uffff\1\6",
            "\1\106\11\uffff\1\140\1\133\6\uffff\1\113\36\uffff\1\106\11"+
            "\uffff\2\106\1\132\1\111\1\uffff\1\106\2\132\1\106\1\uffff\1"+
            "\112\1\106\1\132\3\106\1\132\3\106\1\132\1\106\1\uffff\1\106"+
            "\1\132\2\106\1\132\1\106\1\132\3\106\1\132\1\uffff\1\106\1\132"+
            "\33\uffff\1\140\37\uffff\1\106\4\uffff\1\114\22\uffff\1\106"+
            "\2\uffff\1\106\7\uffff\1\106\2\uffff\1\106\4\uffff\1\106",
            "\1\140\11\uffff\1\171\1\164\6\uffff\1\144\36\uffff\1\140\11"+
            "\uffff\2\140\1\163\1\142\1\uffff\1\140\2\163\1\140\1\uffff\1"+
            "\143\1\140\1\163\3\140\1\163\3\140\1\163\1\140\1\uffff\1\140"+
            "\1\163\2\140\1\163\1\140\1\163\3\140\1\163\1\uffff\1\140\1\163"+
            "\33\uffff\1\171\37\uffff\1\140\4\uffff\1\145\22\uffff\1\140"+
            "\2\uffff\1\140\7\uffff\1\140\2\uffff\1\140\4\uffff\1\140",
            "",
            "",
            "\1\173\60\uffff\1\u0083\11\uffff\1\174\2\uffff\1\u0087\6\uffff"+
            "\1\u0086\4\uffff\1\175\1\uffff\1\u0081\4\uffff\1\176\5\uffff"+
            "\1\175\1\uffff\1\u0081\3\uffff\1\177\16\uffff\1\u0088\11\uffff"+
            "\1\u0090\10\uffff\1\u0080\6\uffff\1\u0089\1\u008a\1\u008b\22"+
            "\uffff\1\46\7\uffff\1\u008e\6\uffff\1\u008f\1\uffff\1\u008d"+
            "\3\uffff\1\u008c\2\uffff\1\u0085\2\uffff\1\u0085\7\uffff\1\u0084"+
            "\1\uffff\1\u008c\1\u0085\4\uffff\1\u0082",
            "\1\u0093\60\uffff\1\u009b\11\uffff\1\u0094\2\uffff\1\u009f"+
            "\6\uffff\1\u009e\4\uffff\1\u0095\1\uffff\1\u0099\4\uffff\1\u0096"+
            "\5\uffff\1\u0095\1\uffff\1\u0099\3\uffff\1\u0097\16\uffff\1"+
            "\u00a0\13\uffff\1\u0092\6\uffff\1\u0098\6\uffff\1\u00a1\1\u00a2"+
            "\1\u00a3\32\uffff\1\u00a6\6\uffff\1\u00a7\1\uffff\1\u00a5\3"+
            "\uffff\1\u00a4\2\uffff\1\u009d\2\uffff\1\u009d\7\uffff\1\u009c"+
            "\1\uffff\1\u00a4\1\u009d\4\uffff\1\u009a",
            "\1\u00a8\u0081\uffff\1\u00aa\2\uffff\1\u00aa\7\uffff\1\u00a9"+
            "\2\uffff\1\u00aa",
            "\1\u00ab\u0081\uffff\1\u00ad\2\uffff\1\u00ad\7\uffff\1\u00ac"+
            "\2\uffff\1\u00ad",
            "",
            "",
            "\1\171\60\uffff\1\171\11\uffff\1\171\2\uffff\1\u00ba\6\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\32\uffff\1\171\6\uffff\1\171\1\uffff\1\171\3\uffff"+
            "\1\171\2\uffff\1\171\2\uffff\1\171\7\uffff\1\171\1\uffff\2\171"+
            "\4\uffff\1\171",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c4\60\uffff\1\u00cc\11\uffff\1\u00c5\2\uffff\1\u00c3"+
            "\5\uffff\1\u00d8\1\u00cf\4\uffff\1\u00c6\1\uffff\1\u00ca\4\uffff"+
            "\1\u00c7\5\uffff\1\u00c6\1\uffff\1\u00ca\3\uffff\1\u00c8\16"+
            "\uffff\1\u00d0\22\uffff\1\u00c9\6\uffff\1\u00d1\1\u00d2\1\u00d3"+
            "\32\uffff\1\u00d6\6\uffff\1\u00d7\1\uffff\1\u00d5\3\uffff\1"+
            "\u00d4\2\uffff\1\u00ce\2\uffff\1\u00ce\7\uffff\1\u00cd\1\uffff"+
            "\1\u00d4\1\u00ce\4\uffff\1\u00cb",
            "\1\171\60\uffff\1\u00e1\11\uffff\1\171\2\uffff\1\171\6\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\22\uffff\1\46\7\uffff\1\171\6\uffff\1\171\1\uffff"+
            "\1\171\3\uffff\1\171\2\uffff\1\u00e3\2\uffff\1\u00e3\7\uffff"+
            "\1\u00e2\1\uffff\1\171\1\u00e3\4\uffff\1\u00e0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ef\60\uffff\1\u00f7\11\uffff\1\u00f0\2\uffff\1\u00fb"+
            "\6\uffff\1\u00fa\4\uffff\1\u00f1\1\uffff\1\u00f5\4\uffff\1\u00f2"+
            "\5\uffff\1\u00f1\1\uffff\1\u00f5\3\uffff\1\u00f3\16\uffff\1"+
            "\u00fc\11\uffff\1\u0104\10\uffff\1\u00f4\6\uffff\1\u00fd\1\u00fe"+
            "\1\u00ff\32\uffff\1\u0102\6\uffff\1\u0103\1\uffff\1\u0101\3"+
            "\uffff\1\u0100\2\uffff\1\u00f9\2\uffff\1\u00f9\7\uffff\1\u00f8"+
            "\1\uffff\1\u0100\1\u00f9\4\uffff\1\u00f6",
            "\1\u0105\60\uffff\1\u010d\11\uffff\1\u0106\2\uffff\1\u0111"+
            "\6\uffff\1\u0110\4\uffff\1\u0107\1\uffff\1\u010b\4\uffff\1\u0108"+
            "\5\uffff\1\u0107\1\uffff\1\u010b\3\uffff\1\u0109\16\uffff\1"+
            "\u0112\13\uffff\1\u011a\6\uffff\1\u010a\6\uffff\1\u0113\1\u0114"+
            "\1\u0115\32\uffff\1\u0118\6\uffff\1\u0119\1\uffff\1\u0117\3"+
            "\uffff\1\u0116\2\uffff\1\u010f\2\uffff\1\u010f\7\uffff\1\u010e"+
            "\1\uffff\1\u0116\1\u010f\4\uffff\1\u010c",
            "\1\u011b\u0081\uffff\1\u011d\2\uffff\1\u011d\7\uffff\1\u011c"+
            "\2\uffff\1\u011d",
            "\1\u011e\u0081\uffff\1\u0120\2\uffff\1\u0120\7\uffff\1\u011f"+
            "\2\uffff\1\u0120",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0122\60\uffff\1\u012a\11\uffff\1\u0123\2\uffff\1\u0121"+
            "\5\uffff\1\u0136\1\u012d\4\uffff\1\u0124\1\uffff\1\u0128\4\uffff"+
            "\1\u0125\5\uffff\1\u0124\1\uffff\1\u0128\3\uffff\1\u0126\16"+
            "\uffff\1\u012e\22\uffff\1\u0127\6\uffff\1\u012f\1\u0130\1\u0131"+
            "\32\uffff\1\u0134\6\uffff\1\u0135\1\uffff\1\u0133\3\uffff\1"+
            "\u0132\2\uffff\1\u012c\2\uffff\1\u012c\7\uffff\1\u012b\1\uffff"+
            "\1\u0132\1\u012c\4\uffff\1\u0129",
            "\1\171\60\uffff\1\u013f\11\uffff\1\171\2\uffff\1\171\6\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\22\uffff\1\46\7\uffff\1\171\6\uffff\1\171\1\uffff"+
            "\1\171\3\uffff\1\171\2\uffff\1\u0141\2\uffff\1\u0141\7\uffff"+
            "\1\u0140\1\uffff\1\171\1\u0141\4\uffff\1\u013e",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u014d\60\uffff\1\u0155\11\uffff\1\u014e\2\uffff\1\u0159"+
            "\6\uffff\1\u0158\4\uffff\1\u014f\1\uffff\1\u0153\4\uffff\1\u0150"+
            "\5\uffff\1\u014f\1\uffff\1\u0153\3\uffff\1\u0151\16\uffff\1"+
            "\u015a\11\uffff\1\u0162\10\uffff\1\u0152\6\uffff\1\u015b\1\u015c"+
            "\1\u015d\32\uffff\1\u0160\6\uffff\1\u0161\1\uffff\1\u015f\3"+
            "\uffff\1\u015e\2\uffff\1\u0157\2\uffff\1\u0157\7\uffff\1\u0156"+
            "\1\uffff\1\u015e\1\u0157\4\uffff\1\u0154",
            "\1\u0163\60\uffff\1\u016b\11\uffff\1\u0164\2\uffff\1\u016f"+
            "\6\uffff\1\u016e\4\uffff\1\u0165\1\uffff\1\u0169\4\uffff\1\u0166"+
            "\5\uffff\1\u0165\1\uffff\1\u0169\3\uffff\1\u0167\16\uffff\1"+
            "\u0170\13\uffff\1\u0178\6\uffff\1\u0168\6\uffff\1\u0171\1\u0172"+
            "\1\u0173\32\uffff\1\u0176\6\uffff\1\u0177\1\uffff\1\u0175\3"+
            "\uffff\1\u0174\2\uffff\1\u016d\2\uffff\1\u016d\7\uffff\1\u016c"+
            "\1\uffff\1\u0174\1\u016d\4\uffff\1\u016a",
            "\1\u0179\u0081\uffff\1\u017b\2\uffff\1\u017b\7\uffff\1\u017a"+
            "\2\uffff\1\u017b",
            "\1\u017c\u0081\uffff\1\u017e\2\uffff\1\u017e\7\uffff\1\u017d"+
            "\2\uffff\1\u017e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0180\60\uffff\1\u0188\11\uffff\1\u0181\2\uffff\1\u017f"+
            "\5\uffff\1\u0194\1\u018b\4\uffff\1\u0182\1\uffff\1\u0186\4\uffff"+
            "\1\u0183\5\uffff\1\u0182\1\uffff\1\u0186\3\uffff\1\u0184\16"+
            "\uffff\1\u018c\22\uffff\1\u0185\6\uffff\1\u018d\1\u018e\1\u018f"+
            "\32\uffff\1\u0192\6\uffff\1\u0193\1\uffff\1\u0191\3\uffff\1"+
            "\u0190\2\uffff\1\u018a\2\uffff\1\u018a\7\uffff\1\u0189\1\uffff"+
            "\1\u0190\1\u018a\4\uffff\1\u0187",
            "\1\171\60\uffff\1\u019d\11\uffff\1\171\2\uffff\1\171\6\uffff"+
            "\1\171\4\uffff\1\171\1\uffff\1\171\4\uffff\1\171\5\uffff\1\171"+
            "\1\uffff\1\171\3\uffff\1\171\16\uffff\1\171\22\uffff\1\171\6"+
            "\uffff\3\171\22\uffff\1\46\7\uffff\1\171\6\uffff\1\171\1\uffff"+
            "\1\171\3\uffff\1\171\2\uffff\1\u019f\2\uffff\1\u019f\7\uffff"+
            "\1\u019e\1\uffff\1\171\1\u019f\4\uffff\1\u019c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "288:1: block_internal : ( try_stmt | throw_stmt_wrapper | static_start_wrapper SEMICOLON | do_stmt | const_expression_wrapper SEMICOLON | variable_init_wrapper | if_stmt_wrapper | else_stmt | switch_stmt_wrapper | return_stmt | for_stmt_wrapper | while_stmt_wrapper | single_operators | struct_variable SEMICOLON | enum_variable SEMICOLON | typeof_started SEMICOLON | known_type_started SEMICOLON | SEMICOLON | goto_wrapper | 'extern' );";
        }
    }
    static final String DFA53_eotS =
        "\u021a\uffff";
    static final String DFA53_eofS =
        "\u021a\uffff";
    static final String DFA53_minS =
        "\1\67\1\21\6\uffff\1\30\1\uffff\2\6\15\uffff\2\6\20\uffff\4\6\1"+
        "\67\1\6\21\uffff\2\6\7\67\1\uffff\2\6\1\67\6\6\3\104\u01c2\uffff";
    static final String DFA53_maxS =
        "\2\u00cc\6\uffff\1\u00cc\1\uffff\2\u00cc\15\uffff\2\u00cc\20\uffff"+
        "\1\u00cc\5\u00c7\21\uffff\1\u00cc\1\u00a6\7\u00cc\1\uffff\2\u00a6"+
        "\1\u00c7\1\u00cc\5\174\3\104\u01c2\uffff";
    static final String DFA53_acceptS =
        "\2\uffff\1\2\2\uffff\1\3\1\1\122\uffff\25\1\13\uffff\5\1\1\uffff"+
        "\1\1\7\uffff\3\1\7\uffff\1\1\14\uffff\4\1\21\uffff\4\1\21\uffff"+
        "\4\1\21\uffff\6\1\20\uffff\1\1\5\uffff\26\1\1\uffff\u008a\1\1\uffff"+
        "\23\1\1\uffff\53\1\1\uffff\16\1\1\uffff\16\1\1\uffff\16\1\1\uffff"+
        "\16\1\1\uffff\3\1";
    static final String DFA53_specialS =
        "\u021a\uffff}>";
    static final String[] DFA53_transitionS = {
            "\1\2\111\uffff\1\5\37\uffff\1\2\27\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\1\2\uffff\1\2\4\uffff\1\2",
            "\1\2\6\uffff\1\2\36\uffff\1\6\13\uffff\1\2\1\13\2\uffff\2\2"+
            "\2\uffff\1\12\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\14\uffff"+
            "\1\6\16\uffff\1\2\12\uffff\3\6\27\uffff\1\2\2\uffff\1\6\6\uffff"+
            "\1\6\1\uffff\1\6\3\uffff\1\6\2\uffff\1\6\2\uffff\1\6\7\uffff"+
            "\1\10\1\uffff\2\6\4\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\6\36\uffff\1\2\14\uffff\1\31\6\uffff\1\32\2\uffff\1\6\43"+
            "\uffff\1\2\11\uffff\1\6\17\uffff\3\2\27\uffff\1\6\2\uffff\1"+
            "\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1"+
            "\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "\1\2\60\uffff\1\54\11\uffff\1\2\2\uffff\1\53\6\uffff\1\57\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\13\uffff\1\2\6\uffff\1\2\6\uffff\1\60"+
            "\2\2\32\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\56\2\uffff\1\56\7\uffff\1\55\1\uffff\1\2\1\56\4\uffff\1\2",
            "\1\104\15\uffff\1\6\42\uffff\1\103\11\uffff\1\105\2\uffff\1"+
            "\117\6\uffff\1\116\4\uffff\1\106\1\uffff\1\112\4\uffff\1\107"+
            "\5\uffff\1\106\1\uffff\1\112\3\uffff\1\110\16\uffff\1\120\11"+
            "\uffff\1\2\10\uffff\1\111\6\uffff\1\121\1\122\1\123\22\uffff"+
            "\1\6\7\uffff\1\126\6\uffff\1\127\1\uffff\1\125\3\uffff\1\124"+
            "\2\uffff\1\115\2\uffff\1\115\7\uffff\1\114\1\uffff\1\124\1\115"+
            "\4\uffff\1\102",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\131\15\uffff\1\2\42\uffff\1\141\11\uffff\1\132\2\uffff\1"+
            "\145\6\uffff\1\144\4\uffff\1\133\1\uffff\1\137\4\uffff\1\134"+
            "\5\uffff\1\133\1\uffff\1\137\3\uffff\1\135\16\uffff\1\146\11"+
            "\uffff\1\6\10\uffff\1\136\6\uffff\1\147\1\150\1\151\22\uffff"+
            "\1\2\7\uffff\1\154\6\uffff\1\155\1\uffff\1\153\3\uffff\1\152"+
            "\2\uffff\1\143\2\uffff\1\143\7\uffff\1\142\1\uffff\1\152\1\143"+
            "\4\uffff\1\140",
            "\1\6\60\uffff\1\171\11\uffff\1\6\2\uffff\1\175\6\uffff\1\174"+
            "\4\uffff\1\6\1\uffff\1\6\4\uffff\1\6\5\uffff\1\6\1\uffff\1\6"+
            "\3\uffff\1\6\16\uffff\1\6\13\uffff\1\6\6\uffff\1\6\6\uffff\1"+
            "\177\2\6\32\uffff\1\6\6\uffff\1\6\1\uffff\1\6\3\uffff\1\6\2"+
            "\uffff\1\173\2\uffff\1\173\7\uffff\1\172\1\uffff\1\6\1\173\4"+
            "\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\15\uffff\1\u0087\42\uffff\1\u0089\11\uffff\1\2\2\uffff"+
            "\1\2\6\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff"+
            "\3\2\22\uffff\1\u0091\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4"+
            "\uffff\1\u0088",
            "\1\2\21\uffff\1\u00a0\36\uffff\1\6\11\uffff\3\2\1\u009e\1\uffff"+
            "\4\2\1\uffff\1\u009f\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff"+
            "\1\2\47\uffff\1\u00a1\22\uffff\1\6\2\uffff\1\6\12\uffff\1\6",
            "\1\2\21\uffff\1\u00b5\36\uffff\1\6\11\uffff\3\2\1\u00b3\1\uffff"+
            "\4\2\1\uffff\1\u00b4\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff"+
            "\1\2\47\uffff\1\u00b6\22\uffff\1\6\2\uffff\1\6\12\uffff\1\6",
            "\1\2\21\uffff\1\u00ca\36\uffff\1\6\11\uffff\3\2\1\u00c8\1\uffff"+
            "\4\2\1\uffff\1\u00c9\13\2\1\uffff\13\2\1\uffff\2\2\30\uffff"+
            "\1\2\47\uffff\1\u00cb\22\uffff\1\6\2\uffff\1\6\12\uffff\1\6",
            "\1\u00de\14\uffff\1\u00dd\6\uffff\1\u00e1\100\uffff\1\u00e2"+
            "\54\uffff\1\u00e0\2\uffff\1\u00e0\7\uffff\1\u00df\2\uffff\1"+
            "\u00e0",
            "\1\2\60\uffff\1\6\11\uffff\3\2\2\uffff\4\2\2\uffff\13\2\1\uffff"+
            "\13\2\1\uffff\2\2\30\uffff\1\2\72\uffff\1\6\2\uffff\1\6\12\uffff"+
            "\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\6\60\uffff\1\u00f3\23\uffff\1\6\2\uffff\1\6\55\uffff\1\6"+
            "\44\uffff\1\6\27\uffff\1\u00fa\2\uffff\1\u00fa\7\uffff\1\u00f9"+
            "\2\uffff\1\u00fa\4\uffff\1\6",
            "\1\u00fd\12\uffff\1\2\6\uffff\1\u0100\50\uffff\1\u0108\1\u010b"+
            "\1\u010e\1\u00ff\1\uffff\1\u0103\2\u010e\1\u0107\1\uffff\1\u00fb"+
            "\1\u0105\1\u010e\1\u00fc\1\u0106\1\u0104\1\u010e\1\u0102\2\u0106"+
            "\1\u010e\1\u0107\1\uffff\1\u010a\1\u010e\1\u010c\1\u0103\1\u010e"+
            "\1\u0104\1\u010e\1\u0102\1\u010d\1\u0105\1\u010e\1\uffff\1\u0109"+
            "\1\u010e\26\uffff\1\u00fe\51\uffff\1\u0101",
            "\1\u0118\11\uffff\1\u0111\2\uffff\1\u0110\6\uffff\1\u011b\4"+
            "\uffff\1\u0112\1\uffff\1\u0116\4\uffff\1\u0113\5\uffff\1\u0112"+
            "\1\uffff\1\u0116\3\uffff\1\u0114\16\uffff\1\u011c\22\uffff\1"+
            "\u0115\6\uffff\1\u011d\1\u011e\1\u011f\32\uffff\1\u0122\6\uffff"+
            "\1\u0123\1\uffff\1\u0121\3\uffff\1\u0120\2\uffff\1\u011a\2\uffff"+
            "\1\u011a\7\uffff\1\u0119\1\uffff\1\u0120\1\u011a\4\uffff\1\u0117",
            "\1\u012a\14\uffff\1\u012e\6\uffff\1\u012d\4\uffff\1\u0124\1"+
            "\uffff\1\u0128\4\uffff\1\u0125\5\uffff\1\u0124\1\uffff\1\u0128"+
            "\3\uffff\1\u0126\16\uffff\1\u012f\22\uffff\1\u0127\6\uffff\1"+
            "\u0130\1\u0131\1\u0132\32\uffff\1\u0135\6\uffff\1\u0136\1\uffff"+
            "\1\u0134\3\uffff\1\u0133\2\uffff\1\u012c\2\uffff\1\u012c\7\uffff"+
            "\1\u012b\1\uffff\1\u0133\1\u012c\4\uffff\1\u0129",
            "\1\u013c\14\uffff\1\u0140\6\uffff\1\u013f\6\uffff\1\u013a\4"+
            "\uffff\1\u0137\7\uffff\1\u013a\3\uffff\1\u0138\16\uffff\1\u0141"+
            "\22\uffff\1\u0139\6\uffff\1\u0142\1\u0143\1\u0144\32\uffff\1"+
            "\u0147\6\uffff\1\u0148\1\uffff\1\u0146\3\uffff\1\u0145\2\uffff"+
            "\1\u013e\2\uffff\1\u013e\7\uffff\1\u013d\1\uffff\1\u0145\1\u013e"+
            "\4\uffff\1\u013b",
            "\1\u014d\14\uffff\1\u0151\6\uffff\1\u0150\6\uffff\1\u014b\14"+
            "\uffff\1\u014b\3\uffff\1\u0149\16\uffff\1\u0152\22\uffff\1\u014a"+
            "\6\uffff\1\u0153\1\u0154\1\u0155\32\uffff\1\u0158\6\uffff\1"+
            "\u0159\1\uffff\1\u0157\3\uffff\1\u0156\2\uffff\1\u014f\2\uffff"+
            "\1\u014f\7\uffff\1\u014e\1\uffff\1\u0156\1\u014f\4\uffff\1\u014c",
            "\1\u015d\14\uffff\1\u0161\6\uffff\1\u0160\6\uffff\1\u015b\14"+
            "\uffff\1\u015b\22\uffff\1\u0162\22\uffff\1\u015a\6\uffff\1\u0163"+
            "\1\u0164\1\u0165\32\uffff\1\u0168\6\uffff\1\u0169\1\uffff\1"+
            "\u0167\3\uffff\1\u0166\2\uffff\1\u015f\2\uffff\1\u015f\7\uffff"+
            "\1\u015e\1\uffff\1\u0166\1\u015f\4\uffff\1\u015c",
            "\1\u016c\14\uffff\1\u0170\6\uffff\1\u016f\6\uffff\1\u016a\14"+
            "\uffff\1\u016a\22\uffff\1\u0171\31\uffff\1\u0172\1\u0173\1\u0174"+
            "\32\uffff\1\u0177\6\uffff\1\u0178\1\uffff\1\u0176\3\uffff\1"+
            "\u0175\2\uffff\1\u016e\2\uffff\1\u016e\7\uffff\1\u016d\1\uffff"+
            "\1\u0175\1\u016e\4\uffff\1\u016b",
            "\1\u017a\14\uffff\1\u017e\6\uffff\1\u017d\46\uffff\1\u017f"+
            "\31\uffff\1\u0180\1\u0181\1\u0182\32\uffff\1\u0185\6\uffff\1"+
            "\u0186\1\uffff\1\u0184\3\uffff\1\u0183\2\uffff\1\u017c\2\uffff"+
            "\1\u017c\7\uffff\1\u017b\1\uffff\1\u0183\1\u017c\4\uffff\1\u0179",
            "",
            "\1\u018d\12\uffff\1\2\6\uffff\1\u0189\50\uffff\1\u0192\1\u0195"+
            "\1\u0198\1\u0187\1\uffff\1\u018d\2\u0198\1\u0191\1\uffff\1\u0188"+
            "\1\u018f\1\u0198\1\u018b\1\u0190\1\u018e\1\u0198\1\u018c\2\u0190"+
            "\1\u0198\1\u0191\1\uffff\1\u0194\1\u0198\1\u0196\1\u018d\1\u0198"+
            "\1\u018e\1\u0198\1\u018c\1\u0197\1\u018f\1\u0198\1\uffff\1\u0193"+
            "\1\u0198\26\uffff\1\u0199\51\uffff\1\u018a",
            "\1\u01a1\12\uffff\1\2\6\uffff\1\u019d\50\uffff\1\u01a6\1\u01a9"+
            "\1\u01ac\1\u019b\1\uffff\1\u01a1\2\u01ac\1\u01a5\1\uffff\1\u019c"+
            "\1\u01a3\1\u01ac\1\u019f\1\u01a4\1\u01a2\1\u01ac\1\u01a0\2\u01a4"+
            "\1\u01ac\1\u01a5\1\uffff\1\u01a8\1\u01ac\1\u01aa\1\u01a1\1\u01ac"+
            "\1\u01a2\1\u01ac\1\u01a0\1\u01ab\1\u01a3\1\u01ac\1\uffff\1\u01a7"+
            "\1\u01ac\26\uffff\1\u01ad\51\uffff\1\u019e",
            "\1\u01b0\14\uffff\1\u01af\6\uffff\1\u01b3\100\uffff\1\u01b4"+
            "\54\uffff\1\u01b2\2\uffff\1\u01b2\7\uffff\1\u01b1\2\uffff\1"+
            "\u01b2",
            "\1\u01b8\15\uffff\1\u01b5\42\uffff\1\u01b7\11\uffff\1\u01b9"+
            "\2\uffff\1\u01c3\6\uffff\1\u01c2\4\uffff\1\u01ba\1\uffff\1\u01be"+
            "\4\uffff\1\u01bb\5\uffff\1\u01ba\1\uffff\1\u01be\3\uffff\1\u01bc"+
            "\16\uffff\1\u01c4\22\uffff\1\u01bd\6\uffff\1\u01c5\1\u01c6\1"+
            "\u01c7\22\uffff\1\u01bf\7\uffff\1\u01ca\6\uffff\1\u01cb\1\uffff"+
            "\1\u01c9\3\uffff\1\u01c8\2\uffff\1\u01c1\2\uffff\1\u01c1\7\uffff"+
            "\1\u01c0\1\uffff\1\u01c8\1\u01c1\4\uffff\1\u01b6",
            "\1\u01cd\12\uffff\1\2\57\uffff\1\u01d2\1\u01d5\1\u01d8\2\uffff"+
            "\1\u01cd\2\u01d8\1\u01d1\2\uffff\1\u01cf\1\u01d8\2\u01d0\1\u01ce"+
            "\1\u01d8\1\u01cc\2\u01d0\1\u01d8\1\u01d1\1\uffff\1\u01d4\1\u01d8"+
            "\1\u01d6\1\u01cd\1\u01d8\1\u01ce\1\u01d8\1\u01cc\1\u01d7\1\u01cf"+
            "\1\u01d8\1\uffff\1\u01d3\1\u01d8\26\uffff\1\u01d9",
            "\1\u01dc\12\uffff\1\2\57\uffff\1\u01e1\1\u01e4\1\u01e7\2\uffff"+
            "\1\u01dc\2\u01e7\1\u01e0\2\uffff\1\u01de\1\u01e7\2\u01df\1\u01dd"+
            "\1\u01e7\1\u01db\2\u01df\1\u01e7\1\u01e0\1\uffff\1\u01e3\1\u01e7"+
            "\1\u01e5\1\u01dc\1\u01e7\1\u01dd\1\u01e7\1\u01db\1\u01e6\1\u01de"+
            "\1\u01e7\1\uffff\1\u01e2\1\u01e7\26\uffff\1\u01e8",
            "\1\u01eb\12\uffff\1\2\57\uffff\1\u01f0\1\u01f3\1\u01f6\2\uffff"+
            "\1\u01eb\2\u01f6\1\u01ef\2\uffff\1\u01ed\1\u01f6\2\u01ee\1\u01ec"+
            "\1\u01f6\1\u01ea\2\u01ee\1\u01f6\1\u01ef\1\uffff\1\u01f2\1\u01f6"+
            "\1\u01f4\1\u01eb\1\u01f6\1\u01ec\1\u01f6\1\u01ea\1\u01f5\1\u01ed"+
            "\1\u01f6\1\uffff\1\u01f1\1\u01f6\26\uffff\1\u01f7",
            "\1\u01fa\12\uffff\1\2\57\uffff\1\u01ff\1\u0202\1\u0205\2\uffff"+
            "\1\u01fa\2\u0205\1\u01fe\2\uffff\1\u01fc\1\u0205\2\u01fd\1\u01fb"+
            "\1\u0205\1\u01f9\2\u01fd\1\u0205\1\u01fe\1\uffff\1\u0201\1\u0205"+
            "\1\u0203\1\u01fa\1\u0205\1\u01fb\1\u0205\1\u01f9\1\u0204\1\u01fc"+
            "\1\u0205\1\uffff\1\u0200\1\u0205\26\uffff\1\u0206",
            "\1\u0209\12\uffff\1\2\57\uffff\1\u020e\1\u0211\1\u0214\2\uffff"+
            "\1\u0209\2\u0214\1\u020d\2\uffff\1\u020b\1\u0214\2\u020c\1\u020a"+
            "\1\u0214\1\u0208\2\u020c\1\u0214\1\u020d\1\uffff\1\u0210\1\u0214"+
            "\1\u0212\1\u0209\1\u0214\1\u020a\1\u0214\1\u0208\1\u0213\1\u020b"+
            "\1\u0214\1\uffff\1\u020f\1\u0214\26\uffff\1\u0215",
            "\1\u0217",
            "\1\u0218",
            "\1\u0219",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA53_eot = DFA.unpackEncodedString(DFA53_eotS);
    static final short[] DFA53_eof = DFA.unpackEncodedString(DFA53_eofS);
    static final char[] DFA53_min = DFA.unpackEncodedStringToUnsignedChars(DFA53_minS);
    static final char[] DFA53_max = DFA.unpackEncodedStringToUnsignedChars(DFA53_maxS);
    static final short[] DFA53_accept = DFA.unpackEncodedString(DFA53_acceptS);
    static final short[] DFA53_special = DFA.unpackEncodedString(DFA53_specialS);
    static final short[][] DFA53_transition;

    static {
        int numStates = DFA53_transitionS.length;
        DFA53_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA53_transition[i] = DFA.unpackEncodedString(DFA53_transitionS[i]);
        }
    }

    class DFA53 extends DFA {

        public DFA53(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 53;
            this.eot = DFA53_eot;
            this.eof = DFA53_eof;
            this.min = DFA53_min;
            this.max = DFA53_max;
            this.accept = DFA53_accept;
            this.special = DFA53_special;
            this.transition = DFA53_transition;
        }
        public String getDescription() {
            return "456:22: ( for_stmt_int1 | ( full_expr2 ( for_stmt_int1 | for_stmt_int2 ) ) | for_stmt_int2 )";
        }
    }
    static final String DFA60_eotS =
        "\u0892\uffff";
    static final String DFA60_eofS =
        "\u0892\uffff";
    static final String DFA60_minS =
        "\1\67\3\6\1\uffff\2\6\2\67\1\6\7\uffff\2\6\2\67\10\uffff\2\6\2\67"+
        "\10\uffff\10\67\3\6\1\67\6\6\3\104\1\6\1\uffff\1\6\10\67\3\6\1\67"+
        "\6\6\3\104\6\6\6\uffff\10\67\3\6\1\67\6\6\3\104\1\6\10\67\3\6\1"+
        "\67\6\6\3\104\7\6\10\67\3\6\1\67\6\6\3\104\1\6\10\67\3\6\1\67\6"+
        "\6\3\104\7\6\u07cc\uffff";
    static final String DFA60_maxS =
        "\4\u00cc\1\uffff\2\u00cc\2\u00c7\1\u00cc\7\uffff\2\u00cc\2\u00c7"+
        "\10\uffff\2\u00cc\2\u00c7\10\uffff\7\u00cc\1\u00c7\3\u00a6\1\u00c7"+
        "\1\u00cc\5\174\3\104\1\u00cc\1\uffff\10\u00cc\1\u00c7\3\u00a6\1"+
        "\u00c7\1\u00cc\5\176\3\104\6\u00cc\6\uffff\7\u00cc\1\u00c7\3\u00a6"+
        "\1\u00c7\1\u00cc\5\174\3\104\10\u00cc\1\u00c7\3\u00a6\1\u00c7\1"+
        "\u00cc\5\176\3\104\16\u00cc\1\u00c7\3\u00a6\1\u00c7\1\u00cc\5\174"+
        "\3\104\10\u00cc\1\u00c7\3\u00a6\1\u00c7\1\u00cc\5\176\3\104\7\u00cc"+
        "\u07cc\uffff";
    static final String DFA60_acceptS =
        "\4\uffff\1\2\5\uffff\1\1\u00bb\uffff\24\1\1\uffff\146\1\2\uffff"+
        "\u00aa\1\10\uffff\1\1\1\uffff\2\1\4\uffff\1\1\3\uffff\u011b\1\5"+
        "\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff"+
        "\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1"+
        "\3\uffff\u0124\1\10\uffff\u011b\1\5\uffff\1\1\3\uffff\2\1\5\uffff"+
        "\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1"+
        "\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff"+
        "\u0124\1\10\uffff\u011b\1\5\uffff\1\1\3\uffff\2\1\5\uffff\2\1\3"+
        "\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff"+
        "\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff\2\1\5\uffff\2\1\3\uffff";
    static final String DFA60_specialS =
        "\u0892\uffff}>";
    static final String[] DFA60_transitionS = {
            "\1\1\151\uffff\1\4\27\uffff\1\3\2\uffff\1\3\7\uffff\1\2\2\uffff"+
            "\1\3\4\uffff\1\4",
            "\1\11\12\uffff\1\4\6\uffff\1\7\36\uffff\1\12\13\uffff\1\4\1"+
            "\5\2\uffff\2\4\2\uffff\1\6\1\uffff\1\4\3\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1"+
            "\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\10\22\uffff\1\12\2\uffff"+
            "\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\12\12\uffff\1\4\6\uffff\1\23\36\uffff\1\12\13\uffff\1\4"+
            "\1\21\2\uffff\2\4\2\uffff\1\22\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\24\22\uffff\1\12\2"+
            "\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\12\12\uffff\1\4\6\uffff\1\37\36\uffff\1\12\13\uffff\1\4"+
            "\1\35\2\uffff\2\4\2\uffff\1\36\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\40\22\uffff\1\12\2"+
            "\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "",
            "\1\51\60\uffff\1\61\11\uffff\1\52\2\uffff\1\65\6\uffff\1\64"+
            "\4\uffff\1\53\1\uffff\1\57\4\uffff\1\54\5\uffff\1\53\1\uffff"+
            "\1\57\3\uffff\1\55\16\uffff\1\66\11\uffff\1\76\10\uffff\1\56"+
            "\6\uffff\1\67\1\70\1\71\22\uffff\1\4\7\uffff\1\74\6\uffff\1"+
            "\75\1\uffff\1\73\3\uffff\1\72\2\uffff\1\63\2\uffff\1\63\7\uffff"+
            "\1\62\1\uffff\1\72\1\63\4\uffff\1\60",
            "\1\101\60\uffff\1\111\11\uffff\1\102\2\uffff\1\115\6\uffff"+
            "\1\114\4\uffff\1\103\1\uffff\1\107\4\uffff\1\104\5\uffff\1\103"+
            "\1\uffff\1\107\3\uffff\1\105\16\uffff\1\116\13\uffff\1\100\6"+
            "\uffff\1\106\6\uffff\1\117\1\120\1\121\32\uffff\1\124\6\uffff"+
            "\1\125\1\uffff\1\123\3\uffff\1\122\2\uffff\1\113\2\uffff\1\113"+
            "\7\uffff\1\112\1\uffff\1\122\1\113\4\uffff\1\110",
            "\1\126\u0081\uffff\1\130\2\uffff\1\130\7\uffff\1\127\2\uffff"+
            "\1\130",
            "\1\131\u0081\uffff\1\133\2\uffff\1\133\7\uffff\1\132\2\uffff"+
            "\1\133",
            "\1\12\60\uffff\1\12\14\uffff\1\4\134\uffff\1\12\27\uffff\1"+
            "\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\142\60\uffff\1\152\11\uffff\1\143\2\uffff\1\156\6\uffff"+
            "\1\155\4\uffff\1\144\1\uffff\1\150\4\uffff\1\145\5\uffff\1\144"+
            "\1\uffff\1\150\3\uffff\1\146\16\uffff\1\157\11\uffff\1\167\10"+
            "\uffff\1\147\6\uffff\1\160\1\161\1\162\32\uffff\1\165\6\uffff"+
            "\1\166\1\uffff\1\164\3\uffff\1\163\2\uffff\1\154\2\uffff\1\154"+
            "\7\uffff\1\153\1\uffff\1\163\1\154\4\uffff\1\151",
            "\1\170\60\uffff\1\u0080\11\uffff\1\171\2\uffff\1\u0084\6\uffff"+
            "\1\u0083\4\uffff\1\172\1\uffff\1\176\4\uffff\1\173\5\uffff\1"+
            "\172\1\uffff\1\176\3\uffff\1\174\16\uffff\1\u0085\13\uffff\1"+
            "\u008d\6\uffff\1\175\6\uffff\1\u0086\1\u0087\1\u0088\32\uffff"+
            "\1\u008b\6\uffff\1\u008c\1\uffff\1\u008a\3\uffff\1\u0089\2\uffff"+
            "\1\u0082\2\uffff\1\u0082\7\uffff\1\u0081\1\uffff\1\u0089\1\u0082"+
            "\4\uffff\1\177",
            "\1\u008e\u0081\uffff\1\u0090\2\uffff\1\u0090\7\uffff\1\u008f"+
            "\2\uffff\1\u0090",
            "\1\u0091\u0081\uffff\1\u0093\2\uffff\1\u0093\7\uffff\1\u0092"+
            "\2\uffff\1\u0093",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0094\60\uffff\1\u009c\11\uffff\1\u0095\2\uffff\1\u00a0"+
            "\6\uffff\1\u009f\4\uffff\1\u0096\1\uffff\1\u009a\4\uffff\1\u0097"+
            "\5\uffff\1\u0096\1\uffff\1\u009a\3\uffff\1\u0098\16\uffff\1"+
            "\u00a1\11\uffff\1\u00a9\10\uffff\1\u0099\6\uffff\1\u00a2\1\u00a3"+
            "\1\u00a4\32\uffff\1\u00a7\6\uffff\1\u00a8\1\uffff\1\u00a6\3"+
            "\uffff\1\u00a5\2\uffff\1\u009e\2\uffff\1\u009e\7\uffff\1\u009d"+
            "\1\uffff\1\u00a5\1\u009e\4\uffff\1\u009b",
            "\1\u00aa\60\uffff\1\u00b2\11\uffff\1\u00ab\2\uffff\1\u00b6"+
            "\6\uffff\1\u00b5\4\uffff\1\u00ac\1\uffff\1\u00b0\4\uffff\1\u00ad"+
            "\5\uffff\1\u00ac\1\uffff\1\u00b0\3\uffff\1\u00ae\16\uffff\1"+
            "\u00b7\13\uffff\1\u00bf\6\uffff\1\u00af\6\uffff\1\u00b8\1\u00b9"+
            "\1\u00ba\32\uffff\1\u00bd\6\uffff\1\u00be\1\uffff\1\u00bc\3"+
            "\uffff\1\u00bb\2\uffff\1\u00b4\2\uffff\1\u00b4\7\uffff\1\u00b3"+
            "\1\uffff\1\u00bb\1\u00b4\4\uffff\1\u00b1",
            "\1\u00c0\u0081\uffff\1\u00c2\2\uffff\1\u00c2\7\uffff\1\u00c1"+
            "\2\uffff\1\u00c2",
            "\1\u00c3\u0081\uffff\1\u00c5\2\uffff\1\u00c5\7\uffff\1\u00c4"+
            "\2\uffff\1\u00c5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ce\11\uffff\1\u00c7\2\uffff\1\u00c6\6\uffff\1\u00d1\4"+
            "\uffff\1\u00c8\1\uffff\1\u00cc\4\uffff\1\u00c9\5\uffff\1\u00c8"+
            "\1\uffff\1\u00cc\3\uffff\1\u00ca\16\uffff\1\u00d2\22\uffff\1"+
            "\u00cb\6\uffff\1\u00d3\1\u00d4\1\u00d5\22\uffff\1\4\7\uffff"+
            "\1\u00d8\6\uffff\1\u00d9\1\uffff\1\u00d7\3\uffff\1\u00d6\2\uffff"+
            "\1\u00d0\2\uffff\1\u00d0\7\uffff\1\u00cf\1\uffff\1\u00d6\1\u00d0"+
            "\4\uffff\1\u00cd",
            "\1\u00e1\14\uffff\1\u00e5\6\uffff\1\u00e4\4\uffff\1\u00db\1"+
            "\uffff\1\u00df\4\uffff\1\u00dc\5\uffff\1\u00db\1\uffff\1\u00df"+
            "\3\uffff\1\u00dd\16\uffff\1\u00e6\22\uffff\1\u00de\6\uffff\1"+
            "\u00e7\1\u00e8\1\u00e9\32\uffff\1\u00ec\6\uffff\1\u00ed\1\uffff"+
            "\1\u00eb\3\uffff\1\u00ea\2\uffff\1\u00e3\2\uffff\1\u00e3\7\uffff"+
            "\1\u00e2\1\uffff\1\u00ea\1\u00e3\4\uffff\1\u00e0",
            "\1\u00f3\14\uffff\1\u00f7\6\uffff\1\u00f6\6\uffff\1\u00f1\4"+
            "\uffff\1\u00ee\7\uffff\1\u00f1\3\uffff\1\u00ef\16\uffff\1\u00f8"+
            "\22\uffff\1\u00f0\6\uffff\1\u00f9\1\u00fa\1\u00fb\32\uffff\1"+
            "\u00fe\6\uffff\1\u00ff\1\uffff\1\u00fd\3\uffff\1\u00fc\2\uffff"+
            "\1\u00f5\2\uffff\1\u00f5\7\uffff\1\u00f4\1\uffff\1\u00fc\1\u00f5"+
            "\4\uffff\1\u00f2",
            "\1\u0104\14\uffff\1\u0108\6\uffff\1\u0107\6\uffff\1\u0102\14"+
            "\uffff\1\u0102\3\uffff\1\u0100\16\uffff\1\u0109\22\uffff\1\u0101"+
            "\6\uffff\1\u010a\1\u010b\1\u010c\32\uffff\1\u010f\6\uffff\1"+
            "\u0110\1\uffff\1\u010e\3\uffff\1\u010d\2\uffff\1\u0106\2\uffff"+
            "\1\u0106\7\uffff\1\u0105\1\uffff\1\u010d\1\u0106\4\uffff\1\u0103",
            "\1\u0114\14\uffff\1\u0118\6\uffff\1\u0117\6\uffff\1\u0112\14"+
            "\uffff\1\u0112\22\uffff\1\u0119\22\uffff\1\u0111\6\uffff\1\u011a"+
            "\1\u011b\1\u011c\32\uffff\1\u011f\6\uffff\1\u0120\1\uffff\1"+
            "\u011e\3\uffff\1\u011d\2\uffff\1\u0116\2\uffff\1\u0116\7\uffff"+
            "\1\u0115\1\uffff\1\u011d\1\u0116\4\uffff\1\u0113",
            "\1\u0123\14\uffff\1\u0127\6\uffff\1\u0126\6\uffff\1\u0121\14"+
            "\uffff\1\u0121\22\uffff\1\u0128\31\uffff\1\u0129\1\u012a\1\u012b"+
            "\32\uffff\1\u012e\6\uffff\1\u012f\1\uffff\1\u012d\3\uffff\1"+
            "\u012c\2\uffff\1\u0125\2\uffff\1\u0125\7\uffff\1\u0124\1\uffff"+
            "\1\u012c\1\u0125\4\uffff\1\u0122",
            "\1\u0131\14\uffff\1\u0135\6\uffff\1\u0134\46\uffff\1\u0136"+
            "\31\uffff\1\u0137\1\u0138\1\u0139\32\uffff\1\u013c\6\uffff\1"+
            "\u013d\1\uffff\1\u013b\3\uffff\1\u013a\2\uffff\1\u0133\2\uffff"+
            "\1\u0133\7\uffff\1\u0132\1\uffff\1\u013a\1\u0133\4\uffff\1\u0130",
            "\1\u013e\23\uffff\1\4\60\uffff\1\4\74\uffff\1\u0140\2\uffff"+
            "\1\u0140\7\uffff\1\u013f\2\uffff\1\u0140",
            "\1\u0149\12\uffff\1\u0155\6\uffff\1\u0145\50\uffff\1\u014e"+
            "\1\u0151\1\u0154\1\u0143\1\uffff\1\u0149\2\u0154\1\u014d\1\uffff"+
            "\1\u0144\1\u014b\1\u0154\1\u0147\1\u014c\1\u014a\1\u0154\1\u0148"+
            "\2\u014c\1\u0154\1\u014d\1\uffff\1\u0150\1\u0154\1\u0152\1\u0149"+
            "\1\u0154\1\u014a\1\u0154\1\u0148\1\u0153\1\u014b\1\u0154\1\uffff"+
            "\1\u014f\1\u0154\26\uffff\1\u0156\51\uffff\1\u0146",
            "\1\u015d\12\uffff\1\u0169\6\uffff\1\u0159\50\uffff\1\u0162"+
            "\1\u0165\1\u0168\1\u0157\1\uffff\1\u015d\2\u0168\1\u0161\1\uffff"+
            "\1\u0158\1\u015f\1\u0168\1\u015b\1\u0160\1\u015e\1\u0168\1\u015c"+
            "\2\u0160\1\u0168\1\u0161\1\uffff\1\u0164\1\u0168\1\u0166\1\u015d"+
            "\1\u0168\1\u015e\1\u0168\1\u015c\1\u0167\1\u015f\1\u0168\1\uffff"+
            "\1\u0163\1\u0168\26\uffff\1\u016a\51\uffff\1\u015a",
            "\1\u0171\12\uffff\1\u017d\6\uffff\1\u016d\50\uffff\1\u0176"+
            "\1\u0179\1\u017c\1\u016b\1\uffff\1\u0171\2\u017c\1\u0175\1\uffff"+
            "\1\u016c\1\u0173\1\u017c\1\u016f\1\u0174\1\u0172\1\u017c\1\u0170"+
            "\2\u0174\1\u017c\1\u0175\1\uffff\1\u0178\1\u017c\1\u017a\1\u0171"+
            "\1\u017c\1\u0172\1\u017c\1\u0170\1\u017b\1\u0173\1\u017c\1\uffff"+
            "\1\u0177\1\u017c\26\uffff\1\u017e\51\uffff\1\u016e",
            "\1\u0180\14\uffff\1\u017f\6\uffff\1\u0183\100\uffff\1\u0184"+
            "\54\uffff\1\u0182\2\uffff\1\u0182\7\uffff\1\u0181\2\uffff\1"+
            "\u0182",
            "\1\u0188\15\uffff\1\u0185\42\uffff\1\u0187\11\uffff\1\u0189"+
            "\2\uffff\1\u0193\6\uffff\1\u0192\4\uffff\1\u018a\1\uffff\1\u018e"+
            "\4\uffff\1\u018b\5\uffff\1\u018a\1\uffff\1\u018e\3\uffff\1\u018c"+
            "\16\uffff\1\u0194\22\uffff\1\u018d\6\uffff\1\u0195\1\u0196\1"+
            "\u0197\22\uffff\1\u018f\7\uffff\1\u019a\6\uffff\1\u019b\1\uffff"+
            "\1\u0199\3\uffff\1\u0198\2\uffff\1\u0191\2\uffff\1\u0191\7\uffff"+
            "\1\u0190\1\uffff\1\u0198\1\u0191\4\uffff\1\u0186",
            "\1\u019d\12\uffff\1\u01a9\57\uffff\1\u01a2\1\u01a5\1\u01a8"+
            "\2\uffff\1\u019d\2\u01a8\1\u01a1\2\uffff\1\u019f\1\u01a8\2\u01a0"+
            "\1\u019e\1\u01a8\1\u019c\2\u01a0\1\u01a8\1\u01a1\1\uffff\1\u01a4"+
            "\1\u01a8\1\u01a6\1\u019d\1\u01a8\1\u019e\1\u01a8\1\u019c\1\u01a7"+
            "\1\u019f\1\u01a8\1\uffff\1\u01a3\1\u01a8\26\uffff\1\u01aa",
            "\1\u01ac\12\uffff\1\u01b8\57\uffff\1\u01b1\1\u01b4\1\u01b7"+
            "\2\uffff\1\u01ac\2\u01b7\1\u01b0\2\uffff\1\u01ae\1\u01b7\2\u01af"+
            "\1\u01ad\1\u01b7\1\u01ab\2\u01af\1\u01b7\1\u01b0\1\uffff\1\u01b3"+
            "\1\u01b7\1\u01b5\1\u01ac\1\u01b7\1\u01ad\1\u01b7\1\u01ab\1\u01b6"+
            "\1\u01ae\1\u01b7\1\uffff\1\u01b2\1\u01b7\26\uffff\1\u01b9",
            "\1\u01bb\12\uffff\1\u01c7\57\uffff\1\u01c0\1\u01c3\1\u01c6"+
            "\2\uffff\1\u01bb\2\u01c6\1\u01bf\2\uffff\1\u01bd\1\u01c6\2\u01be"+
            "\1\u01bc\1\u01c6\1\u01ba\2\u01be\1\u01c6\1\u01bf\1\uffff\1\u01c2"+
            "\1\u01c6\1\u01c4\1\u01bb\1\u01c6\1\u01bc\1\u01c6\1\u01ba\1\u01c5"+
            "\1\u01bd\1\u01c6\1\uffff\1\u01c1\1\u01c6\26\uffff\1\u01c8",
            "\1\u01ca\12\uffff\1\u01d6\57\uffff\1\u01cf\1\u01d2\1\u01d5"+
            "\2\uffff\1\u01ca\2\u01d5\1\u01ce\2\uffff\1\u01cc\1\u01d5\2\u01cd"+
            "\1\u01cb\1\u01d5\1\u01c9\2\u01cd\1\u01d5\1\u01ce\1\uffff\1\u01d1"+
            "\1\u01d5\1\u01d3\1\u01ca\1\u01d5\1\u01cb\1\u01d5\1\u01c9\1\u01d4"+
            "\1\u01cc\1\u01d5\1\uffff\1\u01d0\1\u01d5\26\uffff\1\u01d7",
            "\1\u01d9\12\uffff\1\u01e5\57\uffff\1\u01de\1\u01e1\1\u01e4"+
            "\2\uffff\1\u01d9\2\u01e4\1\u01dd\2\uffff\1\u01db\1\u01e4\2\u01dc"+
            "\1\u01da\1\u01e4\1\u01d8\2\u01dc\1\u01e4\1\u01dd\1\uffff\1\u01e0"+
            "\1\u01e4\1\u01e2\1\u01d9\1\u01e4\1\u01da\1\u01e4\1\u01d8\1\u01e3"+
            "\1\u01db\1\u01e4\1\uffff\1\u01df\1\u01e4\26\uffff\1\u01e6",
            "\1\u01e7",
            "\1\u01e8",
            "\1\u01e9",
            "\1\12\12\uffff\1\4\6\uffff\1\u01eb\36\uffff\1\12\13\uffff\1"+
            "\4\3\uffff\2\4\2\uffff\1\u01ea\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u01ec\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "",
            "\1\u01f5\12\uffff\1\4\6\uffff\1\u01f7\36\uffff\1\12\13\uffff"+
            "\2\4\2\uffff\2\4\2\uffff\1\u01fd\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u01f8\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\u0209\11\uffff\1\u0202\2\uffff\1\u0201\6\uffff\1\u020c\4"+
            "\uffff\1\u0203\1\uffff\1\u0207\4\uffff\1\u0204\5\uffff\1\u0203"+
            "\1\uffff\1\u0207\3\uffff\1\u0205\16\uffff\1\u020d\22\uffff\1"+
            "\u0206\6\uffff\1\u020e\1\u020f\1\u0210\32\uffff\1\u0213\6\uffff"+
            "\1\u0214\1\uffff\1\u0212\3\uffff\1\u0211\2\uffff\1\u020b\2\uffff"+
            "\1\u020b\7\uffff\1\u020a\1\uffff\1\u0211\1\u020b\4\uffff\1\u0208",
            "\1\u021b\14\uffff\1\u021f\6\uffff\1\u021e\4\uffff\1\u0215\1"+
            "\uffff\1\u0219\4\uffff\1\u0216\5\uffff\1\u0215\1\uffff\1\u0219"+
            "\3\uffff\1\u0217\16\uffff\1\u0220\22\uffff\1\u0218\6\uffff\1"+
            "\u0221\1\u0222\1\u0223\32\uffff\1\u0226\6\uffff\1\u0227\1\uffff"+
            "\1\u0225\3\uffff\1\u0224\2\uffff\1\u021d\2\uffff\1\u021d\7\uffff"+
            "\1\u021c\1\uffff\1\u0224\1\u021d\4\uffff\1\u021a",
            "\1\u022d\14\uffff\1\u0231\6\uffff\1\u0230\6\uffff\1\u022b\4"+
            "\uffff\1\u0228\7\uffff\1\u022b\3\uffff\1\u0229\16\uffff\1\u0232"+
            "\22\uffff\1\u022a\6\uffff\1\u0233\1\u0234\1\u0235\32\uffff\1"+
            "\u0238\6\uffff\1\u0239\1\uffff\1\u0237\3\uffff\1\u0236\2\uffff"+
            "\1\u022f\2\uffff\1\u022f\7\uffff\1\u022e\1\uffff\1\u0236\1\u022f"+
            "\4\uffff\1\u022c",
            "\1\u023e\14\uffff\1\u0242\6\uffff\1\u0241\6\uffff\1\u023c\14"+
            "\uffff\1\u023c\3\uffff\1\u023a\16\uffff\1\u0243\22\uffff\1\u023b"+
            "\6\uffff\1\u0244\1\u0245\1\u0246\32\uffff\1\u0249\6\uffff\1"+
            "\u024a\1\uffff\1\u0248\3\uffff\1\u0247\2\uffff\1\u0240\2\uffff"+
            "\1\u0240\7\uffff\1\u023f\1\uffff\1\u0247\1\u0240\4\uffff\1\u023d",
            "\1\u024e\14\uffff\1\u0252\6\uffff\1\u0251\6\uffff\1\u024c\14"+
            "\uffff\1\u024c\22\uffff\1\u0253\22\uffff\1\u024b\6\uffff\1\u0254"+
            "\1\u0255\1\u0256\32\uffff\1\u0259\6\uffff\1\u025a\1\uffff\1"+
            "\u0258\3\uffff\1\u0257\2\uffff\1\u0250\2\uffff\1\u0250\7\uffff"+
            "\1\u024f\1\uffff\1\u0257\1\u0250\4\uffff\1\u024d",
            "\1\u025d\14\uffff\1\u0261\6\uffff\1\u0260\6\uffff\1\u025b\14"+
            "\uffff\1\u025b\22\uffff\1\u0262\31\uffff\1\u0263\1\u0264\1\u0265"+
            "\32\uffff\1\u0268\6\uffff\1\u0269\1\uffff\1\u0267\3\uffff\1"+
            "\u0266\2\uffff\1\u025f\2\uffff\1\u025f\7\uffff\1\u025e\1\uffff"+
            "\1\u0266\1\u025f\4\uffff\1\u025c",
            "\1\u026b\14\uffff\1\u026f\6\uffff\1\u026e\46\uffff\1\u0270"+
            "\31\uffff\1\u0271\1\u0272\1\u0273\32\uffff\1\u0276\6\uffff\1"+
            "\u0277\1\uffff\1\u0275\3\uffff\1\u0274\2\uffff\1\u026d\2\uffff"+
            "\1\u026d\7\uffff\1\u026c\1\uffff\1\u0274\1\u026d\4\uffff\1\u026a",
            "\1\u0278\u0081\uffff\1\u027a\2\uffff\1\u027a\7\uffff\1\u0279"+
            "\2\uffff\1\u027a",
            "\1\u0281\21\uffff\1\u027d\50\uffff\1\u0286\1\u0289\1\u028c"+
            "\1\u027b\1\uffff\1\u0281\2\u028c\1\u0285\1\uffff\1\u027c\1\u0283"+
            "\1\u028c\1\u027f\1\u0284\1\u0282\1\u028c\1\u0280\2\u0284\1\u028c"+
            "\1\u0285\1\uffff\1\u0288\1\u028c\1\u028a\1\u0281\1\u028c\1\u0282"+
            "\1\u028c\1\u0280\1\u028b\1\u0283\1\u028c\1\uffff\1\u0287\1\u028c"+
            "\30\uffff\1\u028d\47\uffff\1\u027e",
            "\1\u0294\21\uffff\1\u0290\50\uffff\1\u0299\1\u029c\1\u029f"+
            "\1\u028e\1\uffff\1\u0294\2\u029f\1\u0298\1\uffff\1\u028f\1\u0296"+
            "\1\u029f\1\u0292\1\u0297\1\u0295\1\u029f\1\u0293\2\u0297\1\u029f"+
            "\1\u0298\1\uffff\1\u029b\1\u029f\1\u029d\1\u0294\1\u029f\1\u0295"+
            "\1\u029f\1\u0293\1\u029e\1\u0296\1\u029f\1\uffff\1\u029a\1\u029f"+
            "\30\uffff\1\u02a0\47\uffff\1\u0291",
            "\1\u02a7\21\uffff\1\u02a3\50\uffff\1\u02ac\1\u02af\1\u02b2"+
            "\1\u02a1\1\uffff\1\u02a7\2\u02b2\1\u02ab\1\uffff\1\u02a2\1\u02a9"+
            "\1\u02b2\1\u02a5\1\u02aa\1\u02a8\1\u02b2\1\u02a6\2\u02aa\1\u02b2"+
            "\1\u02ab\1\uffff\1\u02ae\1\u02b2\1\u02b0\1\u02a7\1\u02b2\1\u02a8"+
            "\1\u02b2\1\u02a6\1\u02b1\1\u02a9\1\u02b2\1\uffff\1\u02ad\1\u02b2"+
            "\30\uffff\1\u02b3\47\uffff\1\u02a4",
            "\1\u02b5\14\uffff\1\u02b4\6\uffff\1\u02b8\100\uffff\1\u02b9"+
            "\54\uffff\1\u02b7\2\uffff\1\u02b7\7\uffff\1\u02b6\2\uffff\1"+
            "\u02b7",
            "\1\u02bd\15\uffff\1\u02ba\42\uffff\1\u02bc\11\uffff\1\u02be"+
            "\2\uffff\1\u02c8\6\uffff\1\u02c7\4\uffff\1\u02bf\1\uffff\1\u02c3"+
            "\4\uffff\1\u02c0\5\uffff\1\u02bf\1\uffff\1\u02c3\3\uffff\1\u02c1"+
            "\16\uffff\1\u02c9\22\uffff\1\u02c2\6\uffff\1\u02ca\1\u02cb\1"+
            "\u02cc\22\uffff\1\u02c4\7\uffff\1\u02cf\6\uffff\1\u02d0\1\uffff"+
            "\1\u02ce\3\uffff\1\u02cd\2\uffff\1\u02c6\2\uffff\1\u02c6\7\uffff"+
            "\1\u02c5\1\uffff\1\u02cd\1\u02c6\4\uffff\1\u02bb",
            "\1\u02d2\72\uffff\1\u02d7\1\u02da\1\u02dd\2\uffff\1\u02d2\2"+
            "\u02dd\1\u02d6\2\uffff\1\u02d4\1\u02dd\2\u02d5\1\u02d3\1\u02dd"+
            "\1\u02d1\2\u02d5\1\u02dd\1\u02d6\1\uffff\1\u02d9\1\u02dd\1\u02db"+
            "\1\u02d2\1\u02dd\1\u02d3\1\u02dd\1\u02d1\1\u02dc\1\u02d4\1\u02dd"+
            "\1\uffff\1\u02d8\1\u02dd\30\uffff\1\u02de",
            "\1\u02e0\72\uffff\1\u02e5\1\u02e8\1\u02eb\2\uffff\1\u02e0\2"+
            "\u02eb\1\u02e4\2\uffff\1\u02e2\1\u02eb\2\u02e3\1\u02e1\1\u02eb"+
            "\1\u02df\2\u02e3\1\u02eb\1\u02e4\1\uffff\1\u02e7\1\u02eb\1\u02e9"+
            "\1\u02e0\1\u02eb\1\u02e1\1\u02eb\1\u02df\1\u02ea\1\u02e2\1\u02eb"+
            "\1\uffff\1\u02e6\1\u02eb\30\uffff\1\u02ec",
            "\1\u02ee\72\uffff\1\u02f3\1\u02f6\1\u02f9\2\uffff\1\u02ee\2"+
            "\u02f9\1\u02f2\2\uffff\1\u02f0\1\u02f9\2\u02f1\1\u02ef\1\u02f9"+
            "\1\u02ed\2\u02f1\1\u02f9\1\u02f2\1\uffff\1\u02f5\1\u02f9\1\u02f7"+
            "\1\u02ee\1\u02f9\1\u02ef\1\u02f9\1\u02ed\1\u02f8\1\u02f0\1\u02f9"+
            "\1\uffff\1\u02f4\1\u02f9\30\uffff\1\u02fa",
            "\1\u02fc\72\uffff\1\u0301\1\u0304\1\u0307\2\uffff\1\u02fc\2"+
            "\u0307\1\u0300\2\uffff\1\u02fe\1\u0307\2\u02ff\1\u02fd\1\u0307"+
            "\1\u02fb\2\u02ff\1\u0307\1\u0300\1\uffff\1\u0303\1\u0307\1\u0305"+
            "\1\u02fc\1\u0307\1\u02fd\1\u0307\1\u02fb\1\u0306\1\u02fe\1\u0307"+
            "\1\uffff\1\u0302\1\u0307\30\uffff\1\u0308",
            "\1\u030a\72\uffff\1\u030f\1\u0312\1\u0315\2\uffff\1\u030a\2"+
            "\u0315\1\u030e\2\uffff\1\u030c\1\u0315\2\u030d\1\u030b\1\u0315"+
            "\1\u0309\2\u030d\1\u0315\1\u030e\1\uffff\1\u0311\1\u0315\1\u0313"+
            "\1\u030a\1\u0315\1\u030b\1\u0315\1\u0309\1\u0314\1\u030c\1\u0315"+
            "\1\uffff\1\u0310\1\u0315\30\uffff\1\u0316",
            "\1\u0317",
            "\1\u0318",
            "\1\u0319",
            "\1\12\12\uffff\1\4\6\uffff\1\u0321\36\uffff\1\12\13\uffff\1"+
            "\4\1\u031a\2\uffff\2\4\2\uffff\1\u031b\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u0322\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u032d\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0326\2\uffff\2\4\2\uffff\1\u0327\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u032e\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u0339\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0332\2\uffff\2\4\2\uffff\1\u0333\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u033a\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u0345\36\uffff\1\12\13\uffff\1"+
            "\4\1\u033e\2\uffff\2\4\2\uffff\1\u033f\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u0346\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u0351\36\uffff\1\12\13\uffff\1"+
            "\4\1\u034a\2\uffff\2\4\2\uffff\1\u034b\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u0352\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u035d\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0356\2\uffff\2\4\2\uffff\1\u0357\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u035e\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u036a\11\uffff\1\u0363\2\uffff\1\u0362\6\uffff\1\u036d\4"+
            "\uffff\1\u0364\1\uffff\1\u0368\4\uffff\1\u0365\5\uffff\1\u0364"+
            "\1\uffff\1\u0368\3\uffff\1\u0366\16\uffff\1\u036e\22\uffff\1"+
            "\u0367\6\uffff\1\u036f\1\u0370\1\u0371\32\uffff\1\u0374\6\uffff"+
            "\1\u0375\1\uffff\1\u0373\3\uffff\1\u0372\2\uffff\1\u036c\2\uffff"+
            "\1\u036c\7\uffff\1\u036b\1\uffff\1\u0372\1\u036c\4\uffff\1\u0369",
            "\1\u037c\14\uffff\1\u0380\6\uffff\1\u037f\4\uffff\1\u0376\1"+
            "\uffff\1\u037a\4\uffff\1\u0377\5\uffff\1\u0376\1\uffff\1\u037a"+
            "\3\uffff\1\u0378\16\uffff\1\u0381\22\uffff\1\u0379\6\uffff\1"+
            "\u0382\1\u0383\1\u0384\32\uffff\1\u0387\6\uffff\1\u0388\1\uffff"+
            "\1\u0386\3\uffff\1\u0385\2\uffff\1\u037e\2\uffff\1\u037e\7\uffff"+
            "\1\u037d\1\uffff\1\u0385\1\u037e\4\uffff\1\u037b",
            "\1\u038e\14\uffff\1\u0392\6\uffff\1\u0391\6\uffff\1\u038c\4"+
            "\uffff\1\u0389\7\uffff\1\u038c\3\uffff\1\u038a\16\uffff\1\u0393"+
            "\22\uffff\1\u038b\6\uffff\1\u0394\1\u0395\1\u0396\32\uffff\1"+
            "\u0399\6\uffff\1\u039a\1\uffff\1\u0398\3\uffff\1\u0397\2\uffff"+
            "\1\u0390\2\uffff\1\u0390\7\uffff\1\u038f\1\uffff\1\u0397\1\u0390"+
            "\4\uffff\1\u038d",
            "\1\u039f\14\uffff\1\u03a3\6\uffff\1\u03a2\6\uffff\1\u039d\14"+
            "\uffff\1\u039d\3\uffff\1\u039b\16\uffff\1\u03a4\22\uffff\1\u039c"+
            "\6\uffff\1\u03a5\1\u03a6\1\u03a7\32\uffff\1\u03aa\6\uffff\1"+
            "\u03ab\1\uffff\1\u03a9\3\uffff\1\u03a8\2\uffff\1\u03a1\2\uffff"+
            "\1\u03a1\7\uffff\1\u03a0\1\uffff\1\u03a8\1\u03a1\4\uffff\1\u039e",
            "\1\u03af\14\uffff\1\u03b3\6\uffff\1\u03b2\6\uffff\1\u03ad\14"+
            "\uffff\1\u03ad\22\uffff\1\u03b4\22\uffff\1\u03ac\6\uffff\1\u03b5"+
            "\1\u03b6\1\u03b7\32\uffff\1\u03ba\6\uffff\1\u03bb\1\uffff\1"+
            "\u03b9\3\uffff\1\u03b8\2\uffff\1\u03b1\2\uffff\1\u03b1\7\uffff"+
            "\1\u03b0\1\uffff\1\u03b8\1\u03b1\4\uffff\1\u03ae",
            "\1\u03be\14\uffff\1\u03c2\6\uffff\1\u03c1\6\uffff\1\u03bc\14"+
            "\uffff\1\u03bc\22\uffff\1\u03c3\31\uffff\1\u03c4\1\u03c5\1\u03c6"+
            "\32\uffff\1\u03c9\6\uffff\1\u03ca\1\uffff\1\u03c8\3\uffff\1"+
            "\u03c7\2\uffff\1\u03c0\2\uffff\1\u03c0\7\uffff\1\u03bf\1\uffff"+
            "\1\u03c7\1\u03c0\4\uffff\1\u03bd",
            "\1\u03cc\14\uffff\1\u03d0\6\uffff\1\u03cf\46\uffff\1\u03d1"+
            "\31\uffff\1\u03d2\1\u03d3\1\u03d4\32\uffff\1\u03d7\6\uffff\1"+
            "\u03d8\1\uffff\1\u03d6\3\uffff\1\u03d5\2\uffff\1\u03ce\2\uffff"+
            "\1\u03ce\7\uffff\1\u03cd\1\uffff\1\u03d5\1\u03ce\4\uffff\1\u03cb",
            "\1\u03d9\u0081\uffff\1\u03db\2\uffff\1\u03db\7\uffff\1\u03da"+
            "\2\uffff\1\u03db",
            "\1\u03e2\12\uffff\1\u03ee\6\uffff\1\u03de\50\uffff\1\u03e7"+
            "\1\u03ea\1\u03ed\1\u03dc\1\uffff\1\u03e2\2\u03ed\1\u03e6\1\uffff"+
            "\1\u03dd\1\u03e4\1\u03ed\1\u03e0\1\u03e5\1\u03e3\1\u03ed\1\u03e1"+
            "\2\u03e5\1\u03ed\1\u03e6\1\uffff\1\u03e9\1\u03ed\1\u03eb\1\u03e2"+
            "\1\u03ed\1\u03e3\1\u03ed\1\u03e1\1\u03ec\1\u03e4\1\u03ed\1\uffff"+
            "\1\u03e8\1\u03ed\26\uffff\1\u03ef\51\uffff\1\u03df",
            "\1\u03f6\12\uffff\1\u0402\6\uffff\1\u03f2\50\uffff\1\u03fb"+
            "\1\u03fe\1\u0401\1\u03f0\1\uffff\1\u03f6\2\u0401\1\u03fa\1\uffff"+
            "\1\u03f1\1\u03f8\1\u0401\1\u03f4\1\u03f9\1\u03f7\1\u0401\1\u03f5"+
            "\2\u03f9\1\u0401\1\u03fa\1\uffff\1\u03fd\1\u0401\1\u03ff\1\u03f6"+
            "\1\u0401\1\u03f7\1\u0401\1\u03f5\1\u0400\1\u03f8\1\u0401\1\uffff"+
            "\1\u03fc\1\u0401\26\uffff\1\u0403\51\uffff\1\u03f3",
            "\1\u040a\12\uffff\1\u0416\6\uffff\1\u0406\50\uffff\1\u040f"+
            "\1\u0412\1\u0415\1\u0404\1\uffff\1\u040a\2\u0415\1\u040e\1\uffff"+
            "\1\u0405\1\u040c\1\u0415\1\u0408\1\u040d\1\u040b\1\u0415\1\u0409"+
            "\2\u040d\1\u0415\1\u040e\1\uffff\1\u0411\1\u0415\1\u0413\1\u040a"+
            "\1\u0415\1\u040b\1\u0415\1\u0409\1\u0414\1\u040c\1\u0415\1\uffff"+
            "\1\u0410\1\u0415\26\uffff\1\u0417\51\uffff\1\u0407",
            "\1\u0419\14\uffff\1\u0418\6\uffff\1\u041c\100\uffff\1\u041d"+
            "\54\uffff\1\u041b\2\uffff\1\u041b\7\uffff\1\u041a\2\uffff\1"+
            "\u041b",
            "\1\u0421\15\uffff\1\u041e\42\uffff\1\u0420\11\uffff\1\u0422"+
            "\2\uffff\1\u042c\6\uffff\1\u042b\4\uffff\1\u0423\1\uffff\1\u0427"+
            "\4\uffff\1\u0424\5\uffff\1\u0423\1\uffff\1\u0427\3\uffff\1\u0425"+
            "\16\uffff\1\u042d\22\uffff\1\u0426\6\uffff\1\u042e\1\u042f\1"+
            "\u0430\22\uffff\1\u0428\7\uffff\1\u0433\6\uffff\1\u0434\1\uffff"+
            "\1\u0432\3\uffff\1\u0431\2\uffff\1\u042a\2\uffff\1\u042a\7\uffff"+
            "\1\u0429\1\uffff\1\u0431\1\u042a\4\uffff\1\u041f",
            "\1\u0436\12\uffff\1\u0442\57\uffff\1\u043b\1\u043e\1\u0441"+
            "\2\uffff\1\u0436\2\u0441\1\u043a\2\uffff\1\u0438\1\u0441\2\u0439"+
            "\1\u0437\1\u0441\1\u0435\2\u0439\1\u0441\1\u043a\1\uffff\1\u043d"+
            "\1\u0441\1\u043f\1\u0436\1\u0441\1\u0437\1\u0441\1\u0435\1\u0440"+
            "\1\u0438\1\u0441\1\uffff\1\u043c\1\u0441\26\uffff\1\u0443",
            "\1\u0445\12\uffff\1\u0451\57\uffff\1\u044a\1\u044d\1\u0450"+
            "\2\uffff\1\u0445\2\u0450\1\u0449\2\uffff\1\u0447\1\u0450\2\u0448"+
            "\1\u0446\1\u0450\1\u0444\2\u0448\1\u0450\1\u0449\1\uffff\1\u044c"+
            "\1\u0450\1\u044e\1\u0445\1\u0450\1\u0446\1\u0450\1\u0444\1\u044f"+
            "\1\u0447\1\u0450\1\uffff\1\u044b\1\u0450\26\uffff\1\u0452",
            "\1\u0454\12\uffff\1\u0460\57\uffff\1\u0459\1\u045c\1\u045f"+
            "\2\uffff\1\u0454\2\u045f\1\u0458\2\uffff\1\u0456\1\u045f\2\u0457"+
            "\1\u0455\1\u045f\1\u0453\2\u0457\1\u045f\1\u0458\1\uffff\1\u045b"+
            "\1\u045f\1\u045d\1\u0454\1\u045f\1\u0455\1\u045f\1\u0453\1\u045e"+
            "\1\u0456\1\u045f\1\uffff\1\u045a\1\u045f\26\uffff\1\u0461",
            "\1\u0463\12\uffff\1\u046f\57\uffff\1\u0468\1\u046b\1\u046e"+
            "\2\uffff\1\u0463\2\u046e\1\u0467\2\uffff\1\u0465\1\u046e\2\u0466"+
            "\1\u0464\1\u046e\1\u0462\2\u0466\1\u046e\1\u0467\1\uffff\1\u046a"+
            "\1\u046e\1\u046c\1\u0463\1\u046e\1\u0464\1\u046e\1\u0462\1\u046d"+
            "\1\u0465\1\u046e\1\uffff\1\u0469\1\u046e\26\uffff\1\u0470",
            "\1\u0472\12\uffff\1\u047e\57\uffff\1\u0477\1\u047a\1\u047d"+
            "\2\uffff\1\u0472\2\u047d\1\u0476\2\uffff\1\u0474\1\u047d\2\u0475"+
            "\1\u0473\1\u047d\1\u0471\2\u0475\1\u047d\1\u0476\1\uffff\1\u0479"+
            "\1\u047d\1\u047b\1\u0472\1\u047d\1\u0473\1\u047d\1\u0471\1\u047c"+
            "\1\u0474\1\u047d\1\uffff\1\u0478\1\u047d\26\uffff\1\u047f",
            "\1\u0480",
            "\1\u0481",
            "\1\u0482",
            "\1\12\12\uffff\1\4\6\uffff\1\u0484\36\uffff\1\12\13\uffff\1"+
            "\4\3\uffff\2\4\2\uffff\1\u0483\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u0485\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\u0496\11\uffff\1\u048f\2\uffff\1\u048e\6\uffff\1\u0499\4"+
            "\uffff\1\u0490\1\uffff\1\u0494\4\uffff\1\u0491\5\uffff\1\u0490"+
            "\1\uffff\1\u0494\3\uffff\1\u0492\16\uffff\1\u049a\22\uffff\1"+
            "\u0493\6\uffff\1\u049b\1\u049c\1\u049d\32\uffff\1\u04a0\6\uffff"+
            "\1\u04a1\1\uffff\1\u049f\3\uffff\1\u049e\2\uffff\1\u0498\2\uffff"+
            "\1\u0498\7\uffff\1\u0497\1\uffff\1\u049e\1\u0498\4\uffff\1\u0495",
            "\1\u04a8\14\uffff\1\u04ac\6\uffff\1\u04ab\4\uffff\1\u04a2\1"+
            "\uffff\1\u04a6\4\uffff\1\u04a3\5\uffff\1\u04a2\1\uffff\1\u04a6"+
            "\3\uffff\1\u04a4\16\uffff\1\u04ad\22\uffff\1\u04a5\6\uffff\1"+
            "\u04ae\1\u04af\1\u04b0\32\uffff\1\u04b3\6\uffff\1\u04b4\1\uffff"+
            "\1\u04b2\3\uffff\1\u04b1\2\uffff\1\u04aa\2\uffff\1\u04aa\7\uffff"+
            "\1\u04a9\1\uffff\1\u04b1\1\u04aa\4\uffff\1\u04a7",
            "\1\u04ba\14\uffff\1\u04be\6\uffff\1\u04bd\6\uffff\1\u04b8\4"+
            "\uffff\1\u04b5\7\uffff\1\u04b8\3\uffff\1\u04b6\16\uffff\1\u04bf"+
            "\22\uffff\1\u04b7\6\uffff\1\u04c0\1\u04c1\1\u04c2\32\uffff\1"+
            "\u04c5\6\uffff\1\u04c6\1\uffff\1\u04c4\3\uffff\1\u04c3\2\uffff"+
            "\1\u04bc\2\uffff\1\u04bc\7\uffff\1\u04bb\1\uffff\1\u04c3\1\u04bc"+
            "\4\uffff\1\u04b9",
            "\1\u04cb\14\uffff\1\u04cf\6\uffff\1\u04ce\6\uffff\1\u04c9\14"+
            "\uffff\1\u04c9\3\uffff\1\u04c7\16\uffff\1\u04d0\22\uffff\1\u04c8"+
            "\6\uffff\1\u04d1\1\u04d2\1\u04d3\32\uffff\1\u04d6\6\uffff\1"+
            "\u04d7\1\uffff\1\u04d5\3\uffff\1\u04d4\2\uffff\1\u04cd\2\uffff"+
            "\1\u04cd\7\uffff\1\u04cc\1\uffff\1\u04d4\1\u04cd\4\uffff\1\u04ca",
            "\1\u04db\14\uffff\1\u04df\6\uffff\1\u04de\6\uffff\1\u04d9\14"+
            "\uffff\1\u04d9\22\uffff\1\u04e0\22\uffff\1\u04d8\6\uffff\1\u04e1"+
            "\1\u04e2\1\u04e3\32\uffff\1\u04e6\6\uffff\1\u04e7\1\uffff\1"+
            "\u04e5\3\uffff\1\u04e4\2\uffff\1\u04dd\2\uffff\1\u04dd\7\uffff"+
            "\1\u04dc\1\uffff\1\u04e4\1\u04dd\4\uffff\1\u04da",
            "\1\u04ea\14\uffff\1\u04ee\6\uffff\1\u04ed\6\uffff\1\u04e8\14"+
            "\uffff\1\u04e8\22\uffff\1\u04ef\31\uffff\1\u04f0\1\u04f1\1\u04f2"+
            "\32\uffff\1\u04f5\6\uffff\1\u04f6\1\uffff\1\u04f4\3\uffff\1"+
            "\u04f3\2\uffff\1\u04ec\2\uffff\1\u04ec\7\uffff\1\u04eb\1\uffff"+
            "\1\u04f3\1\u04ec\4\uffff\1\u04e9",
            "\1\u04f8\14\uffff\1\u04fc\6\uffff\1\u04fb\46\uffff\1\u04fd"+
            "\31\uffff\1\u04fe\1\u04ff\1\u0500\32\uffff\1\u0503\6\uffff\1"+
            "\u0504\1\uffff\1\u0502\3\uffff\1\u0501\2\uffff\1\u04fa\2\uffff"+
            "\1\u04fa\7\uffff\1\u04f9\1\uffff\1\u0501\1\u04fa\4\uffff\1\u04f7",
            "\1\u0505\u0081\uffff\1\u0507\2\uffff\1\u0507\7\uffff\1\u0506"+
            "\2\uffff\1\u0507",
            "\1\u050e\21\uffff\1\u050a\50\uffff\1\u0513\1\u0516\1\u0519"+
            "\1\u0508\1\uffff\1\u050e\2\u0519\1\u0512\1\uffff\1\u0509\1\u0510"+
            "\1\u0519\1\u050c\1\u0511\1\u050f\1\u0519\1\u050d\2\u0511\1\u0519"+
            "\1\u0512\1\uffff\1\u0515\1\u0519\1\u0517\1\u050e\1\u0519\1\u050f"+
            "\1\u0519\1\u050d\1\u0518\1\u0510\1\u0519\1\uffff\1\u0514\1\u0519"+
            "\30\uffff\1\u051a\47\uffff\1\u050b",
            "\1\u0521\21\uffff\1\u051d\50\uffff\1\u0526\1\u0529\1\u052c"+
            "\1\u051b\1\uffff\1\u0521\2\u052c\1\u0525\1\uffff\1\u051c\1\u0523"+
            "\1\u052c\1\u051f\1\u0524\1\u0522\1\u052c\1\u0520\2\u0524\1\u052c"+
            "\1\u0525\1\uffff\1\u0528\1\u052c\1\u052a\1\u0521\1\u052c\1\u0522"+
            "\1\u052c\1\u0520\1\u052b\1\u0523\1\u052c\1\uffff\1\u0527\1\u052c"+
            "\30\uffff\1\u052d\47\uffff\1\u051e",
            "\1\u0534\21\uffff\1\u0530\50\uffff\1\u0539\1\u053c\1\u053f"+
            "\1\u052e\1\uffff\1\u0534\2\u053f\1\u0538\1\uffff\1\u052f\1\u0536"+
            "\1\u053f\1\u0532\1\u0537\1\u0535\1\u053f\1\u0533\2\u0537\1\u053f"+
            "\1\u0538\1\uffff\1\u053b\1\u053f\1\u053d\1\u0534\1\u053f\1\u0535"+
            "\1\u053f\1\u0533\1\u053e\1\u0536\1\u053f\1\uffff\1\u053a\1\u053f"+
            "\30\uffff\1\u0540\47\uffff\1\u0531",
            "\1\u0542\14\uffff\1\u0541\6\uffff\1\u0545\100\uffff\1\u0546"+
            "\54\uffff\1\u0544\2\uffff\1\u0544\7\uffff\1\u0543\2\uffff\1"+
            "\u0544",
            "\1\u054a\15\uffff\1\u0547\42\uffff\1\u0549\11\uffff\1\u054b"+
            "\2\uffff\1\u0555\6\uffff\1\u0554\4\uffff\1\u054c\1\uffff\1\u0550"+
            "\4\uffff\1\u054d\5\uffff\1\u054c\1\uffff\1\u0550\3\uffff\1\u054e"+
            "\16\uffff\1\u0556\22\uffff\1\u054f\6\uffff\1\u0557\1\u0558\1"+
            "\u0559\22\uffff\1\u0551\7\uffff\1\u055c\6\uffff\1\u055d\1\uffff"+
            "\1\u055b\3\uffff\1\u055a\2\uffff\1\u0553\2\uffff\1\u0553\7\uffff"+
            "\1\u0552\1\uffff\1\u055a\1\u0553\4\uffff\1\u0548",
            "\1\u055f\72\uffff\1\u0564\1\u0567\1\u056a\2\uffff\1\u055f\2"+
            "\u056a\1\u0563\2\uffff\1\u0561\1\u056a\2\u0562\1\u0560\1\u056a"+
            "\1\u055e\2\u0562\1\u056a\1\u0563\1\uffff\1\u0566\1\u056a\1\u0568"+
            "\1\u055f\1\u056a\1\u0560\1\u056a\1\u055e\1\u0569\1\u0561\1\u056a"+
            "\1\uffff\1\u0565\1\u056a\30\uffff\1\u056b",
            "\1\u056d\72\uffff\1\u0572\1\u0575\1\u0578\2\uffff\1\u056d\2"+
            "\u0578\1\u0571\2\uffff\1\u056f\1\u0578\2\u0570\1\u056e\1\u0578"+
            "\1\u056c\2\u0570\1\u0578\1\u0571\1\uffff\1\u0574\1\u0578\1\u0576"+
            "\1\u056d\1\u0578\1\u056e\1\u0578\1\u056c\1\u0577\1\u056f\1\u0578"+
            "\1\uffff\1\u0573\1\u0578\30\uffff\1\u0579",
            "\1\u057b\72\uffff\1\u0580\1\u0583\1\u0586\2\uffff\1\u057b\2"+
            "\u0586\1\u057f\2\uffff\1\u057d\1\u0586\2\u057e\1\u057c\1\u0586"+
            "\1\u057a\2\u057e\1\u0586\1\u057f\1\uffff\1\u0582\1\u0586\1\u0584"+
            "\1\u057b\1\u0586\1\u057c\1\u0586\1\u057a\1\u0585\1\u057d\1\u0586"+
            "\1\uffff\1\u0581\1\u0586\30\uffff\1\u0587",
            "\1\u0589\72\uffff\1\u058e\1\u0591\1\u0594\2\uffff\1\u0589\2"+
            "\u0594\1\u058d\2\uffff\1\u058b\1\u0594\2\u058c\1\u058a\1\u0594"+
            "\1\u0588\2\u058c\1\u0594\1\u058d\1\uffff\1\u0590\1\u0594\1\u0592"+
            "\1\u0589\1\u0594\1\u058a\1\u0594\1\u0588\1\u0593\1\u058b\1\u0594"+
            "\1\uffff\1\u058f\1\u0594\30\uffff\1\u0595",
            "\1\u0597\72\uffff\1\u059c\1\u059f\1\u05a2\2\uffff\1\u0597\2"+
            "\u05a2\1\u059b\2\uffff\1\u0599\1\u05a2\2\u059a\1\u0598\1\u05a2"+
            "\1\u0596\2\u059a\1\u05a2\1\u059b\1\uffff\1\u059e\1\u05a2\1\u05a0"+
            "\1\u0597\1\u05a2\1\u0598\1\u05a2\1\u0596\1\u05a1\1\u0599\1\u05a2"+
            "\1\uffff\1\u059d\1\u05a2\30\uffff\1\u05a3",
            "\1\u05a4",
            "\1\u05a5",
            "\1\u05a6",
            "\1\12\12\uffff\1\4\6\uffff\1\u05a7\36\uffff\1\12\13\uffff\1"+
            "\4\3\uffff\2\4\2\uffff\1\u05ae\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u05a8\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u05b9\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05b2\2\uffff\2\4\2\uffff\1\u05b3\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u05ba\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u05c5\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05be\2\uffff\2\4\2\uffff\1\u05bf\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u05c6\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u05d1\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05ca\2\uffff\2\4\2\uffff\1\u05cb\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u05d2\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u05dd\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05d6\2\uffff\2\4\2\uffff\1\u05d7\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u05de\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u05e9\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05e2\2\uffff\2\4\2\uffff\1\u05e3\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u05ea\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u05f5\36\uffff\1\12\13\uffff\1"+
            "\4\1\u05ee\2\uffff\2\4\2\uffff\1\u05ef\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u05f6\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\u0602\11\uffff\1\u05fb\2\uffff\1\u05fa\6\uffff\1\u0605\4"+
            "\uffff\1\u05fc\1\uffff\1\u0600\4\uffff\1\u05fd\5\uffff\1\u05fc"+
            "\1\uffff\1\u0600\3\uffff\1\u05fe\16\uffff\1\u0606\22\uffff\1"+
            "\u05ff\6\uffff\1\u0607\1\u0608\1\u0609\32\uffff\1\u060c\6\uffff"+
            "\1\u060d\1\uffff\1\u060b\3\uffff\1\u060a\2\uffff\1\u0604\2\uffff"+
            "\1\u0604\7\uffff\1\u0603\1\uffff\1\u060a\1\u0604\4\uffff\1\u0601",
            "\1\u0614\14\uffff\1\u0618\6\uffff\1\u0617\4\uffff\1\u060e\1"+
            "\uffff\1\u0612\4\uffff\1\u060f\5\uffff\1\u060e\1\uffff\1\u0612"+
            "\3\uffff\1\u0610\16\uffff\1\u0619\22\uffff\1\u0611\6\uffff\1"+
            "\u061a\1\u061b\1\u061c\32\uffff\1\u061f\6\uffff\1\u0620\1\uffff"+
            "\1\u061e\3\uffff\1\u061d\2\uffff\1\u0616\2\uffff\1\u0616\7\uffff"+
            "\1\u0615\1\uffff\1\u061d\1\u0616\4\uffff\1\u0613",
            "\1\u0626\14\uffff\1\u062a\6\uffff\1\u0629\6\uffff\1\u0624\4"+
            "\uffff\1\u0621\7\uffff\1\u0624\3\uffff\1\u0622\16\uffff\1\u062b"+
            "\22\uffff\1\u0623\6\uffff\1\u062c\1\u062d\1\u062e\32\uffff\1"+
            "\u0631\6\uffff\1\u0632\1\uffff\1\u0630\3\uffff\1\u062f\2\uffff"+
            "\1\u0628\2\uffff\1\u0628\7\uffff\1\u0627\1\uffff\1\u062f\1\u0628"+
            "\4\uffff\1\u0625",
            "\1\u0637\14\uffff\1\u063b\6\uffff\1\u063a\6\uffff\1\u0635\14"+
            "\uffff\1\u0635\3\uffff\1\u0633\16\uffff\1\u063c\22\uffff\1\u0634"+
            "\6\uffff\1\u063d\1\u063e\1\u063f\32\uffff\1\u0642\6\uffff\1"+
            "\u0643\1\uffff\1\u0641\3\uffff\1\u0640\2\uffff\1\u0639\2\uffff"+
            "\1\u0639\7\uffff\1\u0638\1\uffff\1\u0640\1\u0639\4\uffff\1\u0636",
            "\1\u0647\14\uffff\1\u064b\6\uffff\1\u064a\6\uffff\1\u0645\14"+
            "\uffff\1\u0645\22\uffff\1\u064c\22\uffff\1\u0644\6\uffff\1\u064d"+
            "\1\u064e\1\u064f\32\uffff\1\u0652\6\uffff\1\u0653\1\uffff\1"+
            "\u0651\3\uffff\1\u0650\2\uffff\1\u0649\2\uffff\1\u0649\7\uffff"+
            "\1\u0648\1\uffff\1\u0650\1\u0649\4\uffff\1\u0646",
            "\1\u0656\14\uffff\1\u065a\6\uffff\1\u0659\6\uffff\1\u0654\14"+
            "\uffff\1\u0654\22\uffff\1\u065b\31\uffff\1\u065c\1\u065d\1\u065e"+
            "\32\uffff\1\u0661\6\uffff\1\u0662\1\uffff\1\u0660\3\uffff\1"+
            "\u065f\2\uffff\1\u0658\2\uffff\1\u0658\7\uffff\1\u0657\1\uffff"+
            "\1\u065f\1\u0658\4\uffff\1\u0655",
            "\1\u0664\14\uffff\1\u0668\6\uffff\1\u0667\46\uffff\1\u0669"+
            "\31\uffff\1\u066a\1\u066b\1\u066c\32\uffff\1\u066f\6\uffff\1"+
            "\u0670\1\uffff\1\u066e\3\uffff\1\u066d\2\uffff\1\u0666\2\uffff"+
            "\1\u0666\7\uffff\1\u0665\1\uffff\1\u066d\1\u0666\4\uffff\1\u0663",
            "\1\u0671\u0081\uffff\1\u0673\2\uffff\1\u0673\7\uffff\1\u0672"+
            "\2\uffff\1\u0673",
            "\1\u067a\12\uffff\1\u0686\6\uffff\1\u0676\50\uffff\1\u067f"+
            "\1\u0682\1\u0685\1\u0674\1\uffff\1\u067a\2\u0685\1\u067e\1\uffff"+
            "\1\u0675\1\u067c\1\u0685\1\u0678\1\u067d\1\u067b\1\u0685\1\u0679"+
            "\2\u067d\1\u0685\1\u067e\1\uffff\1\u0681\1\u0685\1\u0683\1\u067a"+
            "\1\u0685\1\u067b\1\u0685\1\u0679\1\u0684\1\u067c\1\u0685\1\uffff"+
            "\1\u0680\1\u0685\26\uffff\1\u0687\51\uffff\1\u0677",
            "\1\u068e\12\uffff\1\u069a\6\uffff\1\u068a\50\uffff\1\u0693"+
            "\1\u0696\1\u0699\1\u0688\1\uffff\1\u068e\2\u0699\1\u0692\1\uffff"+
            "\1\u0689\1\u0690\1\u0699\1\u068c\1\u0691\1\u068f\1\u0699\1\u068d"+
            "\2\u0691\1\u0699\1\u0692\1\uffff\1\u0695\1\u0699\1\u0697\1\u068e"+
            "\1\u0699\1\u068f\1\u0699\1\u068d\1\u0698\1\u0690\1\u0699\1\uffff"+
            "\1\u0694\1\u0699\26\uffff\1\u069b\51\uffff\1\u068b",
            "\1\u06a2\12\uffff\1\u06ae\6\uffff\1\u069e\50\uffff\1\u06a7"+
            "\1\u06aa\1\u06ad\1\u069c\1\uffff\1\u06a2\2\u06ad\1\u06a6\1\uffff"+
            "\1\u069d\1\u06a4\1\u06ad\1\u06a0\1\u06a5\1\u06a3\1\u06ad\1\u06a1"+
            "\2\u06a5\1\u06ad\1\u06a6\1\uffff\1\u06a9\1\u06ad\1\u06ab\1\u06a2"+
            "\1\u06ad\1\u06a3\1\u06ad\1\u06a1\1\u06ac\1\u06a4\1\u06ad\1\uffff"+
            "\1\u06a8\1\u06ad\26\uffff\1\u06af\51\uffff\1\u069f",
            "\1\u06b1\14\uffff\1\u06b0\6\uffff\1\u06b4\100\uffff\1\u06b5"+
            "\54\uffff\1\u06b3\2\uffff\1\u06b3\7\uffff\1\u06b2\2\uffff\1"+
            "\u06b3",
            "\1\u06b9\15\uffff\1\u06b6\42\uffff\1\u06b8\11\uffff\1\u06ba"+
            "\2\uffff\1\u06c4\6\uffff\1\u06c3\4\uffff\1\u06bb\1\uffff\1\u06bf"+
            "\4\uffff\1\u06bc\5\uffff\1\u06bb\1\uffff\1\u06bf\3\uffff\1\u06bd"+
            "\16\uffff\1\u06c5\22\uffff\1\u06be\6\uffff\1\u06c6\1\u06c7\1"+
            "\u06c8\22\uffff\1\u06c0\7\uffff\1\u06cb\6\uffff\1\u06cc\1\uffff"+
            "\1\u06ca\3\uffff\1\u06c9\2\uffff\1\u06c2\2\uffff\1\u06c2\7\uffff"+
            "\1\u06c1\1\uffff\1\u06c9\1\u06c2\4\uffff\1\u06b7",
            "\1\u06ce\12\uffff\1\u06da\57\uffff\1\u06d3\1\u06d6\1\u06d9"+
            "\2\uffff\1\u06ce\2\u06d9\1\u06d2\2\uffff\1\u06d0\1\u06d9\2\u06d1"+
            "\1\u06cf\1\u06d9\1\u06cd\2\u06d1\1\u06d9\1\u06d2\1\uffff\1\u06d5"+
            "\1\u06d9\1\u06d7\1\u06ce\1\u06d9\1\u06cf\1\u06d9\1\u06cd\1\u06d8"+
            "\1\u06d0\1\u06d9\1\uffff\1\u06d4\1\u06d9\26\uffff\1\u06db",
            "\1\u06dd\12\uffff\1\u06e9\57\uffff\1\u06e2\1\u06e5\1\u06e8"+
            "\2\uffff\1\u06dd\2\u06e8\1\u06e1\2\uffff\1\u06df\1\u06e8\2\u06e0"+
            "\1\u06de\1\u06e8\1\u06dc\2\u06e0\1\u06e8\1\u06e1\1\uffff\1\u06e4"+
            "\1\u06e8\1\u06e6\1\u06dd\1\u06e8\1\u06de\1\u06e8\1\u06dc\1\u06e7"+
            "\1\u06df\1\u06e8\1\uffff\1\u06e3\1\u06e8\26\uffff\1\u06ea",
            "\1\u06ec\12\uffff\1\u06f8\57\uffff\1\u06f1\1\u06f4\1\u06f7"+
            "\2\uffff\1\u06ec\2\u06f7\1\u06f0\2\uffff\1\u06ee\1\u06f7\2\u06ef"+
            "\1\u06ed\1\u06f7\1\u06eb\2\u06ef\1\u06f7\1\u06f0\1\uffff\1\u06f3"+
            "\1\u06f7\1\u06f5\1\u06ec\1\u06f7\1\u06ed\1\u06f7\1\u06eb\1\u06f6"+
            "\1\u06ee\1\u06f7\1\uffff\1\u06f2\1\u06f7\26\uffff\1\u06f9",
            "\1\u06fb\12\uffff\1\u0707\57\uffff\1\u0700\1\u0703\1\u0706"+
            "\2\uffff\1\u06fb\2\u0706\1\u06ff\2\uffff\1\u06fd\1\u0706\2\u06fe"+
            "\1\u06fc\1\u0706\1\u06fa\2\u06fe\1\u0706\1\u06ff\1\uffff\1\u0702"+
            "\1\u0706\1\u0704\1\u06fb\1\u0706\1\u06fc\1\u0706\1\u06fa\1\u0705"+
            "\1\u06fd\1\u0706\1\uffff\1\u0701\1\u0706\26\uffff\1\u0708",
            "\1\u070a\12\uffff\1\u0716\57\uffff\1\u070f\1\u0712\1\u0715"+
            "\2\uffff\1\u070a\2\u0715\1\u070e\2\uffff\1\u070c\1\u0715\2\u070d"+
            "\1\u070b\1\u0715\1\u0709\2\u070d\1\u0715\1\u070e\1\uffff\1\u0711"+
            "\1\u0715\1\u0713\1\u070a\1\u0715\1\u070b\1\u0715\1\u0709\1\u0714"+
            "\1\u070c\1\u0715\1\uffff\1\u0710\1\u0715\26\uffff\1\u0717",
            "\1\u0718",
            "\1\u0719",
            "\1\u071a",
            "\1\12\12\uffff\1\4\6\uffff\1\u071c\36\uffff\1\12\13\uffff\1"+
            "\4\3\uffff\2\4\2\uffff\1\u071b\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u071d\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\u072e\11\uffff\1\u0727\2\uffff\1\u0726\6\uffff\1\u0731\4"+
            "\uffff\1\u0728\1\uffff\1\u072c\4\uffff\1\u0729\5\uffff\1\u0728"+
            "\1\uffff\1\u072c\3\uffff\1\u072a\16\uffff\1\u0732\22\uffff\1"+
            "\u072b\6\uffff\1\u0733\1\u0734\1\u0735\32\uffff\1\u0738\6\uffff"+
            "\1\u0739\1\uffff\1\u0737\3\uffff\1\u0736\2\uffff\1\u0730\2\uffff"+
            "\1\u0730\7\uffff\1\u072f\1\uffff\1\u0736\1\u0730\4\uffff\1\u072d",
            "\1\u0740\14\uffff\1\u0744\6\uffff\1\u0743\4\uffff\1\u073a\1"+
            "\uffff\1\u073e\4\uffff\1\u073b\5\uffff\1\u073a\1\uffff\1\u073e"+
            "\3\uffff\1\u073c\16\uffff\1\u0745\22\uffff\1\u073d\6\uffff\1"+
            "\u0746\1\u0747\1\u0748\32\uffff\1\u074b\6\uffff\1\u074c\1\uffff"+
            "\1\u074a\3\uffff\1\u0749\2\uffff\1\u0742\2\uffff\1\u0742\7\uffff"+
            "\1\u0741\1\uffff\1\u0749\1\u0742\4\uffff\1\u073f",
            "\1\u0752\14\uffff\1\u0756\6\uffff\1\u0755\6\uffff\1\u0750\4"+
            "\uffff\1\u074d\7\uffff\1\u0750\3\uffff\1\u074e\16\uffff\1\u0757"+
            "\22\uffff\1\u074f\6\uffff\1\u0758\1\u0759\1\u075a\32\uffff\1"+
            "\u075d\6\uffff\1\u075e\1\uffff\1\u075c\3\uffff\1\u075b\2\uffff"+
            "\1\u0754\2\uffff\1\u0754\7\uffff\1\u0753\1\uffff\1\u075b\1\u0754"+
            "\4\uffff\1\u0751",
            "\1\u0763\14\uffff\1\u0767\6\uffff\1\u0766\6\uffff\1\u0761\14"+
            "\uffff\1\u0761\3\uffff\1\u075f\16\uffff\1\u0768\22\uffff\1\u0760"+
            "\6\uffff\1\u0769\1\u076a\1\u076b\32\uffff\1\u076e\6\uffff\1"+
            "\u076f\1\uffff\1\u076d\3\uffff\1\u076c\2\uffff\1\u0765\2\uffff"+
            "\1\u0765\7\uffff\1\u0764\1\uffff\1\u076c\1\u0765\4\uffff\1\u0762",
            "\1\u0773\14\uffff\1\u0777\6\uffff\1\u0776\6\uffff\1\u0771\14"+
            "\uffff\1\u0771\22\uffff\1\u0778\22\uffff\1\u0770\6\uffff\1\u0779"+
            "\1\u077a\1\u077b\32\uffff\1\u077e\6\uffff\1\u077f\1\uffff\1"+
            "\u077d\3\uffff\1\u077c\2\uffff\1\u0775\2\uffff\1\u0775\7\uffff"+
            "\1\u0774\1\uffff\1\u077c\1\u0775\4\uffff\1\u0772",
            "\1\u0782\14\uffff\1\u0786\6\uffff\1\u0785\6\uffff\1\u0780\14"+
            "\uffff\1\u0780\22\uffff\1\u0787\31\uffff\1\u0788\1\u0789\1\u078a"+
            "\32\uffff\1\u078d\6\uffff\1\u078e\1\uffff\1\u078c\3\uffff\1"+
            "\u078b\2\uffff\1\u0784\2\uffff\1\u0784\7\uffff\1\u0783\1\uffff"+
            "\1\u078b\1\u0784\4\uffff\1\u0781",
            "\1\u0790\14\uffff\1\u0794\6\uffff\1\u0793\46\uffff\1\u0795"+
            "\31\uffff\1\u0796\1\u0797\1\u0798\32\uffff\1\u079b\6\uffff\1"+
            "\u079c\1\uffff\1\u079a\3\uffff\1\u0799\2\uffff\1\u0792\2\uffff"+
            "\1\u0792\7\uffff\1\u0791\1\uffff\1\u0799\1\u0792\4\uffff\1\u078f",
            "\1\u079d\u0081\uffff\1\u079f\2\uffff\1\u079f\7\uffff\1\u079e"+
            "\2\uffff\1\u079f",
            "\1\u07a6\21\uffff\1\u07a2\50\uffff\1\u07ab\1\u07ae\1\u07b1"+
            "\1\u07a0\1\uffff\1\u07a6\2\u07b1\1\u07aa\1\uffff\1\u07a1\1\u07a8"+
            "\1\u07b1\1\u07a4\1\u07a9\1\u07a7\1\u07b1\1\u07a5\2\u07a9\1\u07b1"+
            "\1\u07aa\1\uffff\1\u07ad\1\u07b1\1\u07af\1\u07a6\1\u07b1\1\u07a7"+
            "\1\u07b1\1\u07a5\1\u07b0\1\u07a8\1\u07b1\1\uffff\1\u07ac\1\u07b1"+
            "\30\uffff\1\u07b2\47\uffff\1\u07a3",
            "\1\u07b9\21\uffff\1\u07b5\50\uffff\1\u07be\1\u07c1\1\u07c4"+
            "\1\u07b3\1\uffff\1\u07b9\2\u07c4\1\u07bd\1\uffff\1\u07b4\1\u07bb"+
            "\1\u07c4\1\u07b7\1\u07bc\1\u07ba\1\u07c4\1\u07b8\2\u07bc\1\u07c4"+
            "\1\u07bd\1\uffff\1\u07c0\1\u07c4\1\u07c2\1\u07b9\1\u07c4\1\u07ba"+
            "\1\u07c4\1\u07b8\1\u07c3\1\u07bb\1\u07c4\1\uffff\1\u07bf\1\u07c4"+
            "\30\uffff\1\u07c5\47\uffff\1\u07b6",
            "\1\u07cc\21\uffff\1\u07c8\50\uffff\1\u07d1\1\u07d4\1\u07d7"+
            "\1\u07c6\1\uffff\1\u07cc\2\u07d7\1\u07d0\1\uffff\1\u07c7\1\u07ce"+
            "\1\u07d7\1\u07ca\1\u07cf\1\u07cd\1\u07d7\1\u07cb\2\u07cf\1\u07d7"+
            "\1\u07d0\1\uffff\1\u07d3\1\u07d7\1\u07d5\1\u07cc\1\u07d7\1\u07cd"+
            "\1\u07d7\1\u07cb\1\u07d6\1\u07ce\1\u07d7\1\uffff\1\u07d2\1\u07d7"+
            "\30\uffff\1\u07d8\47\uffff\1\u07c9",
            "\1\u07da\14\uffff\1\u07d9\6\uffff\1\u07dd\100\uffff\1\u07de"+
            "\54\uffff\1\u07dc\2\uffff\1\u07dc\7\uffff\1\u07db\2\uffff\1"+
            "\u07dc",
            "\1\u07e2\15\uffff\1\u07df\42\uffff\1\u07e1\11\uffff\1\u07e3"+
            "\2\uffff\1\u07ed\6\uffff\1\u07ec\4\uffff\1\u07e4\1\uffff\1\u07e8"+
            "\4\uffff\1\u07e5\5\uffff\1\u07e4\1\uffff\1\u07e8\3\uffff\1\u07e6"+
            "\16\uffff\1\u07ee\22\uffff\1\u07e7\6\uffff\1\u07ef\1\u07f0\1"+
            "\u07f1\22\uffff\1\u07e9\7\uffff\1\u07f4\6\uffff\1\u07f5\1\uffff"+
            "\1\u07f3\3\uffff\1\u07f2\2\uffff\1\u07eb\2\uffff\1\u07eb\7\uffff"+
            "\1\u07ea\1\uffff\1\u07f2\1\u07eb\4\uffff\1\u07e0",
            "\1\u07f7\72\uffff\1\u07fc\1\u07ff\1\u0802\2\uffff\1\u07f7\2"+
            "\u0802\1\u07fb\2\uffff\1\u07f9\1\u0802\2\u07fa\1\u07f8\1\u0802"+
            "\1\u07f6\2\u07fa\1\u0802\1\u07fb\1\uffff\1\u07fe\1\u0802\1\u0800"+
            "\1\u07f7\1\u0802\1\u07f8\1\u0802\1\u07f6\1\u0801\1\u07f9\1\u0802"+
            "\1\uffff\1\u07fd\1\u0802\30\uffff\1\u0803",
            "\1\u0805\72\uffff\1\u080a\1\u080d\1\u0810\2\uffff\1\u0805\2"+
            "\u0810\1\u0809\2\uffff\1\u0807\1\u0810\2\u0808\1\u0806\1\u0810"+
            "\1\u0804\2\u0808\1\u0810\1\u0809\1\uffff\1\u080c\1\u0810\1\u080e"+
            "\1\u0805\1\u0810\1\u0806\1\u0810\1\u0804\1\u080f\1\u0807\1\u0810"+
            "\1\uffff\1\u080b\1\u0810\30\uffff\1\u0811",
            "\1\u0813\72\uffff\1\u0818\1\u081b\1\u081e\2\uffff\1\u0813\2"+
            "\u081e\1\u0817\2\uffff\1\u0815\1\u081e\2\u0816\1\u0814\1\u081e"+
            "\1\u0812\2\u0816\1\u081e\1\u0817\1\uffff\1\u081a\1\u081e\1\u081c"+
            "\1\u0813\1\u081e\1\u0814\1\u081e\1\u0812\1\u081d\1\u0815\1\u081e"+
            "\1\uffff\1\u0819\1\u081e\30\uffff\1\u081f",
            "\1\u0821\72\uffff\1\u0826\1\u0829\1\u082c\2\uffff\1\u0821\2"+
            "\u082c\1\u0825\2\uffff\1\u0823\1\u082c\2\u0824\1\u0822\1\u082c"+
            "\1\u0820\2\u0824\1\u082c\1\u0825\1\uffff\1\u0828\1\u082c\1\u082a"+
            "\1\u0821\1\u082c\1\u0822\1\u082c\1\u0820\1\u082b\1\u0823\1\u082c"+
            "\1\uffff\1\u0827\1\u082c\30\uffff\1\u082d",
            "\1\u082f\72\uffff\1\u0834\1\u0837\1\u083a\2\uffff\1\u082f\2"+
            "\u083a\1\u0833\2\uffff\1\u0831\1\u083a\2\u0832\1\u0830\1\u083a"+
            "\1\u082e\2\u0832\1\u083a\1\u0833\1\uffff\1\u0836\1\u083a\1\u0838"+
            "\1\u082f\1\u083a\1\u0830\1\u083a\1\u082e\1\u0839\1\u0831\1\u083a"+
            "\1\uffff\1\u0835\1\u083a\30\uffff\1\u083b",
            "\1\u083c",
            "\1\u083d",
            "\1\u083e",
            "\1\12\12\uffff\1\4\6\uffff\1\u083f\36\uffff\1\12\13\uffff\1"+
            "\4\3\uffff\2\4\2\uffff\1\u0846\1\uffff\1\4\3\uffff\1\4\3\uffff"+
            "\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u0840\22\uffff\1\12"+
            "\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u0851\36\uffff\1\12\13\uffff\1"+
            "\4\1\u084a\2\uffff\2\4\2\uffff\1\u084b\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u0852\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u085d\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0856\2\uffff\2\4\2\uffff\1\u0857\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u085e\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u0869\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0862\2\uffff\2\4\2\uffff\1\u0863\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u086a\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u0875\36\uffff\1\12\13\uffff\1"+
            "\4\1\u086e\2\uffff\2\4\2\uffff\1\u086f\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u0876\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u0881\36\uffff\1\12\13\uffff\1"+
            "\4\1\u087a\2\uffff\2\4\2\uffff\1\u087b\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u0882\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "\1\12\12\uffff\1\4\6\uffff\1\u088d\36\uffff\1\12\13\uffff\1"+
            "\4\1\u0886\2\uffff\2\4\2\uffff\1\u0887\1\uffff\1\4\3\uffff\1"+
            "\4\3\uffff\1\4\3\uffff\1\4\2\uffff\1\4\1\uffff\1\4\3\uffff\1"+
            "\4\2\uffff\1\4\33\uffff\1\4\37\uffff\1\12\4\uffff\1\u088e\22"+
            "\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff\1\12\4\uffff\1"+
            "\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "493:32: ( static_type_wrapper )?";
        }
    }
    static final String DFA78_eotS =
        "\153\uffff";
    static final String DFA78_eofS =
        "\56\uffff\1\1\74\uffff";
    static final String DFA78_minS =
        "\1\6\14\uffff\1\6\12\uffff\1\6\25\uffff\1\6\74\uffff";
    static final String DFA78_maxS =
        "\1\u00cc\14\uffff\1\u00cc\12\uffff\1\u00a6\25\uffff\1\u00cc\74\uffff";
    static final String DFA78_acceptS =
        "\1\uffff\1\1\53\uffff\1\2\75\uffff";
    static final String DFA78_specialS =
        "\153\uffff}>";
    static final String[] DFA78_transitionS = {
            "\1\1\60\uffff\1\1\11\uffff\1\1\2\uffff\1\15\6\uffff\1\1\4\uffff"+
            "\1\1\1\uffff\1\1\4\uffff\1\1\5\uffff\1\1\1\uffff\1\1\3\uffff"+
            "\1\1\16\uffff\1\1\22\uffff\1\1\6\uffff\3\1\32\uffff\1\1\6\uffff"+
            "\1\1\1\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\7\uffff"+
            "\1\1\1\uffff\2\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\15\uffff\1\1\42\uffff\1\30\11\uffff\1\1\2\uffff\1\1\6"+
            "\uffff\1\1\4\uffff\1\1\1\uffff\1\1\4\uffff\1\1\5\uffff\1\1\1"+
            "\uffff\1\1\3\uffff\1\1\16\uffff\1\1\22\uffff\1\1\6\uffff\3\1"+
            "\1\uffff\1\55\20\uffff\1\1\7\uffff\1\1\6\uffff\1\1\1\uffff\1"+
            "\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\7\uffff\1\1\1\uffff\2"+
            "\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\21\uffff\1\1\50\uffff\4\1\1\uffff\4\1\1\uffff\14\1\1\uffff"+
            "\13\1\1\uffff\2\1\26\uffff\1\56\51\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\11\uffff\2\1\6\uffff\1\1\36\uffff\1\1\11\uffff\4\1\1\uffff"+
            "\4\1\1\55\33\1\14\uffff\1\1\11\uffff\3\1\2\uffff\1\1\3\uffff"+
            "\1\1\6\uffff\3\1\27\uffff\1\1\2\uffff\1\1\6\uffff\1\1\1\uffff"+
            "\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\7\uffff\1\1\1\uffff"+
            "\2\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA78_eot = DFA.unpackEncodedString(DFA78_eotS);
    static final short[] DFA78_eof = DFA.unpackEncodedString(DFA78_eofS);
    static final char[] DFA78_min = DFA.unpackEncodedStringToUnsignedChars(DFA78_minS);
    static final char[] DFA78_max = DFA.unpackEncodedStringToUnsignedChars(DFA78_maxS);
    static final short[] DFA78_accept = DFA.unpackEncodedString(DFA78_acceptS);
    static final short[] DFA78_special = DFA.unpackEncodedString(DFA78_specialS);
    static final short[][] DFA78_transition;

    static {
        int numStates = DFA78_transitionS.length;
        DFA78_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA78_transition[i] = DFA.unpackEncodedString(DFA78_transitionS[i]);
        }
    }

    class DFA78 extends DFA {

        public DFA78(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 78;
            this.eot = DFA78_eot;
            this.eof = DFA78_eof;
            this.min = DFA78_min;
            this.max = DFA78_max;
            this.accept = DFA78_accept;
            this.special = DFA78_special;
            this.transition = DFA78_transition;
        }
        public String getDescription() {
            return "586:1: expression : ( classical_expr_wrp | struct_init );";
        }
    }
    static final String DFA79_eotS =
        "\u043d\uffff";
    static final String DFA79_eofS =
        "\u043d\uffff";
    static final String DFA79_minS =
        "\1\20\6\uffff\1\6\10\67\3\uffff\1\67\1\6\5\uffff\3\104\1\6\7\67"+
        "\3\uffff\1\67\5\uffff\3\104\6\67\3\uffff\1\67\1\6\5\uffff\3\104"+
        "\5\67\3\uffff\1\67\1\6\5\uffff\3\104\4\67\3\uffff\1\67\1\6\5\uffff"+
        "\3\104\3\67\3\uffff\1\67\1\6\5\uffff\3\104\2\67\3\uffff\1\67\1\6"+
        "\5\uffff\3\104\1\67\3\uffff\1\67\1\6\5\uffff\3\104\3\uffff\1\24"+
        "\3\30\3\67\2\6\7\67\3\6\1\67\6\6\3\104\3\67\u0386\uffff";
    static final String DFA79_maxS =
        "\1\u00cc\6\uffff\10\u00cc\1\u00c7\3\uffff\1\u00c7\1\u00cc\5\uffff"+
        "\3\104\7\u00cc\1\u00c7\3\uffff\1\u00c7\5\uffff\3\104\5\u00cc\1\u00c7"+
        "\3\uffff\1\u00c7\1\u00cc\5\uffff\3\104\4\u00cc\1\u00c7\3\uffff\1"+
        "\u00c7\1\u00cc\5\uffff\3\104\3\u00cc\1\u00c7\3\uffff\1\u00c7\1\u00cc"+
        "\5\uffff\3\104\2\u00cc\1\u00c7\3\uffff\1\u00c7\1\u00cc\5\uffff\3"+
        "\104\1\u00cc\1\u00c7\3\uffff\1\u00c7\1\u00cc\5\uffff\3\104\1\u00c7"+
        "\3\uffff\1\u00c7\1\u00cc\5\uffff\3\104\3\uffff\1\u00cc\5\u00c7\2"+
        "\u00cc\1\u00a6\7\u00cc\1\174\2\u00a6\1\u00c7\1\u00cc\5\174\3\104"+
        "\3\u00c7\u0386\uffff";
    static final String DFA79_acceptS =
        "\1\uffff\1\2\16\uffff\3\1\2\uffff\5\1\13\uffff\3\1\1\uffff\5\1\11"+
        "\uffff\3\1\2\uffff\5\1\10\uffff\3\1\2\uffff\5\1\7\uffff\3\1\2\uffff"+
        "\5\1\6\uffff\3\1\2\uffff\5\1\5\uffff\3\1\2\uffff\5\1\4\uffff\3\1"+
        "\2\uffff\5\1\3\uffff\3\1\40\uffff\u0386\1";
    static final String DFA79_specialS =
        "\u043d\uffff}>";
    static final String[] DFA79_transitionS = {
            "\1\1\1\7\45\uffff\1\1\111\uffff\1\1\37\uffff\1\1\27\uffff\1"+
            "\1\2\uffff\1\1\7\uffff\1\1\2\uffff\1\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\60\uffff\1\20\11\uffff\1\11\2\uffff\1\24\6\uffff\1\23"+
            "\4\uffff\1\12\1\uffff\1\16\4\uffff\1\13\5\uffff\1\12\1\uffff"+
            "\1\16\3\uffff\1\14\16\uffff\1\25\22\uffff\1\15\6\uffff\1\26"+
            "\1\27\1\30\32\uffff\1\33\6\uffff\1\34\1\uffff\1\32\3\uffff\1"+
            "\31\2\uffff\1\22\2\uffff\1\22\7\uffff\1\21\1\uffff\1\31\1\22"+
            "\4\uffff\1\17",
            "\1\45\11\uffff\1\36\2\uffff\1\35\6\uffff\1\50\4\uffff\1\37"+
            "\1\uffff\1\43\4\uffff\1\40\5\uffff\1\37\1\uffff\1\43\3\uffff"+
            "\1\41\16\uffff\1\51\22\uffff\1\42\6\uffff\1\52\1\53\1\54\32"+
            "\uffff\1\57\6\uffff\1\60\1\uffff\1\56\3\uffff\1\55\2\uffff\1"+
            "\47\2\uffff\1\47\7\uffff\1\46\1\uffff\1\55\1\47\4\uffff\1\44",
            "\1\67\14\uffff\1\73\6\uffff\1\72\4\uffff\1\61\1\uffff\1\65"+
            "\4\uffff\1\62\5\uffff\1\61\1\uffff\1\65\3\uffff\1\63\16\uffff"+
            "\1\74\22\uffff\1\64\6\uffff\1\75\1\76\1\77\32\uffff\1\102\6"+
            "\uffff\1\103\1\uffff\1\101\3\uffff\1\100\2\uffff\1\71\2\uffff"+
            "\1\71\7\uffff\1\70\1\uffff\1\100\1\71\4\uffff\1\66",
            "\1\111\14\uffff\1\115\6\uffff\1\114\6\uffff\1\107\4\uffff\1"+
            "\104\7\uffff\1\107\3\uffff\1\105\16\uffff\1\116\22\uffff\1\106"+
            "\6\uffff\1\117\1\120\1\121\32\uffff\1\124\6\uffff\1\125\1\uffff"+
            "\1\123\3\uffff\1\122\2\uffff\1\113\2\uffff\1\113\7\uffff\1\112"+
            "\1\uffff\1\122\1\113\4\uffff\1\110",
            "\1\132\14\uffff\1\136\6\uffff\1\135\6\uffff\1\130\14\uffff"+
            "\1\130\3\uffff\1\126\16\uffff\1\137\22\uffff\1\127\6\uffff\1"+
            "\140\1\141\1\142\32\uffff\1\145\6\uffff\1\146\1\uffff\1\144"+
            "\3\uffff\1\143\2\uffff\1\134\2\uffff\1\134\7\uffff\1\133\1\uffff"+
            "\1\143\1\134\4\uffff\1\131",
            "\1\152\14\uffff\1\156\6\uffff\1\155\6\uffff\1\150\14\uffff"+
            "\1\150\22\uffff\1\157\22\uffff\1\147\6\uffff\1\160\1\161\1\162"+
            "\32\uffff\1\165\6\uffff\1\166\1\uffff\1\164\3\uffff\1\163\2"+
            "\uffff\1\154\2\uffff\1\154\7\uffff\1\153\1\uffff\1\163\1\154"+
            "\4\uffff\1\151",
            "\1\171\14\uffff\1\175\6\uffff\1\174\6\uffff\1\167\14\uffff"+
            "\1\167\22\uffff\1\176\31\uffff\1\177\1\u0080\1\u0081\32\uffff"+
            "\1\u0084\6\uffff\1\u0085\1\uffff\1\u0083\3\uffff\1\u0082\2\uffff"+
            "\1\173\2\uffff\1\173\7\uffff\1\172\1\uffff\1\u0082\1\173\4\uffff"+
            "\1\170",
            "\1\u0087\14\uffff\1\u008b\6\uffff\1\u008a\46\uffff\1\u008c"+
            "\31\uffff\1\u008d\1\u008e\1\u008f\32\uffff\1\u0092\6\uffff\1"+
            "\u0093\1\uffff\1\u0091\3\uffff\1\u0090\2\uffff\1\u0089\2\uffff"+
            "\1\u0089\7\uffff\1\u0088\1\uffff\1\u0090\1\u0089\4\uffff\1\u0086",
            "\1\u0094\u0081\uffff\1\u0096\2\uffff\1\u0096\7\uffff\1\u0095"+
            "\2\uffff\1\u0096",
            "",
            "",
            "",
            "\1\u0098\14\uffff\1\u0097\6\uffff\1\u009b\100\uffff\1\u009c"+
            "\54\uffff\1\u009a\2\uffff\1\u009a\7\uffff\1\u0099\2\uffff\1"+
            "\u009a",
            "\1\u00a0\15\uffff\1\u009d\42\uffff\1\u009f\11\uffff\1\u00a1"+
            "\2\uffff\1\u00ab\6\uffff\1\u00aa\4\uffff\1\u00a2\1\uffff\1\u00a6"+
            "\4\uffff\1\u00a3\5\uffff\1\u00a2\1\uffff\1\u00a6\3\uffff\1\u00a4"+
            "\16\uffff\1\u00ac\22\uffff\1\u00a5\6\uffff\1\u00ad\1\u00ae\1"+
            "\u00af\22\uffff\1\u00a7\7\uffff\1\u00b2\6\uffff\1\u00b3\1\uffff"+
            "\1\u00b1\3\uffff\1\u00b0\2\uffff\1\u00a9\2\uffff\1\u00a9\7\uffff"+
            "\1\u00a8\1\uffff\1\u00b0\1\u00a9\4\uffff\1\u009e",
            "",
            "",
            "",
            "",
            "",
            "\1\u00b4",
            "\1\u00b5",
            "\1\u00b6",
            "\1\u00ba\15\uffff\1\u00b7\42\uffff\1\u00b9\11\uffff\1\u00bb"+
            "\2\uffff\1\u00c5\6\uffff\1\u00c4\4\uffff\1\u00bc\1\uffff\1\u00c0"+
            "\4\uffff\1\u00bd\5\uffff\1\u00bc\1\uffff\1\u00c0\3\uffff\1\u00be"+
            "\16\uffff\1\u00c6\22\uffff\1\u00bf\6\uffff\1\u00c7\1\u00c8\1"+
            "\u00c9\22\uffff\1\u00c1\7\uffff\1\u00cc\6\uffff\1\u00cd\1\uffff"+
            "\1\u00cb\3\uffff\1\u00ca\2\uffff\1\u00c3\2\uffff\1\u00c3\7\uffff"+
            "\1\u00c2\1\uffff\1\u00ca\1\u00c3\4\uffff\1\u00b8",
            "\1\u00d4\14\uffff\1\u00d8\6\uffff\1\u00d7\4\uffff\1\u00ce\1"+
            "\uffff\1\u00d2\4\uffff\1\u00cf\5\uffff\1\u00ce\1\uffff\1\u00d2"+
            "\3\uffff\1\u00d0\16\uffff\1\u00d9\22\uffff\1\u00d1\6\uffff\1"+
            "\u00da\1\u00db\1\u00dc\32\uffff\1\u00df\6\uffff\1\u00e0\1\uffff"+
            "\1\u00de\3\uffff\1\u00dd\2\uffff\1\u00d6\2\uffff\1\u00d6\7\uffff"+
            "\1\u00d5\1\uffff\1\u00dd\1\u00d6\4\uffff\1\u00d3",
            "\1\u00e6\14\uffff\1\u00ea\6\uffff\1\u00e9\6\uffff\1\u00e4\4"+
            "\uffff\1\u00e1\7\uffff\1\u00e4\3\uffff\1\u00e2\16\uffff\1\u00eb"+
            "\22\uffff\1\u00e3\6\uffff\1\u00ec\1\u00ed\1\u00ee\32\uffff\1"+
            "\u00f1\6\uffff\1\u00f2\1\uffff\1\u00f0\3\uffff\1\u00ef\2\uffff"+
            "\1\u00e8\2\uffff\1\u00e8\7\uffff\1\u00e7\1\uffff\1\u00ef\1\u00e8"+
            "\4\uffff\1\u00e5",
            "\1\u00f7\14\uffff\1\u00fb\6\uffff\1\u00fa\6\uffff\1\u00f5\14"+
            "\uffff\1\u00f5\3\uffff\1\u00f3\16\uffff\1\u00fc\22\uffff\1\u00f4"+
            "\6\uffff\1\u00fd\1\u00fe\1\u00ff\32\uffff\1\u0102\6\uffff\1"+
            "\u0103\1\uffff\1\u0101\3\uffff\1\u0100\2\uffff\1\u00f9\2\uffff"+
            "\1\u00f9\7\uffff\1\u00f8\1\uffff\1\u0100\1\u00f9\4\uffff\1\u00f6",
            "\1\u0107\14\uffff\1\u010b\6\uffff\1\u010a\6\uffff\1\u0105\14"+
            "\uffff\1\u0105\22\uffff\1\u010c\22\uffff\1\u0104\6\uffff\1\u010d"+
            "\1\u010e\1\u010f\32\uffff\1\u0112\6\uffff\1\u0113\1\uffff\1"+
            "\u0111\3\uffff\1\u0110\2\uffff\1\u0109\2\uffff\1\u0109\7\uffff"+
            "\1\u0108\1\uffff\1\u0110\1\u0109\4\uffff\1\u0106",
            "\1\u0116\14\uffff\1\u011a\6\uffff\1\u0119\6\uffff\1\u0114\14"+
            "\uffff\1\u0114\22\uffff\1\u011b\31\uffff\1\u011c\1\u011d\1\u011e"+
            "\32\uffff\1\u0121\6\uffff\1\u0122\1\uffff\1\u0120\3\uffff\1"+
            "\u011f\2\uffff\1\u0118\2\uffff\1\u0118\7\uffff\1\u0117\1\uffff"+
            "\1\u011f\1\u0118\4\uffff\1\u0115",
            "\1\u0124\14\uffff\1\u0128\6\uffff\1\u0127\46\uffff\1\u0129"+
            "\31\uffff\1\u012a\1\u012b\1\u012c\32\uffff\1\u012f\6\uffff\1"+
            "\u0130\1\uffff\1\u012e\3\uffff\1\u012d\2\uffff\1\u0126\2\uffff"+
            "\1\u0126\7\uffff\1\u0125\1\uffff\1\u012d\1\u0126\4\uffff\1\u0123",
            "\1\u0131\u0081\uffff\1\u0133\2\uffff\1\u0133\7\uffff\1\u0132"+
            "\2\uffff\1\u0133",
            "",
            "",
            "",
            "\1\u0135\14\uffff\1\u0134\6\uffff\1\u0138\100\uffff\1\u0139"+
            "\54\uffff\1\u0137\2\uffff\1\u0137\7\uffff\1\u0136\2\uffff\1"+
            "\u0137",
            "",
            "",
            "",
            "",
            "",
            "\1\u013a",
            "\1\u013b",
            "\1\u013c",
            "\1\u0142\14\uffff\1\u0146\6\uffff\1\u0145\6\uffff\1\u0140\4"+
            "\uffff\1\u013d\7\uffff\1\u0140\3\uffff\1\u013e\16\uffff\1\u0147"+
            "\22\uffff\1\u013f\6\uffff\1\u0148\1\u0149\1\u014a\32\uffff\1"+
            "\u014d\6\uffff\1\u014e\1\uffff\1\u014c\3\uffff\1\u014b\2\uffff"+
            "\1\u0144\2\uffff\1\u0144\7\uffff\1\u0143\1\uffff\1\u014b\1\u0144"+
            "\4\uffff\1\u0141",
            "\1\u0153\14\uffff\1\u0157\6\uffff\1\u0156\6\uffff\1\u0151\14"+
            "\uffff\1\u0151\3\uffff\1\u014f\16\uffff\1\u0158\22\uffff\1\u0150"+
            "\6\uffff\1\u0159\1\u015a\1\u015b\32\uffff\1\u015e\6\uffff\1"+
            "\u015f\1\uffff\1\u015d\3\uffff\1\u015c\2\uffff\1\u0155\2\uffff"+
            "\1\u0155\7\uffff\1\u0154\1\uffff\1\u015c\1\u0155\4\uffff\1\u0152",
            "\1\u0163\14\uffff\1\u0167\6\uffff\1\u0166\6\uffff\1\u0161\14"+
            "\uffff\1\u0161\22\uffff\1\u0168\22\uffff\1\u0160\6\uffff\1\u0169"+
            "\1\u016a\1\u016b\32\uffff\1\u016e\6\uffff\1\u016f\1\uffff\1"+
            "\u016d\3\uffff\1\u016c\2\uffff\1\u0165\2\uffff\1\u0165\7\uffff"+
            "\1\u0164\1\uffff\1\u016c\1\u0165\4\uffff\1\u0162",
            "\1\u0172\14\uffff\1\u0176\6\uffff\1\u0175\6\uffff\1\u0170\14"+
            "\uffff\1\u0170\22\uffff\1\u0177\31\uffff\1\u0178\1\u0179\1\u017a"+
            "\32\uffff\1\u017d\6\uffff\1\u017e\1\uffff\1\u017c\3\uffff\1"+
            "\u017b\2\uffff\1\u0174\2\uffff\1\u0174\7\uffff\1\u0173\1\uffff"+
            "\1\u017b\1\u0174\4\uffff\1\u0171",
            "\1\u0180\14\uffff\1\u0184\6\uffff\1\u0183\46\uffff\1\u0185"+
            "\31\uffff\1\u0186\1\u0187\1\u0188\32\uffff\1\u018b\6\uffff\1"+
            "\u018c\1\uffff\1\u018a\3\uffff\1\u0189\2\uffff\1\u0182\2\uffff"+
            "\1\u0182\7\uffff\1\u0181\1\uffff\1\u0189\1\u0182\4\uffff\1\u017f",
            "\1\u018d\u0081\uffff\1\u018f\2\uffff\1\u018f\7\uffff\1\u018e"+
            "\2\uffff\1\u018f",
            "",
            "",
            "",
            "\1\u0191\14\uffff\1\u0190\6\uffff\1\u0194\100\uffff\1\u0195"+
            "\54\uffff\1\u0193\2\uffff\1\u0193\7\uffff\1\u0192\2\uffff\1"+
            "\u0193",
            "\1\u0199\15\uffff\1\u0196\42\uffff\1\u0198\11\uffff\1\u019a"+
            "\2\uffff\1\u01a4\6\uffff\1\u01a3\4\uffff\1\u019b\1\uffff\1\u019f"+
            "\4\uffff\1\u019c\5\uffff\1\u019b\1\uffff\1\u019f\3\uffff\1\u019d"+
            "\16\uffff\1\u01a5\22\uffff\1\u019e\6\uffff\1\u01a6\1\u01a7\1"+
            "\u01a8\22\uffff\1\u01a0\7\uffff\1\u01ab\6\uffff\1\u01ac\1\uffff"+
            "\1\u01aa\3\uffff\1\u01a9\2\uffff\1\u01a2\2\uffff\1\u01a2\7\uffff"+
            "\1\u01a1\1\uffff\1\u01a9\1\u01a2\4\uffff\1\u0197",
            "",
            "",
            "",
            "",
            "",
            "\1\u01ad",
            "\1\u01ae",
            "\1\u01af",
            "\1\u01b4\14\uffff\1\u01b8\6\uffff\1\u01b7\6\uffff\1\u01b2\14"+
            "\uffff\1\u01b2\3\uffff\1\u01b0\16\uffff\1\u01b9\22\uffff\1\u01b1"+
            "\6\uffff\1\u01ba\1\u01bb\1\u01bc\32\uffff\1\u01bf\6\uffff\1"+
            "\u01c0\1\uffff\1\u01be\3\uffff\1\u01bd\2\uffff\1\u01b6\2\uffff"+
            "\1\u01b6\7\uffff\1\u01b5\1\uffff\1\u01bd\1\u01b6\4\uffff\1\u01b3",
            "\1\u01c4\14\uffff\1\u01c8\6\uffff\1\u01c7\6\uffff\1\u01c2\14"+
            "\uffff\1\u01c2\22\uffff\1\u01c9\22\uffff\1\u01c1\6\uffff\1\u01ca"+
            "\1\u01cb\1\u01cc\32\uffff\1\u01cf\6\uffff\1\u01d0\1\uffff\1"+
            "\u01ce\3\uffff\1\u01cd\2\uffff\1\u01c6\2\uffff\1\u01c6\7\uffff"+
            "\1\u01c5\1\uffff\1\u01cd\1\u01c6\4\uffff\1\u01c3",
            "\1\u01d3\14\uffff\1\u01d7\6\uffff\1\u01d6\6\uffff\1\u01d1\14"+
            "\uffff\1\u01d1\22\uffff\1\u01d8\31\uffff\1\u01d9\1\u01da\1\u01db"+
            "\32\uffff\1\u01de\6\uffff\1\u01df\1\uffff\1\u01dd\3\uffff\1"+
            "\u01dc\2\uffff\1\u01d5\2\uffff\1\u01d5\7\uffff\1\u01d4\1\uffff"+
            "\1\u01dc\1\u01d5\4\uffff\1\u01d2",
            "\1\u01e1\14\uffff\1\u01e5\6\uffff\1\u01e4\46\uffff\1\u01e6"+
            "\31\uffff\1\u01e7\1\u01e8\1\u01e9\32\uffff\1\u01ec\6\uffff\1"+
            "\u01ed\1\uffff\1\u01eb\3\uffff\1\u01ea\2\uffff\1\u01e3\2\uffff"+
            "\1\u01e3\7\uffff\1\u01e2\1\uffff\1\u01ea\1\u01e3\4\uffff\1\u01e0",
            "\1\u01ee\u0081\uffff\1\u01f0\2\uffff\1\u01f0\7\uffff\1\u01ef"+
            "\2\uffff\1\u01f0",
            "",
            "",
            "",
            "\1\u01f2\14\uffff\1\u01f1\6\uffff\1\u01f5\100\uffff\1\u01f6"+
            "\54\uffff\1\u01f4\2\uffff\1\u01f4\7\uffff\1\u01f3\2\uffff\1"+
            "\u01f4",
            "\1\u01fa\15\uffff\1\u01f7\42\uffff\1\u01f9\11\uffff\1\u01fb"+
            "\2\uffff\1\u0205\6\uffff\1\u0204\4\uffff\1\u01fc\1\uffff\1\u0200"+
            "\4\uffff\1\u01fd\5\uffff\1\u01fc\1\uffff\1\u0200\3\uffff\1\u01fe"+
            "\16\uffff\1\u0206\22\uffff\1\u01ff\6\uffff\1\u0207\1\u0208\1"+
            "\u0209\22\uffff\1\u0201\7\uffff\1\u020c\6\uffff\1\u020d\1\uffff"+
            "\1\u020b\3\uffff\1\u020a\2\uffff\1\u0203\2\uffff\1\u0203\7\uffff"+
            "\1\u0202\1\uffff\1\u020a\1\u0203\4\uffff\1\u01f8",
            "",
            "",
            "",
            "",
            "",
            "\1\u020e",
            "\1\u020f",
            "\1\u0210",
            "\1\u0214\14\uffff\1\u0218\6\uffff\1\u0217\6\uffff\1\u0212\14"+
            "\uffff\1\u0212\22\uffff\1\u0219\22\uffff\1\u0211\6\uffff\1\u021a"+
            "\1\u021b\1\u021c\32\uffff\1\u021f\6\uffff\1\u0220\1\uffff\1"+
            "\u021e\3\uffff\1\u021d\2\uffff\1\u0216\2\uffff\1\u0216\7\uffff"+
            "\1\u0215\1\uffff\1\u021d\1\u0216\4\uffff\1\u0213",
            "\1\u0223\14\uffff\1\u0227\6\uffff\1\u0226\6\uffff\1\u0221\14"+
            "\uffff\1\u0221\22\uffff\1\u0228\31\uffff\1\u0229\1\u022a\1\u022b"+
            "\32\uffff\1\u022e\6\uffff\1\u022f\1\uffff\1\u022d\3\uffff\1"+
            "\u022c\2\uffff\1\u0225\2\uffff\1\u0225\7\uffff\1\u0224\1\uffff"+
            "\1\u022c\1\u0225\4\uffff\1\u0222",
            "\1\u0231\14\uffff\1\u0235\6\uffff\1\u0234\46\uffff\1\u0236"+
            "\31\uffff\1\u0237\1\u0238\1\u0239\32\uffff\1\u023c\6\uffff\1"+
            "\u023d\1\uffff\1\u023b\3\uffff\1\u023a\2\uffff\1\u0233\2\uffff"+
            "\1\u0233\7\uffff\1\u0232\1\uffff\1\u023a\1\u0233\4\uffff\1\u0230",
            "\1\u023e\u0081\uffff\1\u0240\2\uffff\1\u0240\7\uffff\1\u023f"+
            "\2\uffff\1\u0240",
            "",
            "",
            "",
            "\1\u0242\14\uffff\1\u0241\6\uffff\1\u0245\100\uffff\1\u0246"+
            "\54\uffff\1\u0244\2\uffff\1\u0244\7\uffff\1\u0243\2\uffff\1"+
            "\u0244",
            "\1\u024a\15\uffff\1\u0247\42\uffff\1\u0249\11\uffff\1\u024b"+
            "\2\uffff\1\u0255\6\uffff\1\u0254\4\uffff\1\u024c\1\uffff\1\u0250"+
            "\4\uffff\1\u024d\5\uffff\1\u024c\1\uffff\1\u0250\3\uffff\1\u024e"+
            "\16\uffff\1\u0256\22\uffff\1\u024f\6\uffff\1\u0257\1\u0258\1"+
            "\u0259\22\uffff\1\u0251\7\uffff\1\u025c\6\uffff\1\u025d\1\uffff"+
            "\1\u025b\3\uffff\1\u025a\2\uffff\1\u0253\2\uffff\1\u0253\7\uffff"+
            "\1\u0252\1\uffff\1\u025a\1\u0253\4\uffff\1\u0248",
            "",
            "",
            "",
            "",
            "",
            "\1\u025e",
            "\1\u025f",
            "\1\u0260",
            "\1\u0263\14\uffff\1\u0267\6\uffff\1\u0266\6\uffff\1\u0261\14"+
            "\uffff\1\u0261\22\uffff\1\u0268\31\uffff\1\u0269\1\u026a\1\u026b"+
            "\32\uffff\1\u026e\6\uffff\1\u026f\1\uffff\1\u026d\3\uffff\1"+
            "\u026c\2\uffff\1\u0265\2\uffff\1\u0265\7\uffff\1\u0264\1\uffff"+
            "\1\u026c\1\u0265\4\uffff\1\u0262",
            "\1\u0271\14\uffff\1\u0275\6\uffff\1\u0274\46\uffff\1\u0276"+
            "\31\uffff\1\u0277\1\u0278\1\u0279\32\uffff\1\u027c\6\uffff\1"+
            "\u027d\1\uffff\1\u027b\3\uffff\1\u027a\2\uffff\1\u0273\2\uffff"+
            "\1\u0273\7\uffff\1\u0272\1\uffff\1\u027a\1\u0273\4\uffff\1\u0270",
            "\1\u027e\u0081\uffff\1\u0280\2\uffff\1\u0280\7\uffff\1\u027f"+
            "\2\uffff\1\u0280",
            "",
            "",
            "",
            "\1\u0282\14\uffff\1\u0281\6\uffff\1\u0285\100\uffff\1\u0286"+
            "\54\uffff\1\u0284\2\uffff\1\u0284\7\uffff\1\u0283\2\uffff\1"+
            "\u0284",
            "\1\u028a\15\uffff\1\u0287\42\uffff\1\u0289\11\uffff\1\u028b"+
            "\2\uffff\1\u0295\6\uffff\1\u0294\4\uffff\1\u028c\1\uffff\1\u0290"+
            "\4\uffff\1\u028d\5\uffff\1\u028c\1\uffff\1\u0290\3\uffff\1\u028e"+
            "\16\uffff\1\u0296\22\uffff\1\u028f\6\uffff\1\u0297\1\u0298\1"+
            "\u0299\22\uffff\1\u0291\7\uffff\1\u029c\6\uffff\1\u029d\1\uffff"+
            "\1\u029b\3\uffff\1\u029a\2\uffff\1\u0293\2\uffff\1\u0293\7\uffff"+
            "\1\u0292\1\uffff\1\u029a\1\u0293\4\uffff\1\u0288",
            "",
            "",
            "",
            "",
            "",
            "\1\u029e",
            "\1\u029f",
            "\1\u02a0",
            "\1\u02a2\14\uffff\1\u02a6\6\uffff\1\u02a5\46\uffff\1\u02a7"+
            "\31\uffff\1\u02a8\1\u02a9\1\u02aa\32\uffff\1\u02ad\6\uffff\1"+
            "\u02ae\1\uffff\1\u02ac\3\uffff\1\u02ab\2\uffff\1\u02a4\2\uffff"+
            "\1\u02a4\7\uffff\1\u02a3\1\uffff\1\u02ab\1\u02a4\4\uffff\1\u02a1",
            "\1\u02af\u0081\uffff\1\u02b1\2\uffff\1\u02b1\7\uffff\1\u02b0"+
            "\2\uffff\1\u02b1",
            "",
            "",
            "",
            "\1\u02b3\14\uffff\1\u02b2\6\uffff\1\u02b6\100\uffff\1\u02b7"+
            "\54\uffff\1\u02b5\2\uffff\1\u02b5\7\uffff\1\u02b4\2\uffff\1"+
            "\u02b5",
            "\1\u02bb\15\uffff\1\u02b8\42\uffff\1\u02ba\11\uffff\1\u02bc"+
            "\2\uffff\1\u02c6\6\uffff\1\u02c5\4\uffff\1\u02bd\1\uffff\1\u02c1"+
            "\4\uffff\1\u02be\5\uffff\1\u02bd\1\uffff\1\u02c1\3\uffff\1\u02bf"+
            "\16\uffff\1\u02c7\22\uffff\1\u02c0\6\uffff\1\u02c8\1\u02c9\1"+
            "\u02ca\22\uffff\1\u02c2\7\uffff\1\u02cd\6\uffff\1\u02ce\1\uffff"+
            "\1\u02cc\3\uffff\1\u02cb\2\uffff\1\u02c4\2\uffff\1\u02c4\7\uffff"+
            "\1\u02c3\1\uffff\1\u02cb\1\u02c4\4\uffff\1\u02b9",
            "",
            "",
            "",
            "",
            "",
            "\1\u02cf",
            "\1\u02d0",
            "\1\u02d1",
            "\1\u02d2\u0081\uffff\1\u02d4\2\uffff\1\u02d4\7\uffff\1\u02d3"+
            "\2\uffff\1\u02d4",
            "",
            "",
            "",
            "\1\u02d6\14\uffff\1\u02d5\6\uffff\1\u02d9\100\uffff\1\u02da"+
            "\54\uffff\1\u02d8\2\uffff\1\u02d8\7\uffff\1\u02d7\2\uffff\1"+
            "\u02d8",
            "\1\u02de\15\uffff\1\u02db\42\uffff\1\u02dd\11\uffff\1\u02df"+
            "\2\uffff\1\u02e9\6\uffff\1\u02e8\4\uffff\1\u02e0\1\uffff\1\u02e4"+
            "\4\uffff\1\u02e1\5\uffff\1\u02e0\1\uffff\1\u02e4\3\uffff\1\u02e2"+
            "\16\uffff\1\u02ea\22\uffff\1\u02e3\6\uffff\1\u02eb\1\u02ec\1"+
            "\u02ed\22\uffff\1\u02e5\7\uffff\1\u02f0\6\uffff\1\u02f1\1\uffff"+
            "\1\u02ef\3\uffff\1\u02ee\2\uffff\1\u02e7\2\uffff\1\u02e7\7\uffff"+
            "\1\u02e6\1\uffff\1\u02ee\1\u02e7\4\uffff\1\u02dc",
            "",
            "",
            "",
            "",
            "",
            "\1\u02f2",
            "\1\u02f3",
            "\1\u02f4",
            "",
            "",
            "",
            "\1\u02f5\42\uffff\1\u02f7\151\uffff\1\u02f7\52\uffff\1\u02f6",
            "\1\u02fa\36\uffff\1\u02fc\14\uffff\1\u02f8\6\uffff\1\u02f9"+
            "\132\uffff\1\u02fb\22\uffff\1\u02fd\2\uffff\1\u02fd\12\uffff"+
            "\1\u02fd",
            "\1\u0300\36\uffff\1\u0302\14\uffff\1\u02fe\6\uffff\1\u02ff"+
            "\132\uffff\1\u0301\22\uffff\1\u0303\2\uffff\1\u0303\12\uffff"+
            "\1\u0303",
            "\1\u0306\36\uffff\1\u0308\14\uffff\1\u0304\6\uffff\1\u0305"+
            "\132\uffff\1\u0307\22\uffff\1\u0309\2\uffff\1\u0309\12\uffff"+
            "\1\u0309",
            "\1\u030b\14\uffff\1\u030a\6\uffff\1\u030e\100\uffff\1\u030f"+
            "\54\uffff\1\u030d\2\uffff\1\u030d\7\uffff\1\u030c\2\uffff\1"+
            "\u030d",
            "\1\u0310\u0081\uffff\1\u0311\2\uffff\1\u0311\12\uffff\1\u0311",
            "\1\u0313\151\uffff\1\u0313\52\uffff\1\u0312",
            "\1\u0317\60\uffff\1\u0314\23\uffff\1\u0315\2\uffff\1\u0316"+
            "\55\uffff\1\u0318\44\uffff\1\u0319\27\uffff\1\u031b\2\uffff"+
            "\1\u031b\7\uffff\1\u031a\2\uffff\1\u031b\4\uffff\1\u0319",
            "\1\u031e\21\uffff\1\u0321\50\uffff\1\u0329\1\u032c\1\u032f"+
            "\1\u0320\1\uffff\1\u0324\2\u032f\1\u0328\1\uffff\1\u031c\1\u0326"+
            "\1\u032f\1\u031d\1\u0327\1\u0325\1\u032f\1\u0323\2\u0327\1\u032f"+
            "\1\u0328\1\uffff\1\u032b\1\u032f\1\u032d\1\u0324\1\u032f\1\u0325"+
            "\1\u032f\1\u0323\1\u032e\1\u0326\1\u032f\1\uffff\1\u032a\1\u032f"+
            "\26\uffff\1\u031f\51\uffff\1\u0322",
            "\1\u0338\11\uffff\1\u0331\2\uffff\1\u0330\6\uffff\1\u033b\4"+
            "\uffff\1\u0332\1\uffff\1\u0336\4\uffff\1\u0333\5\uffff\1\u0332"+
            "\1\uffff\1\u0336\3\uffff\1\u0334\16\uffff\1\u033c\22\uffff\1"+
            "\u0335\6\uffff\1\u033d\1\u033e\1\u033f\32\uffff\1\u0342\6\uffff"+
            "\1\u0343\1\uffff\1\u0341\3\uffff\1\u0340\2\uffff\1\u033a\2\uffff"+
            "\1\u033a\7\uffff\1\u0339\1\uffff\1\u0340\1\u033a\4\uffff\1\u0337",
            "\1\u034a\14\uffff\1\u034e\6\uffff\1\u034d\4\uffff\1\u0344\1"+
            "\uffff\1\u0348\4\uffff\1\u0345\5\uffff\1\u0344\1\uffff\1\u0348"+
            "\3\uffff\1\u0346\16\uffff\1\u034f\22\uffff\1\u0347\6\uffff\1"+
            "\u0350\1\u0351\1\u0352\32\uffff\1\u0355\6\uffff\1\u0356\1\uffff"+
            "\1\u0354\3\uffff\1\u0353\2\uffff\1\u034c\2\uffff\1\u034c\7\uffff"+
            "\1\u034b\1\uffff\1\u0353\1\u034c\4\uffff\1\u0349",
            "\1\u035c\14\uffff\1\u0360\6\uffff\1\u035f\6\uffff\1\u035a\4"+
            "\uffff\1\u0357\7\uffff\1\u035a\3\uffff\1\u0358\16\uffff\1\u0361"+
            "\22\uffff\1\u0359\6\uffff\1\u0362\1\u0363\1\u0364\32\uffff\1"+
            "\u0367\6\uffff\1\u0368\1\uffff\1\u0366\3\uffff\1\u0365\2\uffff"+
            "\1\u035e\2\uffff\1\u035e\7\uffff\1\u035d\1\uffff\1\u0365\1\u035e"+
            "\4\uffff\1\u035b",
            "\1\u036d\14\uffff\1\u0371\6\uffff\1\u0370\6\uffff\1\u036b\14"+
            "\uffff\1\u036b\3\uffff\1\u0369\16\uffff\1\u0372\22\uffff\1\u036a"+
            "\6\uffff\1\u0373\1\u0374\1\u0375\32\uffff\1\u0378\6\uffff\1"+
            "\u0379\1\uffff\1\u0377\3\uffff\1\u0376\2\uffff\1\u036f\2\uffff"+
            "\1\u036f\7\uffff\1\u036e\1\uffff\1\u0376\1\u036f\4\uffff\1\u036c",
            "\1\u037d\14\uffff\1\u0381\6\uffff\1\u0380\6\uffff\1\u037b\14"+
            "\uffff\1\u037b\22\uffff\1\u0382\22\uffff\1\u037a\6\uffff\1\u0383"+
            "\1\u0384\1\u0385\32\uffff\1\u0388\6\uffff\1\u0389\1\uffff\1"+
            "\u0387\3\uffff\1\u0386\2\uffff\1\u037f\2\uffff\1\u037f\7\uffff"+
            "\1\u037e\1\uffff\1\u0386\1\u037f\4\uffff\1\u037c",
            "\1\u038c\14\uffff\1\u0390\6\uffff\1\u038f\6\uffff\1\u038a\14"+
            "\uffff\1\u038a\22\uffff\1\u0391\31\uffff\1\u0392\1\u0393\1\u0394"+
            "\32\uffff\1\u0397\6\uffff\1\u0398\1\uffff\1\u0396\3\uffff\1"+
            "\u0395\2\uffff\1\u038e\2\uffff\1\u038e\7\uffff\1\u038d\1\uffff"+
            "\1\u0395\1\u038e\4\uffff\1\u038b",
            "\1\u039a\14\uffff\1\u039e\6\uffff\1\u039d\46\uffff\1\u039f"+
            "\31\uffff\1\u03a0\1\u03a1\1\u03a2\32\uffff\1\u03a5\6\uffff\1"+
            "\u03a6\1\uffff\1\u03a4\3\uffff\1\u03a3\2\uffff\1\u039c\2\uffff"+
            "\1\u039c\7\uffff\1\u039b\1\uffff\1\u03a3\1\u039c\4\uffff\1\u0399",
            "\1\u03a9\104\uffff\1\u03a7\2\uffff\1\u03a8\55\uffff\1\u03aa",
            "\1\u03b1\21\uffff\1\u03ad\50\uffff\1\u03b6\1\u03b9\1\u03bc"+
            "\1\u03ab\1\uffff\1\u03b1\2\u03bc\1\u03b5\1\uffff\1\u03ac\1\u03b3"+
            "\1\u03bc\1\u03af\1\u03b4\1\u03b2\1\u03bc\1\u03b0\2\u03b4\1\u03bc"+
            "\1\u03b5\1\uffff\1\u03b8\1\u03bc\1\u03ba\1\u03b1\1\u03bc\1\u03b2"+
            "\1\u03bc\1\u03b0\1\u03bb\1\u03b3\1\u03bc\1\uffff\1\u03b7\1\u03bc"+
            "\26\uffff\1\u03bd\51\uffff\1\u03ae",
            "\1\u03c4\21\uffff\1\u03c0\50\uffff\1\u03c9\1\u03cc\1\u03cf"+
            "\1\u03be\1\uffff\1\u03c4\2\u03cf\1\u03c8\1\uffff\1\u03bf\1\u03c6"+
            "\1\u03cf\1\u03c2\1\u03c7\1\u03c5\1\u03cf\1\u03c3\2\u03c7\1\u03cf"+
            "\1\u03c8\1\uffff\1\u03cb\1\u03cf\1\u03cd\1\u03c4\1\u03cf\1\u03c5"+
            "\1\u03cf\1\u03c3\1\u03ce\1\u03c6\1\u03cf\1\uffff\1\u03ca\1\u03cf"+
            "\26\uffff\1\u03d0\51\uffff\1\u03c1",
            "\1\u03d2\14\uffff\1\u03d1\6\uffff\1\u03d5\100\uffff\1\u03d6"+
            "\54\uffff\1\u03d4\2\uffff\1\u03d4\7\uffff\1\u03d3\2\uffff\1"+
            "\u03d4",
            "\1\u03da\15\uffff\1\u03d7\42\uffff\1\u03d9\11\uffff\1\u03db"+
            "\2\uffff\1\u03e5\6\uffff\1\u03e4\4\uffff\1\u03dc\1\uffff\1\u03e0"+
            "\4\uffff\1\u03dd\5\uffff\1\u03dc\1\uffff\1\u03e0\3\uffff\1\u03de"+
            "\16\uffff\1\u03e6\22\uffff\1\u03df\6\uffff\1\u03e7\1\u03e8\1"+
            "\u03e9\22\uffff\1\u03e1\7\uffff\1\u03ec\6\uffff\1\u03ed\1\uffff"+
            "\1\u03eb\3\uffff\1\u03ea\2\uffff\1\u03e3\2\uffff\1\u03e3\7\uffff"+
            "\1\u03e2\1\uffff\1\u03ea\1\u03e3\4\uffff\1\u03d8",
            "\1\u03ef\72\uffff\1\u03f4\1\u03f7\1\u03fa\2\uffff\1\u03ef\2"+
            "\u03fa\1\u03f3\2\uffff\1\u03f1\1\u03fa\2\u03f2\1\u03f0\1\u03fa"+
            "\1\u03ee\2\u03f2\1\u03fa\1\u03f3\1\uffff\1\u03f6\1\u03fa\1\u03f8"+
            "\1\u03ef\1\u03fa\1\u03f0\1\u03fa\1\u03ee\1\u03f9\1\u03f1\1\u03fa"+
            "\1\uffff\1\u03f5\1\u03fa\26\uffff\1\u03fb",
            "\1\u03fd\72\uffff\1\u0402\1\u0405\1\u0408\2\uffff\1\u03fd\2"+
            "\u0408\1\u0401\2\uffff\1\u03ff\1\u0408\2\u0400\1\u03fe\1\u0408"+
            "\1\u03fc\2\u0400\1\u0408\1\u0401\1\uffff\1\u0404\1\u0408\1\u0406"+
            "\1\u03fd\1\u0408\1\u03fe\1\u0408\1\u03fc\1\u0407\1\u03ff\1\u0408"+
            "\1\uffff\1\u0403\1\u0408\26\uffff\1\u0409",
            "\1\u040b\72\uffff\1\u0410\1\u0413\1\u0416\2\uffff\1\u040b\2"+
            "\u0416\1\u040f\2\uffff\1\u040d\1\u0416\2\u040e\1\u040c\1\u0416"+
            "\1\u040a\2\u040e\1\u0416\1\u040f\1\uffff\1\u0412\1\u0416\1\u0414"+
            "\1\u040b\1\u0416\1\u040c\1\u0416\1\u040a\1\u0415\1\u040d\1\u0416"+
            "\1\uffff\1\u0411\1\u0416\26\uffff\1\u0417",
            "\1\u0419\72\uffff\1\u041e\1\u0421\1\u0424\2\uffff\1\u0419\2"+
            "\u0424\1\u041d\2\uffff\1\u041b\1\u0424\2\u041c\1\u041a\1\u0424"+
            "\1\u0418\2\u041c\1\u0424\1\u041d\1\uffff\1\u0420\1\u0424\1\u0422"+
            "\1\u0419\1\u0424\1\u041a\1\u0424\1\u0418\1\u0423\1\u041b\1\u0424"+
            "\1\uffff\1\u041f\1\u0424\26\uffff\1\u0425",
            "\1\u0427\72\uffff\1\u042c\1\u042f\1\u0432\2\uffff\1\u0427\2"+
            "\u0432\1\u042b\2\uffff\1\u0429\1\u0432\2\u042a\1\u0428\1\u0432"+
            "\1\u0426\2\u042a\1\u0432\1\u042b\1\uffff\1\u042e\1\u0432\1\u0430"+
            "\1\u0427\1\u0432\1\u0428\1\u0432\1\u0426\1\u0431\1\u0429\1\u0432"+
            "\1\uffff\1\u042d\1\u0432\26\uffff\1\u0433",
            "\1\u0434",
            "\1\u0435",
            "\1\u0436",
            "\1\u0437\u0081\uffff\1\u0438\2\uffff\1\u0438\12\uffff\1\u0438",
            "\1\u0439\u0081\uffff\1\u043a\2\uffff\1\u043a\12\uffff\1\u043a",
            "\1\u043b\u0081\uffff\1\u043c\2\uffff\1\u043c\12\uffff\1\u043c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "()* loopback of 595:23: ( COMMA classical_expr_wrp )*";
        }
    }
    static final String DFA82_eotS =
        "\u00a9\uffff";
    static final String DFA82_eofS =
        "\57\uffff\1\2\171\uffff";
    static final String DFA82_minS =
        "\2\6\26\uffff\1\6\1\uffff\2\6\23\uffff\2\6\2\uffff\1\6\20\uffff"+
        "\1\176\7\uffff\1\176\134\uffff";
    static final String DFA82_maxS =
        "\2\u00cc\26\uffff\1\u00a6\1\uffff\1\u00cc\1\174\23\uffff\2\u00cc"+
        "\2\uffff\1\u00cc\20\uffff\1\176\7\uffff\1\176\134\uffff";
    static final String DFA82_acceptS =
        "\2\uffff\1\2\23\uffff\1\3\1\1\63\uffff\1\4\57\uffff\1\2\25\uffff"+
        "\1\2\25\uffff\2\2";
    static final String DFA82_specialS =
        "\u00a9\uffff}>";
    static final String[] DFA82_transitionS = {
            "\1\2\60\uffff\1\2\11\uffff\1\2\2\uffff\1\1\5\uffff\1\26\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\32\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\15\uffff\1\2\42\uffff\1\30\11\uffff\1\2\2\uffff\1\2\6"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\1\uffff\1\27\20\uffff\1\33\7\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff"+
            "\2\2\4\uffff\1\32",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\21\uffff\1\2\50\uffff\3\2\1\63\1\uffff\4\2\1\uffff\1\60"+
            "\13\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\57\51\uffff\1\2",
            "",
            "\1\2\60\uffff\1\2\14\uffff\1\113\6\uffff\1\104\2\uffff\1\2"+
            "\55\uffff\1\2\44\uffff\1\2\27\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\2\uffff\1\2\4\uffff\1\2",
            "\1\2\75\uffff\1\113\6\uffff\1\114\2\uffff\1\2\55\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\11\uffff\2\2\6\uffff\1\2\36\uffff\1\2\11\uffff\4\2\1\uffff"+
            "\4\2\1\27\33\2\14\uffff\1\2\11\uffff\3\2\2\uffff\1\2\3\uffff"+
            "\1\2\6\uffff\3\2\22\uffff\1\2\4\uffff\1\2\2\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\60\uffff\1\2\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\173\6\uffff\1\2\6\uffff\3\2\32"+
            "\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2"+
            "\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "\1\u0091\60\uffff\1\2\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\6\uffff"+
            "\3\2\32\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00a7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00a8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "604:19: ( struct_init | classical_expr_wrp | array_init_wrapper | ( func_pointer2 ( method_call_wrapper )? ) )";
        }
    }
    static final String DFA87_eotS =
        "\162\uffff";
    static final String DFA87_eofS =
        "\162\uffff";
    static final String DFA87_minS =
        "\1\67\1\6\3\uffff\2\6\7\uffff\1\67\6\uffff\1\67\1\6\16\uffff\1\6"+
        "\114\uffff";
    static final String DFA87_maxS =
        "\1\u00cc\1\u00c4\3\uffff\2\u00cc\7\uffff\1\u00cc\6\uffff\1\u00c7"+
        "\1\u00a6\16\uffff\1\u00c4\114\uffff";
    static final String DFA87_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\75\uffff\2\1\22\uffff\1\1\21\uffff\1\1"+
        "\11\uffff";
    static final String DFA87_specialS =
        "\162\uffff}>";
    static final String[] DFA87_transitionS = {
            "\1\1\151\uffff\1\4\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\4",
            "\1\4\12\uffff\1\2\6\uffff\1\2\52\uffff\1\2\1\5\2\uffff\2\2"+
            "\2\uffff\1\6\1\uffff\1\2\3\uffff\1\2\3\uffff\1\2\3\uffff\1\2"+
            "\2\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\33\uffff\1"+
            "\2\44\uffff\1\2\35\uffff\1\2",
            "",
            "",
            "",
            "\1\16\60\uffff\1\26\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3"+
            "\uffff\1\2\16\uffff\1\2\11\uffff\1\2\10\uffff\1\2\6\uffff\3"+
            "\2\22\uffff\1\4\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff"+
            "\1\25",
            "\1\2\60\uffff\1\2\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\45\6\uffff\1\2\6\uffff\3\2\32\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\6\uffff\3\2\22\uffff\1\4\7\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\2\2\4\uffff\1\102",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\23\uffff\1\4\60\uffff\1\4\74\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\2\uffff\1\2",
            "\1\2\12\uffff\1\2\6\uffff\1\2\50\uffff\4\2\1\uffff\4\2\1\uffff"+
            "\1\126\13\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\150\51\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\4\12\uffff\1\150\6\uffff\1\150\52\uffff\1\150\1\4\2\uffff"+
            "\2\150\2\uffff\1\150\1\uffff\1\150\3\uffff\1\150\3\uffff\1\150"+
            "\3\uffff\1\150\2\uffff\1\150\1\uffff\1\150\3\uffff\1\150\2\uffff"+
            "\1\150\33\uffff\1\150\44\uffff\1\150\35\uffff\1\150",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "628:4: ( object_name | func_pointer1 )";
        }
    }
    static final String DFA99_eotS =
        "\u00b8\uffff";
    static final String DFA99_eofS =
        "\u00b8\uffff";
    static final String DFA99_minS =
        "\1\67\1\6\23\uffff\1\67\2\6\7\uffff\1\6\14\uffff\3\6\1\176\1\67"+
        "\1\6\1\uffff\1\6\2\uffff\3\6\21\uffff\1\176\1\67\1\6\153\uffff";
    static final String DFA99_maxS =
        "\2\u00cc\23\uffff\2\u00cc\1\u00a6\7\uffff\1\174\14\uffff\1\u00cc"+
        "\1\174\1\u00a6\1\176\1\67\1\174\1\uffff\1\174\2\uffff\3\u00cc\21"+
        "\uffff\1\176\1\67\1\174\153\uffff";
    static final String DFA99_acceptS =
        "\2\uffff\1\2\57\uffff\1\1\6\uffff\1\1\23\uffff\16\1\20\uffff\11"+
        "\1\25\uffff\1\1\24\uffff\2\1\24\uffff\4\1";
    static final String DFA99_specialS =
        "\u00b8\uffff}>";
    static final String[] DFA99_transitionS = {
            "\1\2\11\uffff\1\2\2\uffff\1\1\6\uffff\1\2\4\uffff\1\2\1\uffff"+
            "\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff"+
            "\1\2\22\uffff\1\2\6\uffff\3\2\32\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff"+
            "\2\2\4\uffff\1\2",
            "\1\2\15\uffff\1\25\42\uffff\1\27\11\uffff\1\2\2\uffff\1\2\6"+
            "\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\22\uffff\1\37\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1"+
            "\26",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\55\151\uffff\1\55\52\uffff\1\54",
            "\1\61\60\uffff\1\56\23\uffff\1\57\2\uffff\1\60\55\uffff\1\62"+
            "\44\uffff\1\63\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\63",
            "\1\70\21\uffff\1\2\50\uffff\4\2\1\uffff\4\2\1\uffff\1\66\2"+
            "\2\1\67\10\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\71\51\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\114\104\uffff\1\112\2\uffff\1\113\55\uffff\1\115",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\121\60\uffff\1\116\23\uffff\1\117\2\uffff\1\120\55\uffff"+
            "\1\122\44\uffff\1\116\52\uffff\1\116",
            "\1\125\104\uffff\1\123\2\uffff\1\124\55\uffff\1\126",
            "\1\131\21\uffff\1\2\50\uffff\4\2\1\uffff\4\2\1\uffff\1\127"+
            "\2\2\1\130\10\2\1\uffff\13\2\1\uffff\2\2\26\uffff\1\132\51\uffff"+
            "\1\2",
            "\1\153",
            "\1\154",
            "\1\156\165\uffff\1\155",
            "",
            "\1\161\104\uffff\1\157\2\uffff\1\160\55\uffff\1\162",
            "",
            "",
            "\1\2\60\uffff\1\2\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\13\uffff\1\163\6\uffff\1\2\6\uffff\3\2\32"+
            "\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2"+
            "\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\60\uffff\1\u0089\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\32\uffff"+
            "\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\u009f\60\uffff\1\2\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2"+
            "\3\uffff\1\2\16\uffff\1\2\11\uffff\1\u009e\10\uffff\1\2\6\uffff"+
            "\3\2\32\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00b4",
            "\1\u00b5",
            "\1\u00b7\165\uffff\1\u00b6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "711:14: ( type_convertion )?";
        }
    }
    static final String DFA109_eotS =
        "\u00a4\uffff";
    static final String DFA109_eofS =
        "\1\2\31\uffff\1\2\26\uffff\1\116\162\uffff";
    static final String DFA109_minS =
        "\2\6\30\uffff\1\6\24\uffff\3\6\162\uffff";
    static final String DFA109_maxS =
        "\2\u00cc\30\uffff\1\u00cc\24\uffff\3\u00cc\162\uffff";
    static final String DFA109_acceptS =
        "\2\uffff\1\2\113\uffff\1\1\1\uffff\1\1\24\uffff\1\1\30\uffff\3\1"+
        "\3\uffff\1\1\11\uffff\1\1\3\uffff\3\1\17\uffff";
    static final String DFA109_specialS =
        "\u00a4\uffff}>";
    static final String[] DFA109_transitionS = {
            "\1\2\11\uffff\2\2\45\uffff\1\2\11\uffff\3\2\2\uffff\4\2\2\uffff"+
            "\2\2\1\1\10\2\1\uffff\13\2\1\uffff\2\2\26\uffff\3\2\2\uffff"+
            "\1\2\37\uffff\1\2\27\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\2",
            "\1\2\60\uffff\1\32\11\uffff\1\2\2\uffff\1\2\6\uffff\1\2\4\uffff"+
            "\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1\uffff\1\2\3\uffff"+
            "\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2\32\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\1\2\1\uffff\2\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\57\11\uffff\1\2\1\60\6\uffff\1\2\36\uffff\1\2\11\uffff\4"+
            "\2\1\uffff\4\2\1\uffff\10\2\1\61\3\2\1\uffff\13\2\1\uffff\2"+
            "\2\26\uffff\3\2\2\uffff\1\2\37\uffff\1\2\4\uffff\1\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\120\12\uffff\1\116\45\uffff\1\2\11\uffff\1\2\2\uffff\1\2"+
            "\6\uffff\1\2\4\uffff\1\2\1\uffff\1\2\1\116\3\uffff\1\2\5\uffff"+
            "\1\2\1\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff"+
            "\3\2\32\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1\2",
            "\1\2\21\uffff\1\2\36\uffff\1\145\11\uffff\1\2\2\uffff\1\2\5"+
            "\uffff\2\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2\5\uffff\1\2\1"+
            "\uffff\1\2\3\uffff\1\2\16\uffff\1\2\22\uffff\1\2\6\uffff\3\2"+
            "\22\uffff\1\2\7\uffff\1\2\6\uffff\1\2\1\uffff\1\2\3\uffff\1"+
            "\2\2\uffff\1\2\2\uffff\1\2\7\uffff\1\2\1\uffff\2\2\4\uffff\1"+
            "\2",
            "\1\177\11\uffff\1\u008e\1\116\45\uffff\1\u008e\11\uffff\1\u0084"+
            "\2\116\1\2\1\uffff\1\u0093\3\116\1\uffff\1\2\4\116\1\u0080\1"+
            "\116\1\176\4\116\1\2\3\116\1\u0093\1\116\1\u0080\1\116\1\176"+
            "\3\116\1\2\2\116\14\uffff\1\2\11\uffff\1\116\2\u008e\2\uffff"+
            "\1\116\3\uffff\1\2\6\uffff\3\2\22\uffff\1\u0093\7\uffff\1\2"+
            "\6\uffff\1\2\1\uffff\1\2\3\uffff\1\2\2\uffff\1\u0093\2\uffff"+
            "\1\u0093\7\uffff\1\u0092\1\uffff\1\2\1\u0093\4\uffff\1\u0094",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA109_eot = DFA.unpackEncodedString(DFA109_eotS);
    static final short[] DFA109_eof = DFA.unpackEncodedString(DFA109_eofS);
    static final char[] DFA109_min = DFA.unpackEncodedStringToUnsignedChars(DFA109_minS);
    static final char[] DFA109_max = DFA.unpackEncodedStringToUnsignedChars(DFA109_maxS);
    static final short[] DFA109_accept = DFA.unpackEncodedString(DFA109_acceptS);
    static final short[] DFA109_special = DFA.unpackEncodedString(DFA109_specialS);
    static final short[][] DFA109_transition;

    static {
        int numStates = DFA109_transitionS.length;
        DFA109_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA109_transition[i] = DFA.unpackEncodedString(DFA109_transitionS[i]);
        }
    }

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = DFA109_eot;
            this.eof = DFA109_eof;
            this.min = DFA109_min;
            this.max = DFA109_max;
            this.accept = DFA109_accept;
            this.special = DFA109_special;
            this.transition = DFA109_transition;
        }
        public String getDescription() {
            return "739:29: ( generic )?";
        }
    }
    static final String DFA113_eotS =
        "\u01c3\uffff";
    static final String DFA113_eofS =
        "\43\uffff\1\4\23\uffff\1\4\127\uffff\1\4\u0133\uffff";
    static final String DFA113_minS =
        "\1\6\1\uffff\2\6\24\uffff\1\6\7\uffff\4\6\20\uffff\4\6\20\uffff"+
        "\1\6\25\uffff\1\6\25\uffff\1\6\24\uffff\3\6\3\uffff\2\6\u0132\uffff";
    static final String DFA113_maxS =
        "\1\u00cc\1\uffff\1\u00cc\1\u00a6\24\uffff\1\u00a6\7\uffff\4\u00cc"+
        "\20\uffff\4\u00cc\20\uffff\1\u00a6\25\uffff\1\u00a6\25\uffff\1\u00cc"+
        "\24\uffff\3\u00cc\3\uffff\1\u00cc\1\u00c7\u0132\uffff";
    static final String DFA113_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\u008c\uffff\3\1\36\uffff\1\1\25\uffff\1"+
        "\1\25\uffff\1\1\24\uffff\3\1\3\uffff\5\1\36\uffff\3\1\20\uffff\3"+
        "\1\51\uffff\24\1\1\uffff\23\1\2\uffff\22\1\3\uffff\4\1\45\uffff";
    static final String DFA113_specialS =
        "\u01c3\uffff}>";
    static final String[] DFA113_transitionS = {
            "\1\4\15\uffff\1\1\42\uffff\1\3\11\uffff\1\4\2\uffff\1\4\6\uffff"+
            "\1\4\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff"+
            "\1\4\3\uffff\1\4\16\uffff\1\4\22\uffff\1\4\6\uffff\3\4\22\uffff"+
            "\1\1\7\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\2",
            "",
            "\1\1\60\uffff\1\30\23\uffff\1\1\2\uffff\1\1\55\uffff\1\1\44"+
            "\uffff\1\1\27\uffff\1\4\2\uffff\1\4\7\uffff\1\4\2\uffff\1\4"+
            "\4\uffff\1\1",
            "\1\42\21\uffff\1\4\50\uffff\4\4\1\uffff\4\4\1\uffff\1\40\2"+
            "\4\1\41\10\4\1\uffff\13\4\1\uffff\2\4\26\uffff\1\43\51\uffff"+
            "\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\66\21\uffff\1\4\50\uffff\4\4\1\uffff\4\4\1\uffff\1\64\2"+
            "\4\1\65\10\4\1\uffff\13\4\1\uffff\2\4\26\uffff\1\67\51\uffff"+
            "\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\4\60\uffff\1\4\11\uffff\1\4\2\uffff\1\4\6\uffff\1\4\4\uffff"+
            "\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4\3\uffff"+
            "\1\4\16\uffff\1\4\13\uffff\1\110\6\uffff\1\4\6\uffff\3\4\32"+
            "\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2"+
            "\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\4\60\uffff\1\136\11\uffff\1\4\2\uffff\1\4\6\uffff\1\4\4"+
            "\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4\3"+
            "\uffff\1\4\16\uffff\1\4\22\uffff\1\4\6\uffff\3\4\32\uffff\1"+
            "\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1"+
            "\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\164\60\uffff\1\4\11\uffff\1\4\2\uffff\1\4\6\uffff\1\4\4"+
            "\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4\3"+
            "\uffff\1\4\16\uffff\1\4\11\uffff\1\1\10\uffff\1\4\6\uffff\3"+
            "\4\32\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\u0089\11\uffff\2\4\6\uffff\1\4\36\uffff\1\u0091\11\uffff"+
            "\1\u008a\2\4\1\u0093\1\uffff\4\4\1\uffff\1\u0093\4\4\1\u008b"+
            "\1\4\1\u008f\4\4\1\1\5\4\1\u008b\1\4\1\u008f\3\4\1\1\2\4\14"+
            "\uffff\1\u0093\11\uffff\3\4\2\uffff\1\4\3\uffff\1\1\6\uffff"+
            "\3\u0093\22\uffff\1\4\4\uffff\1\4\2\uffff\1\u0093\6\uffff\1"+
            "\u0093\1\uffff\1\u0093\3\uffff\1\u0093\2\uffff\1\u0093\2\uffff"+
            "\1\u0093\7\uffff\1\u0092\1\uffff\2\u0093\4\uffff\1\u0090",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\4\60\uffff\1\4\11\uffff\1\4\2\uffff\1\4\6\uffff\1\4\4\uffff"+
            "\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4\3\uffff"+
            "\1\4\16\uffff\1\4\13\uffff\1\u00b2\6\uffff\1\4\6\uffff\3\4\32"+
            "\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2"+
            "\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\4\60\uffff\1\u00c8\11\uffff\1\4\2\uffff\1\4\6\uffff\1\4"+
            "\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4"+
            "\3\uffff\1\4\16\uffff\1\4\22\uffff\1\4\6\uffff\3\4\32\uffff"+
            "\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff"+
            "\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\u00de\60\uffff\1\4\11\uffff\1\4\2\uffff\1\4\6\uffff\1\4"+
            "\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4"+
            "\3\uffff\1\4\16\uffff\1\4\11\uffff\1\u0093\10\uffff\1\4\6\uffff"+
            "\3\4\32\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "\1\u00f3\11\uffff\2\4\6\uffff\1\4\36\uffff\1\u00fb\11\uffff"+
            "\1\u00f4\2\4\1\u00fd\1\uffff\4\4\1\uffff\1\u00fd\4\4\1\u00f5"+
            "\1\4\1\u00f9\4\4\1\u0093\5\4\1\u00f5\1\4\1\u00f9\3\4\1\u0093"+
            "\2\4\14\uffff\1\u00fd\11\uffff\3\4\2\uffff\1\4\3\uffff\1\u0093"+
            "\6\uffff\3\u00fd\22\uffff\1\4\4\uffff\1\4\2\uffff\1\u00fd\6"+
            "\uffff\1\u00fd\1\uffff\1\u00fd\3\uffff\1\u00fd\2\uffff\1\u00fd"+
            "\2\uffff\1\u00fd\7\uffff\1\u00fc\1\uffff\2\u00fd\4\uffff\1\u00fa",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u011d\21\uffff\1\4\50\uffff\3\4\2\uffff\4\4\1\uffff\3\4"+
            "\1\u011c\10\4\1\uffff\13\4\1\uffff\2\4\26\uffff\1\u011e\51\uffff"+
            "\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u012f\12\uffff\1\u0130\6\uffff\1\4\50\uffff\4\4\1\uffff"+
            "\4\4\1\uffff\10\4\1\u0131\3\4\1\uffff\13\4\1\uffff\2\4\26\uffff"+
            "\1\4\51\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00fd\60\uffff\1\4\11\uffff\1\4\2\uffff\1\4\6\uffff\1\4"+
            "\4\uffff\1\4\1\uffff\1\4\4\uffff\1\4\5\uffff\1\4\1\uffff\1\4"+
            "\3\uffff\1\4\16\uffff\1\4\11\uffff\1\u00fd\10\uffff\1\4\6\uffff"+
            "\3\4\32\uffff\1\4\6\uffff\1\4\1\uffff\1\4\3\uffff\1\4\2\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\1\uffff\2\4\4\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\4\60\uffff\1\u0163\11\uffff\1\u015c\2\uffff\1\u015b\6\uffff"+
            "\1\u0166\4\uffff\1\u015d\1\uffff\1\u0161\4\uffff\1\u015e\5\uffff"+
            "\1\u015d\1\uffff\1\u0161\3\uffff\1\u015f\16\uffff\1\u0167\22"+
            "\uffff\1\u0160\6\uffff\1\u0168\1\u0169\1\u016a\32\uffff\1\u016d"+
            "\6\uffff\1\u016e\1\uffff\1\u016c\3\uffff\1\u016b\2\uffff\1\u0165"+
            "\2\uffff\1\u0165\7\uffff\1\u0164\1\uffff\1\u016b\1\u0165\4\uffff"+
            "\1\u0162",
            "\1\4\60\uffff\1\u0176\11\uffff\1\4\2\uffff\1\u017a\6\uffff"+
            "\1\u0179\4\uffff\1\u0170\1\uffff\1\u0174\4\uffff\1\u0171\5\uffff"+
            "\1\u0170\1\uffff\1\u0174\3\uffff\1\u0172\16\uffff\1\u017b\22"+
            "\uffff\1\u0173\6\uffff\1\u017c\1\u017d\1\u017e\32\uffff\1\u0181"+
            "\6\uffff\1\u0182\1\uffff\1\u0180\3\uffff\1\u017f\2\uffff\1\u0178"+
            "\2\uffff\1\u0178\7\uffff\1\u0177\1\uffff\1\u017f\1\u0178\4\uffff"+
            "\1\u0175",
            "\1\4\60\uffff\1\u018a\11\uffff\1\4\2\uffff\1\u018e\6\uffff"+
            "\1\u018d\4\uffff\1\4\1\uffff\1\u0188\4\uffff\1\u0185\5\uffff"+
            "\1\4\1\uffff\1\u0188\3\uffff\1\u0186\16\uffff\1\u018f\22\uffff"+
            "\1\u0187\6\uffff\1\u0190\1\u0191\1\u0192\32\uffff\1\u0195\6"+
            "\uffff\1\u0196\1\uffff\1\u0194\3\uffff\1\u0193\2\uffff\1\u018c"+
            "\2\uffff\1\u018c\7\uffff\1\u018b\1\uffff\1\u0193\1\u018c\4\uffff"+
            "\1\u0189",
            "",
            "",
            "",
            "\1\4\11\uffff\2\4\45\uffff\1\u019b\11\uffff\3\4\1\u019d\1\uffff"+
            "\4\4\1\uffff\1\u019d\13\4\1\uffff\13\4\1\uffff\2\4\14\uffff"+
            "\1\u019d\11\uffff\3\4\2\uffff\1\4\12\uffff\3\u019d\22\uffff"+
            "\1\4\7\uffff\1\u019d\6\uffff\1\u019d\1\uffff\1\u019d\3\uffff"+
            "\1\u019d\2\uffff\1\u019d\2\uffff\1\u019d\7\uffff\1\u019c\1\uffff"+
            "\2\u019d\4\uffff\1\u019a",
            "\1\4\60\uffff\1\u019d\14\uffff\1\4\6\uffff\1\4\155\uffff\1"+
            "\u019d\2\uffff\1\u019d\7\uffff\1\u019d\2\uffff\1\u019d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "746:1: l_br_end : ( type_convertion_internal_wrapper R_BR classical_expr_wrp -> ^( TYPE_CONVERTION2 type_convertion_internal_wrapper classical_expr_wrp ) | classical_expr_wrp R_BR ( id_part_end )? );";
        }
    }
    static final String DFA157_eotS =
        "\110\uffff";
    static final String DFA157_eofS =
        "\110\uffff";
    static final String DFA157_minS =
        "\1\20\1\6\24\uffff\1\6\2\uffff\2\20\55\uffff";
    static final String DFA157_maxS =
        "\2\u00cc\24\uffff\1\u00cc\2\uffff\2\u00cc\55\uffff";
    static final String DFA157_acceptS =
        "\2\uffff\1\1\3\uffff\1\2\37\uffff\1\1\10\uffff\1\1\14\uffff\1\1"+
        "\13\uffff";
    static final String DFA157_specialS =
        "\110\uffff}>";
    static final String[] DFA157_transitionS = {
            "\1\2\1\6\11\uffff\1\6\33\uffff\1\1\14\uffff\1\2\5\uffff\1\6"+
            "\5\uffff\1\6\14\uffff\1\6\43\uffff\1\6\37\uffff\1\6\10\uffff"+
            "\1\6\4\uffff\1\6\11\uffff\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\6",
            "\1\6\11\uffff\2\2\11\uffff\1\2\33\uffff\1\26\14\uffff\1\2\5"+
            "\uffff\1\2\1\6\2\uffff\1\6\1\uffff\1\2\14\uffff\1\2\43\uffff"+
            "\1\2\37\uffff\1\2\10\uffff\1\2\4\uffff\1\2\11\uffff\1\32\2\uffff"+
            "\1\32\7\uffff\1\31\2\uffff\1\32\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\11\uffff\2\2\11\uffff\1\46\33\uffff\1\2\14\uffff\1\46"+
            "\5\uffff\1\46\1\2\2\uffff\1\2\1\uffff\1\46\14\uffff\1\46\43"+
            "\uffff\1\46\37\uffff\1\46\10\uffff\1\46\4\uffff\1\46\11\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\2\uffff\1\2\4\uffff\1\46",
            "",
            "",
            "\1\57\1\46\11\uffff\1\57\33\uffff\1\57\14\uffff\1\57\5\uffff"+
            "\1\57\5\uffff\1\57\14\uffff\1\57\43\uffff\1\57\37\uffff\1\57"+
            "\10\uffff\1\57\4\uffff\1\57\11\uffff\1\57\2\uffff\1\57\7\uffff"+
            "\1\57\2\uffff\1\57\4\uffff\1\57",
            "\1\74\1\57\11\uffff\1\74\33\uffff\1\74\14\uffff\1\74\5\uffff"+
            "\1\74\5\uffff\1\74\14\uffff\1\74\43\uffff\1\74\37\uffff\1\74"+
            "\10\uffff\1\74\4\uffff\1\74\11\uffff\1\74\2\uffff\1\74\7\uffff"+
            "\1\74\2\uffff\1\74\4\uffff\1\74",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "954:49: ( method_params )?";
        }
    }
    static final String DFA184_eotS =
        "\110\uffff";
    static final String DFA184_eofS =
        "\110\uffff";
    static final String DFA184_minS =
        "\1\20\7\uffff\1\6\11\uffff\1\6\2\20\63\uffff";
    static final String DFA184_maxS =
        "\1\u00cc\7\uffff\1\u00cc\11\uffff\3\u00cc\63\uffff";
    static final String DFA184_acceptS =
        "\1\uffff\1\2\10\uffff\1\1\24\uffff\1\1\16\uffff\1\1\14\uffff\1\1"+
        "\14\uffff";
    static final String DFA184_specialS =
        "\110\uffff}>";
    static final String[] DFA184_transitionS = {
            "\1\12\1\1\11\uffff\1\1\33\uffff\1\10\14\uffff\1\12\5\uffff\1"+
            "\1\5\uffff\1\1\14\uffff\1\1\43\uffff\1\1\37\uffff\1\1\10\uffff"+
            "\1\1\4\uffff\1\1\11\uffff\1\12\2\uffff\1\12\7\uffff\1\12\2\uffff"+
            "\1\12\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\11\uffff\2\12\11\uffff\1\12\33\uffff\1\22\14\uffff\1\12"+
            "\5\uffff\1\12\1\1\2\uffff\1\1\1\uffff\1\12\14\uffff\1\12\43"+
            "\uffff\1\12\37\uffff\1\12\10\uffff\1\12\4\uffff\1\12\11\uffff"+
            "\1\24\2\uffff\1\24\7\uffff\1\23\2\uffff\1\24\4\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\37\11\uffff\1\12\1\37\11\uffff\1\37\33\uffff\1\37\14\uffff"+
            "\1\37\5\uffff\2\37\2\uffff\1\37\1\uffff\1\37\14\uffff\1\37\43"+
            "\uffff\1\37\37\uffff\1\37\10\uffff\1\37\4\uffff\1\37\11\uffff"+
            "\1\37\2\uffff\1\37\7\uffff\1\37\2\uffff\1\37\4\uffff\1\37",
            "\2\56\11\uffff\1\56\33\uffff\1\56\14\uffff\1\56\5\uffff\1\56"+
            "\5\uffff\1\56\14\uffff\1\56\43\uffff\1\56\37\uffff\1\56\10\uffff"+
            "\1\56\4\uffff\1\56\11\uffff\1\56\2\uffff\1\56\7\uffff\1\56\2"+
            "\uffff\1\56\4\uffff\1\56",
            "\2\73\11\uffff\1\73\33\uffff\1\73\14\uffff\1\73\5\uffff\1\73"+
            "\5\uffff\1\73\14\uffff\1\73\43\uffff\1\73\37\uffff\1\73\10\uffff"+
            "\1\73\4\uffff\1\73\11\uffff\1\73\2\uffff\1\73\7\uffff\1\73\2"+
            "\uffff\1\73\4\uffff\1\73",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA184_eot = DFA.unpackEncodedString(DFA184_eotS);
    static final short[] DFA184_eof = DFA.unpackEncodedString(DFA184_eofS);
    static final char[] DFA184_min = DFA.unpackEncodedStringToUnsignedChars(DFA184_minS);
    static final char[] DFA184_max = DFA.unpackEncodedStringToUnsignedChars(DFA184_maxS);
    static final short[] DFA184_accept = DFA.unpackEncodedString(DFA184_acceptS);
    static final short[] DFA184_special = DFA.unpackEncodedString(DFA184_specialS);
    static final short[][] DFA184_transition;

    static {
        int numStates = DFA184_transitionS.length;
        DFA184_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA184_transition[i] = DFA.unpackEncodedString(DFA184_transitionS[i]);
        }
    }

    class DFA184 extends DFA {

        public DFA184(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 184;
            this.eot = DFA184_eot;
            this.eof = DFA184_eof;
            this.min = DFA184_min;
            this.max = DFA184_max;
            this.accept = DFA184_accept;
            this.special = DFA184_special;
            this.transition = DFA184_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1012:4: ( method_param_wrapper )+";
        }
    }
 

    public static final BitSet FOLLOW_code_internal_in_code447 = new BitSet(new long[]{0x0080000008100002L,0x0000000000000000L,0x0000300200010100L,0x0000000000001401L});
    public static final BitSet FOLLOW_operator_wrapper_in_code_internal461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operator_in_operator_wrapper478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_wrapper_in_operator496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_operator502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_wrapper_in_operator507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_operator514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_operator520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_operator525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_in_operator530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_extern567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_165_in_extern570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_L_FBR_in_extern573 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xDFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x0000000000003FFFL});
    public static final BitSet FOLLOW_set_in_extern575 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_extern580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_implementation611 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_implementation614 = new BitSet(new long[]{0x0080000000010000L,0x0000000020010010L,0x0008040200010100L,0x0000000000001401L});
    public static final BitSet FOLLOW_category_in_implementation617 = new BitSet(new long[]{0x0080000000010000L,0x0000000020010000L,0x0008040200010100L,0x0000000000001401L});
    public static final BitSet FOLLOW_super_class_in_implementation620 = new BitSet(new long[]{0x0080000000000000L,0x0000000020010000L,0x0008040200010100L,0x0000000000001401L});
    public static final BitSet FOLLOW_implementation_body_in_implementation625 = new BitSet(new long[]{0x0080000000000000L,0x0000000020010000L,0x0008040200010100L,0x0000000000001401L});
    public static final BitSet FOLLOW_170_in_implementation630 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_category645 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_category648 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_category651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_in_implementation_body675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_wrapper_in_implementation_body681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_wrapper_in_implementation_body693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_implementation_body699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_implementation_body704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_synthesize728 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L,0x0000000000000002L});
    public static final BitSet FOLLOW_L_EQ_in_synthesize734 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_synthesize740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_typedef752 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_typedef756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_wrapper_in_typedef760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_rename_wrapper_in_typedef764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_rename_in_type_rename_wrapper778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_rename797 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_type_rename799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_type_rename801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section_in_static_section_wrapper813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_section835 = new BitSet(new long[]{0x0080000008100000L,0x0000000000000400L,0x0000000200010002L,0x0000000000001020L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_section837 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000400L,0x0000000200010002L,0x0000000000001020L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_static_section840 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000400L,0x0000000200000002L,0x0000000000001020L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_static_section843 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000400L,0x0000000200000002L,0x0000000000001020L});
    public static final BitSet FOLLOW_static_section2_in_static_section846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inline_section_in_static_section2855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper2_in_static_section2862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_section3_in_static_section2869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_inline_section881 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_inline_section883 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_field_type_in_inline_section886 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_inline_section888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000410L,0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_inline_section891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_inline_section895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_inline_section899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_static_section3910 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_static_section3912 = new BitSet(new long[]{0x0000000000000000L,0x0000002452222998L,0x0000000000000002L});
    public static final BitSet FOLLOW_indexed_in_static_section3914 = new BitSet(new long[]{0x0000000000000000L,0x0000002452222998L,0x0000000000000002L});
    public static final BitSet FOLLOW_static_end_in_static_section3918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper3_in_static_end930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_in_static_end936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_end_internal_in_field_end947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_field_end_internal965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_end_internal968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method3_in_implementation_method_wrapper3980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body3_in_implementation_method3998 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0080000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method31001 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L,0x0080000000000000L});
    public static final BitSet FOLLOW_attribute_in_implementation_method31006 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method31011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_attribute1024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_attribute1027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_attribute1030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_187_in_attribute1033 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute1036 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_attribute1039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_attribute1042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method21054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method21059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_started_in_field_type_started_wrapper1071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_field_type_started1090 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_field_type_started1092 = new BitSet(new long[]{0x0000000000000000L,0x0000002452222198L,0x0000000000000002L});
    public static final BitSet FOLLOW_classic_method_declaration_wrapper_in_field_type_started1095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_wrapper_in_field_type_started1099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration_end_wrapper1110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classic_method_declaration_in_classic_method_declaration_wrapper1128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_classic_method_declaration1148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_wrapper_in_classic_method_declaration1153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_in_implementation_method_wrapper1166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method2_in_implementation_method_wrapper21183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_implementation_method1200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_implementation_method1202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_wrapper_in_implementation_method1207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_block_wrapper1220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block1242 = new BitSet(new long[]{0x0080000008100240L,0x20040008A0850C12L,0xD375020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_block_internal_full_in_block1248 = new BitSet(new long[]{0x0080000008100240L,0x20040008A0850C12L,0xD375020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_block_in_block1252 = new BitSet(new long[]{0x0080000008100240L,0x20040008A0850C12L,0xD375020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_R_FBR_in_block1260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_block_case1275 = new BitSet(new long[]{0x0080000008100240L,0x20040008A0850C12L,0xF375020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_block_internal_full_in_block_case1281 = new BitSet(new long[]{0x0080000008100240L,0x20040008A0850C12L,0xF375020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_block_in_block_case1285 = new BitSet(new long[]{0x0080000008100240L,0x20040008A0850C12L,0xF375020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_default_stmt_in_block_case1294 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_block_case1299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_full1311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_in_block_internal1322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_wrapper_in_block_internal1332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expression_wrapper_in_block_internal1344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_wrapper_in_block_internal1351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_wrapper_in_block_internal1356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_wrapper_in_block_internal1366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_operators_in_block_internal1386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_variable_in_block_internal1391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_variable_in_block_internal1398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_started_in_block_internal1405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_type_started_in_block_internal1412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_block_internal1419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_wrapper_in_block_internal1425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_block_internal1430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_operator_in_goto_wrapper1442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_goto_operator1459 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_goto_operator1461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_goto_operator1463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_init_in_variable_init_wrapper1474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_variable_init1492 = new BitSet(new long[]{0x0080000000010000L,0x0000000000000000L,0x1200000200000002L,0x0000000000001090L});
    public static final BitSet FOLLOW_full_expr2_in_variable_init1496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_variable_init1499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_variable_init1504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_types_in_known_type_started1516 = new BitSet(new long[]{0x0080000000000040L,0x0000000000000000L,0x1200000200000000L,0x0000000000001090L});
    public static final BitSet FOLLOW_ASTERISK_in_known_type_started1518 = new BitSet(new long[]{0x0080000000000040L,0x0000000000000000L,0x1200000200000000L,0x0000000000001090L});
    public static final BitSet FOLLOW_full_expr2_in_known_type_started1521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeof_in_typeof_started1533 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_typeof_started1535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_variable1548 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_struct_variable1550 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_struct_variable1552 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_struct_variable1555 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_struct_variable1557 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_enum_variable1568 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_enum_variable1570 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_enum_variable1572 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_enum_variable1575 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_enum_variable1577 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_const_expression_wrapper1588 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_const_expression_in_const_expression_wrapper1590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_const_expression1609 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_const_expression1611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper1620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_throw_stmt1637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_throw_stmt1640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_try_stmt1651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_in_try_stmt1654 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000090000000000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt1657 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000090000000000L});
    public static final BitSet FOLLOW_171_in_try_stmt1661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_in_try_stmt1664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_catch_stmt1678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_catch_stmt1681 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1686 = new BitSet(new long[]{0x0080000000000040L});
    public static final BitSet FOLLOW_ASTERISK_in_catch_stmt1689 = new BitSet(new long[]{0x0080000000000040L});
    public static final BitSet FOLLOW_ID_in_catch_stmt1692 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_167_in_catch_stmt1697 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_catch_stmt1701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_in_catch_stmt1704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_switch_stmt_wrapper1717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_switch_stmt1734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_switch_stmt1737 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_switch_expr_in_switch_stmt1740 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_switch_stmt1742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_switch_body_wrapper_in_switch_stmt1748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_switch_body_wrapper1761 = new BitSet(new long[]{0x0080000008100240L,0x20040008A0850812L,0xF775020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_switch_body_in_switch_body_wrapper1763 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_switch_body_wrapper1765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_switch_body1784 = new BitSet(new long[]{0x0080000008100242L,0x00040008A0850812L,0xF775020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_switch_internal_in_switch_body1789 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x2400000000000000L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_switch_expr1802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_wrapper_in_switch_internal1819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_wrapper_in_switch_internal1825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_case_stmt_wrapper1834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_case_stmt1851 = new BitSet(new long[]{0x0080000000000000L,0x0004000000000000L,0x0040000000007000L,0x0000000000000040L});
    public static final BitSet FOLLOW_case_expr_wrapper_in_case_stmt1854 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_case_stmt1857 = new BitSet(new long[]{0x0080000008100242L,0x00040008A0850C12L,0xD375020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_case_body_wrapper_in_case_stmt1862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_body_in_case_body_wrapper1876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_case_body1895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_case_body1902 = new BitSet(new long[]{0x0080000008100242L,0x00040008A0850812L,0xD375020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_case_expr_in_case_expr_wrapper1918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_case_expr1940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_case_expr1947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_case_in_block_break1958 = new BitSet(new long[]{0x0000000000000202L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_single_operators_in_block_break1960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_default_stmt_wrapper1972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_default_stmt1989 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_default_stmt1992 = new BitSet(new long[]{0x0080000008100242L,0x00040008A0850C12L,0xD375020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_default_body_wrapper_in_default_stmt1997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_body_in_default_body_wrapper2010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_break_in_default_body2030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_full_in_default_body2036 = new BitSet(new long[]{0x0080000008100242L,0x00040008A0850812L,0xD375020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_SINGLE_OP_in_single_operators2051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_wrapper_in_single_operators2058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_break_wrapper2070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_WORD_in_break_stmt2088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_break_stmt2091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_do_stmt2101 = new BitSet(new long[]{0x0080000008100240L,0x00040008A0850C12L,0xD375020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_if_stmt_block_in_do_stmt2104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_205_in_do_stmt2107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_do_stmt2110 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_expression_in_do_stmt2113 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_do_stmt2115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper2124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_while_stmt2143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_while_stmt2146 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_while_expr_in_while_stmt2149 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_while_stmt2151 = new BitSet(new long[]{0x0080000008100240L,0x00040008A0850C12L,0xD375020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_while_stmt2154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_while_expr2167 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper2186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_for_stmt2203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_for_stmt2206 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007022L,0x00000000000010D0L});
    public static final BitSet FOLLOW_for_stmt_expr_wrapper_in_for_stmt2209 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_for_stmt2211 = new BitSet(new long[]{0x0080000008100240L,0x00040008A0850C12L,0xD375020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_if_stmt_block_in_for_stmt2214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_expr_in_for_stmt_expr_wrapper2226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_wrapper_in_for_stmt_expr2245 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000200000002L,0x0000000000001090L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr2_in_for_stmt_expr2253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_for_stmt_int1_in_for_stmt_expr2256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_int2_in_for_stmt_expr2272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_for_stmt_int12287 = new BitSet(new long[]{0x0080000000000000L,0x0004000000000810L,0x1245020000007000L,0x00000000000010D0L});
    public static final BitSet FOLLOW_object_wrapped2_in_for_stmt_int12289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22309 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007022L,0x00000000000010D0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_for_stmt_int22314 = new BitSet(new long[]{0x0080000000000042L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_for_stmt_int22316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_return_stmt2329 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007022L,0x00000000000010D0L});
    public static final BitSet FOLLOW_expression_in_return_stmt2331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_return_stmt2334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_if_stmt_wrapper2355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_if_stmt2371 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_if_stmt2374 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_if_expr_in_if_stmt2377 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_if_stmt2379 = new BitSet(new long[]{0x0080000008100240L,0x00040008A0850C12L,0xD375020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_if_stmt_block_wrapper_in_if_stmt2382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_if_expr2395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_else_stmt2414 = new BitSet(new long[]{0x0080000008100240L,0x00040008A0850C12L,0xD375020200017132L,0x00000000000033DFL});
    public static final BitSet FOLLOW_if_stmt_block_in_else_stmt2417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_block_in_if_stmt_block_wrapper2426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_wrapper_in_if_stmt_block2443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_if_stmt_block2449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_start_in_static_start_wrapper2461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STATIC_PREFIX_in_static_start2479 = new BitSet(new long[]{0x0080000000100000L,0x0000000000000000L,0x1200000200000000L,0x0000000000001090L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_static_start2481 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000200000000L,0x0000000000001090L});
    public static final BitSet FOLLOW_static_type_wrapper_in_static_start2484 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000200000000L,0x0000000000001090L});
    public static final BitSet FOLLOW_full_expr2_in_static_start2487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_type_in_static_type_wrapper2499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_static_type2518 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASTERISK_in_static_type2520 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_id_part_end_internal_in_id_part_end2532 = new BitSet(new long[]{0x0000000001000002L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_DOT_in_id_part_end_internal2547 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_166_in_id_part_end_internal2551 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_id_part_in_id_part_end_internal2554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_internal_in_id_part2592 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000810L});
    public static final BitSet FOLLOW_function_brackets_wrapper_in_id_part2594 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_index_wrapper_in_id_part2597 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_id_part_in_object_name2610 = new BitSet(new long[]{0x0000000001000002L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_name2612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_method_call_wrapper2626 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000810L,0x1200000000001000L,0x0000000000000090L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper2628 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_method_call_wrapper2630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call2_in_method_call_wrapper22653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_in_method_call22672 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_method_name_in_method_call22674 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_method_call_message_list_wrapper_in_method_call22678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapper_internal_in_object_wrapper2689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_in_object_wrapper_internal2708 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000800L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_object_wrapper_internal2721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapper_internal2726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_object_wrapper_internal2731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_message32743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_type_convertion2762 = new BitSet(new long[]{0x0080000000100000L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_convertion_internal_wrapper_in_type_convertion2764 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_type_convertion2766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_convertion_internal_wrapper2775 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_convertion_internal_in_type_convertion_internal_wrapper2778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_type_convertion_internal2796 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_internal_in_type_convertion_internal2799 = new BitSet(new long[]{0x0000000000000042L,0x0000000000004000L});
    public static final BitSet FOLLOW_generic_in_type_convertion_internal2801 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASTERISK_in_type_convertion_internal2804 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ID_in_method_name2815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_method_name2828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_list_in_method_call_message_list_wrapper2845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_first_wrapper_in_method_call_message_list2862 = new BitSet(new long[]{0x0080000000010002L});
    public static final BitSet FOLLOW_method_call_message_wrapper_in_method_call_message_list2864 = new BitSet(new long[]{0x0080000000010002L});
    public static final BitSet FOLLOW_method_call_message_first_in_method_call_message_first_wrapper2875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_method_call_message_first2892 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_message_wrapper_in_method_call_message_first2895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_message_in_method_call_message_wrapper2905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_in_method_call_message2924 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_incomplete_prefix_in_method_call_message2928 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_message_wrapper_in_method_call_message2931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_message_in_message_wrapper2941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_message2959 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_message2962 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_expression_in_message2964 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expression2980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_in_expression2985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_full_expr_in_full_expr_wrapper2996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr3013 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr3016 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_full_expr3018 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr23029 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_full_expr23032 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000200000000L,0x0000000000001090L});
    public static final BitSet FOLLOW_classical_expr_wrp2_in_full_expr23034 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_expr_assign_in_expr_assign_wrapper3045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_wrapper_in_expr_assign3064 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850C12L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_struct_init_in_expr_assign3067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_assign3071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_wrapper_in_expr_assign3075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer2_in_expr_assign3080 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_method_call_wrapper_in_expr_assign3082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_in_array_init_wrapper3094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_array_init3113 = new BitSet(new long[]{0x0080000000000040L,0x20040008A0850C12L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init3116 = new BitSet(new long[]{0x0000000000020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_array_init3119 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850C12L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_classical_expr_wrp3_in_array_init3121 = new BitSet(new long[]{0x0000000000020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_array_init3127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_array_init_wrapper_in_classical_expr_wrp33139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_classical_expr_wrp33145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_in_classical_expr_wrp3158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_classical_expr3175 = new BitSet(new long[]{0x0000000000000002L,0x0000002552222188L});
    public static final BitSet FOLLOW_expr_question_wrapper_in_classical_expr3178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr3182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr2_in_classical_expr_wrp23194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_name_in_classical_expr23212 = new BitSet(new long[]{0x0000000000000002L,0x0000002452222188L});
    public static final BitSet FOLLOW_func_pointer1_in_classical_expr23216 = new BitSet(new long[]{0x0000000000000002L,0x0000002452222188L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_classical_expr23219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_question_in_expr_question_wrapper3229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_QUESTION_in_expr_question3246 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question3248 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_expr_question3250 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_expr_question3252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assign_in_assign_wrapper3261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expr_in_simple_expr_wrapper3335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_or_in_simple_expr3353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_and_wrapper_in_expr_or_or3370 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_L_OR_OR_in_expr_or_or3373 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_or_or3375 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_expr_and_and_in_expr_and_and_wrapper3386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_wrapper_in_expr_and_and3403 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_L_AND_AND_in_expr_and_and3406 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_and_and3408 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_expr_or_in_expr_or_wrapper3419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_xor_wrapper_in_expr_or3437 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_L_OR_in_expr_or3440 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_or3442 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_expr_xor_in_expr_xor_wrapper3453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_and_wrapper_in_expr_xor3470 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_L_XOR_in_expr_xor3473 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_xor3475 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_expr_and_in_expr_and_wrapper3487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eq_wrapper_in_expr_and3505 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_L_AND_in_expr_and3508 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_and3510 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_expr_eq_in_expr_eq_wrapper3522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_cond_wrapper_in_expr_eq3540 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400200L});
    public static final BitSet FOLLOW_set_in_expr_eq3543 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_eq3551 = new BitSet(new long[]{0x0000000000000002L,0x0000000000400200L});
    public static final BitSet FOLLOW_expr_cond_in_expr_cond_wrapper3562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mov_wrapper_in_expr_cond3579 = new BitSet(new long[]{0x0000000000000002L,0x000000000018C000L});
    public static final BitSet FOLLOW_set_in_expr_cond3582 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_cond3598 = new BitSet(new long[]{0x0000000000000002L,0x000000000018C000L});
    public static final BitSet FOLLOW_expr_mov_in_expr_mov_wrapper3609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_add_wrapper_in_expr_mov3627 = new BitSet(new long[]{0x0000000000000002L,0x0000000200001000L});
    public static final BitSet FOLLOW_set_in_expr_mov3630 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_mov3638 = new BitSet(new long[]{0x0000000000000002L,0x0000000200001000L});
    public static final BitSet FOLLOW_expr_add_in_expr_add_wrapper3650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mult_wrapper_in_expr_add3667 = new BitSet(new long[]{0x0000000000000002L,0x0000000020010000L});
    public static final BitSet FOLLOW_set_in_expr_add3670 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_simple_expr_wrapper_in_expr_add3678 = new BitSet(new long[]{0x0000000000000002L,0x0000000020010000L});
    public static final BitSet FOLLOW_expr_mult_in_expr_mult_wrapper3689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_unname_wrapper_in_expr_mult3706 = new BitSet(new long[]{0x0000000000000042L,0x0000000008000040L});
    public static final BitSet FOLLOW_set_in_expr_mult3709 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_expr_unname_wrapper_in_expr_mult3721 = new BitSet(new long[]{0x0000000000000042L,0x0000000008000040L});
    public static final BitSet FOLLOW_expr_unname_in_expr_unname_wrapper3733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_expr_unname3754 = new BitSet(new long[]{0x0080000000000000L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_type_convertion_in_expr_unname3756 = new BitSet(new long[]{0x0080000000000000L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_expr_addr_in_expr_unname3761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_AND_in_expr_addr3771 = new BitSet(new long[]{0x0080000000000000L,0x00040008A0850810L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_expr_sign_in_expr_addr3774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_wrapper_in_expr_sign3793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_not_in_expr_not_wrapper3803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_NOT_in_expr_not3822 = new BitSet(new long[]{0x0080000000000000L,0x0004000880040810L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_expr_not2_in_expr_not3825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_TILDA_in_expr_not23835 = new BitSet(new long[]{0x0080000000000000L,0x0004000080040810L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_expr_size_of_in_expr_not23838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIZEOF_in_expr_size_of3848 = new BitSet(new long[]{0x0080000000000000L,0x0004000080040810L,0x1245020000007000L,0x00000000000010D0L});
    public static final BitSet FOLLOW_expr_xcrement_in_expr_size_of3851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped1_in_expr_xcrement3870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_wrapped2_in_object_wrapped13880 = new BitSet(new long[]{0x0000000000000002L,0x0000000080040000L});
    public static final BitSet FOLLOW_204_in_object_wrapped23901 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_object_name_in_object_wrapped23904 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L});
    public static final BitSet FOLLOW_generic_in_object_wrapped23906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_call_wrapper_in_object_wrapped23912 = new BitSet(new long[]{0x0000000001000002L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_id_part_end_in_object_wrapped23914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_object_wrapped23920 = new BitSet(new long[]{0x0080000000100040L,0x00040008A0850812L,0x1245020200007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_l_br_end_in_object_wrapped23922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_wrapper_in_object_wrapped23935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_started_in_object_wrapped23940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_convertion_internal_wrapper_in_l_br_end3949 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_l_br_end3951 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_l_br_end3953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_l_br_end3968 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_l_br_end3970 = new BitSet(new long[]{0x0000000001000002L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_id_part_end_in_l_br_end3972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_brackets_in_function_brackets_wrapper3986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_function_brackets4005 = new BitSet(new long[]{0x0080000000000040L,0x10040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets4008 = new BitSet(new long[]{0x0000000000020000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_function_brackets4011 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_function_brackets4013 = new BitSet(new long[]{0x0000000000020000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_function_brackets4019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_in_index_wrapper4029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index4046 = new BitSet(new long[]{0x0080000000000040L,0x40040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_index_number_wrapper_in_index4048 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index4051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_number_wrapper4060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_struct_init4077 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_struct_init4080 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_struct_init4083 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_struct_init4086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init4089 = new BitSet(new long[]{0x0080000001000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init4095 = new BitSet(new long[]{0x0000000000020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init4098 = new BitSet(new long[]{0x0080000001000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init4101 = new BitSet(new long[]{0x0000000000020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init4107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_struct_init24121 = new BitSet(new long[]{0x0080000001000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init24127 = new BitSet(new long[]{0x0000000000020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_struct_init24130 = new BitSet(new long[]{0x0080000001000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_struct_init_line_in_struct_init24133 = new BitSet(new long[]{0x0000000000020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_struct_init24139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_var_in_struct_init_line4152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_init_expression_in_struct_init_line4157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_expression4170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_struct_init_method4181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_struct_init_var4193 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_id_part_in_struct_init_var4195 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_EQ_in_struct_init_var4200 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850C12L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_in_q_brackets_in_struct_init_var4204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_struct_init_var4208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_wrapper_in_a_started4220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_wrapper_in_a_started4225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_wrapper_in_a_started4230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_typeof4240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_typeof4243 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_typeof4246 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_typeof4249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_in_a_selector_wrapper4260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_a_selector4277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_a_selector4279 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_selector4281 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_selector4283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_protocol_in_a_protocol_wrapper4293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_a_protocol4311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_a_protocol4313 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_protocol4315 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_protocol4317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_encode_in_a_encode_wrapper4327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_a_encode4343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_a_encode4345 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_a_selector_value_wrapper_in_a_encode4347 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_a_encode4349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_a_selector_value_in_a_selector_value_wrapper4360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sel_id_in_a_selector_value4379 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4383 = new BitSet(new long[]{0x0080000000000002L,0x0000000000000000L,0x1200000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_sel_id_in_a_selector_value4387 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_a_selector_value4390 = new BitSet(new long[]{0x0080000000000002L,0x0000000000000000L,0x1200000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_ID_in_sel_id4403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_sel_id4408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_const_expr_in_const_expr_wrapper4420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_const_expr4439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_const_expr4443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL2_in_const_expr4447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_const_expr4451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_stmt_in_const_expr4455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL3_in_string_literal34465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_brackets4475 = new BitSet(new long[]{0x0080000000000040L,0x10040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_expression_in_method_brackets4479 = new BitSet(new long[]{0x0000000000020000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_brackets4483 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_method_brackets4486 = new BitSet(new long[]{0x0000000000020000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_brackets4492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14502 = new BitSet(new long[]{0x0000000000000040L,0x0000000000000010L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer14508 = new BitSet(new long[]{0x0080000000000040L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer14510 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer14513 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer14516 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer14519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24532 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_internal_in_func_pointer24535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer24537 = new BitSet(new long[]{0x0000000000000040L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer24540 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_func_pointer_params_in_func_pointer24546 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer24549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_func_pointer_params4562 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4565 = new BitSet(new long[]{0x0000000000020040L,0x1000000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4568 = new BitSet(new long[]{0x0000000000020040L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_func_pointer_params4572 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_func_pointer_params4575 = new BitSet(new long[]{0x0000000000020040L,0x1000000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_func_pointer_params4578 = new BitSet(new long[]{0x0000000000020040L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_func_pointer_params4583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_start4594 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_method_brackets_in_method_start4596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_in_q_brackets4607 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850C12L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_q_brackets_source_in_in_q_brackets4610 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_in_q_brackets4612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_source_in_q_brackets_source4624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_q_br_source_in_q_brackets_source4629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4642 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_in_q_brackets_in_q_br_source4649 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_br_source4653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_q_source4665 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_COMMA_in_q_source4669 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_expression_in_q_source4672 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_ID_in_simple_method_call4689 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_method_brackets_in_simple_method_call4691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_index_brackets4707 = new BitSet(new long[]{0x0080000000000040L,0x00040008A0850812L,0x1245020000007020L,0x00000000000010D0L});
    public static final BitSet FOLLOW_classical_expr_wrp_in_index_brackets4710 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_index_brackets4712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper4726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_interface_declaration4744 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_interface_declaration4747 = new BitSet(new long[]{0x0080000008010000L,0x0000000020010410L,0x0000840200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_interface_category_in_interface_declaration4750 = new BitSet(new long[]{0x0080000008010000L,0x0000000020010400L,0x0000840200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_super_class_in_interface_declaration4754 = new BitSet(new long[]{0x0080000008000000L,0x0000000020010400L,0x0000840200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_annotated_block_in_interface_declaration4761 = new BitSet(new long[]{0x0080000008000000L,0x0000000020010400L,0x0000840200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_interface_methods_in_interface_declaration4765 = new BitSet(new long[]{0x0080000008000000L,0x0000000020010400L,0x0000840200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_interface_fields_in_interface_declaration4769 = new BitSet(new long[]{0x0080000008000000L,0x0000000020010400L,0x0000840200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_170_in_interface_declaration4778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_FBR_in_annotated_block4789 = new BitSet(new long[]{0x0080000000000000L,0x2000000000000000L,0x0002400200000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_annotated_block_internal_in_annotated_block4794 = new BitSet(new long[]{0x0080000000000000L,0x2000000000000000L,0x0002400200000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_R_FBR_in_annotated_block4799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_annotation_in_annotated_block_internal4812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_public_block_internal_in_annotated_block_internal4819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_field_declaration_in_public_block_internal4854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_union_declaration_in_public_block_internal4859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_simple_field_declaration4871 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_simple_field_declaration4873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_simple_field_declaration4876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_union_declaration4889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_L_FBR_in_union_declaration4892 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_simple_field_declaration_in_union_declaration4898 = new BitSet(new long[]{0x0080000000000000L,0x2000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_R_FBR_in_union_declaration4903 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_union_declaration4906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_union_declaration4909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_super_class4923 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_super_class4926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_interface_category4946 = new BitSet(new long[]{0x0080000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_ID_in_interface_category4949 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_interface_category4953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_field_wrapper_in_interface_fields4982 = new BitSet(new long[]{0x0080000000000002L,0x0000000000000000L,0x0000800200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_interface_field_in_interface_field_wrapper4993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_prefix_in_interface_field5012 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_interface_field_declaration_in_interface_field5015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_interface_field_declaration5026 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_interface_field_declaration5028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_interface_field_declaration5030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_property_prefix5041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_L_BR_in_property_prefix5043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_property_in_property_prefix5045 = new BitSet(new long[]{0x0000000000020000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_property_prefix5048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_property_in_property_prefix5050 = new BitSet(new long[]{0x0000000000020000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_property_prefix5054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enum_declaration_in_interface_methods5087 = new BitSet(new long[]{0x0000000008000002L,0x0000000020010000L});
    public static final BitSet FOLLOW_interface_method_in_interface_methods5091 = new BitSet(new long[]{0x0000000008000002L,0x0000000020010000L});
    public static final BitSet FOLLOW_method_header_in_interface_method5105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_header_body_in_method_header5124 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_method_header5126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_header_body5136 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000010L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_method_type_in_method_header_body5139 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_method_header_body5143 = new BitSet(new long[]{0x0080000000030002L,0x0000000000000010L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_method_params_in_method_header_body5146 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_va_args_wrapper_in_method_header_body5149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_va_args_in_va_args_wrapper5159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_va_args5176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_va_args5179 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_va_args5182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_type_in_method_header_body25193 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_method_header_body25195 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000010L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body25198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_header_body35208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper5217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_type_internal_in_method_type5248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type_internal5266 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000200010000L,0x0000000000001000L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_type_internal5268 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_type_internal_in_method_type_internal5271 = new BitSet(new long[]{0x0000000000000040L,0x1000000000004000L});
    public static final BitSet FOLLOW_generic_in_method_type_internal5273 = new BitSet(new long[]{0x0000000000000040L,0x1000000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type_internal5276 = new BitSet(new long[]{0x0000000000000040L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type_internal5279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_BR_in_method_type_internal5285 = new BitSet(new long[]{0x0080000000100040L,0x1000000000004800L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_type_internal5287 = new BitSet(new long[]{0x0080000000000040L,0x1000000000004800L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_known_types_in_method_type_internal5290 = new BitSet(new long[]{0x0080000000000040L,0x1000000000004800L});
    public static final BitSet FOLLOW_ID_in_method_type_internal5293 = new BitSet(new long[]{0x0080000000000040L,0x1000000000004800L});
    public static final BitSet FOLLOW_L_KBR_in_method_type_internal5297 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_method_type_internal5299 = new BitSet(new long[]{0x0000000000000040L,0x1000000000004800L});
    public static final BitSet FOLLOW_generic_in_method_type_internal5303 = new BitSet(new long[]{0x0000000000000040L,0x1000000000000000L});
    public static final BitSet FOLLOW_ASTERISK_in_method_type_internal5306 = new BitSet(new long[]{0x0000000000000040L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_type_internal5309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal1_in_type_internal5350 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_L_KBR_in_type_internal5353 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_type_internal5356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_LESS_in_generic5395 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_generic_internal_wrapper_in_generic5397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_L_MORE_in_generic5399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_generic_internal_in_generic_internal_wrapper5409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_generic_internal5427 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal5429 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_COMMA_in_generic_internal5433 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_generic_internal5436 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_ASTERISK_in_generic_internal5439 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_L_BR_in_method_params25451 = new BitSet(new long[]{0x0080000008100000L,0x1000000000000000L,0x0000000200010000L,0x0000000000001000L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25455 = new BitSet(new long[]{0x0000000000020000L,0x1000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_method_params25458 = new BitSet(new long[]{0x0080000008100000L,0x0000000000000000L,0x0000000200010000L,0x0000000000001000L});
    public static final BitSet FOLLOW_method_param_wrapper2_in_method_params25460 = new BitSet(new long[]{0x0000000000020000L,0x1000000000000000L});
    public static final BitSet FOLLOW_R_BR_in_method_params25466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param2_in_method_param_wrapper25477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_method_param25495 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000000L,0x0000000200010000L,0x0000000000001000L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_method_param25498 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000200010000L,0x0000000000001000L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_method_param25501 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_204_in_method_param25504 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_field_type_in_method_param25507 = new BitSet(new long[]{0x0080000000000002L,0x0000000000000800L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_method_param25509 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000800L});
    public static final BitSet FOLLOW_index_wrapper_in_method_param25512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_indexed5522 = new BitSet(new long[]{0x0000000000000000L,0x4004000000000000L});
    public static final BitSet FOLLOW_NUMBER_in_indexed5524 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_indexed5527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_wrapper_in_method_params5537 = new BitSet(new long[]{0x0080000000010002L,0x0000000000000010L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_method_param_in_method_param_wrapper5549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_in_method_param5569 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000010L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_COLON_in_method_param5574 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000010L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_method_type_in_method_param5577 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_method_param5580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5592 = new BitSet(new long[]{0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_prefix5594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_incomplete_prefix5613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_in_typedef_struct_declaration_wrapper5635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRUCT_PREFIX_in_typedef_struct_declaration5656 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000400L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_struct_declaration5662 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_typedef_struct_body_in_typedef_struct_declaration5667 = new BitSet(new long[]{0x0080000000000000L,0x2000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_struct_declaration5671 = new BitSet(new long[]{0x0080000000000002L,0x0000000000000000L,0x1200000000000002L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_typedef_struct_declaration5674 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_struct_declaration5677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_struct_declaration_element_wrapper_in_typedef_struct_body5690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_field_in_typedef_struct_declaration_element_wrapper5702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_in_struct_field5720 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_struct_field5722 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_struct_field5726 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_struct_field5729 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_struct_field5733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper5749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_in_enum_declaration5769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_PREFIX_in_typedef_declaration5789 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000400L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_typedef_declaration5791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_L_FBR_in_typedef_declaration5794 = new BitSet(new long[]{0x0080000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5797 = new BitSet(new long[]{0x0000000000020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_typedef_declaration5801 = new BitSet(new long[]{0x0080000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_typedef_declaration_element_wrapper_in_typedef_declaration5804 = new BitSet(new long[]{0x0000000000020000L,0x2000000000000000L});
    public static final BitSet FOLLOW_R_FBR_in_typedef_declaration5808 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000002L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_typedef_declaration5811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_typedef_declaration5814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_element_in_typedef_declaration_element_wrapper5824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_declaration_element5843 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_EQ_in_typedef_declaration_element5847 = new BitSet(new long[]{0x0080000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_set_in_typedef_declaration_element5850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_typedef_declaration_element5862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_L_EQ_in_typedef_declaration_element5864 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_NUMBER_in_typedef_declaration_element5866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper5880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_wrapper_in_field_declaration5897 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_field_type_in_field_declaration5900 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_field_declaration5902 = new BitSet(new long[]{0x0000000000000000L,0x0000002452222188L,0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_end_in_field_declaration5904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_field_declaration_end5915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration_end5918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_start_in_type_start_wrapper5928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_PREFIX_in_type_start5945 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_field_type_in_type_start5948 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x1200000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_name_in_type_start5950 = new BitSet(new long[]{0x0000000000000000L,0x0000002452222998L,0x0000000000000002L});
    public static final BitSet FOLLOW_L_KBR_in_type_start5953 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_R_KBR_in_type_start5955 = new BitSet(new long[]{0x0000000000000000L,0x0000002452222198L,0x0000000000000002L});
    public static final BitSet FOLLOW_type_end_in_type_start5959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration4_in_type_end5967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration4_in_type_end5980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_assign_wrapper_in_field_declaration46002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_field_declaration46005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_params2_in_method_declaration46018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_block_wrapper_in_method_declaration46023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_modifier_in_field_modifier_wrapper6035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_field_modifier6053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_type_internal_in_field_type6065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_internal_in_field_type_internal6084 = new BitSet(new long[]{0x0000000000000042L,0x0000000000004000L});
    public static final BitSet FOLLOW_generic_in_field_type_internal6086 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_ASTERISK_in_field_type_internal6089 = new BitSet(new long[]{0x0000000000000042L});
    public static final BitSet FOLLOW_name_internal_in_name6102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name_internal6123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_name_internal6130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_in_name_internal6137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string_value6148 = new BitSet(new long[]{0x0000000000000002L});

}